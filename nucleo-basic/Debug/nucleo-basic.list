
nucleo-basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b248  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000381c  0801b3f8  0801b3f8  0002b3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ec14  0801ec14  0002ec14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ec1c  0801ec1c  0002ec1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ec20  0801ec20  0002ec20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  20000000  0801ec24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000300a4  2**0
                  CONTENTS
  8 .bss          0000fa30  200000a4  200000a4  000300a4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000fad4  2000fad4  000300a4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 11 .debug_info   000581dd  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000a1e4  00000000  00000000  000882b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002710  00000000  00000000  00092498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002510  00000000  00000000  00094ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037fdb  00000000  00000000  000970b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003f712  00000000  00000000  000cf093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00105483  00000000  00000000  0010e7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00213c28  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a99c  00000000  00000000  00213c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801b3e0 	.word	0x0801b3e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	0801b3e0 	.word	0x0801b3e0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000598:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <vApplicationGetIdleTaskMemory+0x30>)
 800059e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	200000c0 	.word	0x200000c0
 80005b8:	20000114 	.word	0x20000114

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fb5b 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f81f 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f8b1 	bl	8000730 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ce:	f000 f885 	bl	80006dc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005d2:	f005 fe99 	bl	8006308 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <main+0x44>)
 80005d8:	1d3c      	adds	r4, r7, #4
 80005da:	461d      	mov	r5, r3
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f00a fa15 	bl	800aa1c <osThreadCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <main+0x48>)
 80005f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f8:	f00a f9f9 	bl	800a9ee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x40>
 80005fe:	bf00      	nop
 8000600:	0801b404 	.word	0x0801b404
 8000604:	20008624 	.word	0x20008624

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f019 fe6a 	bl	801a2f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000668:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800067c:	23a8      	movs	r3, #168	; 0xa8
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fd19 	bl	80040c4 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 f916 	bl	80008c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2105      	movs	r1, #5
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 ff7a 	bl	80045b4 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 f8ff 	bl	80008c8 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART3_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000714:	f004 fc2a 	bl	8004f6c <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f8d3 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20008628 	.word	0x20008628
 800072c:	40004800 	.word	0x40004800

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4b4c      	ldr	r3, [pc, #304]	; (800087c <MX_GPIO_Init+0x14c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a4b      	ldr	r2, [pc, #300]	; (800087c <MX_GPIO_Init+0x14c>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b49      	ldr	r3, [pc, #292]	; (800087c <MX_GPIO_Init+0x14c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b45      	ldr	r3, [pc, #276]	; (800087c <MX_GPIO_Init+0x14c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a44      	ldr	r2, [pc, #272]	; (800087c <MX_GPIO_Init+0x14c>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b42      	ldr	r3, [pc, #264]	; (800087c <MX_GPIO_Init+0x14c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b3e      	ldr	r3, [pc, #248]	; (800087c <MX_GPIO_Init+0x14c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a3d      	ldr	r2, [pc, #244]	; (800087c <MX_GPIO_Init+0x14c>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b3b      	ldr	r3, [pc, #236]	; (800087c <MX_GPIO_Init+0x14c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b37      	ldr	r3, [pc, #220]	; (800087c <MX_GPIO_Init+0x14c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a36      	ldr	r2, [pc, #216]	; (800087c <MX_GPIO_Init+0x14c>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b34      	ldr	r3, [pc, #208]	; (800087c <MX_GPIO_Init+0x14c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b30      	ldr	r3, [pc, #192]	; (800087c <MX_GPIO_Init+0x14c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a2f      	ldr	r2, [pc, #188]	; (800087c <MX_GPIO_Init+0x14c>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_GPIO_Init+0x14c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_GPIO_Init+0x14c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a28      	ldr	r2, [pc, #160]	; (800087c <MX_GPIO_Init+0x14c>)
 80007dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f4:	4822      	ldr	r0, [pc, #136]	; (8000880 <MX_GPIO_Init+0x150>)
 80007f6:	f001 fedb 	bl	80025b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	4821      	ldr	r0, [pc, #132]	; (8000884 <MX_GPIO_Init+0x154>)
 8000800:	f001 fed6 	bl	80025b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <MX_GPIO_Init+0x158>)
 800081c:	f001 fd1c 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000820:	f244 0381 	movw	r3, #16513	; 0x4081
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_GPIO_Init+0x150>)
 800083a:	f001 fd0d 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083e:	2340      	movs	r3, #64	; 0x40
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <MX_GPIO_Init+0x154>)
 8000856:	f001 fcff 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_GPIO_Init+0x154>)
 800086e:	f001 fcf3 	bl	8002258 <HAL_GPIO_Init>

}
 8000872:	bf00      	nop
 8000874:	3730      	adds	r7, #48	; 0x30
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400
 8000884:	40021800 	.word	0x40021800
 8000888:	40020800 	.word	0x40020800

0800088c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000894:	f005 fe80 	bl	8006598 <MX_LWIP_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000898:	f019 f9a4 	bl	8019be4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f00a f909 	bl	800aab4 <osDelay>
 80008a2:	e7fb      	b.n	800089c <StartDefaultTask+0x10>

080008a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d101      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b6:	f000 fa03 	bl	8000cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40001000 	.word	0x40001000

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_MspInit+0x54>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a11      	ldr	r2, [pc, #68]	; (8000928 <HAL_MspInit+0x54>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x54>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_MspInit+0x54>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <HAL_MspInit+0x54>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_MspInit+0x54>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	210f      	movs	r1, #15
 8000916:	f06f 0001 	mvn.w	r0, #1
 800091a:	f000 facd 	bl	8000eb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <HAL_UART_MspInit+0x84>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d12c      	bne.n	80009a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_UART_MspInit+0x88>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000986:	f44f 7340 	mov.w	r3, #768	; 0x300
 800098a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000998:	2307      	movs	r3, #7
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <HAL_UART_MspInit+0x8c>)
 80009a4:	f001 fc58 	bl	8002258 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40004800 	.word	0x40004800
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020c00 	.word	0x40020c00

080009bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	2036      	movs	r0, #54	; 0x36
 80009d2:	f000 fa71 	bl	8000eb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009d6:	2036      	movs	r0, #54	; 0x36
 80009d8:	f000 fa8a 	bl	8000ef0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <HAL_InitTick+0xa4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <HAL_InitTick+0xa4>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <HAL_InitTick+0xa4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f003 0310 	and.w	r3, r3, #16
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f8:	f107 0210 	add.w	r2, r7, #16
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 ffd2 	bl	80049ac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a08:	f003 ffa8 	bl	800495c <HAL_RCC_GetPCLK1Freq>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a14:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <HAL_InitTick+0xa8>)
 8000a16:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1a:	0c9b      	lsrs	r3, r3, #18
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_InitTick+0xac>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <HAL_InitTick+0xb0>)
 8000a24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_InitTick+0xac>)
 8000a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a2c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_InitTick+0xac>)
 8000a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a32:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_InitTick+0xac>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_InitTick+0xac>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <HAL_InitTick+0xac>)
 8000a42:	f003 ffe5 	bl	8004a10 <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d104      	bne.n	8000a56 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <HAL_InitTick+0xac>)
 8000a4e:	f004 f839 	bl	8004ac4 <HAL_TIM_Base_Start_IT>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3730      	adds	r7, #48	; 0x30
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	431bde83 	.word	0x431bde83
 8000a68:	2000866c 	.word	0x2000866c
 8000a6c:	40001000 	.word	0x40001000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <TIM6_DAC_IRQHandler+0x10>)
 8000aa2:	f004 f87f 	bl	8004ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000866c 	.word	0x2000866c

08000ab0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <ETH_IRQHandler+0x10>)
 8000ab6:	f000 fe0d 	bl	80016d4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000a444 	.word	0x2000a444

08000ac4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <OTG_FS_IRQHandler+0x10>)
 8000aca:	f001 fff5 	bl	8002ab8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000f7c4 	.word	0x2000f7c4

08000ad8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	return 1;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_kill>:

int _kill(int pid, int sig)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <_kill+0x20>)
 8000af4:	2216      	movs	r2, #22
 8000af6:	601a      	str	r2, [r3, #0]
	return -1;
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	2000f3d8 	.word	0x2000f3d8

08000b0c <_exit>:

void _exit (int status)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ffe5 	bl	8000ae8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b1e:	e7fe      	b.n	8000b1e <_exit+0x12>

08000b20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e00a      	b.n	8000b48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b32:	f3af 8000 	nop.w
 8000b36:	4601      	mov	r1, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf0      	blt.n	8000b32 <_read+0x12>
	}

return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	e009      	b.n	8000b80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	60ba      	str	r2, [r7, #8]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbf1      	blt.n	8000b6c <_write+0x12>
	}
	return len;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x50>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <_sbrk+0x16>
		heap_end = &end;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <_sbrk+0x50>)
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <_sbrk+0x54>)
 8000ba8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <_sbrk+0x50>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <_sbrk+0x50>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	466a      	mov	r2, sp
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d905      	bls.n	8000bca <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <_sbrk+0x58>)
 8000bc0:	220c      	movs	r2, #12
 8000bc2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	e006      	b.n	8000bd8 <_sbrk+0x44>
	}

	heap_end += incr;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <_sbrk+0x50>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <_sbrk+0x50>)
 8000bd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	20000314 	.word	0x20000314
 8000be8:	2000fad4 	.word	0x2000fad4
 8000bec:	2000f3d8 	.word	0x2000f3d8

08000bf0 <_close>:

int _close(int file)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	return -1;
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c18:	605a      	str	r2, [r3, #4]
	return 0;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <_isatty>:

int _isatty(int file)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	return 1;
 8000c30:	2301      	movs	r3, #1
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
	return 0;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f8fc 	bl	8000ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	200f      	movs	r0, #15
 8000cac:	f7ff fe86 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fe10 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	200086b4 	.word	0x200086b4

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200086b4 	.word	0x200086b4

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff ffee 	bl	8000ce8 <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_Delay+0x44>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffde 	bl	8000ce8 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ff4c 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eca:	f7ff ff61 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000ece:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f7ff ffb1 	bl	8000e3c <NVIC_EncodePriority>
 8000eda:	4602      	mov	r2, r0
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff80 	bl	8000de8 <__NVIC_SetPriority>
}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff54 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000f1c:	4baa      	ldr	r3, [pc, #680]	; (80011c8 <HAL_ETH_Init+0x2bc>)
 8000f1e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e183      	b.n	800123a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d106      	bne.n	8000f4c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f005 fb96 	bl	8006678 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	4b9e      	ldr	r3, [pc, #632]	; (80011cc <HAL_ETH_Init+0x2c0>)
 8000f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f54:	4a9d      	ldr	r2, [pc, #628]	; (80011cc <HAL_ETH_Init+0x2c0>)
 8000f56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5c:	4b9b      	ldr	r3, [pc, #620]	; (80011cc <HAL_ETH_Init+0x2c0>)
 8000f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000f68:	4b99      	ldr	r3, [pc, #612]	; (80011d0 <HAL_ETH_Init+0x2c4>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4a98      	ldr	r2, [pc, #608]	; (80011d0 <HAL_ETH_Init+0x2c4>)
 8000f6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f72:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000f74:	4b96      	ldr	r3, [pc, #600]	; (80011d0 <HAL_ETH_Init+0x2c4>)
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4994      	ldr	r1, [pc, #592]	; (80011d0 <HAL_ETH_Init+0x2c4>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0201 	orr.w	r2, r2, #1
 8000f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f98:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000f9a:	f7ff fea5 	bl	8000ce8 <HAL_GetTick>
 8000f9e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000fa0:	e011      	b.n	8000fc6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000fa2:	f7ff fea1 	bl	8000ce8 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fb0:	d909      	bls.n	8000fc6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e139      	b.n	800123a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1e4      	bne.n	8000fa2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f023 031c 	bic.w	r3, r3, #28
 8000fe6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000fe8:	f003 fcac 	bl	8004944 <HAL_RCC_GetHCLKFreq>
 8000fec:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	4a78      	ldr	r2, [pc, #480]	; (80011d4 <HAL_ETH_Init+0x2c8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d908      	bls.n	8001008 <HAL_ETH_Init+0xfc>
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	4a77      	ldr	r2, [pc, #476]	; (80011d8 <HAL_ETH_Init+0x2cc>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d804      	bhi.n	8001008 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	e027      	b.n	8001058 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	4a73      	ldr	r2, [pc, #460]	; (80011d8 <HAL_ETH_Init+0x2cc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d908      	bls.n	8001022 <HAL_ETH_Init+0x116>
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	4a6d      	ldr	r2, [pc, #436]	; (80011c8 <HAL_ETH_Init+0x2bc>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d204      	bcs.n	8001022 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f043 030c 	orr.w	r3, r3, #12
 800101e:	61fb      	str	r3, [r7, #28]
 8001020:	e01a      	b.n	8001058 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4a68      	ldr	r2, [pc, #416]	; (80011c8 <HAL_ETH_Init+0x2bc>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d303      	bcc.n	8001032 <HAL_ETH_Init+0x126>
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4a6b      	ldr	r2, [pc, #428]	; (80011dc <HAL_ETH_Init+0x2d0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d911      	bls.n	8001056 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	4a69      	ldr	r2, [pc, #420]	; (80011dc <HAL_ETH_Init+0x2d0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d908      	bls.n	800104c <HAL_ETH_Init+0x140>
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	4a68      	ldr	r2, [pc, #416]	; (80011e0 <HAL_ETH_Init+0x2d4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d804      	bhi.n	800104c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e005      	b.n	8001058 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	e000      	b.n	8001058 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001056:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	69fa      	ldr	r2, [r7, #28]
 800105e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001060:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001064:	2100      	movs	r1, #0
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fc17 	bl	800189a <HAL_ETH_WritePHYRegister>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001076:	6939      	ldr	r1, [r7, #16]
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 fdcd 	bl	8001c18 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0d7      	b.n	800123a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800108a:	20ff      	movs	r0, #255	; 0xff
 800108c:	f7ff fe38 	bl	8000d00 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 80a5 	beq.w	80011e4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800109a:	f7ff fe25 	bl	8000ce8 <HAL_GetTick>
 800109e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	461a      	mov	r2, r3
 80010a6:	2101      	movs	r1, #1
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 fb8e 	bl	80017ca <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80010ae:	f7ff fe1b 	bl	8000ce8 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010bc:	4293      	cmp	r3, r2
 80010be:	d90f      	bls.n	80010e0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80010c4:	6939      	ldr	r1, [r7, #16]
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 fda6 	bl	8001c18 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e0ac      	b.n	800123a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0da      	beq.n	80010a0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80010ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ee:	2100      	movs	r1, #0
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 fbd2 	bl	800189a <HAL_ETH_WritePHYRegister>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00b      	beq.n	8001114 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001100:	6939      	ldr	r1, [r7, #16]
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 fd88 	bl	8001c18 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001110:	2301      	movs	r3, #1
 8001112:	e092      	b.n	800123a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001114:	f7ff fde8 	bl	8000ce8 <HAL_GetTick>
 8001118:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	461a      	mov	r2, r3
 8001120:	2101      	movs	r1, #1
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 fb51 	bl	80017ca <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001128:	f7ff fdde 	bl	8000ce8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	f241 3288 	movw	r2, #5000	; 0x1388
 8001136:	4293      	cmp	r3, r2
 8001138:	d90f      	bls.n	800115a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800113e:	6939      	ldr	r1, [r7, #16]
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 fd69 	bl	8001c18 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e06f      	b.n	800123a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f003 0320 	and.w	r3, r3, #32
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0da      	beq.n	800111a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	461a      	mov	r2, r3
 800116a:	2110      	movs	r1, #16
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fb2c 	bl	80017ca <HAL_ETH_ReadPHYRegister>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00b      	beq.n	8001190 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800117c:	6939      	ldr	r1, [r7, #16]
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 fd4a 	bl	8001c18 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800118c:	2301      	movs	r3, #1
 800118e:	e054      	b.n	800123a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	2b00      	cmp	r3, #0
 8001198:	d004      	beq.n	80011a4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	e002      	b.n	80011aa <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	e035      	b.n	8001228 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	e030      	b.n	8001228 <HAL_ETH_Init+0x31c>
 80011c6:	bf00      	nop
 80011c8:	03938700 	.word	0x03938700
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40013800 	.word	0x40013800
 80011d4:	01312cff 	.word	0x01312cff
 80011d8:	02160ebf 	.word	0x02160ebf
 80011dc:	05f5e0ff 	.word	0x05f5e0ff
 80011e0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	08db      	lsrs	r3, r3, #3
 80011ea:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	085b      	lsrs	r3, r3, #1
 80011f2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 fb4c 	bl	800189a <HAL_ETH_WritePHYRegister>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00b      	beq.n	8001220 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800120c:	6939      	ldr	r1, [r7, #16]
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 fd02 	bl	8001c18 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e00c      	b.n	800123a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001220:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001224:	f7ff fd6c 	bl	8000d00 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001228:	6939      	ldr	r1, [r7, #16]
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fcf4 	bl	8001c18 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop

08001244 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <HAL_ETH_DMATxDescListInit+0x20>
 8001260:	2302      	movs	r3, #2
 8001262:	e052      	b.n	800130a <HAL_ETH_DMATxDescListInit+0xc6>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2202      	movs	r2, #2
 8001270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e030      	b.n	80012e2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	015b      	lsls	r3, r3, #5
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	4413      	add	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001290:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d105      	bne.n	80012ba <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	3b01      	subs	r3, #1
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d208      	bcs.n	80012d6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	3301      	adds	r3, #1
 80012c8:	015b      	lsls	r3, r3, #5
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	4413      	add	r3, r2
 80012ce:	461a      	mov	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	e002      	b.n	80012dc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d3ca      	bcc.n	8001280 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f4:	3310      	adds	r3, #16
 80012f6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001316:	b480      	push	{r7}
 8001318:	b087      	sub	sp, #28
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_ETH_DMARxDescListInit+0x20>
 8001332:	2302      	movs	r3, #2
 8001334:	e056      	b.n	80013e4 <HAL_ETH_DMARxDescListInit+0xce>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2202      	movs	r2, #2
 8001342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e034      	b.n	80013bc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	015b      	lsls	r3, r3, #5
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001362:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800136a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	461a      	mov	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d105      	bne.n	8001394 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	3b01      	subs	r3, #1
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	429a      	cmp	r2, r3
 800139c:	d208      	bcs.n	80013b0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3301      	adds	r3, #1
 80013a2:	015b      	lsls	r3, r3, #5
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	4413      	add	r3, r2
 80013a8:	461a      	mov	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	e002      	b.n	80013b6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d3c6      	bcc.n	8001352 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ce:	330c      	adds	r3, #12
 80013d0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_ETH_TransmitFrame+0x24>
 8001410:	2302      	movs	r3, #2
 8001412:	e0cd      	b.n	80015b0 <HAL_ETH_TransmitFrame+0x1c0>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2202      	movs	r2, #2
 8001420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d109      	bne.n	800143e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800143a:	2301      	movs	r3, #1
 800143c:	e0b8      	b.n	80015b0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	da09      	bge.n	800145c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2212      	movs	r2, #18
 800144c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0a9      	b.n	80015b0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001462:	4293      	cmp	r3, r2
 8001464:	d915      	bls.n	8001492 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	4a54      	ldr	r2, [pc, #336]	; (80015bc <HAL_ETH_TransmitFrame+0x1cc>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	0a9b      	lsrs	r3, r3, #10
 8001470:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	4b51      	ldr	r3, [pc, #324]	; (80015bc <HAL_ETH_TransmitFrame+0x1cc>)
 8001476:	fba3 1302 	umull	r1, r3, r3, r2
 800147a:	0a9b      	lsrs	r3, r3, #10
 800147c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001480:	fb01 f303 	mul.w	r3, r1, r3
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3301      	adds	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	e001      	b.n	8001496 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d11c      	bne.n	80014d6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80014aa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80014b6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014c6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	461a      	mov	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80014d4:	e04b      	b.n	800156e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	e044      	b.n	8001566 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014ea:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d107      	bne.n	8001502 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001500:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800150a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3b01      	subs	r3, #1
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	429a      	cmp	r2, r3
 8001514:	d116      	bne.n	8001544 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001524:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	4a25      	ldr	r2, [pc, #148]	; (80015c0 <HAL_ETH_TransmitFrame+0x1d0>)
 800152a:	fb02 f203 	mul.w	r2, r2, r3
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	4413      	add	r3, r2
 8001532:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001536:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001542:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001552:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	461a      	mov	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	3301      	adds	r3, #1
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	429a      	cmp	r2, r3
 800156c:	d3b6      	bcc.n	80014dc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001576:	3314      	adds	r3, #20
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00d      	beq.n	800159e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158a:	3314      	adds	r3, #20
 800158c:	2204      	movs	r2, #4
 800158e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001598:	3304      	adds	r3, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	ac02b00b 	.word	0xac02b00b
 80015c0:	fffffa0c 	.word	0xfffffa0c

080015c4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80015da:	2302      	movs	r3, #2
 80015dc:	e074      	b.n	80016c8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2202      	movs	r2, #2
 80015ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80015ee:	e05a      	b.n	80016a6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3301      	adds	r3, #1
 80015f4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001604:	d10d      	bne.n	8001622 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	461a      	mov	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
 8001620:	e041      	b.n	80016a6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10b      	bne.n	8001648 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	461a      	mov	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
 8001646:	e02e      	b.n	80016a6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	2b01      	cmp	r3, #1
 8001660:	d103      	bne.n	800166a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0c1b      	lsrs	r3, r3, #16
 8001672:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001676:	1f1a      	subs	r2, r3, #4
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e010      	b.n	80016c8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db02      	blt.n	80016b6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d99c      	bls.n	80015f0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e4:	3314      	adds	r3, #20
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ec:	2b40      	cmp	r3, #64	; 0x40
 80016ee:	d112      	bne.n	8001716 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f005 f88f 	bl	8006814 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016fe:	3314      	adds	r3, #20
 8001700:	2240      	movs	r2, #64	; 0x40
 8001702:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001714:	e01b      	b.n	800174e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171e:	3314      	adds	r3, #20
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b01      	cmp	r3, #1
 8001728:	d111      	bne.n	800174e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f839 	bl	80017a2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001738:	3314      	adds	r3, #20
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001756:	3314      	adds	r3, #20
 8001758:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800175c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001766:	3314      	adds	r3, #20
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800176e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001772:	d112      	bne.n	800179a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f81e 	bl	80017b6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001782:	3314      	adds	r3, #20
 8001784:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001788:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	460b      	mov	r3, r1
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b82      	cmp	r3, #130	; 0x82
 80017ea:	d101      	bne.n	80017f0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80017ec:	2302      	movs	r3, #2
 80017ee:	e050      	b.n	8001892 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2282      	movs	r2, #130	; 0x82
 80017f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f003 031c 	and.w	r3, r3, #28
 8001806:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8a1b      	ldrh	r3, [r3, #16]
 800180c:	02db      	lsls	r3, r3, #11
 800180e:	b29b      	uxth	r3, r3
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	4313      	orrs	r3, r2
 8001814:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001816:	897b      	ldrh	r3, [r7, #10]
 8001818:	019b      	lsls	r3, r3, #6
 800181a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4313      	orrs	r3, r2
 8001822:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f023 0302 	bic.w	r3, r3, #2
 800182a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800183c:	f7ff fa54 	bl	8000ce8 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001842:	e015      	b.n	8001870 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001844:	f7ff fa50 	bl	8000ce8 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001852:	d309      	bcc.n	8001868 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e014      	b.n	8001892 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1e4      	bne.n	8001844 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	b29b      	uxth	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	460b      	mov	r3, r1
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b42      	cmp	r3, #66	; 0x42
 80018ba:	d101      	bne.n	80018c0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80018bc:	2302      	movs	r3, #2
 80018be:	e04e      	b.n	800195e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2242      	movs	r2, #66	; 0x42
 80018c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 031c 	and.w	r3, r3, #28
 80018d6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8a1b      	ldrh	r3, [r3, #16]
 80018dc:	02db      	lsls	r3, r3, #11
 80018de:	b29b      	uxth	r3, r3
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80018e6:	897b      	ldrh	r3, [r7, #10]
 80018e8:	019b      	lsls	r3, r3, #6
 80018ea:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	b29a      	uxth	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001916:	f7ff f9e7 	bl	8000ce8 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800191c:	e015      	b.n	800194a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800191e:	f7ff f9e3 	bl	8000ce8 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192c:	d309      	bcc.n	8001942 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e00d      	b.n	800195e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e4      	bne.n	800191e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_ETH_Start+0x16>
 8001978:	2302      	movs	r3, #2
 800197a:	e01f      	b.n	80019bc <HAL_ETH_Start+0x56>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fb45 	bl	800201c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fb7c 	bl	8002090 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 fc13 	bl	80021c4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fbb0 	bl	8002104 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 fbdd 	bl	8002164 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_ETH_Stop+0x16>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e01f      	b.n	8001a1a <HAL_ETH_Stop+0x56>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2202      	movs	r2, #2
 80019e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 fba2 	bl	8002134 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fbcf 	bl	8002194 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fb67 	bl	80020ca <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 fbe1 	bl	80021c4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fb27 	bl	8002056 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ETH_ConfigMAC+0x1c>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0e4      	b.n	8001c0a <HAL_ETH_ConfigMAC+0x1e6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80b1 	beq.w	8001bba <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4b6c      	ldr	r3, [pc, #432]	; (8001c14 <HAL_ETH_ConfigMAC+0x1f0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001a70:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001a76:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001a7c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001a82:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001a88:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001a8e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001a94:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001a9a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001aa0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001aa6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001aac:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001ab2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aca:	2001      	movs	r0, #1
 8001acc:	f7ff f918 	bl	8000d00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ae0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001ae6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001aec:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001af2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001af8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001afe:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001b0a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b0c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b16:	2001      	movs	r0, #1
 8001b18:	f7ff f8f2 	bl	8000d00 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b2c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b36:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b46:	4013      	ands	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001b54:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001b5a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001b60:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001b66:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001b6c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff f8bb 	bl	8000d00 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001baa:	2001      	movs	r0, #1
 8001bac:	f7ff f8a8 	bl	8000d00 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	61da      	str	r2, [r3, #28]
 8001bb8:	e01e      	b.n	8001bf8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001bc8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f7ff f888 	bl	8000d00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	ff20810f 	.word	0xff20810f

08001c18 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0b0      	sub	sp, #192	; 0xc0
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c34:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001c46:	2300      	movs	r3, #0
 8001c48:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d103      	bne.n	8001c66 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c62:	663b      	str	r3, [r7, #96]	; 0x60
 8001c64:	e001      	b.n	8001c6a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c6e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c74:	2300      	movs	r3, #0
 8001c76:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001c84:	2340      	movs	r3, #64	; 0x40
 8001c86:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001cec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cf0:	4bac      	ldr	r3, [pc, #688]	; (8001fa4 <ETH_MACDMAConfig+0x38c>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001cfc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001d00:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001d04:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001d0a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001d0e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001d12:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001d18:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001d1c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001d20:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001d24:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001d28:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001d2c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001d2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d32:	4313      	orrs	r3, r2
 8001d34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d40:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f7fe ffd7 	bl	8000d00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d5a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d5c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d60:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001d64:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001d66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001d6a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001d70:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001d76:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001d7c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001d80:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001d88:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d8a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d96:	2001      	movs	r0, #1
 8001d98:	f7fe ffb2 	bl	8000d00 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001da4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001dae:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001db8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001dc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dc8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001dcc:	4013      	ands	r3, r2
 8001dce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001dd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dd6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001dd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ddc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001de2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001de4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001de8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001dee:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001df0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001df4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001df6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e08:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7fe ff73 	bl	8000d00 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e22:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001e24:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001e28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f7fe ff5e 	bl	8000d00 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e4c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e56:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001e5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e60:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001e72:	2304      	movs	r3, #4
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e8c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea2:	3318      	adds	r3, #24
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001eaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eae:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <ETH_MACDMAConfig+0x390>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001eb6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001eba:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001ebc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001ebe:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001ec0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001ec2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001ec4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001ec6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001ec8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001eca:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001ece:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001ed2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001ed6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ed8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eea:	3318      	adds	r3, #24
 8001eec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ef0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001efa:	3318      	adds	r3, #24
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f7fe fefc 	bl	8000d00 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f10:	3318      	adds	r3, #24
 8001f12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f16:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f1c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001f20:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f24:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001f28:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f2c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001f2e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001f32:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f40:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f50:	2001      	movs	r0, #1
 8001f52:	f7fe fed5 	bl	8000d00 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f62:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d10f      	bne.n	8001f8c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f74:	331c      	adds	r3, #28
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f88:	331c      	adds	r3, #28
 8001f8a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	461a      	mov	r2, r3
 8001f92:	2100      	movs	r1, #0
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f809 	bl	8001fac <ETH_MACAddressConfig>
}
 8001f9a:	bf00      	nop
 8001f9c:	37c0      	adds	r7, #192	; 0xc0
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	ff20810f 	.word	0xff20810f
 8001fa8:	f8de3f23 	.word	0xf8de3f23

08001fac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3305      	adds	r3, #5
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	3204      	adds	r2, #4
 8001fc4:	7812      	ldrb	r2, [r2, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <ETH_MACAddressConfig+0x68>)
 8001fce:	4413      	add	r3, r2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3303      	adds	r3, #3
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	061a      	lsls	r2, r3, #24
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	041b      	lsls	r3, r3, #16
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3301      	adds	r3, #1
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <ETH_MACAddressConfig+0x6c>)
 8001ffe:	4413      	add	r3, r2
 8002000:	461a      	mov	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	6013      	str	r3, [r2, #0]
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40028040 	.word	0x40028040
 8002018:	40028044 	.word	0x40028044

0800201c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0208 	orr.w	r2, r2, #8
 8002036:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002040:	2001      	movs	r0, #1
 8002042:	f000 f8e9 	bl	8002218 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	601a      	str	r2, [r3, #0]
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0208 	bic.w	r2, r2, #8
 8002070:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800207a:	2001      	movs	r0, #1
 800207c:	f000 f8cc 	bl	8002218 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0204 	orr.w	r2, r2, #4
 80020aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f000 f8af 	bl	8002218 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	601a      	str	r2, [r3, #0]
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0204 	bic.w	r2, r2, #4
 80020e4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f000 f892 	bl	8002218 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	601a      	str	r2, [r3, #0]
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002114:	3318      	adds	r3, #24
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002124:	3318      	adds	r3, #24
 8002126:	601a      	str	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002144:	3318      	adds	r3, #24
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002154:	3318      	adds	r3, #24
 8002156:	601a      	str	r2, [r3, #0]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002174:	3318      	adds	r3, #24
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0202 	orr.w	r2, r2, #2
 8002180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002184:	3318      	adds	r3, #24
 8002186:	601a      	str	r2, [r3, #0]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a4:	3318      	adds	r3, #24
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0202 	bic.w	r2, r2, #2
 80021b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b4:	3318      	adds	r3, #24
 80021b6:	601a      	str	r2, [r3, #0]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d8:	3318      	adds	r3, #24
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e8:	3318      	adds	r3, #24
 80021ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f4:	3318      	adds	r3, #24
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f000 f80c 	bl	8002218 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220a:	3318      	adds	r3, #24
 800220c:	601a      	str	r2, [r3, #0]
}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <ETH_Delay+0x38>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <ETH_Delay+0x3c>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0a5b      	lsrs	r3, r3, #9
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	fb02 f303 	mul.w	r3, r2, r3
 8002232:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002234:	bf00      	nop
  } 
  while (Delay --);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1e5a      	subs	r2, r3, #1
 800223a:	60fa      	str	r2, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f9      	bne.n	8002234 <ETH_Delay+0x1c>
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000000 	.word	0x20000000
 8002254:	10624dd3 	.word	0x10624dd3

08002258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	e177      	b.n	8002564 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	429a      	cmp	r2, r3
 800228e:	f040 8166 	bne.w	800255e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d005      	beq.n	80022aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d130      	bne.n	800230c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e0:	2201      	movs	r2, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 0201 	and.w	r2, r3, #1
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b03      	cmp	r3, #3
 8002316:	d017      	beq.n	8002348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d123      	bne.n	800239c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	08da      	lsrs	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	220f      	movs	r2, #15
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	69b9      	ldr	r1, [r7, #24]
 8002398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0203 	and.w	r2, r3, #3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80c0 	beq.w	800255e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b66      	ldr	r3, [pc, #408]	; (800257c <HAL_GPIO_Init+0x324>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	4a65      	ldr	r2, [pc, #404]	; (800257c <HAL_GPIO_Init+0x324>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	4b63      	ldr	r3, [pc, #396]	; (800257c <HAL_GPIO_Init+0x324>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fa:	4a61      	ldr	r2, [pc, #388]	; (8002580 <HAL_GPIO_Init+0x328>)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	220f      	movs	r2, #15
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a58      	ldr	r2, [pc, #352]	; (8002584 <HAL_GPIO_Init+0x32c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d037      	beq.n	8002496 <HAL_GPIO_Init+0x23e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a57      	ldr	r2, [pc, #348]	; (8002588 <HAL_GPIO_Init+0x330>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d031      	beq.n	8002492 <HAL_GPIO_Init+0x23a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a56      	ldr	r2, [pc, #344]	; (800258c <HAL_GPIO_Init+0x334>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d02b      	beq.n	800248e <HAL_GPIO_Init+0x236>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a55      	ldr	r2, [pc, #340]	; (8002590 <HAL_GPIO_Init+0x338>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d025      	beq.n	800248a <HAL_GPIO_Init+0x232>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a54      	ldr	r2, [pc, #336]	; (8002594 <HAL_GPIO_Init+0x33c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01f      	beq.n	8002486 <HAL_GPIO_Init+0x22e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a53      	ldr	r2, [pc, #332]	; (8002598 <HAL_GPIO_Init+0x340>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d019      	beq.n	8002482 <HAL_GPIO_Init+0x22a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a52      	ldr	r2, [pc, #328]	; (800259c <HAL_GPIO_Init+0x344>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_GPIO_Init+0x226>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a51      	ldr	r2, [pc, #324]	; (80025a0 <HAL_GPIO_Init+0x348>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00d      	beq.n	800247a <HAL_GPIO_Init+0x222>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a50      	ldr	r2, [pc, #320]	; (80025a4 <HAL_GPIO_Init+0x34c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <HAL_GPIO_Init+0x21e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4f      	ldr	r2, [pc, #316]	; (80025a8 <HAL_GPIO_Init+0x350>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_GPIO_Init+0x21a>
 800246e:	2309      	movs	r3, #9
 8002470:	e012      	b.n	8002498 <HAL_GPIO_Init+0x240>
 8002472:	230a      	movs	r3, #10
 8002474:	e010      	b.n	8002498 <HAL_GPIO_Init+0x240>
 8002476:	2308      	movs	r3, #8
 8002478:	e00e      	b.n	8002498 <HAL_GPIO_Init+0x240>
 800247a:	2307      	movs	r3, #7
 800247c:	e00c      	b.n	8002498 <HAL_GPIO_Init+0x240>
 800247e:	2306      	movs	r3, #6
 8002480:	e00a      	b.n	8002498 <HAL_GPIO_Init+0x240>
 8002482:	2305      	movs	r3, #5
 8002484:	e008      	b.n	8002498 <HAL_GPIO_Init+0x240>
 8002486:	2304      	movs	r3, #4
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x240>
 800248a:	2303      	movs	r3, #3
 800248c:	e004      	b.n	8002498 <HAL_GPIO_Init+0x240>
 800248e:	2302      	movs	r3, #2
 8002490:	e002      	b.n	8002498 <HAL_GPIO_Init+0x240>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_GPIO_Init+0x240>
 8002496:	2300      	movs	r3, #0
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	f002 0203 	and.w	r2, r2, #3
 800249e:	0092      	lsls	r2, r2, #2
 80024a0:	4093      	lsls	r3, r2
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a8:	4935      	ldr	r1, [pc, #212]	; (8002580 <HAL_GPIO_Init+0x328>)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b6:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <HAL_GPIO_Init+0x354>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024da:	4a34      	ldr	r2, [pc, #208]	; (80025ac <HAL_GPIO_Init+0x354>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024e0:	4b32      	ldr	r3, [pc, #200]	; (80025ac <HAL_GPIO_Init+0x354>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002504:	4a29      	ldr	r2, [pc, #164]	; (80025ac <HAL_GPIO_Init+0x354>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250a:	4b28      	ldr	r3, [pc, #160]	; (80025ac <HAL_GPIO_Init+0x354>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252e:	4a1f      	ldr	r2, [pc, #124]	; (80025ac <HAL_GPIO_Init+0x354>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_GPIO_Init+0x354>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <HAL_GPIO_Init+0x354>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3301      	adds	r3, #1
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	2b0f      	cmp	r3, #15
 8002568:	f67f ae84 	bls.w	8002274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3724      	adds	r7, #36	; 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	40013800 	.word	0x40013800
 8002584:	40020000 	.word	0x40020000
 8002588:	40020400 	.word	0x40020400
 800258c:	40020800 	.word	0x40020800
 8002590:	40020c00 	.word	0x40020c00
 8002594:	40021000 	.word	0x40021000
 8002598:	40021400 	.word	0x40021400
 800259c:	40021800 	.word	0x40021800
 80025a0:	40021c00 	.word	0x40021c00
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40022400 	.word	0x40022400
 80025ac:	40013c00 	.word	0x40013c00

080025b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
 80025bc:	4613      	mov	r3, r2
 80025be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c0:	787b      	ldrb	r3, [r7, #1]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025cc:	e003      	b.n	80025d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ce:	887b      	ldrh	r3, [r7, #2]
 80025d0:	041a      	lsls	r2, r3, #16
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	619a      	str	r2, [r3, #24]
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80025e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e4:	b08f      	sub	sp, #60	; 0x3c
 80025e6:	af0a      	add	r7, sp, #40	; 0x28
 80025e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e054      	b.n	800269e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f017 fb3c 	bl	8019c8c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2203      	movs	r2, #3
 8002618:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f002 ff22 	bl	800547c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	687e      	ldr	r6, [r7, #4]
 8002640:	466d      	mov	r5, sp
 8002642:	f106 0410 	add.w	r4, r6, #16
 8002646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800264a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800264c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800264e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002652:	e885 0003 	stmia.w	r5, {r0, r1}
 8002656:	1d33      	adds	r3, r6, #4
 8002658:	cb0e      	ldmia	r3, {r1, r2, r3}
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	f002 fe9c 	bl	8005398 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	4618      	mov	r0, r3
 8002668:	f002 ff19 	bl	800549e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	687e      	ldr	r6, [r7, #4]
 8002674:	466d      	mov	r5, sp
 8002676:	f106 0410 	add.w	r4, r6, #16
 800267a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800267c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800267e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002682:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002686:	e885 0003 	stmia.w	r5, {r0, r1}
 800268a:	1d33      	adds	r3, r6, #4
 800268c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800268e:	6838      	ldr	r0, [r7, #0]
 8002690:	f003 f880 	bl	8005794 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026a6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80026a6:	b590      	push	{r4, r7, lr}
 80026a8:	b089      	sub	sp, #36	; 0x24
 80026aa:	af04      	add	r7, sp, #16
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	4608      	mov	r0, r1
 80026b0:	4611      	mov	r1, r2
 80026b2:	461a      	mov	r2, r3
 80026b4:	4603      	mov	r3, r0
 80026b6:	70fb      	strb	r3, [r7, #3]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70bb      	strb	r3, [r7, #2]
 80026bc:	4613      	mov	r3, r2
 80026be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_HCD_HC_Init+0x28>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e076      	b.n	80027bc <HAL_HCD_HC_Init+0x116>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	333d      	adds	r3, #61	; 0x3d
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3338      	adds	r3, #56	; 0x38
 80026f6:	787a      	ldrb	r2, [r7, #1]
 80026f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	3340      	adds	r3, #64	; 0x40
 8002708:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800270a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	212c      	movs	r1, #44	; 0x2c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	3339      	adds	r3, #57	; 0x39
 800271a:	78fa      	ldrb	r2, [r7, #3]
 800271c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	333f      	adds	r3, #63	; 0x3f
 800272c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002730:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	78ba      	ldrb	r2, [r7, #2]
 8002736:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800273a:	b2d0      	uxtb	r0, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	333a      	adds	r3, #58	; 0x3a
 8002748:	4602      	mov	r2, r0
 800274a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800274c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002750:	2b00      	cmp	r3, #0
 8002752:	da09      	bge.n	8002768 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	212c      	movs	r1, #44	; 0x2c
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	4413      	add	r3, r2
 8002760:	333b      	adds	r3, #59	; 0x3b
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e008      	b.n	800277a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	333b      	adds	r3, #59	; 0x3b
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	333c      	adds	r3, #60	; 0x3c
 8002788:	f897 2020 	ldrb.w	r2, [r7, #32]
 800278c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	787c      	ldrb	r4, [r7, #1]
 8002794:	78ba      	ldrb	r2, [r7, #2]
 8002796:	78f9      	ldrb	r1, [r7, #3]
 8002798:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800279a:	9302      	str	r3, [sp, #8]
 800279c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	4623      	mov	r3, r4
 80027aa:	f003 f96d 	bl	8005a88 <USB_HC_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd90      	pop	{r4, r7, pc}

080027c4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_HCD_HC_Halt+0x1e>
 80027de:	2302      	movs	r3, #2
 80027e0:	e00f      	b.n	8002802 <HAL_HCD_HC_Halt+0x3e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fba9 	bl	8005f4a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	4608      	mov	r0, r1
 8002816:	4611      	mov	r1, r2
 8002818:	461a      	mov	r2, r3
 800281a:	4603      	mov	r3, r0
 800281c:	70fb      	strb	r3, [r7, #3]
 800281e:	460b      	mov	r3, r1
 8002820:	70bb      	strb	r3, [r7, #2]
 8002822:	4613      	mov	r3, r2
 8002824:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	333b      	adds	r3, #59	; 0x3b
 8002834:	78ba      	ldrb	r2, [r7, #2]
 8002836:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	212c      	movs	r1, #44	; 0x2c
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	4413      	add	r3, r2
 8002844:	333f      	adds	r3, #63	; 0x3f
 8002846:	787a      	ldrb	r2, [r7, #1]
 8002848:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800284a:	7c3b      	ldrb	r3, [r7, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d112      	bne.n	8002876 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	3342      	adds	r3, #66	; 0x42
 800285e:	2203      	movs	r2, #3
 8002860:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	333d      	adds	r3, #61	; 0x3d
 8002870:	7f3a      	ldrb	r2, [r7, #28]
 8002872:	701a      	strb	r2, [r3, #0]
 8002874:	e008      	b.n	8002888 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	3342      	adds	r3, #66	; 0x42
 8002884:	2202      	movs	r2, #2
 8002886:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002888:	787b      	ldrb	r3, [r7, #1]
 800288a:	2b03      	cmp	r3, #3
 800288c:	f200 80c6 	bhi.w	8002a1c <HAL_HCD_HC_SubmitRequest+0x210>
 8002890:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028a9 	.word	0x080028a9
 800289c:	08002a09 	.word	0x08002a09
 80028a0:	0800290d 	.word	0x0800290d
 80028a4:	0800298b 	.word	0x0800298b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80028a8:	7c3b      	ldrb	r3, [r7, #16]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	f040 80b8 	bne.w	8002a20 <HAL_HCD_HC_SubmitRequest+0x214>
 80028b0:	78bb      	ldrb	r3, [r7, #2]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 80b4 	bne.w	8002a20 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80028b8:	8b3b      	ldrh	r3, [r7, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d108      	bne.n	80028d0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	3355      	adds	r3, #85	; 0x55
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3355      	adds	r3, #85	; 0x55
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	212c      	movs	r1, #44	; 0x2c
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	3342      	adds	r3, #66	; 0x42
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028f6:	e093      	b.n	8002a20 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3342      	adds	r3, #66	; 0x42
 8002906:	2202      	movs	r2, #2
 8002908:	701a      	strb	r2, [r3, #0]
      break;
 800290a:	e089      	b.n	8002a20 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800290c:	78bb      	ldrb	r3, [r7, #2]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d11d      	bne.n	800294e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3355      	adds	r3, #85	; 0x55
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002926:	78fb      	ldrb	r3, [r7, #3]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	3342      	adds	r3, #66	; 0x42
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002938:	e073      	b.n	8002a22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3342      	adds	r3, #66	; 0x42
 8002948:	2202      	movs	r2, #2
 800294a:	701a      	strb	r2, [r3, #0]
      break;
 800294c:	e069      	b.n	8002a22 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3354      	adds	r3, #84	; 0x54
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	3342      	adds	r3, #66	; 0x42
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
      break;
 8002974:	e055      	b.n	8002a22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3342      	adds	r3, #66	; 0x42
 8002984:	2202      	movs	r2, #2
 8002986:	701a      	strb	r2, [r3, #0]
      break;
 8002988:	e04b      	b.n	8002a22 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800298a:	78bb      	ldrb	r3, [r7, #2]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d11d      	bne.n	80029cc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3355      	adds	r3, #85	; 0x55
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d109      	bne.n	80029b8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3342      	adds	r3, #66	; 0x42
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029b6:	e034      	b.n	8002a22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3342      	adds	r3, #66	; 0x42
 80029c6:	2202      	movs	r2, #2
 80029c8:	701a      	strb	r2, [r3, #0]
      break;
 80029ca:	e02a      	b.n	8002a22 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3354      	adds	r3, #84	; 0x54
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3342      	adds	r3, #66	; 0x42
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
      break;
 80029f2:	e016      	b.n	8002a22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3342      	adds	r3, #66	; 0x42
 8002a02:	2202      	movs	r2, #2
 8002a04:	701a      	strb	r2, [r3, #0]
      break;
 8002a06:	e00c      	b.n	8002a22 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3342      	adds	r3, #66	; 0x42
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
      break;
 8002a1a:	e002      	b.n	8002a22 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002a1c:	bf00      	nop
 8002a1e:	e000      	b.n	8002a22 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002a20:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3344      	adds	r3, #68	; 0x44
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	8b3a      	ldrh	r2, [r7, #24]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	202c      	movs	r0, #44	; 0x2c
 8002a3c:	fb00 f303 	mul.w	r3, r0, r3
 8002a40:	440b      	add	r3, r1
 8002a42:	334c      	adds	r3, #76	; 0x4c
 8002a44:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3360      	adds	r3, #96	; 0x60
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3350      	adds	r3, #80	; 0x50
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	3339      	adds	r3, #57	; 0x39
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3361      	adds	r3, #97	; 0x61
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	222c      	movs	r2, #44	; 0x2c
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	3338      	adds	r3, #56	; 0x38
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	18d1      	adds	r1, r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f003 f8fc 	bl	8005ca4 <USB_HC_StartXfer>
 8002aac:	4603      	mov	r3, r0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop

08002ab8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f002 fe1f 	bl	8005712 <USB_GetMode>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	f040 80f6 	bne.w	8002cc8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f002 fe03 	bl	80056ec <USB_ReadInterrupts>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80ec 	beq.w	8002cc6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f002 fdfa 	bl	80056ec <USB_ReadInterrupts>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b02:	d104      	bne.n	8002b0e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f002 fdea 	bl	80056ec <USB_ReadInterrupts>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b22:	d104      	bne.n	8002b2e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f002 fdda 	bl	80056ec <USB_ReadInterrupts>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b42:	d104      	bne.n	8002b4e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 fdca 	bl	80056ec <USB_ReadInterrupts>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d103      	bne.n	8002b6a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2202      	movs	r2, #2
 8002b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 fdbc 	bl	80056ec <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b7e:	d11c      	bne.n	8002bba <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b88:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10f      	bne.n	8002bba <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002b9a:	2110      	movs	r1, #16
 8002b9c:	6938      	ldr	r0, [r7, #16]
 8002b9e:	f002 fccb 	bl	8005538 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002ba2:	6938      	ldr	r0, [r7, #16]
 8002ba4:	f002 fcec 	bl	8005580 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2101      	movs	r1, #1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 fea4 	bl	80058fc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f017 f8e7 	bl	8019d88 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f002 fd94 	bl	80056ec <USB_ReadInterrupts>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bce:	d102      	bne.n	8002bd6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f001 fa03 	bl	8003fdc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f002 fd86 	bl	80056ec <USB_ReadInterrupts>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d106      	bne.n	8002bf8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f017 f8b0 	bl	8019d50 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f002 fd75 	bl	80056ec <USB_ReadInterrupts>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b10      	cmp	r3, #16
 8002c0a:	d101      	bne.n	8002c10 <HAL_HCD_IRQHandler+0x158>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_HCD_IRQHandler+0x15a>
 8002c10:	2300      	movs	r3, #0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0210 	bic.w	r2, r2, #16
 8002c24:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f001 f906 	bl	8003e38 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0210 	orr.w	r2, r2, #16
 8002c3a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f002 fd53 	bl	80056ec <USB_ReadInterrupts>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c50:	d13a      	bne.n	8002cc8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f003 f966 	bl	8005f28 <USB_HC_ReadInterrupt>
 8002c5c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	e025      	b.n	8002cb0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d018      	beq.n	8002caa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c8e:	d106      	bne.n	8002c9e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	4619      	mov	r1, r3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f8ab 	bl	8002df2 <HCD_HC_IN_IRQHandler>
 8002c9c:	e005      	b.n	8002caa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fcc6 	bl	8003636 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	3301      	adds	r3, #1
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d3d4      	bcc.n	8002c64 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc2:	615a      	str	r2, [r3, #20]
 8002cc4:	e000      	b.n	8002cc8 <HAL_HCD_IRQHandler+0x210>
      return;
 8002cc6:	bf00      	nop
    }
  }
}
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_HCD_Start+0x16>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e013      	b.n	8002d0c <HAL_HCD_Start+0x3e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f002 fe66 	bl	80059c4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f002 fbac 	bl	800545a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_HCD_Stop+0x16>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e00d      	b.n	8002d46 <HAL_HCD_Stop+0x32>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 fa60 	bl	80061fc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f002 fe08 	bl	8005970 <USB_ResetPort>
 8002d60:	4603      	mov	r3, r0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	3360      	adds	r3, #96	; 0x60
 8002d84:	781b      	ldrb	r3, [r3, #0]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	3350      	adds	r3, #80	; 0x50
 8002dac:	681b      	ldr	r3, [r3, #0]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f002 fe4c 	bl	8005a64 <USB_GetCurrentFrame>
 8002dcc:	4603      	mov	r3, r0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f002 fe27 	bl	8005a36 <USB_GetHostSpeed>
 8002de8:	4603      	mov	r3, r0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d119      	bne.n	8002e56 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2304      	movs	r3, #4
 8002e32:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	0151      	lsls	r1, r2, #5
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	440a      	add	r2, r1
 8002e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e4e:	f043 0302 	orr.w	r3, r3, #2
 8002e52:	60d3      	str	r3, [r2, #12]
 8002e54:	e101      	b.n	800305a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e6c:	d12b      	bne.n	8002ec6 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3361      	adds	r3, #97	; 0x61
 8002e90:	2207      	movs	r2, #7
 8002e92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	0151      	lsls	r1, r2, #5
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	440a      	add	r2, r1
 8002eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eae:	f043 0302 	orr.w	r3, r3, #2
 8002eb2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 f843 	bl	8005f4a <USB_HC_Halt>
 8002ec4:	e0c9      	b.n	800305a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d109      	bne.n	8002ef0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2320      	movs	r3, #32
 8002eec:	6093      	str	r3, [r2, #8]
 8002eee:	e0b4      	b.n	800305a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d133      	bne.n	8002f6e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	0151      	lsls	r1, r2, #5
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	440a      	add	r2, r1
 8002f1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	212c      	movs	r1, #44	; 0x2c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	3361      	adds	r3, #97	; 0x61
 8002f34:	2205      	movs	r2, #5
 8002f36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f44:	461a      	mov	r2, r3
 8002f46:	2310      	movs	r3, #16
 8002f48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f56:	461a      	mov	r2, r3
 8002f58:	2308      	movs	r3, #8
 8002f5a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f002 ffef 	bl	8005f4a <USB_HC_Halt>
 8002f6c:	e075      	b.n	800305a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f84:	d134      	bne.n	8002ff0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	0151      	lsls	r1, r2, #5
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	440a      	add	r2, r1
 8002f9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fa0:	f043 0302 	orr.w	r3, r3, #2
 8002fa4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	212c      	movs	r1, #44	; 0x2c
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3361      	adds	r3, #97	; 0x61
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2310      	movs	r3, #16
 8002fc8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fdc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f002 ffae 	bl	8005f4a <USB_HC_Halt>
 8002fee:	e034      	b.n	800305a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b80      	cmp	r3, #128	; 0x80
 8003004:	d129      	bne.n	800305a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4413      	add	r3, r2
 800300e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	0151      	lsls	r1, r2, #5
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	440a      	add	r2, r1
 800301c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003020:	f043 0302 	orr.w	r3, r3, #2
 8003024:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	3361      	adds	r3, #97	; 0x61
 8003034:	2206      	movs	r2, #6
 8003036:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f002 ff81 	bl	8005f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003070:	d122      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	0151      	lsls	r1, r2, #5
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	440a      	add	r2, r1
 8003088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800308c:	f043 0302 	orr.w	r3, r3, #2
 8003090:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f002 ff54 	bl	8005f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	461a      	mov	r2, r3
 80030b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030b4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80030b6:	e2ba      	b.n	800362e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	f040 811b 	bne.w	8003306 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d019      	beq.n	800310c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3348      	adds	r3, #72	; 0x48
 80030e6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	0159      	lsls	r1, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	440b      	add	r3, r1
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80030fa:	1ad2      	subs	r2, r2, r3
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	202c      	movs	r0, #44	; 0x2c
 8003102:	fb00 f303 	mul.w	r3, r0, r3
 8003106:	440b      	add	r3, r1
 8003108:	3350      	adds	r3, #80	; 0x50
 800310a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	3361      	adds	r3, #97	; 0x61
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	212c      	movs	r1, #44	; 0x2c
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	4413      	add	r3, r2
 800312a:	335c      	adds	r3, #92	; 0x5c
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	461a      	mov	r2, r3
 800313e:	2301      	movs	r3, #1
 8003140:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	212c      	movs	r1, #44	; 0x2c
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	333f      	adds	r3, #63	; 0x3f
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	333f      	adds	r3, #63	; 0x3f
 8003164:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003166:	2b02      	cmp	r3, #2
 8003168:	d121      	bne.n	80031ae <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	0151      	lsls	r1, r2, #5
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	440a      	add	r2, r1
 8003180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f002 fed8 	bl	8005f4a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	461a      	mov	r2, r3
 80031a8:	2310      	movs	r3, #16
 80031aa:	6093      	str	r3, [r2, #8]
 80031ac:	e066      	b.n	800327c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	333f      	adds	r3, #63	; 0x3f
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d127      	bne.n	8003212 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	0151      	lsls	r1, r2, #5
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	440a      	add	r2, r1
 80031d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031e0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	212c      	movs	r1, #44	; 0x2c
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	4413      	add	r3, r2
 80031ee:	3360      	adds	r3, #96	; 0x60
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	b2d9      	uxtb	r1, r3
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	202c      	movs	r0, #44	; 0x2c
 80031fe:	fb00 f303 	mul.w	r3, r0, r3
 8003202:	4413      	add	r3, r2
 8003204:	3360      	adds	r3, #96	; 0x60
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f016 fdca 	bl	8019da4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003210:	e034      	b.n	800327c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	333f      	adds	r3, #63	; 0x3f
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d12a      	bne.n	800327c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	3360      	adds	r3, #96	; 0x60
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3354      	adds	r3, #84	; 0x54
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	f083 0301 	eor.w	r3, r3, #1
 800324c:	b2d8      	uxtb	r0, r3
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	212c      	movs	r1, #44	; 0x2c
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	3354      	adds	r3, #84	; 0x54
 800325c:	4602      	mov	r2, r0
 800325e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	b2d9      	uxtb	r1, r3
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	202c      	movs	r0, #44	; 0x2c
 800326a:	fb00 f303 	mul.w	r3, r0, r3
 800326e:	4413      	add	r3, r2
 8003270:	3360      	adds	r3, #96	; 0x60
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f016 fd94 	bl	8019da4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d12b      	bne.n	80032dc <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3348      	adds	r3, #72	; 0x48
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	202c      	movs	r0, #44	; 0x2c
 800329a:	fb00 f202 	mul.w	r2, r0, r2
 800329e:	440a      	add	r2, r1
 80032a0:	3240      	adds	r2, #64	; 0x40
 80032a2:	8812      	ldrh	r2, [r2, #0]
 80032a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 81be 	beq.w	800362e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	212c      	movs	r1, #44	; 0x2c
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	4413      	add	r3, r2
 80032be:	3354      	adds	r3, #84	; 0x54
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	f083 0301 	eor.w	r3, r3, #1
 80032c6:	b2d8      	uxtb	r0, r3
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	212c      	movs	r1, #44	; 0x2c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	3354      	adds	r3, #84	; 0x54
 80032d6:	4602      	mov	r2, r0
 80032d8:	701a      	strb	r2, [r3, #0]
}
 80032da:	e1a8      	b.n	800362e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	3354      	adds	r3, #84	; 0x54
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	f083 0301 	eor.w	r3, r3, #1
 80032f0:	b2d8      	uxtb	r0, r3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	3354      	adds	r3, #84	; 0x54
 8003300:	4602      	mov	r2, r0
 8003302:	701a      	strb	r2, [r3, #0]
}
 8003304:	e193      	b.n	800362e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b02      	cmp	r3, #2
 800331a:	f040 8106 	bne.w	800352a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	0151      	lsls	r1, r2, #5
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	440a      	add	r2, r1
 8003334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003338:	f023 0302 	bic.w	r3, r3, #2
 800333c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	212c      	movs	r1, #44	; 0x2c
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	4413      	add	r3, r2
 800334a:	3361      	adds	r3, #97	; 0x61
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d109      	bne.n	8003366 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	3360      	adds	r3, #96	; 0x60
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]
 8003364:	e0c9      	b.n	80034fa <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3361      	adds	r3, #97	; 0x61
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b05      	cmp	r3, #5
 8003378:	d109      	bne.n	800338e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	3360      	adds	r3, #96	; 0x60
 8003388:	2205      	movs	r2, #5
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e0b5      	b.n	80034fa <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	3361      	adds	r3, #97	; 0x61
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d009      	beq.n	80033b6 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3361      	adds	r3, #97	; 0x61
 80033b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d150      	bne.n	8003458 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	335c      	adds	r3, #92	; 0x5c
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	202c      	movs	r0, #44	; 0x2c
 80033ce:	fb00 f303 	mul.w	r3, r0, r3
 80033d2:	440b      	add	r3, r1
 80033d4:	335c      	adds	r3, #92	; 0x5c
 80033d6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	212c      	movs	r1, #44	; 0x2c
 80033de:	fb01 f303 	mul.w	r3, r1, r3
 80033e2:	4413      	add	r3, r2
 80033e4:	335c      	adds	r3, #92	; 0x5c
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d912      	bls.n	8003412 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	212c      	movs	r1, #44	; 0x2c
 80033f2:	fb01 f303 	mul.w	r3, r1, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	335c      	adds	r3, #92	; 0x5c
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	212c      	movs	r1, #44	; 0x2c
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	4413      	add	r3, r2
 800340a:	3360      	adds	r3, #96	; 0x60
 800340c:	2204      	movs	r2, #4
 800340e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003410:	e073      	b.n	80034fa <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	3360      	adds	r3, #96	; 0x60
 8003420:	2202      	movs	r2, #2
 8003422:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800343a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003442:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003450:	461a      	mov	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003456:	e050      	b.n	80034fa <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	3361      	adds	r3, #97	; 0x61
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b03      	cmp	r3, #3
 800346a:	d122      	bne.n	80034b2 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	3360      	adds	r3, #96	; 0x60
 800347a:	2202      	movs	r2, #2
 800347c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4413      	add	r3, r2
 8003486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003494:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800349c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034aa:	461a      	mov	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	e023      	b.n	80034fa <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3361      	adds	r3, #97	; 0x61
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b07      	cmp	r3, #7
 80034c4:	d119      	bne.n	80034fa <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	335c      	adds	r3, #92	; 0x5c
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	202c      	movs	r0, #44	; 0x2c
 80034de:	fb00 f303 	mul.w	r3, r0, r3
 80034e2:	440b      	add	r3, r1
 80034e4:	335c      	adds	r3, #92	; 0x5c
 80034e6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3360      	adds	r3, #96	; 0x60
 80034f6:	2204      	movs	r2, #4
 80034f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4413      	add	r3, r2
 8003502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003506:	461a      	mov	r2, r3
 8003508:	2302      	movs	r3, #2
 800350a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	b2d9      	uxtb	r1, r3
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	202c      	movs	r0, #44	; 0x2c
 8003516:	fb00 f303 	mul.w	r3, r0, r3
 800351a:	4413      	add	r3, r2
 800351c:	3360      	adds	r3, #96	; 0x60
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f016 fc3e 	bl	8019da4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003528:	e081      	b.n	800362e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4413      	add	r3, r2
 8003532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b10      	cmp	r3, #16
 800353e:	d176      	bne.n	800362e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	212c      	movs	r1, #44	; 0x2c
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	4413      	add	r3, r2
 800354c:	333f      	adds	r3, #63	; 0x3f
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d121      	bne.n	8003598 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	212c      	movs	r1, #44	; 0x2c
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	4413      	add	r3, r2
 8003560:	335c      	adds	r3, #92	; 0x5c
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	0151      	lsls	r1, r2, #5
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	440a      	add	r2, r1
 800357c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f002 fcda 	bl	8005f4a <USB_HC_Halt>
 8003596:	e041      	b.n	800361c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	333f      	adds	r3, #63	; 0x3f
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d009      	beq.n	80035c0 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	333f      	adds	r3, #63	; 0x3f
 80035ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d12d      	bne.n	800361c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	335c      	adds	r3, #92	; 0x5c
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d120      	bne.n	800361c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	212c      	movs	r1, #44	; 0x2c
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	4413      	add	r3, r2
 80035e6:	3361      	adds	r3, #97	; 0x61
 80035e8:	2203      	movs	r2, #3
 80035ea:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	0151      	lsls	r1, r2, #5
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	440a      	add	r2, r1
 8003602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003606:	f043 0302 	orr.w	r3, r3, #2
 800360a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f002 fc97 	bl	8005f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003628:	461a      	mov	r2, r3
 800362a:	2310      	movs	r3, #16
 800362c:	6093      	str	r3, [r2, #8]
}
 800362e:	bf00      	nop
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b088      	sub	sp, #32
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b04      	cmp	r3, #4
 8003664:	d119      	bne.n	800369a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	461a      	mov	r2, r3
 8003674:	2304      	movs	r3, #4
 8003676:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	0151      	lsls	r1, r2, #5
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	440a      	add	r2, r1
 800368e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003698:	e3ca      	b.n	8003e30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d13e      	bne.n	800372e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036bc:	461a      	mov	r2, r3
 80036be:	2320      	movs	r3, #32
 80036c0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	212c      	movs	r1, #44	; 0x2c
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	4413      	add	r3, r2
 80036ce:	333d      	adds	r3, #61	; 0x3d
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	f040 83ac 	bne.w	8003e30 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	212c      	movs	r1, #44	; 0x2c
 80036de:	fb01 f303 	mul.w	r3, r1, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	333d      	adds	r3, #61	; 0x3d
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	212c      	movs	r1, #44	; 0x2c
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	4413      	add	r3, r2
 80036f6:	3360      	adds	r3, #96	; 0x60
 80036f8:	2202      	movs	r2, #2
 80036fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	4413      	add	r3, r2
 8003704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	0151      	lsls	r1, r2, #5
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	440a      	add	r2, r1
 8003712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003716:	f043 0302 	orr.w	r3, r3, #2
 800371a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f002 fc0f 	bl	8005f4a <USB_HC_Halt>
}
 800372c:	e380      	b.n	8003e30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003744:	d122      	bne.n	800378c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	440a      	add	r2, r1
 800375c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003760:	f043 0302 	orr.w	r3, r3, #2
 8003764:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f002 fbea 	bl	8005f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	4413      	add	r3, r2
 800377e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003782:	461a      	mov	r2, r3
 8003784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003788:	6093      	str	r3, [r2, #8]
}
 800378a:	e351      	b.n	8003e30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	4413      	add	r3, r2
 8003794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d150      	bne.n	8003844 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	212c      	movs	r1, #44	; 0x2c
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	4413      	add	r3, r2
 80037ae:	335c      	adds	r3, #92	; 0x5c
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d111      	bne.n	80037ee <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	333d      	adds	r3, #61	; 0x3d
 80037d8:	2201      	movs	r2, #1
 80037da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	461a      	mov	r2, r3
 80037ea:	2340      	movs	r3, #64	; 0x40
 80037ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	0151      	lsls	r1, r2, #5
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	440a      	add	r2, r1
 8003804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003808:	f043 0302 	orr.w	r3, r3, #2
 800380c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f002 fb96 	bl	8005f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382a:	461a      	mov	r2, r3
 800382c:	2301      	movs	r3, #1
 800382e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	3361      	adds	r3, #97	; 0x61
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
}
 8003842:	e2f5      	b.n	8003e30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	4413      	add	r3, r2
 800384c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d13c      	bne.n	80038d4 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	212c      	movs	r1, #44	; 0x2c
 8003860:	fb01 f303 	mul.w	r3, r1, r3
 8003864:	4413      	add	r3, r2
 8003866:	3361      	adds	r3, #97	; 0x61
 8003868:	2204      	movs	r2, #4
 800386a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	212c      	movs	r1, #44	; 0x2c
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	4413      	add	r3, r2
 8003878:	333d      	adds	r3, #61	; 0x3d
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	335c      	adds	r3, #92	; 0x5c
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	4413      	add	r3, r2
 8003898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	0151      	lsls	r1, r2, #5
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	440a      	add	r2, r1
 80038a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038aa:	f043 0302 	orr.w	r3, r3, #2
 80038ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	4611      	mov	r1, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f002 fb45 	bl	8005f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038cc:	461a      	mov	r2, r3
 80038ce:	2340      	movs	r3, #64	; 0x40
 80038d0:	6093      	str	r3, [r2, #8]
}
 80038d2:	e2ad      	b.n	8003e30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d12a      	bne.n	8003940 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f6:	461a      	mov	r2, r3
 80038f8:	2308      	movs	r3, #8
 80038fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	4413      	add	r3, r2
 8003904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	0151      	lsls	r1, r2, #5
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	440a      	add	r2, r1
 8003912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003916:	f043 0302 	orr.w	r3, r3, #2
 800391a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f002 fb0f 	bl	8005f4a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	212c      	movs	r1, #44	; 0x2c
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	3361      	adds	r3, #97	; 0x61
 800393a:	2205      	movs	r2, #5
 800393c:	701a      	strb	r2, [r3, #0]
}
 800393e:	e277      	b.n	8003e30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	4413      	add	r3, r2
 8003948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	2b10      	cmp	r3, #16
 8003954:	d150      	bne.n	80039f8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	212c      	movs	r1, #44	; 0x2c
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	4413      	add	r3, r2
 8003962:	335c      	adds	r3, #92	; 0x5c
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	212c      	movs	r1, #44	; 0x2c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	3361      	adds	r3, #97	; 0x61
 8003976:	2203      	movs	r2, #3
 8003978:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	333d      	adds	r3, #61	; 0x3d
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d112      	bne.n	80039b4 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	212c      	movs	r1, #44	; 0x2c
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	4413      	add	r3, r2
 800399a:	333c      	adds	r3, #60	; 0x3c
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d108      	bne.n	80039b4 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	212c      	movs	r1, #44	; 0x2c
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	4413      	add	r3, r2
 80039ae:	333d      	adds	r3, #61	; 0x3d
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	0151      	lsls	r1, r2, #5
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	440a      	add	r2, r1
 80039ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039ce:	f043 0302 	orr.w	r3, r3, #2
 80039d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	4611      	mov	r1, r2
 80039de:	4618      	mov	r0, r3
 80039e0:	f002 fab3 	bl	8005f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f0:	461a      	mov	r2, r3
 80039f2:	2310      	movs	r3, #16
 80039f4:	6093      	str	r3, [r2, #8]
}
 80039f6:	e21b      	b.n	8003e30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	2b80      	cmp	r3, #128	; 0x80
 8003a0c:	d174      	bne.n	8003af8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d121      	bne.n	8003a5a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	212c      	movs	r1, #44	; 0x2c
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	3361      	adds	r3, #97	; 0x61
 8003a24:	2206      	movs	r2, #6
 8003a26:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	0151      	lsls	r1, r2, #5
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	440a      	add	r2, r1
 8003a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a42:	f043 0302 	orr.w	r3, r3, #2
 8003a46:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f002 fa79 	bl	8005f4a <USB_HC_Halt>
 8003a58:	e044      	b.n	8003ae4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	212c      	movs	r1, #44	; 0x2c
 8003a60:	fb01 f303 	mul.w	r3, r1, r3
 8003a64:	4413      	add	r3, r2
 8003a66:	335c      	adds	r3, #92	; 0x5c
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	202c      	movs	r0, #44	; 0x2c
 8003a72:	fb00 f303 	mul.w	r3, r0, r3
 8003a76:	440b      	add	r3, r1
 8003a78:	335c      	adds	r3, #92	; 0x5c
 8003a7a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	212c      	movs	r1, #44	; 0x2c
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	335c      	adds	r3, #92	; 0x5c
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d920      	bls.n	8003ad2 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	212c      	movs	r1, #44	; 0x2c
 8003a96:	fb01 f303 	mul.w	r3, r1, r3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	335c      	adds	r3, #92	; 0x5c
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	3360      	adds	r3, #96	; 0x60
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	b2d9      	uxtb	r1, r3
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	202c      	movs	r0, #44	; 0x2c
 8003abe:	fb00 f303 	mul.w	r3, r0, r3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3360      	adds	r3, #96	; 0x60
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f016 f96a 	bl	8019da4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ad0:	e008      	b.n	8003ae4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	212c      	movs	r1, #44	; 0x2c
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	4413      	add	r3, r2
 8003ade:	3360      	adds	r3, #96	; 0x60
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af0:	461a      	mov	r2, r3
 8003af2:	2380      	movs	r3, #128	; 0x80
 8003af4:	6093      	str	r3, [r2, #8]
}
 8003af6:	e19b      	b.n	8003e30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0e:	d134      	bne.n	8003b7a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	0151      	lsls	r1, r2, #5
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	440a      	add	r2, r1
 8003b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b2a:	f043 0302 	orr.w	r3, r3, #2
 8003b2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f002 fa05 	bl	8005f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2310      	movs	r3, #16
 8003b50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b64:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	212c      	movs	r1, #44	; 0x2c
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	3361      	adds	r3, #97	; 0x61
 8003b74:	2208      	movs	r2, #8
 8003b76:	701a      	strb	r2, [r3, #0]
}
 8003b78:	e15a      	b.n	8003e30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	f040 814f 	bne.w	8003e30 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	0151      	lsls	r1, r2, #5
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	440a      	add	r2, r1
 8003ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bac:	f023 0302 	bic.w	r3, r3, #2
 8003bb0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	212c      	movs	r1, #44	; 0x2c
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3361      	adds	r3, #97	; 0x61
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d17d      	bne.n	8003cc2 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	212c      	movs	r1, #44	; 0x2c
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3360      	adds	r3, #96	; 0x60
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	212c      	movs	r1, #44	; 0x2c
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	333f      	adds	r3, #63	; 0x3f
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d00a      	beq.n	8003c02 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	333f      	adds	r3, #63	; 0x3f
 8003bfa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	f040 8100 	bne.w	8003e02 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d113      	bne.n	8003c32 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	212c      	movs	r1, #44	; 0x2c
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	3355      	adds	r3, #85	; 0x55
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	f083 0301 	eor.w	r3, r3, #1
 8003c1e:	b2d8      	uxtb	r0, r3
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	212c      	movs	r1, #44	; 0x2c
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3355      	adds	r3, #85	; 0x55
 8003c2e:	4602      	mov	r2, r0
 8003c30:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	f040 80e3 	bne.w	8003e02 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	334c      	adds	r3, #76	; 0x4c
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80d8 	beq.w	8003e02 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	212c      	movs	r1, #44	; 0x2c
 8003c58:	fb01 f303 	mul.w	r3, r1, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	334c      	adds	r3, #76	; 0x4c
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	202c      	movs	r0, #44	; 0x2c
 8003c68:	fb00 f202 	mul.w	r2, r0, r2
 8003c6c:	440a      	add	r2, r1
 8003c6e:	3240      	adds	r2, #64	; 0x40
 8003c70:	8812      	ldrh	r2, [r2, #0]
 8003c72:	4413      	add	r3, r2
 8003c74:	3b01      	subs	r3, #1
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	202c      	movs	r0, #44	; 0x2c
 8003c7c:	fb00 f202 	mul.w	r2, r0, r2
 8003c80:	440a      	add	r2, r1
 8003c82:	3240      	adds	r2, #64	; 0x40
 8003c84:	8812      	ldrh	r2, [r2, #0]
 8003c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80b5 	beq.w	8003e02 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	212c      	movs	r1, #44	; 0x2c
 8003c9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3355      	adds	r3, #85	; 0x55
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	f083 0301 	eor.w	r3, r3, #1
 8003cac:	b2d8      	uxtb	r0, r3
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	212c      	movs	r1, #44	; 0x2c
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	3355      	adds	r3, #85	; 0x55
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	e09f      	b.n	8003e02 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	212c      	movs	r1, #44	; 0x2c
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	3361      	adds	r3, #97	; 0x61
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d109      	bne.n	8003cea <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3360      	adds	r3, #96	; 0x60
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	e08b      	b.n	8003e02 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3361      	adds	r3, #97	; 0x61
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d109      	bne.n	8003d12 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	212c      	movs	r1, #44	; 0x2c
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	3360      	adds	r3, #96	; 0x60
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	e077      	b.n	8003e02 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3361      	adds	r3, #97	; 0x61
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b05      	cmp	r3, #5
 8003d24:	d109      	bne.n	8003d3a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	212c      	movs	r1, #44	; 0x2c
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	3360      	adds	r3, #96	; 0x60
 8003d34:	2205      	movs	r2, #5
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	e063      	b.n	8003e02 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	212c      	movs	r1, #44	; 0x2c
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	3361      	adds	r3, #97	; 0x61
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b06      	cmp	r3, #6
 8003d4c:	d009      	beq.n	8003d62 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	3361      	adds	r3, #97	; 0x61
 8003d5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d14f      	bne.n	8003e02 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	335c      	adds	r3, #92	; 0x5c
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	202c      	movs	r0, #44	; 0x2c
 8003d7a:	fb00 f303 	mul.w	r3, r0, r3
 8003d7e:	440b      	add	r3, r1
 8003d80:	335c      	adds	r3, #92	; 0x5c
 8003d82:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	212c      	movs	r1, #44	; 0x2c
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	335c      	adds	r3, #92	; 0x5c
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d912      	bls.n	8003dbe <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	335c      	adds	r3, #92	; 0x5c
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	212c      	movs	r1, #44	; 0x2c
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	3360      	adds	r3, #96	; 0x60
 8003db8:	2204      	movs	r2, #4
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	e021      	b.n	8003e02 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	212c      	movs	r1, #44	; 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3360      	adds	r3, #96	; 0x60
 8003dcc:	2202      	movs	r2, #2
 8003dce:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003de6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dee:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2302      	movs	r3, #2
 8003e12:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	b2d9      	uxtb	r1, r3
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	202c      	movs	r0, #44	; 0x2c
 8003e1e:	fb00 f303 	mul.w	r3, r0, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3360      	adds	r3, #96	; 0x60
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f015 ffba 	bl	8019da4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e30:	bf00      	nop
 8003e32:	3720      	adds	r7, #32
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08a      	sub	sp, #40	; 0x28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	0c5b      	lsrs	r3, r3, #17
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	091b      	lsrs	r3, r3, #4
 8003e68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e6c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d004      	beq.n	8003e7e <HCD_RXQLVL_IRQHandler+0x46>
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b05      	cmp	r3, #5
 8003e78:	f000 80a9 	beq.w	8003fce <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003e7c:	e0aa      	b.n	8003fd4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80a6 	beq.w	8003fd2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	212c      	movs	r1, #44	; 0x2c
 8003e8c:	fb01 f303 	mul.w	r3, r1, r3
 8003e90:	4413      	add	r3, r2
 8003e92:	3344      	adds	r3, #68	; 0x44
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 809b 	beq.w	8003fd2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	212c      	movs	r1, #44	; 0x2c
 8003ea2:	fb01 f303 	mul.w	r3, r1, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3350      	adds	r3, #80	; 0x50
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	441a      	add	r2, r3
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	202c      	movs	r0, #44	; 0x2c
 8003eb6:	fb00 f303 	mul.w	r3, r0, r3
 8003eba:	440b      	add	r3, r1
 8003ebc:	334c      	adds	r3, #76	; 0x4c
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d87a      	bhi.n	8003fba <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	212c      	movs	r1, #44	; 0x2c
 8003ece:	fb01 f303 	mul.w	r3, r1, r3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3344      	adds	r3, #68	; 0x44
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	b292      	uxth	r2, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	f001 fbad 	bl	800563c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	212c      	movs	r1, #44	; 0x2c
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	3344      	adds	r3, #68	; 0x44
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	441a      	add	r2, r3
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	202c      	movs	r0, #44	; 0x2c
 8003efc:	fb00 f303 	mul.w	r3, r0, r3
 8003f00:	440b      	add	r3, r1
 8003f02:	3344      	adds	r3, #68	; 0x44
 8003f04:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	212c      	movs	r1, #44	; 0x2c
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	3350      	adds	r3, #80	; 0x50
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	441a      	add	r2, r3
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	202c      	movs	r0, #44	; 0x2c
 8003f20:	fb00 f303 	mul.w	r3, r0, r3
 8003f24:	440b      	add	r3, r1
 8003f26:	3350      	adds	r3, #80	; 0x50
 8003f28:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	0cdb      	lsrs	r3, r3, #19
 8003f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f3e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	212c      	movs	r1, #44	; 0x2c
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3340      	adds	r3, #64	; 0x40
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d13c      	bne.n	8003fd2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d039      	beq.n	8003fd2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f74:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f7c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	212c      	movs	r1, #44	; 0x2c
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3354      	adds	r3, #84	; 0x54
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	f083 0301 	eor.w	r3, r3, #1
 8003fa4:	b2d8      	uxtb	r0, r3
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	212c      	movs	r1, #44	; 0x2c
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3354      	adds	r3, #84	; 0x54
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	701a      	strb	r2, [r3, #0]
      break;
 8003fb8:	e00b      	b.n	8003fd2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	212c      	movs	r1, #44	; 0x2c
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3360      	adds	r3, #96	; 0x60
 8003fc8:	2204      	movs	r2, #4
 8003fca:	701a      	strb	r2, [r3, #0]
      break;
 8003fcc:	e001      	b.n	8003fd2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e000      	b.n	8003fd4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003fd2:	bf00      	nop
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	3728      	adds	r7, #40	; 0x28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004008:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	d10b      	bne.n	800402c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b01      	cmp	r3, #1
 800401c:	d102      	bne.n	8004024 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f015 fea4 	bl	8019d6c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f043 0302 	orr.w	r3, r3, #2
 800402a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b08      	cmp	r3, #8
 8004034:	d132      	bne.n	800409c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f043 0308 	orr.w	r3, r3, #8
 800403c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b04      	cmp	r3, #4
 8004046:	d126      	bne.n	8004096 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d113      	bne.n	8004078 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004056:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800405a:	d106      	bne.n	800406a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2102      	movs	r1, #2
 8004062:	4618      	mov	r0, r3
 8004064:	f001 fc4a 	bl	80058fc <USB_InitFSLSPClkSel>
 8004068:	e011      	b.n	800408e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2101      	movs	r1, #1
 8004070:	4618      	mov	r0, r3
 8004072:	f001 fc43 	bl	80058fc <USB_InitFSLSPClkSel>
 8004076:	e00a      	b.n	800408e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d106      	bne.n	800408e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004086:	461a      	mov	r2, r3
 8004088:	f64e 2360 	movw	r3, #60000	; 0xea60
 800408c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f015 fe9a 	bl	8019dc8 <HAL_HCD_PortEnabled_Callback>
 8004094:	e002      	b.n	800409c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f015 fea4 	bl	8019de4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d103      	bne.n	80040ae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f043 0320 	orr.w	r3, r3, #32
 80040ac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040b4:	461a      	mov	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6013      	str	r3, [r2, #0]
}
 80040ba:	bf00      	nop
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e264      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d075      	beq.n	80041ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040e2:	4ba3      	ldr	r3, [pc, #652]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d00c      	beq.n	8004108 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ee:	4ba0      	ldr	r3, [pc, #640]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d112      	bne.n	8004120 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040fa:	4b9d      	ldr	r3, [pc, #628]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004106:	d10b      	bne.n	8004120 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004108:	4b99      	ldr	r3, [pc, #612]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d05b      	beq.n	80041cc <HAL_RCC_OscConfig+0x108>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d157      	bne.n	80041cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e23f      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004128:	d106      	bne.n	8004138 <HAL_RCC_OscConfig+0x74>
 800412a:	4b91      	ldr	r3, [pc, #580]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a90      	ldr	r2, [pc, #576]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e01d      	b.n	8004174 <HAL_RCC_OscConfig+0xb0>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004140:	d10c      	bne.n	800415c <HAL_RCC_OscConfig+0x98>
 8004142:	4b8b      	ldr	r3, [pc, #556]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a8a      	ldr	r2, [pc, #552]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	4b88      	ldr	r3, [pc, #544]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a87      	ldr	r2, [pc, #540]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	e00b      	b.n	8004174 <HAL_RCC_OscConfig+0xb0>
 800415c:	4b84      	ldr	r3, [pc, #528]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a83      	ldr	r2, [pc, #524]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	4b81      	ldr	r3, [pc, #516]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a80      	ldr	r2, [pc, #512]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 800416e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d013      	beq.n	80041a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417c:	f7fc fdb4 	bl	8000ce8 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004184:	f7fc fdb0 	bl	8000ce8 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	; 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e204      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004196:	4b76      	ldr	r3, [pc, #472]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0xc0>
 80041a2:	e014      	b.n	80041ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a4:	f7fc fda0 	bl	8000ce8 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ac:	f7fc fd9c 	bl	8000ce8 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	; 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e1f0      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041be:	4b6c      	ldr	r3, [pc, #432]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0xe8>
 80041ca:	e000      	b.n	80041ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d063      	beq.n	80042a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041da:	4b65      	ldr	r3, [pc, #404]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00b      	beq.n	80041fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041e6:	4b62      	ldr	r3, [pc, #392]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d11c      	bne.n	800422c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f2:	4b5f      	ldr	r3, [pc, #380]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d116      	bne.n	800422c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fe:	4b5c      	ldr	r3, [pc, #368]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <HAL_RCC_OscConfig+0x152>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d001      	beq.n	8004216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e1c4      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004216:	4b56      	ldr	r3, [pc, #344]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4952      	ldr	r1, [pc, #328]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422a:	e03a      	b.n	80042a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d020      	beq.n	8004276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004234:	4b4f      	ldr	r3, [pc, #316]	; (8004374 <HAL_RCC_OscConfig+0x2b0>)
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423a:	f7fc fd55 	bl	8000ce8 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004242:	f7fc fd51 	bl	8000ce8 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e1a5      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004254:	4b46      	ldr	r3, [pc, #280]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004260:	4b43      	ldr	r3, [pc, #268]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4940      	ldr	r1, [pc, #256]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	4313      	orrs	r3, r2
 8004272:	600b      	str	r3, [r1, #0]
 8004274:	e015      	b.n	80042a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004276:	4b3f      	ldr	r3, [pc, #252]	; (8004374 <HAL_RCC_OscConfig+0x2b0>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fc fd34 	bl	8000ce8 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004284:	f7fc fd30 	bl	8000ce8 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e184      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004296:	4b36      	ldr	r3, [pc, #216]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d030      	beq.n	8004310 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d016      	beq.n	80042e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b6:	4b30      	ldr	r3, [pc, #192]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042bc:	f7fc fd14 	bl	8000ce8 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c4:	f7fc fd10 	bl	8000ce8 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e164      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d6:	4b26      	ldr	r3, [pc, #152]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x200>
 80042e2:	e015      	b.n	8004310 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e4:	4b24      	ldr	r3, [pc, #144]	; (8004378 <HAL_RCC_OscConfig+0x2b4>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ea:	f7fc fcfd 	bl	8000ce8 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f2:	f7fc fcf9 	bl	8000ce8 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e14d      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004304:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f0      	bne.n	80042f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80a0 	beq.w	800445e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800431e:	2300      	movs	r3, #0
 8004320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10f      	bne.n	800434e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800432e:	2300      	movs	r3, #0
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	4a0e      	ldr	r2, [pc, #56]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433c:	6413      	str	r3, [r2, #64]	; 0x40
 800433e:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004346:	60bb      	str	r3, [r7, #8]
 8004348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800434a:	2301      	movs	r3, #1
 800434c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434e:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_RCC_OscConfig+0x2b8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004356:	2b00      	cmp	r3, #0
 8004358:	d121      	bne.n	800439e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800435a:	4b08      	ldr	r3, [pc, #32]	; (800437c <HAL_RCC_OscConfig+0x2b8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a07      	ldr	r2, [pc, #28]	; (800437c <HAL_RCC_OscConfig+0x2b8>)
 8004360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004366:	f7fc fcbf 	bl	8000ce8 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436c:	e011      	b.n	8004392 <HAL_RCC_OscConfig+0x2ce>
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800
 8004374:	42470000 	.word	0x42470000
 8004378:	42470e80 	.word	0x42470e80
 800437c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004380:	f7fc fcb2 	bl	8000ce8 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e106      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004392:	4b85      	ldr	r3, [pc, #532]	; (80045a8 <HAL_RCC_OscConfig+0x4e4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d106      	bne.n	80043b4 <HAL_RCC_OscConfig+0x2f0>
 80043a6:	4b81      	ldr	r3, [pc, #516]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	4a80      	ldr	r2, [pc, #512]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	6713      	str	r3, [r2, #112]	; 0x70
 80043b2:	e01c      	b.n	80043ee <HAL_RCC_OscConfig+0x32a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b05      	cmp	r3, #5
 80043ba:	d10c      	bne.n	80043d6 <HAL_RCC_OscConfig+0x312>
 80043bc:	4b7b      	ldr	r3, [pc, #492]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	4a7a      	ldr	r2, [pc, #488]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 80043c2:	f043 0304 	orr.w	r3, r3, #4
 80043c6:	6713      	str	r3, [r2, #112]	; 0x70
 80043c8:	4b78      	ldr	r3, [pc, #480]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a77      	ldr	r2, [pc, #476]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
 80043d4:	e00b      	b.n	80043ee <HAL_RCC_OscConfig+0x32a>
 80043d6:	4b75      	ldr	r3, [pc, #468]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	4a74      	ldr	r2, [pc, #464]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	6713      	str	r3, [r2, #112]	; 0x70
 80043e2:	4b72      	ldr	r3, [pc, #456]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	4a71      	ldr	r2, [pc, #452]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 80043e8:	f023 0304 	bic.w	r3, r3, #4
 80043ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d015      	beq.n	8004422 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f6:	f7fc fc77 	bl	8000ce8 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fc:	e00a      	b.n	8004414 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fe:	f7fc fc73 	bl	8000ce8 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f241 3288 	movw	r2, #5000	; 0x1388
 800440c:	4293      	cmp	r3, r2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e0c5      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004414:	4b65      	ldr	r3, [pc, #404]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ee      	beq.n	80043fe <HAL_RCC_OscConfig+0x33a>
 8004420:	e014      	b.n	800444c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004422:	f7fc fc61 	bl	8000ce8 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004428:	e00a      	b.n	8004440 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fc fc5d 	bl	8000ce8 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f241 3288 	movw	r2, #5000	; 0x1388
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e0af      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004440:	4b5a      	ldr	r3, [pc, #360]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ee      	bne.n	800442a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d105      	bne.n	800445e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004452:	4b56      	ldr	r3, [pc, #344]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	4a55      	ldr	r2, [pc, #340]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 8004458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800445c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 809b 	beq.w	800459e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004468:	4b50      	ldr	r3, [pc, #320]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 030c 	and.w	r3, r3, #12
 8004470:	2b08      	cmp	r3, #8
 8004472:	d05c      	beq.n	800452e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d141      	bne.n	8004500 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447c:	4b4c      	ldr	r3, [pc, #304]	; (80045b0 <HAL_RCC_OscConfig+0x4ec>)
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004482:	f7fc fc31 	bl	8000ce8 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448a:	f7fc fc2d 	bl	8000ce8 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e081      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449c:	4b43      	ldr	r3, [pc, #268]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1f0      	bne.n	800448a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	019b      	lsls	r3, r3, #6
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	085b      	lsrs	r3, r3, #1
 80044c0:	3b01      	subs	r3, #1
 80044c2:	041b      	lsls	r3, r3, #16
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	061b      	lsls	r3, r3, #24
 80044cc:	4937      	ldr	r1, [pc, #220]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d2:	4b37      	ldr	r3, [pc, #220]	; (80045b0 <HAL_RCC_OscConfig+0x4ec>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fc fc06 	bl	8000ce8 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fc fc02 	bl	8000ce8 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e056      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f2:	4b2e      	ldr	r3, [pc, #184]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x41c>
 80044fe:	e04e      	b.n	800459e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004500:	4b2b      	ldr	r3, [pc, #172]	; (80045b0 <HAL_RCC_OscConfig+0x4ec>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004506:	f7fc fbef 	bl	8000ce8 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450e:	f7fc fbeb 	bl	8000ce8 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e03f      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004520:	4b22      	ldr	r3, [pc, #136]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f0      	bne.n	800450e <HAL_RCC_OscConfig+0x44a>
 800452c:	e037      	b.n	800459e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e032      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800453a:	4b1c      	ldr	r3, [pc, #112]	; (80045ac <HAL_RCC_OscConfig+0x4e8>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d028      	beq.n	800459a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d121      	bne.n	800459a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004560:	429a      	cmp	r2, r3
 8004562:	d11a      	bne.n	800459a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800456a:	4013      	ands	r3, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004570:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004572:	4293      	cmp	r3, r2
 8004574:	d111      	bne.n	800459a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	3b01      	subs	r3, #1
 8004584:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004586:	429a      	cmp	r2, r3
 8004588:	d107      	bne.n	800459a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d001      	beq.n	800459e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40007000 	.word	0x40007000
 80045ac:	40023800 	.word	0x40023800
 80045b0:	42470060 	.word	0x42470060

080045b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0cc      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045c8:	4b68      	ldr	r3, [pc, #416]	; (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d90c      	bls.n	80045f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d6:	4b65      	ldr	r3, [pc, #404]	; (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b63      	ldr	r3, [pc, #396]	; (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0b8      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004608:	4b59      	ldr	r3, [pc, #356]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4a58      	ldr	r2, [pc, #352]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004620:	4b53      	ldr	r3, [pc, #332]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4a52      	ldr	r2, [pc, #328]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800462a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462c:	4b50      	ldr	r3, [pc, #320]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	494d      	ldr	r1, [pc, #308]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d044      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004652:	4b47      	ldr	r3, [pc, #284]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d119      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e07f      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d003      	beq.n	8004672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466e:	2b03      	cmp	r3, #3
 8004670:	d107      	bne.n	8004682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004672:	4b3f      	ldr	r3, [pc, #252]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e06f      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004682:	4b3b      	ldr	r3, [pc, #236]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e067      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004692:	4b37      	ldr	r3, [pc, #220]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f023 0203 	bic.w	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4934      	ldr	r1, [pc, #208]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a4:	f7fc fb20 	bl	8000ce8 <HAL_GetTick>
 80046a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046aa:	e00a      	b.n	80046c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ac:	f7fc fb1c 	bl	8000ce8 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e04f      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c2:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 020c 	and.w	r2, r3, #12
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d1eb      	bne.n	80046ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046d4:	4b25      	ldr	r3, [pc, #148]	; (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d20c      	bcs.n	80046fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b22      	ldr	r3, [pc, #136]	; (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ea:	4b20      	ldr	r3, [pc, #128]	; (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e032      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004708:	4b19      	ldr	r3, [pc, #100]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4916      	ldr	r1, [pc, #88]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d009      	beq.n	800473a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004726:	4b12      	ldr	r3, [pc, #72]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	490e      	ldr	r1, [pc, #56]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800473a:	f000 f821 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 800473e:	4602      	mov	r2, r0
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	490a      	ldr	r1, [pc, #40]	; (8004774 <HAL_RCC_ClockConfig+0x1c0>)
 800474c:	5ccb      	ldrb	r3, [r1, r3]
 800474e:	fa22 f303 	lsr.w	r3, r2, r3
 8004752:	4a09      	ldr	r2, [pc, #36]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004756:	4b09      	ldr	r3, [pc, #36]	; (800477c <HAL_RCC_ClockConfig+0x1c8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7fc f92e 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40023c00 	.word	0x40023c00
 8004770:	40023800 	.word	0x40023800
 8004774:	0801e95c 	.word	0x0801e95c
 8004778:	20000000 	.word	0x20000000
 800477c:	20000004 	.word	0x20000004

08004780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	607b      	str	r3, [r7, #4]
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	2300      	movs	r3, #0
 8004792:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004798:	4b67      	ldr	r3, [pc, #412]	; (8004938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 030c 	and.w	r3, r3, #12
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d00d      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x40>
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	f200 80bd 	bhi.w	8004924 <HAL_RCC_GetSysClockFreq+0x1a4>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x34>
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d003      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0x3a>
 80047b2:	e0b7      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047b4:	4b61      	ldr	r3, [pc, #388]	; (800493c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047b6:	60bb      	str	r3, [r7, #8]
       break;
 80047b8:	e0b7      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ba:	4b61      	ldr	r3, [pc, #388]	; (8004940 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80047bc:	60bb      	str	r3, [r7, #8]
      break;
 80047be:	e0b4      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c0:	4b5d      	ldr	r3, [pc, #372]	; (8004938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047ca:	4b5b      	ldr	r3, [pc, #364]	; (8004938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d04d      	beq.n	8004872 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d6:	4b58      	ldr	r3, [pc, #352]	; (8004938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	099b      	lsrs	r3, r3, #6
 80047dc:	461a      	mov	r2, r3
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047e6:	f04f 0100 	mov.w	r1, #0
 80047ea:	ea02 0800 	and.w	r8, r2, r0
 80047ee:	ea03 0901 	and.w	r9, r3, r1
 80047f2:	4640      	mov	r0, r8
 80047f4:	4649      	mov	r1, r9
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	014b      	lsls	r3, r1, #5
 8004800:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004804:	0142      	lsls	r2, r0, #5
 8004806:	4610      	mov	r0, r2
 8004808:	4619      	mov	r1, r3
 800480a:	ebb0 0008 	subs.w	r0, r0, r8
 800480e:	eb61 0109 	sbc.w	r1, r1, r9
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	018b      	lsls	r3, r1, #6
 800481c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004820:	0182      	lsls	r2, r0, #6
 8004822:	1a12      	subs	r2, r2, r0
 8004824:	eb63 0301 	sbc.w	r3, r3, r1
 8004828:	f04f 0000 	mov.w	r0, #0
 800482c:	f04f 0100 	mov.w	r1, #0
 8004830:	00d9      	lsls	r1, r3, #3
 8004832:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004836:	00d0      	lsls	r0, r2, #3
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	eb12 0208 	adds.w	r2, r2, r8
 8004840:	eb43 0309 	adc.w	r3, r3, r9
 8004844:	f04f 0000 	mov.w	r0, #0
 8004848:	f04f 0100 	mov.w	r1, #0
 800484c:	0259      	lsls	r1, r3, #9
 800484e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004852:	0250      	lsls	r0, r2, #9
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4610      	mov	r0, r2
 800485a:	4619      	mov	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	461a      	mov	r2, r3
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	f7fb fd14 	bl	8000290 <__aeabi_uldivmod>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4613      	mov	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	e04a      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004872:	4b31      	ldr	r3, [pc, #196]	; (8004938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	461a      	mov	r2, r3
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004882:	f04f 0100 	mov.w	r1, #0
 8004886:	ea02 0400 	and.w	r4, r2, r0
 800488a:	ea03 0501 	and.w	r5, r3, r1
 800488e:	4620      	mov	r0, r4
 8004890:	4629      	mov	r1, r5
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	014b      	lsls	r3, r1, #5
 800489c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048a0:	0142      	lsls	r2, r0, #5
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
 80048a6:	1b00      	subs	r0, r0, r4
 80048a8:	eb61 0105 	sbc.w	r1, r1, r5
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	018b      	lsls	r3, r1, #6
 80048b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048ba:	0182      	lsls	r2, r0, #6
 80048bc:	1a12      	subs	r2, r2, r0
 80048be:	eb63 0301 	sbc.w	r3, r3, r1
 80048c2:	f04f 0000 	mov.w	r0, #0
 80048c6:	f04f 0100 	mov.w	r1, #0
 80048ca:	00d9      	lsls	r1, r3, #3
 80048cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048d0:	00d0      	lsls	r0, r2, #3
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	1912      	adds	r2, r2, r4
 80048d8:	eb45 0303 	adc.w	r3, r5, r3
 80048dc:	f04f 0000 	mov.w	r0, #0
 80048e0:	f04f 0100 	mov.w	r1, #0
 80048e4:	0299      	lsls	r1, r3, #10
 80048e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048ea:	0290      	lsls	r0, r2, #10
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	f7fb fcc8 	bl	8000290 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4613      	mov	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004908:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	3301      	adds	r3, #1
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	60bb      	str	r3, [r7, #8]
      break;
 8004922:	e002      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004926:	60bb      	str	r3, [r7, #8]
      break;
 8004928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800492a:	68bb      	ldr	r3, [r7, #8]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800
 800493c:	00f42400 	.word	0x00f42400
 8004940:	007a1200 	.word	0x007a1200

08004944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004948:	4b03      	ldr	r3, [pc, #12]	; (8004958 <HAL_RCC_GetHCLKFreq+0x14>)
 800494a:	681b      	ldr	r3, [r3, #0]
}
 800494c:	4618      	mov	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000000 	.word	0x20000000

0800495c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004960:	f7ff fff0 	bl	8004944 <HAL_RCC_GetHCLKFreq>
 8004964:	4602      	mov	r2, r0
 8004966:	4b05      	ldr	r3, [pc, #20]	; (800497c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	0a9b      	lsrs	r3, r3, #10
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	4903      	ldr	r1, [pc, #12]	; (8004980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004972:	5ccb      	ldrb	r3, [r1, r3]
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004978:	4618      	mov	r0, r3
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40023800 	.word	0x40023800
 8004980:	0801e96c 	.word	0x0801e96c

08004984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004988:	f7ff ffdc 	bl	8004944 <HAL_RCC_GetHCLKFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0b5b      	lsrs	r3, r3, #13
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4903      	ldr	r1, [pc, #12]	; (80049a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	0801e96c 	.word	0x0801e96c

080049ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	220f      	movs	r2, #15
 80049ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049bc:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <HAL_RCC_GetClockConfig+0x5c>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 0203 	and.w	r2, r3, #3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <HAL_RCC_GetClockConfig+0x5c>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049d4:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <HAL_RCC_GetClockConfig+0x5c>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049e0:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <HAL_RCC_GetClockConfig+0x5c>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	08db      	lsrs	r3, r3, #3
 80049e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049ee:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <HAL_RCC_GetClockConfig+0x60>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 020f 	and.w	r2, r3, #15
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	601a      	str	r2, [r3, #0]
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	40023c00 	.word	0x40023c00

08004a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e041      	b.n	8004aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f839 	bl	8004aae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	f000 f9d8 	bl	8004e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d001      	beq.n	8004adc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e04e      	b.n	8004b7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a23      	ldr	r2, [pc, #140]	; (8004b88 <HAL_TIM_Base_Start_IT+0xc4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d022      	beq.n	8004b44 <HAL_TIM_Base_Start_IT+0x80>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b06:	d01d      	beq.n	8004b44 <HAL_TIM_Base_Start_IT+0x80>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1f      	ldr	r2, [pc, #124]	; (8004b8c <HAL_TIM_Base_Start_IT+0xc8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d018      	beq.n	8004b44 <HAL_TIM_Base_Start_IT+0x80>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1e      	ldr	r2, [pc, #120]	; (8004b90 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d013      	beq.n	8004b44 <HAL_TIM_Base_Start_IT+0x80>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00e      	beq.n	8004b44 <HAL_TIM_Base_Start_IT+0x80>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a1b      	ldr	r2, [pc, #108]	; (8004b98 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d009      	beq.n	8004b44 <HAL_TIM_Base_Start_IT+0x80>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a19      	ldr	r2, [pc, #100]	; (8004b9c <HAL_TIM_Base_Start_IT+0xd8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <HAL_TIM_Base_Start_IT+0x80>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a18      	ldr	r2, [pc, #96]	; (8004ba0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d111      	bne.n	8004b68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b06      	cmp	r3, #6
 8004b54:	d010      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0201 	orr.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b66:	e007      	b.n	8004b78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40010000 	.word	0x40010000
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40000800 	.word	0x40000800
 8004b94:	40000c00 	.word	0x40000c00
 8004b98:	40010400 	.word	0x40010400
 8004b9c:	40014000 	.word	0x40014000
 8004ba0:	40001800 	.word	0x40001800

08004ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d122      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d11b      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0202 	mvn.w	r2, #2
 8004bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f8ee 	bl	8004dc8 <HAL_TIM_IC_CaptureCallback>
 8004bec:	e005      	b.n	8004bfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8e0 	bl	8004db4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f8f1 	bl	8004ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d122      	bne.n	8004c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d11b      	bne.n	8004c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0204 	mvn.w	r2, #4
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f8c4 	bl	8004dc8 <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f8b6 	bl	8004db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8c7 	bl	8004ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d122      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d11b      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0208 	mvn.w	r2, #8
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f89a 	bl	8004dc8 <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f88c 	bl	8004db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f89d 	bl	8004ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d122      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d11b      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0210 	mvn.w	r2, #16
 8004ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f870 	bl	8004dc8 <HAL_TIM_IC_CaptureCallback>
 8004ce8:	e005      	b.n	8004cf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f862 	bl	8004db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f873 	bl	8004ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d10e      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d107      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0201 	mvn.w	r2, #1
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fb fdbe 	bl	80008a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d10e      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d40:	2b80      	cmp	r3, #128	; 0x80
 8004d42:	d107      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f902 	bl	8004f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d10e      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b40      	cmp	r3, #64	; 0x40
 8004d6e:	d107      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f838 	bl	8004df0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d10e      	bne.n	8004dac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d107      	bne.n	8004dac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0220 	mvn.w	r2, #32
 8004da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f8cc 	bl	8004f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dac:	bf00      	nop
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a40      	ldr	r2, [pc, #256]	; (8004f18 <TIM_Base_SetConfig+0x114>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d013      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e22:	d00f      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3d      	ldr	r2, [pc, #244]	; (8004f1c <TIM_Base_SetConfig+0x118>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00b      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a3c      	ldr	r2, [pc, #240]	; (8004f20 <TIM_Base_SetConfig+0x11c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d007      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a3b      	ldr	r2, [pc, #236]	; (8004f24 <TIM_Base_SetConfig+0x120>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a3a      	ldr	r2, [pc, #232]	; (8004f28 <TIM_Base_SetConfig+0x124>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d108      	bne.n	8004e56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2f      	ldr	r2, [pc, #188]	; (8004f18 <TIM_Base_SetConfig+0x114>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d02b      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e64:	d027      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2c      	ldr	r2, [pc, #176]	; (8004f1c <TIM_Base_SetConfig+0x118>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d023      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2b      	ldr	r2, [pc, #172]	; (8004f20 <TIM_Base_SetConfig+0x11c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01f      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2a      	ldr	r2, [pc, #168]	; (8004f24 <TIM_Base_SetConfig+0x120>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d01b      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a29      	ldr	r2, [pc, #164]	; (8004f28 <TIM_Base_SetConfig+0x124>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d017      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a28      	ldr	r2, [pc, #160]	; (8004f2c <TIM_Base_SetConfig+0x128>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d013      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a27      	ldr	r2, [pc, #156]	; (8004f30 <TIM_Base_SetConfig+0x12c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00f      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a26      	ldr	r2, [pc, #152]	; (8004f34 <TIM_Base_SetConfig+0x130>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00b      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a25      	ldr	r2, [pc, #148]	; (8004f38 <TIM_Base_SetConfig+0x134>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d007      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a24      	ldr	r2, [pc, #144]	; (8004f3c <TIM_Base_SetConfig+0x138>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d003      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a23      	ldr	r2, [pc, #140]	; (8004f40 <TIM_Base_SetConfig+0x13c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d108      	bne.n	8004ec8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <TIM_Base_SetConfig+0x114>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d003      	beq.n	8004efc <TIM_Base_SetConfig+0xf8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a0c      	ldr	r2, [pc, #48]	; (8004f28 <TIM_Base_SetConfig+0x124>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d103      	bne.n	8004f04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	615a      	str	r2, [r3, #20]
}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40010000 	.word	0x40010000
 8004f1c:	40000400 	.word	0x40000400
 8004f20:	40000800 	.word	0x40000800
 8004f24:	40000c00 	.word	0x40000c00
 8004f28:	40010400 	.word	0x40010400
 8004f2c:	40014000 	.word	0x40014000
 8004f30:	40014400 	.word	0x40014400
 8004f34:	40014800 	.word	0x40014800
 8004f38:	40001800 	.word	0x40001800
 8004f3c:	40001c00 	.word	0x40001c00
 8004f40:	40002000 	.word	0x40002000

08004f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e03f      	b.n	8004ffe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fb fcca 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2224      	movs	r2, #36	; 0x24
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f829 	bl	8005008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fe4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	b09f      	sub	sp, #124	; 0x7c
 800500e:	af00      	add	r7, sp, #0
 8005010:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800501c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501e:	68d9      	ldr	r1, [r3, #12]
 8005020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	ea40 0301 	orr.w	r3, r0, r1
 8005028:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800502a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	431a      	orrs	r2, r3
 8005034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	431a      	orrs	r2, r3
 800503a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	4313      	orrs	r3, r2
 8005040:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800504c:	f021 010c 	bic.w	r1, r1, #12
 8005050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005056:	430b      	orrs	r3, r1
 8005058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800505a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005066:	6999      	ldr	r1, [r3, #24]
 8005068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	ea40 0301 	orr.w	r3, r0, r1
 8005070:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4bc5      	ldr	r3, [pc, #788]	; (800538c <UART_SetConfig+0x384>)
 8005078:	429a      	cmp	r2, r3
 800507a:	d004      	beq.n	8005086 <UART_SetConfig+0x7e>
 800507c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4bc3      	ldr	r3, [pc, #780]	; (8005390 <UART_SetConfig+0x388>)
 8005082:	429a      	cmp	r2, r3
 8005084:	d103      	bne.n	800508e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005086:	f7ff fc7d 	bl	8004984 <HAL_RCC_GetPCLK2Freq>
 800508a:	6778      	str	r0, [r7, #116]	; 0x74
 800508c:	e002      	b.n	8005094 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800508e:	f7ff fc65 	bl	800495c <HAL_RCC_GetPCLK1Freq>
 8005092:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800509c:	f040 80b6 	bne.w	800520c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050a2:	461c      	mov	r4, r3
 80050a4:	f04f 0500 	mov.w	r5, #0
 80050a8:	4622      	mov	r2, r4
 80050aa:	462b      	mov	r3, r5
 80050ac:	1891      	adds	r1, r2, r2
 80050ae:	6439      	str	r1, [r7, #64]	; 0x40
 80050b0:	415b      	adcs	r3, r3
 80050b2:	647b      	str	r3, [r7, #68]	; 0x44
 80050b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050b8:	1912      	adds	r2, r2, r4
 80050ba:	eb45 0303 	adc.w	r3, r5, r3
 80050be:	f04f 0000 	mov.w	r0, #0
 80050c2:	f04f 0100 	mov.w	r1, #0
 80050c6:	00d9      	lsls	r1, r3, #3
 80050c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050cc:	00d0      	lsls	r0, r2, #3
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	1911      	adds	r1, r2, r4
 80050d4:	6639      	str	r1, [r7, #96]	; 0x60
 80050d6:	416b      	adcs	r3, r5
 80050d8:	667b      	str	r3, [r7, #100]	; 0x64
 80050da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	461a      	mov	r2, r3
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	1891      	adds	r1, r2, r2
 80050e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80050e8:	415b      	adcs	r3, r3
 80050ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80050f4:	f7fb f8cc 	bl	8000290 <__aeabi_uldivmod>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4ba5      	ldr	r3, [pc, #660]	; (8005394 <UART_SetConfig+0x38c>)
 80050fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	011e      	lsls	r6, r3, #4
 8005106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005108:	461c      	mov	r4, r3
 800510a:	f04f 0500 	mov.w	r5, #0
 800510e:	4622      	mov	r2, r4
 8005110:	462b      	mov	r3, r5
 8005112:	1891      	adds	r1, r2, r2
 8005114:	6339      	str	r1, [r7, #48]	; 0x30
 8005116:	415b      	adcs	r3, r3
 8005118:	637b      	str	r3, [r7, #52]	; 0x34
 800511a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800511e:	1912      	adds	r2, r2, r4
 8005120:	eb45 0303 	adc.w	r3, r5, r3
 8005124:	f04f 0000 	mov.w	r0, #0
 8005128:	f04f 0100 	mov.w	r1, #0
 800512c:	00d9      	lsls	r1, r3, #3
 800512e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005132:	00d0      	lsls	r0, r2, #3
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	1911      	adds	r1, r2, r4
 800513a:	65b9      	str	r1, [r7, #88]	; 0x58
 800513c:	416b      	adcs	r3, r5
 800513e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	461a      	mov	r2, r3
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	1891      	adds	r1, r2, r2
 800514c:	62b9      	str	r1, [r7, #40]	; 0x28
 800514e:	415b      	adcs	r3, r3
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005156:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800515a:	f7fb f899 	bl	8000290 <__aeabi_uldivmod>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4b8c      	ldr	r3, [pc, #560]	; (8005394 <UART_SetConfig+0x38c>)
 8005164:	fba3 1302 	umull	r1, r3, r3, r2
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	2164      	movs	r1, #100	; 0x64
 800516c:	fb01 f303 	mul.w	r3, r1, r3
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	3332      	adds	r3, #50	; 0x32
 8005176:	4a87      	ldr	r2, [pc, #540]	; (8005394 <UART_SetConfig+0x38c>)
 8005178:	fba2 2303 	umull	r2, r3, r2, r3
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005184:	441e      	add	r6, r3
 8005186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005188:	4618      	mov	r0, r3
 800518a:	f04f 0100 	mov.w	r1, #0
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	1894      	adds	r4, r2, r2
 8005194:	623c      	str	r4, [r7, #32]
 8005196:	415b      	adcs	r3, r3
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
 800519a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800519e:	1812      	adds	r2, r2, r0
 80051a0:	eb41 0303 	adc.w	r3, r1, r3
 80051a4:	f04f 0400 	mov.w	r4, #0
 80051a8:	f04f 0500 	mov.w	r5, #0
 80051ac:	00dd      	lsls	r5, r3, #3
 80051ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051b2:	00d4      	lsls	r4, r2, #3
 80051b4:	4622      	mov	r2, r4
 80051b6:	462b      	mov	r3, r5
 80051b8:	1814      	adds	r4, r2, r0
 80051ba:	653c      	str	r4, [r7, #80]	; 0x50
 80051bc:	414b      	adcs	r3, r1
 80051be:	657b      	str	r3, [r7, #84]	; 0x54
 80051c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	461a      	mov	r2, r3
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	1891      	adds	r1, r2, r2
 80051cc:	61b9      	str	r1, [r7, #24]
 80051ce:	415b      	adcs	r3, r3
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80051da:	f7fb f859 	bl	8000290 <__aeabi_uldivmod>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4b6c      	ldr	r3, [pc, #432]	; (8005394 <UART_SetConfig+0x38c>)
 80051e4:	fba3 1302 	umull	r1, r3, r3, r2
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	2164      	movs	r1, #100	; 0x64
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	3332      	adds	r3, #50	; 0x32
 80051f6:	4a67      	ldr	r2, [pc, #412]	; (8005394 <UART_SetConfig+0x38c>)
 80051f8:	fba2 2303 	umull	r2, r3, r2, r3
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	f003 0207 	and.w	r2, r3, #7
 8005202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4432      	add	r2, r6
 8005208:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800520a:	e0b9      	b.n	8005380 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800520c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800520e:	461c      	mov	r4, r3
 8005210:	f04f 0500 	mov.w	r5, #0
 8005214:	4622      	mov	r2, r4
 8005216:	462b      	mov	r3, r5
 8005218:	1891      	adds	r1, r2, r2
 800521a:	6139      	str	r1, [r7, #16]
 800521c:	415b      	adcs	r3, r3
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005224:	1912      	adds	r2, r2, r4
 8005226:	eb45 0303 	adc.w	r3, r5, r3
 800522a:	f04f 0000 	mov.w	r0, #0
 800522e:	f04f 0100 	mov.w	r1, #0
 8005232:	00d9      	lsls	r1, r3, #3
 8005234:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005238:	00d0      	lsls	r0, r2, #3
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	eb12 0804 	adds.w	r8, r2, r4
 8005242:	eb43 0905 	adc.w	r9, r3, r5
 8005246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	4618      	mov	r0, r3
 800524c:	f04f 0100 	mov.w	r1, #0
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	008b      	lsls	r3, r1, #2
 800525a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800525e:	0082      	lsls	r2, r0, #2
 8005260:	4640      	mov	r0, r8
 8005262:	4649      	mov	r1, r9
 8005264:	f7fb f814 	bl	8000290 <__aeabi_uldivmod>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4b49      	ldr	r3, [pc, #292]	; (8005394 <UART_SetConfig+0x38c>)
 800526e:	fba3 2302 	umull	r2, r3, r3, r2
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	011e      	lsls	r6, r3, #4
 8005276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005278:	4618      	mov	r0, r3
 800527a:	f04f 0100 	mov.w	r1, #0
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	1894      	adds	r4, r2, r2
 8005284:	60bc      	str	r4, [r7, #8]
 8005286:	415b      	adcs	r3, r3
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800528e:	1812      	adds	r2, r2, r0
 8005290:	eb41 0303 	adc.w	r3, r1, r3
 8005294:	f04f 0400 	mov.w	r4, #0
 8005298:	f04f 0500 	mov.w	r5, #0
 800529c:	00dd      	lsls	r5, r3, #3
 800529e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052a2:	00d4      	lsls	r4, r2, #3
 80052a4:	4622      	mov	r2, r4
 80052a6:	462b      	mov	r3, r5
 80052a8:	1814      	adds	r4, r2, r0
 80052aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80052ac:	414b      	adcs	r3, r1
 80052ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f04f 0100 	mov.w	r1, #0
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	008b      	lsls	r3, r1, #2
 80052c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052c8:	0082      	lsls	r2, r0, #2
 80052ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80052ce:	f7fa ffdf 	bl	8000290 <__aeabi_uldivmod>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4b2f      	ldr	r3, [pc, #188]	; (8005394 <UART_SetConfig+0x38c>)
 80052d8:	fba3 1302 	umull	r1, r3, r3, r2
 80052dc:	095b      	lsrs	r3, r3, #5
 80052de:	2164      	movs	r1, #100	; 0x64
 80052e0:	fb01 f303 	mul.w	r3, r1, r3
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	3332      	adds	r3, #50	; 0x32
 80052ea:	4a2a      	ldr	r2, [pc, #168]	; (8005394 <UART_SetConfig+0x38c>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052f6:	441e      	add	r6, r3
 80052f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052fa:	4618      	mov	r0, r3
 80052fc:	f04f 0100 	mov.w	r1, #0
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	1894      	adds	r4, r2, r2
 8005306:	603c      	str	r4, [r7, #0]
 8005308:	415b      	adcs	r3, r3
 800530a:	607b      	str	r3, [r7, #4]
 800530c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005310:	1812      	adds	r2, r2, r0
 8005312:	eb41 0303 	adc.w	r3, r1, r3
 8005316:	f04f 0400 	mov.w	r4, #0
 800531a:	f04f 0500 	mov.w	r5, #0
 800531e:	00dd      	lsls	r5, r3, #3
 8005320:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005324:	00d4      	lsls	r4, r2, #3
 8005326:	4622      	mov	r2, r4
 8005328:	462b      	mov	r3, r5
 800532a:	eb12 0a00 	adds.w	sl, r2, r0
 800532e:	eb43 0b01 	adc.w	fp, r3, r1
 8005332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4618      	mov	r0, r3
 8005338:	f04f 0100 	mov.w	r1, #0
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	008b      	lsls	r3, r1, #2
 8005346:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800534a:	0082      	lsls	r2, r0, #2
 800534c:	4650      	mov	r0, sl
 800534e:	4659      	mov	r1, fp
 8005350:	f7fa ff9e 	bl	8000290 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <UART_SetConfig+0x38c>)
 800535a:	fba3 1302 	umull	r1, r3, r3, r2
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	2164      	movs	r1, #100	; 0x64
 8005362:	fb01 f303 	mul.w	r3, r1, r3
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	3332      	adds	r3, #50	; 0x32
 800536c:	4a09      	ldr	r2, [pc, #36]	; (8005394 <UART_SetConfig+0x38c>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f003 020f 	and.w	r2, r3, #15
 8005378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4432      	add	r2, r6
 800537e:	609a      	str	r2, [r3, #8]
}
 8005380:	bf00      	nop
 8005382:	377c      	adds	r7, #124	; 0x7c
 8005384:	46bd      	mov	sp, r7
 8005386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538a:	bf00      	nop
 800538c:	40011000 	.word	0x40011000
 8005390:	40011400 	.word	0x40011400
 8005394:	51eb851f 	.word	0x51eb851f

08005398 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005398:	b084      	sub	sp, #16
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	f107 001c 	add.w	r0, r7, #28
 80053a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d122      	bne.n	80053f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d105      	bne.n	80053ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f9a0 	bl	8005730 <USB_CoreReset>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
 80053f4:	e01a      	b.n	800542c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f994 	bl	8005730 <USB_CoreReset>
 8005408:	4603      	mov	r3, r0
 800540a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800540c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	639a      	str	r2, [r3, #56]	; 0x38
 800541e:	e005      	b.n	800542c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	2b01      	cmp	r3, #1
 8005430:	d10b      	bne.n	800544a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f043 0206 	orr.w	r2, r3, #6
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005456:	b004      	add	sp, #16
 8005458:	4770      	bx	lr

0800545a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f043 0201 	orr.w	r2, r3, #1
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f023 0201 	bic.w	r2, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	460b      	mov	r3, r1
 80054a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d115      	bne.n	80054ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054cc:	2001      	movs	r0, #1
 80054ce:	f7fb fc17 	bl	8000d00 <HAL_Delay>
      ms++;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3301      	adds	r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f91a 	bl	8005712 <USB_GetMode>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d01e      	beq.n	8005522 <USB_SetCurrentMode+0x84>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b31      	cmp	r3, #49	; 0x31
 80054e8:	d9f0      	bls.n	80054cc <USB_SetCurrentMode+0x2e>
 80054ea:	e01a      	b.n	8005522 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d115      	bne.n	800551e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054fe:	2001      	movs	r0, #1
 8005500:	f7fb fbfe 	bl	8000d00 <HAL_Delay>
      ms++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3301      	adds	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f901 	bl	8005712 <USB_GetMode>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <USB_SetCurrentMode+0x84>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b31      	cmp	r3, #49	; 0x31
 800551a:	d9f0      	bls.n	80054fe <USB_SetCurrentMode+0x60>
 800551c:	e001      	b.n	8005522 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e005      	b.n	800552e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b32      	cmp	r3, #50	; 0x32
 8005526:	d101      	bne.n	800552c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e000      	b.n	800552e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	019b      	lsls	r3, r3, #6
 800554a:	f043 0220 	orr.w	r2, r3, #32
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3301      	adds	r3, #1
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	4a08      	ldr	r2, [pc, #32]	; (800557c <USB_FlushTxFifo+0x44>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e006      	b.n	8005570 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b20      	cmp	r3, #32
 800556c:	d0f1      	beq.n	8005552 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	00030d40 	.word	0x00030d40

08005580 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2210      	movs	r2, #16
 8005590:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3301      	adds	r3, #1
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	4a08      	ldr	r2, [pc, #32]	; (80055bc <USB_FlushRxFifo+0x3c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e006      	b.n	80055b0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d0f1      	beq.n	8005592 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	00030d40 	.word	0x00030d40

080055c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b089      	sub	sp, #36	; 0x24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	4611      	mov	r1, r2
 80055cc:	461a      	mov	r2, r3
 80055ce:	460b      	mov	r3, r1
 80055d0:	71fb      	strb	r3, [r7, #7]
 80055d2:	4613      	mov	r3, r2
 80055d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d123      	bne.n	800562e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055e6:	88bb      	ldrh	r3, [r7, #4]
 80055e8:	3303      	adds	r3, #3
 80055ea:	089b      	lsrs	r3, r3, #2
 80055ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055ee:	2300      	movs	r3, #0
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	e018      	b.n	8005626 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	031a      	lsls	r2, r3, #12
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005600:	461a      	mov	r2, r3
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	3301      	adds	r3, #1
 800560c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	3301      	adds	r3, #1
 8005612:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	3301      	adds	r3, #1
 8005618:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	3301      	adds	r3, #1
 800561e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	3301      	adds	r3, #1
 8005624:	61bb      	str	r3, [r7, #24]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	429a      	cmp	r2, r3
 800562c:	d3e2      	bcc.n	80055f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3724      	adds	r7, #36	; 0x24
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800563c:	b480      	push	{r7}
 800563e:	b08b      	sub	sp, #44	; 0x2c
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	089b      	lsrs	r3, r3, #2
 8005656:	b29b      	uxth	r3, r3
 8005658:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800565a:	88fb      	ldrh	r3, [r7, #6]
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005662:	2300      	movs	r3, #0
 8005664:	623b      	str	r3, [r7, #32]
 8005666:	e014      	b.n	8005692 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	601a      	str	r2, [r3, #0]
    pDest++;
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	3301      	adds	r3, #1
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	3301      	adds	r3, #1
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	3301      	adds	r3, #1
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	3301      	adds	r3, #1
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	3301      	adds	r3, #1
 8005690:	623b      	str	r3, [r7, #32]
 8005692:	6a3a      	ldr	r2, [r7, #32]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	429a      	cmp	r2, r3
 8005698:	d3e6      	bcc.n	8005668 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800569a:	8bfb      	ldrh	r3, [r7, #30]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01e      	beq.n	80056de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056aa:	461a      	mov	r2, r3
 80056ac:	f107 0310 	add.w	r3, r7, #16
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	701a      	strb	r2, [r3, #0]
      i++;
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	3301      	adds	r3, #1
 80056ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	3301      	adds	r3, #1
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80056d2:	8bfb      	ldrh	r3, [r7, #30]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056d8:	8bfb      	ldrh	r3, [r7, #30]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1ea      	bne.n	80056b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	372c      	adds	r7, #44	; 0x2c
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4013      	ands	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005704:	68fb      	ldr	r3, [r7, #12]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f003 0301 	and.w	r3, r3, #1
}
 8005722:	4618      	mov	r0, r3
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3301      	adds	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	4a13      	ldr	r2, [pc, #76]	; (8005790 <USB_CoreReset+0x60>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e01a      	b.n	8005782 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	daf3      	bge.n	800573c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f043 0201 	orr.w	r2, r3, #1
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3301      	adds	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	4a09      	ldr	r2, [pc, #36]	; (8005790 <USB_CoreReset+0x60>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d901      	bls.n	8005774 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e006      	b.n	8005782 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b01      	cmp	r3, #1
 800577e:	d0f1      	beq.n	8005764 <USB_CoreReset+0x34>

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	00030d40 	.word	0x00030d40

08005794 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005794:	b084      	sub	sp, #16
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	f107 001c 	add.w	r0, r7, #28
 80057a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057b0:	461a      	mov	r2, r3
 80057b2:	2300      	movs	r3, #0
 80057b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d018      	beq.n	8005818 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d10a      	bne.n	8005802 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057fa:	f043 0304 	orr.w	r3, r3, #4
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	e014      	b.n	800582c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005810:	f023 0304 	bic.w	r3, r3, #4
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	e009      	b.n	800582c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005826:	f023 0304 	bic.w	r3, r3, #4
 800582a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800582c:	2110      	movs	r1, #16
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff fe82 	bl	8005538 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff fea3 	bl	8005580 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e015      	b.n	800586c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4413      	add	r3, r2
 8005848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800584c:	461a      	mov	r2, r3
 800584e:	f04f 33ff 	mov.w	r3, #4294967295
 8005852:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4413      	add	r3, r2
 800585c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005860:	461a      	mov	r2, r3
 8005862:	2300      	movs	r3, #0
 8005864:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	429a      	cmp	r2, r3
 8005872:	d3e5      	bcc.n	8005840 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f04f 32ff 	mov.w	r2, #4294967295
 8005880:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00b      	beq.n	80058a6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005894:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a13      	ldr	r2, [pc, #76]	; (80058e8 <USB_HostInit+0x154>)
 800589a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a13      	ldr	r2, [pc, #76]	; (80058ec <USB_HostInit+0x158>)
 80058a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80058a4:	e009      	b.n	80058ba <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2280      	movs	r2, #128	; 0x80
 80058aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a10      	ldr	r2, [pc, #64]	; (80058f0 <USB_HostInit+0x15c>)
 80058b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a0f      	ldr	r2, [pc, #60]	; (80058f4 <USB_HostInit+0x160>)
 80058b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d105      	bne.n	80058cc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	f043 0210 	orr.w	r2, r3, #16
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699a      	ldr	r2, [r3, #24]
 80058d0:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <USB_HostInit+0x164>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058e4:	b004      	add	sp, #16
 80058e6:	4770      	bx	lr
 80058e8:	01000200 	.word	0x01000200
 80058ec:	00e00300 	.word	0x00e00300
 80058f0:	00600080 	.word	0x00600080
 80058f4:	004000e0 	.word	0x004000e0
 80058f8:	a3200008 	.word	0xa3200008

080058fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800591a:	f023 0303 	bic.w	r3, r3, #3
 800591e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	68f9      	ldr	r1, [r7, #12]
 8005930:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005934:	4313      	orrs	r3, r2
 8005936:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d107      	bne.n	800594e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005944:	461a      	mov	r2, r3
 8005946:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800594a:	6053      	str	r3, [r2, #4]
 800594c:	e009      	b.n	8005962 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d106      	bne.n	8005962 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800595a:	461a      	mov	r2, r3
 800595c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005960:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005990:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800599a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800599e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80059a0:	2064      	movs	r0, #100	; 0x64
 80059a2:	f7fb f9ad 	bl	8000d00 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80059b4:	200a      	movs	r0, #10
 80059b6:	f7fb f9a3 	bl	8000d00 <HAL_Delay>

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d109      	bne.n	8005a08 <USB_DriveVbus+0x44>
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d106      	bne.n	8005a08 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a06:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a12:	d109      	bne.n	8005a28 <USB_DriveVbus+0x64>
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a26:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	0c5b      	lsrs	r3, r3, #17
 8005a54:	f003 0303 	and.w	r3, r3, #3
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	b29b      	uxth	r3, r3
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	4608      	mov	r0, r1
 8005a92:	4611      	mov	r1, r2
 8005a94:	461a      	mov	r2, r3
 8005a96:	4603      	mov	r3, r0
 8005a98:	70fb      	strb	r3, [r7, #3]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	70bb      	strb	r3, [r7, #2]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8005abc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005abe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d87e      	bhi.n	8005bc4 <USB_HC_Init+0x13c>
 8005ac6:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <USB_HC_Init+0x44>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005add 	.word	0x08005add
 8005ad0:	08005b87 	.word	0x08005b87
 8005ad4:	08005add 	.word	0x08005add
 8005ad8:	08005b49 	.word	0x08005b49
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae8:	461a      	mov	r2, r3
 8005aea:	f240 439d 	movw	r3, #1181	; 0x49d
 8005aee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005af0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	da10      	bge.n	8005b1a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005af8:	78fb      	ldrb	r3, [r7, #3]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	78fa      	ldrb	r2, [r7, #3]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b16:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005b18:	e057      	b.n	8005bca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d051      	beq.n	8005bca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005b26:	78fb      	ldrb	r3, [r7, #3]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	78fa      	ldrb	r2, [r7, #3]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b44:	60d3      	str	r3, [r2, #12]
      break;
 8005b46:	e040      	b.n	8005bca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b54:	461a      	mov	r2, r3
 8005b56:	f240 639d 	movw	r3, #1693	; 0x69d
 8005b5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	da34      	bge.n	8005bce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	78fa      	ldrb	r2, [r7, #3]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b82:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005b84:	e023      	b.n	8005bce <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b92:	461a      	mov	r2, r3
 8005b94:	f240 2325 	movw	r3, #549	; 0x225
 8005b98:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	da17      	bge.n	8005bd2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	78fa      	ldrb	r2, [r7, #3]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bbc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005bc0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005bc2:	e006      	b.n	8005bd2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	77fb      	strb	r3, [r7, #31]
      break;
 8005bc8:	e004      	b.n	8005bd4 <USB_HC_Init+0x14c>
      break;
 8005bca:	bf00      	nop
 8005bcc:	e002      	b.n	8005bd4 <USB_HC_Init+0x14c>
      break;
 8005bce:	bf00      	nop
 8005bd0:	e000      	b.n	8005bd4 <USB_HC_Init+0x14c>
      break;
 8005bd2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bda:	699a      	ldr	r2, [r3, #24]
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	2101      	movs	r1, #1
 8005be4:	fa01 f303 	lsl.w	r3, r1, r3
 8005be8:	6939      	ldr	r1, [r7, #16]
 8005bea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005bfe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	da03      	bge.n	8005c0e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	e001      	b.n	8005c12 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff ff0f 	bl	8005a36 <USB_GetHostSpeed>
 8005c18:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d106      	bne.n	8005c30 <USB_HC_Init+0x1a8>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d003      	beq.n	8005c30 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	e001      	b.n	8005c34 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c34:	787b      	ldrb	r3, [r7, #1]
 8005c36:	059b      	lsls	r3, r3, #22
 8005c38:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c3c:	78bb      	ldrb	r3, [r7, #2]
 8005c3e:	02db      	lsls	r3, r3, #11
 8005c40:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c44:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c4a:	049b      	lsls	r3, r3, #18
 8005c4c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c50:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c52:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005c54:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c58:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	0159      	lsls	r1, r3, #5
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	440b      	add	r3, r1
 8005c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c70:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005c72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d10f      	bne.n	8005c9a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	78fa      	ldrb	r2, [r7, #3]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c98:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005c9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3720      	adds	r7, #32
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08c      	sub	sp, #48	; 0x30
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cc0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d02d      	beq.n	8005d2a <USB_HC_StartXfer+0x86>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	791b      	ldrb	r3, [r3, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d129      	bne.n	8005d2a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d117      	bne.n	8005d0c <USB_HC_StartXfer+0x68>
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	79db      	ldrb	r3, [r3, #7]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <USB_HC_StartXfer+0x48>
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	79db      	ldrb	r3, [r3, #7]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d10f      	bne.n	8005d0c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	6a3a      	ldr	r2, [r7, #32]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10b      	bne.n	8005d2a <USB_HC_StartXfer+0x86>
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	795b      	ldrb	r3, [r3, #5]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d107      	bne.n	8005d2a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	4619      	mov	r1, r3
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 fa2f 	bl	8006184 <USB_DoPing>
      return HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e0f8      	b.n	8005f1c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d018      	beq.n	8005d64 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	8912      	ldrh	r2, [r2, #8]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	8912      	ldrh	r2, [r2, #8]
 8005d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d46:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005d48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005d4a:	8b7b      	ldrh	r3, [r7, #26]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d90b      	bls.n	8005d68 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005d50:	8b7b      	ldrh	r3, [r7, #26]
 8005d52:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	8912      	ldrh	r2, [r2, #8]
 8005d5a:	fb02 f203 	mul.w	r2, r2, r3
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	611a      	str	r2, [r3, #16]
 8005d62:	e001      	b.n	8005d68 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005d64:	2301      	movs	r3, #1
 8005d66:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	78db      	ldrb	r3, [r3, #3]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d007      	beq.n	8005d80 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	8912      	ldrh	r2, [r2, #8]
 8005d76:	fb02 f203 	mul.w	r2, r2, r3
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	611a      	str	r2, [r3, #16]
 8005d7e:	e003      	b.n	8005d88 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	695a      	ldr	r2, [r3, #20]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d92:	04d9      	lsls	r1, r3, #19
 8005d94:	4b63      	ldr	r3, [pc, #396]	; (8005f24 <USB_HC_StartXfer+0x280>)
 8005d96:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d98:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	7a9b      	ldrb	r3, [r3, #10]
 8005d9e:	075b      	lsls	r3, r3, #29
 8005da0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005da4:	69f9      	ldr	r1, [r7, #28]
 8005da6:	0148      	lsls	r0, r1, #5
 8005da8:	6a39      	ldr	r1, [r7, #32]
 8005daa:	4401      	add	r1, r0
 8005dac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005db0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005db2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d009      	beq.n	8005dce <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	68d9      	ldr	r1, [r3, #12]
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dca:	460a      	mov	r2, r1
 8005dcc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	bf0c      	ite	eq
 8005dde:	2301      	moveq	r3, #1
 8005de0:	2300      	movne	r3, #0
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	0151      	lsls	r1, r2, #5
 8005df8:	6a3a      	ldr	r2, [r7, #32]
 8005dfa:	440a      	add	r2, r1
 8005dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e04:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	7e7b      	ldrb	r3, [r7, #25]
 8005e16:	075b      	lsls	r3, r3, #29
 8005e18:	69f9      	ldr	r1, [r7, #28]
 8005e1a:	0148      	lsls	r0, r1, #5
 8005e1c:	6a39      	ldr	r1, [r7, #32]
 8005e1e:	4401      	add	r1, r0
 8005e20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005e24:	4313      	orrs	r3, r2
 8005e26:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e3e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	78db      	ldrb	r3, [r3, #3]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	e003      	b.n	8005e5a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e58:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e60:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6e:	461a      	mov	r2, r3
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e04e      	b.n	8005f1c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	78db      	ldrb	r3, [r3, #3]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d149      	bne.n	8005f1a <USB_HC_StartXfer+0x276>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d045      	beq.n	8005f1a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	79db      	ldrb	r3, [r3, #7]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d830      	bhi.n	8005ef8 <USB_HC_StartXfer+0x254>
 8005e96:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <USB_HC_StartXfer+0x1f8>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005ead 	.word	0x08005ead
 8005ea0:	08005ed1 	.word	0x08005ed1
 8005ea4:	08005ead 	.word	0x08005ead
 8005ea8:	08005ed1 	.word	0x08005ed1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	3303      	adds	r3, #3
 8005eb2:	089b      	lsrs	r3, r3, #2
 8005eb4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005eb6:	8afa      	ldrh	r2, [r7, #22]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d91c      	bls.n	8005efc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f043 0220 	orr.w	r2, r3, #32
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ece:	e015      	b.n	8005efc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	3303      	adds	r3, #3
 8005ed6:	089b      	lsrs	r3, r3, #2
 8005ed8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005eda:	8afa      	ldrh	r2, [r7, #22]
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d90a      	bls.n	8005f00 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ef6:	e003      	b.n	8005f00 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005ef8:	bf00      	nop
 8005efa:	e002      	b.n	8005f02 <USB_HC_StartXfer+0x25e>
        break;
 8005efc:	bf00      	nop
 8005efe:	e000      	b.n	8005f02 <USB_HC_StartXfer+0x25e>
        break;
 8005f00:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	68d9      	ldr	r1, [r3, #12]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	785a      	ldrb	r2, [r3, #1]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2000      	movs	r0, #0
 8005f12:	9000      	str	r0, [sp, #0]
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff fb53 	bl	80055c0 <USB_WritePacket>
  }

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3728      	adds	r7, #40	; 0x28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	1ff80000 	.word	0x1ff80000

08005f28 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	b29b      	uxth	r3, r3
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b089      	sub	sp, #36	; 0x24
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	0c9b      	lsrs	r3, r3, #18
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	0fdb      	lsrs	r3, r3, #31
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d104      	bne.n	8005fa4 <USB_HC_Halt+0x5a>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e0e8      	b.n	8006176 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <USB_HC_Halt+0x66>
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d173      	bne.n	8006098 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fce:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f040 80cb 	bne.w	8006174 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d143      	bne.n	8006072 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	0151      	lsls	r1, r2, #5
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	440a      	add	r2, r1
 8006000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006008:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	4413      	add	r3, r2
 8006012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	440a      	add	r2, r1
 8006020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006028:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	4413      	add	r3, r2
 8006032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	0151      	lsls	r1, r2, #5
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	440a      	add	r2, r1
 8006040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006044:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006048:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	3301      	adds	r3, #1
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006056:	d81d      	bhi.n	8006094 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	4413      	add	r3, r2
 8006060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800606a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800606e:	d0ec      	beq.n	800604a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006070:	e080      	b.n	8006174 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	440a      	add	r2, r1
 8006088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800608c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006090:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006092:	e06f      	b.n	8006174 <USB_HC_Halt+0x22a>
            break;
 8006094:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006096:	e06d      	b.n	8006174 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060b6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d143      	bne.n	8006150 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006102:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006106:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	4413      	add	r3, r2
 8006110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	440a      	add	r2, r1
 800611e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006122:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006126:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	3301      	adds	r3, #1
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006134:	d81d      	bhi.n	8006172 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	4413      	add	r3, r2
 800613e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800614c:	d0ec      	beq.n	8006128 <USB_HC_Halt+0x1de>
 800614e:	e011      	b.n	8006174 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	4413      	add	r3, r2
 8006158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	440a      	add	r2, r1
 8006166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800616a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	e000      	b.n	8006174 <USB_HC_Halt+0x22a>
          break;
 8006172:	bf00      	nop
    }
  }

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3724      	adds	r7, #36	; 0x24
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
	...

08006184 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006194:	78fb      	ldrb	r3, [r7, #3]
 8006196:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006198:	2301      	movs	r3, #1
 800619a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	04da      	lsls	r2, r3, #19
 80061a0:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <USB_DoPing+0x74>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061b4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061cc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061d4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e2:	461a      	mov	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	1ff80000 	.word	0x1ff80000

080061fc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff f935 	bl	800547c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006212:	2110      	movs	r1, #16
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff f98f 	bl	8005538 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff f9b0 	bl	8005580 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006220:	2300      	movs	r3, #0
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	e01f      	b.n	8006266 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800623c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006244:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800624c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625a:	461a      	mov	r2, r3
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	3301      	adds	r3, #1
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b0f      	cmp	r3, #15
 800626a:	d9dc      	bls.n	8006226 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800626c:	2300      	movs	r3, #0
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	e034      	b.n	80062dc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006288:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006290:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006298:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a6:	461a      	mov	r2, r3
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	3301      	adds	r3, #1
 80062b0:	617b      	str	r3, [r7, #20]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062b8:	d80c      	bhi.n	80062d4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062d0:	d0ec      	beq.n	80062ac <USB_StopHost+0xb0>
 80062d2:	e000      	b.n	80062d6 <USB_StopHost+0xda>
        break;
 80062d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	3301      	adds	r3, #1
 80062da:	613b      	str	r3, [r7, #16]
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b0f      	cmp	r3, #15
 80062e0:	d9c7      	bls.n	8006272 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062e8:	461a      	mov	r2, r3
 80062ea:	f04f 33ff 	mov.w	r3, #4294967295
 80062ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f04f 32ff 	mov.w	r2, #4294967295
 80062f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff f8ae 	bl	800545a <USB_EnableGlobalInt>

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800630c:	4904      	ldr	r1, [pc, #16]	; (8006320 <MX_FATFS_Init+0x18>)
 800630e:	4805      	ldr	r0, [pc, #20]	; (8006324 <MX_FATFS_Init+0x1c>)
 8006310:	f004 fb34 	bl	800a97c <FATFS_LinkDriver>
 8006314:	4603      	mov	r3, r0
 8006316:	461a      	mov	r2, r3
 8006318:	4b03      	ldr	r3, [pc, #12]	; (8006328 <MX_FATFS_Init+0x20>)
 800631a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800631c:	bf00      	nop
 800631e:	bd80      	pop	{r7, pc}
 8006320:	200086b8 	.word	0x200086b8
 8006324:	0801e974 	.word	0x0801e974
 8006328:	20008b24 	.word	0x20008b24

0800632c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	4603      	mov	r3, r0
 8006334:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006352:	79fb      	ldrb	r3, [r7, #7]
 8006354:	4619      	mov	r1, r3
 8006356:	4808      	ldr	r0, [pc, #32]	; (8006378 <USBH_status+0x34>)
 8006358:	f001 fc78 	bl	8007c4c <USBH_MSC_UnitIsReady>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <USBH_status+0x24>
  {
    res = RES_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]
 8006366:	e001      	b.n	800636c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	2000f3e0 	.word	0x2000f3e0

0800637c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b094      	sub	sp, #80	; 0x50
 8006380:	af02      	add	r7, sp, #8
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	607a      	str	r2, [r7, #4]
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	4603      	mov	r3, r0
 800638a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006392:	7bf9      	ldrb	r1, [r7, #15]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	4818      	ldr	r0, [pc, #96]	; (8006400 <USBH_read+0x84>)
 800639e:	f001 fc9f 	bl	8007ce0 <USBH_MSC_Read>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d103      	bne.n	80063b0 <USBH_read+0x34>
  {
    res = RES_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80063ae:	e020      	b.n	80063f2 <USBH_read+0x76>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80063b0:	f107 0210 	add.w	r2, r7, #16
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	4619      	mov	r1, r3
 80063b8:	4811      	ldr	r0, [pc, #68]	; (8006400 <USBH_read+0x84>)
 80063ba:	f001 fc6d 	bl	8007c98 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80063be:	7f7b      	ldrb	r3, [r7, #29]
 80063c0:	2b3a      	cmp	r3, #58	; 0x3a
 80063c2:	d005      	beq.n	80063d0 <USBH_read+0x54>
 80063c4:	2b3a      	cmp	r3, #58	; 0x3a
 80063c6:	dc10      	bgt.n	80063ea <USBH_read+0x6e>
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d001      	beq.n	80063d0 <USBH_read+0x54>
 80063cc:	2b28      	cmp	r3, #40	; 0x28
 80063ce:	d10c      	bne.n	80063ea <USBH_read+0x6e>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 80063d0:	480c      	ldr	r0, [pc, #48]	; (8006404 <USBH_read+0x88>)
 80063d2:	f014 f83f 	bl	801a454 <iprintf>
 80063d6:	480c      	ldr	r0, [pc, #48]	; (8006408 <USBH_read+0x8c>)
 80063d8:	f014 f83c 	bl	801a454 <iprintf>
 80063dc:	200a      	movs	r0, #10
 80063de:	f014 f851 	bl	801a484 <putchar>
      res = RES_NOTRDY;
 80063e2:	2303      	movs	r3, #3
 80063e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80063e8:	e003      	b.n	80063f2 <USBH_read+0x76>

    default:
      res = RES_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80063f0:	bf00      	nop
    }
  }

  return res;
 80063f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3748      	adds	r7, #72	; 0x48
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	2000f3e0 	.word	0x2000f3e0
 8006404:	0801b420 	.word	0x0801b420
 8006408:	0801b428 	.word	0x0801b428

0800640c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b094      	sub	sp, #80	; 0x50
 8006410:	af02      	add	r7, sp, #8
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	607a      	str	r2, [r7, #4]
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	4603      	mov	r3, r0
 800641a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006422:	7bf9      	ldrb	r1, [r7, #15]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	4820      	ldr	r0, [pc, #128]	; (80064b0 <USBH_write+0xa4>)
 800642e:	f001 fcc0 	bl	8007db2 <USBH_MSC_Write>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d103      	bne.n	8006440 <USBH_write+0x34>
  {
    res = RES_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800643e:	e031      	b.n	80064a4 <USBH_write+0x98>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006440:	f107 0210 	add.w	r2, r7, #16
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	4619      	mov	r1, r3
 8006448:	4819      	ldr	r0, [pc, #100]	; (80064b0 <USBH_write+0xa4>)
 800644a:	f001 fc25 	bl	8007c98 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800644e:	7f7b      	ldrb	r3, [r7, #29]
 8006450:	2b3a      	cmp	r3, #58	; 0x3a
 8006452:	d016      	beq.n	8006482 <USBH_write+0x76>
 8006454:	2b3a      	cmp	r3, #58	; 0x3a
 8006456:	dc21      	bgt.n	800649c <USBH_write+0x90>
 8006458:	2b28      	cmp	r3, #40	; 0x28
 800645a:	d012      	beq.n	8006482 <USBH_write+0x76>
 800645c:	2b28      	cmp	r3, #40	; 0x28
 800645e:	dc1d      	bgt.n	800649c <USBH_write+0x90>
 8006460:	2b04      	cmp	r3, #4
 8006462:	d00e      	beq.n	8006482 <USBH_write+0x76>
 8006464:	2b27      	cmp	r3, #39	; 0x27
 8006466:	d119      	bne.n	800649c <USBH_write+0x90>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 8006468:	4812      	ldr	r0, [pc, #72]	; (80064b4 <USBH_write+0xa8>)
 800646a:	f013 fff3 	bl	801a454 <iprintf>
 800646e:	4812      	ldr	r0, [pc, #72]	; (80064b8 <USBH_write+0xac>)
 8006470:	f013 fff0 	bl	801a454 <iprintf>
 8006474:	200a      	movs	r0, #10
 8006476:	f014 f805 	bl	801a484 <putchar>
      res = RES_WRPRT;
 800647a:	2302      	movs	r3, #2
 800647c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006480:	e010      	b.n	80064a4 <USBH_write+0x98>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 8006482:	480c      	ldr	r0, [pc, #48]	; (80064b4 <USBH_write+0xa8>)
 8006484:	f013 ffe6 	bl	801a454 <iprintf>
 8006488:	480c      	ldr	r0, [pc, #48]	; (80064bc <USBH_write+0xb0>)
 800648a:	f013 ffe3 	bl	801a454 <iprintf>
 800648e:	200a      	movs	r0, #10
 8006490:	f013 fff8 	bl	801a484 <putchar>
      res = RES_NOTRDY;
 8006494:	2303      	movs	r3, #3
 8006496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800649a:	e003      	b.n	80064a4 <USBH_write+0x98>

    default:
      res = RES_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80064a2:	bf00      	nop
    }
  }

  return res;
 80064a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3748      	adds	r7, #72	; 0x48
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	2000f3e0 	.word	0x2000f3e0
 80064b4:	0801b420 	.word	0x0801b420
 80064b8:	0801b440 	.word	0x0801b440
 80064bc:	0801b428 	.word	0x0801b428

080064c0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b090      	sub	sp, #64	; 0x40
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	603a      	str	r2, [r7, #0]
 80064ca:	71fb      	strb	r3, [r7, #7]
 80064cc:	460b      	mov	r3, r1
 80064ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80064d6:	79bb      	ldrb	r3, [r7, #6]
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d852      	bhi.n	8006582 <USBH_ioctl+0xc2>
 80064dc:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <USBH_ioctl+0x24>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	080064f5 	.word	0x080064f5
 80064e8:	080064fd 	.word	0x080064fd
 80064ec:	08006527 	.word	0x08006527
 80064f0:	08006553 	.word	0x08006553
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80064fa:	e045      	b.n	8006588 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80064fc:	f107 0208 	add.w	r2, r7, #8
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	4619      	mov	r1, r3
 8006504:	4823      	ldr	r0, [pc, #140]	; (8006594 <USBH_ioctl+0xd4>)
 8006506:	f001 fbc7 	bl	8007c98 <USBH_MSC_GetLUNInfo>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800651c:	e034      	b.n	8006588 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006524:	e030      	b.n	8006588 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006526:	f107 0208 	add.w	r2, r7, #8
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	4619      	mov	r1, r3
 800652e:	4819      	ldr	r0, [pc, #100]	; (8006594 <USBH_ioctl+0xd4>)
 8006530:	f001 fbb2 	bl	8007c98 <USBH_MSC_GetLUNInfo>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d107      	bne.n	800654a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800653a:	8a3b      	ldrh	r3, [r7, #16]
 800653c:	461a      	mov	r2, r3
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006548:	e01e      	b.n	8006588 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006550:	e01a      	b.n	8006588 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006552:	f107 0208 	add.w	r2, r7, #8
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	4619      	mov	r1, r3
 800655a:	480e      	ldr	r0, [pc, #56]	; (8006594 <USBH_ioctl+0xd4>)
 800655c:	f001 fb9c 	bl	8007c98 <USBH_MSC_GetLUNInfo>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006566:	8a3b      	ldrh	r3, [r7, #16]
 8006568:	0a5b      	lsrs	r3, r3, #9
 800656a:	b29b      	uxth	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006578:	e006      	b.n	8006588 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006580:	e002      	b.n	8006588 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006582:	2304      	movs	r3, #4
 8006584:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006588:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800658c:	4618      	mov	r0, r3
 800658e:	3740      	adds	r7, #64	; 0x40
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	2000f3e0 	.word	0x2000f3e0

08006598 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006598:	b5b0      	push	{r4, r5, r7, lr}
 800659a:	b08e      	sub	sp, #56	; 0x38
 800659c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800659e:	2100      	movs	r1, #0
 80065a0:	2000      	movs	r0, #0
 80065a2:	f007 fa5b 	bl	800da5c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80065a6:	4b2a      	ldr	r3, [pc, #168]	; (8006650 <MX_LWIP_Init+0xb8>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80065ac:	4b29      	ldr	r3, [pc, #164]	; (8006654 <MX_LWIP_Init+0xbc>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80065b2:	4b29      	ldr	r3, [pc, #164]	; (8006658 <MX_LWIP_Init+0xc0>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80065b8:	4b28      	ldr	r3, [pc, #160]	; (800665c <MX_LWIP_Init+0xc4>)
 80065ba:	9302      	str	r3, [sp, #8]
 80065bc:	4b28      	ldr	r3, [pc, #160]	; (8006660 <MX_LWIP_Init+0xc8>)
 80065be:	9301      	str	r3, [sp, #4]
 80065c0:	2300      	movs	r3, #0
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	4b24      	ldr	r3, [pc, #144]	; (8006658 <MX_LWIP_Init+0xc0>)
 80065c6:	4a23      	ldr	r2, [pc, #140]	; (8006654 <MX_LWIP_Init+0xbc>)
 80065c8:	4921      	ldr	r1, [pc, #132]	; (8006650 <MX_LWIP_Init+0xb8>)
 80065ca:	4826      	ldr	r0, [pc, #152]	; (8006664 <MX_LWIP_Init+0xcc>)
 80065cc:	f007 ffca 	bl	800e564 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80065d0:	4824      	ldr	r0, [pc, #144]	; (8006664 <MX_LWIP_Init+0xcc>)
 80065d2:	f008 f981 	bl	800e8d8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80065d6:	4b23      	ldr	r3, [pc, #140]	; (8006664 <MX_LWIP_Init+0xcc>)
 80065d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80065dc:	089b      	lsrs	r3, r3, #2
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80065e8:	481e      	ldr	r0, [pc, #120]	; (8006664 <MX_LWIP_Init+0xcc>)
 80065ea:	f008 f985 	bl	800e8f8 <netif_set_up>
 80065ee:	e002      	b.n	80065f6 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80065f0:	481c      	ldr	r0, [pc, #112]	; (8006664 <MX_LWIP_Init+0xcc>)
 80065f2:	f008 f9ed 	bl	800e9d0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80065f6:	491c      	ldr	r1, [pc, #112]	; (8006668 <MX_LWIP_Init+0xd0>)
 80065f8:	481a      	ldr	r0, [pc, #104]	; (8006664 <MX_LWIP_Init+0xcc>)
 80065fa:	f008 fa83 	bl	800eb04 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80065fe:	2300      	movs	r3, #0
 8006600:	623b      	str	r3, [r7, #32]
 8006602:	2300      	movs	r3, #0
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8006606:	f107 0320 	add.w	r3, r7, #32
 800660a:	2101      	movs	r1, #1
 800660c:	4618      	mov	r0, r3
 800660e:	f004 fb01 	bl	800ac14 <osSemaphoreCreate>
 8006612:	4603      	mov	r3, r0
 8006614:	4a15      	ldr	r2, [pc, #84]	; (800666c <MX_LWIP_Init+0xd4>)
 8006616:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8006618:	4b15      	ldr	r3, [pc, #84]	; (8006670 <MX_LWIP_Init+0xd8>)
 800661a:	4a12      	ldr	r2, [pc, #72]	; (8006664 <MX_LWIP_Init+0xcc>)
 800661c:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800661e:	4b13      	ldr	r3, [pc, #76]	; (800666c <MX_LWIP_Init+0xd4>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a13      	ldr	r2, [pc, #76]	; (8006670 <MX_LWIP_Init+0xd8>)
 8006624:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8006626:	4b13      	ldr	r3, [pc, #76]	; (8006674 <MX_LWIP_Init+0xdc>)
 8006628:	1d3c      	adds	r4, r7, #4
 800662a:	461d      	mov	r5, r3
 800662c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800662e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8006638:	1d3b      	adds	r3, r7, #4
 800663a:	490d      	ldr	r1, [pc, #52]	; (8006670 <MX_LWIP_Init+0xd8>)
 800663c:	4618      	mov	r0, r3
 800663e:	f004 f9ed 	bl	800aa1c <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006642:	4808      	ldr	r0, [pc, #32]	; (8006664 <MX_LWIP_Init+0xcc>)
 8006644:	f00f fbc0 	bl	8015dc8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006648:	bf00      	nop
 800664a:	3728      	adds	r7, #40	; 0x28
 800664c:	46bd      	mov	sp, r7
 800664e:	bdb0      	pop	{r4, r5, r7, pc}
 8006650:	20008b68 	.word	0x20008b68
 8006654:	20008b6c 	.word	0x20008b6c
 8006658:	20008b70 	.word	0x20008b70
 800665c:	0800d999 	.word	0x0800d999
 8006660:	08006ce9 	.word	0x08006ce9
 8006664:	20008b30 	.word	0x20008b30
 8006668:	08006dcd 	.word	0x08006dcd
 800666c:	20000318 	.word	0x20000318
 8006670:	20008b28 	.word	0x20008b28
 8006674:	0801b468 	.word	0x0801b468

08006678 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08e      	sub	sp, #56	; 0x38
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	605a      	str	r2, [r3, #4]
 800668a:	609a      	str	r2, [r3, #8]
 800668c:	60da      	str	r2, [r3, #12]
 800668e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a59      	ldr	r2, [pc, #356]	; (80067fc <HAL_ETH_MspInit+0x184>)
 8006696:	4293      	cmp	r3, r2
 8006698:	f040 80ac 	bne.w	80067f4 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800669c:	2300      	movs	r3, #0
 800669e:	623b      	str	r3, [r7, #32]
 80066a0:	4b57      	ldr	r3, [pc, #348]	; (8006800 <HAL_ETH_MspInit+0x188>)
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	4a56      	ldr	r2, [pc, #344]	; (8006800 <HAL_ETH_MspInit+0x188>)
 80066a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80066aa:	6313      	str	r3, [r2, #48]	; 0x30
 80066ac:	4b54      	ldr	r3, [pc, #336]	; (8006800 <HAL_ETH_MspInit+0x188>)
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b4:	623b      	str	r3, [r7, #32]
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	2300      	movs	r3, #0
 80066ba:	61fb      	str	r3, [r7, #28]
 80066bc:	4b50      	ldr	r3, [pc, #320]	; (8006800 <HAL_ETH_MspInit+0x188>)
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	4a4f      	ldr	r2, [pc, #316]	; (8006800 <HAL_ETH_MspInit+0x188>)
 80066c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066c6:	6313      	str	r3, [r2, #48]	; 0x30
 80066c8:	4b4d      	ldr	r3, [pc, #308]	; (8006800 <HAL_ETH_MspInit+0x188>)
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066d0:	61fb      	str	r3, [r7, #28]
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	2300      	movs	r3, #0
 80066d6:	61bb      	str	r3, [r7, #24]
 80066d8:	4b49      	ldr	r3, [pc, #292]	; (8006800 <HAL_ETH_MspInit+0x188>)
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	4a48      	ldr	r2, [pc, #288]	; (8006800 <HAL_ETH_MspInit+0x188>)
 80066de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066e2:	6313      	str	r3, [r2, #48]	; 0x30
 80066e4:	4b46      	ldr	r3, [pc, #280]	; (8006800 <HAL_ETH_MspInit+0x188>)
 80066e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	4b42      	ldr	r3, [pc, #264]	; (8006800 <HAL_ETH_MspInit+0x188>)
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	4a41      	ldr	r2, [pc, #260]	; (8006800 <HAL_ETH_MspInit+0x188>)
 80066fa:	f043 0304 	orr.w	r3, r3, #4
 80066fe:	6313      	str	r3, [r2, #48]	; 0x30
 8006700:	4b3f      	ldr	r3, [pc, #252]	; (8006800 <HAL_ETH_MspInit+0x188>)
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800670c:	2300      	movs	r3, #0
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	4b3b      	ldr	r3, [pc, #236]	; (8006800 <HAL_ETH_MspInit+0x188>)
 8006712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006714:	4a3a      	ldr	r2, [pc, #232]	; (8006800 <HAL_ETH_MspInit+0x188>)
 8006716:	f043 0301 	orr.w	r3, r3, #1
 800671a:	6313      	str	r3, [r2, #48]	; 0x30
 800671c:	4b38      	ldr	r3, [pc, #224]	; (8006800 <HAL_ETH_MspInit+0x188>)
 800671e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	4b34      	ldr	r3, [pc, #208]	; (8006800 <HAL_ETH_MspInit+0x188>)
 800672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006730:	4a33      	ldr	r2, [pc, #204]	; (8006800 <HAL_ETH_MspInit+0x188>)
 8006732:	f043 0302 	orr.w	r3, r3, #2
 8006736:	6313      	str	r3, [r2, #48]	; 0x30
 8006738:	4b31      	ldr	r3, [pc, #196]	; (8006800 <HAL_ETH_MspInit+0x188>)
 800673a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006744:	2300      	movs	r3, #0
 8006746:	60bb      	str	r3, [r7, #8]
 8006748:	4b2d      	ldr	r3, [pc, #180]	; (8006800 <HAL_ETH_MspInit+0x188>)
 800674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674c:	4a2c      	ldr	r2, [pc, #176]	; (8006800 <HAL_ETH_MspInit+0x188>)
 800674e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006752:	6313      	str	r3, [r2, #48]	; 0x30
 8006754:	4b2a      	ldr	r3, [pc, #168]	; (8006800 <HAL_ETH_MspInit+0x188>)
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675c:	60bb      	str	r3, [r7, #8]
 800675e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006760:	2332      	movs	r3, #50	; 0x32
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006764:	2302      	movs	r3, #2
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006768:	2300      	movs	r3, #0
 800676a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800676c:	2303      	movs	r3, #3
 800676e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006770:	230b      	movs	r3, #11
 8006772:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006778:	4619      	mov	r1, r3
 800677a:	4822      	ldr	r0, [pc, #136]	; (8006804 <HAL_ETH_MspInit+0x18c>)
 800677c:	f7fb fd6c 	bl	8002258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006780:	2386      	movs	r3, #134	; 0x86
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006784:	2302      	movs	r3, #2
 8006786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006788:	2300      	movs	r3, #0
 800678a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800678c:	2303      	movs	r3, #3
 800678e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006790:	230b      	movs	r3, #11
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006798:	4619      	mov	r1, r3
 800679a:	481b      	ldr	r0, [pc, #108]	; (8006808 <HAL_ETH_MspInit+0x190>)
 800679c:	f7fb fd5c 	bl	8002258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80067a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067a6:	2302      	movs	r3, #2
 80067a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067ae:	2303      	movs	r3, #3
 80067b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80067b2:	230b      	movs	r3, #11
 80067b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80067b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ba:	4619      	mov	r1, r3
 80067bc:	4813      	ldr	r0, [pc, #76]	; (800680c <HAL_ETH_MspInit+0x194>)
 80067be:	f7fb fd4b 	bl	8002258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80067c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80067c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067c8:	2302      	movs	r3, #2
 80067ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067d0:	2303      	movs	r3, #3
 80067d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80067d4:	230b      	movs	r3, #11
 80067d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80067d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067dc:	4619      	mov	r1, r3
 80067de:	480c      	ldr	r0, [pc, #48]	; (8006810 <HAL_ETH_MspInit+0x198>)
 80067e0:	f7fb fd3a 	bl	8002258 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80067e4:	2200      	movs	r2, #0
 80067e6:	2105      	movs	r1, #5
 80067e8:	203d      	movs	r0, #61	; 0x3d
 80067ea:	f7fa fb65 	bl	8000eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80067ee:	203d      	movs	r0, #61	; 0x3d
 80067f0:	f7fa fb7e 	bl	8000ef0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80067f4:	bf00      	nop
 80067f6:	3738      	adds	r7, #56	; 0x38
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40028000 	.word	0x40028000
 8006800:	40023800 	.word	0x40023800
 8006804:	40020800 	.word	0x40020800
 8006808:	40020000 	.word	0x40020000
 800680c:	40020400 	.word	0x40020400
 8006810:	40021800 	.word	0x40021800

08006814 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800681c:	4b04      	ldr	r3, [pc, #16]	; (8006830 <HAL_ETH_RxCpltCallback+0x1c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f004 fa77 	bl	800ad14 <osSemaphoreRelease>
}
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	2000031c 	.word	0x2000031c

08006834 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006834:	b5b0      	push	{r4, r5, r7, lr}
 8006836:	b090      	sub	sp, #64	; 0x40
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800683c:	2300      	movs	r3, #0
 800683e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006840:	4b60      	ldr	r3, [pc, #384]	; (80069c4 <low_level_init+0x190>)
 8006842:	4a61      	ldr	r2, [pc, #388]	; (80069c8 <low_level_init+0x194>)
 8006844:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006846:	4b5f      	ldr	r3, [pc, #380]	; (80069c4 <low_level_init+0x190>)
 8006848:	2201      	movs	r2, #1
 800684a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800684c:	4b5d      	ldr	r3, [pc, #372]	; (80069c4 <low_level_init+0x190>)
 800684e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006852:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006854:	4b5b      	ldr	r3, [pc, #364]	; (80069c4 <low_level_init+0x190>)
 8006856:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800685a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800685c:	4b59      	ldr	r3, [pc, #356]	; (80069c4 <low_level_init+0x190>)
 800685e:	2200      	movs	r2, #0
 8006860:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0xB0;
 8006862:	23b0      	movs	r3, #176	; 0xb0
 8006864:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x41;
 8006868:	2341      	movs	r3, #65	; 0x41
 800686a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0x9B;
 800686e:	239b      	movs	r3, #155	; 0x9b
 8006870:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xF3;
 8006874:	23f3      	movs	r3, #243	; 0xf3
 8006876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x1D;
 800687a:	231d      	movs	r3, #29
 800687c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x7E;
 8006880:	237e      	movs	r3, #126	; 0x7e
 8006882:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8006886:	4a4f      	ldr	r2, [pc, #316]	; (80069c4 <low_level_init+0x190>)
 8006888:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800688c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800688e:	4b4d      	ldr	r3, [pc, #308]	; (80069c4 <low_level_init+0x190>)
 8006890:	2201      	movs	r2, #1
 8006892:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006894:	4b4b      	ldr	r3, [pc, #300]	; (80069c4 <low_level_init+0x190>)
 8006896:	2200      	movs	r2, #0
 8006898:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800689a:	4b4a      	ldr	r3, [pc, #296]	; (80069c4 <low_level_init+0x190>)
 800689c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80068a0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80068a2:	4848      	ldr	r0, [pc, #288]	; (80069c4 <low_level_init+0x190>)
 80068a4:	f7fa fb32 	bl	8000f0c <HAL_ETH_Init>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80068ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d108      	bne.n	80068c8 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80068bc:	f043 0304 	orr.w	r3, r3, #4
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80068c8:	2304      	movs	r3, #4
 80068ca:	4a40      	ldr	r2, [pc, #256]	; (80069cc <low_level_init+0x198>)
 80068cc:	4940      	ldr	r1, [pc, #256]	; (80069d0 <low_level_init+0x19c>)
 80068ce:	483d      	ldr	r0, [pc, #244]	; (80069c4 <low_level_init+0x190>)
 80068d0:	f7fa fcb8 	bl	8001244 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80068d4:	2304      	movs	r3, #4
 80068d6:	4a3f      	ldr	r2, [pc, #252]	; (80069d4 <low_level_init+0x1a0>)
 80068d8:	493f      	ldr	r1, [pc, #252]	; (80069d8 <low_level_init+0x1a4>)
 80068da:	483a      	ldr	r0, [pc, #232]	; (80069c4 <low_level_init+0x190>)
 80068dc:	f7fa fd1b 	bl	8001316 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2206      	movs	r2, #6
 80068e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80068e8:	4b36      	ldr	r3, [pc, #216]	; (80069c4 <low_level_init+0x190>)
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	781a      	ldrb	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80068f4:	4b33      	ldr	r3, [pc, #204]	; (80069c4 <low_level_init+0x190>)
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	785a      	ldrb	r2, [r3, #1]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006900:	4b30      	ldr	r3, [pc, #192]	; (80069c4 <low_level_init+0x190>)
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	789a      	ldrb	r2, [r3, #2]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800690c:	4b2d      	ldr	r3, [pc, #180]	; (80069c4 <low_level_init+0x190>)
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	78da      	ldrb	r2, [r3, #3]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006918:	4b2a      	ldr	r3, [pc, #168]	; (80069c4 <low_level_init+0x190>)
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	791a      	ldrb	r2, [r3, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006924:	4b27      	ldr	r3, [pc, #156]	; (80069c4 <low_level_init+0x190>)
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	795a      	ldrb	r2, [r3, #5]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006936:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800693e:	f043 030a 	orr.w	r3, r3, #10
 8006942:	b2da      	uxtb	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800694a:	2300      	movs	r3, #0
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
 800694e:	2300      	movs	r3, #0
 8006950:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006956:	2101      	movs	r1, #1
 8006958:	4618      	mov	r0, r3
 800695a:	f004 f95b 	bl	800ac14 <osSemaphoreCreate>
 800695e:	4603      	mov	r3, r0
 8006960:	4a1e      	ldr	r2, [pc, #120]	; (80069dc <low_level_init+0x1a8>)
 8006962:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006964:	4b1e      	ldr	r3, [pc, #120]	; (80069e0 <low_level_init+0x1ac>)
 8006966:	f107 040c 	add.w	r4, r7, #12
 800696a:	461d      	mov	r5, r3
 800696c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800696e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006970:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006974:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006978:	f107 030c 	add.w	r3, r7, #12
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	4618      	mov	r0, r3
 8006980:	f004 f84c 	bl	800aa1c <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006984:	480f      	ldr	r0, [pc, #60]	; (80069c4 <low_level_init+0x190>)
 8006986:	f7fa ffee 	bl	8001966 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800698a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800698e:	461a      	mov	r2, r3
 8006990:	211d      	movs	r1, #29
 8006992:	480c      	ldr	r0, [pc, #48]	; (80069c4 <low_level_init+0x190>)
 8006994:	f7fa ff19 	bl	80017ca <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699a:	f043 030b 	orr.w	r3, r3, #11
 800699e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	461a      	mov	r2, r3
 80069a4:	211d      	movs	r1, #29
 80069a6:	4807      	ldr	r0, [pc, #28]	; (80069c4 <low_level_init+0x190>)
 80069a8:	f7fa ff77 	bl	800189a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80069ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80069b0:	461a      	mov	r2, r3
 80069b2:	211d      	movs	r1, #29
 80069b4:	4803      	ldr	r0, [pc, #12]	; (80069c4 <low_level_init+0x190>)
 80069b6:	f7fa ff08 	bl	80017ca <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80069ba:	bf00      	nop
 80069bc:	3740      	adds	r7, #64	; 0x40
 80069be:	46bd      	mov	sp, r7
 80069c0:	bdb0      	pop	{r4, r5, r7, pc}
 80069c2:	bf00      	nop
 80069c4:	2000a444 	.word	0x2000a444
 80069c8:	40028000 	.word	0x40028000
 80069cc:	2000a48c 	.word	0x2000a48c
 80069d0:	20008b74 	.word	0x20008b74
 80069d4:	20008bf4 	.word	0x20008bf4
 80069d8:	2000a3c4 	.word	0x2000a3c4
 80069dc:	2000031c 	.word	0x2000031c
 80069e0:	0801b48c 	.word	0x0801b48c

080069e4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08a      	sub	sp, #40	; 0x28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80069ee:	4b4b      	ldr	r3, [pc, #300]	; (8006b1c <low_level_output+0x138>)
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006a06:	4b45      	ldr	r3, [pc, #276]	; (8006b1c <low_level_output+0x138>)
 8006a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	623b      	str	r3, [r7, #32]
 8006a14:	e05a      	b.n	8006acc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	da03      	bge.n	8006a26 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006a1e:	23f8      	movs	r3, #248	; 0xf8
 8006a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006a24:	e05c      	b.n	8006ae0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	895b      	ldrh	r3, [r3, #10]
 8006a2a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006a30:	e02f      	b.n	8006a92 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006a32:	69fa      	ldr	r2, [r7, #28]
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	18d0      	adds	r0, r2, r3
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	18d1      	adds	r1, r2, r3
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006a46:	3304      	adds	r3, #4
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f013 fc43 	bl	801a2d4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	da03      	bge.n	8006a64 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006a5c:	23f8      	movs	r3, #248	; 0xf8
 8006a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006a62:	e03d      	b.n	8006ae0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006a74:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006a80:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006a8c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	4413      	add	r3, r2
 8006a98:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d8c8      	bhi.n	8006a32 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	18d0      	adds	r0, r2, r3
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	4413      	add	r3, r2
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	f013 fc0f 	bl	801a2d4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4413      	add	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	623b      	str	r3, [r7, #32]
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1a1      	bne.n	8006a16 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006ad2:	6979      	ldr	r1, [r7, #20]
 8006ad4:	4811      	ldr	r0, [pc, #68]	; (8006b1c <low_level_output+0x138>)
 8006ad6:	f7fa fc8b 	bl	80013f0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006ae0:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <low_level_output+0x138>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae8:	3314      	adds	r3, #20
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00d      	beq.n	8006b10 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006af4:	4b09      	ldr	r3, [pc, #36]	; (8006b1c <low_level_output+0x138>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006afc:	3314      	adds	r3, #20
 8006afe:	2220      	movs	r2, #32
 8006b00:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006b02:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <low_level_output+0x138>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8006b10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3728      	adds	r7, #40	; 0x28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	2000a444 	.word	0x2000a444

08006b20 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08c      	sub	sp, #48	; 0x30
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006b30:	2300      	movs	r3, #0
 8006b32:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006b44:	484f      	ldr	r0, [pc, #316]	; (8006c84 <low_level_input+0x164>)
 8006b46:	f7fa fd3d 	bl	80015c4 <HAL_ETH_GetReceivedFrame_IT>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d001      	beq.n	8006b54 <low_level_input+0x34>

    return NULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e092      	b.n	8006c7a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006b54:	4b4b      	ldr	r3, [pc, #300]	; (8006c84 <low_level_input+0x164>)
 8006b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b58:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006b5a:	4b4a      	ldr	r3, [pc, #296]	; (8006c84 <low_level_input+0x164>)
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006b60:	89fb      	ldrh	r3, [r7, #14]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d007      	beq.n	8006b76 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006b66:	89fb      	ldrh	r3, [r7, #14]
 8006b68:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	2000      	movs	r0, #0
 8006b70:	f008 f892 	bl	800ec98 <pbuf_alloc>
 8006b74:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d04b      	beq.n	8006c14 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006b7c:	4b41      	ldr	r3, [pc, #260]	; (8006c84 <low_level_input+0x164>)
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b80:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b8a:	e040      	b.n	8006c0e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	895b      	ldrh	r3, [r3, #10]
 8006b90:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006b96:	e021      	b.n	8006bdc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	18d0      	adds	r0, r2, r3
 8006ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	18d1      	adds	r1, r2, r3
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006bac:	3304      	adds	r3, #4
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f013 fb90 	bl	801a2d4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006bca:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006bd6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	4413      	add	r3, r2
 8006be2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d8d6      	bhi.n	8006b98 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	18d0      	adds	r0, r2, r3
 8006bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f013 fb6a 	bl	801a2d4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006c00:	69fa      	ldr	r2, [r7, #28]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	4413      	add	r3, r2
 8006c06:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1bb      	bne.n	8006b8c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006c14:	4b1b      	ldr	r3, [pc, #108]	; (8006c84 <low_level_input+0x164>)
 8006c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c18:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	e00b      	b.n	8006c38 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	3301      	adds	r3, #1
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <low_level_input+0x164>)
 8006c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d3ee      	bcc.n	8006c20 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8006c42:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <low_level_input+0x164>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006c48:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <low_level_input+0x164>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c50:	3314      	adds	r3, #20
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00d      	beq.n	8006c78 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006c5c:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <low_level_input+0x164>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c64:	3314      	adds	r3, #20
 8006c66:	2280      	movs	r2, #128	; 0x80
 8006c68:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006c6a:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <low_level_input+0x164>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c72:	3308      	adds	r3, #8
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3730      	adds	r7, #48	; 0x30
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	2000a444 	.word	0x2000a444

08006c88 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006c94:	4b12      	ldr	r3, [pc, #72]	; (8006ce0 <ethernetif_input+0x58>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f04f 31ff 	mov.w	r1, #4294967295
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f003 ffeb 	bl	800ac78 <osSemaphoreWait>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1f5      	bne.n	8006c94 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006ca8:	480e      	ldr	r0, [pc, #56]	; (8006ce4 <ethernetif_input+0x5c>)
 8006caa:	f012 ff3b 	bl	8019b24 <sys_mutex_lock>
        p = low_level_input( netif );
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f7ff ff36 	bl	8006b20 <low_level_input>
 8006cb4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00a      	beq.n	8006cd2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	68f9      	ldr	r1, [r7, #12]
 8006cc2:	68b8      	ldr	r0, [r7, #8]
 8006cc4:	4798      	blx	r3
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8006ccc:	68b8      	ldr	r0, [r7, #8]
 8006cce:	f008 fac7 	bl	800f260 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8006cd2:	4804      	ldr	r0, [pc, #16]	; (8006ce4 <ethernetif_input+0x5c>)
 8006cd4:	f012 ff35 	bl	8019b42 <sys_mutex_unlock>
      } while(p!=NULL);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e4      	bne.n	8006ca8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006cde:	e7d9      	b.n	8006c94 <ethernetif_input+0xc>
 8006ce0:	2000031c 	.word	0x2000031c
 8006ce4:	2000bc5c 	.word	0x2000bc5c

08006ce8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <ethernetif_init+0x1c>
 8006cf6:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <ethernetif_init+0x48>)
 8006cf8:	f240 2235 	movw	r2, #565	; 0x235
 8006cfc:	490d      	ldr	r1, [pc, #52]	; (8006d34 <ethernetif_init+0x4c>)
 8006cfe:	480e      	ldr	r0, [pc, #56]	; (8006d38 <ethernetif_init+0x50>)
 8006d00:	f013 fba8 	bl	801a454 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2273      	movs	r2, #115	; 0x73
 8006d08:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2274      	movs	r2, #116	; 0x74
 8006d10:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a09      	ldr	r2, [pc, #36]	; (8006d3c <ethernetif_init+0x54>)
 8006d18:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a08      	ldr	r2, [pc, #32]	; (8006d40 <ethernetif_init+0x58>)
 8006d1e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff fd87 	bl	8006834 <low_level_init>

  return ERR_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	0801b4a8 	.word	0x0801b4a8
 8006d34:	0801b4c4 	.word	0x0801b4c4
 8006d38:	0801b4d4 	.word	0x0801b4d4
 8006d3c:	08017c95 	.word	0x08017c95
 8006d40:	080069e5 	.word	0x080069e5

08006d44 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006d48:	f7f9 ffce 	bl	8000ce8 <HAL_GetTick>
 8006d4c:	4603      	mov	r3, r0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006d64:	f107 0308 	add.w	r3, r7, #8
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	4816      	ldr	r0, [pc, #88]	; (8006dc8 <ethernetif_set_link+0x74>)
 8006d6e:	f7fa fd2c 	bl	80017ca <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d108      	bne.n	8006d9c <ethernetif_set_link+0x48>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d005      	beq.n	8006d9c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f007 fe4d 	bl	800ea34 <netif_set_link_up>
 8006d9a:	e011      	b.n	8006dc0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006da4:	089b      	lsrs	r3, r3, #2
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d007      	beq.n	8006dc0 <ethernetif_set_link+0x6c>
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d104      	bne.n	8006dc0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f007 fe72 	bl	800eaa4 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8006dc0:	20c8      	movs	r0, #200	; 0xc8
 8006dc2:	f003 fe77 	bl	800aab4 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006dc6:	e7cd      	b.n	8006d64 <ethernetif_set_link+0x10>
 8006dc8:	2000a444 	.word	0x2000a444

08006dcc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006de2:	089b      	lsrs	r3, r3, #2
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d05d      	beq.n	8006eaa <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006dee:	4b34      	ldr	r3, [pc, #208]	; (8006ec0 <ethernetif_update_config+0xf4>)
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d03f      	beq.n	8006e76 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006df6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	4830      	ldr	r0, [pc, #192]	; (8006ec0 <ethernetif_update_config+0xf4>)
 8006dfe:	f7fa fd4c 	bl	800189a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006e02:	f7f9 ff71 	bl	8000ce8 <HAL_GetTick>
 8006e06:	4603      	mov	r3, r0
 8006e08:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006e0a:	f107 0308 	add.w	r3, r7, #8
 8006e0e:	461a      	mov	r2, r3
 8006e10:	2101      	movs	r1, #1
 8006e12:	482b      	ldr	r0, [pc, #172]	; (8006ec0 <ethernetif_update_config+0xf4>)
 8006e14:	f7fa fcd9 	bl	80017ca <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006e18:	f7f9 ff66 	bl	8000ce8 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e26:	d828      	bhi.n	8006e7a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0eb      	beq.n	8006e0a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006e32:	f107 0308 	add.w	r3, r7, #8
 8006e36:	461a      	mov	r2, r3
 8006e38:	2110      	movs	r1, #16
 8006e3a:	4821      	ldr	r0, [pc, #132]	; (8006ec0 <ethernetif_update_config+0xf4>)
 8006e3c:	f7fa fcc5 	bl	80017ca <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f003 0304 	and.w	r3, r3, #4
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d004      	beq.n	8006e54 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006e4a:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <ethernetif_update_config+0xf4>)
 8006e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e50:	60da      	str	r2, [r3, #12]
 8006e52:	e002      	b.n	8006e5a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006e54:	4b1a      	ldr	r3, [pc, #104]	; (8006ec0 <ethernetif_update_config+0xf4>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006e64:	4b16      	ldr	r3, [pc, #88]	; (8006ec0 <ethernetif_update_config+0xf4>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	609a      	str	r2, [r3, #8]
 8006e6a:	e016      	b.n	8006e9a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006e6c:	4b14      	ldr	r3, [pc, #80]	; (8006ec0 <ethernetif_update_config+0xf4>)
 8006e6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e72:	609a      	str	r2, [r3, #8]
 8006e74:	e011      	b.n	8006e9a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006e76:	bf00      	nop
 8006e78:	e000      	b.n	8006e7c <ethernetif_update_config+0xb0>
          goto error;
 8006e7a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006e7c:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <ethernetif_update_config+0xf4>)
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	08db      	lsrs	r3, r3, #3
 8006e82:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006e84:	4b0e      	ldr	r3, [pc, #56]	; (8006ec0 <ethernetif_update_config+0xf4>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	085b      	lsrs	r3, r3, #1
 8006e8a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	461a      	mov	r2, r3
 8006e92:	2100      	movs	r1, #0
 8006e94:	480a      	ldr	r0, [pc, #40]	; (8006ec0 <ethernetif_update_config+0xf4>)
 8006e96:	f7fa fd00 	bl	800189a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4808      	ldr	r0, [pc, #32]	; (8006ec0 <ethernetif_update_config+0xf4>)
 8006e9e:	f7fa fdc1 	bl	8001a24 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006ea2:	4807      	ldr	r0, [pc, #28]	; (8006ec0 <ethernetif_update_config+0xf4>)
 8006ea4:	f7fa fd5f 	bl	8001966 <HAL_ETH_Start>
 8006ea8:	e002      	b.n	8006eb0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006eaa:	4805      	ldr	r0, [pc, #20]	; (8006ec0 <ethernetif_update_config+0xf4>)
 8006eac:	f7fa fd8a 	bl	80019c4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f807 	bl	8006ec4 <ethernetif_notify_conn_changed>
}
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	2000a444 	.word	0x2000a444

08006ec4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006ed8:	b590      	push	{r4, r7, lr}
 8006eda:	b089      	sub	sp, #36	; 0x24
 8006edc:	af04      	add	r7, sp, #16
 8006ede:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ee6:	7919      	ldrb	r1, [r3, #4]
 8006ee8:	2350      	movs	r3, #80	; 0x50
 8006eea:	2206      	movs	r2, #6
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 ff0f 	bl	8008d10 <USBH_FindInterface>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	2bff      	cmp	r3, #255	; 0xff
 8006efa:	d002      	beq.n	8006f02 <USBH_MSC_InterfaceInit+0x2a>
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d90f      	bls.n	8006f22 <USBH_MSC_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8006f02:	4886      	ldr	r0, [pc, #536]	; (800711c <USBH_MSC_InterfaceInit+0x244>)
 8006f04:	f013 faa6 	bl	801a454 <iprintf>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4619      	mov	r1, r3
 8006f12:	4883      	ldr	r0, [pc, #524]	; (8007120 <USBH_MSC_InterfaceInit+0x248>)
 8006f14:	f013 fa9e 	bl	801a454 <iprintf>
 8006f18:	200a      	movs	r0, #10
 8006f1a:	f013 fab3 	bl	801a484 <putchar>
    return USBH_FAIL;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e0f8      	b.n	8007114 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 fe8a 	bl	8008c40 <USBH_SelectInterface>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <USBH_MSC_InterfaceInit+0x62>
  {
    return USBH_FAIL;
 8006f36:	2302      	movs	r3, #2
 8006f38:	e0ec      	b.n	8007114 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006f40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006f44:	f013 f9a8 	bl	801a298 <malloc>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <USBH_MSC_InterfaceInit+0x9a>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 8006f5c:	486f      	ldr	r0, [pc, #444]	; (800711c <USBH_MSC_InterfaceInit+0x244>)
 8006f5e:	f013 fa79 	bl	801a454 <iprintf>
 8006f62:	4870      	ldr	r0, [pc, #448]	; (8007124 <USBH_MSC_InterfaceInit+0x24c>)
 8006f64:	f013 fa76 	bl	801a454 <iprintf>
 8006f68:	200a      	movs	r0, #10
 8006f6a:	f013 fa8b 	bl	801a484 <putchar>
    return USBH_FAIL;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	e0d0      	b.n	8007114 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f76:	2100      	movs	r1, #0
 8006f78:	68b8      	ldr	r0, [r7, #8]
 8006f7a:	f013 f9b9 	bl	801a2f0 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	211a      	movs	r1, #26
 8006f84:	fb01 f303 	mul.w	r3, r1, r3
 8006f88:	4413      	add	r3, r2
 8006f8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	b25b      	sxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	da16      	bge.n	8006fc4 <USBH_MSC_InterfaceInit+0xec>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	211a      	movs	r1, #26
 8006f9c:	fb01 f303 	mul.w	r3, r1, r3
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006fa6:	781a      	ldrb	r2, [r3, #0]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	211a      	movs	r1, #26
 8006fb2:	fb01 f303 	mul.w	r3, r1, r3
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006fbc:	881a      	ldrh	r2, [r3, #0]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	815a      	strh	r2, [r3, #10]
 8006fc2:	e015      	b.n	8006ff0 <USBH_MSC_InterfaceInit+0x118>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	211a      	movs	r1, #26
 8006fca:	fb01 f303 	mul.w	r3, r1, r3
 8006fce:	4413      	add	r3, r2
 8006fd0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006fd4:	781a      	ldrb	r2, [r3, #0]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	211a      	movs	r1, #26
 8006fe0:	fb01 f303 	mul.w	r3, r1, r3
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006fea:	881a      	ldrh	r2, [r3, #0]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	211a      	movs	r1, #26
 8006ff6:	fb01 f303 	mul.w	r3, r1, r3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	b25b      	sxtb	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	da16      	bge.n	8007036 <USBH_MSC_InterfaceInit+0x15e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	211a      	movs	r1, #26
 800700e:	fb01 f303 	mul.w	r3, r1, r3
 8007012:	4413      	add	r3, r2
 8007014:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007018:	781a      	ldrb	r2, [r3, #0]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	211a      	movs	r1, #26
 8007024:	fb01 f303 	mul.w	r3, r1, r3
 8007028:	4413      	add	r3, r2
 800702a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800702e:	881a      	ldrh	r2, [r3, #0]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	815a      	strh	r2, [r3, #10]
 8007034:	e015      	b.n	8007062 <USBH_MSC_InterfaceInit+0x18a>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	211a      	movs	r1, #26
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	4413      	add	r3, r2
 8007042:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007046:	781a      	ldrb	r2, [r3, #0]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	211a      	movs	r1, #26
 8007052:	fb01 f303 	mul.w	r3, r1, r3
 8007056:	4413      	add	r3, r2
 8007058:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800705c:	881a      	ldrh	r2, [r3, #0]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2200      	movs	r2, #0
 8007066:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2200      	movs	r2, #0
 800706c:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2200      	movs	r2, #0
 8007072:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	799b      	ldrb	r3, [r3, #6]
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f003 fbcf 	bl	800a81e <USBH_AllocPipe>
 8007080:	4603      	mov	r3, r0
 8007082:	461a      	mov	r2, r3
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	79db      	ldrb	r3, [r3, #7]
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f003 fbc5 	bl	800a81e <USBH_AllocPipe>
 8007094:	4603      	mov	r3, r0
 8007096:	461a      	mov	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 ff2d 	bl	8007efc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	7959      	ldrb	r1, [r3, #5]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	7998      	ldrb	r0, [r3, #6]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	8912      	ldrh	r2, [r2, #8]
 80070ba:	9202      	str	r2, [sp, #8]
 80070bc:	2202      	movs	r2, #2
 80070be:	9201      	str	r2, [sp, #4]
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	4623      	mov	r3, r4
 80070c4:	4602      	mov	r2, r0
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f003 fb7a 	bl	800a7c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	7919      	ldrb	r1, [r3, #4]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	79d8      	ldrb	r0, [r3, #7]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	8952      	ldrh	r2, [r2, #10]
 80070e4:	9202      	str	r2, [sp, #8]
 80070e6:	2202      	movs	r2, #2
 80070e8:	9201      	str	r2, [sp, #4]
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	4623      	mov	r3, r4
 80070ee:	4602      	mov	r2, r0
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f003 fb65 	bl	800a7c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	791b      	ldrb	r3, [r3, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f012 ffe5 	bl	801a0ce <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	795b      	ldrb	r3, [r3, #5]
 8007108:	2200      	movs	r2, #0
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f012 ffde 	bl	801a0ce <USBH_LL_SetToggle>

  return USBH_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	bd90      	pop	{r4, r7, pc}
 800711c:	0801b500 	.word	0x0801b500
 8007120:	0801b50c 	.word	0x0801b50c
 8007124:	0801b534 	.word	0x0801b534

08007128 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	795b      	ldrb	r3, [r3, #5]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00e      	beq.n	8007160 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	795b      	ldrb	r3, [r3, #5]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f003 fb58 	bl	800a7fe <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	795b      	ldrb	r3, [r3, #5]
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f003 fb83 	bl	800a860 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	791b      	ldrb	r3, [r3, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00e      	beq.n	8007186 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	791b      	ldrb	r3, [r3, #4]
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f003 fb45 	bl	800a7fe <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	791b      	ldrb	r3, [r3, #4]
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f003 fb70 	bl	800a860 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00b      	beq.n	80071aa <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	4618      	mov	r0, r3
 800719c:	f013 f884 	bl	801a2a8 <free>
    phost->pActiveClass->pData = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071a6:	2200      	movs	r2, #0
 80071a8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80071c6:	2301      	movs	r3, #1
 80071c8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	7b9b      	ldrb	r3, [r3, #14]
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d04a      	beq.n	8007268 <USBH_MSC_ClassRequest+0xb4>
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	dc54      	bgt.n	8007280 <USBH_MSC_ClassRequest+0xcc>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <USBH_MSC_ClassRequest+0x2a>
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d150      	bne.n	8007280 <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fe6b 	bl	8007ebe <USBH_MSC_BOT_REQ_GetMaxLUN>
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d104      	bne.n	80071fc <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2200      	movs	r2, #0
 80071f6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d140      	bne.n	8007284 <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d804      	bhi.n	8007214 <USBH_MSC_ClassRequest+0x60>
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	3301      	adds	r3, #1
 8007210:	b2da      	uxtb	r2, r3
 8007212:	e000      	b.n	8007216 <USBH_MSC_ClassRequest+0x62>
 8007214:	2202      	movs	r2, #2
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	4619      	mov	r1, r3
 8007220:	481c      	ldr	r0, [pc, #112]	; (8007294 <USBH_MSC_ClassRequest+0xe0>)
 8007222:	f013 f917 	bl	801a454 <iprintf>
 8007226:	200a      	movs	r0, #10
 8007228:	f013 f92c 	bl	801a484 <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800722c:	2300      	movs	r3, #0
 800722e:	73bb      	strb	r3, [r7, #14]
 8007230:	e014      	b.n	800725c <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	2134      	movs	r1, #52	; 0x34
 8007238:	fb01 f303 	mul.w	r3, r1, r3
 800723c:	4413      	add	r3, r2
 800723e:	3392      	adds	r3, #146	; 0x92
 8007240:	2202      	movs	r2, #2
 8007242:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	2134      	movs	r1, #52	; 0x34
 800724a:	fb01 f303 	mul.w	r3, r1, r3
 800724e:	4413      	add	r3, r2
 8007250:	33c1      	adds	r3, #193	; 0xc1
 8007252:	2200      	movs	r2, #0
 8007254:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007256:	7bbb      	ldrb	r3, [r7, #14]
 8007258:	3301      	adds	r3, #1
 800725a:	73bb      	strb	r3, [r7, #14]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	7bba      	ldrb	r2, [r7, #14]
 8007262:	429a      	cmp	r2, r3
 8007264:	d3e5      	bcc.n	8007232 <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 8007266:	e00d      	b.n	8007284 <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007268:	2100      	movs	r1, #0
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f002 fd7b 	bl	8009d66 <USBH_ClrFeature>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d108      	bne.n	8007288 <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	7bda      	ldrb	r2, [r3, #15]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	739a      	strb	r2, [r3, #14]
      }
      break;
 800727e:	e003      	b.n	8007288 <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 8007280:	bf00      	nop
 8007282:	e002      	b.n	800728a <USBH_MSC_ClassRequest+0xd6>
      break;
 8007284:	bf00      	nop
 8007286:	e000      	b.n	800728a <USBH_MSC_ClassRequest+0xd6>
      break;
 8007288:	bf00      	nop
  }

  return status;
 800728a:	7bfb      	ldrb	r3, [r7, #15]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	0801b55c 	.word	0x0801b55c

08007298 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80072aa:	2301      	movs	r3, #1
 80072ac:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80072ae:	2301      	movs	r3, #1
 80072b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80072b2:	2301      	movs	r3, #1
 80072b4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	7b1b      	ldrb	r3, [r3, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <USBH_MSC_Process+0x2e>
 80072be:	2b01      	cmp	r3, #1
 80072c0:	f000 8371 	beq.w	80079a6 <USBH_MSC_Process+0x70e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80072c4:	e372      	b.n	80079ac <USBH_MSC_Process+0x714>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	429a      	cmp	r2, r3
 80072d4:	f080 834b 	bcs.w	800796e <USBH_MSC_Process+0x6d6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072de:	4619      	mov	r1, r3
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	2334      	movs	r3, #52	; 0x34
 80072e4:	fb03 f301 	mul.w	r3, r3, r1
 80072e8:	4413      	add	r3, r2
 80072ea:	3391      	adds	r3, #145	; 0x91
 80072ec:	2201      	movs	r2, #1
 80072ee:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072f6:	4619      	mov	r1, r3
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	2334      	movs	r3, #52	; 0x34
 80072fc:	fb03 f301 	mul.w	r3, r3, r1
 8007300:	4413      	add	r3, r2
 8007302:	3390      	adds	r3, #144	; 0x90
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b08      	cmp	r3, #8
 8007308:	f200 8319 	bhi.w	800793e <USBH_MSC_Process+0x6a6>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <USBH_MSC_Process+0x7c>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007339 	.word	0x08007339
 8007318:	0800793f 	.word	0x0800793f
 800731c:	08007481 	.word	0x08007481
 8007320:	08007635 	.word	0x08007635
 8007324:	08007373 	.word	0x08007373
 8007328:	080077a1 	.word	0x080077a1
 800732c:	0800793f 	.word	0x0800793f
 8007330:	0800793f 	.word	0x0800793f
 8007334:	0800792d 	.word	0x0800792d
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800733e:	4619      	mov	r1, r3
 8007340:	48b6      	ldr	r0, [pc, #728]	; (800761c <USBH_MSC_Process+0x384>)
 8007342:	f013 f887 	bl	801a454 <iprintf>
 8007346:	200a      	movs	r0, #10
 8007348:	f013 f89c 	bl	801a484 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007352:	4619      	mov	r1, r3
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	2334      	movs	r3, #52	; 0x34
 8007358:	fb03 f301 	mul.w	r3, r3, r1
 800735c:	4413      	add	r3, r2
 800735e:	3390      	adds	r3, #144	; 0x90
 8007360:	2204      	movs	r2, #4
 8007362:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007370:	e2ee      	b.n	8007950 <USBH_MSC_Process+0x6b8>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007378:	b2d9      	uxtb	r1, r3
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007380:	461a      	mov	r2, r3
 8007382:	2334      	movs	r3, #52	; 0x34
 8007384:	fb03 f302 	mul.w	r3, r3, r2
 8007388:	3398      	adds	r3, #152	; 0x98
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	4413      	add	r3, r2
 800738e:	3307      	adds	r3, #7
 8007390:	461a      	mov	r2, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 f95c 	bl	8008650 <USBH_MSC_SCSI_Inquiry>
 8007398:	4603      	mov	r3, r0
 800739a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d141      	bne.n	8007426 <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073a8:	461a      	mov	r2, r3
 80073aa:	2334      	movs	r3, #52	; 0x34
 80073ac:	fb03 f302 	mul.w	r3, r3, r2
 80073b0:	3398      	adds	r3, #152	; 0x98
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	4413      	add	r3, r2
 80073b6:	330a      	adds	r3, #10
 80073b8:	4619      	mov	r1, r3
 80073ba:	4899      	ldr	r0, [pc, #612]	; (8007620 <USBH_MSC_Process+0x388>)
 80073bc:	f013 f84a 	bl	801a454 <iprintf>
 80073c0:	200a      	movs	r0, #10
 80073c2:	f013 f85f 	bl	801a484 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073cc:	461a      	mov	r2, r3
 80073ce:	2334      	movs	r3, #52	; 0x34
 80073d0:	fb03 f302 	mul.w	r3, r3, r2
 80073d4:	33a0      	adds	r3, #160	; 0xa0
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4413      	add	r3, r2
 80073da:	330b      	adds	r3, #11
 80073dc:	4619      	mov	r1, r3
 80073de:	4891      	ldr	r0, [pc, #580]	; (8007624 <USBH_MSC_Process+0x38c>)
 80073e0:	f013 f838 	bl	801a454 <iprintf>
 80073e4:	200a      	movs	r0, #10
 80073e6:	f013 f84d 	bl	801a484 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073f0:	461a      	mov	r2, r3
 80073f2:	2334      	movs	r3, #52	; 0x34
 80073f4:	fb03 f302 	mul.w	r3, r3, r2
 80073f8:	33b0      	adds	r3, #176	; 0xb0
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	4413      	add	r3, r2
 80073fe:	330c      	adds	r3, #12
 8007400:	4619      	mov	r1, r3
 8007402:	4889      	ldr	r0, [pc, #548]	; (8007628 <USBH_MSC_Process+0x390>)
 8007404:	f013 f826 	bl	801a454 <iprintf>
 8007408:	200a      	movs	r0, #10
 800740a:	f013 f83b 	bl	801a484 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007414:	4619      	mov	r1, r3
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	2334      	movs	r3, #52	; 0x34
 800741a:	fb03 f301 	mul.w	r3, r3, r1
 800741e:	4413      	add	r3, r2
 8007420:	3390      	adds	r3, #144	; 0x90
 8007422:	2202      	movs	r2, #2
 8007424:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	2b02      	cmp	r3, #2
 800742a:	d10c      	bne.n	8007446 <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007432:	4619      	mov	r1, r3
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	2334      	movs	r3, #52	; 0x34
 8007438:	fb03 f301 	mul.w	r3, r3, r1
 800743c:	4413      	add	r3, r2
 800743e:	3390      	adds	r3, #144	; 0x90
 8007440:	2205      	movs	r2, #5
 8007442:	701a      	strb	r2, [r3, #0]
            break;
 8007444:	e27d      	b.n	8007942 <USBH_MSC_Process+0x6aa>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	2b04      	cmp	r3, #4
 800744a:	f040 827a 	bne.w	8007942 <USBH_MSC_Process+0x6aa>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007454:	4619      	mov	r1, r3
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	2334      	movs	r3, #52	; 0x34
 800745a:	fb03 f301 	mul.w	r3, r3, r1
 800745e:	4413      	add	r3, r2
 8007460:	3390      	adds	r3, #144	; 0x90
 8007462:	2201      	movs	r2, #1
 8007464:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800746c:	4619      	mov	r1, r3
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	2334      	movs	r3, #52	; 0x34
 8007472:	fb03 f301 	mul.w	r3, r3, r1
 8007476:	4413      	add	r3, r2
 8007478:	3391      	adds	r3, #145	; 0x91
 800747a:	2202      	movs	r2, #2
 800747c:	701a      	strb	r2, [r3, #0]
            break;
 800747e:	e260      	b.n	8007942 <USBH_MSC_Process+0x6aa>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007486:	b2db      	uxtb	r3, r3
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 f822 	bl	80084d4 <USBH_MSC_SCSI_TestUnitReady>
 8007490:	4603      	mov	r3, r0
 8007492:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d14f      	bne.n	800753a <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074a0:	4619      	mov	r1, r3
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	2334      	movs	r3, #52	; 0x34
 80074a6:	fb03 f301 	mul.w	r3, r3, r1
 80074aa:	4413      	add	r3, r2
 80074ac:	3392      	adds	r3, #146	; 0x92
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d012      	beq.n	80074da <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074ba:	4619      	mov	r1, r3
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	2334      	movs	r3, #52	; 0x34
 80074c0:	fb03 f301 	mul.w	r3, r3, r1
 80074c4:	4413      	add	r3, r2
 80074c6:	33c1      	adds	r3, #193	; 0xc1
 80074c8:	2201      	movs	r2, #1
 80074ca:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 80074cc:	4857      	ldr	r0, [pc, #348]	; (800762c <USBH_MSC_Process+0x394>)
 80074ce:	f012 ffc1 	bl	801a454 <iprintf>
 80074d2:	200a      	movs	r0, #10
 80074d4:	f012 ffd6 	bl	801a484 <putchar>
 80074d8:	e00b      	b.n	80074f2 <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074e0:	4619      	mov	r1, r3
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	2334      	movs	r3, #52	; 0x34
 80074e6:	fb03 f301 	mul.w	r3, r3, r1
 80074ea:	4413      	add	r3, r2
 80074ec:	33c1      	adds	r3, #193	; 0xc1
 80074ee:	2200      	movs	r2, #0
 80074f0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074f8:	4619      	mov	r1, r3
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	2334      	movs	r3, #52	; 0x34
 80074fe:	fb03 f301 	mul.w	r3, r3, r1
 8007502:	4413      	add	r3, r2
 8007504:	3390      	adds	r3, #144	; 0x90
 8007506:	2203      	movs	r2, #3
 8007508:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007510:	4619      	mov	r1, r3
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	2334      	movs	r3, #52	; 0x34
 8007516:	fb03 f301 	mul.w	r3, r3, r1
 800751a:	4413      	add	r3, r2
 800751c:	3391      	adds	r3, #145	; 0x91
 800751e:	2200      	movs	r2, #0
 8007520:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007528:	4619      	mov	r1, r3
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	2334      	movs	r3, #52	; 0x34
 800752e:	fb03 f301 	mul.w	r3, r3, r1
 8007532:	4413      	add	r3, r2
 8007534:	3392      	adds	r3, #146	; 0x92
 8007536:	2200      	movs	r2, #0
 8007538:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	2b02      	cmp	r3, #2
 800753e:	d150      	bne.n	80075e2 <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007546:	4619      	mov	r1, r3
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	2334      	movs	r3, #52	; 0x34
 800754c:	fb03 f301 	mul.w	r3, r3, r1
 8007550:	4413      	add	r3, r2
 8007552:	3392      	adds	r3, #146	; 0x92
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d012      	beq.n	8007580 <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007560:	4619      	mov	r1, r3
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	2334      	movs	r3, #52	; 0x34
 8007566:	fb03 f301 	mul.w	r3, r3, r1
 800756a:	4413      	add	r3, r2
 800756c:	33c1      	adds	r3, #193	; 0xc1
 800756e:	2201      	movs	r2, #1
 8007570:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 8007572:	482f      	ldr	r0, [pc, #188]	; (8007630 <USBH_MSC_Process+0x398>)
 8007574:	f012 ff6e 	bl	801a454 <iprintf>
 8007578:	200a      	movs	r0, #10
 800757a:	f012 ff83 	bl	801a484 <putchar>
 800757e:	e00b      	b.n	8007598 <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007586:	4619      	mov	r1, r3
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	2334      	movs	r3, #52	; 0x34
 800758c:	fb03 f301 	mul.w	r3, r3, r1
 8007590:	4413      	add	r3, r2
 8007592:	33c1      	adds	r3, #193	; 0xc1
 8007594:	2200      	movs	r2, #0
 8007596:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800759e:	4619      	mov	r1, r3
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	2334      	movs	r3, #52	; 0x34
 80075a4:	fb03 f301 	mul.w	r3, r3, r1
 80075a8:	4413      	add	r3, r2
 80075aa:	3390      	adds	r3, #144	; 0x90
 80075ac:	2205      	movs	r2, #5
 80075ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075b6:	4619      	mov	r1, r3
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	2334      	movs	r3, #52	; 0x34
 80075bc:	fb03 f301 	mul.w	r3, r3, r1
 80075c0:	4413      	add	r3, r2
 80075c2:	3391      	adds	r3, #145	; 0x91
 80075c4:	2201      	movs	r2, #1
 80075c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075ce:	4619      	mov	r1, r3
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	2334      	movs	r3, #52	; 0x34
 80075d4:	fb03 f301 	mul.w	r3, r3, r1
 80075d8:	4413      	add	r3, r2
 80075da:	3392      	adds	r3, #146	; 0x92
 80075dc:	2202      	movs	r2, #2
 80075de:	701a      	strb	r2, [r3, #0]
            break;
 80075e0:	e1b1      	b.n	8007946 <USBH_MSC_Process+0x6ae>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	f040 81ae 	bne.w	8007946 <USBH_MSC_Process+0x6ae>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075f0:	4619      	mov	r1, r3
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	2334      	movs	r3, #52	; 0x34
 80075f6:	fb03 f301 	mul.w	r3, r3, r1
 80075fa:	4413      	add	r3, r2
 80075fc:	3390      	adds	r3, #144	; 0x90
 80075fe:	2201      	movs	r2, #1
 8007600:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007608:	4619      	mov	r1, r3
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	2334      	movs	r3, #52	; 0x34
 800760e:	fb03 f301 	mul.w	r3, r3, r1
 8007612:	4413      	add	r3, r2
 8007614:	3391      	adds	r3, #145	; 0x91
 8007616:	2202      	movs	r2, #2
 8007618:	701a      	strb	r2, [r3, #0]
            break;
 800761a:	e194      	b.n	8007946 <USBH_MSC_Process+0x6ae>
 800761c:	0801b578 	.word	0x0801b578
 8007620:	0801b584 	.word	0x0801b584
 8007624:	0801b59c 	.word	0x0801b59c
 8007628:	0801b5b4 	.word	0x0801b5b4
 800762c:	0801b5cc 	.word	0x0801b5cc
 8007630:	0801b5e0 	.word	0x0801b5e0
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800763a:	b2d9      	uxtb	r1, r3
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007642:	461a      	mov	r2, r3
 8007644:	2334      	movs	r3, #52	; 0x34
 8007646:	fb03 f302 	mul.w	r3, r3, r2
 800764a:	3390      	adds	r3, #144	; 0x90
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4413      	add	r3, r2
 8007650:	3304      	adds	r3, #4
 8007652:	461a      	mov	r2, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 ff80 	bl	800855a <USBH_MSC_SCSI_ReadCapacity>
 800765a:	4603      	mov	r3, r0
 800765c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d170      	bne.n	8007746 <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800766a:	4619      	mov	r1, r3
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	2334      	movs	r3, #52	; 0x34
 8007670:	fb03 f301 	mul.w	r3, r3, r1
 8007674:	4413      	add	r3, r2
 8007676:	33c1      	adds	r3, #193	; 0xc1
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d142      	bne.n	8007704 <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007684:	4619      	mov	r1, r3
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	2334      	movs	r3, #52	; 0x34
 800768a:	fb03 f301 	mul.w	r3, r3, r1
 800768e:	4413      	add	r3, r2
 8007690:	3394      	adds	r3, #148	; 0x94
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 800769a:	4610      	mov	r0, r2
 800769c:	6939      	ldr	r1, [r7, #16]
 800769e:	2234      	movs	r2, #52	; 0x34
 80076a0:	fb02 f200 	mul.w	r2, r2, r0
 80076a4:	440a      	add	r2, r1
 80076a6:	3298      	adds	r2, #152	; 0x98
 80076a8:	8812      	ldrh	r2, [r2, #0]
 80076aa:	fb02 f303 	mul.w	r3, r2, r3
 80076ae:	4619      	mov	r1, r3
 80076b0:	48c1      	ldr	r0, [pc, #772]	; (80079b8 <USBH_MSC_Process+0x720>)
 80076b2:	f012 fecf 	bl	801a454 <iprintf>
 80076b6:	200a      	movs	r0, #10
 80076b8:	f012 fee4 	bl	801a484 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076c2:	4619      	mov	r1, r3
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	2334      	movs	r3, #52	; 0x34
 80076c8:	fb03 f301 	mul.w	r3, r3, r1
 80076cc:	4413      	add	r3, r2
 80076ce:	3394      	adds	r3, #148	; 0x94
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4619      	mov	r1, r3
 80076d4:	48b9      	ldr	r0, [pc, #740]	; (80079bc <USBH_MSC_Process+0x724>)
 80076d6:	f012 febd 	bl	801a454 <iprintf>
 80076da:	200a      	movs	r0, #10
 80076dc:	f012 fed2 	bl	801a484 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076e6:	4619      	mov	r1, r3
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	2334      	movs	r3, #52	; 0x34
 80076ec:	fb03 f301 	mul.w	r3, r3, r1
 80076f0:	4413      	add	r3, r2
 80076f2:	3398      	adds	r3, #152	; 0x98
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	4619      	mov	r1, r3
 80076f8:	48b1      	ldr	r0, [pc, #708]	; (80079c0 <USBH_MSC_Process+0x728>)
 80076fa:	f012 feab 	bl	801a454 <iprintf>
 80076fe:	200a      	movs	r0, #10
 8007700:	f012 fec0 	bl	801a484 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800770a:	4619      	mov	r1, r3
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	2334      	movs	r3, #52	; 0x34
 8007710:	fb03 f301 	mul.w	r3, r3, r1
 8007714:	4413      	add	r3, r2
 8007716:	3390      	adds	r3, #144	; 0x90
 8007718:	2201      	movs	r2, #1
 800771a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007722:	4619      	mov	r1, r3
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	2334      	movs	r3, #52	; 0x34
 8007728:	fb03 f301 	mul.w	r3, r3, r1
 800772c:	4413      	add	r3, r2
 800772e:	3391      	adds	r3, #145	; 0x91
 8007730:	2200      	movs	r2, #0
 8007732:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800773a:	3301      	adds	r3, #1
 800773c:	b29a      	uxth	r2, r3
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007744:	e101      	b.n	800794a <USBH_MSC_Process+0x6b2>
            else if (scsi_status == USBH_FAIL)
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d10c      	bne.n	8007766 <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007752:	4619      	mov	r1, r3
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	2334      	movs	r3, #52	; 0x34
 8007758:	fb03 f301 	mul.w	r3, r3, r1
 800775c:	4413      	add	r3, r2
 800775e:	3390      	adds	r3, #144	; 0x90
 8007760:	2205      	movs	r2, #5
 8007762:	701a      	strb	r2, [r3, #0]
            break;
 8007764:	e0f1      	b.n	800794a <USBH_MSC_Process+0x6b2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	2b04      	cmp	r3, #4
 800776a:	f040 80ee 	bne.w	800794a <USBH_MSC_Process+0x6b2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007774:	4619      	mov	r1, r3
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	2334      	movs	r3, #52	; 0x34
 800777a:	fb03 f301 	mul.w	r3, r3, r1
 800777e:	4413      	add	r3, r2
 8007780:	3390      	adds	r3, #144	; 0x90
 8007782:	2201      	movs	r2, #1
 8007784:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800778c:	4619      	mov	r1, r3
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	2334      	movs	r3, #52	; 0x34
 8007792:	fb03 f301 	mul.w	r3, r3, r1
 8007796:	4413      	add	r3, r2
 8007798:	3391      	adds	r3, #145	; 0x91
 800779a:	2202      	movs	r2, #2
 800779c:	701a      	strb	r2, [r3, #0]
            break;
 800779e:	e0d4      	b.n	800794a <USBH_MSC_Process+0x6b2>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077a6:	b2d9      	uxtb	r1, r3
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077ae:	461a      	mov	r2, r3
 80077b0:	2334      	movs	r3, #52	; 0x34
 80077b2:	fb03 f302 	mul.w	r3, r3, r2
 80077b6:	3398      	adds	r3, #152	; 0x98
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	4413      	add	r3, r2
 80077bc:	3304      	adds	r3, #4
 80077be:	461a      	mov	r2, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 ffea 	bl	800879a <USBH_MSC_SCSI_RequestSense>
 80077c6:	4603      	mov	r3, r0
 80077c8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d17b      	bne.n	80078c8 <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077d6:	4619      	mov	r1, r3
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	2334      	movs	r3, #52	; 0x34
 80077dc:	fb03 f301 	mul.w	r3, r3, r1
 80077e0:	4413      	add	r3, r2
 80077e2:	339c      	adds	r3, #156	; 0x9c
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b06      	cmp	r3, #6
 80077e8:	d00c      	beq.n	8007804 <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077f0:	4619      	mov	r1, r3
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	2334      	movs	r3, #52	; 0x34
 80077f6:	fb03 f301 	mul.w	r3, r3, r1
 80077fa:	4413      	add	r3, r2
 80077fc:	339c      	adds	r3, #156	; 0x9c
 80077fe:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007800:	2b02      	cmp	r3, #2
 8007802:	d117      	bne.n	8007834 <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	f242 720f 	movw	r2, #9999	; 0x270f
 8007816:	4293      	cmp	r3, r2
 8007818:	d80c      	bhi.n	8007834 <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007820:	4619      	mov	r1, r3
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	2334      	movs	r3, #52	; 0x34
 8007826:	fb03 f301 	mul.w	r3, r3, r1
 800782a:	4413      	add	r3, r2
 800782c:	3390      	adds	r3, #144	; 0x90
 800782e:	2202      	movs	r2, #2
 8007830:	701a      	strb	r2, [r3, #0]
                  break;
 8007832:	e08d      	b.n	8007950 <USBH_MSC_Process+0x6b8>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800783a:	4619      	mov	r1, r3
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	2334      	movs	r3, #52	; 0x34
 8007840:	fb03 f301 	mul.w	r3, r3, r1
 8007844:	4413      	add	r3, r2
 8007846:	339c      	adds	r3, #156	; 0x9c
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	4619      	mov	r1, r3
 800784c:	485d      	ldr	r0, [pc, #372]	; (80079c4 <USBH_MSC_Process+0x72c>)
 800784e:	f012 fe01 	bl	801a454 <iprintf>
 8007852:	200a      	movs	r0, #10
 8007854:	f012 fe16 	bl	801a484 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800785e:	4619      	mov	r1, r3
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	2334      	movs	r3, #52	; 0x34
 8007864:	fb03 f301 	mul.w	r3, r3, r1
 8007868:	4413      	add	r3, r2
 800786a:	339d      	adds	r3, #157	; 0x9d
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	4619      	mov	r1, r3
 8007870:	4855      	ldr	r0, [pc, #340]	; (80079c8 <USBH_MSC_Process+0x730>)
 8007872:	f012 fdef 	bl	801a454 <iprintf>
 8007876:	200a      	movs	r0, #10
 8007878:	f012 fe04 	bl	801a484 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007882:	4619      	mov	r1, r3
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	2334      	movs	r3, #52	; 0x34
 8007888:	fb03 f301 	mul.w	r3, r3, r1
 800788c:	4413      	add	r3, r2
 800788e:	339e      	adds	r3, #158	; 0x9e
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	4619      	mov	r1, r3
 8007894:	484d      	ldr	r0, [pc, #308]	; (80079cc <USBH_MSC_Process+0x734>)
 8007896:	f012 fddd 	bl	801a454 <iprintf>
 800789a:	200a      	movs	r0, #10
 800789c:	f012 fdf2 	bl	801a484 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078a6:	4619      	mov	r1, r3
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	2334      	movs	r3, #52	; 0x34
 80078ac:	fb03 f301 	mul.w	r3, r3, r1
 80078b0:	4413      	add	r3, r2
 80078b2:	3390      	adds	r3, #144	; 0x90
 80078b4:	2201      	movs	r2, #1
 80078b6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078be:	3301      	adds	r3, #1
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d112      	bne.n	80078f4 <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 80078ce:	4840      	ldr	r0, [pc, #256]	; (80079d0 <USBH_MSC_Process+0x738>)
 80078d0:	f012 fdc0 	bl	801a454 <iprintf>
 80078d4:	200a      	movs	r0, #10
 80078d6:	f012 fdd5 	bl	801a484 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078e0:	4619      	mov	r1, r3
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	2334      	movs	r3, #52	; 0x34
 80078e6:	fb03 f301 	mul.w	r3, r3, r1
 80078ea:	4413      	add	r3, r2
 80078ec:	3390      	adds	r3, #144	; 0x90
 80078ee:	2208      	movs	r2, #8
 80078f0:	701a      	strb	r2, [r3, #0]
            break;
 80078f2:	e02c      	b.n	800794e <USBH_MSC_Process+0x6b6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d129      	bne.n	800794e <USBH_MSC_Process+0x6b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007900:	4619      	mov	r1, r3
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	2334      	movs	r3, #52	; 0x34
 8007906:	fb03 f301 	mul.w	r3, r3, r1
 800790a:	4413      	add	r3, r2
 800790c:	3390      	adds	r3, #144	; 0x90
 800790e:	2201      	movs	r2, #1
 8007910:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007918:	4619      	mov	r1, r3
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	2334      	movs	r3, #52	; 0x34
 800791e:	fb03 f301 	mul.w	r3, r3, r1
 8007922:	4413      	add	r3, r2
 8007924:	3391      	adds	r3, #145	; 0x91
 8007926:	2202      	movs	r2, #2
 8007928:	701a      	strb	r2, [r3, #0]
            break;
 800792a:	e010      	b.n	800794e <USBH_MSC_Process+0x6b6>
            MSC_Handle->current_lun++;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007932:	3301      	adds	r3, #1
 8007934:	b29a      	uxth	r2, r3
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800793c:	e008      	b.n	8007950 <USBH_MSC_Process+0x6b8>
            break;
 800793e:	bf00      	nop
 8007940:	e006      	b.n	8007950 <USBH_MSC_Process+0x6b8>
            break;
 8007942:	bf00      	nop
 8007944:	e004      	b.n	8007950 <USBH_MSC_Process+0x6b8>
            break;
 8007946:	bf00      	nop
 8007948:	e002      	b.n	8007950 <USBH_MSC_Process+0x6b8>
            break;
 800794a:	bf00      	nop
 800794c:	e000      	b.n	8007950 <USBH_MSC_Process+0x6b8>
            break;
 800794e:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2204      	movs	r2, #4
 8007954:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007964:	2200      	movs	r2, #0
 8007966:	4619      	mov	r1, r3
 8007968:	f003 fa32 	bl	800add0 <osMessagePut>
      break;
 800796c:	e01e      	b.n	80079ac <USBH_MSC_Process+0x714>
        MSC_Handle->current_lun = 0U;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	2200      	movs	r2, #0
 8007972:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	2201      	movs	r2, #1
 800797a:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2204      	movs	r2, #4
 8007980:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007990:	2200      	movs	r2, #0
 8007992:	4619      	mov	r1, r3
 8007994:	f003 fa1c 	bl	800add0 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800799e:	2102      	movs	r1, #2
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	4798      	blx	r3
      break;
 80079a4:	e002      	b.n	80079ac <USBH_MSC_Process+0x714>
      error = USBH_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	75fb      	strb	r3, [r7, #23]
      break;
 80079aa:	bf00      	nop
  }
  return error;
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	0801b5f8 	.word	0x0801b5f8
 80079bc:	0801b618 	.word	0x0801b618
 80079c0:	0801b62c 	.word	0x0801b62c
 80079c4:	0801b640 	.word	0x0801b640
 80079c8:	0801b650 	.word	0x0801b650
 80079cc:	0801b66c 	.word	0x0801b66c
 80079d0:	0801b5e0 	.word	0x0801b5e0

080079d4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
	...

080079ec <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007a02:	2301      	movs	r3, #1
 8007a04:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8007a06:	2301      	movs	r3, #1
 8007a08:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	2134      	movs	r1, #52	; 0x34
 8007a10:	fb01 f303 	mul.w	r3, r1, r3
 8007a14:	4413      	add	r3, r2
 8007a16:	3390      	adds	r3, #144	; 0x90
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b07      	cmp	r3, #7
 8007a1c:	d04b      	beq.n	8007ab6 <USBH_MSC_RdWrProcess+0xca>
 8007a1e:	2b07      	cmp	r3, #7
 8007a20:	f300 8106 	bgt.w	8007c30 <USBH_MSC_RdWrProcess+0x244>
 8007a24:	2b05      	cmp	r3, #5
 8007a26:	f000 8089 	beq.w	8007b3c <USBH_MSC_RdWrProcess+0x150>
 8007a2a:	2b06      	cmp	r3, #6
 8007a2c:	f040 8100 	bne.w	8007c30 <USBH_MSC_RdWrProcess+0x244>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007a30:	78f9      	ldrb	r1, [r7, #3]
 8007a32:	2300      	movs	r3, #0
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	2300      	movs	r3, #0
 8007a38:	2200      	movs	r2, #0
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 ff91 	bl	8008962 <USBH_MSC_SCSI_Read>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10b      	bne.n	8007a62 <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007a4a:	78fb      	ldrb	r3, [r7, #3]
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	2134      	movs	r1, #52	; 0x34
 8007a50:	fb01 f303 	mul.w	r3, r1, r3
 8007a54:	4413      	add	r3, r2
 8007a56:	3390      	adds	r3, #144	; 0x90
 8007a58:	2201      	movs	r2, #1
 8007a5a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	75fb      	strb	r3, [r7, #23]
 8007a60:	e01a      	b.n	8007a98 <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d109      	bne.n	8007a7c <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007a68:	78fb      	ldrb	r3, [r7, #3]
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	2134      	movs	r1, #52	; 0x34
 8007a6e:	fb01 f303 	mul.w	r3, r1, r3
 8007a72:	4413      	add	r3, r2
 8007a74:	3390      	adds	r3, #144	; 0x90
 8007a76:	2205      	movs	r2, #5
 8007a78:	701a      	strb	r2, [r3, #0]
 8007a7a:	e00d      	b.n	8007a98 <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d10a      	bne.n	8007a98 <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007a82:	78fb      	ldrb	r3, [r7, #3]
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	2134      	movs	r1, #52	; 0x34
 8007a88:	fb01 f303 	mul.w	r3, r1, r3
 8007a8c:	4413      	add	r3, r2
 8007a8e:	3390      	adds	r3, #144	; 0x90
 8007a90:	2208      	movs	r2, #8
 8007a92:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007a94:	2302      	movs	r3, #2
 8007a96:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2204      	movs	r2, #4
 8007a9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007aac:	2200      	movs	r2, #0
 8007aae:	4619      	mov	r1, r3
 8007ab0:	f003 f98e 	bl	800add0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ab4:	e0bd      	b.n	8007c32 <USBH_MSC_RdWrProcess+0x246>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007ab6:	78f9      	ldrb	r1, [r7, #3]
 8007ab8:	2300      	movs	r3, #0
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	2300      	movs	r3, #0
 8007abe:	2200      	movs	r2, #0
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fee3 	bl	800888c <USBH_MSC_SCSI_Write>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10b      	bne.n	8007ae8 <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	2134      	movs	r1, #52	; 0x34
 8007ad6:	fb01 f303 	mul.w	r3, r1, r3
 8007ada:	4413      	add	r3, r2
 8007adc:	3390      	adds	r3, #144	; 0x90
 8007ade:	2201      	movs	r2, #1
 8007ae0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	75fb      	strb	r3, [r7, #23]
 8007ae6:	e01a      	b.n	8007b1e <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d109      	bne.n	8007b02 <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007aee:	78fb      	ldrb	r3, [r7, #3]
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	2134      	movs	r1, #52	; 0x34
 8007af4:	fb01 f303 	mul.w	r3, r1, r3
 8007af8:	4413      	add	r3, r2
 8007afa:	3390      	adds	r3, #144	; 0x90
 8007afc:	2205      	movs	r2, #5
 8007afe:	701a      	strb	r2, [r3, #0]
 8007b00:	e00d      	b.n	8007b1e <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d10a      	bne.n	8007b1e <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007b08:	78fb      	ldrb	r3, [r7, #3]
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	2134      	movs	r1, #52	; 0x34
 8007b0e:	fb01 f303 	mul.w	r3, r1, r3
 8007b12:	4413      	add	r3, r2
 8007b14:	3390      	adds	r3, #144	; 0x90
 8007b16:	2208      	movs	r2, #8
 8007b18:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2204      	movs	r2, #4
 8007b22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b32:	2200      	movs	r2, #0
 8007b34:	4619      	mov	r1, r3
 8007b36:	f003 f94b 	bl	800add0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b3a:	e07a      	b.n	8007c32 <USBH_MSC_RdWrProcess+0x246>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007b3c:	78fb      	ldrb	r3, [r7, #3]
 8007b3e:	2234      	movs	r2, #52	; 0x34
 8007b40:	fb02 f303 	mul.w	r3, r2, r3
 8007b44:	3398      	adds	r3, #152	; 0x98
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	4413      	add	r3, r2
 8007b4a:	1d1a      	adds	r2, r3, #4
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fe22 	bl	800879a <USBH_MSC_SCSI_RequestSense>
 8007b56:	4603      	mov	r3, r0
 8007b58:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d140      	bne.n	8007be2 <USBH_MSC_RdWrProcess+0x1f6>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	2134      	movs	r1, #52	; 0x34
 8007b66:	fb01 f303 	mul.w	r3, r1, r3
 8007b6a:	4413      	add	r3, r2
 8007b6c:	339c      	adds	r3, #156	; 0x9c
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	4619      	mov	r1, r3
 8007b72:	4832      	ldr	r0, [pc, #200]	; (8007c3c <USBH_MSC_RdWrProcess+0x250>)
 8007b74:	f012 fc6e 	bl	801a454 <iprintf>
 8007b78:	200a      	movs	r0, #10
 8007b7a:	f012 fc83 	bl	801a484 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 8007b7e:	78fb      	ldrb	r3, [r7, #3]
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	2134      	movs	r1, #52	; 0x34
 8007b84:	fb01 f303 	mul.w	r3, r1, r3
 8007b88:	4413      	add	r3, r2
 8007b8a:	339d      	adds	r3, #157	; 0x9d
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	4619      	mov	r1, r3
 8007b90:	482b      	ldr	r0, [pc, #172]	; (8007c40 <USBH_MSC_RdWrProcess+0x254>)
 8007b92:	f012 fc5f 	bl	801a454 <iprintf>
 8007b96:	200a      	movs	r0, #10
 8007b98:	f012 fc74 	bl	801a484 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	2134      	movs	r1, #52	; 0x34
 8007ba2:	fb01 f303 	mul.w	r3, r1, r3
 8007ba6:	4413      	add	r3, r2
 8007ba8:	339e      	adds	r3, #158	; 0x9e
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	4619      	mov	r1, r3
 8007bae:	4825      	ldr	r0, [pc, #148]	; (8007c44 <USBH_MSC_RdWrProcess+0x258>)
 8007bb0:	f012 fc50 	bl	801a454 <iprintf>
 8007bb4:	200a      	movs	r0, #10
 8007bb6:	f012 fc65 	bl	801a484 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	2134      	movs	r1, #52	; 0x34
 8007bc0:	fb01 f303 	mul.w	r3, r1, r3
 8007bc4:	4413      	add	r3, r2
 8007bc6:	3390      	adds	r3, #144	; 0x90
 8007bc8:	2201      	movs	r2, #1
 8007bca:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	2134      	movs	r1, #52	; 0x34
 8007bd2:	fb01 f303 	mul.w	r3, r1, r3
 8007bd6:	4413      	add	r3, r2
 8007bd8:	3391      	adds	r3, #145	; 0x91
 8007bda:	2202      	movs	r2, #2
 8007bdc:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8007bde:	2302      	movs	r3, #2
 8007be0:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d106      	bne.n	8007bf6 <USBH_MSC_RdWrProcess+0x20a>
      {
        USBH_UsrLog("MSC Device NOT ready");
 8007be8:	4817      	ldr	r0, [pc, #92]	; (8007c48 <USBH_MSC_RdWrProcess+0x25c>)
 8007bea:	f012 fc33 	bl	801a454 <iprintf>
 8007bee:	200a      	movs	r0, #10
 8007bf0:	f012 fc48 	bl	801a484 <putchar>
 8007bf4:	e00d      	b.n	8007c12 <USBH_MSC_RdWrProcess+0x226>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d10a      	bne.n	8007c12 <USBH_MSC_RdWrProcess+0x226>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007bfc:	78fb      	ldrb	r3, [r7, #3]
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	2134      	movs	r1, #52	; 0x34
 8007c02:	fb01 f303 	mul.w	r3, r1, r3
 8007c06:	4413      	add	r3, r2
 8007c08:	3390      	adds	r3, #144	; 0x90
 8007c0a:	2208      	movs	r2, #8
 8007c0c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007c0e:	2302      	movs	r3, #2
 8007c10:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2204      	movs	r2, #4
 8007c16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c26:	2200      	movs	r2, #0
 8007c28:	4619      	mov	r1, r3
 8007c2a:	f003 f8d1 	bl	800add0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c2e:	e000      	b.n	8007c32 <USBH_MSC_RdWrProcess+0x246>

    default:
      break;
 8007c30:	bf00      	nop

  }
  return error;
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	0801b640 	.word	0x0801b640
 8007c40:	0801b650 	.word	0x0801b650
 8007c44:	0801b66c 	.word	0x0801b66c
 8007c48:	0801b5e0 	.word	0x0801b5e0

08007c4c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b0b      	cmp	r3, #11
 8007c6a:	d10c      	bne.n	8007c86 <USBH_MSC_UnitIsReady+0x3a>
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	2134      	movs	r1, #52	; 0x34
 8007c72:	fb01 f303 	mul.w	r3, r1, r3
 8007c76:	4413      	add	r3, r2
 8007c78:	3391      	adds	r3, #145	; 0x91
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8007c80:	2301      	movs	r3, #1
 8007c82:	73fb      	strb	r3, [r7, #15]
 8007c84:	e001      	b.n	8007c8a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	607a      	str	r2, [r7, #4]
 8007ca4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b0b      	cmp	r3, #11
 8007cb8:	d10d      	bne.n	8007cd6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007cba:	7afb      	ldrb	r3, [r7, #11]
 8007cbc:	2234      	movs	r2, #52	; 0x34
 8007cbe:	fb02 f303 	mul.w	r3, r2, r3
 8007cc2:	3390      	adds	r3, #144	; 0x90
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	2234      	movs	r2, #52	; 0x34
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f012 fb01 	bl	801a2d4 <memcpy>
    return USBH_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e000      	b.n	8007cd8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8007cd6:	2302      	movs	r3, #2
  }
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	607a      	str	r2, [r7, #4]
 8007cea:	603b      	str	r3, [r7, #0]
 8007cec:	460b      	mov	r3, r1
 8007cee:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00e      	beq.n	8007d24 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007d0c:	2b0b      	cmp	r3, #11
 8007d0e:	d109      	bne.n	8007d24 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007d10:	7afb      	ldrb	r3, [r7, #11]
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	2134      	movs	r1, #52	; 0x34
 8007d16:	fb01 f303 	mul.w	r3, r1, r3
 8007d1a:	4413      	add	r3, r2
 8007d1c:	3390      	adds	r3, #144	; 0x90
 8007d1e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d001      	beq.n	8007d28 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8007d24:	2302      	movs	r3, #2
 8007d26:	e040      	b.n	8007daa <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2206      	movs	r2, #6
 8007d2c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8007d2e:	7afb      	ldrb	r3, [r7, #11]
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	2134      	movs	r1, #52	; 0x34
 8007d34:	fb01 f303 	mul.w	r3, r1, r3
 8007d38:	4413      	add	r3, r2
 8007d3a:	3390      	adds	r3, #144	; 0x90
 8007d3c:	2206      	movs	r2, #6
 8007d3e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007d40:	7afb      	ldrb	r3, [r7, #11]
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007d4a:	7af9      	ldrb	r1, [r7, #11]
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 fe04 	bl	8008962 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d60:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007d62:	e016      	b.n	8007d92 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1ad2      	subs	r2, r2, r3
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	f242 7110 	movw	r1, #10000	; 0x2710
 8007d74:	fb01 f303 	mul.w	r3, r1, r3
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d805      	bhi.n	8007d88 <USBH_MSC_Read+0xa8>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d104      	bne.n	8007d92 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e00b      	b.n	8007daa <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	4619      	mov	r1, r3
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f7ff fe28 	bl	80079ec <USBH_MSC_RdWrProcess>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d0e0      	beq.n	8007d64 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2201      	movs	r2, #1
 8007da6:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b088      	sub	sp, #32
 8007db6:	af02      	add	r7, sp, #8
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	603b      	str	r3, [r7, #0]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00e      	beq.n	8007df6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007dde:	2b0b      	cmp	r3, #11
 8007de0:	d109      	bne.n	8007df6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007de2:	7afb      	ldrb	r3, [r7, #11]
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	2134      	movs	r1, #52	; 0x34
 8007de8:	fb01 f303 	mul.w	r3, r1, r3
 8007dec:	4413      	add	r3, r2
 8007dee:	3390      	adds	r3, #144	; 0x90
 8007df0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d001      	beq.n	8007dfa <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8007df6:	2302      	movs	r3, #2
 8007df8:	e040      	b.n	8007e7c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2207      	movs	r2, #7
 8007dfe:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007e00:	7afb      	ldrb	r3, [r7, #11]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	2134      	movs	r1, #52	; 0x34
 8007e06:	fb01 f303 	mul.w	r3, r1, r3
 8007e0a:	4413      	add	r3, r2
 8007e0c:	3390      	adds	r3, #144	; 0x90
 8007e0e:	2207      	movs	r2, #7
 8007e10:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007e12:	7afb      	ldrb	r3, [r7, #11]
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007e1c:	7af9      	ldrb	r1, [r7, #11]
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 fd30 	bl	800888c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e32:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007e34:	e016      	b.n	8007e64 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	f242 7110 	movw	r1, #10000	; 0x2710
 8007e46:	fb01 f303 	mul.w	r3, r1, r3
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d805      	bhi.n	8007e5a <USBH_MSC_Write+0xa8>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d104      	bne.n	8007e64 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007e60:	2302      	movs	r3, #2
 8007e62:	e00b      	b.n	8007e7c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007e64:	7afb      	ldrb	r3, [r7, #11]
 8007e66:	4619      	mov	r1, r3
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f7ff fdbf 	bl	80079ec <USBH_MSC_RdWrProcess>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d0e0      	beq.n	8007e36 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	2201      	movs	r2, #1
 8007e78:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2221      	movs	r2, #33	; 0x21
 8007e90:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	22ff      	movs	r2, #255	; 0xff
 8007e96:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2100      	movs	r1, #0
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f002 f939 	bl	800a126 <USBH_CtlReq>
 8007eb4:	4603      	mov	r3, r0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	22a1      	movs	r2, #161	; 0xa1
 8007ecc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	22fe      	movs	r2, #254	; 0xfe
 8007ed2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f002 f91b 	bl	800a126 <USBH_CtlReq>
 8007ef0:	4603      	mov	r3, r0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
	...

08007efc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4a09      	ldr	r2, [pc, #36]	; (8007f38 <USBH_MSC_BOT_Init+0x3c>)
 8007f12:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4a09      	ldr	r2, [pc, #36]	; (8007f3c <USBH_MSC_BOT_Init+0x40>)
 8007f18:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	43425355 	.word	0x43425355
 8007f3c:	20304050 	.word	0x20304050

08007f40 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007f50:	2301      	movs	r3, #1
 8007f52:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007f54:	2301      	movs	r3, #1
 8007f56:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f70:	3b01      	subs	r3, #1
 8007f72:	2b0a      	cmp	r3, #10
 8007f74:	f200 822a 	bhi.w	80083cc <USBH_MSC_BOT_Process+0x48c>
 8007f78:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <USBH_MSC_BOT_Process+0x40>)
 8007f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7e:	bf00      	nop
 8007f80:	08007fad 	.word	0x08007fad
 8007f84:	08007fd5 	.word	0x08007fd5
 8007f88:	08008093 	.word	0x08008093
 8007f8c:	080080b1 	.word	0x080080b1
 8007f90:	0800816d 	.word	0x0800816d
 8007f94:	0800818f 	.word	0x0800818f
 8007f98:	0800827b 	.word	0x0800827b
 8007f9c:	08008297 	.word	0x08008297
 8007fa0:	08008321 	.word	0x08008321
 8007fa4:	08008351 	.word	0x08008351
 8007fa8:	080083b3 	.word	0x080083b3
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	78fa      	ldrb	r2, [r7, #3]
 8007fb0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	795b      	ldrb	r3, [r3, #5]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	9200      	str	r2, [sp, #0]
 8007fca:	221f      	movs	r2, #31
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f002 fbb4 	bl	800a73a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007fd2:	e20a      	b.n	80083ea <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	795b      	ldrb	r3, [r3, #5]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f012 f856 	bl	801a08c <USBH_LL_GetURBState>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007fe4:	7d3b      	ldrb	r3, [r7, #20]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d126      	bne.n	8008038 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00f      	beq.n	8008012 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007ff8:	b25b      	sxtb	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	da04      	bge.n	8008008 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	2203      	movs	r2, #3
 8008002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008006:	e008      	b.n	800801a <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	2205      	movs	r2, #5
 800800c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008010:	e003      	b.n	800801a <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	2207      	movs	r2, #7
 8008016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2202      	movs	r2, #2
 800801e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800802e:	2200      	movs	r2, #0
 8008030:	4619      	mov	r1, r3
 8008032:	f002 fecd 	bl	800add0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008036:	e1cb      	b.n	80083d0 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008038:	7d3b      	ldrb	r3, [r7, #20]
 800803a:	2b02      	cmp	r3, #2
 800803c:	d112      	bne.n	8008064 <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2202      	movs	r2, #2
 800804a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800805a:	2200      	movs	r2, #0
 800805c:	4619      	mov	r1, r3
 800805e:	f002 feb7 	bl	800add0 <osMessagePut>
      break;
 8008062:	e1b5      	b.n	80083d0 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 8008064:	7d3b      	ldrb	r3, [r7, #20]
 8008066:	2b05      	cmp	r3, #5
 8008068:	f040 81b2 	bne.w	80083d0 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	220a      	movs	r2, #10
 8008070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008088:	2200      	movs	r2, #0
 800808a:	4619      	mov	r1, r3
 800808c:	f002 fea0 	bl	800add0 <osMessagePut>
      break;
 8008090:	e19e      	b.n	80083d0 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	895a      	ldrh	r2, [r3, #10]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	791b      	ldrb	r3, [r3, #4]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f002 fb6f 	bl	800a784 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	2204      	movs	r2, #4
 80080aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80080ae:	e19c      	b.n	80083ea <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	791b      	ldrb	r3, [r3, #4]
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f011 ffe8 	bl	801a08c <USBH_LL_GetURBState>
 80080bc:	4603      	mov	r3, r0
 80080be:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80080c0:	7d3b      	ldrb	r3, [r7, #20]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d13b      	bne.n	800813e <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	8952      	ldrh	r2, [r2, #10]
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d910      	bls.n	80080f4 <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	8952      	ldrh	r2, [r2, #10]
 80080dc:	441a      	add	r2, r3
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	8952      	ldrh	r2, [r2, #10]
 80080ec:	1a9a      	subs	r2, r3, r2
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80080f2:	e002      	b.n	80080fa <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	2200      	movs	r2, #0
 80080f8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	895a      	ldrh	r2, [r3, #10]
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	791b      	ldrb	r3, [r3, #4]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f002 fb37 	bl	800a784 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008116:	e15d      	b.n	80083d4 <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	2207      	movs	r2, #7
 800811c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008134:	2200      	movs	r2, #0
 8008136:	4619      	mov	r1, r3
 8008138:	f002 fe4a 	bl	800add0 <osMessagePut>
      break;
 800813c:	e14a      	b.n	80083d4 <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 800813e:	7d3b      	ldrb	r3, [r7, #20]
 8008140:	2b05      	cmp	r3, #5
 8008142:	f040 8147 	bne.w	80083d4 <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2209      	movs	r2, #9
 800814a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2202      	movs	r2, #2
 8008152:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008162:	2200      	movs	r2, #0
 8008164:	4619      	mov	r1, r3
 8008166:	f002 fe33 	bl	800add0 <osMessagePut>
      break;
 800816a:	e133      	b.n	80083d4 <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	891a      	ldrh	r2, [r3, #8]
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	795b      	ldrb	r3, [r3, #5]
 800817a:	2001      	movs	r0, #1
 800817c:	9000      	str	r0, [sp, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f002 fadb 	bl	800a73a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2206      	movs	r2, #6
 8008188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800818c:	e12d      	b.n	80083ea <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	795b      	ldrb	r3, [r3, #5]
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f011 ff79 	bl	801a08c <USBH_LL_GetURBState>
 800819a:	4603      	mov	r3, r0
 800819c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800819e:	7d3b      	ldrb	r3, [r7, #20]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d13d      	bne.n	8008220 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	8912      	ldrh	r2, [r2, #8]
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d910      	bls.n	80081d2 <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	8912      	ldrh	r2, [r2, #8]
 80081ba:	441a      	add	r2, r3
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	8912      	ldrh	r2, [r2, #8]
 80081ca:	1a9a      	subs	r2, r3, r2
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80081d0:	e002      	b.n	80081d8 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	2200      	movs	r2, #0
 80081d6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00c      	beq.n	80081fa <USBH_MSC_BOT_Process+0x2ba>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	891a      	ldrh	r2, [r3, #8]
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	795b      	ldrb	r3, [r3, #5]
 80081ee:	2001      	movs	r0, #1
 80081f0:	9000      	str	r0, [sp, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f002 faa1 	bl	800a73a <USBH_BulkSendData>
 80081f8:	e003      	b.n	8008202 <USBH_MSC_BOT_Process+0x2c2>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2207      	movs	r2, #7
 80081fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008216:	2200      	movs	r2, #0
 8008218:	4619      	mov	r1, r3
 800821a:	f002 fdd9 	bl	800add0 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800821e:	e0db      	b.n	80083d8 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008220:	7d3b      	ldrb	r3, [r7, #20]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d112      	bne.n	800824c <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	2205      	movs	r2, #5
 800822a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2202      	movs	r2, #2
 8008232:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008242:	2200      	movs	r2, #0
 8008244:	4619      	mov	r1, r3
 8008246:	f002 fdc3 	bl	800add0 <osMessagePut>
      break;
 800824a:	e0c5      	b.n	80083d8 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 800824c:	7d3b      	ldrb	r3, [r7, #20]
 800824e:	2b05      	cmp	r3, #5
 8008250:	f040 80c2 	bne.w	80083d8 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	220a      	movs	r2, #10
 8008258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008270:	2200      	movs	r2, #0
 8008272:	4619      	mov	r1, r3
 8008274:	f002 fdac 	bl	800add0 <osMessagePut>
      break;
 8008278:	e0ae      	b.n	80083d8 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	791b      	ldrb	r3, [r3, #4]
 8008284:	220d      	movs	r2, #13
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f002 fa7c 	bl	800a784 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	2208      	movs	r2, #8
 8008290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008294:	e0a9      	b.n	80083ea <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	791b      	ldrb	r3, [r3, #4]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f011 fef5 	bl	801a08c <USBH_LL_GetURBState>
 80082a2:	4603      	mov	r3, r0
 80082a4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80082a6:	7d3b      	ldrb	r3, [r7, #20]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d123      	bne.n	80082f4 <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f8c5 	bl	800844c <USBH_MSC_DecodeCSW>
 80082c2:	4603      	mov	r3, r0
 80082c4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80082c6:	7d7b      	ldrb	r3, [r7, #21]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d102      	bne.n	80082d2 <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	75fb      	strb	r3, [r7, #23]
 80082d0:	e001      	b.n	80082d6 <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 80082d2:	2302      	movs	r3, #2
 80082d4:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2202      	movs	r2, #2
 80082da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082ea:	2200      	movs	r2, #0
 80082ec:	4619      	mov	r1, r3
 80082ee:	f002 fd6f 	bl	800add0 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 80082f2:	e073      	b.n	80083dc <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 80082f4:	7d3b      	ldrb	r3, [r7, #20]
 80082f6:	2b05      	cmp	r3, #5
 80082f8:	d170      	bne.n	80083dc <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	2209      	movs	r2, #9
 80082fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2202      	movs	r2, #2
 8008306:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008316:	2200      	movs	r2, #0
 8008318:	4619      	mov	r1, r3
 800831a:	f002 fd59 	bl	800add0 <osMessagePut>
      break;
 800831e:	e05d      	b.n	80083dc <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	2200      	movs	r2, #0
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f864 	bl	80083f4 <USBH_MSC_BOT_Abort>
 800832c:	4603      	mov	r3, r0
 800832e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008330:	7dbb      	ldrb	r3, [r7, #22]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d104      	bne.n	8008340 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	2207      	movs	r2, #7
 800833a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800833e:	e04f      	b.n	80083e0 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008340:	7dbb      	ldrb	r3, [r7, #22]
 8008342:	2b04      	cmp	r3, #4
 8008344:	d14c      	bne.n	80083e0 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	220b      	movs	r2, #11
 800834a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800834e:	e047      	b.n	80083e0 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	2201      	movs	r2, #1
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f84c 	bl	80083f4 <USBH_MSC_BOT_Abort>
 800835c:	4603      	mov	r3, r0
 800835e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008360:	7dbb      	ldrb	r3, [r7, #22]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d11d      	bne.n	80083a2 <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	795b      	ldrb	r3, [r3, #5]
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f011 fede 	bl	801a12e <USBH_LL_GetToggle>
 8008372:	4603      	mov	r3, r0
 8008374:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	7959      	ldrb	r1, [r3, #5]
 800837a:	7bfb      	ldrb	r3, [r7, #15]
 800837c:	f1c3 0301 	rsb	r3, r3, #1
 8008380:	b2db      	uxtb	r3, r3
 8008382:	461a      	mov	r2, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f011 fea2 	bl	801a0ce <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	791b      	ldrb	r3, [r3, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f011 fe9b 	bl	801a0ce <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	2209      	movs	r2, #9
 800839c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80083a0:	e020      	b.n	80083e4 <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 80083a2:	7dbb      	ldrb	r3, [r7, #22]
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d11d      	bne.n	80083e4 <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	220b      	movs	r2, #11
 80083ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80083b0:	e018      	b.n	80083e4 <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7ff fd66 	bl	8007e84 <USBH_MSC_BOT_REQ_Reset>
 80083b8:	4603      	mov	r3, r0
 80083ba:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d112      	bne.n	80083e8 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80083ca:	e00d      	b.n	80083e8 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 80083cc:	bf00      	nop
 80083ce:	e00c      	b.n	80083ea <USBH_MSC_BOT_Process+0x4aa>
      break;
 80083d0:	bf00      	nop
 80083d2:	e00a      	b.n	80083ea <USBH_MSC_BOT_Process+0x4aa>
      break;
 80083d4:	bf00      	nop
 80083d6:	e008      	b.n	80083ea <USBH_MSC_BOT_Process+0x4aa>
      break;
 80083d8:	bf00      	nop
 80083da:	e006      	b.n	80083ea <USBH_MSC_BOT_Process+0x4aa>
      break;
 80083dc:	bf00      	nop
 80083de:	e004      	b.n	80083ea <USBH_MSC_BOT_Process+0x4aa>
      break;
 80083e0:	bf00      	nop
 80083e2:	e002      	b.n	80083ea <USBH_MSC_BOT_Process+0x4aa>
      break;
 80083e4:	bf00      	nop
 80083e6:	e000      	b.n	80083ea <USBH_MSC_BOT_Process+0x4aa>
      break;
 80083e8:	bf00      	nop
  }
  return status;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
 8008400:	4613      	mov	r3, r2
 8008402:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008404:	2302      	movs	r3, #2
 8008406:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008412:	78bb      	ldrb	r3, [r7, #2]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d002      	beq.n	800841e <USBH_MSC_BOT_Abort+0x2a>
 8008418:	2b01      	cmp	r3, #1
 800841a:	d009      	beq.n	8008430 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800841c:	e011      	b.n	8008442 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	79db      	ldrb	r3, [r3, #7]
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f001 fc9e 	bl	8009d66 <USBH_ClrFeature>
 800842a:	4603      	mov	r3, r0
 800842c:	73fb      	strb	r3, [r7, #15]
      break;
 800842e:	e008      	b.n	8008442 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	799b      	ldrb	r3, [r3, #6]
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 fc95 	bl	8009d66 <USBH_ClrFeature>
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]
      break;
 8008440:	bf00      	nop
  }
  return status;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800845a:	69db      	ldr	r3, [r3, #28]
 800845c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800845e:	2301      	movs	r3, #1
 8008460:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	791b      	ldrb	r3, [r3, #4]
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f011 fd7d 	bl	8019f68 <USBH_LL_GetLastXferSize>
 800846e:	4603      	mov	r3, r0
 8008470:	2b0d      	cmp	r3, #13
 8008472:	d002      	beq.n	800847a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008474:	2302      	movs	r3, #2
 8008476:	73fb      	strb	r3, [r7, #15]
 8008478:	e024      	b.n	80084c4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800847e:	4a14      	ldr	r2, [pc, #80]	; (80084d0 <USBH_MSC_DecodeCSW+0x84>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d11d      	bne.n	80084c0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800848c:	429a      	cmp	r2, r3
 800848e:	d119      	bne.n	80084c4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008496:	2b00      	cmp	r3, #0
 8008498:	d102      	bne.n	80084a0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800849a:	2300      	movs	r3, #0
 800849c:	73fb      	strb	r3, [r7, #15]
 800849e:	e011      	b.n	80084c4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d102      	bne.n	80084b0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80084aa:	2301      	movs	r3, #1
 80084ac:	73fb      	strb	r3, [r7, #15]
 80084ae:	e009      	b.n	80084c4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d104      	bne.n	80084c4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80084ba:	2302      	movs	r3, #2
 80084bc:	73fb      	strb	r3, [r7, #15]
 80084be:	e001      	b.n	80084c4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80084c0:	2302      	movs	r3, #2
 80084c2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	53425355 	.word	0x53425355

080084d4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80084e0:	2302      	movs	r3, #2
 80084e2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d002      	beq.n	80084fe <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d021      	beq.n	8008540 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80084fc:	e028      	b.n	8008550 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2200      	movs	r2, #0
 8008502:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	220a      	movs	r2, #10
 8008510:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	3363      	adds	r3, #99	; 0x63
 8008518:	2210      	movs	r2, #16
 800851a:	2100      	movs	r1, #0
 800851c:	4618      	mov	r0, r3
 800851e:	f011 fee7 	bl	801a2f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2202      	movs	r2, #2
 8008536:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800853a:	2301      	movs	r3, #1
 800853c:	73fb      	strb	r3, [r7, #15]
      break;
 800853e:	e007      	b.n	8008550 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7ff fcfb 	bl	8007f40 <USBH_MSC_BOT_Process>
 800854a:	4603      	mov	r3, r0
 800854c:	73fb      	strb	r3, [r7, #15]
      break;
 800854e:	bf00      	nop
  }

  return error;
 8008550:	7bfb      	ldrb	r3, [r7, #15]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b086      	sub	sp, #24
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	460b      	mov	r3, r1
 8008564:	607a      	str	r2, [r7, #4]
 8008566:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008568:	2301      	movs	r3, #1
 800856a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800857c:	2b01      	cmp	r3, #1
 800857e:	d002      	beq.n	8008586 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008580:	2b02      	cmp	r3, #2
 8008582:	d027      	beq.n	80085d4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008584:	e05f      	b.n	8008646 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	2208      	movs	r2, #8
 800858a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	2280      	movs	r2, #128	; 0x80
 8008590:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	220a      	movs	r2, #10
 8008598:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	3363      	adds	r3, #99	; 0x63
 80085a0:	2210      	movs	r2, #16
 80085a2:	2100      	movs	r1, #0
 80085a4:	4618      	mov	r0, r3
 80085a6:	f011 fea3 	bl	801a2f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	2225      	movs	r2, #37	; 0x25
 80085ae:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2202      	movs	r2, #2
 80085be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f103 0210 	add.w	r2, r3, #16
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80085ce:	2301      	movs	r3, #1
 80085d0:	75fb      	strb	r3, [r7, #23]
      break;
 80085d2:	e038      	b.n	8008646 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80085d4:	7afb      	ldrb	r3, [r7, #11]
 80085d6:	4619      	mov	r1, r3
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff fcb1 	bl	8007f40 <USBH_MSC_BOT_Process>
 80085de:	4603      	mov	r3, r0
 80085e0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d12d      	bne.n	8008644 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ee:	3303      	adds	r3, #3
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085fa:	3302      	adds	r3, #2
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	021b      	lsls	r3, r3, #8
 8008600:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008608:	3301      	adds	r3, #1
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800860e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	061b      	lsls	r3, r3, #24
 800861a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008626:	3307      	adds	r3, #7
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	b29a      	uxth	r2, r3
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008632:	3306      	adds	r3, #6
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	b29b      	uxth	r3, r3
 8008638:	021b      	lsls	r3, r3, #8
 800863a:	b29b      	uxth	r3, r3
 800863c:	4313      	orrs	r3, r2
 800863e:	b29a      	uxth	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	809a      	strh	r2, [r3, #4]
      break;
 8008644:	bf00      	nop
  }

  return error;
 8008646:	7dfb      	ldrb	r3, [r7, #23]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	460b      	mov	r3, r1
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800865e:	2302      	movs	r3, #2
 8008660:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008672:	2b01      	cmp	r3, #1
 8008674:	d002      	beq.n	800867c <USBH_MSC_SCSI_Inquiry+0x2c>
 8008676:	2b02      	cmp	r3, #2
 8008678:	d03d      	beq.n	80086f6 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800867a:	e089      	b.n	8008790 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	2224      	movs	r2, #36	; 0x24
 8008680:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	2280      	movs	r2, #128	; 0x80
 8008686:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	220a      	movs	r2, #10
 800868e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	3363      	adds	r3, #99	; 0x63
 8008696:	220a      	movs	r2, #10
 8008698:	2100      	movs	r1, #0
 800869a:	4618      	mov	r0, r3
 800869c:	f011 fe28 	bl	801a2f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	2212      	movs	r2, #18
 80086a4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80086a8:	7afb      	ldrb	r3, [r7, #11]
 80086aa:	015b      	lsls	r3, r3, #5
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2224      	movs	r2, #36	; 0x24
 80086c8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	2202      	movs	r2, #2
 80086e0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f103 0210 	add.w	r2, r3, #16
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80086f0:	2301      	movs	r3, #1
 80086f2:	75fb      	strb	r3, [r7, #23]
      break;
 80086f4:	e04c      	b.n	8008790 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80086f6:	7afb      	ldrb	r3, [r7, #11]
 80086f8:	4619      	mov	r1, r3
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f7ff fc20 	bl	8007f40 <USBH_MSC_BOT_Process>
 8008700:	4603      	mov	r3, r0
 8008702:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d141      	bne.n	800878e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800870a:	2222      	movs	r2, #34	; 0x22
 800870c:	2100      	movs	r1, #0
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f011 fdee 	bl	801a2f0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	f003 031f 	and.w	r3, r3, #31
 8008720:	b2da      	uxtb	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	095b      	lsrs	r3, r3, #5
 8008730:	b2da      	uxtb	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800873c:	3301      	adds	r3, #1
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	b25b      	sxtb	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	da03      	bge.n	800874e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	709a      	strb	r2, [r3, #2]
 800874c:	e002      	b.n	8008754 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	1cd8      	adds	r0, r3, #3
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800875e:	3308      	adds	r3, #8
 8008760:	2208      	movs	r2, #8
 8008762:	4619      	mov	r1, r3
 8008764:	f011 fdb6 	bl	801a2d4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f103 000c 	add.w	r0, r3, #12
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008774:	3310      	adds	r3, #16
 8008776:	2210      	movs	r2, #16
 8008778:	4619      	mov	r1, r3
 800877a:	f011 fdab 	bl	801a2d4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	331d      	adds	r3, #29
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008788:	3220      	adds	r2, #32
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	601a      	str	r2, [r3, #0]
      break;
 800878e:	bf00      	nop
  }

  return error;
 8008790:	7dfb      	ldrb	r3, [r7, #23]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b086      	sub	sp, #24
 800879e:	af00      	add	r7, sp, #0
 80087a0:	60f8      	str	r0, [r7, #12]
 80087a2:	460b      	mov	r3, r1
 80087a4:	607a      	str	r2, [r7, #4]
 80087a6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80087a8:	2302      	movs	r3, #2
 80087aa:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d002      	beq.n	80087c6 <USBH_MSC_SCSI_RequestSense+0x2c>
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d03d      	beq.n	8008840 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80087c4:	e05d      	b.n	8008882 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	220e      	movs	r2, #14
 80087ca:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	2280      	movs	r2, #128	; 0x80
 80087d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	220a      	movs	r2, #10
 80087d8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	3363      	adds	r3, #99	; 0x63
 80087e0:	2210      	movs	r2, #16
 80087e2:	2100      	movs	r1, #0
 80087e4:	4618      	mov	r0, r3
 80087e6:	f011 fd83 	bl	801a2f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	2203      	movs	r2, #3
 80087ee:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80087f2:	7afb      	ldrb	r3, [r7, #11]
 80087f4:	015b      	lsls	r3, r3, #5
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	220e      	movs	r2, #14
 8008812:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	2202      	movs	r2, #2
 800882a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f103 0210 	add.w	r2, r3, #16
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800883a:	2301      	movs	r3, #1
 800883c:	75fb      	strb	r3, [r7, #23]
      break;
 800883e:	e020      	b.n	8008882 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008840:	7afb      	ldrb	r3, [r7, #11]
 8008842:	4619      	mov	r1, r3
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f7ff fb7b 	bl	8007f40 <USBH_MSC_BOT_Process>
 800884a:	4603      	mov	r3, r0
 800884c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d115      	bne.n	8008880 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800885a:	3302      	adds	r3, #2
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	f003 030f 	and.w	r3, r3, #15
 8008862:	b2da      	uxtb	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800886e:	7b1a      	ldrb	r2, [r3, #12]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800887a:	7b5a      	ldrb	r2, [r3, #13]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	709a      	strb	r2, [r3, #2]
      break;
 8008880:	bf00      	nop
  }

  return error;
 8008882:	7dfb      	ldrb	r3, [r7, #23]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3718      	adds	r7, #24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	607a      	str	r2, [r7, #4]
 8008896:	603b      	str	r3, [r7, #0]
 8008898:	460b      	mov	r3, r1
 800889a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800889c:	2302      	movs	r3, #2
 800889e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d002      	beq.n	80088ba <USBH_MSC_SCSI_Write+0x2e>
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d047      	beq.n	8008948 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80088b8:	e04e      	b.n	8008958 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80088c0:	461a      	mov	r2, r3
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	fb03 f202 	mul.w	r2, r3, r2
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	220a      	movs	r2, #10
 80088d8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	3363      	adds	r3, #99	; 0x63
 80088e0:	2210      	movs	r2, #16
 80088e2:	2100      	movs	r1, #0
 80088e4:	4618      	mov	r0, r3
 80088e6:	f011 fd03 	bl	801a2f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	222a      	movs	r2, #42	; 0x2a
 80088ee:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80088f2:	79fa      	ldrb	r2, [r7, #7]
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80088fa:	79ba      	ldrb	r2, [r7, #6]
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008902:	797a      	ldrb	r2, [r7, #5]
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800890a:	1d3b      	adds	r3, r7, #4
 800890c:	781a      	ldrb	r2, [r3, #0]
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008914:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800891e:	f107 0320 	add.w	r3, r7, #32
 8008922:	781a      	ldrb	r2, [r3, #0]
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2202      	movs	r2, #2
 8008936:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008942:	2301      	movs	r3, #1
 8008944:	75fb      	strb	r3, [r7, #23]
      break;
 8008946:	e007      	b.n	8008958 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008948:	7afb      	ldrb	r3, [r7, #11]
 800894a:	4619      	mov	r1, r3
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f7ff faf7 	bl	8007f40 <USBH_MSC_BOT_Process>
 8008952:	4603      	mov	r3, r0
 8008954:	75fb      	strb	r3, [r7, #23]
      break;
 8008956:	bf00      	nop
  }

  return error;
 8008958:	7dfb      	ldrb	r3, [r7, #23]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b086      	sub	sp, #24
 8008966:	af00      	add	r7, sp, #0
 8008968:	60f8      	str	r0, [r7, #12]
 800896a:	607a      	str	r2, [r7, #4]
 800896c:	603b      	str	r3, [r7, #0]
 800896e:	460b      	mov	r3, r1
 8008970:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008972:	2302      	movs	r3, #2
 8008974:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800897c:	69db      	ldr	r3, [r3, #28]
 800897e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008986:	2b01      	cmp	r3, #1
 8008988:	d002      	beq.n	8008990 <USBH_MSC_SCSI_Read+0x2e>
 800898a:	2b02      	cmp	r3, #2
 800898c:	d047      	beq.n	8008a1e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800898e:	e04e      	b.n	8008a2e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008996:	461a      	mov	r2, r3
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	fb03 f202 	mul.w	r2, r3, r2
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	2280      	movs	r2, #128	; 0x80
 80089a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	220a      	movs	r2, #10
 80089ae:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	3363      	adds	r3, #99	; 0x63
 80089b6:	2210      	movs	r2, #16
 80089b8:	2100      	movs	r1, #0
 80089ba:	4618      	mov	r0, r3
 80089bc:	f011 fc98 	bl	801a2f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	2228      	movs	r2, #40	; 0x28
 80089c4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80089c8:	79fa      	ldrb	r2, [r7, #7]
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80089d0:	79ba      	ldrb	r2, [r7, #6]
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80089d8:	797a      	ldrb	r2, [r7, #5]
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80089e0:	1d3b      	adds	r3, r7, #4
 80089e2:	781a      	ldrb	r2, [r3, #0]
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80089ea:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80089f4:	f107 0320 	add.w	r3, r7, #32
 80089f8:	781a      	ldrb	r2, [r3, #0]
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a1c:	e007      	b.n	8008a2e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008a1e:	7afb      	ldrb	r3, [r7, #11]
 8008a20:	4619      	mov	r1, r3
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f7ff fa8c 	bl	8007f40 <USBH_MSC_BOT_Process>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a2c:	bf00      	nop
  }

  return error;
 8008a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008a38:	b5b0      	push	{r4, r5, r7, lr}
 8008a3a:	b090      	sub	sp, #64	; 0x40
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	4613      	mov	r3, r2
 8008a44:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10a      	bne.n	8008a62 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8008a4c:	482e      	ldr	r0, [pc, #184]	; (8008b08 <USBH_Init+0xd0>)
 8008a4e:	f011 fd01 	bl	801a454 <iprintf>
 8008a52:	482e      	ldr	r0, [pc, #184]	; (8008b0c <USBH_Init+0xd4>)
 8008a54:	f011 fcfe 	bl	801a454 <iprintf>
 8008a58:	200a      	movs	r0, #10
 8008a5a:	f011 fd13 	bl	801a484 <putchar>
    return USBH_FAIL;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	e04d      	b.n	8008afe <USBH_Init+0xc6>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	79fa      	ldrb	r2, [r7, #7]
 8008a66:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f000 f84c 	bl	8008b18 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008aae:	4b18      	ldr	r3, [pc, #96]	; (8008b10 <USBH_Init+0xd8>)
 8008ab0:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8008ab4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ab6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8008aba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008abe:	2100      	movs	r1, #0
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f002 f95d 	bl	800ad80 <osMessageCreate>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008ace:	4b11      	ldr	r3, [pc, #68]	; (8008b14 <USBH_Init+0xdc>)
 8008ad0:	f107 0414 	add.w	r4, r7, #20
 8008ad4:	461d      	mov	r5, r3
 8008ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ada:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008ade:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8008ae2:	f107 0314 	add.w	r3, r7, #20
 8008ae6:	68f9      	ldr	r1, [r7, #12]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f001 ff97 	bl	800aa1c <osThreadCreate>
 8008aee:	4602      	mov	r2, r0
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f011 f982 	bl	8019e00 <USBH_LL_Init>

  return USBH_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3740      	adds	r7, #64	; 0x40
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bdb0      	pop	{r4, r5, r7, pc}
 8008b06:	bf00      	nop
 8008b08:	0801b69c 	.word	0x0801b69c
 8008b0c:	0801b6a4 	.word	0x0801b6a4
 8008b10:	0801b6b8 	.word	0x0801b6b8
 8008b14:	0801b6c8 	.word	0x0801b6c8

08008b18 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b24:	2300      	movs	r3, #0
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	e009      	b.n	8008b3e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	33e0      	adds	r3, #224	; 0xe0
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	2200      	movs	r2, #0
 8008b36:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2b0e      	cmp	r3, #14
 8008b42:	d9f2      	bls.n	8008b2a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008b44:	2300      	movs	r3, #0
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	e009      	b.n	8008b5e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008b54:	2200      	movs	r2, #0
 8008b56:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	60fb      	str	r3, [r7, #12]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b64:	d3f1      	bcc.n	8008b4a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2240      	movs	r2, #64	; 0x40
 8008b8a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d01f      	beq.n	8008c14 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10e      	bne.n	8008bfc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008be4:	1c59      	adds	r1, r3, #1
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	33de      	adds	r3, #222	; 0xde
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]
 8008bfa:	e016      	b.n	8008c2a <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 8008bfc:	480d      	ldr	r0, [pc, #52]	; (8008c34 <USBH_RegisterClass+0x74>)
 8008bfe:	f011 fc29 	bl	801a454 <iprintf>
 8008c02:	480d      	ldr	r0, [pc, #52]	; (8008c38 <USBH_RegisterClass+0x78>)
 8008c04:	f011 fc26 	bl	801a454 <iprintf>
 8008c08:	200a      	movs	r0, #10
 8008c0a:	f011 fc3b 	bl	801a484 <putchar>
      status = USBH_FAIL;
 8008c0e:	2302      	movs	r3, #2
 8008c10:	73fb      	strb	r3, [r7, #15]
 8008c12:	e00a      	b.n	8008c2a <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8008c14:	4807      	ldr	r0, [pc, #28]	; (8008c34 <USBH_RegisterClass+0x74>)
 8008c16:	f011 fc1d 	bl	801a454 <iprintf>
 8008c1a:	4808      	ldr	r0, [pc, #32]	; (8008c3c <USBH_RegisterClass+0x7c>)
 8008c1c:	f011 fc1a 	bl	801a454 <iprintf>
 8008c20:	200a      	movs	r0, #10
 8008c22:	f011 fc2f 	bl	801a484 <putchar>
    status = USBH_FAIL;
 8008c26:	2302      	movs	r3, #2
 8008c28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	0801b69c 	.word	0x0801b69c
 8008c38:	0801b6e4 	.word	0x0801b6e4
 8008c3c:	0801b700 	.word	0x0801b700

08008c40 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008c56:	78fa      	ldrb	r2, [r7, #3]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d23c      	bcs.n	8008cd6 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	78fa      	ldrb	r2, [r7, #3]
 8008c60:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	4619      	mov	r1, r3
 8008c68:	4823      	ldr	r0, [pc, #140]	; (8008cf8 <USBH_SelectInterface+0xb8>)
 8008c6a:	f011 fbf3 	bl	801a454 <iprintf>
 8008c6e:	200a      	movs	r0, #10
 8008c70:	f011 fc08 	bl	801a484 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	211a      	movs	r1, #26
 8008c7a:	fb01 f303 	mul.w	r3, r1, r3
 8008c7e:	4413      	add	r3, r2
 8008c80:	f203 3347 	addw	r3, r3, #839	; 0x347
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	4619      	mov	r1, r3
 8008c88:	481c      	ldr	r0, [pc, #112]	; (8008cfc <USBH_SelectInterface+0xbc>)
 8008c8a:	f011 fbe3 	bl	801a454 <iprintf>
 8008c8e:	200a      	movs	r0, #10
 8008c90:	f011 fbf8 	bl	801a484 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	211a      	movs	r1, #26
 8008c9a:	fb01 f303 	mul.w	r3, r1, r3
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4815      	ldr	r0, [pc, #84]	; (8008d00 <USBH_SelectInterface+0xc0>)
 8008caa:	f011 fbd3 	bl	801a454 <iprintf>
 8008cae:	200a      	movs	r0, #10
 8008cb0:	f011 fbe8 	bl	801a484 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 8008cb4:	78fb      	ldrb	r3, [r7, #3]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	211a      	movs	r1, #26
 8008cba:	fb01 f303 	mul.w	r3, r1, r3
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f203 3349 	addw	r3, r3, #841	; 0x349
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	480e      	ldr	r0, [pc, #56]	; (8008d04 <USBH_SelectInterface+0xc4>)
 8008cca:	f011 fbc3 	bl	801a454 <iprintf>
 8008cce:	200a      	movs	r0, #10
 8008cd0:	f011 fbd8 	bl	801a484 <putchar>
 8008cd4:	e00a      	b.n	8008cec <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 8008cd6:	480c      	ldr	r0, [pc, #48]	; (8008d08 <USBH_SelectInterface+0xc8>)
 8008cd8:	f011 fbbc 	bl	801a454 <iprintf>
 8008cdc:	480b      	ldr	r0, [pc, #44]	; (8008d0c <USBH_SelectInterface+0xcc>)
 8008cde:	f011 fbb9 	bl	801a454 <iprintf>
 8008ce2:	200a      	movs	r0, #10
 8008ce4:	f011 fbce 	bl	801a484 <putchar>
    status = USBH_FAIL;
 8008ce8:	2302      	movs	r3, #2
 8008cea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	0801b718 	.word	0x0801b718
 8008cfc:	0801b738 	.word	0x0801b738
 8008d00:	0801b748 	.word	0x0801b748
 8008d04:	0801b758 	.word	0x0801b758
 8008d08:	0801b69c 	.word	0x0801b69c
 8008d0c:	0801b768 	.word	0x0801b768

08008d10 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	4608      	mov	r0, r1
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	4603      	mov	r3, r0
 8008d20:	70fb      	strb	r3, [r7, #3]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70bb      	strb	r3, [r7, #2]
 8008d26:	4613      	mov	r3, r2
 8008d28:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008d38:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d3a:	e025      	b.n	8008d88 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	221a      	movs	r2, #26
 8008d40:	fb02 f303 	mul.w	r3, r2, r3
 8008d44:	3308      	adds	r3, #8
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	4413      	add	r3, r2
 8008d4a:	3302      	adds	r3, #2
 8008d4c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	795b      	ldrb	r3, [r3, #5]
 8008d52:	78fa      	ldrb	r2, [r7, #3]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d002      	beq.n	8008d5e <USBH_FindInterface+0x4e>
 8008d58:	78fb      	ldrb	r3, [r7, #3]
 8008d5a:	2bff      	cmp	r3, #255	; 0xff
 8008d5c:	d111      	bne.n	8008d82 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d62:	78ba      	ldrb	r2, [r7, #2]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d002      	beq.n	8008d6e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d68:	78bb      	ldrb	r3, [r7, #2]
 8008d6a:	2bff      	cmp	r3, #255	; 0xff
 8008d6c:	d109      	bne.n	8008d82 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d72:	787a      	ldrb	r2, [r7, #1]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d002      	beq.n	8008d7e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d78:	787b      	ldrb	r3, [r7, #1]
 8008d7a:	2bff      	cmp	r3, #255	; 0xff
 8008d7c:	d101      	bne.n	8008d82 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
 8008d80:	e006      	b.n	8008d90 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	3301      	adds	r3, #1
 8008d86:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d9d6      	bls.n	8008d3c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008d8e:	23ff      	movs	r3, #255	; 0xff
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f011 f867 	bl	8019e78 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008daa:	2101      	movs	r1, #1
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f011 f980 	bl	801a0b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af04      	add	r7, sp, #16
 8008dc2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d102      	bne.n	8008dde <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2203      	movs	r2, #3
 8008ddc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b0b      	cmp	r3, #11
 8008de6:	f200 82b2 	bhi.w	800934e <USBH_Process+0x592>
 8008dea:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <USBH_Process+0x34>)
 8008dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df0:	08008e21 	.word	0x08008e21
 8008df4:	08008e7b 	.word	0x08008e7b
 8008df8:	08008f17 	.word	0x08008f17
 8008dfc:	080092c1 	.word	0x080092c1
 8008e00:	0800934f 	.word	0x0800934f
 8008e04:	08008fd7 	.word	0x08008fd7
 8008e08:	08009227 	.word	0x08009227
 8008e0c:	08009041 	.word	0x08009041
 8008e10:	0800907d 	.word	0x0800907d
 8008e14:	080090c3 	.word	0x080090c3
 8008e18:	08009117 	.word	0x08009117
 8008e1c:	080092a9 	.word	0x080092a9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 8292 	beq.w	8009352 <USBH_Process+0x596>
      {
        USBH_UsrLog("USB Device Connected");
 8008e2e:	48c0      	ldr	r0, [pc, #768]	; (8009130 <USBH_Process+0x374>)
 8008e30:	f011 fb10 	bl	801a454 <iprintf>
 8008e34:	200a      	movs	r0, #10
 8008e36:	f011 fb25 	bl	801a484 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008e40:	20c8      	movs	r0, #200	; 0xc8
 8008e42:	f011 f9a4 	bl	801a18e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f011 f873 	bl	8019f32 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e70:	2200      	movs	r2, #0
 8008e72:	4619      	mov	r1, r3
 8008e74:	f001 ffac 	bl	800add0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008e78:	e26b      	b.n	8009352 <USBH_Process+0x596>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d10d      	bne.n	8008ea0 <USBH_Process+0xe4>
      {
        USBH_UsrLog("USB Device Reset Completed");
 8008e84:	48ab      	ldr	r0, [pc, #684]	; (8009134 <USBH_Process+0x378>)
 8008e86:	f011 fae5 	bl	801a454 <iprintf>
 8008e8a:	200a      	movs	r0, #10
 8008e8c:	f011 fafa 	bl	801a484 <putchar>
        phost->device.RstCnt = 0U;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	701a      	strb	r2, [r3, #0]
 8008e9e:	e02b      	b.n	8008ef8 <USBH_Process+0x13c>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008eaa:	d91a      	bls.n	8008ee2 <USBH_Process+0x126>
        {
          phost->device.RstCnt++;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d909      	bls.n	8008eda <USBH_Process+0x11e>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 8008ec6:	489c      	ldr	r0, [pc, #624]	; (8009138 <USBH_Process+0x37c>)
 8008ec8:	f011 fac4 	bl	801a454 <iprintf>
 8008ecc:	200a      	movs	r0, #10
 8008ece:	f011 fad9 	bl	801a484 <putchar>
            phost->gState = HOST_ABORT_STATE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	220d      	movs	r2, #13
 8008ed6:	701a      	strb	r2, [r3, #0]
 8008ed8:	e00e      	b.n	8008ef8 <USBH_Process+0x13c>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	701a      	strb	r2, [r3, #0]
 8008ee0:	e00a      	b.n	8008ef8 <USBH_Process+0x13c>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008ee8:	f103 020a 	add.w	r2, r3, #10
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008ef2:	200a      	movs	r0, #10
 8008ef4:	f011 f94b 	bl	801a18e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4619      	mov	r1, r3
 8008f10:	f001 ff5e 	bl	800add0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f14:	e224      	b.n	8009360 <USBH_Process+0x5a4>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d005      	beq.n	8008f2c <USBH_Process+0x170>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f26:	2104      	movs	r1, #4
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008f2c:	2064      	movs	r0, #100	; 0x64
 8008f2e:	f011 f92e 	bl	801a18e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f010 ffd6 	bl	8019ee4 <USBH_LL_GetSpeed>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2205      	movs	r2, #5
 8008f46:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008f48:	2100      	movs	r1, #0
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 fc67 	bl	800a81e <USBH_AllocPipe>
 8008f50:	4603      	mov	r3, r0
 8008f52:	461a      	mov	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008f58:	2180      	movs	r1, #128	; 0x80
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f001 fc5f 	bl	800a81e <USBH_AllocPipe>
 8008f60:	4603      	mov	r3, r0
 8008f62:	461a      	mov	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	7919      	ldrb	r1, [r3, #4]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f7c:	b292      	uxth	r2, r2
 8008f7e:	9202      	str	r2, [sp, #8]
 8008f80:	2200      	movs	r2, #0
 8008f82:	9201      	str	r2, [sp, #4]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	4603      	mov	r3, r0
 8008f88:	2280      	movs	r2, #128	; 0x80
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f001 fc18 	bl	800a7c0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	7959      	ldrb	r1, [r3, #5]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008fa4:	b292      	uxth	r2, r2
 8008fa6:	9202      	str	r2, [sp, #8]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	9201      	str	r2, [sp, #4]
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f001 fc04 	bl	800a7c0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fcc:	2200      	movs	r2, #0
 8008fce:	4619      	mov	r1, r3
 8008fd0:	f001 fefe 	bl	800add0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008fd4:	e1c4      	b.n	8009360 <USBH_Process+0x5a4>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f9d6 	bl	8009388 <USBH_HandleEnum>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f040 81b6 	bne.w	8009356 <USBH_Process+0x59a>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 8008fea:	4854      	ldr	r0, [pc, #336]	; (800913c <USBH_Process+0x380>)
 8008fec:	f011 fa32 	bl	801a454 <iprintf>
 8008ff0:	200a      	movs	r0, #10
 8008ff2:	f011 fa47 	bl	801a484 <putchar>

        phost->device.current_interface = 0U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009004:	2b01      	cmp	r3, #1
 8009006:	d109      	bne.n	800901c <USBH_Process+0x260>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 8009008:	484d      	ldr	r0, [pc, #308]	; (8009140 <USBH_Process+0x384>)
 800900a:	f011 fa23 	bl	801a454 <iprintf>
 800900e:	200a      	movs	r0, #10
 8009010:	f011 fa38 	bl	801a484 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2208      	movs	r2, #8
 8009018:	701a      	strb	r2, [r3, #0]
 800901a:	e002      	b.n	8009022 <USBH_Process+0x266>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2207      	movs	r2, #7
 8009020:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2205      	movs	r2, #5
 8009026:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009036:	2200      	movs	r2, #0
 8009038:	4619      	mov	r1, r3
 800903a:	f001 fec9 	bl	800add0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800903e:	e18a      	b.n	8009356 <USBH_Process+0x59a>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 8187 	beq.w	800935a <USBH_Process+0x59e>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009052:	2101      	movs	r1, #1
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2208      	movs	r2, #8
 800905c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2205      	movs	r2, #5
 8009062:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009072:	2200      	movs	r2, #0
 8009074:	4619      	mov	r1, r3
 8009076:	f001 feab 	bl	800add0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800907a:	e16e      	b.n	800935a <USBH_Process+0x59e>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009082:	b29b      	uxth	r3, r3
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fe26 	bl	8009cd8 <USBH_SetCfg>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d108      	bne.n	80090a4 <USBH_Process+0x2e8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2209      	movs	r2, #9
 8009096:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 8009098:	482a      	ldr	r0, [pc, #168]	; (8009144 <USBH_Process+0x388>)
 800909a:	f011 f9db 	bl	801a454 <iprintf>
 800909e:	200a      	movs	r0, #10
 80090a0:	f011 f9f0 	bl	801a484 <putchar>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090b8:	2200      	movs	r2, #0
 80090ba:	4619      	mov	r1, r3
 80090bc:	f001 fe88 	bl	800add0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80090c0:	e14e      	b.n	8009360 <USBH_Process+0x5a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80090c8:	f003 0320 	and.w	r3, r3, #32
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d010      	beq.n	80090f2 <USBH_Process+0x336>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80090d0:	2101      	movs	r1, #1
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fe23 	bl	8009d1e <USBH_SetFeature>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10c      	bne.n	80090f8 <USBH_Process+0x33c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 80090de:	481a      	ldr	r0, [pc, #104]	; (8009148 <USBH_Process+0x38c>)
 80090e0:	f011 f9b8 	bl	801a454 <iprintf>
 80090e4:	200a      	movs	r0, #10
 80090e6:	f011 f9cd 	bl	801a484 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	220a      	movs	r2, #10
 80090ee:	701a      	strb	r2, [r3, #0]
 80090f0:	e002      	b.n	80090f8 <USBH_Process+0x33c>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	220a      	movs	r2, #10
 80090f6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800910c:	2200      	movs	r2, #0
 800910e:	4619      	mov	r1, r3
 8009110:	f001 fe5e 	bl	800add0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009114:	e124      	b.n	8009360 <USBH_Process+0x5a4>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800911c:	2b00      	cmp	r3, #0
 800911e:	d117      	bne.n	8009150 <USBH_Process+0x394>
      {
        USBH_UsrLog("No Class has been registered.");
 8009120:	480a      	ldr	r0, [pc, #40]	; (800914c <USBH_Process+0x390>)
 8009122:	f011 f997 	bl	801a454 <iprintf>
 8009126:	200a      	movs	r0, #10
 8009128:	f011 f9ac 	bl	801a484 <putchar>
 800912c:	e06c      	b.n	8009208 <USBH_Process+0x44c>
 800912e:	bf00      	nop
 8009130:	0801b788 	.word	0x0801b788
 8009134:	0801b7a0 	.word	0x0801b7a0
 8009138:	0801b7bc 	.word	0x0801b7bc
 800913c:	0801b7e8 	.word	0x0801b7e8
 8009140:	0801b7fc 	.word	0x0801b7fc
 8009144:	0801b824 	.word	0x0801b824
 8009148:	0801b840 	.word	0x0801b840
 800914c:	0801b860 	.word	0x0801b860
      }
      else
      {
        phost->pActiveClass = NULL;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009158:	2300      	movs	r3, #0
 800915a:	73fb      	strb	r3, [r7, #15]
 800915c:	e016      	b.n	800918c <USBH_Process+0x3d0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800915e:	7bfa      	ldrb	r2, [r7, #15]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	32de      	adds	r2, #222	; 0xde
 8009164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009168:	791a      	ldrb	r2, [r3, #4]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009170:	429a      	cmp	r2, r3
 8009172:	d108      	bne.n	8009186 <USBH_Process+0x3ca>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009174:	7bfa      	ldrb	r2, [r7, #15]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	32de      	adds	r2, #222	; 0xde
 800917a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009184:	e005      	b.n	8009192 <USBH_Process+0x3d6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	3301      	adds	r3, #1
 800918a:	73fb      	strb	r3, [r7, #15]
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0e5      	beq.n	800915e <USBH_Process+0x3a2>
          }
        }

        if (phost->pActiveClass != NULL)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009198:	2b00      	cmp	r3, #0
 800919a:	d02c      	beq.n	80091f6 <USBH_Process+0x43a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	4798      	blx	r3
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d114      	bne.n	80091d8 <USBH_Process+0x41c>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2206      	movs	r2, #6
 80091b2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4619      	mov	r1, r3
 80091be:	486b      	ldr	r0, [pc, #428]	; (800936c <USBH_Process+0x5b0>)
 80091c0:	f011 f948 	bl	801a454 <iprintf>
 80091c4:	200a      	movs	r0, #10
 80091c6:	f011 f95d 	bl	801a484 <putchar>

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80091d0:	2103      	movs	r1, #3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	4798      	blx	r3
 80091d6:	e017      	b.n	8009208 <USBH_Process+0x44c>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	220d      	movs	r2, #13
 80091dc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4619      	mov	r1, r3
 80091e8:	4861      	ldr	r0, [pc, #388]	; (8009370 <USBH_Process+0x5b4>)
 80091ea:	f011 f933 	bl	801a454 <iprintf>
 80091ee:	200a      	movs	r0, #10
 80091f0:	f011 f948 	bl	801a484 <putchar>
 80091f4:	e008      	b.n	8009208 <USBH_Process+0x44c>
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	220d      	movs	r2, #13
 80091fa:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 80091fc:	485d      	ldr	r0, [pc, #372]	; (8009374 <USBH_Process+0x5b8>)
 80091fe:	f011 f929 	bl	801a454 <iprintf>
 8009202:	200a      	movs	r0, #10
 8009204:	f011 f93e 	bl	801a484 <putchar>
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2205      	movs	r2, #5
 800920c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800921c:	2200      	movs	r2, #0
 800921e:	4619      	mov	r1, r3
 8009220:	f001 fdd6 	bl	800add0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009224:	e09c      	b.n	8009360 <USBH_Process+0x5a4>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800922c:	2b00      	cmp	r3, #0
 800922e:	d020      	beq.n	8009272 <USBH_Process+0x4b6>
      {
        status = phost->pActiveClass->Requests(phost);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	4798      	blx	r3
 800923c:	4603      	mov	r3, r0
 800923e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009240:	7bbb      	ldrb	r3, [r7, #14]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	d103      	bne.n	8009250 <USBH_Process+0x494>
        {
          phost->gState = HOST_CLASS;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	220b      	movs	r2, #11
 800924c:	701a      	strb	r2, [r3, #0]
 800924e:	e01c      	b.n	800928a <USBH_Process+0x4ce>
        }
        else if (status == USBH_FAIL)
 8009250:	7bbb      	ldrb	r3, [r7, #14]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b02      	cmp	r3, #2
 8009256:	d118      	bne.n	800928a <USBH_Process+0x4ce>
        {
          phost->gState = HOST_ABORT_STATE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	220d      	movs	r2, #13
 800925c:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800925e:	4846      	ldr	r0, [pc, #280]	; (8009378 <USBH_Process+0x5bc>)
 8009260:	f011 f8f8 	bl	801a454 <iprintf>
 8009264:	4845      	ldr	r0, [pc, #276]	; (800937c <USBH_Process+0x5c0>)
 8009266:	f011 f8f5 	bl	801a454 <iprintf>
 800926a:	200a      	movs	r0, #10
 800926c:	f011 f90a 	bl	801a484 <putchar>
 8009270:	e00b      	b.n	800928a <USBH_Process+0x4ce>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	220d      	movs	r2, #13
 8009276:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 8009278:	483f      	ldr	r0, [pc, #252]	; (8009378 <USBH_Process+0x5bc>)
 800927a:	f011 f8eb 	bl	801a454 <iprintf>
 800927e:	4840      	ldr	r0, [pc, #256]	; (8009380 <USBH_Process+0x5c4>)
 8009280:	f011 f8e8 	bl	801a454 <iprintf>
 8009284:	200a      	movs	r0, #10
 8009286:	f011 f8fd 	bl	801a484 <putchar>
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2205      	movs	r2, #5
 800928e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800929e:	2200      	movs	r2, #0
 80092a0:	4619      	mov	r1, r3
 80092a2:	f001 fd95 	bl	800add0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80092a6:	e05b      	b.n	8009360 <USBH_Process+0x5a4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d055      	beq.n	800935e <USBH_Process+0x5a2>
      {
        phost->pActiveClass->BgndProcess(phost);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	4798      	blx	r3
      }
      break;
 80092be:	e04e      	b.n	800935e <USBH_Process+0x5a2>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7ff fc25 	bl	8008b18 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d009      	beq.n	80092ec <USBH_Process+0x530>
      {
        phost->pActiveClass->DeInit(phost);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d005      	beq.n	8009302 <USBH_Process+0x546>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092fc:	2105      	movs	r1, #5
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 8009302:	4820      	ldr	r0, [pc, #128]	; (8009384 <USBH_Process+0x5c8>)
 8009304:	f011 f8a6 	bl	801a454 <iprintf>
 8009308:	200a      	movs	r0, #10
 800930a:	f011 f8bb 	bl	801a484 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b01      	cmp	r3, #1
 8009318:	d107      	bne.n	800932a <USBH_Process+0x56e>
      {
        phost->device.is_ReEnumerated = 0U;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff fd3a 	bl	8008d9c <USBH_Start>
 8009328:	e002      	b.n	8009330 <USBH_Process+0x574>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f010 fda4 	bl	8019e78 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009344:	2200      	movs	r2, #0
 8009346:	4619      	mov	r1, r3
 8009348:	f001 fd42 	bl	800add0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800934c:	e008      	b.n	8009360 <USBH_Process+0x5a4>

    case HOST_ABORT_STATE:
    default :
      break;
 800934e:	bf00      	nop
 8009350:	e006      	b.n	8009360 <USBH_Process+0x5a4>
      break;
 8009352:	bf00      	nop
 8009354:	e004      	b.n	8009360 <USBH_Process+0x5a4>
      break;
 8009356:	bf00      	nop
 8009358:	e002      	b.n	8009360 <USBH_Process+0x5a4>
    break;
 800935a:	bf00      	nop
 800935c:	e000      	b.n	8009360 <USBH_Process+0x5a4>
      break;
 800935e:	bf00      	nop
  }
  return USBH_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	0801b880 	.word	0x0801b880
 8009370:	0801b894 	.word	0x0801b894
 8009374:	0801b8b4 	.word	0x0801b8b4
 8009378:	0801b69c 	.word	0x0801b69c
 800937c:	0801b8dc 	.word	0x0801b8dc
 8009380:	0801b904 	.word	0x0801b904
 8009384:	0801b91c 	.word	0x0801b91c

08009388 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af04      	add	r7, sp, #16
 800938e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009390:	2301      	movs	r3, #1
 8009392:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009394:	2301      	movs	r3, #1
 8009396:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	785b      	ldrb	r3, [r3, #1]
 800939c:	2b07      	cmp	r3, #7
 800939e:	f200 82c6 	bhi.w	800992e <USBH_HandleEnum+0x5a6>
 80093a2:	a201      	add	r2, pc, #4	; (adr r2, 80093a8 <USBH_HandleEnum+0x20>)
 80093a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a8:	080093c9 	.word	0x080093c9
 80093ac:	080094a5 	.word	0x080094a5
 80093b0:	08009555 	.word	0x08009555
 80093b4:	08009615 	.word	0x08009615
 80093b8:	0800969d 	.word	0x0800969d
 80093bc:	08009751 	.word	0x08009751
 80093c0:	08009819 	.word	0x08009819
 80093c4:	080098c3 	.word	0x080098c3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80093c8:	2108      	movs	r1, #8
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fbb4 	bl	8009b38 <USBH_Get_DevDesc>
 80093d0:	4603      	mov	r3, r0
 80093d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093d4:	7bbb      	ldrb	r3, [r7, #14]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d130      	bne.n	800943c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7919      	ldrb	r1, [r3, #4]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80093fe:	b292      	uxth	r2, r2
 8009400:	9202      	str	r2, [sp, #8]
 8009402:	2200      	movs	r2, #0
 8009404:	9201      	str	r2, [sp, #4]
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	4603      	mov	r3, r0
 800940a:	2280      	movs	r2, #128	; 0x80
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 f9d7 	bl	800a7c0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	7959      	ldrb	r1, [r3, #5]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009426:	b292      	uxth	r2, r2
 8009428:	9202      	str	r2, [sp, #8]
 800942a:	2200      	movs	r2, #0
 800942c:	9201      	str	r2, [sp, #4]
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	4603      	mov	r3, r0
 8009432:	2200      	movs	r2, #0
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f001 f9c3 	bl	800a7c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800943a:	e27a      	b.n	8009932 <USBH_HandleEnum+0x5aa>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800943c:	7bbb      	ldrb	r3, [r7, #14]
 800943e:	2b03      	cmp	r3, #3
 8009440:	f040 8277 	bne.w	8009932 <USBH_HandleEnum+0x5aa>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 8009444:	48b9      	ldr	r0, [pc, #740]	; (800972c <USBH_HandleEnum+0x3a4>)
 8009446:	f011 f805 	bl	801a454 <iprintf>
 800944a:	48b9      	ldr	r0, [pc, #740]	; (8009730 <USBH_HandleEnum+0x3a8>)
 800944c:	f011 f802 	bl	801a454 <iprintf>
 8009450:	200a      	movs	r0, #10
 8009452:	f011 f817 	bl	801a484 <putchar>
        phost->device.EnumCnt++;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800945c:	3301      	adds	r3, #1
 800945e:	b2da      	uxtb	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800946c:	2b03      	cmp	r3, #3
 800946e:	d909      	bls.n	8009484 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8009470:	48b0      	ldr	r0, [pc, #704]	; (8009734 <USBH_HandleEnum+0x3ac>)
 8009472:	f010 ffef 	bl	801a454 <iprintf>
 8009476:	200a      	movs	r0, #10
 8009478:	f011 f804 	bl	801a484 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	220d      	movs	r2, #13
 8009480:	701a      	strb	r2, [r3, #0]
      break;
 8009482:	e256      	b.n	8009932 <USBH_HandleEnum+0x5aa>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	795b      	ldrb	r3, [r3, #5]
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f001 f9e8 	bl	800a860 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	791b      	ldrb	r3, [r3, #4]
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 f9e2 	bl	800a860 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	701a      	strb	r2, [r3, #0]
      break;
 80094a2:	e246      	b.n	8009932 <USBH_HandleEnum+0x5aa>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80094a4:	2112      	movs	r1, #18
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fb46 	bl	8009b38 <USBH_Get_DevDesc>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d117      	bne.n	80094e6 <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 80094bc:	4619      	mov	r1, r3
 80094be:	489e      	ldr	r0, [pc, #632]	; (8009738 <USBH_HandleEnum+0x3b0>)
 80094c0:	f010 ffc8 	bl	801a454 <iprintf>
 80094c4:	200a      	movs	r0, #10
 80094c6:	f010 ffdd 	bl	801a484 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 80094d0:	4619      	mov	r1, r3
 80094d2:	489a      	ldr	r0, [pc, #616]	; (800973c <USBH_HandleEnum+0x3b4>)
 80094d4:	f010 ffbe 	bl	801a454 <iprintf>
 80094d8:	200a      	movs	r0, #10
 80094da:	f010 ffd3 	bl	801a484 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2202      	movs	r2, #2
 80094e2:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80094e4:	e227      	b.n	8009936 <USBH_HandleEnum+0x5ae>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	f040 8224 	bne.w	8009936 <USBH_HandleEnum+0x5ae>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 80094ee:	488f      	ldr	r0, [pc, #572]	; (800972c <USBH_HandleEnum+0x3a4>)
 80094f0:	f010 ffb0 	bl	801a454 <iprintf>
 80094f4:	4892      	ldr	r0, [pc, #584]	; (8009740 <USBH_HandleEnum+0x3b8>)
 80094f6:	f010 ffad 	bl	801a454 <iprintf>
 80094fa:	200a      	movs	r0, #10
 80094fc:	f010 ffc2 	bl	801a484 <putchar>
        phost->device.EnumCnt++;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009506:	3301      	adds	r3, #1
 8009508:	b2da      	uxtb	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009516:	2b03      	cmp	r3, #3
 8009518:	d909      	bls.n	800952e <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800951a:	4886      	ldr	r0, [pc, #536]	; (8009734 <USBH_HandleEnum+0x3ac>)
 800951c:	f010 ff9a 	bl	801a454 <iprintf>
 8009520:	200a      	movs	r0, #10
 8009522:	f010 ffaf 	bl	801a484 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	220d      	movs	r2, #13
 800952a:	701a      	strb	r2, [r3, #0]
      break;
 800952c:	e203      	b.n	8009936 <USBH_HandleEnum+0x5ae>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	795b      	ldrb	r3, [r3, #5]
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f001 f993 	bl	800a860 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	791b      	ldrb	r3, [r3, #4]
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f001 f98d 	bl	800a860 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	701a      	strb	r2, [r3, #0]
      break;
 8009552:	e1f0      	b.n	8009936 <USBH_HandleEnum+0x5ae>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009554:	2101      	movs	r1, #1
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fb9a 	bl	8009c90 <USBH_SetAddress>
 800955c:	4603      	mov	r3, r0
 800955e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d13c      	bne.n	80095e0 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 8009566:	2002      	movs	r0, #2
 8009568:	f010 fe11 	bl	801a18e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800957a:	4619      	mov	r1, r3
 800957c:	4871      	ldr	r0, [pc, #452]	; (8009744 <USBH_HandleEnum+0x3bc>)
 800957e:	f010 ff69 	bl	801a454 <iprintf>
 8009582:	200a      	movs	r0, #10
 8009584:	f010 ff7e 	bl	801a484 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2203      	movs	r2, #3
 800958c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7919      	ldrb	r1, [r3, #4]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80095a2:	b292      	uxth	r2, r2
 80095a4:	9202      	str	r2, [sp, #8]
 80095a6:	2200      	movs	r2, #0
 80095a8:	9201      	str	r2, [sp, #4]
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	4603      	mov	r3, r0
 80095ae:	2280      	movs	r2, #128	; 0x80
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f001 f905 	bl	800a7c0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	7959      	ldrb	r1, [r3, #5]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095ca:	b292      	uxth	r2, r2
 80095cc:	9202      	str	r2, [sp, #8]
 80095ce:	2200      	movs	r2, #0
 80095d0:	9201      	str	r2, [sp, #4]
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	4603      	mov	r3, r0
 80095d6:	2200      	movs	r2, #0
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f001 f8f1 	bl	800a7c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80095de:	e1ac      	b.n	800993a <USBH_HandleEnum+0x5b2>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	f040 81a9 	bne.w	800993a <USBH_HandleEnum+0x5b2>
        USBH_ErrLog("Control error: Device Set Address request failed");
 80095e8:	4850      	ldr	r0, [pc, #320]	; (800972c <USBH_HandleEnum+0x3a4>)
 80095ea:	f010 ff33 	bl	801a454 <iprintf>
 80095ee:	4856      	ldr	r0, [pc, #344]	; (8009748 <USBH_HandleEnum+0x3c0>)
 80095f0:	f010 ff30 	bl	801a454 <iprintf>
 80095f4:	200a      	movs	r0, #10
 80095f6:	f010 ff45 	bl	801a484 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80095fa:	484e      	ldr	r0, [pc, #312]	; (8009734 <USBH_HandleEnum+0x3ac>)
 80095fc:	f010 ff2a 	bl	801a454 <iprintf>
 8009600:	200a      	movs	r0, #10
 8009602:	f010 ff3f 	bl	801a484 <putchar>
        phost->gState = HOST_ABORT_STATE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	220d      	movs	r2, #13
 800960a:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	705a      	strb	r2, [r3, #1]
      break;
 8009612:	e192      	b.n	800993a <USBH_HandleEnum+0x5b2>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009614:	2109      	movs	r1, #9
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fab6 	bl	8009b88 <USBH_Get_CfgDesc>
 800961c:	4603      	mov	r3, r0
 800961e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009620:	7bbb      	ldrb	r3, [r7, #14]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d103      	bne.n	800962e <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2204      	movs	r2, #4
 800962a:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800962c:	e187      	b.n	800993e <USBH_HandleEnum+0x5b6>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800962e:	7bbb      	ldrb	r3, [r7, #14]
 8009630:	2b03      	cmp	r3, #3
 8009632:	f040 8184 	bne.w	800993e <USBH_HandleEnum+0x5b6>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8009636:	483d      	ldr	r0, [pc, #244]	; (800972c <USBH_HandleEnum+0x3a4>)
 8009638:	f010 ff0c 	bl	801a454 <iprintf>
 800963c:	4843      	ldr	r0, [pc, #268]	; (800974c <USBH_HandleEnum+0x3c4>)
 800963e:	f010 ff09 	bl	801a454 <iprintf>
 8009642:	200a      	movs	r0, #10
 8009644:	f010 ff1e 	bl	801a484 <putchar>
        phost->device.EnumCnt++;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800964e:	3301      	adds	r3, #1
 8009650:	b2da      	uxtb	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800965e:	2b03      	cmp	r3, #3
 8009660:	d909      	bls.n	8009676 <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8009662:	4834      	ldr	r0, [pc, #208]	; (8009734 <USBH_HandleEnum+0x3ac>)
 8009664:	f010 fef6 	bl	801a454 <iprintf>
 8009668:	200a      	movs	r0, #10
 800966a:	f010 ff0b 	bl	801a484 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	220d      	movs	r2, #13
 8009672:	701a      	strb	r2, [r3, #0]
      break;
 8009674:	e163      	b.n	800993e <USBH_HandleEnum+0x5b6>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	795b      	ldrb	r3, [r3, #5]
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f001 f8ef 	bl	800a860 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	791b      	ldrb	r3, [r3, #4]
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f001 f8e9 	bl	800a860 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	701a      	strb	r2, [r3, #0]
      break;
 800969a:	e150      	b.n	800993e <USBH_HandleEnum+0x5b6>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80096a2:	4619      	mov	r1, r3
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fa6f 	bl	8009b88 <USBH_Get_CfgDesc>
 80096aa:	4603      	mov	r3, r0
 80096ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d103      	bne.n	80096bc <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2205      	movs	r2, #5
 80096b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80096ba:	e142      	b.n	8009942 <USBH_HandleEnum+0x5ba>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	2b03      	cmp	r3, #3
 80096c0:	f040 813f 	bne.w	8009942 <USBH_HandleEnum+0x5ba>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 80096c4:	4819      	ldr	r0, [pc, #100]	; (800972c <USBH_HandleEnum+0x3a4>)
 80096c6:	f010 fec5 	bl	801a454 <iprintf>
 80096ca:	4820      	ldr	r0, [pc, #128]	; (800974c <USBH_HandleEnum+0x3c4>)
 80096cc:	f010 fec2 	bl	801a454 <iprintf>
 80096d0:	200a      	movs	r0, #10
 80096d2:	f010 fed7 	bl	801a484 <putchar>
        phost->device.EnumCnt++;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80096dc:	3301      	adds	r3, #1
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80096ec:	2b03      	cmp	r3, #3
 80096ee:	d909      	bls.n	8009704 <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80096f0:	4810      	ldr	r0, [pc, #64]	; (8009734 <USBH_HandleEnum+0x3ac>)
 80096f2:	f010 feaf 	bl	801a454 <iprintf>
 80096f6:	200a      	movs	r0, #10
 80096f8:	f010 fec4 	bl	801a484 <putchar>
          phost->gState = HOST_ABORT_STATE;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	220d      	movs	r2, #13
 8009700:	701a      	strb	r2, [r3, #0]
      break;
 8009702:	e11e      	b.n	8009942 <USBH_HandleEnum+0x5ba>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	795b      	ldrb	r3, [r3, #5]
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f001 f8a8 	bl	800a860 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	791b      	ldrb	r3, [r3, #4]
 8009714:	4619      	mov	r1, r3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f001 f8a2 	bl	800a860 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	701a      	strb	r2, [r3, #0]
      break;
 8009728:	e10b      	b.n	8009942 <USBH_HandleEnum+0x5ba>
 800972a:	bf00      	nop
 800972c:	0801b69c 	.word	0x0801b69c
 8009730:	0801b934 	.word	0x0801b934
 8009734:	0801b968 	.word	0x0801b968
 8009738:	0801b9a8 	.word	0x0801b9a8
 800973c:	0801b9b4 	.word	0x0801b9b4
 8009740:	0801b9c0 	.word	0x0801b9c0
 8009744:	0801b9fc 	.word	0x0801b9fc
 8009748:	0801ba14 	.word	0x0801ba14
 800974c:	0801ba48 	.word	0x0801ba48

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009756:	2b00      	cmp	r3, #0
 8009758:	d046      	beq.n	80097e8 <USBH_HandleEnum+0x460>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009766:	23ff      	movs	r3, #255	; 0xff
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fa31 	bl	8009bd0 <USBH_Get_StringDesc>
 800976e:	4603      	mov	r3, r0
 8009770:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d11b      	bne.n	80097b0 <USBH_HandleEnum+0x428>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800977e:	4619      	mov	r1, r3
 8009780:	4876      	ldr	r0, [pc, #472]	; (800995c <USBH_HandleEnum+0x5d4>)
 8009782:	f010 fe67 	bl	801a454 <iprintf>
 8009786:	200a      	movs	r0, #10
 8009788:	f010 fe7c 	bl	801a484 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2206      	movs	r2, #6
 8009790:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2205      	movs	r2, #5
 8009796:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80097a6:	2200      	movs	r2, #0
 80097a8:	4619      	mov	r1, r3
 80097aa:	f001 fb11 	bl	800add0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80097ae:	e0ca      	b.n	8009946 <USBH_HandleEnum+0x5be>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
 80097b2:	2b03      	cmp	r3, #3
 80097b4:	f040 80c7 	bne.w	8009946 <USBH_HandleEnum+0x5be>
          USBH_UsrLog("Manufacturer : N/A");
 80097b8:	4869      	ldr	r0, [pc, #420]	; (8009960 <USBH_HandleEnum+0x5d8>)
 80097ba:	f010 fe4b 	bl	801a454 <iprintf>
 80097be:	200a      	movs	r0, #10
 80097c0:	f010 fe60 	bl	801a484 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2206      	movs	r2, #6
 80097c8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2205      	movs	r2, #5
 80097ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80097de:	2200      	movs	r2, #0
 80097e0:	4619      	mov	r1, r3
 80097e2:	f001 faf5 	bl	800add0 <osMessagePut>
      break;
 80097e6:	e0ae      	b.n	8009946 <USBH_HandleEnum+0x5be>
        USBH_UsrLog("Manufacturer : N/A");
 80097e8:	485d      	ldr	r0, [pc, #372]	; (8009960 <USBH_HandleEnum+0x5d8>)
 80097ea:	f010 fe33 	bl	801a454 <iprintf>
 80097ee:	200a      	movs	r0, #10
 80097f0:	f010 fe48 	bl	801a484 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2206      	movs	r2, #6
 80097f8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2205      	movs	r2, #5
 80097fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800980e:	2200      	movs	r2, #0
 8009810:	4619      	mov	r1, r3
 8009812:	f001 fadd 	bl	800add0 <osMessagePut>
      break;
 8009816:	e096      	b.n	8009946 <USBH_HandleEnum+0x5be>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800981e:	2b00      	cmp	r3, #0
 8009820:	d037      	beq.n	8009892 <USBH_HandleEnum+0x50a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800982e:	23ff      	movs	r3, #255	; 0xff
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f9cd 	bl	8009bd0 <USBH_Get_StringDesc>
 8009836:	4603      	mov	r3, r0
 8009838:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800983a:	7bbb      	ldrb	r3, [r7, #14]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10d      	bne.n	800985c <USBH_HandleEnum+0x4d4>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009846:	4619      	mov	r1, r3
 8009848:	4846      	ldr	r0, [pc, #280]	; (8009964 <USBH_HandleEnum+0x5dc>)
 800984a:	f010 fe03 	bl	801a454 <iprintf>
 800984e:	200a      	movs	r0, #10
 8009850:	f010 fe18 	bl	801a484 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2207      	movs	r2, #7
 8009858:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800985a:	e076      	b.n	800994a <USBH_HandleEnum+0x5c2>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800985c:	7bbb      	ldrb	r3, [r7, #14]
 800985e:	2b03      	cmp	r3, #3
 8009860:	d173      	bne.n	800994a <USBH_HandleEnum+0x5c2>
          USBH_UsrLog("Product : N/A");
 8009862:	4841      	ldr	r0, [pc, #260]	; (8009968 <USBH_HandleEnum+0x5e0>)
 8009864:	f010 fdf6 	bl	801a454 <iprintf>
 8009868:	200a      	movs	r0, #10
 800986a:	f010 fe0b 	bl	801a484 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2207      	movs	r2, #7
 8009872:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2205      	movs	r2, #5
 8009878:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009888:	2200      	movs	r2, #0
 800988a:	4619      	mov	r1, r3
 800988c:	f001 faa0 	bl	800add0 <osMessagePut>
      break;
 8009890:	e05b      	b.n	800994a <USBH_HandleEnum+0x5c2>
        USBH_UsrLog("Product : N/A");
 8009892:	4835      	ldr	r0, [pc, #212]	; (8009968 <USBH_HandleEnum+0x5e0>)
 8009894:	f010 fdde 	bl	801a454 <iprintf>
 8009898:	200a      	movs	r0, #10
 800989a:	f010 fdf3 	bl	801a484 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2207      	movs	r2, #7
 80098a2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2205      	movs	r2, #5
 80098a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80098b8:	2200      	movs	r2, #0
 80098ba:	4619      	mov	r1, r3
 80098bc:	f001 fa88 	bl	800add0 <osMessagePut>
      break;
 80098c0:	e043      	b.n	800994a <USBH_HandleEnum+0x5c2>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d027      	beq.n	800991c <USBH_HandleEnum+0x594>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80098d8:	23ff      	movs	r3, #255	; 0xff
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 f978 	bl	8009bd0 <USBH_Get_StringDesc>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10c      	bne.n	8009904 <USBH_HandleEnum+0x57c>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80098f0:	4619      	mov	r1, r3
 80098f2:	481e      	ldr	r0, [pc, #120]	; (800996c <USBH_HandleEnum+0x5e4>)
 80098f4:	f010 fdae 	bl	801a454 <iprintf>
 80098f8:	200a      	movs	r0, #10
 80098fa:	f010 fdc3 	bl	801a484 <putchar>
          Status = USBH_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009902:	e024      	b.n	800994e <USBH_HandleEnum+0x5c6>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009904:	7bbb      	ldrb	r3, [r7, #14]
 8009906:	2b03      	cmp	r3, #3
 8009908:	d121      	bne.n	800994e <USBH_HandleEnum+0x5c6>
          USBH_UsrLog("Serial Number : N/A");
 800990a:	4819      	ldr	r0, [pc, #100]	; (8009970 <USBH_HandleEnum+0x5e8>)
 800990c:	f010 fda2 	bl	801a454 <iprintf>
 8009910:	200a      	movs	r0, #10
 8009912:	f010 fdb7 	bl	801a484 <putchar>
          Status = USBH_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]
      break;
 800991a:	e018      	b.n	800994e <USBH_HandleEnum+0x5c6>
        USBH_UsrLog("Serial Number : N/A");
 800991c:	4814      	ldr	r0, [pc, #80]	; (8009970 <USBH_HandleEnum+0x5e8>)
 800991e:	f010 fd99 	bl	801a454 <iprintf>
 8009922:	200a      	movs	r0, #10
 8009924:	f010 fdae 	bl	801a484 <putchar>
        Status = USBH_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	73fb      	strb	r3, [r7, #15]
      break;
 800992c:	e00f      	b.n	800994e <USBH_HandleEnum+0x5c6>

    default:
      break;
 800992e:	bf00      	nop
 8009930:	e00e      	b.n	8009950 <USBH_HandleEnum+0x5c8>
      break;
 8009932:	bf00      	nop
 8009934:	e00c      	b.n	8009950 <USBH_HandleEnum+0x5c8>
      break;
 8009936:	bf00      	nop
 8009938:	e00a      	b.n	8009950 <USBH_HandleEnum+0x5c8>
      break;
 800993a:	bf00      	nop
 800993c:	e008      	b.n	8009950 <USBH_HandleEnum+0x5c8>
      break;
 800993e:	bf00      	nop
 8009940:	e006      	b.n	8009950 <USBH_HandleEnum+0x5c8>
      break;
 8009942:	bf00      	nop
 8009944:	e004      	b.n	8009950 <USBH_HandleEnum+0x5c8>
      break;
 8009946:	bf00      	nop
 8009948:	e002      	b.n	8009950 <USBH_HandleEnum+0x5c8>
      break;
 800994a:	bf00      	nop
 800994c:	e000      	b.n	8009950 <USBH_HandleEnum+0x5c8>
      break;
 800994e:	bf00      	nop
  }
  return Status;
 8009950:	7bfb      	ldrb	r3, [r7, #15]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	0801ba8c 	.word	0x0801ba8c
 8009960:	0801baa0 	.word	0x0801baa0
 8009964:	0801bab4 	.word	0x0801bab4
 8009968:	0801bac4 	.word	0x0801bac4
 800996c:	0801bad4 	.word	0x0801bad4
 8009970:	0801bae8 	.word	0x0801bae8

08009974 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009986:	bf00      	nop
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b082      	sub	sp, #8
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80099a0:	1c5a      	adds	r2, r3, #1
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f804 	bl	80099b6 <USBH_HandleSof>
}
 80099ae:	bf00      	nop
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b082      	sub	sp, #8
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b0b      	cmp	r3, #11
 80099c6:	d10a      	bne.n	80099de <USBH_HandleSof+0x28>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d005      	beq.n	80099de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	4798      	blx	r3
  }
}
 80099de:	bf00      	nop
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	f001 f9df 	bl	800add0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009a12:	bf00      	nop
}
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009a1a:	b480      	push	{r7}
 8009a1c:	b083      	sub	sp, #12
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009a2a:	bf00      	nop
}
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b082      	sub	sp, #8
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	f001 f9af 	bl	800add0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f010 fa06 	bl	8019eae <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	791b      	ldrb	r3, [r3, #4]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fed9 	bl	800a860 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	795b      	ldrb	r3, [r3, #5]
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fed3 	bl	800a860 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ace:	2200      	movs	r2, #0
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	f001 f97d 	bl	800add0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8009aee:	f107 030c 	add.w	r3, r7, #12
 8009af2:	f04f 32ff 	mov.w	r2, #4294967295
 8009af6:	4618      	mov	r0, r3
 8009af8:	f001 f9aa 	bl	800ae50 <osMessageGet>
    if (event.status == osEventMessage)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b10      	cmp	r3, #16
 8009b00:	d1f2      	bne.n	8009ae8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7ff f95a 	bl	8008dbc <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009b08:	e7ee      	b.n	8009ae8 <USBH_Process_OS+0x8>

08009b0a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009b26:	2200      	movs	r2, #0
 8009b28:	4619      	mov	r1, r3
 8009b2a:	f001 f951 	bl	800add0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af02      	add	r7, sp, #8
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	460b      	mov	r3, r1
 8009b42:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009b4a:	78fb      	ldrb	r3, [r7, #3]
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	4613      	mov	r3, r2
 8009b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b56:	2100      	movs	r1, #0
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f864 	bl	8009c26 <USBH_GetDescriptor>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	73fb      	strb	r3, [r7, #15]
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10a      	bne.n	8009b7e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009b74:	78fa      	ldrb	r2, [r7, #3]
 8009b76:	b292      	uxth	r2, r2
 8009b78:	4619      	mov	r1, r3
 8009b7a:	f000 f918 	bl	8009dae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b086      	sub	sp, #24
 8009b8c:	af02      	add	r7, sp, #8
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	331c      	adds	r3, #28
 8009b98:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009b9a:	887b      	ldrh	r3, [r7, #2]
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f83d 	bl	8009c26 <USBH_GetDescriptor>
 8009bac:	4603      	mov	r3, r0
 8009bae:	72fb      	strb	r3, [r7, #11]
 8009bb0:	7afb      	ldrb	r3, [r7, #11]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d107      	bne.n	8009bc6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009bbc:	887a      	ldrh	r2, [r7, #2]
 8009bbe:	68f9      	ldr	r1, [r7, #12]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 f964 	bl	8009e8e <USBH_ParseCfgDesc>
  }

  return status;
 8009bc6:	7afb      	ldrb	r3, [r7, #11]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b088      	sub	sp, #32
 8009bd4:	af02      	add	r7, sp, #8
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	607a      	str	r2, [r7, #4]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	460b      	mov	r3, r1
 8009bde:	72fb      	strb	r3, [r7, #11]
 8009be0:	4613      	mov	r3, r2
 8009be2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009be4:	7afb      	ldrb	r3, [r7, #11]
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009bec:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009bf4:	893b      	ldrh	r3, [r7, #8]
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 f812 	bl	8009c26 <USBH_GetDescriptor>
 8009c02:	4603      	mov	r3, r0
 8009c04:	75fb      	strb	r3, [r7, #23]
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d107      	bne.n	8009c1c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009c12:	893a      	ldrh	r2, [r7, #8]
 8009c14:	6879      	ldr	r1, [r7, #4]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 fa37 	bl	800a08a <USBH_ParseStringDesc>
  }

  return status;
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	607b      	str	r3, [r7, #4]
 8009c30:	460b      	mov	r3, r1
 8009c32:	72fb      	strb	r3, [r7, #11]
 8009c34:	4613      	mov	r3, r2
 8009c36:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	789b      	ldrb	r3, [r3, #2]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d11c      	bne.n	8009c7a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009c40:	7afb      	ldrb	r3, [r7, #11]
 8009c42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2206      	movs	r2, #6
 8009c50:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	893a      	ldrh	r2, [r7, #8]
 8009c56:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009c58:	893b      	ldrh	r3, [r7, #8]
 8009c5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c62:	d104      	bne.n	8009c6e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f240 4209 	movw	r2, #1033	; 0x409
 8009c6a:	829a      	strh	r2, [r3, #20]
 8009c6c:	e002      	b.n	8009c74 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	8b3a      	ldrh	r2, [r7, #24]
 8009c78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009c7a:	8b3b      	ldrh	r3, [r7, #24]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	6879      	ldr	r1, [r7, #4]
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 fa50 	bl	800a126 <USBH_CtlReq>
 8009c86:	4603      	mov	r3, r0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	789b      	ldrb	r3, [r3, #2]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d10f      	bne.n	8009cc4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2205      	movs	r2, #5
 8009cae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fa2c 	bl	800a126 <USBH_CtlReq>
 8009cce:	4603      	mov	r3, r0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	789b      	ldrb	r3, [r3, #2]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d10e      	bne.n	8009d0a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2209      	movs	r2, #9
 8009cf6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	887a      	ldrh	r2, [r7, #2]
 8009cfc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fa09 	bl	800a126 <USBH_CtlReq>
 8009d14:	4603      	mov	r3, r0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	460b      	mov	r3, r1
 8009d28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	789b      	ldrb	r3, [r3, #2]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d10f      	bne.n	8009d52 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2203      	movs	r2, #3
 8009d3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009d3e:	78fb      	ldrb	r3, [r7, #3]
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009d52:	2200      	movs	r2, #0
 8009d54:	2100      	movs	r1, #0
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f9e5 	bl	800a126 <USBH_CtlReq>
 8009d5c:	4603      	mov	r3, r0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	789b      	ldrb	r3, [r3, #2]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d10f      	bne.n	8009d9a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009d8c:	78fb      	ldrb	r3, [r7, #3]
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f9c1 	bl	800a126 <USBH_CtlReq>
 8009da4:	4603      	mov	r3, r0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b085      	sub	sp, #20
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	60f8      	str	r0, [r7, #12]
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	4613      	mov	r3, r2
 8009dba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	781a      	ldrb	r2, [r3, #0]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	785a      	ldrb	r2, [r3, #1]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	3302      	adds	r3, #2
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	3303      	adds	r3, #3
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	021b      	lsls	r3, r3, #8
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	4313      	orrs	r3, r2
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	791a      	ldrb	r2, [r3, #4]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	795a      	ldrb	r2, [r3, #5]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	799a      	ldrb	r2, [r3, #6]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	79da      	ldrb	r2, [r3, #7]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009e08:	88fb      	ldrh	r3, [r7, #6]
 8009e0a:	2b08      	cmp	r3, #8
 8009e0c:	d939      	bls.n	8009e82 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	3308      	adds	r3, #8
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	3309      	adds	r3, #9
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	021b      	lsls	r3, r3, #8
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	4313      	orrs	r3, r2
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	330a      	adds	r3, #10
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	330b      	adds	r3, #11
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	021b      	lsls	r3, r3, #8
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	330c      	adds	r3, #12
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	330d      	adds	r3, #13
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	021b      	lsls	r3, r3, #8
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	7b9a      	ldrb	r2, [r3, #14]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	7bda      	ldrb	r2, [r3, #15]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	7c1a      	ldrb	r2, [r3, #16]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	7c5a      	ldrb	r2, [r3, #17]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	745a      	strb	r2, [r3, #17]
  }
}
 8009e82:	bf00      	nop
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b08a      	sub	sp, #40	; 0x28
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	60f8      	str	r0, [r7, #12]
 8009e96:	60b9      	str	r1, [r7, #8]
 8009e98:	4613      	mov	r3, r2
 8009e9a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	781a      	ldrb	r2, [r3, #0]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	785a      	ldrb	r2, [r3, #1]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	3302      	adds	r3, #2
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	3303      	adds	r3, #3
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	021b      	lsls	r3, r3, #8
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	791a      	ldrb	r2, [r3, #4]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	795a      	ldrb	r2, [r3, #5]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	799a      	ldrb	r2, [r3, #6]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	79da      	ldrb	r2, [r3, #7]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	7a1a      	ldrb	r2, [r3, #8]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009f04:	88fb      	ldrh	r3, [r7, #6]
 8009f06:	2b09      	cmp	r3, #9
 8009f08:	d95f      	bls.n	8009fca <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009f0a:	2309      	movs	r3, #9
 8009f0c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009f12:	e051      	b.n	8009fb8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009f14:	f107 0316 	add.w	r3, r7, #22
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f1c:	f000 f8e8 	bl	800a0f0 <USBH_GetNextDesc>
 8009f20:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f24:	785b      	ldrb	r3, [r3, #1]
 8009f26:	2b04      	cmp	r3, #4
 8009f28:	d146      	bne.n	8009fb8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009f2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f2e:	221a      	movs	r2, #26
 8009f30:	fb02 f303 	mul.w	r3, r2, r3
 8009f34:	3308      	adds	r3, #8
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	4413      	add	r3, r2
 8009f3a:	3302      	adds	r3, #2
 8009f3c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009f3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f40:	69f8      	ldr	r0, [r7, #28]
 8009f42:	f000 f846 	bl	8009fd2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009f46:	2300      	movs	r3, #0
 8009f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009f50:	e022      	b.n	8009f98 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009f52:	f107 0316 	add.w	r3, r7, #22
 8009f56:	4619      	mov	r1, r3
 8009f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f5a:	f000 f8c9 	bl	800a0f0 <USBH_GetNextDesc>
 8009f5e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f62:	785b      	ldrb	r3, [r3, #1]
 8009f64:	2b05      	cmp	r3, #5
 8009f66:	d117      	bne.n	8009f98 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009f70:	3201      	adds	r2, #1
 8009f72:	00d2      	lsls	r2, r2, #3
 8009f74:	211a      	movs	r1, #26
 8009f76:	fb01 f303 	mul.w	r3, r1, r3
 8009f7a:	4413      	add	r3, r2
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	3304      	adds	r3, #4
 8009f84:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009f86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f88:	69b8      	ldr	r0, [r7, #24]
 8009f8a:	f000 f851 	bl	800a030 <USBH_ParseEPDesc>
            ep_ix++;
 8009f8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009f92:	3301      	adds	r3, #1
 8009f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	791b      	ldrb	r3, [r3, #4]
 8009f9c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d204      	bcs.n	8009fae <USBH_ParseCfgDesc+0x120>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	885a      	ldrh	r2, [r3, #2]
 8009fa8:	8afb      	ldrh	r3, [r7, #22]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d8d1      	bhi.n	8009f52 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009fae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d804      	bhi.n	8009fca <USBH_ParseCfgDesc+0x13c>
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	885a      	ldrh	r2, [r3, #2]
 8009fc4:	8afb      	ldrh	r3, [r7, #22]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d8a4      	bhi.n	8009f14 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009fca:	bf00      	nop
 8009fcc:	3728      	adds	r7, #40	; 0x28
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b083      	sub	sp, #12
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	781a      	ldrb	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	785a      	ldrb	r2, [r3, #1]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	789a      	ldrb	r2, [r3, #2]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	78da      	ldrb	r2, [r3, #3]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	791a      	ldrb	r2, [r3, #4]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	795a      	ldrb	r2, [r3, #5]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	799a      	ldrb	r2, [r3, #6]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	79da      	ldrb	r2, [r3, #7]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	7a1a      	ldrb	r2, [r3, #8]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	721a      	strb	r2, [r3, #8]
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	781a      	ldrb	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	785a      	ldrb	r2, [r3, #1]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	789a      	ldrb	r2, [r3, #2]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	78da      	ldrb	r2, [r3, #3]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	3304      	adds	r3, #4
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	b29a      	uxth	r2, r3
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	3305      	adds	r3, #5
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	b29b      	uxth	r3, r3
 800a06a:	021b      	lsls	r3, r3, #8
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	4313      	orrs	r3, r2
 800a070:	b29a      	uxth	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	799a      	ldrb	r2, [r3, #6]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	719a      	strb	r2, [r3, #6]
}
 800a07e:	bf00      	nop
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b087      	sub	sp, #28
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	4613      	mov	r3, r2
 800a096:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3301      	adds	r3, #1
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d120      	bne.n	800a0e4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	1e9a      	subs	r2, r3, #2
 800a0a8:	88fb      	ldrh	r3, [r7, #6]
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	bf28      	it	cs
 800a0ae:	4613      	movcs	r3, r2
 800a0b0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3302      	adds	r3, #2
 800a0b6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	82fb      	strh	r3, [r7, #22]
 800a0bc:	e00b      	b.n	800a0d6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a0be:	8afb      	ldrh	r3, [r7, #22]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	781a      	ldrb	r2, [r3, #0]
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a0d0:	8afb      	ldrh	r3, [r7, #22]
 800a0d2:	3302      	adds	r3, #2
 800a0d4:	82fb      	strh	r3, [r7, #22]
 800a0d6:	8afa      	ldrh	r2, [r7, #22]
 800a0d8:	8abb      	ldrh	r3, [r7, #20]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d3ef      	bcc.n	800a0be <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	701a      	strb	r2, [r3, #0]
  }
}
 800a0e4:	bf00      	nop
 800a0e6:	371c      	adds	r7, #28
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	881a      	ldrh	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	b29b      	uxth	r3, r3
 800a104:	4413      	add	r3, r2
 800a106:	b29a      	uxth	r2, r3
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4413      	add	r3, r2
 800a116:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a118:	68fb      	ldr	r3, [r7, #12]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b086      	sub	sp, #24
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	60f8      	str	r0, [r7, #12]
 800a12e:	60b9      	str	r1, [r7, #8]
 800a130:	4613      	mov	r3, r2
 800a132:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a134:	2301      	movs	r3, #1
 800a136:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	789b      	ldrb	r3, [r3, #2]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d002      	beq.n	800a146 <USBH_CtlReq+0x20>
 800a140:	2b02      	cmp	r3, #2
 800a142:	d01d      	beq.n	800a180 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a144:	e043      	b.n	800a1ce <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	88fa      	ldrh	r2, [r7, #6]
 800a150:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2201      	movs	r2, #1
 800a156:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2202      	movs	r2, #2
 800a15c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a15e:	2301      	movs	r3, #1
 800a160:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2203      	movs	r2, #3
 800a166:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a176:	2200      	movs	r2, #0
 800a178:	4619      	mov	r1, r3
 800a17a:	f000 fe29 	bl	800add0 <osMessagePut>
      break;
 800a17e:	e026      	b.n	800a1ce <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f000 f829 	bl	800a1d8 <USBH_HandleControl>
 800a186:	4603      	mov	r3, r0
 800a188:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <USBH_CtlReq+0x70>
 800a190:	7dfb      	ldrb	r3, [r7, #23]
 800a192:	2b03      	cmp	r3, #3
 800a194:	d106      	bne.n	800a1a4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2201      	movs	r2, #1
 800a19a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	761a      	strb	r2, [r3, #24]
 800a1a2:	e005      	b.n	800a1b0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a1a4:	7dfb      	ldrb	r3, [r7, #23]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d102      	bne.n	800a1b0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2203      	movs	r2, #3
 800a1b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	f000 fe02 	bl	800add0 <osMessagePut>
      break;
 800a1cc:	bf00      	nop
  }
  return status;
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3718      	adds	r7, #24
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af02      	add	r7, sp, #8
 800a1de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	7e1b      	ldrb	r3, [r3, #24]
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	2b0a      	cmp	r3, #10
 800a1f0:	f200 8232 	bhi.w	800a658 <USBH_HandleControl+0x480>
 800a1f4:	a201      	add	r2, pc, #4	; (adr r2, 800a1fc <USBH_HandleControl+0x24>)
 800a1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fa:	bf00      	nop
 800a1fc:	0800a229 	.word	0x0800a229
 800a200:	0800a243 	.word	0x0800a243
 800a204:	0800a2e5 	.word	0x0800a2e5
 800a208:	0800a30b 	.word	0x0800a30b
 800a20c:	0800a397 	.word	0x0800a397
 800a210:	0800a3c1 	.word	0x0800a3c1
 800a214:	0800a483 	.word	0x0800a483
 800a218:	0800a4a5 	.word	0x0800a4a5
 800a21c:	0800a537 	.word	0x0800a537
 800a220:	0800a55d 	.word	0x0800a55d
 800a224:	0800a5ef 	.word	0x0800a5ef
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f103 0110 	add.w	r1, r3, #16
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	795b      	ldrb	r3, [r3, #5]
 800a232:	461a      	mov	r2, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fa23 	bl	800a680 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2202      	movs	r2, #2
 800a23e:	761a      	strb	r2, [r3, #24]
      break;
 800a240:	e215      	b.n	800a66e <USBH_HandleControl+0x496>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	795b      	ldrb	r3, [r3, #5]
 800a246:	4619      	mov	r1, r3
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f00f ff1f 	bl	801a08c <USBH_LL_GetURBState>
 800a24e:	4603      	mov	r3, r0
 800a250:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a252:	7bbb      	ldrb	r3, [r7, #14]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d12c      	bne.n	800a2b2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	7c1b      	ldrb	r3, [r3, #16]
 800a25c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a260:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	8adb      	ldrh	r3, [r3, #22]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00a      	beq.n	800a280 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a26a:	7b7b      	ldrb	r3, [r7, #13]
 800a26c:	2b80      	cmp	r3, #128	; 0x80
 800a26e:	d103      	bne.n	800a278 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2203      	movs	r2, #3
 800a274:	761a      	strb	r2, [r3, #24]
 800a276:	e00d      	b.n	800a294 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2205      	movs	r2, #5
 800a27c:	761a      	strb	r2, [r3, #24]
 800a27e:	e009      	b.n	800a294 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a280:	7b7b      	ldrb	r3, [r7, #13]
 800a282:	2b80      	cmp	r3, #128	; 0x80
 800a284:	d103      	bne.n	800a28e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2209      	movs	r2, #9
 800a28a:	761a      	strb	r2, [r3, #24]
 800a28c:	e002      	b.n	800a294 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2207      	movs	r2, #7
 800a292:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2203      	movs	r2, #3
 800a298:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	f000 fd90 	bl	800add0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a2b0:	e1d4      	b.n	800a65c <USBH_HandleControl+0x484>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a2b2:	7bbb      	ldrb	r3, [r7, #14]
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	d003      	beq.n	800a2c0 <USBH_HandleControl+0xe8>
 800a2b8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	f040 81ce 	bne.w	800a65c <USBH_HandleControl+0x484>
          phost->Control.state = CTRL_ERROR;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	220b      	movs	r2, #11
 800a2c4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2203      	movs	r2, #3
 800a2ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a2da:	2200      	movs	r2, #0
 800a2dc:	4619      	mov	r1, r3
 800a2de:	f000 fd77 	bl	800add0 <osMessagePut>
      break;
 800a2e2:	e1bb      	b.n	800a65c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6899      	ldr	r1, [r3, #8]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	899a      	ldrh	r2, [r3, #12]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	791b      	ldrb	r3, [r3, #4]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f9fe 	bl	800a6fe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2204      	movs	r2, #4
 800a306:	761a      	strb	r2, [r3, #24]
      break;
 800a308:	e1b1      	b.n	800a66e <USBH_HandleControl+0x496>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	791b      	ldrb	r3, [r3, #4]
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f00f febb 	bl	801a08c <USBH_LL_GetURBState>
 800a316:	4603      	mov	r3, r0
 800a318:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a31a:	7bbb      	ldrb	r3, [r7, #14]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d110      	bne.n	800a342 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2209      	movs	r2, #9
 800a324:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2203      	movs	r2, #3
 800a32a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a33a:	2200      	movs	r2, #0
 800a33c:	4619      	mov	r1, r3
 800a33e:	f000 fd47 	bl	800add0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	2b05      	cmp	r3, #5
 800a346:	d110      	bne.n	800a36a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a348:	2303      	movs	r3, #3
 800a34a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2203      	movs	r2, #3
 800a350:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a360:	2200      	movs	r2, #0
 800a362:	4619      	mov	r1, r3
 800a364:	f000 fd34 	bl	800add0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a368:	e17a      	b.n	800a660 <USBH_HandleControl+0x488>
        if (URB_Status == USBH_URB_ERROR)
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	f040 8177 	bne.w	800a660 <USBH_HandleControl+0x488>
          phost->Control.state = CTRL_ERROR;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	220b      	movs	r2, #11
 800a376:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2203      	movs	r2, #3
 800a37c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a38c:	2200      	movs	r2, #0
 800a38e:	4619      	mov	r1, r3
 800a390:	f000 fd1e 	bl	800add0 <osMessagePut>
      break;
 800a394:	e164      	b.n	800a660 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6899      	ldr	r1, [r3, #8]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	899a      	ldrh	r2, [r3, #12]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	795b      	ldrb	r3, [r3, #5]
 800a3a2:	2001      	movs	r0, #1
 800a3a4:	9000      	str	r0, [sp, #0]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f984 	bl	800a6b4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2206      	movs	r2, #6
 800a3bc:	761a      	strb	r2, [r3, #24]
      break;
 800a3be:	e156      	b.n	800a66e <USBH_HandleControl+0x496>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	795b      	ldrb	r3, [r3, #5]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f00f fe60 	bl	801a08c <USBH_LL_GetURBState>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a3d0:	7bbb      	ldrb	r3, [r7, #14]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d111      	bne.n	800a3fa <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2207      	movs	r2, #7
 800a3da:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2203      	movs	r2, #3
 800a3e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	f000 fcec 	bl	800add0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a3f8:	e134      	b.n	800a664 <USBH_HandleControl+0x48c>
      else if (URB_Status == USBH_URB_STALL)
 800a3fa:	7bbb      	ldrb	r3, [r7, #14]
 800a3fc:	2b05      	cmp	r3, #5
 800a3fe:	d113      	bne.n	800a428 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	220c      	movs	r2, #12
 800a404:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a406:	2303      	movs	r3, #3
 800a408:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2203      	movs	r2, #3
 800a40e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a41e:	2200      	movs	r2, #0
 800a420:	4619      	mov	r1, r3
 800a422:	f000 fcd5 	bl	800add0 <osMessagePut>
      break;
 800a426:	e11d      	b.n	800a664 <USBH_HandleControl+0x48c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a428:	7bbb      	ldrb	r3, [r7, #14]
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d111      	bne.n	800a452 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2205      	movs	r2, #5
 800a432:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2203      	movs	r2, #3
 800a438:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a448:	2200      	movs	r2, #0
 800a44a:	4619      	mov	r1, r3
 800a44c:	f000 fcc0 	bl	800add0 <osMessagePut>
      break;
 800a450:	e108      	b.n	800a664 <USBH_HandleControl+0x48c>
        if (URB_Status == USBH_URB_ERROR)
 800a452:	7bbb      	ldrb	r3, [r7, #14]
 800a454:	2b04      	cmp	r3, #4
 800a456:	f040 8105 	bne.w	800a664 <USBH_HandleControl+0x48c>
          phost->Control.state = CTRL_ERROR;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	220b      	movs	r2, #11
 800a45e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a460:	2302      	movs	r3, #2
 800a462:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2203      	movs	r2, #3
 800a468:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a478:	2200      	movs	r2, #0
 800a47a:	4619      	mov	r1, r3
 800a47c:	f000 fca8 	bl	800add0 <osMessagePut>
      break;
 800a480:	e0f0      	b.n	800a664 <USBH_HandleControl+0x48c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	791b      	ldrb	r3, [r3, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	2100      	movs	r1, #0
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f937 	bl	800a6fe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a496:	b29a      	uxth	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2208      	movs	r2, #8
 800a4a0:	761a      	strb	r2, [r3, #24]

      break;
 800a4a2:	e0e4      	b.n	800a66e <USBH_HandleControl+0x496>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	791b      	ldrb	r3, [r3, #4]
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f00f fdee 	bl	801a08c <USBH_LL_GetURBState>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d113      	bne.n	800a4e2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	220d      	movs	r2, #13
 800a4be:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2203      	movs	r2, #3
 800a4c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a4d8:	2200      	movs	r2, #0
 800a4da:	4619      	mov	r1, r3
 800a4dc:	f000 fc78 	bl	800add0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a4e0:	e0c2      	b.n	800a668 <USBH_HandleControl+0x490>
      else if (URB_Status == USBH_URB_ERROR)
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d111      	bne.n	800a50c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	220b      	movs	r2, #11
 800a4ec:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2203      	movs	r2, #3
 800a4f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a502:	2200      	movs	r2, #0
 800a504:	4619      	mov	r1, r3
 800a506:	f000 fc63 	bl	800add0 <osMessagePut>
      break;
 800a50a:	e0ad      	b.n	800a668 <USBH_HandleControl+0x490>
        if (URB_Status == USBH_URB_STALL)
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
 800a50e:	2b05      	cmp	r3, #5
 800a510:	f040 80aa 	bne.w	800a668 <USBH_HandleControl+0x490>
          status = USBH_NOT_SUPPORTED;
 800a514:	2303      	movs	r3, #3
 800a516:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2203      	movs	r2, #3
 800a51c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a52c:	2200      	movs	r2, #0
 800a52e:	4619      	mov	r1, r3
 800a530:	f000 fc4e 	bl	800add0 <osMessagePut>
      break;
 800a534:	e098      	b.n	800a668 <USBH_HandleControl+0x490>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	795b      	ldrb	r3, [r3, #5]
 800a53a:	2201      	movs	r2, #1
 800a53c:	9200      	str	r2, [sp, #0]
 800a53e:	2200      	movs	r2, #0
 800a540:	2100      	movs	r1, #0
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f8b6 	bl	800a6b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a54e:	b29a      	uxth	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	220a      	movs	r2, #10
 800a558:	761a      	strb	r2, [r3, #24]
      break;
 800a55a:	e088      	b.n	800a66e <USBH_HandleControl+0x496>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	795b      	ldrb	r3, [r3, #5]
 800a560:	4619      	mov	r1, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f00f fd92 	bl	801a08c <USBH_LL_GetURBState>
 800a568:	4603      	mov	r3, r0
 800a56a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d113      	bne.n	800a59a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	220d      	movs	r2, #13
 800a57a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2203      	movs	r2, #3
 800a580:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a590:	2200      	movs	r2, #0
 800a592:	4619      	mov	r1, r3
 800a594:	f000 fc1c 	bl	800add0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a598:	e068      	b.n	800a66c <USBH_HandleControl+0x494>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a59a:	7bbb      	ldrb	r3, [r7, #14]
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	d111      	bne.n	800a5c4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2209      	movs	r2, #9
 800a5a4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2203      	movs	r2, #3
 800a5aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	4619      	mov	r1, r3
 800a5be:	f000 fc07 	bl	800add0 <osMessagePut>
      break;
 800a5c2:	e053      	b.n	800a66c <USBH_HandleControl+0x494>
        if (URB_Status == USBH_URB_ERROR)
 800a5c4:	7bbb      	ldrb	r3, [r7, #14]
 800a5c6:	2b04      	cmp	r3, #4
 800a5c8:	d150      	bne.n	800a66c <USBH_HandleControl+0x494>
          phost->Control.state = CTRL_ERROR;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	220b      	movs	r2, #11
 800a5ce:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2203      	movs	r2, #3
 800a5d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	f000 fbf2 	bl	800add0 <osMessagePut>
      break;
 800a5ec:	e03e      	b.n	800a66c <USBH_HandleControl+0x494>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	7e5b      	ldrb	r3, [r3, #25]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	765a      	strb	r2, [r3, #25]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	7e5b      	ldrb	r3, [r3, #25]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d806      	bhi.n	800a610 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a60e:	e02e      	b.n	800a66e <USBH_HandleControl+0x496>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a616:	2106      	movs	r1, #6
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800a622:	4815      	ldr	r0, [pc, #84]	; (800a678 <USBH_HandleControl+0x4a0>)
 800a624:	f00f ff16 	bl	801a454 <iprintf>
 800a628:	4814      	ldr	r0, [pc, #80]	; (800a67c <USBH_HandleControl+0x4a4>)
 800a62a:	f00f ff13 	bl	801a454 <iprintf>
 800a62e:	200a      	movs	r0, #10
 800a630:	f00f ff28 	bl	801a484 <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	795b      	ldrb	r3, [r3, #5]
 800a638:	4619      	mov	r1, r3
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 f910 	bl	800a860 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	791b      	ldrb	r3, [r3, #4]
 800a644:	4619      	mov	r1, r3
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f90a 	bl	800a860 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a652:	2302      	movs	r3, #2
 800a654:	73fb      	strb	r3, [r7, #15]
      break;
 800a656:	e00a      	b.n	800a66e <USBH_HandleControl+0x496>

    default:
      break;
 800a658:	bf00      	nop
 800a65a:	e008      	b.n	800a66e <USBH_HandleControl+0x496>
      break;
 800a65c:	bf00      	nop
 800a65e:	e006      	b.n	800a66e <USBH_HandleControl+0x496>
      break;
 800a660:	bf00      	nop
 800a662:	e004      	b.n	800a66e <USBH_HandleControl+0x496>
      break;
 800a664:	bf00      	nop
 800a666:	e002      	b.n	800a66e <USBH_HandleControl+0x496>
      break;
 800a668:	bf00      	nop
 800a66a:	e000      	b.n	800a66e <USBH_HandleControl+0x496>
      break;
 800a66c:	bf00      	nop
  }

  return status;
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	0801bafc 	.word	0x0801bafc
 800a67c:	0801bb04 	.word	0x0801bb04

0800a680 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b088      	sub	sp, #32
 800a684:	af04      	add	r7, sp, #16
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	4613      	mov	r3, r2
 800a68c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a68e:	79f9      	ldrb	r1, [r7, #7]
 800a690:	2300      	movs	r3, #0
 800a692:	9303      	str	r3, [sp, #12]
 800a694:	2308      	movs	r3, #8
 800a696:	9302      	str	r3, [sp, #8]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	9301      	str	r3, [sp, #4]
 800a69c:	2300      	movs	r3, #0
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f00f fcc0 	bl	801a02a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b088      	sub	sp, #32
 800a6b8:	af04      	add	r7, sp, #16
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	4611      	mov	r1, r2
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	80fb      	strh	r3, [r7, #6]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a6d8:	7979      	ldrb	r1, [r7, #5]
 800a6da:	7e3b      	ldrb	r3, [r7, #24]
 800a6dc:	9303      	str	r3, [sp, #12]
 800a6de:	88fb      	ldrh	r3, [r7, #6]
 800a6e0:	9302      	str	r3, [sp, #8]
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f00f fc9b 	bl	801a02a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b088      	sub	sp, #32
 800a702:	af04      	add	r7, sp, #16
 800a704:	60f8      	str	r0, [r7, #12]
 800a706:	60b9      	str	r1, [r7, #8]
 800a708:	4611      	mov	r1, r2
 800a70a:	461a      	mov	r2, r3
 800a70c:	460b      	mov	r3, r1
 800a70e:	80fb      	strh	r3, [r7, #6]
 800a710:	4613      	mov	r3, r2
 800a712:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a714:	7979      	ldrb	r1, [r7, #5]
 800a716:	2300      	movs	r3, #0
 800a718:	9303      	str	r3, [sp, #12]
 800a71a:	88fb      	ldrh	r3, [r7, #6]
 800a71c:	9302      	str	r3, [sp, #8]
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	2301      	movs	r3, #1
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	2300      	movs	r3, #0
 800a728:	2201      	movs	r2, #1
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f00f fc7d 	bl	801a02a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a730:	2300      	movs	r3, #0

}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b088      	sub	sp, #32
 800a73e:	af04      	add	r7, sp, #16
 800a740:	60f8      	str	r0, [r7, #12]
 800a742:	60b9      	str	r1, [r7, #8]
 800a744:	4611      	mov	r1, r2
 800a746:	461a      	mov	r2, r3
 800a748:	460b      	mov	r3, r1
 800a74a:	80fb      	strh	r3, [r7, #6]
 800a74c:	4613      	mov	r3, r2
 800a74e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a75a:	2300      	movs	r3, #0
 800a75c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a75e:	7979      	ldrb	r1, [r7, #5]
 800a760:	7e3b      	ldrb	r3, [r7, #24]
 800a762:	9303      	str	r3, [sp, #12]
 800a764:	88fb      	ldrh	r3, [r7, #6]
 800a766:	9302      	str	r3, [sp, #8]
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	9301      	str	r3, [sp, #4]
 800a76c:	2301      	movs	r3, #1
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	2302      	movs	r3, #2
 800a772:	2200      	movs	r2, #0
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f00f fc58 	bl	801a02a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af04      	add	r7, sp, #16
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	4611      	mov	r1, r2
 800a790:	461a      	mov	r2, r3
 800a792:	460b      	mov	r3, r1
 800a794:	80fb      	strh	r3, [r7, #6]
 800a796:	4613      	mov	r3, r2
 800a798:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a79a:	7979      	ldrb	r1, [r7, #5]
 800a79c:	2300      	movs	r3, #0
 800a79e:	9303      	str	r3, [sp, #12]
 800a7a0:	88fb      	ldrh	r3, [r7, #6]
 800a7a2:	9302      	str	r3, [sp, #8]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	9301      	str	r3, [sp, #4]
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f00f fc3a 	bl	801a02a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af04      	add	r7, sp, #16
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	4611      	mov	r1, r2
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	70fb      	strb	r3, [r7, #3]
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	70bb      	strb	r3, [r7, #2]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a7da:	7878      	ldrb	r0, [r7, #1]
 800a7dc:	78ba      	ldrb	r2, [r7, #2]
 800a7de:	78f9      	ldrb	r1, [r7, #3]
 800a7e0:	8b3b      	ldrh	r3, [r7, #24]
 800a7e2:	9302      	str	r3, [sp, #8]
 800a7e4:	7d3b      	ldrb	r3, [r7, #20]
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	7c3b      	ldrb	r3, [r7, #16]
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f00f fbcd 	bl	8019f8e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	460b      	mov	r3, r1
 800a808:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a80a:	78fb      	ldrb	r3, [r7, #3]
 800a80c:	4619      	mov	r1, r3
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f00f fbec 	bl	8019fec <USBH_LL_ClosePipe>

  return USBH_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b084      	sub	sp, #16
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	460b      	mov	r3, r1
 800a828:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f836 	bl	800a89c <USBH_GetFreePipe>
 800a830:	4603      	mov	r3, r0
 800a832:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a834:	89fb      	ldrh	r3, [r7, #14]
 800a836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d00a      	beq.n	800a854 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a83e:	78fa      	ldrb	r2, [r7, #3]
 800a840:	89fb      	ldrh	r3, [r7, #14]
 800a842:	f003 030f 	and.w	r3, r3, #15
 800a846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a84a:	6879      	ldr	r1, [r7, #4]
 800a84c:	33e0      	adds	r3, #224	; 0xe0
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	440b      	add	r3, r1
 800a852:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a854:	89fb      	ldrh	r3, [r7, #14]
 800a856:	b2db      	uxtb	r3, r3
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	460b      	mov	r3, r1
 800a86a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a86c:	78fb      	ldrb	r3, [r7, #3]
 800a86e:	2b0a      	cmp	r3, #10
 800a870:	d80d      	bhi.n	800a88e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a872:	78fb      	ldrb	r3, [r7, #3]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	33e0      	adds	r3, #224	; 0xe0
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	4413      	add	r3, r2
 800a87c:	685a      	ldr	r2, [r3, #4]
 800a87e:	78fb      	ldrb	r3, [r7, #3]
 800a880:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a884:	6879      	ldr	r1, [r7, #4]
 800a886:	33e0      	adds	r3, #224	; 0xe0
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	440b      	add	r3, r1
 800a88c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	73fb      	strb	r3, [r7, #15]
 800a8ac:	e00f      	b.n	800a8ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a8ae:	7bfb      	ldrb	r3, [r7, #15]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	33e0      	adds	r3, #224	; 0xe0
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	4413      	add	r3, r2
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d102      	bne.n	800a8c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	e007      	b.n	800a8d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	73fb      	strb	r3, [r7, #15]
 800a8ce:	7bfb      	ldrb	r3, [r7, #15]
 800a8d0:	2b0a      	cmp	r3, #10
 800a8d2:	d9ec      	bls.n	800a8ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a8d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a8fa:	4b1f      	ldr	r3, [pc, #124]	; (800a978 <FATFS_LinkDriverEx+0x94>)
 800a8fc:	7a5b      	ldrb	r3, [r3, #9]
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d131      	bne.n	800a968 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a904:	4b1c      	ldr	r3, [pc, #112]	; (800a978 <FATFS_LinkDriverEx+0x94>)
 800a906:	7a5b      	ldrb	r3, [r3, #9]
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	461a      	mov	r2, r3
 800a90c:	4b1a      	ldr	r3, [pc, #104]	; (800a978 <FATFS_LinkDriverEx+0x94>)
 800a90e:	2100      	movs	r1, #0
 800a910:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a912:	4b19      	ldr	r3, [pc, #100]	; (800a978 <FATFS_LinkDriverEx+0x94>)
 800a914:	7a5b      	ldrb	r3, [r3, #9]
 800a916:	b2db      	uxtb	r3, r3
 800a918:	4a17      	ldr	r2, [pc, #92]	; (800a978 <FATFS_LinkDriverEx+0x94>)
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a922:	4b15      	ldr	r3, [pc, #84]	; (800a978 <FATFS_LinkDriverEx+0x94>)
 800a924:	7a5b      	ldrb	r3, [r3, #9]
 800a926:	b2db      	uxtb	r3, r3
 800a928:	461a      	mov	r2, r3
 800a92a:	4b13      	ldr	r3, [pc, #76]	; (800a978 <FATFS_LinkDriverEx+0x94>)
 800a92c:	4413      	add	r3, r2
 800a92e:	79fa      	ldrb	r2, [r7, #7]
 800a930:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a932:	4b11      	ldr	r3, [pc, #68]	; (800a978 <FATFS_LinkDriverEx+0x94>)
 800a934:	7a5b      	ldrb	r3, [r3, #9]
 800a936:	b2db      	uxtb	r3, r3
 800a938:	1c5a      	adds	r2, r3, #1
 800a93a:	b2d1      	uxtb	r1, r2
 800a93c:	4a0e      	ldr	r2, [pc, #56]	; (800a978 <FATFS_LinkDriverEx+0x94>)
 800a93e:	7251      	strb	r1, [r2, #9]
 800a940:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a942:	7dbb      	ldrb	r3, [r7, #22]
 800a944:	3330      	adds	r3, #48	; 0x30
 800a946:	b2da      	uxtb	r2, r3
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	3301      	adds	r3, #1
 800a950:	223a      	movs	r2, #58	; 0x3a
 800a952:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	3302      	adds	r3, #2
 800a958:	222f      	movs	r2, #47	; 0x2f
 800a95a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	3303      	adds	r3, #3
 800a960:	2200      	movs	r2, #0
 800a962:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a968:	7dfb      	ldrb	r3, [r7, #23]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	371c      	adds	r7, #28
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	20000320 	.word	0x20000320

0800a97c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a986:	2200      	movs	r2, #0
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f7ff ffaa 	bl	800a8e4 <FATFS_LinkDriverEx>
 800a990:	4603      	mov	r3, r0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b085      	sub	sp, #20
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a9a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9ac:	2b84      	cmp	r3, #132	; 0x84
 800a9ae:	d005      	beq.n	800a9bc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a9b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	3303      	adds	r3, #3
 800a9ba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b083      	sub	sp, #12
 800a9ce:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9d0:	f3ef 8305 	mrs	r3, IPSR
 800a9d4:	607b      	str	r3, [r7, #4]
  return(result);
 800a9d6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	bf14      	ite	ne
 800a9dc:	2301      	movne	r3, #1
 800a9de:	2300      	moveq	r3, #0
 800a9e0:	b2db      	uxtb	r3, r3
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	370c      	adds	r7, #12
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a9f2:	f001 fc5d 	bl	800c2b0 <vTaskStartScheduler>
  
  return osOK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800aa00:	f7ff ffe3 	bl	800a9ca <inHandlerMode>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d003      	beq.n	800aa12 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800aa0a:	f001 fd6b 	bl	800c4e4 <xTaskGetTickCountFromISR>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	e002      	b.n	800aa18 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800aa12:	f001 fd57 	bl	800c4c4 <xTaskGetTickCount>
 800aa16:	4603      	mov	r3, r0
  }
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800aa1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa1e:	b089      	sub	sp, #36	; 0x24
 800aa20:	af04      	add	r7, sp, #16
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d020      	beq.n	800aa70 <osThreadCreate+0x54>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d01c      	beq.n	800aa70 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	685c      	ldr	r4, [r3, #4]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681d      	ldr	r5, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	691e      	ldr	r6, [r3, #16]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7ff ffa6 	bl	800a99a <makeFreeRtosPriority>
 800aa4e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	695b      	ldr	r3, [r3, #20]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa58:	9202      	str	r2, [sp, #8]
 800aa5a:	9301      	str	r3, [sp, #4]
 800aa5c:	9100      	str	r1, [sp, #0]
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	4632      	mov	r2, r6
 800aa62:	4629      	mov	r1, r5
 800aa64:	4620      	mov	r0, r4
 800aa66:	f001 fa5b 	bl	800bf20 <xTaskCreateStatic>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	e01c      	b.n	800aaaa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685c      	ldr	r4, [r3, #4]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa7c:	b29e      	uxth	r6, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7ff ff88 	bl	800a99a <makeFreeRtosPriority>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	f107 030c 	add.w	r3, r7, #12
 800aa90:	9301      	str	r3, [sp, #4]
 800aa92:	9200      	str	r2, [sp, #0]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	4632      	mov	r2, r6
 800aa98:	4629      	mov	r1, r5
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f001 fa9d 	bl	800bfda <xTaskCreate>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d001      	beq.n	800aaaa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e000      	b.n	800aaac <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aab4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d001      	beq.n	800aaca <osDelay+0x16>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	e000      	b.n	800aacc <osDelay+0x18>
 800aaca:	2301      	movs	r3, #1
 800aacc:	4618      	mov	r0, r3
 800aace:	f001 fbbb 	bl	800c248 <vTaskDelay>
  
  return osOK;
 800aad2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d007      	beq.n	800aafc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	2001      	movs	r0, #1
 800aaf4:	f000 fc3f 	bl	800b376 <xQueueCreateMutexStatic>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	e003      	b.n	800ab04 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800aafc:	2001      	movs	r0, #1
 800aafe:	f000 fc22 	bl	800b346 <xQueueCreateMutex>
 800ab02:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ab16:	2300      	movs	r3, #0
 800ab18:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d101      	bne.n	800ab24 <osMutexWait+0x18>
    return osErrorParameter;
 800ab20:	2380      	movs	r3, #128	; 0x80
 800ab22:	e03a      	b.n	800ab9a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800ab24:	2300      	movs	r3, #0
 800ab26:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab2e:	d103      	bne.n	800ab38 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800ab30:	f04f 33ff 	mov.w	r3, #4294967295
 800ab34:	60fb      	str	r3, [r7, #12]
 800ab36:	e009      	b.n	800ab4c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d006      	beq.n	800ab4c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d101      	bne.n	800ab4c <osMutexWait+0x40>
      ticks = 1;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ab4c:	f7ff ff3d 	bl	800a9ca <inHandlerMode>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d017      	beq.n	800ab86 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ab56:	f107 0308 	add.w	r3, r7, #8
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f001 f836 	bl	800bbd0 <xQueueReceiveFromISR>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d001      	beq.n	800ab6e <osMutexWait+0x62>
      return osErrorOS;
 800ab6a:	23ff      	movs	r3, #255	; 0xff
 800ab6c:	e015      	b.n	800ab9a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d011      	beq.n	800ab98 <osMutexWait+0x8c>
 800ab74:	4b0b      	ldr	r3, [pc, #44]	; (800aba4 <osMutexWait+0x98>)
 800ab76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	e008      	b.n	800ab98 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ab86:	68f9      	ldr	r1, [r7, #12]
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 ff15 	bl	800b9b8 <xQueueSemaphoreTake>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d001      	beq.n	800ab98 <osMutexWait+0x8c>
    return osErrorOS;
 800ab94:	23ff      	movs	r3, #255	; 0xff
 800ab96:	e000      	b.n	800ab9a <osMutexWait+0x8e>
  }
  
  return osOK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800abb4:	2300      	movs	r3, #0
 800abb6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800abb8:	f7ff ff07 	bl	800a9ca <inHandlerMode>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d016      	beq.n	800abf0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800abc2:	f107 0308 	add.w	r3, r7, #8
 800abc6:	4619      	mov	r1, r3
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fd88 	bl	800b6de <xQueueGiveFromISR>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d001      	beq.n	800abd8 <osMutexRelease+0x30>
      return osErrorOS;
 800abd4:	23ff      	movs	r3, #255	; 0xff
 800abd6:	e017      	b.n	800ac08 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d013      	beq.n	800ac06 <osMutexRelease+0x5e>
 800abde:	4b0c      	ldr	r3, [pc, #48]	; (800ac10 <osMutexRelease+0x68>)
 800abe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe4:	601a      	str	r2, [r3, #0]
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	e00a      	b.n	800ac06 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800abf0:	2300      	movs	r3, #0
 800abf2:	2200      	movs	r2, #0
 800abf4:	2100      	movs	r1, #0
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fbd8 	bl	800b3ac <xQueueGenericSend>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d001      	beq.n	800ac06 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800ac02:	23ff      	movs	r3, #255	; 0xff
 800ac04:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ac06:	68fb      	ldr	r3, [r7, #12]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	e000ed04 	.word	0xe000ed04

0800ac14 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af02      	add	r7, sp, #8
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00f      	beq.n	800ac46 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d10a      	bne.n	800ac42 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	2203      	movs	r2, #3
 800ac32:	9200      	str	r2, [sp, #0]
 800ac34:	2200      	movs	r2, #0
 800ac36:	2100      	movs	r1, #0
 800ac38:	2001      	movs	r0, #1
 800ac3a:	f000 fa99 	bl	800b170 <xQueueGenericCreateStatic>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	e016      	b.n	800ac70 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ac42:	2300      	movs	r3, #0
 800ac44:	e014      	b.n	800ac70 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d110      	bne.n	800ac6e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ac4c:	2203      	movs	r2, #3
 800ac4e:	2100      	movs	r1, #0
 800ac50:	2001      	movs	r0, #1
 800ac52:	f000 fb05 	bl	800b260 <xQueueGenericCreate>
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d005      	beq.n	800ac6a <osSemaphoreCreate+0x56>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	2200      	movs	r2, #0
 800ac62:	2100      	movs	r1, #0
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f000 fba1 	bl	800b3ac <xQueueGenericSend>
      return sema;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	e000      	b.n	800ac70 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ac6e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ac82:	2300      	movs	r3, #0
 800ac84:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d101      	bne.n	800ac90 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ac8c:	2380      	movs	r3, #128	; 0x80
 800ac8e:	e03a      	b.n	800ad06 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9a:	d103      	bne.n	800aca4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ac9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aca0:	60fb      	str	r3, [r7, #12]
 800aca2:	e009      	b.n	800acb8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d006      	beq.n	800acb8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <osSemaphoreWait+0x40>
      ticks = 1;
 800acb4:	2301      	movs	r3, #1
 800acb6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800acb8:	f7ff fe87 	bl	800a9ca <inHandlerMode>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d017      	beq.n	800acf2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800acc2:	f107 0308 	add.w	r3, r7, #8
 800acc6:	461a      	mov	r2, r3
 800acc8:	2100      	movs	r1, #0
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 ff80 	bl	800bbd0 <xQueueReceiveFromISR>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d001      	beq.n	800acda <osSemaphoreWait+0x62>
      return osErrorOS;
 800acd6:	23ff      	movs	r3, #255	; 0xff
 800acd8:	e015      	b.n	800ad06 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d011      	beq.n	800ad04 <osSemaphoreWait+0x8c>
 800ace0:	4b0b      	ldr	r3, [pc, #44]	; (800ad10 <osSemaphoreWait+0x98>)
 800ace2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace6:	601a      	str	r2, [r3, #0]
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	e008      	b.n	800ad04 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800acf2:	68f9      	ldr	r1, [r7, #12]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fe5f 	bl	800b9b8 <xQueueSemaphoreTake>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d001      	beq.n	800ad04 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ad00:	23ff      	movs	r3, #255	; 0xff
 800ad02:	e000      	b.n	800ad06 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	e000ed04 	.word	0xe000ed04

0800ad14 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ad20:	2300      	movs	r3, #0
 800ad22:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ad24:	f7ff fe51 	bl	800a9ca <inHandlerMode>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d016      	beq.n	800ad5c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ad2e:	f107 0308 	add.w	r3, r7, #8
 800ad32:	4619      	mov	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fcd2 	bl	800b6de <xQueueGiveFromISR>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d001      	beq.n	800ad44 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ad40:	23ff      	movs	r3, #255	; 0xff
 800ad42:	e017      	b.n	800ad74 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d013      	beq.n	800ad72 <osSemaphoreRelease+0x5e>
 800ad4a:	4b0c      	ldr	r3, [pc, #48]	; (800ad7c <osSemaphoreRelease+0x68>)
 800ad4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	f3bf 8f4f 	dsb	sy
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	e00a      	b.n	800ad72 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	2200      	movs	r2, #0
 800ad60:	2100      	movs	r1, #0
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fb22 	bl	800b3ac <xQueueGenericSend>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d001      	beq.n	800ad72 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ad6e:	23ff      	movs	r3, #255	; 0xff
 800ad70:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ad72:	68fb      	ldr	r3, [r7, #12]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	e000ed04 	.word	0xe000ed04

0800ad80 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ad80:	b590      	push	{r4, r7, lr}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af02      	add	r7, sp, #8
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d011      	beq.n	800adb6 <osMessageCreate+0x36>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00d      	beq.n	800adb6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6859      	ldr	r1, [r3, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689a      	ldr	r2, [r3, #8]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	2400      	movs	r4, #0
 800adac:	9400      	str	r4, [sp, #0]
 800adae:	f000 f9df 	bl	800b170 <xQueueGenericCreateStatic>
 800adb2:	4603      	mov	r3, r0
 800adb4:	e008      	b.n	800adc8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6818      	ldr	r0, [r3, #0]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	4619      	mov	r1, r3
 800adc2:	f000 fa4d 	bl	800b260 <xQueueGenericCreate>
 800adc6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800adc8:	4618      	mov	r0, r3
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd90      	pop	{r4, r7, pc}

0800add0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800addc:	2300      	movs	r3, #0
 800adde:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <osMessagePut+0x1e>
    ticks = 1;
 800adea:	2301      	movs	r3, #1
 800adec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800adee:	f7ff fdec 	bl	800a9ca <inHandlerMode>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d018      	beq.n	800ae2a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800adf8:	f107 0210 	add.w	r2, r7, #16
 800adfc:	f107 0108 	add.w	r1, r7, #8
 800ae00:	2300      	movs	r3, #0
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f000 fbd0 	bl	800b5a8 <xQueueGenericSendFromISR>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d001      	beq.n	800ae12 <osMessagePut+0x42>
      return osErrorOS;
 800ae0e:	23ff      	movs	r3, #255	; 0xff
 800ae10:	e018      	b.n	800ae44 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d014      	beq.n	800ae42 <osMessagePut+0x72>
 800ae18:	4b0c      	ldr	r3, [pc, #48]	; (800ae4c <osMessagePut+0x7c>)
 800ae1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1e:	601a      	str	r2, [r3, #0]
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	e00b      	b.n	800ae42 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ae2a:	f107 0108 	add.w	r1, r7, #8
 800ae2e:	2300      	movs	r3, #0
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f000 faba 	bl	800b3ac <xQueueGenericSend>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d001      	beq.n	800ae42 <osMessagePut+0x72>
      return osErrorOS;
 800ae3e:	23ff      	movs	r3, #255	; 0xff
 800ae40:	e000      	b.n	800ae44 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3718      	adds	r7, #24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	e000ed04 	.word	0xe000ed04

0800ae50 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ae50:	b590      	push	{r4, r7, lr}
 800ae52:	b08b      	sub	sp, #44	; 0x2c
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ae60:	2300      	movs	r3, #0
 800ae62:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10a      	bne.n	800ae80 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ae6a:	2380      	movs	r3, #128	; 0x80
 800ae6c:	617b      	str	r3, [r7, #20]
    return event;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	461c      	mov	r4, r3
 800ae72:	f107 0314 	add.w	r3, r7, #20
 800ae76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae7e:	e054      	b.n	800af2a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ae80:	2300      	movs	r3, #0
 800ae82:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8e:	d103      	bne.n	800ae98 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ae90:	f04f 33ff 	mov.w	r3, #4294967295
 800ae94:	627b      	str	r3, [r7, #36]	; 0x24
 800ae96:	e009      	b.n	800aeac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d006      	beq.n	800aeac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800aea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <osMessageGet+0x5c>
      ticks = 1;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800aeac:	f7ff fd8d 	bl	800a9ca <inHandlerMode>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d01c      	beq.n	800aef0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800aeb6:	f107 0220 	add.w	r2, r7, #32
 800aeba:	f107 0314 	add.w	r3, r7, #20
 800aebe:	3304      	adds	r3, #4
 800aec0:	4619      	mov	r1, r3
 800aec2:	68b8      	ldr	r0, [r7, #8]
 800aec4:	f000 fe84 	bl	800bbd0 <xQueueReceiveFromISR>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d102      	bne.n	800aed4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800aece:	2310      	movs	r3, #16
 800aed0:	617b      	str	r3, [r7, #20]
 800aed2:	e001      	b.n	800aed8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800aed4:	2300      	movs	r3, #0
 800aed6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aed8:	6a3b      	ldr	r3, [r7, #32]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d01d      	beq.n	800af1a <osMessageGet+0xca>
 800aede:	4b15      	ldr	r3, [pc, #84]	; (800af34 <osMessageGet+0xe4>)
 800aee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee4:	601a      	str	r2, [r3, #0]
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	f3bf 8f6f 	isb	sy
 800aeee:	e014      	b.n	800af1a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800aef0:	f107 0314 	add.w	r3, r7, #20
 800aef4:	3304      	adds	r3, #4
 800aef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aef8:	4619      	mov	r1, r3
 800aefa:	68b8      	ldr	r0, [r7, #8]
 800aefc:	f000 fc7c 	bl	800b7f8 <xQueueReceive>
 800af00:	4603      	mov	r3, r0
 800af02:	2b01      	cmp	r3, #1
 800af04:	d102      	bne.n	800af0c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800af06:	2310      	movs	r3, #16
 800af08:	617b      	str	r3, [r7, #20]
 800af0a:	e006      	b.n	800af1a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800af0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d101      	bne.n	800af16 <osMessageGet+0xc6>
 800af12:	2300      	movs	r3, #0
 800af14:	e000      	b.n	800af18 <osMessageGet+0xc8>
 800af16:	2340      	movs	r3, #64	; 0x40
 800af18:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	461c      	mov	r4, r3
 800af1e:	f107 0314 	add.w	r3, r7, #20
 800af22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	372c      	adds	r7, #44	; 0x2c
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd90      	pop	{r4, r7, pc}
 800af32:	bf00      	nop
 800af34:	e000ed04 	.word	0xe000ed04

0800af38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f103 0208 	add.w	r2, r3, #8
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f04f 32ff 	mov.w	r2, #4294967295
 800af50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f103 0208 	add.w	r2, r3, #8
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f103 0208 	add.w	r2, r3, #8
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af86:	bf00      	nop
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af92:	b480      	push	{r7}
 800af94:	b085      	sub	sp, #20
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	689a      	ldr	r2, [r3, #8]
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	1c5a      	adds	r2, r3, #1
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	601a      	str	r2, [r3, #0]
}
 800afce:	bf00      	nop
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800afda:	b480      	push	{r7}
 800afdc:	b085      	sub	sp, #20
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
 800afe2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff0:	d103      	bne.n	800affa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	e00c      	b.n	800b014 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	3308      	adds	r3, #8
 800affe:	60fb      	str	r3, [r7, #12]
 800b000:	e002      	b.n	800b008 <vListInsert+0x2e>
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	60fb      	str	r3, [r7, #12]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	429a      	cmp	r2, r3
 800b012:	d2f6      	bcs.n	800b002 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	685a      	ldr	r2, [r3, #4]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	683a      	ldr	r2, [r7, #0]
 800b022:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	683a      	ldr	r2, [r7, #0]
 800b02e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	1c5a      	adds	r2, r3, #1
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	601a      	str	r2, [r3, #0]
}
 800b040:	bf00      	nop
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b04c:	b480      	push	{r7}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	6892      	ldr	r2, [r2, #8]
 800b062:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	6852      	ldr	r2, [r2, #4]
 800b06c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	429a      	cmp	r2, r3
 800b076:	d103      	bne.n	800b080 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	689a      	ldr	r2, [r3, #8]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	1e5a      	subs	r2, r3, #1
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10a      	bne.n	800b0ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b0c6:	bf00      	nop
 800b0c8:	e7fe      	b.n	800b0c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b0ca:	f002 f863 	bl	800d194 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d6:	68f9      	ldr	r1, [r7, #12]
 800b0d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b0da:	fb01 f303 	mul.w	r3, r1, r3
 800b0de:	441a      	add	r2, r3
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	68f9      	ldr	r1, [r7, #12]
 800b0fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b100:	fb01 f303 	mul.w	r3, r1, r3
 800b104:	441a      	add	r2, r3
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	22ff      	movs	r2, #255	; 0xff
 800b10e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	22ff      	movs	r2, #255	; 0xff
 800b116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d114      	bne.n	800b14a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d01a      	beq.n	800b15e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	3310      	adds	r3, #16
 800b12c:	4618      	mov	r0, r3
 800b12e:	f001 fb23 	bl	800c778 <xTaskRemoveFromEventList>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d012      	beq.n	800b15e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b138:	4b0c      	ldr	r3, [pc, #48]	; (800b16c <xQueueGenericReset+0xcc>)
 800b13a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b13e:	601a      	str	r2, [r3, #0]
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	e009      	b.n	800b15e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3310      	adds	r3, #16
 800b14e:	4618      	mov	r0, r3
 800b150:	f7ff fef2 	bl	800af38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	3324      	adds	r3, #36	; 0x24
 800b158:	4618      	mov	r0, r3
 800b15a:	f7ff feed 	bl	800af38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b15e:	f002 f849 	bl	800d1f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b162:	2301      	movs	r3, #1
}
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	e000ed04 	.word	0xe000ed04

0800b170 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b170:	b580      	push	{r7, lr}
 800b172:	b08e      	sub	sp, #56	; 0x38
 800b174:	af02      	add	r7, sp, #8
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
 800b17c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10a      	bne.n	800b19a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b196:	bf00      	nop
 800b198:	e7fe      	b.n	800b198 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10a      	bne.n	800b1b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b1b2:	bf00      	nop
 800b1b4:	e7fe      	b.n	800b1b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d002      	beq.n	800b1c2 <xQueueGenericCreateStatic+0x52>
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <xQueueGenericCreateStatic+0x56>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e000      	b.n	800b1c8 <xQueueGenericCreateStatic+0x58>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d10a      	bne.n	800b1e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d0:	f383 8811 	msr	BASEPRI, r3
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	623b      	str	r3, [r7, #32]
}
 800b1de:	bf00      	nop
 800b1e0:	e7fe      	b.n	800b1e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d102      	bne.n	800b1ee <xQueueGenericCreateStatic+0x7e>
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <xQueueGenericCreateStatic+0x82>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e000      	b.n	800b1f4 <xQueueGenericCreateStatic+0x84>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10a      	bne.n	800b20e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fc:	f383 8811 	msr	BASEPRI, r3
 800b200:	f3bf 8f6f 	isb	sy
 800b204:	f3bf 8f4f 	dsb	sy
 800b208:	61fb      	str	r3, [r7, #28]
}
 800b20a:	bf00      	nop
 800b20c:	e7fe      	b.n	800b20c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b20e:	2348      	movs	r3, #72	; 0x48
 800b210:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	2b48      	cmp	r3, #72	; 0x48
 800b216:	d00a      	beq.n	800b22e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21c:	f383 8811 	msr	BASEPRI, r3
 800b220:	f3bf 8f6f 	isb	sy
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	61bb      	str	r3, [r7, #24]
}
 800b22a:	bf00      	nop
 800b22c:	e7fe      	b.n	800b22c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b22e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00d      	beq.n	800b256 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b242:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	4613      	mov	r3, r2
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	68b9      	ldr	r1, [r7, #8]
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f000 f83f 	bl	800b2d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b258:	4618      	mov	r0, r3
 800b25a:	3730      	adds	r7, #48	; 0x30
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b260:	b580      	push	{r7, lr}
 800b262:	b08a      	sub	sp, #40	; 0x28
 800b264:	af02      	add	r7, sp, #8
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	4613      	mov	r3, r2
 800b26c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10a      	bne.n	800b28a <xQueueGenericCreate+0x2a>
	__asm volatile
 800b274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b278:	f383 8811 	msr	BASEPRI, r3
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	613b      	str	r3, [r7, #16]
}
 800b286:	bf00      	nop
 800b288:	e7fe      	b.n	800b288 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	fb02 f303 	mul.w	r3, r2, r3
 800b292:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	3348      	adds	r3, #72	; 0x48
 800b298:	4618      	mov	r0, r3
 800b29a:	f002 f89d 	bl	800d3d8 <pvPortMalloc>
 800b29e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d011      	beq.n	800b2ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	3348      	adds	r3, #72	; 0x48
 800b2ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2b8:	79fa      	ldrb	r2, [r7, #7]
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	697a      	ldr	r2, [r7, #20]
 800b2c2:	68b9      	ldr	r1, [r7, #8]
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f000 f805 	bl	800b2d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b2ca:	69bb      	ldr	r3, [r7, #24]
	}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3720      	adds	r7, #32
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
 800b2e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d103      	bne.n	800b2f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	69ba      	ldr	r2, [r7, #24]
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	e002      	b.n	800b2f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b302:	2101      	movs	r1, #1
 800b304:	69b8      	ldr	r0, [r7, #24]
 800b306:	f7ff fecb 	bl	800b0a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b30a:	bf00      	nop
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b312:	b580      	push	{r7, lr}
 800b314:	b082      	sub	sp, #8
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00e      	beq.n	800b33e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b332:	2300      	movs	r3, #0
 800b334:	2200      	movs	r2, #0
 800b336:	2100      	movs	r1, #0
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f837 	bl	800b3ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b33e:	bf00      	nop
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b346:	b580      	push	{r7, lr}
 800b348:	b086      	sub	sp, #24
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	4603      	mov	r3, r0
 800b34e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b350:	2301      	movs	r3, #1
 800b352:	617b      	str	r3, [r7, #20]
 800b354:	2300      	movs	r3, #0
 800b356:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b358:	79fb      	ldrb	r3, [r7, #7]
 800b35a:	461a      	mov	r2, r3
 800b35c:	6939      	ldr	r1, [r7, #16]
 800b35e:	6978      	ldr	r0, [r7, #20]
 800b360:	f7ff ff7e 	bl	800b260 <xQueueGenericCreate>
 800b364:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f7ff ffd3 	bl	800b312 <prvInitialiseMutex>

		return xNewQueue;
 800b36c:	68fb      	ldr	r3, [r7, #12]
	}
 800b36e:	4618      	mov	r0, r3
 800b370:	3718      	adds	r7, #24
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b376:	b580      	push	{r7, lr}
 800b378:	b088      	sub	sp, #32
 800b37a:	af02      	add	r7, sp, #8
 800b37c:	4603      	mov	r3, r0
 800b37e:	6039      	str	r1, [r7, #0]
 800b380:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b382:	2301      	movs	r3, #1
 800b384:	617b      	str	r3, [r7, #20]
 800b386:	2300      	movs	r3, #0
 800b388:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b38a:	79fb      	ldrb	r3, [r7, #7]
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	2200      	movs	r2, #0
 800b392:	6939      	ldr	r1, [r7, #16]
 800b394:	6978      	ldr	r0, [r7, #20]
 800b396:	f7ff feeb 	bl	800b170 <xQueueGenericCreateStatic>
 800b39a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f7ff ffb8 	bl	800b312 <prvInitialiseMutex>

		return xNewQueue;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
	}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3718      	adds	r7, #24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b08e      	sub	sp, #56	; 0x38
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
 800b3b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d10a      	bne.n	800b3de <xQueueGenericSend+0x32>
	__asm volatile
 800b3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3cc:	f383 8811 	msr	BASEPRI, r3
 800b3d0:	f3bf 8f6f 	isb	sy
 800b3d4:	f3bf 8f4f 	dsb	sy
 800b3d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b3da:	bf00      	nop
 800b3dc:	e7fe      	b.n	800b3dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d103      	bne.n	800b3ec <xQueueGenericSend+0x40>
 800b3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d101      	bne.n	800b3f0 <xQueueGenericSend+0x44>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e000      	b.n	800b3f2 <xQueueGenericSend+0x46>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10a      	bne.n	800b40c <xQueueGenericSend+0x60>
	__asm volatile
 800b3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fa:	f383 8811 	msr	BASEPRI, r3
 800b3fe:	f3bf 8f6f 	isb	sy
 800b402:	f3bf 8f4f 	dsb	sy
 800b406:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b408:	bf00      	nop
 800b40a:	e7fe      	b.n	800b40a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d103      	bne.n	800b41a <xQueueGenericSend+0x6e>
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b416:	2b01      	cmp	r3, #1
 800b418:	d101      	bne.n	800b41e <xQueueGenericSend+0x72>
 800b41a:	2301      	movs	r3, #1
 800b41c:	e000      	b.n	800b420 <xQueueGenericSend+0x74>
 800b41e:	2300      	movs	r3, #0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d10a      	bne.n	800b43a <xQueueGenericSend+0x8e>
	__asm volatile
 800b424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	623b      	str	r3, [r7, #32]
}
 800b436:	bf00      	nop
 800b438:	e7fe      	b.n	800b438 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b43a:	f001 fb59 	bl	800caf0 <xTaskGetSchedulerState>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d102      	bne.n	800b44a <xQueueGenericSend+0x9e>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <xQueueGenericSend+0xa2>
 800b44a:	2301      	movs	r3, #1
 800b44c:	e000      	b.n	800b450 <xQueueGenericSend+0xa4>
 800b44e:	2300      	movs	r3, #0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10a      	bne.n	800b46a <xQueueGenericSend+0xbe>
	__asm volatile
 800b454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	61fb      	str	r3, [r7, #28]
}
 800b466:	bf00      	nop
 800b468:	e7fe      	b.n	800b468 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b46a:	f001 fe93 	bl	800d194 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b476:	429a      	cmp	r2, r3
 800b478:	d302      	bcc.n	800b480 <xQueueGenericSend+0xd4>
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d129      	bne.n	800b4d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b480:	683a      	ldr	r2, [r7, #0]
 800b482:	68b9      	ldr	r1, [r7, #8]
 800b484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b486:	f000 fc3b 	bl	800bd00 <prvCopyDataToQueue>
 800b48a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b490:	2b00      	cmp	r3, #0
 800b492:	d010      	beq.n	800b4b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	3324      	adds	r3, #36	; 0x24
 800b498:	4618      	mov	r0, r3
 800b49a:	f001 f96d 	bl	800c778 <xTaskRemoveFromEventList>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d013      	beq.n	800b4cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b4a4:	4b3f      	ldr	r3, [pc, #252]	; (800b5a4 <xQueueGenericSend+0x1f8>)
 800b4a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4aa:	601a      	str	r2, [r3, #0]
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	f3bf 8f6f 	isb	sy
 800b4b4:	e00a      	b.n	800b4cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d007      	beq.n	800b4cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b4bc:	4b39      	ldr	r3, [pc, #228]	; (800b5a4 <xQueueGenericSend+0x1f8>)
 800b4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b4cc:	f001 fe92 	bl	800d1f4 <vPortExitCritical>
				return pdPASS;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e063      	b.n	800b59c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d103      	bne.n	800b4e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b4da:	f001 fe8b 	bl	800d1f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e05c      	b.n	800b59c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d106      	bne.n	800b4f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b4e8:	f107 0314 	add.w	r3, r7, #20
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f001 f9a5 	bl	800c83c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b4f6:	f001 fe7d 	bl	800d1f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b4fa:	f000 ff39 	bl	800c370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b4fe:	f001 fe49 	bl	800d194 <vPortEnterCritical>
 800b502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b508:	b25b      	sxtb	r3, r3
 800b50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b50e:	d103      	bne.n	800b518 <xQueueGenericSend+0x16c>
 800b510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b512:	2200      	movs	r2, #0
 800b514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b51e:	b25b      	sxtb	r3, r3
 800b520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b524:	d103      	bne.n	800b52e <xQueueGenericSend+0x182>
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	2200      	movs	r2, #0
 800b52a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b52e:	f001 fe61 	bl	800d1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b532:	1d3a      	adds	r2, r7, #4
 800b534:	f107 0314 	add.w	r3, r7, #20
 800b538:	4611      	mov	r1, r2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f001 f994 	bl	800c868 <xTaskCheckForTimeOut>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d124      	bne.n	800b590 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b548:	f000 fcd2 	bl	800bef0 <prvIsQueueFull>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d018      	beq.n	800b584 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b554:	3310      	adds	r3, #16
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	4611      	mov	r1, r2
 800b55a:	4618      	mov	r0, r3
 800b55c:	f001 f8e8 	bl	800c730 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b562:	f000 fc5d 	bl	800be20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b566:	f000 ff11 	bl	800c38c <xTaskResumeAll>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f47f af7c 	bne.w	800b46a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b572:	4b0c      	ldr	r3, [pc, #48]	; (800b5a4 <xQueueGenericSend+0x1f8>)
 800b574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b578:	601a      	str	r2, [r3, #0]
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	e772      	b.n	800b46a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b586:	f000 fc4b 	bl	800be20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b58a:	f000 feff 	bl	800c38c <xTaskResumeAll>
 800b58e:	e76c      	b.n	800b46a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b592:	f000 fc45 	bl	800be20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b596:	f000 fef9 	bl	800c38c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b59a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3738      	adds	r7, #56	; 0x38
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	e000ed04 	.word	0xe000ed04

0800b5a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b090      	sub	sp, #64	; 0x40
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
 800b5b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10a      	bne.n	800b5d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5d2:	bf00      	nop
 800b5d4:	e7fe      	b.n	800b5d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d103      	bne.n	800b5e4 <xQueueGenericSendFromISR+0x3c>
 800b5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d101      	bne.n	800b5e8 <xQueueGenericSendFromISR+0x40>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e000      	b.n	800b5ea <xQueueGenericSendFromISR+0x42>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10a      	bne.n	800b604 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f2:	f383 8811 	msr	BASEPRI, r3
 800b5f6:	f3bf 8f6f 	isb	sy
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b600:	bf00      	nop
 800b602:	e7fe      	b.n	800b602 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	2b02      	cmp	r3, #2
 800b608:	d103      	bne.n	800b612 <xQueueGenericSendFromISR+0x6a>
 800b60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d101      	bne.n	800b616 <xQueueGenericSendFromISR+0x6e>
 800b612:	2301      	movs	r3, #1
 800b614:	e000      	b.n	800b618 <xQueueGenericSendFromISR+0x70>
 800b616:	2300      	movs	r3, #0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10a      	bne.n	800b632 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	623b      	str	r3, [r7, #32]
}
 800b62e:	bf00      	nop
 800b630:	e7fe      	b.n	800b630 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b632:	f001 fe91 	bl	800d358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b636:	f3ef 8211 	mrs	r2, BASEPRI
 800b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	61fa      	str	r2, [r7, #28]
 800b64c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b64e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b650:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d302      	bcc.n	800b664 <xQueueGenericSendFromISR+0xbc>
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b02      	cmp	r3, #2
 800b662:	d12f      	bne.n	800b6c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b66a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b672:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	68b9      	ldr	r1, [r7, #8]
 800b678:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b67a:	f000 fb41 	bl	800bd00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b67e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b686:	d112      	bne.n	800b6ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d016      	beq.n	800b6be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b692:	3324      	adds	r3, #36	; 0x24
 800b694:	4618      	mov	r0, r3
 800b696:	f001 f86f 	bl	800c778 <xTaskRemoveFromEventList>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00e      	beq.n	800b6be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00b      	beq.n	800b6be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	e007      	b.n	800b6be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b6ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	b25a      	sxtb	r2, r3
 800b6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b6c2:	e001      	b.n	800b6c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b6d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3740      	adds	r7, #64	; 0x40
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b08e      	sub	sp, #56	; 0x38
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
 800b6e6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10a      	bne.n	800b708 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	623b      	str	r3, [r7, #32]
}
 800b704:	bf00      	nop
 800b706:	e7fe      	b.n	800b706 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00a      	beq.n	800b726 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	61fb      	str	r3, [r7, #28]
}
 800b722:	bf00      	nop
 800b724:	e7fe      	b.n	800b724 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d103      	bne.n	800b736 <xQueueGiveFromISR+0x58>
 800b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d101      	bne.n	800b73a <xQueueGiveFromISR+0x5c>
 800b736:	2301      	movs	r3, #1
 800b738:	e000      	b.n	800b73c <xQueueGiveFromISR+0x5e>
 800b73a:	2300      	movs	r3, #0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10a      	bne.n	800b756 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b744:	f383 8811 	msr	BASEPRI, r3
 800b748:	f3bf 8f6f 	isb	sy
 800b74c:	f3bf 8f4f 	dsb	sy
 800b750:	61bb      	str	r3, [r7, #24]
}
 800b752:	bf00      	nop
 800b754:	e7fe      	b.n	800b754 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b756:	f001 fdff 	bl	800d358 <vPortValidateInterruptPriority>
	__asm volatile
 800b75a:	f3ef 8211 	mrs	r2, BASEPRI
 800b75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b762:	f383 8811 	msr	BASEPRI, r3
 800b766:	f3bf 8f6f 	isb	sy
 800b76a:	f3bf 8f4f 	dsb	sy
 800b76e:	617a      	str	r2, [r7, #20]
 800b770:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b772:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b774:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b782:	429a      	cmp	r2, r3
 800b784:	d22b      	bcs.n	800b7de <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b78c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b792:	1c5a      	adds	r2, r3, #1
 800b794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b796:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b798:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a0:	d112      	bne.n	800b7c8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d016      	beq.n	800b7d8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	3324      	adds	r3, #36	; 0x24
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 ffe2 	bl	800c778 <xTaskRemoveFromEventList>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00e      	beq.n	800b7d8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00b      	beq.n	800b7d8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	e007      	b.n	800b7d8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b7c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	b25a      	sxtb	r2, r3
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	637b      	str	r3, [r7, #52]	; 0x34
 800b7dc:	e001      	b.n	800b7e2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	637b      	str	r3, [r7, #52]	; 0x34
 800b7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f383 8811 	msr	BASEPRI, r3
}
 800b7ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3738      	adds	r7, #56	; 0x38
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08c      	sub	sp, #48	; 0x30
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b804:	2300      	movs	r3, #0
 800b806:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10a      	bne.n	800b828 <xQueueReceive+0x30>
	__asm volatile
 800b812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	623b      	str	r3, [r7, #32]
}
 800b824:	bf00      	nop
 800b826:	e7fe      	b.n	800b826 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d103      	bne.n	800b836 <xQueueReceive+0x3e>
 800b82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b832:	2b00      	cmp	r3, #0
 800b834:	d101      	bne.n	800b83a <xQueueReceive+0x42>
 800b836:	2301      	movs	r3, #1
 800b838:	e000      	b.n	800b83c <xQueueReceive+0x44>
 800b83a:	2300      	movs	r3, #0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10a      	bne.n	800b856 <xQueueReceive+0x5e>
	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	61fb      	str	r3, [r7, #28]
}
 800b852:	bf00      	nop
 800b854:	e7fe      	b.n	800b854 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b856:	f001 f94b 	bl	800caf0 <xTaskGetSchedulerState>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d102      	bne.n	800b866 <xQueueReceive+0x6e>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <xQueueReceive+0x72>
 800b866:	2301      	movs	r3, #1
 800b868:	e000      	b.n	800b86c <xQueueReceive+0x74>
 800b86a:	2300      	movs	r3, #0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10a      	bne.n	800b886 <xQueueReceive+0x8e>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	61bb      	str	r3, [r7, #24]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b886:	f001 fc85 	bl	800d194 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b88e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b892:	2b00      	cmp	r3, #0
 800b894:	d01f      	beq.n	800b8d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b896:	68b9      	ldr	r1, [r7, #8]
 800b898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b89a:	f000 fa9b 	bl	800bdd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a0:	1e5a      	subs	r2, r3, #1
 800b8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00f      	beq.n	800b8ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b0:	3310      	adds	r3, #16
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 ff60 	bl	800c778 <xTaskRemoveFromEventList>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d007      	beq.n	800b8ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b8be:	4b3d      	ldr	r3, [pc, #244]	; (800b9b4 <xQueueReceive+0x1bc>)
 800b8c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8c4:	601a      	str	r2, [r3, #0]
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b8ce:	f001 fc91 	bl	800d1f4 <vPortExitCritical>
				return pdPASS;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e069      	b.n	800b9aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d103      	bne.n	800b8e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8dc:	f001 fc8a 	bl	800d1f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	e062      	b.n	800b9aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d106      	bne.n	800b8f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8ea:	f107 0310 	add.w	r3, r7, #16
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 ffa4 	bl	800c83c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8f8:	f001 fc7c 	bl	800d1f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8fc:	f000 fd38 	bl	800c370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b900:	f001 fc48 	bl	800d194 <vPortEnterCritical>
 800b904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b90a:	b25b      	sxtb	r3, r3
 800b90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b910:	d103      	bne.n	800b91a <xQueueReceive+0x122>
 800b912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b914:	2200      	movs	r2, #0
 800b916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b920:	b25b      	sxtb	r3, r3
 800b922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b926:	d103      	bne.n	800b930 <xQueueReceive+0x138>
 800b928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b930:	f001 fc60 	bl	800d1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b934:	1d3a      	adds	r2, r7, #4
 800b936:	f107 0310 	add.w	r3, r7, #16
 800b93a:	4611      	mov	r1, r2
 800b93c:	4618      	mov	r0, r3
 800b93e:	f000 ff93 	bl	800c868 <xTaskCheckForTimeOut>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d123      	bne.n	800b990 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b94a:	f000 fabb 	bl	800bec4 <prvIsQueueEmpty>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d017      	beq.n	800b984 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b956:	3324      	adds	r3, #36	; 0x24
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	4611      	mov	r1, r2
 800b95c:	4618      	mov	r0, r3
 800b95e:	f000 fee7 	bl	800c730 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b964:	f000 fa5c 	bl	800be20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b968:	f000 fd10 	bl	800c38c <xTaskResumeAll>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d189      	bne.n	800b886 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b972:	4b10      	ldr	r3, [pc, #64]	; (800b9b4 <xQueueReceive+0x1bc>)
 800b974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	e780      	b.n	800b886 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b986:	f000 fa4b 	bl	800be20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b98a:	f000 fcff 	bl	800c38c <xTaskResumeAll>
 800b98e:	e77a      	b.n	800b886 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b992:	f000 fa45 	bl	800be20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b996:	f000 fcf9 	bl	800c38c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b99a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b99c:	f000 fa92 	bl	800bec4 <prvIsQueueEmpty>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f43f af6f 	beq.w	800b886 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b9a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3730      	adds	r7, #48	; 0x30
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	e000ed04 	.word	0xe000ed04

0800b9b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b08e      	sub	sp, #56	; 0x38
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10a      	bne.n	800b9ea <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	623b      	str	r3, [r7, #32]
}
 800b9e6:	bf00      	nop
 800b9e8:	e7fe      	b.n	800b9e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00a      	beq.n	800ba08 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	61fb      	str	r3, [r7, #28]
}
 800ba04:	bf00      	nop
 800ba06:	e7fe      	b.n	800ba06 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba08:	f001 f872 	bl	800caf0 <xTaskGetSchedulerState>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d102      	bne.n	800ba18 <xQueueSemaphoreTake+0x60>
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d101      	bne.n	800ba1c <xQueueSemaphoreTake+0x64>
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e000      	b.n	800ba1e <xQueueSemaphoreTake+0x66>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10a      	bne.n	800ba38 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ba22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba26:	f383 8811 	msr	BASEPRI, r3
 800ba2a:	f3bf 8f6f 	isb	sy
 800ba2e:	f3bf 8f4f 	dsb	sy
 800ba32:	61bb      	str	r3, [r7, #24]
}
 800ba34:	bf00      	nop
 800ba36:	e7fe      	b.n	800ba36 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba38:	f001 fbac 	bl	800d194 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ba3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba40:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ba42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d024      	beq.n	800ba92 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ba48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4a:	1e5a      	subs	r2, r3, #1
 800ba4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d104      	bne.n	800ba62 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ba58:	f001 f9f2 	bl	800ce40 <pvTaskIncrementMutexHeldCount>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba60:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba64:	691b      	ldr	r3, [r3, #16]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00f      	beq.n	800ba8a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6c:	3310      	adds	r3, #16
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 fe82 	bl	800c778 <xTaskRemoveFromEventList>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d007      	beq.n	800ba8a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba7a:	4b54      	ldr	r3, [pc, #336]	; (800bbcc <xQueueSemaphoreTake+0x214>)
 800ba7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba80:	601a      	str	r2, [r3, #0]
 800ba82:	f3bf 8f4f 	dsb	sy
 800ba86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba8a:	f001 fbb3 	bl	800d1f4 <vPortExitCritical>
				return pdPASS;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e097      	b.n	800bbc2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d111      	bne.n	800babc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00a      	beq.n	800bab4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	617b      	str	r3, [r7, #20]
}
 800bab0:	bf00      	nop
 800bab2:	e7fe      	b.n	800bab2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bab4:	f001 fb9e 	bl	800d1f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bab8:	2300      	movs	r3, #0
 800baba:	e082      	b.n	800bbc2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800babc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d106      	bne.n	800bad0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bac2:	f107 030c 	add.w	r3, r7, #12
 800bac6:	4618      	mov	r0, r3
 800bac8:	f000 feb8 	bl	800c83c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bacc:	2301      	movs	r3, #1
 800bace:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bad0:	f001 fb90 	bl	800d1f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bad4:	f000 fc4c 	bl	800c370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bad8:	f001 fb5c 	bl	800d194 <vPortEnterCritical>
 800badc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bade:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bae2:	b25b      	sxtb	r3, r3
 800bae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae8:	d103      	bne.n	800baf2 <xQueueSemaphoreTake+0x13a>
 800baea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baec:	2200      	movs	r2, #0
 800baee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800baf8:	b25b      	sxtb	r3, r3
 800bafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bafe:	d103      	bne.n	800bb08 <xQueueSemaphoreTake+0x150>
 800bb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb08:	f001 fb74 	bl	800d1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb0c:	463a      	mov	r2, r7
 800bb0e:	f107 030c 	add.w	r3, r7, #12
 800bb12:	4611      	mov	r1, r2
 800bb14:	4618      	mov	r0, r3
 800bb16:	f000 fea7 	bl	800c868 <xTaskCheckForTimeOut>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d132      	bne.n	800bb86 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb22:	f000 f9cf 	bl	800bec4 <prvIsQueueEmpty>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d026      	beq.n	800bb7a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d109      	bne.n	800bb48 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bb34:	f001 fb2e 	bl	800d194 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f000 fff5 	bl	800cb2c <xTaskPriorityInherit>
 800bb42:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bb44:	f001 fb56 	bl	800d1f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4a:	3324      	adds	r3, #36	; 0x24
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	4611      	mov	r1, r2
 800bb50:	4618      	mov	r0, r3
 800bb52:	f000 fded 	bl	800c730 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb58:	f000 f962 	bl	800be20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb5c:	f000 fc16 	bl	800c38c <xTaskResumeAll>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f47f af68 	bne.w	800ba38 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bb68:	4b18      	ldr	r3, [pc, #96]	; (800bbcc <xQueueSemaphoreTake+0x214>)
 800bb6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb6e:	601a      	str	r2, [r3, #0]
 800bb70:	f3bf 8f4f 	dsb	sy
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	e75e      	b.n	800ba38 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bb7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb7c:	f000 f950 	bl	800be20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb80:	f000 fc04 	bl	800c38c <xTaskResumeAll>
 800bb84:	e758      	b.n	800ba38 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bb86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb88:	f000 f94a 	bl	800be20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb8c:	f000 fbfe 	bl	800c38c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb92:	f000 f997 	bl	800bec4 <prvIsQueueEmpty>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f43f af4d 	beq.w	800ba38 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00d      	beq.n	800bbc0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bba4:	f001 faf6 	bl	800d194 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbaa:	f000 f891 	bl	800bcd0 <prvGetDisinheritPriorityAfterTimeout>
 800bbae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f001 f8b4 	bl	800cd24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bbbc:	f001 fb1a 	bl	800d1f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bbc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3738      	adds	r7, #56	; 0x38
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	e000ed04 	.word	0xe000ed04

0800bbd0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b08e      	sub	sp, #56	; 0x38
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10a      	bne.n	800bbfc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbea:	f383 8811 	msr	BASEPRI, r3
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	623b      	str	r3, [r7, #32]
}
 800bbf8:	bf00      	nop
 800bbfa:	e7fe      	b.n	800bbfa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d103      	bne.n	800bc0a <xQueueReceiveFromISR+0x3a>
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d101      	bne.n	800bc0e <xQueueReceiveFromISR+0x3e>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e000      	b.n	800bc10 <xQueueReceiveFromISR+0x40>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10a      	bne.n	800bc2a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc18:	f383 8811 	msr	BASEPRI, r3
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	61fb      	str	r3, [r7, #28]
}
 800bc26:	bf00      	nop
 800bc28:	e7fe      	b.n	800bc28 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc2a:	f001 fb95 	bl	800d358 <vPortValidateInterruptPriority>
	__asm volatile
 800bc2e:	f3ef 8211 	mrs	r2, BASEPRI
 800bc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	61ba      	str	r2, [r7, #24]
 800bc44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bc46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d02f      	beq.n	800bcb6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc60:	68b9      	ldr	r1, [r7, #8]
 800bc62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc64:	f000 f8b6 	bl	800bdd4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6a:	1e5a      	subs	r2, r3, #1
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bc70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc78:	d112      	bne.n	800bca0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d016      	beq.n	800bcb0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc84:	3310      	adds	r3, #16
 800bc86:	4618      	mov	r0, r3
 800bc88:	f000 fd76 	bl	800c778 <xTaskRemoveFromEventList>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00e      	beq.n	800bcb0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00b      	beq.n	800bcb0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	e007      	b.n	800bcb0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bca4:	3301      	adds	r3, #1
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	b25a      	sxtb	r2, r3
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	637b      	str	r3, [r7, #52]	; 0x34
 800bcb4:	e001      	b.n	800bcba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	637b      	str	r3, [r7, #52]	; 0x34
 800bcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	f383 8811 	msr	BASEPRI, r3
}
 800bcc4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bcc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3738      	adds	r7, #56	; 0x38
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d006      	beq.n	800bcee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f1c3 0307 	rsb	r3, r3, #7
 800bcea:	60fb      	str	r3, [r7, #12]
 800bcec:	e001      	b.n	800bcf2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
	}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3714      	adds	r7, #20
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b086      	sub	sp, #24
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10d      	bne.n	800bd3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d14d      	bne.n	800bdc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f000 ff74 	bl	800cc18 <xTaskPriorityDisinherit>
 800bd30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	609a      	str	r2, [r3, #8]
 800bd38:	e043      	b.n	800bdc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d119      	bne.n	800bd74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6858      	ldr	r0, [r3, #4]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd48:	461a      	mov	r2, r3
 800bd4a:	68b9      	ldr	r1, [r7, #8]
 800bd4c:	f00e fac2 	bl	801a2d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd58:	441a      	add	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	685a      	ldr	r2, [r3, #4]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d32b      	bcc.n	800bdc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	605a      	str	r2, [r3, #4]
 800bd72:	e026      	b.n	800bdc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	68d8      	ldr	r0, [r3, #12]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	68b9      	ldr	r1, [r7, #8]
 800bd80:	f00e faa8 	bl	801a2d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	68da      	ldr	r2, [r3, #12]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8c:	425b      	negs	r3, r3
 800bd8e:	441a      	add	r2, r3
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	68da      	ldr	r2, [r3, #12]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d207      	bcs.n	800bdb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	689a      	ldr	r2, [r3, #8]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda8:	425b      	negs	r3, r3
 800bdaa:	441a      	add	r2, r3
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	d105      	bne.n	800bdc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d002      	beq.n	800bdc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	1c5a      	adds	r2, r3, #1
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bdca:	697b      	ldr	r3, [r7, #20]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3718      	adds	r7, #24
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d018      	beq.n	800be18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	68da      	ldr	r2, [r3, #12]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdee:	441a      	add	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68da      	ldr	r2, [r3, #12]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d303      	bcc.n	800be08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	68d9      	ldr	r1, [r3, #12]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be10:	461a      	mov	r2, r3
 800be12:	6838      	ldr	r0, [r7, #0]
 800be14:	f00e fa5e 	bl	801a2d4 <memcpy>
	}
}
 800be18:	bf00      	nop
 800be1a:	3708      	adds	r7, #8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800be28:	f001 f9b4 	bl	800d194 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be34:	e011      	b.n	800be5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d012      	beq.n	800be64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	3324      	adds	r3, #36	; 0x24
 800be42:	4618      	mov	r0, r3
 800be44:	f000 fc98 	bl	800c778 <xTaskRemoveFromEventList>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800be4e:	f000 fd6d 	bl	800c92c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	3b01      	subs	r3, #1
 800be56:	b2db      	uxtb	r3, r3
 800be58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	dce9      	bgt.n	800be36 <prvUnlockQueue+0x16>
 800be62:	e000      	b.n	800be66 <prvUnlockQueue+0x46>
					break;
 800be64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	22ff      	movs	r2, #255	; 0xff
 800be6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800be6e:	f001 f9c1 	bl	800d1f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800be72:	f001 f98f 	bl	800d194 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be7e:	e011      	b.n	800bea4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	691b      	ldr	r3, [r3, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d012      	beq.n	800beae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	3310      	adds	r3, #16
 800be8c:	4618      	mov	r0, r3
 800be8e:	f000 fc73 	bl	800c778 <xTaskRemoveFromEventList>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d001      	beq.n	800be9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800be98:	f000 fd48 	bl	800c92c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800be9c:	7bbb      	ldrb	r3, [r7, #14]
 800be9e:	3b01      	subs	r3, #1
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	dce9      	bgt.n	800be80 <prvUnlockQueue+0x60>
 800beac:	e000      	b.n	800beb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800beae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	22ff      	movs	r2, #255	; 0xff
 800beb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800beb8:	f001 f99c 	bl	800d1f4 <vPortExitCritical>
}
 800bebc:	bf00      	nop
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800becc:	f001 f962 	bl	800d194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d102      	bne.n	800bede <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bed8:	2301      	movs	r3, #1
 800beda:	60fb      	str	r3, [r7, #12]
 800bedc:	e001      	b.n	800bee2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bede:	2300      	movs	r3, #0
 800bee0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bee2:	f001 f987 	bl	800d1f4 <vPortExitCritical>

	return xReturn;
 800bee6:	68fb      	ldr	r3, [r7, #12]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bef8:	f001 f94c 	bl	800d194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d102      	bne.n	800bf0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	60fb      	str	r3, [r7, #12]
 800bf0c:	e001      	b.n	800bf12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf12:	f001 f96f 	bl	800d1f4 <vPortExitCritical>

	return xReturn;
 800bf16:	68fb      	ldr	r3, [r7, #12]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b08e      	sub	sp, #56	; 0x38
 800bf24:	af04      	add	r7, sp, #16
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	60b9      	str	r1, [r7, #8]
 800bf2a:	607a      	str	r2, [r7, #4]
 800bf2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d10a      	bne.n	800bf4a <xTaskCreateStatic+0x2a>
	__asm volatile
 800bf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf38:	f383 8811 	msr	BASEPRI, r3
 800bf3c:	f3bf 8f6f 	isb	sy
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	623b      	str	r3, [r7, #32]
}
 800bf46:	bf00      	nop
 800bf48:	e7fe      	b.n	800bf48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10a      	bne.n	800bf66 <xTaskCreateStatic+0x46>
	__asm volatile
 800bf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	61fb      	str	r3, [r7, #28]
}
 800bf62:	bf00      	nop
 800bf64:	e7fe      	b.n	800bf64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bf66:	2354      	movs	r3, #84	; 0x54
 800bf68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	2b54      	cmp	r3, #84	; 0x54
 800bf6e:	d00a      	beq.n	800bf86 <xTaskCreateStatic+0x66>
	__asm volatile
 800bf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf74:	f383 8811 	msr	BASEPRI, r3
 800bf78:	f3bf 8f6f 	isb	sy
 800bf7c:	f3bf 8f4f 	dsb	sy
 800bf80:	61bb      	str	r3, [r7, #24]
}
 800bf82:	bf00      	nop
 800bf84:	e7fe      	b.n	800bf84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bf86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d01e      	beq.n	800bfcc <xTaskCreateStatic+0xac>
 800bf8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d01b      	beq.n	800bfcc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	2202      	movs	r2, #2
 800bfa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	9303      	str	r3, [sp, #12]
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfac:	9302      	str	r3, [sp, #8]
 800bfae:	f107 0314 	add.w	r3, r7, #20
 800bfb2:	9301      	str	r3, [sp, #4]
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	68b9      	ldr	r1, [r7, #8]
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f000 f850 	bl	800c064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfc6:	f000 f8d5 	bl	800c174 <prvAddNewTaskToReadyList>
 800bfca:	e001      	b.n	800bfd0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bfd0:	697b      	ldr	r3, [r7, #20]
	}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3728      	adds	r7, #40	; 0x28
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b08c      	sub	sp, #48	; 0x30
 800bfde:	af04      	add	r7, sp, #16
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	60b9      	str	r1, [r7, #8]
 800bfe4:	603b      	str	r3, [r7, #0]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bfea:	88fb      	ldrh	r3, [r7, #6]
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4618      	mov	r0, r3
 800bff0:	f001 f9f2 	bl	800d3d8 <pvPortMalloc>
 800bff4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00e      	beq.n	800c01a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bffc:	2054      	movs	r0, #84	; 0x54
 800bffe:	f001 f9eb 	bl	800d3d8 <pvPortMalloc>
 800c002:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d003      	beq.n	800c012 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	697a      	ldr	r2, [r7, #20]
 800c00e:	631a      	str	r2, [r3, #48]	; 0x30
 800c010:	e005      	b.n	800c01e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c012:	6978      	ldr	r0, [r7, #20]
 800c014:	f001 faac 	bl	800d570 <vPortFree>
 800c018:	e001      	b.n	800c01e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c01a:	2300      	movs	r3, #0
 800c01c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d017      	beq.n	800c054 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	2200      	movs	r2, #0
 800c028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c02c:	88fa      	ldrh	r2, [r7, #6]
 800c02e:	2300      	movs	r3, #0
 800c030:	9303      	str	r3, [sp, #12]
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	9302      	str	r3, [sp, #8]
 800c036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c038:	9301      	str	r3, [sp, #4]
 800c03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03c:	9300      	str	r3, [sp, #0]
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	68b9      	ldr	r1, [r7, #8]
 800c042:	68f8      	ldr	r0, [r7, #12]
 800c044:	f000 f80e 	bl	800c064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c048:	69f8      	ldr	r0, [r7, #28]
 800c04a:	f000 f893 	bl	800c174 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c04e:	2301      	movs	r3, #1
 800c050:	61bb      	str	r3, [r7, #24]
 800c052:	e002      	b.n	800c05a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c054:	f04f 33ff 	mov.w	r3, #4294967295
 800c058:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c05a:	69bb      	ldr	r3, [r7, #24]
	}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3720      	adds	r7, #32
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b088      	sub	sp, #32
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
 800c070:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c07c:	3b01      	subs	r3, #1
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	4413      	add	r3, r2
 800c082:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	f023 0307 	bic.w	r3, r3, #7
 800c08a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	f003 0307 	and.w	r3, r3, #7
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00a      	beq.n	800c0ac <prvInitialiseNewTask+0x48>
	__asm volatile
 800c096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09a:	f383 8811 	msr	BASEPRI, r3
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	617b      	str	r3, [r7, #20]
}
 800c0a8:	bf00      	nop
 800c0aa:	e7fe      	b.n	800c0aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d01f      	beq.n	800c0f2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	61fb      	str	r3, [r7, #28]
 800c0b6:	e012      	b.n	800c0de <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c0b8:	68ba      	ldr	r2, [r7, #8]
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	4413      	add	r3, r2
 800c0be:	7819      	ldrb	r1, [r3, #0]
 800c0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	3334      	adds	r3, #52	; 0x34
 800c0c8:	460a      	mov	r2, r1
 800c0ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d006      	beq.n	800c0e6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	61fb      	str	r3, [r7, #28]
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	2b0f      	cmp	r3, #15
 800c0e2:	d9e9      	bls.n	800c0b8 <prvInitialiseNewTask+0x54>
 800c0e4:	e000      	b.n	800c0e8 <prvInitialiseNewTask+0x84>
			{
				break;
 800c0e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c0f0:	e003      	b.n	800c0fa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fc:	2b06      	cmp	r3, #6
 800c0fe:	d901      	bls.n	800c104 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c100:	2306      	movs	r3, #6
 800c102:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c108:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c10e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c112:	2200      	movs	r2, #0
 800c114:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c118:	3304      	adds	r3, #4
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fe ff2c 	bl	800af78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c122:	3318      	adds	r3, #24
 800c124:	4618      	mov	r0, r3
 800c126:	f7fe ff27 	bl	800af78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c12e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c132:	f1c3 0207 	rsb	r2, r3, #7
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c13e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	2200      	movs	r2, #0
 800c144:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	2200      	movs	r2, #0
 800c14a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	68f9      	ldr	r1, [r7, #12]
 800c152:	69b8      	ldr	r0, [r7, #24]
 800c154:	f000 feee 	bl	800cf34 <pxPortInitialiseStack>
 800c158:	4602      	mov	r2, r0
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c160:	2b00      	cmp	r3, #0
 800c162:	d002      	beq.n	800c16a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c16a:	bf00      	nop
 800c16c:	3720      	adds	r7, #32
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
	...

0800c174 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c17c:	f001 f80a 	bl	800d194 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c180:	4b2a      	ldr	r3, [pc, #168]	; (800c22c <prvAddNewTaskToReadyList+0xb8>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3301      	adds	r3, #1
 800c186:	4a29      	ldr	r2, [pc, #164]	; (800c22c <prvAddNewTaskToReadyList+0xb8>)
 800c188:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c18a:	4b29      	ldr	r3, [pc, #164]	; (800c230 <prvAddNewTaskToReadyList+0xbc>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d109      	bne.n	800c1a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c192:	4a27      	ldr	r2, [pc, #156]	; (800c230 <prvAddNewTaskToReadyList+0xbc>)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c198:	4b24      	ldr	r3, [pc, #144]	; (800c22c <prvAddNewTaskToReadyList+0xb8>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d110      	bne.n	800c1c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c1a0:	f000 fbe8 	bl	800c974 <prvInitialiseTaskLists>
 800c1a4:	e00d      	b.n	800c1c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c1a6:	4b23      	ldr	r3, [pc, #140]	; (800c234 <prvAddNewTaskToReadyList+0xc0>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d109      	bne.n	800c1c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c1ae:	4b20      	ldr	r3, [pc, #128]	; (800c230 <prvAddNewTaskToReadyList+0xbc>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d802      	bhi.n	800c1c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c1bc:	4a1c      	ldr	r2, [pc, #112]	; (800c230 <prvAddNewTaskToReadyList+0xbc>)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c1c2:	4b1d      	ldr	r3, [pc, #116]	; (800c238 <prvAddNewTaskToReadyList+0xc4>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	4a1b      	ldr	r2, [pc, #108]	; (800c238 <prvAddNewTaskToReadyList+0xc4>)
 800c1ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	409a      	lsls	r2, r3
 800c1d4:	4b19      	ldr	r3, [pc, #100]	; (800c23c <prvAddNewTaskToReadyList+0xc8>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	4a18      	ldr	r2, [pc, #96]	; (800c23c <prvAddNewTaskToReadyList+0xc8>)
 800c1dc:	6013      	str	r3, [r2, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	4413      	add	r3, r2
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	4a15      	ldr	r2, [pc, #84]	; (800c240 <prvAddNewTaskToReadyList+0xcc>)
 800c1ec:	441a      	add	r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	f7fe fecc 	bl	800af92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c1fa:	f000 fffb 	bl	800d1f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c1fe:	4b0d      	ldr	r3, [pc, #52]	; (800c234 <prvAddNewTaskToReadyList+0xc0>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00e      	beq.n	800c224 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c206:	4b0a      	ldr	r3, [pc, #40]	; (800c230 <prvAddNewTaskToReadyList+0xbc>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c210:	429a      	cmp	r2, r3
 800c212:	d207      	bcs.n	800c224 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c214:	4b0b      	ldr	r3, [pc, #44]	; (800c244 <prvAddNewTaskToReadyList+0xd0>)
 800c216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c21a:	601a      	str	r2, [r3, #0]
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c224:	bf00      	nop
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	2000042c 	.word	0x2000042c
 800c230:	2000032c 	.word	0x2000032c
 800c234:	20000438 	.word	0x20000438
 800c238:	20000448 	.word	0x20000448
 800c23c:	20000434 	.word	0x20000434
 800c240:	20000330 	.word	0x20000330
 800c244:	e000ed04 	.word	0xe000ed04

0800c248 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c250:	2300      	movs	r3, #0
 800c252:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d017      	beq.n	800c28a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c25a:	4b13      	ldr	r3, [pc, #76]	; (800c2a8 <vTaskDelay+0x60>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00a      	beq.n	800c278 <vTaskDelay+0x30>
	__asm volatile
 800c262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c266:	f383 8811 	msr	BASEPRI, r3
 800c26a:	f3bf 8f6f 	isb	sy
 800c26e:	f3bf 8f4f 	dsb	sy
 800c272:	60bb      	str	r3, [r7, #8]
}
 800c274:	bf00      	nop
 800c276:	e7fe      	b.n	800c276 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c278:	f000 f87a 	bl	800c370 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c27c:	2100      	movs	r1, #0
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fdf2 	bl	800ce68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c284:	f000 f882 	bl	800c38c <xTaskResumeAll>
 800c288:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d107      	bne.n	800c2a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c290:	4b06      	ldr	r3, [pc, #24]	; (800c2ac <vTaskDelay+0x64>)
 800c292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2a0:	bf00      	nop
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	20000454 	.word	0x20000454
 800c2ac:	e000ed04 	.word	0xe000ed04

0800c2b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b08a      	sub	sp, #40	; 0x28
 800c2b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c2be:	463a      	mov	r2, r7
 800c2c0:	1d39      	adds	r1, r7, #4
 800c2c2:	f107 0308 	add.w	r3, r7, #8
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7f4 f95e 	bl	8000588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	9202      	str	r2, [sp, #8]
 800c2d4:	9301      	str	r3, [sp, #4]
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	9300      	str	r3, [sp, #0]
 800c2da:	2300      	movs	r3, #0
 800c2dc:	460a      	mov	r2, r1
 800c2de:	491e      	ldr	r1, [pc, #120]	; (800c358 <vTaskStartScheduler+0xa8>)
 800c2e0:	481e      	ldr	r0, [pc, #120]	; (800c35c <vTaskStartScheduler+0xac>)
 800c2e2:	f7ff fe1d 	bl	800bf20 <xTaskCreateStatic>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	4a1d      	ldr	r2, [pc, #116]	; (800c360 <vTaskStartScheduler+0xb0>)
 800c2ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c2ec:	4b1c      	ldr	r3, [pc, #112]	; (800c360 <vTaskStartScheduler+0xb0>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d002      	beq.n	800c2fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	617b      	str	r3, [r7, #20]
 800c2f8:	e001      	b.n	800c2fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	2b01      	cmp	r3, #1
 800c302:	d116      	bne.n	800c332 <vTaskStartScheduler+0x82>
	__asm volatile
 800c304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c308:	f383 8811 	msr	BASEPRI, r3
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	613b      	str	r3, [r7, #16]
}
 800c316:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c318:	4b12      	ldr	r3, [pc, #72]	; (800c364 <vTaskStartScheduler+0xb4>)
 800c31a:	f04f 32ff 	mov.w	r2, #4294967295
 800c31e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c320:	4b11      	ldr	r3, [pc, #68]	; (800c368 <vTaskStartScheduler+0xb8>)
 800c322:	2201      	movs	r2, #1
 800c324:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c326:	4b11      	ldr	r3, [pc, #68]	; (800c36c <vTaskStartScheduler+0xbc>)
 800c328:	2200      	movs	r2, #0
 800c32a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c32c:	f000 fe90 	bl	800d050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c330:	e00e      	b.n	800c350 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c338:	d10a      	bne.n	800c350 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33e:	f383 8811 	msr	BASEPRI, r3
 800c342:	f3bf 8f6f 	isb	sy
 800c346:	f3bf 8f4f 	dsb	sy
 800c34a:	60fb      	str	r3, [r7, #12]
}
 800c34c:	bf00      	nop
 800c34e:	e7fe      	b.n	800c34e <vTaskStartScheduler+0x9e>
}
 800c350:	bf00      	nop
 800c352:	3718      	adds	r7, #24
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	0801bb2c 	.word	0x0801bb2c
 800c35c:	0800c945 	.word	0x0800c945
 800c360:	20000450 	.word	0x20000450
 800c364:	2000044c 	.word	0x2000044c
 800c368:	20000438 	.word	0x20000438
 800c36c:	20000430 	.word	0x20000430

0800c370 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c370:	b480      	push	{r7}
 800c372:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c374:	4b04      	ldr	r3, [pc, #16]	; (800c388 <vTaskSuspendAll+0x18>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	3301      	adds	r3, #1
 800c37a:	4a03      	ldr	r2, [pc, #12]	; (800c388 <vTaskSuspendAll+0x18>)
 800c37c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c37e:	bf00      	nop
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr
 800c388:	20000454 	.word	0x20000454

0800c38c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c392:	2300      	movs	r3, #0
 800c394:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c396:	2300      	movs	r3, #0
 800c398:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c39a:	4b41      	ldr	r3, [pc, #260]	; (800c4a0 <xTaskResumeAll+0x114>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10a      	bne.n	800c3b8 <xTaskResumeAll+0x2c>
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	603b      	str	r3, [r7, #0]
}
 800c3b4:	bf00      	nop
 800c3b6:	e7fe      	b.n	800c3b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c3b8:	f000 feec 	bl	800d194 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c3bc:	4b38      	ldr	r3, [pc, #224]	; (800c4a0 <xTaskResumeAll+0x114>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	4a37      	ldr	r2, [pc, #220]	; (800c4a0 <xTaskResumeAll+0x114>)
 800c3c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3c6:	4b36      	ldr	r3, [pc, #216]	; (800c4a0 <xTaskResumeAll+0x114>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d161      	bne.n	800c492 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c3ce:	4b35      	ldr	r3, [pc, #212]	; (800c4a4 <xTaskResumeAll+0x118>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d05d      	beq.n	800c492 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3d6:	e02e      	b.n	800c436 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3d8:	4b33      	ldr	r3, [pc, #204]	; (800c4a8 <xTaskResumeAll+0x11c>)
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	3318      	adds	r3, #24
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fe fe31 	bl	800b04c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7fe fe2c 	bl	800b04c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	409a      	lsls	r2, r3
 800c3fc:	4b2b      	ldr	r3, [pc, #172]	; (800c4ac <xTaskResumeAll+0x120>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4313      	orrs	r3, r2
 800c402:	4a2a      	ldr	r2, [pc, #168]	; (800c4ac <xTaskResumeAll+0x120>)
 800c404:	6013      	str	r3, [r2, #0]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c40a:	4613      	mov	r3, r2
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	4413      	add	r3, r2
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	4a27      	ldr	r2, [pc, #156]	; (800c4b0 <xTaskResumeAll+0x124>)
 800c414:	441a      	add	r2, r3
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	3304      	adds	r3, #4
 800c41a:	4619      	mov	r1, r3
 800c41c:	4610      	mov	r0, r2
 800c41e:	f7fe fdb8 	bl	800af92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c426:	4b23      	ldr	r3, [pc, #140]	; (800c4b4 <xTaskResumeAll+0x128>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d302      	bcc.n	800c436 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c430:	4b21      	ldr	r3, [pc, #132]	; (800c4b8 <xTaskResumeAll+0x12c>)
 800c432:	2201      	movs	r2, #1
 800c434:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c436:	4b1c      	ldr	r3, [pc, #112]	; (800c4a8 <xTaskResumeAll+0x11c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1cc      	bne.n	800c3d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d001      	beq.n	800c448 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c444:	f000 fb34 	bl	800cab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c448:	4b1c      	ldr	r3, [pc, #112]	; (800c4bc <xTaskResumeAll+0x130>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d010      	beq.n	800c476 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c454:	f000 f858 	bl	800c508 <xTaskIncrementTick>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d002      	beq.n	800c464 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c45e:	4b16      	ldr	r3, [pc, #88]	; (800c4b8 <xTaskResumeAll+0x12c>)
 800c460:	2201      	movs	r2, #1
 800c462:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	3b01      	subs	r3, #1
 800c468:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1f1      	bne.n	800c454 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c470:	4b12      	ldr	r3, [pc, #72]	; (800c4bc <xTaskResumeAll+0x130>)
 800c472:	2200      	movs	r2, #0
 800c474:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c476:	4b10      	ldr	r3, [pc, #64]	; (800c4b8 <xTaskResumeAll+0x12c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d009      	beq.n	800c492 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c47e:	2301      	movs	r3, #1
 800c480:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c482:	4b0f      	ldr	r3, [pc, #60]	; (800c4c0 <xTaskResumeAll+0x134>)
 800c484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c488:	601a      	str	r2, [r3, #0]
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c492:	f000 feaf 	bl	800d1f4 <vPortExitCritical>

	return xAlreadyYielded;
 800c496:	68bb      	ldr	r3, [r7, #8]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	20000454 	.word	0x20000454
 800c4a4:	2000042c 	.word	0x2000042c
 800c4a8:	200003ec 	.word	0x200003ec
 800c4ac:	20000434 	.word	0x20000434
 800c4b0:	20000330 	.word	0x20000330
 800c4b4:	2000032c 	.word	0x2000032c
 800c4b8:	20000440 	.word	0x20000440
 800c4bc:	2000043c 	.word	0x2000043c
 800c4c0:	e000ed04 	.word	0xe000ed04

0800c4c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c4ca:	4b05      	ldr	r3, [pc, #20]	; (800c4e0 <xTaskGetTickCount+0x1c>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c4d0:	687b      	ldr	r3, [r7, #4]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	370c      	adds	r7, #12
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	20000430 	.word	0x20000430

0800c4e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4ea:	f000 ff35 	bl	800d358 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c4f2:	4b04      	ldr	r3, [pc, #16]	; (800c504 <xTaskGetTickCountFromISR+0x20>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4f8:	683b      	ldr	r3, [r7, #0]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	20000430 	.word	0x20000430

0800c508 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b086      	sub	sp, #24
 800c50c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c50e:	2300      	movs	r3, #0
 800c510:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c512:	4b4e      	ldr	r3, [pc, #312]	; (800c64c <xTaskIncrementTick+0x144>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	f040 808e 	bne.w	800c638 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c51c:	4b4c      	ldr	r3, [pc, #304]	; (800c650 <xTaskIncrementTick+0x148>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	3301      	adds	r3, #1
 800c522:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c524:	4a4a      	ldr	r2, [pc, #296]	; (800c650 <xTaskIncrementTick+0x148>)
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d120      	bne.n	800c572 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c530:	4b48      	ldr	r3, [pc, #288]	; (800c654 <xTaskIncrementTick+0x14c>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00a      	beq.n	800c550 <xTaskIncrementTick+0x48>
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	603b      	str	r3, [r7, #0]
}
 800c54c:	bf00      	nop
 800c54e:	e7fe      	b.n	800c54e <xTaskIncrementTick+0x46>
 800c550:	4b40      	ldr	r3, [pc, #256]	; (800c654 <xTaskIncrementTick+0x14c>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	60fb      	str	r3, [r7, #12]
 800c556:	4b40      	ldr	r3, [pc, #256]	; (800c658 <xTaskIncrementTick+0x150>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a3e      	ldr	r2, [pc, #248]	; (800c654 <xTaskIncrementTick+0x14c>)
 800c55c:	6013      	str	r3, [r2, #0]
 800c55e:	4a3e      	ldr	r2, [pc, #248]	; (800c658 <xTaskIncrementTick+0x150>)
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6013      	str	r3, [r2, #0]
 800c564:	4b3d      	ldr	r3, [pc, #244]	; (800c65c <xTaskIncrementTick+0x154>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	3301      	adds	r3, #1
 800c56a:	4a3c      	ldr	r2, [pc, #240]	; (800c65c <xTaskIncrementTick+0x154>)
 800c56c:	6013      	str	r3, [r2, #0]
 800c56e:	f000 fa9f 	bl	800cab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c572:	4b3b      	ldr	r3, [pc, #236]	; (800c660 <xTaskIncrementTick+0x158>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d348      	bcc.n	800c60e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c57c:	4b35      	ldr	r3, [pc, #212]	; (800c654 <xTaskIncrementTick+0x14c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d104      	bne.n	800c590 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c586:	4b36      	ldr	r3, [pc, #216]	; (800c660 <xTaskIncrementTick+0x158>)
 800c588:	f04f 32ff 	mov.w	r2, #4294967295
 800c58c:	601a      	str	r2, [r3, #0]
					break;
 800c58e:	e03e      	b.n	800c60e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c590:	4b30      	ldr	r3, [pc, #192]	; (800c654 <xTaskIncrementTick+0x14c>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d203      	bcs.n	800c5b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c5a8:	4a2d      	ldr	r2, [pc, #180]	; (800c660 <xTaskIncrementTick+0x158>)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c5ae:	e02e      	b.n	800c60e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	3304      	adds	r3, #4
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fe fd49 	bl	800b04c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d004      	beq.n	800c5cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	3318      	adds	r3, #24
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fe fd40 	bl	800b04c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	409a      	lsls	r2, r3
 800c5d4:	4b23      	ldr	r3, [pc, #140]	; (800c664 <xTaskIncrementTick+0x15c>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	4a22      	ldr	r2, [pc, #136]	; (800c664 <xTaskIncrementTick+0x15c>)
 800c5dc:	6013      	str	r3, [r2, #0]
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	4413      	add	r3, r2
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	4a1f      	ldr	r2, [pc, #124]	; (800c668 <xTaskIncrementTick+0x160>)
 800c5ec:	441a      	add	r2, r3
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	3304      	adds	r3, #4
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	4610      	mov	r0, r2
 800c5f6:	f7fe fccc 	bl	800af92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5fe:	4b1b      	ldr	r3, [pc, #108]	; (800c66c <xTaskIncrementTick+0x164>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c604:	429a      	cmp	r2, r3
 800c606:	d3b9      	bcc.n	800c57c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c608:	2301      	movs	r3, #1
 800c60a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c60c:	e7b6      	b.n	800c57c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c60e:	4b17      	ldr	r3, [pc, #92]	; (800c66c <xTaskIncrementTick+0x164>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c614:	4914      	ldr	r1, [pc, #80]	; (800c668 <xTaskIncrementTick+0x160>)
 800c616:	4613      	mov	r3, r2
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	4413      	add	r3, r2
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	440b      	add	r3, r1
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2b01      	cmp	r3, #1
 800c624:	d901      	bls.n	800c62a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c626:	2301      	movs	r3, #1
 800c628:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c62a:	4b11      	ldr	r3, [pc, #68]	; (800c670 <xTaskIncrementTick+0x168>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d007      	beq.n	800c642 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c632:	2301      	movs	r3, #1
 800c634:	617b      	str	r3, [r7, #20]
 800c636:	e004      	b.n	800c642 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c638:	4b0e      	ldr	r3, [pc, #56]	; (800c674 <xTaskIncrementTick+0x16c>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	3301      	adds	r3, #1
 800c63e:	4a0d      	ldr	r2, [pc, #52]	; (800c674 <xTaskIncrementTick+0x16c>)
 800c640:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c642:	697b      	ldr	r3, [r7, #20]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3718      	adds	r7, #24
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	20000454 	.word	0x20000454
 800c650:	20000430 	.word	0x20000430
 800c654:	200003e4 	.word	0x200003e4
 800c658:	200003e8 	.word	0x200003e8
 800c65c:	20000444 	.word	0x20000444
 800c660:	2000044c 	.word	0x2000044c
 800c664:	20000434 	.word	0x20000434
 800c668:	20000330 	.word	0x20000330
 800c66c:	2000032c 	.word	0x2000032c
 800c670:	20000440 	.word	0x20000440
 800c674:	2000043c 	.word	0x2000043c

0800c678 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c678:	b480      	push	{r7}
 800c67a:	b087      	sub	sp, #28
 800c67c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c67e:	4b27      	ldr	r3, [pc, #156]	; (800c71c <vTaskSwitchContext+0xa4>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d003      	beq.n	800c68e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c686:	4b26      	ldr	r3, [pc, #152]	; (800c720 <vTaskSwitchContext+0xa8>)
 800c688:	2201      	movs	r2, #1
 800c68a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c68c:	e03f      	b.n	800c70e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c68e:	4b24      	ldr	r3, [pc, #144]	; (800c720 <vTaskSwitchContext+0xa8>)
 800c690:	2200      	movs	r2, #0
 800c692:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c694:	4b23      	ldr	r3, [pc, #140]	; (800c724 <vTaskSwitchContext+0xac>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	fab3 f383 	clz	r3, r3
 800c6a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c6a2:	7afb      	ldrb	r3, [r7, #11]
 800c6a4:	f1c3 031f 	rsb	r3, r3, #31
 800c6a8:	617b      	str	r3, [r7, #20]
 800c6aa:	491f      	ldr	r1, [pc, #124]	; (800c728 <vTaskSwitchContext+0xb0>)
 800c6ac:	697a      	ldr	r2, [r7, #20]
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	4413      	add	r3, r2
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	440b      	add	r3, r1
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10a      	bne.n	800c6d4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	607b      	str	r3, [r7, #4]
}
 800c6d0:	bf00      	nop
 800c6d2:	e7fe      	b.n	800c6d2 <vTaskSwitchContext+0x5a>
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4413      	add	r3, r2
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	4a12      	ldr	r2, [pc, #72]	; (800c728 <vTaskSwitchContext+0xb0>)
 800c6e0:	4413      	add	r3, r2
 800c6e2:	613b      	str	r3, [r7, #16]
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	685a      	ldr	r2, [r3, #4]
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	605a      	str	r2, [r3, #4]
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	3308      	adds	r3, #8
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d104      	bne.n	800c704 <vTaskSwitchContext+0x8c>
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	685a      	ldr	r2, [r3, #4]
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	605a      	str	r2, [r3, #4]
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	4a08      	ldr	r2, [pc, #32]	; (800c72c <vTaskSwitchContext+0xb4>)
 800c70c:	6013      	str	r3, [r2, #0]
}
 800c70e:	bf00      	nop
 800c710:	371c      	adds	r7, #28
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	20000454 	.word	0x20000454
 800c720:	20000440 	.word	0x20000440
 800c724:	20000434 	.word	0x20000434
 800c728:	20000330 	.word	0x20000330
 800c72c:	2000032c 	.word	0x2000032c

0800c730 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d10a      	bne.n	800c756 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c744:	f383 8811 	msr	BASEPRI, r3
 800c748:	f3bf 8f6f 	isb	sy
 800c74c:	f3bf 8f4f 	dsb	sy
 800c750:	60fb      	str	r3, [r7, #12]
}
 800c752:	bf00      	nop
 800c754:	e7fe      	b.n	800c754 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c756:	4b07      	ldr	r3, [pc, #28]	; (800c774 <vTaskPlaceOnEventList+0x44>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	3318      	adds	r3, #24
 800c75c:	4619      	mov	r1, r3
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f7fe fc3b 	bl	800afda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c764:	2101      	movs	r1, #1
 800c766:	6838      	ldr	r0, [r7, #0]
 800c768:	f000 fb7e 	bl	800ce68 <prvAddCurrentTaskToDelayedList>
}
 800c76c:	bf00      	nop
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	2000032c 	.word	0x2000032c

0800c778 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10a      	bne.n	800c7a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	60fb      	str	r3, [r7, #12]
}
 800c7a0:	bf00      	nop
 800c7a2:	e7fe      	b.n	800c7a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	3318      	adds	r3, #24
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fe fc4f 	bl	800b04c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7ae:	4b1d      	ldr	r3, [pc, #116]	; (800c824 <xTaskRemoveFromEventList+0xac>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d11c      	bne.n	800c7f0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7fe fc46 	bl	800b04c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	409a      	lsls	r2, r3
 800c7c8:	4b17      	ldr	r3, [pc, #92]	; (800c828 <xTaskRemoveFromEventList+0xb0>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	4a16      	ldr	r2, [pc, #88]	; (800c828 <xTaskRemoveFromEventList+0xb0>)
 800c7d0:	6013      	str	r3, [r2, #0]
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	4413      	add	r3, r2
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	4a13      	ldr	r2, [pc, #76]	; (800c82c <xTaskRemoveFromEventList+0xb4>)
 800c7e0:	441a      	add	r2, r3
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	f7fe fbd2 	bl	800af92 <vListInsertEnd>
 800c7ee:	e005      	b.n	800c7fc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	3318      	adds	r3, #24
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	480e      	ldr	r0, [pc, #56]	; (800c830 <xTaskRemoveFromEventList+0xb8>)
 800c7f8:	f7fe fbcb 	bl	800af92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c800:	4b0c      	ldr	r3, [pc, #48]	; (800c834 <xTaskRemoveFromEventList+0xbc>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c806:	429a      	cmp	r2, r3
 800c808:	d905      	bls.n	800c816 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c80a:	2301      	movs	r3, #1
 800c80c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c80e:	4b0a      	ldr	r3, [pc, #40]	; (800c838 <xTaskRemoveFromEventList+0xc0>)
 800c810:	2201      	movs	r2, #1
 800c812:	601a      	str	r2, [r3, #0]
 800c814:	e001      	b.n	800c81a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c816:	2300      	movs	r3, #0
 800c818:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c81a:	697b      	ldr	r3, [r7, #20]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	20000454 	.word	0x20000454
 800c828:	20000434 	.word	0x20000434
 800c82c:	20000330 	.word	0x20000330
 800c830:	200003ec 	.word	0x200003ec
 800c834:	2000032c 	.word	0x2000032c
 800c838:	20000440 	.word	0x20000440

0800c83c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c844:	4b06      	ldr	r3, [pc, #24]	; (800c860 <vTaskInternalSetTimeOutState+0x24>)
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c84c:	4b05      	ldr	r3, [pc, #20]	; (800c864 <vTaskInternalSetTimeOutState+0x28>)
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	605a      	str	r2, [r3, #4]
}
 800c854:	bf00      	nop
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	20000444 	.word	0x20000444
 800c864:	20000430 	.word	0x20000430

0800c868 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b088      	sub	sp, #32
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d10a      	bne.n	800c88e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87c:	f383 8811 	msr	BASEPRI, r3
 800c880:	f3bf 8f6f 	isb	sy
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	613b      	str	r3, [r7, #16]
}
 800c88a:	bf00      	nop
 800c88c:	e7fe      	b.n	800c88c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d10a      	bne.n	800c8aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c898:	f383 8811 	msr	BASEPRI, r3
 800c89c:	f3bf 8f6f 	isb	sy
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	60fb      	str	r3, [r7, #12]
}
 800c8a6:	bf00      	nop
 800c8a8:	e7fe      	b.n	800c8a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c8aa:	f000 fc73 	bl	800d194 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c8ae:	4b1d      	ldr	r3, [pc, #116]	; (800c924 <xTaskCheckForTimeOut+0xbc>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	69ba      	ldr	r2, [r7, #24]
 800c8ba:	1ad3      	subs	r3, r2, r3
 800c8bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c6:	d102      	bne.n	800c8ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	61fb      	str	r3, [r7, #28]
 800c8cc:	e023      	b.n	800c916 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	4b15      	ldr	r3, [pc, #84]	; (800c928 <xTaskCheckForTimeOut+0xc0>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d007      	beq.n	800c8ea <xTaskCheckForTimeOut+0x82>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	69ba      	ldr	r2, [r7, #24]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d302      	bcc.n	800c8ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	61fb      	str	r3, [r7, #28]
 800c8e8:	e015      	b.n	800c916 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d20b      	bcs.n	800c90c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	1ad2      	subs	r2, r2, r3
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7ff ff9b 	bl	800c83c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c906:	2300      	movs	r3, #0
 800c908:	61fb      	str	r3, [r7, #28]
 800c90a:	e004      	b.n	800c916 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	2200      	movs	r2, #0
 800c910:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c912:	2301      	movs	r3, #1
 800c914:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c916:	f000 fc6d 	bl	800d1f4 <vPortExitCritical>

	return xReturn;
 800c91a:	69fb      	ldr	r3, [r7, #28]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3720      	adds	r7, #32
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	20000430 	.word	0x20000430
 800c928:	20000444 	.word	0x20000444

0800c92c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c92c:	b480      	push	{r7}
 800c92e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c930:	4b03      	ldr	r3, [pc, #12]	; (800c940 <vTaskMissedYield+0x14>)
 800c932:	2201      	movs	r2, #1
 800c934:	601a      	str	r2, [r3, #0]
}
 800c936:	bf00      	nop
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr
 800c940:	20000440 	.word	0x20000440

0800c944 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c94c:	f000 f852 	bl	800c9f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c950:	4b06      	ldr	r3, [pc, #24]	; (800c96c <prvIdleTask+0x28>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d9f9      	bls.n	800c94c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c958:	4b05      	ldr	r3, [pc, #20]	; (800c970 <prvIdleTask+0x2c>)
 800c95a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c95e:	601a      	str	r2, [r3, #0]
 800c960:	f3bf 8f4f 	dsb	sy
 800c964:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c968:	e7f0      	b.n	800c94c <prvIdleTask+0x8>
 800c96a:	bf00      	nop
 800c96c:	20000330 	.word	0x20000330
 800c970:	e000ed04 	.word	0xe000ed04

0800c974 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c97a:	2300      	movs	r3, #0
 800c97c:	607b      	str	r3, [r7, #4]
 800c97e:	e00c      	b.n	800c99a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	4613      	mov	r3, r2
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	4413      	add	r3, r2
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4a12      	ldr	r2, [pc, #72]	; (800c9d4 <prvInitialiseTaskLists+0x60>)
 800c98c:	4413      	add	r3, r2
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fe fad2 	bl	800af38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	3301      	adds	r3, #1
 800c998:	607b      	str	r3, [r7, #4]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b06      	cmp	r3, #6
 800c99e:	d9ef      	bls.n	800c980 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c9a0:	480d      	ldr	r0, [pc, #52]	; (800c9d8 <prvInitialiseTaskLists+0x64>)
 800c9a2:	f7fe fac9 	bl	800af38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c9a6:	480d      	ldr	r0, [pc, #52]	; (800c9dc <prvInitialiseTaskLists+0x68>)
 800c9a8:	f7fe fac6 	bl	800af38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c9ac:	480c      	ldr	r0, [pc, #48]	; (800c9e0 <prvInitialiseTaskLists+0x6c>)
 800c9ae:	f7fe fac3 	bl	800af38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c9b2:	480c      	ldr	r0, [pc, #48]	; (800c9e4 <prvInitialiseTaskLists+0x70>)
 800c9b4:	f7fe fac0 	bl	800af38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c9b8:	480b      	ldr	r0, [pc, #44]	; (800c9e8 <prvInitialiseTaskLists+0x74>)
 800c9ba:	f7fe fabd 	bl	800af38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c9be:	4b0b      	ldr	r3, [pc, #44]	; (800c9ec <prvInitialiseTaskLists+0x78>)
 800c9c0:	4a05      	ldr	r2, [pc, #20]	; (800c9d8 <prvInitialiseTaskLists+0x64>)
 800c9c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c9c4:	4b0a      	ldr	r3, [pc, #40]	; (800c9f0 <prvInitialiseTaskLists+0x7c>)
 800c9c6:	4a05      	ldr	r2, [pc, #20]	; (800c9dc <prvInitialiseTaskLists+0x68>)
 800c9c8:	601a      	str	r2, [r3, #0]
}
 800c9ca:	bf00      	nop
 800c9cc:	3708      	adds	r7, #8
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	20000330 	.word	0x20000330
 800c9d8:	200003bc 	.word	0x200003bc
 800c9dc:	200003d0 	.word	0x200003d0
 800c9e0:	200003ec 	.word	0x200003ec
 800c9e4:	20000400 	.word	0x20000400
 800c9e8:	20000418 	.word	0x20000418
 800c9ec:	200003e4 	.word	0x200003e4
 800c9f0:	200003e8 	.word	0x200003e8

0800c9f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9fa:	e019      	b.n	800ca30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c9fc:	f000 fbca 	bl	800d194 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca00:	4b10      	ldr	r3, [pc, #64]	; (800ca44 <prvCheckTasksWaitingTermination+0x50>)
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	3304      	adds	r3, #4
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fe fb1d 	bl	800b04c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca12:	4b0d      	ldr	r3, [pc, #52]	; (800ca48 <prvCheckTasksWaitingTermination+0x54>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	3b01      	subs	r3, #1
 800ca18:	4a0b      	ldr	r2, [pc, #44]	; (800ca48 <prvCheckTasksWaitingTermination+0x54>)
 800ca1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca1c:	4b0b      	ldr	r3, [pc, #44]	; (800ca4c <prvCheckTasksWaitingTermination+0x58>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	3b01      	subs	r3, #1
 800ca22:	4a0a      	ldr	r2, [pc, #40]	; (800ca4c <prvCheckTasksWaitingTermination+0x58>)
 800ca24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca26:	f000 fbe5 	bl	800d1f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 f810 	bl	800ca50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca30:	4b06      	ldr	r3, [pc, #24]	; (800ca4c <prvCheckTasksWaitingTermination+0x58>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1e1      	bne.n	800c9fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ca38:	bf00      	nop
 800ca3a:	bf00      	nop
 800ca3c:	3708      	adds	r7, #8
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	20000400 	.word	0x20000400
 800ca48:	2000042c 	.word	0x2000042c
 800ca4c:	20000414 	.word	0x20000414

0800ca50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d108      	bne.n	800ca74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca66:	4618      	mov	r0, r3
 800ca68:	f000 fd82 	bl	800d570 <vPortFree>
				vPortFree( pxTCB );
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 fd7f 	bl	800d570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ca72:	e018      	b.n	800caa6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d103      	bne.n	800ca86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 fd76 	bl	800d570 <vPortFree>
	}
 800ca84:	e00f      	b.n	800caa6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d00a      	beq.n	800caa6 <prvDeleteTCB+0x56>
	__asm volatile
 800ca90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca94:	f383 8811 	msr	BASEPRI, r3
 800ca98:	f3bf 8f6f 	isb	sy
 800ca9c:	f3bf 8f4f 	dsb	sy
 800caa0:	60fb      	str	r3, [r7, #12]
}
 800caa2:	bf00      	nop
 800caa4:	e7fe      	b.n	800caa4 <prvDeleteTCB+0x54>
	}
 800caa6:	bf00      	nop
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
	...

0800cab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cab6:	4b0c      	ldr	r3, [pc, #48]	; (800cae8 <prvResetNextTaskUnblockTime+0x38>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d104      	bne.n	800caca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cac0:	4b0a      	ldr	r3, [pc, #40]	; (800caec <prvResetNextTaskUnblockTime+0x3c>)
 800cac2:	f04f 32ff 	mov.w	r2, #4294967295
 800cac6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cac8:	e008      	b.n	800cadc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caca:	4b07      	ldr	r3, [pc, #28]	; (800cae8 <prvResetNextTaskUnblockTime+0x38>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	4a04      	ldr	r2, [pc, #16]	; (800caec <prvResetNextTaskUnblockTime+0x3c>)
 800cada:	6013      	str	r3, [r2, #0]
}
 800cadc:	bf00      	nop
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr
 800cae8:	200003e4 	.word	0x200003e4
 800caec:	2000044c 	.word	0x2000044c

0800caf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800caf6:	4b0b      	ldr	r3, [pc, #44]	; (800cb24 <xTaskGetSchedulerState+0x34>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d102      	bne.n	800cb04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cafe:	2301      	movs	r3, #1
 800cb00:	607b      	str	r3, [r7, #4]
 800cb02:	e008      	b.n	800cb16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb04:	4b08      	ldr	r3, [pc, #32]	; (800cb28 <xTaskGetSchedulerState+0x38>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d102      	bne.n	800cb12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	607b      	str	r3, [r7, #4]
 800cb10:	e001      	b.n	800cb16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb12:	2300      	movs	r3, #0
 800cb14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb16:	687b      	ldr	r3, [r7, #4]
	}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	20000438 	.word	0x20000438
 800cb28:	20000454 	.word	0x20000454

0800cb2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d05e      	beq.n	800cc00 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb46:	4b31      	ldr	r3, [pc, #196]	; (800cc0c <xTaskPriorityInherit+0xe0>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d24e      	bcs.n	800cbee <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	699b      	ldr	r3, [r3, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	db06      	blt.n	800cb66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb58:	4b2c      	ldr	r3, [pc, #176]	; (800cc0c <xTaskPriorityInherit+0xe0>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb5e:	f1c3 0207 	rsb	r2, r3, #7
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	6959      	ldr	r1, [r3, #20]
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb6e:	4613      	mov	r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	4413      	add	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4a26      	ldr	r2, [pc, #152]	; (800cc10 <xTaskPriorityInherit+0xe4>)
 800cb78:	4413      	add	r3, r2
 800cb7a:	4299      	cmp	r1, r3
 800cb7c:	d12f      	bne.n	800cbde <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	3304      	adds	r3, #4
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fe fa62 	bl	800b04c <uxListRemove>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d10a      	bne.n	800cba4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb92:	2201      	movs	r2, #1
 800cb94:	fa02 f303 	lsl.w	r3, r2, r3
 800cb98:	43da      	mvns	r2, r3
 800cb9a:	4b1e      	ldr	r3, [pc, #120]	; (800cc14 <xTaskPriorityInherit+0xe8>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4013      	ands	r3, r2
 800cba0:	4a1c      	ldr	r2, [pc, #112]	; (800cc14 <xTaskPriorityInherit+0xe8>)
 800cba2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cba4:	4b19      	ldr	r3, [pc, #100]	; (800cc0c <xTaskPriorityInherit+0xe0>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	409a      	lsls	r2, r3
 800cbb6:	4b17      	ldr	r3, [pc, #92]	; (800cc14 <xTaskPriorityInherit+0xe8>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	4a15      	ldr	r2, [pc, #84]	; (800cc14 <xTaskPriorityInherit+0xe8>)
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	4413      	add	r3, r2
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	4a10      	ldr	r2, [pc, #64]	; (800cc10 <xTaskPriorityInherit+0xe4>)
 800cbce:	441a      	add	r2, r3
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	4610      	mov	r0, r2
 800cbd8:	f7fe f9db 	bl	800af92 <vListInsertEnd>
 800cbdc:	e004      	b.n	800cbe8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cbde:	4b0b      	ldr	r3, [pc, #44]	; (800cc0c <xTaskPriorityInherit+0xe0>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	60fb      	str	r3, [r7, #12]
 800cbec:	e008      	b.n	800cc00 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbf2:	4b06      	ldr	r3, [pc, #24]	; (800cc0c <xTaskPriorityInherit+0xe0>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d201      	bcs.n	800cc00 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc00:	68fb      	ldr	r3, [r7, #12]
	}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	2000032c 	.word	0x2000032c
 800cc10:	20000330 	.word	0x20000330
 800cc14:	20000434 	.word	0x20000434

0800cc18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b086      	sub	sp, #24
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cc24:	2300      	movs	r3, #0
 800cc26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d06e      	beq.n	800cd0c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cc2e:	4b3a      	ldr	r3, [pc, #232]	; (800cd18 <xTaskPriorityDisinherit+0x100>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	693a      	ldr	r2, [r7, #16]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d00a      	beq.n	800cc4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3c:	f383 8811 	msr	BASEPRI, r3
 800cc40:	f3bf 8f6f 	isb	sy
 800cc44:	f3bf 8f4f 	dsb	sy
 800cc48:	60fb      	str	r3, [r7, #12]
}
 800cc4a:	bf00      	nop
 800cc4c:	e7fe      	b.n	800cc4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d10a      	bne.n	800cc6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5a:	f383 8811 	msr	BASEPRI, r3
 800cc5e:	f3bf 8f6f 	isb	sy
 800cc62:	f3bf 8f4f 	dsb	sy
 800cc66:	60bb      	str	r3, [r7, #8]
}
 800cc68:	bf00      	nop
 800cc6a:	e7fe      	b.n	800cc6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc70:	1e5a      	subs	r2, r3, #1
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d044      	beq.n	800cd0c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d140      	bne.n	800cd0c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	3304      	adds	r3, #4
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fe f9dc 	bl	800b04c <uxListRemove>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d115      	bne.n	800ccc6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc9e:	491f      	ldr	r1, [pc, #124]	; (800cd1c <xTaskPriorityDisinherit+0x104>)
 800cca0:	4613      	mov	r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	4413      	add	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	440b      	add	r3, r1
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10a      	bne.n	800ccc6 <xTaskPriorityDisinherit+0xae>
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	fa02 f303 	lsl.w	r3, r2, r3
 800ccba:	43da      	mvns	r2, r3
 800ccbc:	4b18      	ldr	r3, [pc, #96]	; (800cd20 <xTaskPriorityDisinherit+0x108>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	4a17      	ldr	r2, [pc, #92]	; (800cd20 <xTaskPriorityDisinherit+0x108>)
 800ccc4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd2:	f1c3 0207 	rsb	r2, r3, #7
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccde:	2201      	movs	r2, #1
 800cce0:	409a      	lsls	r2, r3
 800cce2:	4b0f      	ldr	r3, [pc, #60]	; (800cd20 <xTaskPriorityDisinherit+0x108>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4313      	orrs	r3, r2
 800cce8:	4a0d      	ldr	r2, [pc, #52]	; (800cd20 <xTaskPriorityDisinherit+0x108>)
 800ccea:	6013      	str	r3, [r2, #0]
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	4413      	add	r3, r2
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	4a08      	ldr	r2, [pc, #32]	; (800cd1c <xTaskPriorityDisinherit+0x104>)
 800ccfa:	441a      	add	r2, r3
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	3304      	adds	r3, #4
 800cd00:	4619      	mov	r1, r3
 800cd02:	4610      	mov	r0, r2
 800cd04:	f7fe f945 	bl	800af92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cd08:	2301      	movs	r3, #1
 800cd0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd0c:	697b      	ldr	r3, [r7, #20]
	}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3718      	adds	r7, #24
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	2000032c 	.word	0x2000032c
 800cd1c:	20000330 	.word	0x20000330
 800cd20:	20000434 	.word	0x20000434

0800cd24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b088      	sub	sp, #32
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cd32:	2301      	movs	r3, #1
 800cd34:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d077      	beq.n	800ce2c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cd3c:	69bb      	ldr	r3, [r7, #24]
 800cd3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d10a      	bne.n	800cd5a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd48:	f383 8811 	msr	BASEPRI, r3
 800cd4c:	f3bf 8f6f 	isb	sy
 800cd50:	f3bf 8f4f 	dsb	sy
 800cd54:	60fb      	str	r3, [r7, #12]
}
 800cd56:	bf00      	nop
 800cd58:	e7fe      	b.n	800cd58 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd5e:	683a      	ldr	r2, [r7, #0]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d902      	bls.n	800cd6a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	61fb      	str	r3, [r7, #28]
 800cd68:	e002      	b.n	800cd70 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd6e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd74:	69fa      	ldr	r2, [r7, #28]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d058      	beq.n	800ce2c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd7e:	697a      	ldr	r2, [r7, #20]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d153      	bne.n	800ce2c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cd84:	4b2b      	ldr	r3, [pc, #172]	; (800ce34 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	69ba      	ldr	r2, [r7, #24]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d10a      	bne.n	800cda4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	60bb      	str	r3, [r7, #8]
}
 800cda0:	bf00      	nop
 800cda2:	e7fe      	b.n	800cda2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	69fa      	ldr	r2, [r7, #28]
 800cdae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	699b      	ldr	r3, [r3, #24]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	db04      	blt.n	800cdc2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	f1c3 0207 	rsb	r2, r3, #7
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cdc2:	69bb      	ldr	r3, [r7, #24]
 800cdc4:	6959      	ldr	r1, [r3, #20]
 800cdc6:	693a      	ldr	r2, [r7, #16]
 800cdc8:	4613      	mov	r3, r2
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	4413      	add	r3, r2
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	4a19      	ldr	r2, [pc, #100]	; (800ce38 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cdd2:	4413      	add	r3, r2
 800cdd4:	4299      	cmp	r1, r3
 800cdd6:	d129      	bne.n	800ce2c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	3304      	adds	r3, #4
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fe f935 	bl	800b04c <uxListRemove>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d10a      	bne.n	800cdfe <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdec:	2201      	movs	r2, #1
 800cdee:	fa02 f303 	lsl.w	r3, r2, r3
 800cdf2:	43da      	mvns	r2, r3
 800cdf4:	4b11      	ldr	r3, [pc, #68]	; (800ce3c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4013      	ands	r3, r2
 800cdfa:	4a10      	ldr	r2, [pc, #64]	; (800ce3c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cdfc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce02:	2201      	movs	r2, #1
 800ce04:	409a      	lsls	r2, r3
 800ce06:	4b0d      	ldr	r3, [pc, #52]	; (800ce3c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	4a0b      	ldr	r2, [pc, #44]	; (800ce3c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ce0e:	6013      	str	r3, [r2, #0]
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce14:	4613      	mov	r3, r2
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	4413      	add	r3, r2
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	4a06      	ldr	r2, [pc, #24]	; (800ce38 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ce1e:	441a      	add	r2, r3
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	3304      	adds	r3, #4
 800ce24:	4619      	mov	r1, r3
 800ce26:	4610      	mov	r0, r2
 800ce28:	f7fe f8b3 	bl	800af92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce2c:	bf00      	nop
 800ce2e:	3720      	adds	r7, #32
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	2000032c 	.word	0x2000032c
 800ce38:	20000330 	.word	0x20000330
 800ce3c:	20000434 	.word	0x20000434

0800ce40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ce40:	b480      	push	{r7}
 800ce42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ce44:	4b07      	ldr	r3, [pc, #28]	; (800ce64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d004      	beq.n	800ce56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ce4c:	4b05      	ldr	r3, [pc, #20]	; (800ce64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ce52:	3201      	adds	r2, #1
 800ce54:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ce56:	4b03      	ldr	r3, [pc, #12]	; (800ce64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ce58:	681b      	ldr	r3, [r3, #0]
	}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr
 800ce64:	2000032c 	.word	0x2000032c

0800ce68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ce72:	4b29      	ldr	r3, [pc, #164]	; (800cf18 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce78:	4b28      	ldr	r3, [pc, #160]	; (800cf1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	3304      	adds	r3, #4
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7fe f8e4 	bl	800b04c <uxListRemove>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d10b      	bne.n	800cea2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ce8a:	4b24      	ldr	r3, [pc, #144]	; (800cf1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce90:	2201      	movs	r2, #1
 800ce92:	fa02 f303 	lsl.w	r3, r2, r3
 800ce96:	43da      	mvns	r2, r3
 800ce98:	4b21      	ldr	r3, [pc, #132]	; (800cf20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4013      	ands	r3, r2
 800ce9e:	4a20      	ldr	r2, [pc, #128]	; (800cf20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cea0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea8:	d10a      	bne.n	800cec0 <prvAddCurrentTaskToDelayedList+0x58>
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d007      	beq.n	800cec0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ceb0:	4b1a      	ldr	r3, [pc, #104]	; (800cf1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	481a      	ldr	r0, [pc, #104]	; (800cf24 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ceba:	f7fe f86a 	bl	800af92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cebe:	e026      	b.n	800cf0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	4413      	add	r3, r2
 800cec6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cec8:	4b14      	ldr	r3, [pc, #80]	; (800cf1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68ba      	ldr	r2, [r7, #8]
 800cece:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ced0:	68ba      	ldr	r2, [r7, #8]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d209      	bcs.n	800ceec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ced8:	4b13      	ldr	r3, [pc, #76]	; (800cf28 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	4b0f      	ldr	r3, [pc, #60]	; (800cf1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	3304      	adds	r3, #4
 800cee2:	4619      	mov	r1, r3
 800cee4:	4610      	mov	r0, r2
 800cee6:	f7fe f878 	bl	800afda <vListInsert>
}
 800ceea:	e010      	b.n	800cf0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ceec:	4b0f      	ldr	r3, [pc, #60]	; (800cf2c <prvAddCurrentTaskToDelayedList+0xc4>)
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	4b0a      	ldr	r3, [pc, #40]	; (800cf1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	3304      	adds	r3, #4
 800cef6:	4619      	mov	r1, r3
 800cef8:	4610      	mov	r0, r2
 800cefa:	f7fe f86e 	bl	800afda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cefe:	4b0c      	ldr	r3, [pc, #48]	; (800cf30 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	68ba      	ldr	r2, [r7, #8]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d202      	bcs.n	800cf0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cf08:	4a09      	ldr	r2, [pc, #36]	; (800cf30 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	6013      	str	r3, [r2, #0]
}
 800cf0e:	bf00      	nop
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	20000430 	.word	0x20000430
 800cf1c:	2000032c 	.word	0x2000032c
 800cf20:	20000434 	.word	0x20000434
 800cf24:	20000418 	.word	0x20000418
 800cf28:	200003e8 	.word	0x200003e8
 800cf2c:	200003e4 	.word	0x200003e4
 800cf30:	2000044c 	.word	0x2000044c

0800cf34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	3b04      	subs	r3, #4
 800cf44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cf4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	3b04      	subs	r3, #4
 800cf52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	f023 0201 	bic.w	r2, r3, #1
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	3b04      	subs	r3, #4
 800cf62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf64:	4a0c      	ldr	r2, [pc, #48]	; (800cf98 <pxPortInitialiseStack+0x64>)
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	3b14      	subs	r3, #20
 800cf6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	3b04      	subs	r3, #4
 800cf7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f06f 0202 	mvn.w	r2, #2
 800cf82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	3b20      	subs	r3, #32
 800cf88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3714      	adds	r7, #20
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr
 800cf98:	0800cf9d 	.word	0x0800cf9d

0800cf9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b085      	sub	sp, #20
 800cfa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cfa6:	4b12      	ldr	r3, [pc, #72]	; (800cff0 <prvTaskExitError+0x54>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfae:	d00a      	beq.n	800cfc6 <prvTaskExitError+0x2a>
	__asm volatile
 800cfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb4:	f383 8811 	msr	BASEPRI, r3
 800cfb8:	f3bf 8f6f 	isb	sy
 800cfbc:	f3bf 8f4f 	dsb	sy
 800cfc0:	60fb      	str	r3, [r7, #12]
}
 800cfc2:	bf00      	nop
 800cfc4:	e7fe      	b.n	800cfc4 <prvTaskExitError+0x28>
	__asm volatile
 800cfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	60bb      	str	r3, [r7, #8]
}
 800cfd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cfda:	bf00      	nop
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d0fc      	beq.n	800cfdc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cfe2:	bf00      	nop
 800cfe4:	bf00      	nop
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	2000002c 	.word	0x2000002c
	...

0800d000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d000:	4b07      	ldr	r3, [pc, #28]	; (800d020 <pxCurrentTCBConst2>)
 800d002:	6819      	ldr	r1, [r3, #0]
 800d004:	6808      	ldr	r0, [r1, #0]
 800d006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00a:	f380 8809 	msr	PSP, r0
 800d00e:	f3bf 8f6f 	isb	sy
 800d012:	f04f 0000 	mov.w	r0, #0
 800d016:	f380 8811 	msr	BASEPRI, r0
 800d01a:	4770      	bx	lr
 800d01c:	f3af 8000 	nop.w

0800d020 <pxCurrentTCBConst2>:
 800d020:	2000032c 	.word	0x2000032c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d024:	bf00      	nop
 800d026:	bf00      	nop

0800d028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d028:	4808      	ldr	r0, [pc, #32]	; (800d04c <prvPortStartFirstTask+0x24>)
 800d02a:	6800      	ldr	r0, [r0, #0]
 800d02c:	6800      	ldr	r0, [r0, #0]
 800d02e:	f380 8808 	msr	MSP, r0
 800d032:	f04f 0000 	mov.w	r0, #0
 800d036:	f380 8814 	msr	CONTROL, r0
 800d03a:	b662      	cpsie	i
 800d03c:	b661      	cpsie	f
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	f3bf 8f6f 	isb	sy
 800d046:	df00      	svc	0
 800d048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d04a:	bf00      	nop
 800d04c:	e000ed08 	.word	0xe000ed08

0800d050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d056:	4b46      	ldr	r3, [pc, #280]	; (800d170 <xPortStartScheduler+0x120>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a46      	ldr	r2, [pc, #280]	; (800d174 <xPortStartScheduler+0x124>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d10a      	bne.n	800d076 <xPortStartScheduler+0x26>
	__asm volatile
 800d060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d064:	f383 8811 	msr	BASEPRI, r3
 800d068:	f3bf 8f6f 	isb	sy
 800d06c:	f3bf 8f4f 	dsb	sy
 800d070:	613b      	str	r3, [r7, #16]
}
 800d072:	bf00      	nop
 800d074:	e7fe      	b.n	800d074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d076:	4b3e      	ldr	r3, [pc, #248]	; (800d170 <xPortStartScheduler+0x120>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a3f      	ldr	r2, [pc, #252]	; (800d178 <xPortStartScheduler+0x128>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d10a      	bne.n	800d096 <xPortStartScheduler+0x46>
	__asm volatile
 800d080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d084:	f383 8811 	msr	BASEPRI, r3
 800d088:	f3bf 8f6f 	isb	sy
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	60fb      	str	r3, [r7, #12]
}
 800d092:	bf00      	nop
 800d094:	e7fe      	b.n	800d094 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d096:	4b39      	ldr	r3, [pc, #228]	; (800d17c <xPortStartScheduler+0x12c>)
 800d098:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	22ff      	movs	r2, #255	; 0xff
 800d0a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d0b0:	78fb      	ldrb	r3, [r7, #3]
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d0b8:	b2da      	uxtb	r2, r3
 800d0ba:	4b31      	ldr	r3, [pc, #196]	; (800d180 <xPortStartScheduler+0x130>)
 800d0bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d0be:	4b31      	ldr	r3, [pc, #196]	; (800d184 <xPortStartScheduler+0x134>)
 800d0c0:	2207      	movs	r2, #7
 800d0c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0c4:	e009      	b.n	800d0da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d0c6:	4b2f      	ldr	r3, [pc, #188]	; (800d184 <xPortStartScheduler+0x134>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	4a2d      	ldr	r2, [pc, #180]	; (800d184 <xPortStartScheduler+0x134>)
 800d0ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d0d0:	78fb      	ldrb	r3, [r7, #3]
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	005b      	lsls	r3, r3, #1
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0da:	78fb      	ldrb	r3, [r7, #3]
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0e2:	2b80      	cmp	r3, #128	; 0x80
 800d0e4:	d0ef      	beq.n	800d0c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d0e6:	4b27      	ldr	r3, [pc, #156]	; (800d184 <xPortStartScheduler+0x134>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f1c3 0307 	rsb	r3, r3, #7
 800d0ee:	2b04      	cmp	r3, #4
 800d0f0:	d00a      	beq.n	800d108 <xPortStartScheduler+0xb8>
	__asm volatile
 800d0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f6:	f383 8811 	msr	BASEPRI, r3
 800d0fa:	f3bf 8f6f 	isb	sy
 800d0fe:	f3bf 8f4f 	dsb	sy
 800d102:	60bb      	str	r3, [r7, #8]
}
 800d104:	bf00      	nop
 800d106:	e7fe      	b.n	800d106 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d108:	4b1e      	ldr	r3, [pc, #120]	; (800d184 <xPortStartScheduler+0x134>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	021b      	lsls	r3, r3, #8
 800d10e:	4a1d      	ldr	r2, [pc, #116]	; (800d184 <xPortStartScheduler+0x134>)
 800d110:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d112:	4b1c      	ldr	r3, [pc, #112]	; (800d184 <xPortStartScheduler+0x134>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d11a:	4a1a      	ldr	r2, [pc, #104]	; (800d184 <xPortStartScheduler+0x134>)
 800d11c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	b2da      	uxtb	r2, r3
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d126:	4b18      	ldr	r3, [pc, #96]	; (800d188 <xPortStartScheduler+0x138>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a17      	ldr	r2, [pc, #92]	; (800d188 <xPortStartScheduler+0x138>)
 800d12c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d132:	4b15      	ldr	r3, [pc, #84]	; (800d188 <xPortStartScheduler+0x138>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	4a14      	ldr	r2, [pc, #80]	; (800d188 <xPortStartScheduler+0x138>)
 800d138:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d13c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d13e:	f000 f8dd 	bl	800d2fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d142:	4b12      	ldr	r3, [pc, #72]	; (800d18c <xPortStartScheduler+0x13c>)
 800d144:	2200      	movs	r2, #0
 800d146:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d148:	f000 f8fc 	bl	800d344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d14c:	4b10      	ldr	r3, [pc, #64]	; (800d190 <xPortStartScheduler+0x140>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a0f      	ldr	r2, [pc, #60]	; (800d190 <xPortStartScheduler+0x140>)
 800d152:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d156:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d158:	f7ff ff66 	bl	800d028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d15c:	f7ff fa8c 	bl	800c678 <vTaskSwitchContext>
	prvTaskExitError();
 800d160:	f7ff ff1c 	bl	800cf9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3718      	adds	r7, #24
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	e000ed00 	.word	0xe000ed00
 800d174:	410fc271 	.word	0x410fc271
 800d178:	410fc270 	.word	0x410fc270
 800d17c:	e000e400 	.word	0xe000e400
 800d180:	20000458 	.word	0x20000458
 800d184:	2000045c 	.word	0x2000045c
 800d188:	e000ed20 	.word	0xe000ed20
 800d18c:	2000002c 	.word	0x2000002c
 800d190:	e000ef34 	.word	0xe000ef34

0800d194 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
	__asm volatile
 800d19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19e:	f383 8811 	msr	BASEPRI, r3
 800d1a2:	f3bf 8f6f 	isb	sy
 800d1a6:	f3bf 8f4f 	dsb	sy
 800d1aa:	607b      	str	r3, [r7, #4]
}
 800d1ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d1ae:	4b0f      	ldr	r3, [pc, #60]	; (800d1ec <vPortEnterCritical+0x58>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	4a0d      	ldr	r2, [pc, #52]	; (800d1ec <vPortEnterCritical+0x58>)
 800d1b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d1b8:	4b0c      	ldr	r3, [pc, #48]	; (800d1ec <vPortEnterCritical+0x58>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d10f      	bne.n	800d1e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d1c0:	4b0b      	ldr	r3, [pc, #44]	; (800d1f0 <vPortEnterCritical+0x5c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00a      	beq.n	800d1e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	603b      	str	r3, [r7, #0]
}
 800d1dc:	bf00      	nop
 800d1de:	e7fe      	b.n	800d1de <vPortEnterCritical+0x4a>
	}
}
 800d1e0:	bf00      	nop
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr
 800d1ec:	2000002c 	.word	0x2000002c
 800d1f0:	e000ed04 	.word	0xe000ed04

0800d1f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d1fa:	4b12      	ldr	r3, [pc, #72]	; (800d244 <vPortExitCritical+0x50>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10a      	bne.n	800d218 <vPortExitCritical+0x24>
	__asm volatile
 800d202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	607b      	str	r3, [r7, #4]
}
 800d214:	bf00      	nop
 800d216:	e7fe      	b.n	800d216 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d218:	4b0a      	ldr	r3, [pc, #40]	; (800d244 <vPortExitCritical+0x50>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3b01      	subs	r3, #1
 800d21e:	4a09      	ldr	r2, [pc, #36]	; (800d244 <vPortExitCritical+0x50>)
 800d220:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d222:	4b08      	ldr	r3, [pc, #32]	; (800d244 <vPortExitCritical+0x50>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d105      	bne.n	800d236 <vPortExitCritical+0x42>
 800d22a:	2300      	movs	r3, #0
 800d22c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	f383 8811 	msr	BASEPRI, r3
}
 800d234:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d236:	bf00      	nop
 800d238:	370c      	adds	r7, #12
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	2000002c 	.word	0x2000002c
	...

0800d250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d250:	f3ef 8009 	mrs	r0, PSP
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	4b15      	ldr	r3, [pc, #84]	; (800d2b0 <pxCurrentTCBConst>)
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	f01e 0f10 	tst.w	lr, #16
 800d260:	bf08      	it	eq
 800d262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26a:	6010      	str	r0, [r2, #0]
 800d26c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d270:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d274:	f380 8811 	msr	BASEPRI, r0
 800d278:	f3bf 8f4f 	dsb	sy
 800d27c:	f3bf 8f6f 	isb	sy
 800d280:	f7ff f9fa 	bl	800c678 <vTaskSwitchContext>
 800d284:	f04f 0000 	mov.w	r0, #0
 800d288:	f380 8811 	msr	BASEPRI, r0
 800d28c:	bc09      	pop	{r0, r3}
 800d28e:	6819      	ldr	r1, [r3, #0]
 800d290:	6808      	ldr	r0, [r1, #0]
 800d292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d296:	f01e 0f10 	tst.w	lr, #16
 800d29a:	bf08      	it	eq
 800d29c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d2a0:	f380 8809 	msr	PSP, r0
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	f3af 8000 	nop.w

0800d2b0 <pxCurrentTCBConst>:
 800d2b0:	2000032c 	.word	0x2000032c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d2b4:	bf00      	nop
 800d2b6:	bf00      	nop

0800d2b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	607b      	str	r3, [r7, #4]
}
 800d2d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d2d2:	f7ff f919 	bl	800c508 <xTaskIncrementTick>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d003      	beq.n	800d2e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d2dc:	4b06      	ldr	r3, [pc, #24]	; (800d2f8 <SysTick_Handler+0x40>)
 800d2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	f383 8811 	msr	BASEPRI, r3
}
 800d2ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d2f0:	bf00      	nop
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	e000ed04 	.word	0xe000ed04

0800d2fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d300:	4b0b      	ldr	r3, [pc, #44]	; (800d330 <vPortSetupTimerInterrupt+0x34>)
 800d302:	2200      	movs	r2, #0
 800d304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d306:	4b0b      	ldr	r3, [pc, #44]	; (800d334 <vPortSetupTimerInterrupt+0x38>)
 800d308:	2200      	movs	r2, #0
 800d30a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d30c:	4b0a      	ldr	r3, [pc, #40]	; (800d338 <vPortSetupTimerInterrupt+0x3c>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a0a      	ldr	r2, [pc, #40]	; (800d33c <vPortSetupTimerInterrupt+0x40>)
 800d312:	fba2 2303 	umull	r2, r3, r2, r3
 800d316:	099b      	lsrs	r3, r3, #6
 800d318:	4a09      	ldr	r2, [pc, #36]	; (800d340 <vPortSetupTimerInterrupt+0x44>)
 800d31a:	3b01      	subs	r3, #1
 800d31c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d31e:	4b04      	ldr	r3, [pc, #16]	; (800d330 <vPortSetupTimerInterrupt+0x34>)
 800d320:	2207      	movs	r2, #7
 800d322:	601a      	str	r2, [r3, #0]
}
 800d324:	bf00      	nop
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	e000e010 	.word	0xe000e010
 800d334:	e000e018 	.word	0xe000e018
 800d338:	20000000 	.word	0x20000000
 800d33c:	10624dd3 	.word	0x10624dd3
 800d340:	e000e014 	.word	0xe000e014

0800d344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d354 <vPortEnableVFP+0x10>
 800d348:	6801      	ldr	r1, [r0, #0]
 800d34a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d34e:	6001      	str	r1, [r0, #0]
 800d350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d352:	bf00      	nop
 800d354:	e000ed88 	.word	0xe000ed88

0800d358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d35e:	f3ef 8305 	mrs	r3, IPSR
 800d362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2b0f      	cmp	r3, #15
 800d368:	d914      	bls.n	800d394 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d36a:	4a17      	ldr	r2, [pc, #92]	; (800d3c8 <vPortValidateInterruptPriority+0x70>)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	4413      	add	r3, r2
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d374:	4b15      	ldr	r3, [pc, #84]	; (800d3cc <vPortValidateInterruptPriority+0x74>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	7afa      	ldrb	r2, [r7, #11]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d20a      	bcs.n	800d394 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	607b      	str	r3, [r7, #4]
}
 800d390:	bf00      	nop
 800d392:	e7fe      	b.n	800d392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d394:	4b0e      	ldr	r3, [pc, #56]	; (800d3d0 <vPortValidateInterruptPriority+0x78>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d39c:	4b0d      	ldr	r3, [pc, #52]	; (800d3d4 <vPortValidateInterruptPriority+0x7c>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d90a      	bls.n	800d3ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	603b      	str	r3, [r7, #0]
}
 800d3b6:	bf00      	nop
 800d3b8:	e7fe      	b.n	800d3b8 <vPortValidateInterruptPriority+0x60>
	}
 800d3ba:	bf00      	nop
 800d3bc:	3714      	adds	r7, #20
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	e000e3f0 	.word	0xe000e3f0
 800d3cc:	20000458 	.word	0x20000458
 800d3d0:	e000ed0c 	.word	0xe000ed0c
 800d3d4:	2000045c 	.word	0x2000045c

0800d3d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b08a      	sub	sp, #40	; 0x28
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d3e4:	f7fe ffc4 	bl	800c370 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d3e8:	4b5b      	ldr	r3, [pc, #364]	; (800d558 <pvPortMalloc+0x180>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d101      	bne.n	800d3f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d3f0:	f000 f920 	bl	800d634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d3f4:	4b59      	ldr	r3, [pc, #356]	; (800d55c <pvPortMalloc+0x184>)
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	4013      	ands	r3, r2
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f040 8093 	bne.w	800d528 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d01d      	beq.n	800d444 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d408:	2208      	movs	r2, #8
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4413      	add	r3, r2
 800d40e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f003 0307 	and.w	r3, r3, #7
 800d416:	2b00      	cmp	r3, #0
 800d418:	d014      	beq.n	800d444 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f023 0307 	bic.w	r3, r3, #7
 800d420:	3308      	adds	r3, #8
 800d422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f003 0307 	and.w	r3, r3, #7
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00a      	beq.n	800d444 <pvPortMalloc+0x6c>
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	617b      	str	r3, [r7, #20]
}
 800d440:	bf00      	nop
 800d442:	e7fe      	b.n	800d442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d06e      	beq.n	800d528 <pvPortMalloc+0x150>
 800d44a:	4b45      	ldr	r3, [pc, #276]	; (800d560 <pvPortMalloc+0x188>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	429a      	cmp	r2, r3
 800d452:	d869      	bhi.n	800d528 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d454:	4b43      	ldr	r3, [pc, #268]	; (800d564 <pvPortMalloc+0x18c>)
 800d456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d458:	4b42      	ldr	r3, [pc, #264]	; (800d564 <pvPortMalloc+0x18c>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d45e:	e004      	b.n	800d46a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	429a      	cmp	r2, r3
 800d472:	d903      	bls.n	800d47c <pvPortMalloc+0xa4>
 800d474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d1f1      	bne.n	800d460 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d47c:	4b36      	ldr	r3, [pc, #216]	; (800d558 <pvPortMalloc+0x180>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d482:	429a      	cmp	r2, r3
 800d484:	d050      	beq.n	800d528 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d486:	6a3b      	ldr	r3, [r7, #32]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2208      	movs	r2, #8
 800d48c:	4413      	add	r3, r2
 800d48e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	6a3b      	ldr	r3, [r7, #32]
 800d496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49a:	685a      	ldr	r2, [r3, #4]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	1ad2      	subs	r2, r2, r3
 800d4a0:	2308      	movs	r3, #8
 800d4a2:	005b      	lsls	r3, r3, #1
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d91f      	bls.n	800d4e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	f003 0307 	and.w	r3, r3, #7
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <pvPortMalloc+0xf8>
	__asm volatile
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	613b      	str	r3, [r7, #16]
}
 800d4cc:	bf00      	nop
 800d4ce:	e7fe      	b.n	800d4ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d2:	685a      	ldr	r2, [r3, #4]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	1ad2      	subs	r2, r2, r3
 800d4d8:	69bb      	ldr	r3, [r7, #24]
 800d4da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d4e2:	69b8      	ldr	r0, [r7, #24]
 800d4e4:	f000 f908 	bl	800d6f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d4e8:	4b1d      	ldr	r3, [pc, #116]	; (800d560 <pvPortMalloc+0x188>)
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	4a1b      	ldr	r2, [pc, #108]	; (800d560 <pvPortMalloc+0x188>)
 800d4f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d4f6:	4b1a      	ldr	r3, [pc, #104]	; (800d560 <pvPortMalloc+0x188>)
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	4b1b      	ldr	r3, [pc, #108]	; (800d568 <pvPortMalloc+0x190>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d203      	bcs.n	800d50a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d502:	4b17      	ldr	r3, [pc, #92]	; (800d560 <pvPortMalloc+0x188>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a18      	ldr	r2, [pc, #96]	; (800d568 <pvPortMalloc+0x190>)
 800d508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50c:	685a      	ldr	r2, [r3, #4]
 800d50e:	4b13      	ldr	r3, [pc, #76]	; (800d55c <pvPortMalloc+0x184>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	431a      	orrs	r2, r3
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	2200      	movs	r2, #0
 800d51c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d51e:	4b13      	ldr	r3, [pc, #76]	; (800d56c <pvPortMalloc+0x194>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3301      	adds	r3, #1
 800d524:	4a11      	ldr	r2, [pc, #68]	; (800d56c <pvPortMalloc+0x194>)
 800d526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d528:	f7fe ff30 	bl	800c38c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	f003 0307 	and.w	r3, r3, #7
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00a      	beq.n	800d54c <pvPortMalloc+0x174>
	__asm volatile
 800d536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	60fb      	str	r3, [r7, #12]
}
 800d548:	bf00      	nop
 800d54a:	e7fe      	b.n	800d54a <pvPortMalloc+0x172>
	return pvReturn;
 800d54c:	69fb      	ldr	r3, [r7, #28]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3728      	adds	r7, #40	; 0x28
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	20008468 	.word	0x20008468
 800d55c:	2000847c 	.word	0x2000847c
 800d560:	2000846c 	.word	0x2000846c
 800d564:	20008460 	.word	0x20008460
 800d568:	20008470 	.word	0x20008470
 800d56c:	20008474 	.word	0x20008474

0800d570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b086      	sub	sp, #24
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d04d      	beq.n	800d61e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d582:	2308      	movs	r3, #8
 800d584:	425b      	negs	r3, r3
 800d586:	697a      	ldr	r2, [r7, #20]
 800d588:	4413      	add	r3, r2
 800d58a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	685a      	ldr	r2, [r3, #4]
 800d594:	4b24      	ldr	r3, [pc, #144]	; (800d628 <vPortFree+0xb8>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4013      	ands	r3, r2
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d10a      	bne.n	800d5b4 <vPortFree+0x44>
	__asm volatile
 800d59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	60fb      	str	r3, [r7, #12]
}
 800d5b0:	bf00      	nop
 800d5b2:	e7fe      	b.n	800d5b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d00a      	beq.n	800d5d2 <vPortFree+0x62>
	__asm volatile
 800d5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c0:	f383 8811 	msr	BASEPRI, r3
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	60bb      	str	r3, [r7, #8]
}
 800d5ce:	bf00      	nop
 800d5d0:	e7fe      	b.n	800d5d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	685a      	ldr	r2, [r3, #4]
 800d5d6:	4b14      	ldr	r3, [pc, #80]	; (800d628 <vPortFree+0xb8>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4013      	ands	r3, r2
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d01e      	beq.n	800d61e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d11a      	bne.n	800d61e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	685a      	ldr	r2, [r3, #4]
 800d5ec:	4b0e      	ldr	r3, [pc, #56]	; (800d628 <vPortFree+0xb8>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	43db      	mvns	r3, r3
 800d5f2:	401a      	ands	r2, r3
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d5f8:	f7fe feba 	bl	800c370 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	685a      	ldr	r2, [r3, #4]
 800d600:	4b0a      	ldr	r3, [pc, #40]	; (800d62c <vPortFree+0xbc>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4413      	add	r3, r2
 800d606:	4a09      	ldr	r2, [pc, #36]	; (800d62c <vPortFree+0xbc>)
 800d608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d60a:	6938      	ldr	r0, [r7, #16]
 800d60c:	f000 f874 	bl	800d6f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d610:	4b07      	ldr	r3, [pc, #28]	; (800d630 <vPortFree+0xc0>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	3301      	adds	r3, #1
 800d616:	4a06      	ldr	r2, [pc, #24]	; (800d630 <vPortFree+0xc0>)
 800d618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d61a:	f7fe feb7 	bl	800c38c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d61e:	bf00      	nop
 800d620:	3718      	adds	r7, #24
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	2000847c 	.word	0x2000847c
 800d62c:	2000846c 	.word	0x2000846c
 800d630:	20008478 	.word	0x20008478

0800d634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d634:	b480      	push	{r7}
 800d636:	b085      	sub	sp, #20
 800d638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d63a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d63e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d640:	4b27      	ldr	r3, [pc, #156]	; (800d6e0 <prvHeapInit+0xac>)
 800d642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f003 0307 	and.w	r3, r3, #7
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00c      	beq.n	800d668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3307      	adds	r3, #7
 800d652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f023 0307 	bic.w	r3, r3, #7
 800d65a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	4a1f      	ldr	r2, [pc, #124]	; (800d6e0 <prvHeapInit+0xac>)
 800d664:	4413      	add	r3, r2
 800d666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d66c:	4a1d      	ldr	r2, [pc, #116]	; (800d6e4 <prvHeapInit+0xb0>)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d672:	4b1c      	ldr	r3, [pc, #112]	; (800d6e4 <prvHeapInit+0xb0>)
 800d674:	2200      	movs	r2, #0
 800d676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	68ba      	ldr	r2, [r7, #8]
 800d67c:	4413      	add	r3, r2
 800d67e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d680:	2208      	movs	r2, #8
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	1a9b      	subs	r3, r3, r2
 800d686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f023 0307 	bic.w	r3, r3, #7
 800d68e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	4a15      	ldr	r2, [pc, #84]	; (800d6e8 <prvHeapInit+0xb4>)
 800d694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d696:	4b14      	ldr	r3, [pc, #80]	; (800d6e8 <prvHeapInit+0xb4>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2200      	movs	r2, #0
 800d69c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d69e:	4b12      	ldr	r3, [pc, #72]	; (800d6e8 <prvHeapInit+0xb4>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	1ad2      	subs	r2, r2, r3
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d6b4:	4b0c      	ldr	r3, [pc, #48]	; (800d6e8 <prvHeapInit+0xb4>)
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	4a0a      	ldr	r2, [pc, #40]	; (800d6ec <prvHeapInit+0xb8>)
 800d6c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	4a09      	ldr	r2, [pc, #36]	; (800d6f0 <prvHeapInit+0xbc>)
 800d6ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d6cc:	4b09      	ldr	r3, [pc, #36]	; (800d6f4 <prvHeapInit+0xc0>)
 800d6ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d6d2:	601a      	str	r2, [r3, #0]
}
 800d6d4:	bf00      	nop
 800d6d6:	3714      	adds	r7, #20
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr
 800d6e0:	20000460 	.word	0x20000460
 800d6e4:	20008460 	.word	0x20008460
 800d6e8:	20008468 	.word	0x20008468
 800d6ec:	20008470 	.word	0x20008470
 800d6f0:	2000846c 	.word	0x2000846c
 800d6f4:	2000847c 	.word	0x2000847c

0800d6f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d700:	4b28      	ldr	r3, [pc, #160]	; (800d7a4 <prvInsertBlockIntoFreeList+0xac>)
 800d702:	60fb      	str	r3, [r7, #12]
 800d704:	e002      	b.n	800d70c <prvInsertBlockIntoFreeList+0x14>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	60fb      	str	r3, [r7, #12]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	429a      	cmp	r2, r3
 800d714:	d8f7      	bhi.n	800d706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	68ba      	ldr	r2, [r7, #8]
 800d720:	4413      	add	r3, r2
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	429a      	cmp	r2, r3
 800d726:	d108      	bne.n	800d73a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	685a      	ldr	r2, [r3, #4]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	441a      	add	r2, r3
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	68ba      	ldr	r2, [r7, #8]
 800d744:	441a      	add	r2, r3
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d118      	bne.n	800d780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	4b15      	ldr	r3, [pc, #84]	; (800d7a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	429a      	cmp	r2, r3
 800d758:	d00d      	beq.n	800d776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	685a      	ldr	r2, [r3, #4]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	441a      	add	r2, r3
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	601a      	str	r2, [r3, #0]
 800d774:	e008      	b.n	800d788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d776:	4b0c      	ldr	r3, [pc, #48]	; (800d7a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	601a      	str	r2, [r3, #0]
 800d77e:	e003      	b.n	800d788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d002      	beq.n	800d796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d796:	bf00      	nop
 800d798:	3714      	adds	r7, #20
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	20008460 	.word	0x20008460
 800d7a8:	20008468 	.word	0x20008468

0800d7ac <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d7b6:	f007 fa97 	bl	8014ce8 <sys_timeouts_sleeptime>
 800d7ba:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7c2:	d10b      	bne.n	800d7dc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d7c4:	4813      	ldr	r0, [pc, #76]	; (800d814 <tcpip_timeouts_mbox_fetch+0x68>)
 800d7c6:	f00c f9bc 	bl	8019b42 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	6839      	ldr	r1, [r7, #0]
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f00c f92e 	bl	8019a30 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d7d4:	480f      	ldr	r0, [pc, #60]	; (800d814 <tcpip_timeouts_mbox_fetch+0x68>)
 800d7d6:	f00c f9a5 	bl	8019b24 <sys_mutex_lock>
    return;
 800d7da:	e018      	b.n	800d80e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d102      	bne.n	800d7e8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d7e2:	f007 fa47 	bl	8014c74 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d7e6:	e7e6      	b.n	800d7b6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d7e8:	480a      	ldr	r0, [pc, #40]	; (800d814 <tcpip_timeouts_mbox_fetch+0x68>)
 800d7ea:	f00c f9aa 	bl	8019b42 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	6839      	ldr	r1, [r7, #0]
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f00c f91c 	bl	8019a30 <sys_arch_mbox_fetch>
 800d7f8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d7fa:	4806      	ldr	r0, [pc, #24]	; (800d814 <tcpip_timeouts_mbox_fetch+0x68>)
 800d7fc:	f00c f992 	bl	8019b24 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d806:	d102      	bne.n	800d80e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d808:	f007 fa34 	bl	8014c74 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d80c:	e7d3      	b.n	800d7b6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}
 800d814:	2000bc5c 	.word	0x2000bc5c

0800d818 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d820:	4810      	ldr	r0, [pc, #64]	; (800d864 <tcpip_thread+0x4c>)
 800d822:	f00c f97f 	bl	8019b24 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d826:	4b10      	ldr	r3, [pc, #64]	; (800d868 <tcpip_thread+0x50>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d005      	beq.n	800d83a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d82e:	4b0e      	ldr	r3, [pc, #56]	; (800d868 <tcpip_thread+0x50>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a0e      	ldr	r2, [pc, #56]	; (800d86c <tcpip_thread+0x54>)
 800d834:	6812      	ldr	r2, [r2, #0]
 800d836:	4610      	mov	r0, r2
 800d838:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d83a:	f107 030c 	add.w	r3, r7, #12
 800d83e:	4619      	mov	r1, r3
 800d840:	480b      	ldr	r0, [pc, #44]	; (800d870 <tcpip_thread+0x58>)
 800d842:	f7ff ffb3 	bl	800d7ac <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d106      	bne.n	800d85a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d84c:	4b09      	ldr	r3, [pc, #36]	; (800d874 <tcpip_thread+0x5c>)
 800d84e:	2291      	movs	r2, #145	; 0x91
 800d850:	4909      	ldr	r1, [pc, #36]	; (800d878 <tcpip_thread+0x60>)
 800d852:	480a      	ldr	r0, [pc, #40]	; (800d87c <tcpip_thread+0x64>)
 800d854:	f00c fdfe 	bl	801a454 <iprintf>
      continue;
 800d858:	e003      	b.n	800d862 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f000 f80f 	bl	800d880 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d862:	e7ea      	b.n	800d83a <tcpip_thread+0x22>
 800d864:	2000bc5c 	.word	0x2000bc5c
 800d868:	20008480 	.word	0x20008480
 800d86c:	20008484 	.word	0x20008484
 800d870:	20008488 	.word	0x20008488
 800d874:	0801bb34 	.word	0x0801bb34
 800d878:	0801bb64 	.word	0x0801bb64
 800d87c:	0801bb84 	.word	0x0801bb84

0800d880 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	2b02      	cmp	r3, #2
 800d88e:	d026      	beq.n	800d8de <tcpip_thread_handle_msg+0x5e>
 800d890:	2b02      	cmp	r3, #2
 800d892:	dc2b      	bgt.n	800d8ec <tcpip_thread_handle_msg+0x6c>
 800d894:	2b00      	cmp	r3, #0
 800d896:	d002      	beq.n	800d89e <tcpip_thread_handle_msg+0x1e>
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d015      	beq.n	800d8c8 <tcpip_thread_handle_msg+0x48>
 800d89c:	e026      	b.n	800d8ec <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	6850      	ldr	r0, [r2, #4]
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	6892      	ldr	r2, [r2, #8]
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	4798      	blx	r3
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d004      	beq.n	800d8be <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f001 fcd1 	bl	800f260 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d8be:	6879      	ldr	r1, [r7, #4]
 800d8c0:	2009      	movs	r0, #9
 800d8c2:	f000 fe1d 	bl	800e500 <memp_free>
      break;
 800d8c6:	e018      	b.n	800d8fa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	6892      	ldr	r2, [r2, #8]
 800d8d0:	4610      	mov	r0, r2
 800d8d2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d8d4:	6879      	ldr	r1, [r7, #4]
 800d8d6:	2008      	movs	r0, #8
 800d8d8:	f000 fe12 	bl	800e500 <memp_free>
      break;
 800d8dc:	e00d      	b.n	800d8fa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	6892      	ldr	r2, [r2, #8]
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	4798      	blx	r3
      break;
 800d8ea:	e006      	b.n	800d8fa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d8ec:	4b05      	ldr	r3, [pc, #20]	; (800d904 <tcpip_thread_handle_msg+0x84>)
 800d8ee:	22cf      	movs	r2, #207	; 0xcf
 800d8f0:	4905      	ldr	r1, [pc, #20]	; (800d908 <tcpip_thread_handle_msg+0x88>)
 800d8f2:	4806      	ldr	r0, [pc, #24]	; (800d90c <tcpip_thread_handle_msg+0x8c>)
 800d8f4:	f00c fdae 	bl	801a454 <iprintf>
      break;
 800d8f8:	bf00      	nop
  }
}
 800d8fa:	bf00      	nop
 800d8fc:	3708      	adds	r7, #8
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	0801bb34 	.word	0x0801bb34
 800d908:	0801bb64 	.word	0x0801bb64
 800d90c:	0801bb84 	.word	0x0801bb84

0800d910 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b086      	sub	sp, #24
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d91c:	481a      	ldr	r0, [pc, #104]	; (800d988 <tcpip_inpkt+0x78>)
 800d91e:	f00c f8c6 	bl	8019aae <sys_mbox_valid>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	d105      	bne.n	800d934 <tcpip_inpkt+0x24>
 800d928:	4b18      	ldr	r3, [pc, #96]	; (800d98c <tcpip_inpkt+0x7c>)
 800d92a:	22fc      	movs	r2, #252	; 0xfc
 800d92c:	4918      	ldr	r1, [pc, #96]	; (800d990 <tcpip_inpkt+0x80>)
 800d92e:	4819      	ldr	r0, [pc, #100]	; (800d994 <tcpip_inpkt+0x84>)
 800d930:	f00c fd90 	bl	801a454 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d934:	2009      	movs	r0, #9
 800d936:	f000 fd91 	bl	800e45c <memp_malloc>
 800d93a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d102      	bne.n	800d948 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d942:	f04f 33ff 	mov.w	r3, #4294967295
 800d946:	e01a      	b.n	800d97e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	2200      	movs	r2, #0
 800d94c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	68fa      	ldr	r2, [r7, #12]
 800d952:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	68ba      	ldr	r2, [r7, #8]
 800d958:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d960:	6979      	ldr	r1, [r7, #20]
 800d962:	4809      	ldr	r0, [pc, #36]	; (800d988 <tcpip_inpkt+0x78>)
 800d964:	f00c f84a 	bl	80199fc <sys_mbox_trypost>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d006      	beq.n	800d97c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d96e:	6979      	ldr	r1, [r7, #20]
 800d970:	2009      	movs	r0, #9
 800d972:	f000 fdc5 	bl	800e500 <memp_free>
    return ERR_MEM;
 800d976:	f04f 33ff 	mov.w	r3, #4294967295
 800d97a:	e000      	b.n	800d97e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d97c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3718      	adds	r7, #24
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	20008488 	.word	0x20008488
 800d98c:	0801bb34 	.word	0x0801bb34
 800d990:	0801bbac 	.word	0x0801bbac
 800d994:	0801bb84 	.word	0x0801bb84

0800d998 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d9a8:	f003 0318 	and.w	r3, r3, #24
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d006      	beq.n	800d9be <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d9b0:	4a08      	ldr	r2, [pc, #32]	; (800d9d4 <tcpip_input+0x3c>)
 800d9b2:	6839      	ldr	r1, [r7, #0]
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f7ff ffab 	bl	800d910 <tcpip_inpkt>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	e005      	b.n	800d9ca <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d9be:	4a06      	ldr	r2, [pc, #24]	; (800d9d8 <tcpip_input+0x40>)
 800d9c0:	6839      	ldr	r1, [r7, #0]
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7ff ffa4 	bl	800d910 <tcpip_inpkt>
 800d9c8:	4603      	mov	r3, r0
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3708      	adds	r7, #8
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	0801980d 	.word	0x0801980d
 800d9d8:	080186e5 	.word	0x080186e5

0800d9dc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d9e6:	4819      	ldr	r0, [pc, #100]	; (800da4c <tcpip_try_callback+0x70>)
 800d9e8:	f00c f861 	bl	8019aae <sys_mbox_valid>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d106      	bne.n	800da00 <tcpip_try_callback+0x24>
 800d9f2:	4b17      	ldr	r3, [pc, #92]	; (800da50 <tcpip_try_callback+0x74>)
 800d9f4:	f240 125d 	movw	r2, #349	; 0x15d
 800d9f8:	4916      	ldr	r1, [pc, #88]	; (800da54 <tcpip_try_callback+0x78>)
 800d9fa:	4817      	ldr	r0, [pc, #92]	; (800da58 <tcpip_try_callback+0x7c>)
 800d9fc:	f00c fd2a 	bl	801a454 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800da00:	2008      	movs	r0, #8
 800da02:	f000 fd2b 	bl	800e45c <memp_malloc>
 800da06:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d102      	bne.n	800da14 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800da0e:	f04f 33ff 	mov.w	r3, #4294967295
 800da12:	e017      	b.n	800da44 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2201      	movs	r2, #1
 800da18:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	683a      	ldr	r2, [r7, #0]
 800da24:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800da26:	68f9      	ldr	r1, [r7, #12]
 800da28:	4808      	ldr	r0, [pc, #32]	; (800da4c <tcpip_try_callback+0x70>)
 800da2a:	f00b ffe7 	bl	80199fc <sys_mbox_trypost>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d006      	beq.n	800da42 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800da34:	68f9      	ldr	r1, [r7, #12]
 800da36:	2008      	movs	r0, #8
 800da38:	f000 fd62 	bl	800e500 <memp_free>
    return ERR_MEM;
 800da3c:	f04f 33ff 	mov.w	r3, #4294967295
 800da40:	e000      	b.n	800da44 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	20008488 	.word	0x20008488
 800da50:	0801bb34 	.word	0x0801bb34
 800da54:	0801bbac 	.word	0x0801bbac
 800da58:	0801bb84 	.word	0x0801bb84

0800da5c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af02      	add	r7, sp, #8
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  lwip_init();
 800da66:	f000 f871 	bl	800db4c <lwip_init>

  tcpip_init_done = initfunc;
 800da6a:	4a17      	ldr	r2, [pc, #92]	; (800dac8 <tcpip_init+0x6c>)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800da70:	4a16      	ldr	r2, [pc, #88]	; (800dacc <tcpip_init+0x70>)
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800da76:	2106      	movs	r1, #6
 800da78:	4815      	ldr	r0, [pc, #84]	; (800dad0 <tcpip_init+0x74>)
 800da7a:	f00b ff9d 	bl	80199b8 <sys_mbox_new>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d006      	beq.n	800da92 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800da84:	4b13      	ldr	r3, [pc, #76]	; (800dad4 <tcpip_init+0x78>)
 800da86:	f240 2261 	movw	r2, #609	; 0x261
 800da8a:	4913      	ldr	r1, [pc, #76]	; (800dad8 <tcpip_init+0x7c>)
 800da8c:	4813      	ldr	r0, [pc, #76]	; (800dadc <tcpip_init+0x80>)
 800da8e:	f00c fce1 	bl	801a454 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800da92:	4813      	ldr	r0, [pc, #76]	; (800dae0 <tcpip_init+0x84>)
 800da94:	f00c f82a 	bl	8019aec <sys_mutex_new>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d006      	beq.n	800daac <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800da9e:	4b0d      	ldr	r3, [pc, #52]	; (800dad4 <tcpip_init+0x78>)
 800daa0:	f240 2265 	movw	r2, #613	; 0x265
 800daa4:	490f      	ldr	r1, [pc, #60]	; (800dae4 <tcpip_init+0x88>)
 800daa6:	480d      	ldr	r0, [pc, #52]	; (800dadc <tcpip_init+0x80>)
 800daa8:	f00c fcd4 	bl	801a454 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800daac:	2300      	movs	r3, #0
 800daae:	9300      	str	r3, [sp, #0]
 800dab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dab4:	2200      	movs	r2, #0
 800dab6:	490c      	ldr	r1, [pc, #48]	; (800dae8 <tcpip_init+0x8c>)
 800dab8:	480c      	ldr	r0, [pc, #48]	; (800daec <tcpip_init+0x90>)
 800daba:	f00c f84f 	bl	8019b5c <sys_thread_new>
}
 800dabe:	bf00      	nop
 800dac0:	3708      	adds	r7, #8
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	20008480 	.word	0x20008480
 800dacc:	20008484 	.word	0x20008484
 800dad0:	20008488 	.word	0x20008488
 800dad4:	0801bb34 	.word	0x0801bb34
 800dad8:	0801bbbc 	.word	0x0801bbbc
 800dadc:	0801bb84 	.word	0x0801bb84
 800dae0:	2000bc5c 	.word	0x2000bc5c
 800dae4:	0801bbe0 	.word	0x0801bbe0
 800dae8:	0800d819 	.word	0x0800d819
 800daec:	0801bc04 	.word	0x0801bc04

0800daf0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	4603      	mov	r3, r0
 800daf8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800dafa:	88fb      	ldrh	r3, [r7, #6]
 800dafc:	021b      	lsls	r3, r3, #8
 800dafe:	b21a      	sxth	r2, r3
 800db00:	88fb      	ldrh	r3, [r7, #6]
 800db02:	0a1b      	lsrs	r3, r3, #8
 800db04:	b29b      	uxth	r3, r3
 800db06:	b21b      	sxth	r3, r3
 800db08:	4313      	orrs	r3, r2
 800db0a:	b21b      	sxth	r3, r3
 800db0c:	b29b      	uxth	r3, r3
}
 800db0e:	4618      	mov	r0, r3
 800db10:	370c      	adds	r7, #12
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr

0800db1a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800db1a:	b480      	push	{r7}
 800db1c:	b083      	sub	sp, #12
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	061a      	lsls	r2, r3, #24
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	021b      	lsls	r3, r3, #8
 800db2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db2e:	431a      	orrs	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	0a1b      	lsrs	r3, r3, #8
 800db34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800db38:	431a      	orrs	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	0e1b      	lsrs	r3, r3, #24
 800db3e:	4313      	orrs	r3, r2
}
 800db40:	4618      	mov	r0, r3
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800db52:	2300      	movs	r3, #0
 800db54:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800db56:	f00b ffbb 	bl	8019ad0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800db5a:	f000 f8d5 	bl	800dd08 <mem_init>
  memp_init();
 800db5e:	f000 fc31 	bl	800e3c4 <memp_init>
  pbuf_init();
  netif_init();
 800db62:	f000 fcf7 	bl	800e554 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800db66:	f007 f8f7 	bl	8014d58 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800db6a:	f001 fe23 	bl	800f7b4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800db6e:	f007 f839 	bl	8014be4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800db72:	bf00      	nop
 800db74:	3708      	adds	r7, #8
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
	...

0800db7c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b083      	sub	sp, #12
 800db80:	af00      	add	r7, sp, #0
 800db82:	4603      	mov	r3, r0
 800db84:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800db86:	4b05      	ldr	r3, [pc, #20]	; (800db9c <ptr_to_mem+0x20>)
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	88fb      	ldrh	r3, [r7, #6]
 800db8c:	4413      	add	r3, r2
}
 800db8e:	4618      	mov	r0, r3
 800db90:	370c      	adds	r7, #12
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	2000848c 	.word	0x2000848c

0800dba0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b083      	sub	sp, #12
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800dba8:	4b05      	ldr	r3, [pc, #20]	; (800dbc0 <mem_to_ptr+0x20>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	1ad3      	subs	r3, r2, r3
 800dbb0:	b29b      	uxth	r3, r3
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	370c      	adds	r7, #12
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr
 800dbbe:	bf00      	nop
 800dbc0:	2000848c 	.word	0x2000848c

0800dbc4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800dbc4:	b590      	push	{r4, r7, lr}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800dbcc:	4b45      	ldr	r3, [pc, #276]	; (800dce4 <plug_holes+0x120>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d206      	bcs.n	800dbe4 <plug_holes+0x20>
 800dbd6:	4b44      	ldr	r3, [pc, #272]	; (800dce8 <plug_holes+0x124>)
 800dbd8:	f240 12df 	movw	r2, #479	; 0x1df
 800dbdc:	4943      	ldr	r1, [pc, #268]	; (800dcec <plug_holes+0x128>)
 800dbde:	4844      	ldr	r0, [pc, #272]	; (800dcf0 <plug_holes+0x12c>)
 800dbe0:	f00c fc38 	bl	801a454 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800dbe4:	4b43      	ldr	r3, [pc, #268]	; (800dcf4 <plug_holes+0x130>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d306      	bcc.n	800dbfc <plug_holes+0x38>
 800dbee:	4b3e      	ldr	r3, [pc, #248]	; (800dce8 <plug_holes+0x124>)
 800dbf0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dbf4:	4940      	ldr	r1, [pc, #256]	; (800dcf8 <plug_holes+0x134>)
 800dbf6:	483e      	ldr	r0, [pc, #248]	; (800dcf0 <plug_holes+0x12c>)
 800dbf8:	f00c fc2c 	bl	801a454 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	791b      	ldrb	r3, [r3, #4]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d006      	beq.n	800dc12 <plug_holes+0x4e>
 800dc04:	4b38      	ldr	r3, [pc, #224]	; (800dce8 <plug_holes+0x124>)
 800dc06:	f240 12e1 	movw	r2, #481	; 0x1e1
 800dc0a:	493c      	ldr	r1, [pc, #240]	; (800dcfc <plug_holes+0x138>)
 800dc0c:	4838      	ldr	r0, [pc, #224]	; (800dcf0 <plug_holes+0x12c>)
 800dc0e:	f00c fc21 	bl	801a454 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	881b      	ldrh	r3, [r3, #0]
 800dc16:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dc1a:	d906      	bls.n	800dc2a <plug_holes+0x66>
 800dc1c:	4b32      	ldr	r3, [pc, #200]	; (800dce8 <plug_holes+0x124>)
 800dc1e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800dc22:	4937      	ldr	r1, [pc, #220]	; (800dd00 <plug_holes+0x13c>)
 800dc24:	4832      	ldr	r0, [pc, #200]	; (800dcf0 <plug_holes+0x12c>)
 800dc26:	f00c fc15 	bl	801a454 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	881b      	ldrh	r3, [r3, #0]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7ff ffa4 	bl	800db7c <ptr_to_mem>
 800dc34:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d024      	beq.n	800dc88 <plug_holes+0xc4>
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	791b      	ldrb	r3, [r3, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d120      	bne.n	800dc88 <plug_holes+0xc4>
 800dc46:	4b2b      	ldr	r3, [pc, #172]	; (800dcf4 <plug_holes+0x130>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	68fa      	ldr	r2, [r7, #12]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d01b      	beq.n	800dc88 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800dc50:	4b2c      	ldr	r3, [pc, #176]	; (800dd04 <plug_holes+0x140>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d102      	bne.n	800dc60 <plug_holes+0x9c>
      lfree = mem;
 800dc5a:	4a2a      	ldr	r2, [pc, #168]	; (800dd04 <plug_holes+0x140>)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	881a      	ldrh	r2, [r3, #0]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	881b      	ldrh	r3, [r3, #0]
 800dc6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dc70:	d00a      	beq.n	800dc88 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	881b      	ldrh	r3, [r3, #0]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7ff ff80 	bl	800db7c <ptr_to_mem>
 800dc7c:	4604      	mov	r4, r0
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f7ff ff8e 	bl	800dba0 <mem_to_ptr>
 800dc84:	4603      	mov	r3, r0
 800dc86:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	885b      	ldrh	r3, [r3, #2]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7ff ff75 	bl	800db7c <ptr_to_mem>
 800dc92:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800dc94:	68ba      	ldr	r2, [r7, #8]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d01f      	beq.n	800dcdc <plug_holes+0x118>
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	791b      	ldrb	r3, [r3, #4]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d11b      	bne.n	800dcdc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800dca4:	4b17      	ldr	r3, [pc, #92]	; (800dd04 <plug_holes+0x140>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d102      	bne.n	800dcb4 <plug_holes+0xf0>
      lfree = pmem;
 800dcae:	4a15      	ldr	r2, [pc, #84]	; (800dd04 <plug_holes+0x140>)
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	881a      	ldrh	r2, [r3, #0]
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	881b      	ldrh	r3, [r3, #0]
 800dcc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dcc4:	d00a      	beq.n	800dcdc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	881b      	ldrh	r3, [r3, #0]
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7ff ff56 	bl	800db7c <ptr_to_mem>
 800dcd0:	4604      	mov	r4, r0
 800dcd2:	68b8      	ldr	r0, [r7, #8]
 800dcd4:	f7ff ff64 	bl	800dba0 <mem_to_ptr>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800dcdc:	bf00      	nop
 800dcde:	3714      	adds	r7, #20
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd90      	pop	{r4, r7, pc}
 800dce4:	2000848c 	.word	0x2000848c
 800dce8:	0801bc14 	.word	0x0801bc14
 800dcec:	0801bc44 	.word	0x0801bc44
 800dcf0:	0801bc5c 	.word	0x0801bc5c
 800dcf4:	20008490 	.word	0x20008490
 800dcf8:	0801bc84 	.word	0x0801bc84
 800dcfc:	0801bca0 	.word	0x0801bca0
 800dd00:	0801bcbc 	.word	0x0801bcbc
 800dd04:	20008498 	.word	0x20008498

0800dd08 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800dd0e:	4b1f      	ldr	r3, [pc, #124]	; (800dd8c <mem_init+0x84>)
 800dd10:	3303      	adds	r3, #3
 800dd12:	f023 0303 	bic.w	r3, r3, #3
 800dd16:	461a      	mov	r2, r3
 800dd18:	4b1d      	ldr	r3, [pc, #116]	; (800dd90 <mem_init+0x88>)
 800dd1a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800dd1c:	4b1c      	ldr	r3, [pc, #112]	; (800dd90 <mem_init+0x88>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dd28:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2200      	movs	r2, #0
 800dd34:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800dd36:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800dd3a:	f7ff ff1f 	bl	800db7c <ptr_to_mem>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	4a14      	ldr	r2, [pc, #80]	; (800dd94 <mem_init+0x8c>)
 800dd42:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800dd44:	4b13      	ldr	r3, [pc, #76]	; (800dd94 <mem_init+0x8c>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	2201      	movs	r2, #1
 800dd4a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800dd4c:	4b11      	ldr	r3, [pc, #68]	; (800dd94 <mem_init+0x8c>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dd54:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800dd56:	4b0f      	ldr	r3, [pc, #60]	; (800dd94 <mem_init+0x8c>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dd5e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800dd60:	4b0b      	ldr	r3, [pc, #44]	; (800dd90 <mem_init+0x88>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a0c      	ldr	r2, [pc, #48]	; (800dd98 <mem_init+0x90>)
 800dd66:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800dd68:	480c      	ldr	r0, [pc, #48]	; (800dd9c <mem_init+0x94>)
 800dd6a:	f00b febf 	bl	8019aec <sys_mutex_new>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d006      	beq.n	800dd82 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800dd74:	4b0a      	ldr	r3, [pc, #40]	; (800dda0 <mem_init+0x98>)
 800dd76:	f240 221f 	movw	r2, #543	; 0x21f
 800dd7a:	490a      	ldr	r1, [pc, #40]	; (800dda4 <mem_init+0x9c>)
 800dd7c:	480a      	ldr	r0, [pc, #40]	; (800dda8 <mem_init+0xa0>)
 800dd7e:	f00c fb69 	bl	801a454 <iprintf>
  }
}
 800dd82:	bf00      	nop
 800dd84:	3708      	adds	r7, #8
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	2000bc78 	.word	0x2000bc78
 800dd90:	2000848c 	.word	0x2000848c
 800dd94:	20008490 	.word	0x20008490
 800dd98:	20008498 	.word	0x20008498
 800dd9c:	20008494 	.word	0x20008494
 800dda0:	0801bc14 	.word	0x0801bc14
 800dda4:	0801bce8 	.word	0x0801bce8
 800dda8:	0801bc5c 	.word	0x0801bc5c

0800ddac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b086      	sub	sp, #24
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7ff fef3 	bl	800dba0 <mem_to_ptr>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	881b      	ldrh	r3, [r3, #0]
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7ff feda 	bl	800db7c <ptr_to_mem>
 800ddc8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	885b      	ldrh	r3, [r3, #2]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7ff fed4 	bl	800db7c <ptr_to_mem>
 800ddd4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	881b      	ldrh	r3, [r3, #0]
 800ddda:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ddde:	d818      	bhi.n	800de12 <mem_link_valid+0x66>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	885b      	ldrh	r3, [r3, #2]
 800dde4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dde8:	d813      	bhi.n	800de12 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ddee:	8afa      	ldrh	r2, [r7, #22]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d004      	beq.n	800ddfe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	881b      	ldrh	r3, [r3, #0]
 800ddf8:	8afa      	ldrh	r2, [r7, #22]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d109      	bne.n	800de12 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ddfe:	4b08      	ldr	r3, [pc, #32]	; (800de20 <mem_link_valid+0x74>)
 800de00:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800de02:	693a      	ldr	r2, [r7, #16]
 800de04:	429a      	cmp	r2, r3
 800de06:	d006      	beq.n	800de16 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	885b      	ldrh	r3, [r3, #2]
 800de0c:	8afa      	ldrh	r2, [r7, #22]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d001      	beq.n	800de16 <mem_link_valid+0x6a>
    return 0;
 800de12:	2300      	movs	r3, #0
 800de14:	e000      	b.n	800de18 <mem_link_valid+0x6c>
  }
  return 1;
 800de16:	2301      	movs	r3, #1
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3718      	adds	r7, #24
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	20008490 	.word	0x20008490

0800de24 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b088      	sub	sp, #32
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d070      	beq.n	800df14 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f003 0303 	and.w	r3, r3, #3
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00d      	beq.n	800de58 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800de3c:	4b37      	ldr	r3, [pc, #220]	; (800df1c <mem_free+0xf8>)
 800de3e:	f240 2273 	movw	r2, #627	; 0x273
 800de42:	4937      	ldr	r1, [pc, #220]	; (800df20 <mem_free+0xfc>)
 800de44:	4837      	ldr	r0, [pc, #220]	; (800df24 <mem_free+0x100>)
 800de46:	f00c fb05 	bl	801a454 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de4a:	f00b fead 	bl	8019ba8 <sys_arch_protect>
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f00b feb7 	bl	8019bc4 <sys_arch_unprotect>
    return;
 800de56:	e05e      	b.n	800df16 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	3b08      	subs	r3, #8
 800de5c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800de5e:	4b32      	ldr	r3, [pc, #200]	; (800df28 <mem_free+0x104>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	69fa      	ldr	r2, [r7, #28]
 800de64:	429a      	cmp	r2, r3
 800de66:	d306      	bcc.n	800de76 <mem_free+0x52>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f103 020c 	add.w	r2, r3, #12
 800de6e:	4b2f      	ldr	r3, [pc, #188]	; (800df2c <mem_free+0x108>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	429a      	cmp	r2, r3
 800de74:	d90d      	bls.n	800de92 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800de76:	4b29      	ldr	r3, [pc, #164]	; (800df1c <mem_free+0xf8>)
 800de78:	f240 227f 	movw	r2, #639	; 0x27f
 800de7c:	492c      	ldr	r1, [pc, #176]	; (800df30 <mem_free+0x10c>)
 800de7e:	4829      	ldr	r0, [pc, #164]	; (800df24 <mem_free+0x100>)
 800de80:	f00c fae8 	bl	801a454 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de84:	f00b fe90 	bl	8019ba8 <sys_arch_protect>
 800de88:	6138      	str	r0, [r7, #16]
 800de8a:	6938      	ldr	r0, [r7, #16]
 800de8c:	f00b fe9a 	bl	8019bc4 <sys_arch_unprotect>
    return;
 800de90:	e041      	b.n	800df16 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800de92:	4828      	ldr	r0, [pc, #160]	; (800df34 <mem_free+0x110>)
 800de94:	f00b fe46 	bl	8019b24 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	791b      	ldrb	r3, [r3, #4]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d110      	bne.n	800dec2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800dea0:	4b1e      	ldr	r3, [pc, #120]	; (800df1c <mem_free+0xf8>)
 800dea2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800dea6:	4924      	ldr	r1, [pc, #144]	; (800df38 <mem_free+0x114>)
 800dea8:	481e      	ldr	r0, [pc, #120]	; (800df24 <mem_free+0x100>)
 800deaa:	f00c fad3 	bl	801a454 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800deae:	4821      	ldr	r0, [pc, #132]	; (800df34 <mem_free+0x110>)
 800deb0:	f00b fe47 	bl	8019b42 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800deb4:	f00b fe78 	bl	8019ba8 <sys_arch_protect>
 800deb8:	6178      	str	r0, [r7, #20]
 800deba:	6978      	ldr	r0, [r7, #20]
 800debc:	f00b fe82 	bl	8019bc4 <sys_arch_unprotect>
    return;
 800dec0:	e029      	b.n	800df16 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800dec2:	69f8      	ldr	r0, [r7, #28]
 800dec4:	f7ff ff72 	bl	800ddac <mem_link_valid>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d110      	bne.n	800def0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800dece:	4b13      	ldr	r3, [pc, #76]	; (800df1c <mem_free+0xf8>)
 800ded0:	f240 2295 	movw	r2, #661	; 0x295
 800ded4:	4919      	ldr	r1, [pc, #100]	; (800df3c <mem_free+0x118>)
 800ded6:	4813      	ldr	r0, [pc, #76]	; (800df24 <mem_free+0x100>)
 800ded8:	f00c fabc 	bl	801a454 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dedc:	4815      	ldr	r0, [pc, #84]	; (800df34 <mem_free+0x110>)
 800dede:	f00b fe30 	bl	8019b42 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dee2:	f00b fe61 	bl	8019ba8 <sys_arch_protect>
 800dee6:	61b8      	str	r0, [r7, #24]
 800dee8:	69b8      	ldr	r0, [r7, #24]
 800deea:	f00b fe6b 	bl	8019bc4 <sys_arch_unprotect>
    return;
 800deee:	e012      	b.n	800df16 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	2200      	movs	r2, #0
 800def4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800def6:	4b12      	ldr	r3, [pc, #72]	; (800df40 <mem_free+0x11c>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	69fa      	ldr	r2, [r7, #28]
 800defc:	429a      	cmp	r2, r3
 800defe:	d202      	bcs.n	800df06 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800df00:	4a0f      	ldr	r2, [pc, #60]	; (800df40 <mem_free+0x11c>)
 800df02:	69fb      	ldr	r3, [r7, #28]
 800df04:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800df06:	69f8      	ldr	r0, [r7, #28]
 800df08:	f7ff fe5c 	bl	800dbc4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800df0c:	4809      	ldr	r0, [pc, #36]	; (800df34 <mem_free+0x110>)
 800df0e:	f00b fe18 	bl	8019b42 <sys_mutex_unlock>
 800df12:	e000      	b.n	800df16 <mem_free+0xf2>
    return;
 800df14:	bf00      	nop
}
 800df16:	3720      	adds	r7, #32
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	0801bc14 	.word	0x0801bc14
 800df20:	0801bd04 	.word	0x0801bd04
 800df24:	0801bc5c 	.word	0x0801bc5c
 800df28:	2000848c 	.word	0x2000848c
 800df2c:	20008490 	.word	0x20008490
 800df30:	0801bd28 	.word	0x0801bd28
 800df34:	20008494 	.word	0x20008494
 800df38:	0801bd44 	.word	0x0801bd44
 800df3c:	0801bd6c 	.word	0x0801bd6c
 800df40:	20008498 	.word	0x20008498

0800df44 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b088      	sub	sp, #32
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	460b      	mov	r3, r1
 800df4e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800df50:	887b      	ldrh	r3, [r7, #2]
 800df52:	3303      	adds	r3, #3
 800df54:	b29b      	uxth	r3, r3
 800df56:	f023 0303 	bic.w	r3, r3, #3
 800df5a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800df5c:	8bfb      	ldrh	r3, [r7, #30]
 800df5e:	2b0b      	cmp	r3, #11
 800df60:	d801      	bhi.n	800df66 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800df62:	230c      	movs	r3, #12
 800df64:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800df66:	8bfb      	ldrh	r3, [r7, #30]
 800df68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800df6c:	d803      	bhi.n	800df76 <mem_trim+0x32>
 800df6e:	8bfa      	ldrh	r2, [r7, #30]
 800df70:	887b      	ldrh	r3, [r7, #2]
 800df72:	429a      	cmp	r2, r3
 800df74:	d201      	bcs.n	800df7a <mem_trim+0x36>
    return NULL;
 800df76:	2300      	movs	r3, #0
 800df78:	e0d8      	b.n	800e12c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800df7a:	4b6e      	ldr	r3, [pc, #440]	; (800e134 <mem_trim+0x1f0>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	687a      	ldr	r2, [r7, #4]
 800df80:	429a      	cmp	r2, r3
 800df82:	d304      	bcc.n	800df8e <mem_trim+0x4a>
 800df84:	4b6c      	ldr	r3, [pc, #432]	; (800e138 <mem_trim+0x1f4>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d306      	bcc.n	800df9c <mem_trim+0x58>
 800df8e:	4b6b      	ldr	r3, [pc, #428]	; (800e13c <mem_trim+0x1f8>)
 800df90:	f240 22d1 	movw	r2, #721	; 0x2d1
 800df94:	496a      	ldr	r1, [pc, #424]	; (800e140 <mem_trim+0x1fc>)
 800df96:	486b      	ldr	r0, [pc, #428]	; (800e144 <mem_trim+0x200>)
 800df98:	f00c fa5c 	bl	801a454 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800df9c:	4b65      	ldr	r3, [pc, #404]	; (800e134 <mem_trim+0x1f0>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d304      	bcc.n	800dfb0 <mem_trim+0x6c>
 800dfa6:	4b64      	ldr	r3, [pc, #400]	; (800e138 <mem_trim+0x1f4>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d307      	bcc.n	800dfc0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dfb0:	f00b fdfa 	bl	8019ba8 <sys_arch_protect>
 800dfb4:	60b8      	str	r0, [r7, #8]
 800dfb6:	68b8      	ldr	r0, [r7, #8]
 800dfb8:	f00b fe04 	bl	8019bc4 <sys_arch_unprotect>
    return rmem;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	e0b5      	b.n	800e12c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	3b08      	subs	r3, #8
 800dfc4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800dfc6:	69b8      	ldr	r0, [r7, #24]
 800dfc8:	f7ff fdea 	bl	800dba0 <mem_to_ptr>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	881a      	ldrh	r2, [r3, #0]
 800dfd4:	8afb      	ldrh	r3, [r7, #22]
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	3b08      	subs	r3, #8
 800dfdc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800dfde:	8bfa      	ldrh	r2, [r7, #30]
 800dfe0:	8abb      	ldrh	r3, [r7, #20]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d906      	bls.n	800dff4 <mem_trim+0xb0>
 800dfe6:	4b55      	ldr	r3, [pc, #340]	; (800e13c <mem_trim+0x1f8>)
 800dfe8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800dfec:	4956      	ldr	r1, [pc, #344]	; (800e148 <mem_trim+0x204>)
 800dfee:	4855      	ldr	r0, [pc, #340]	; (800e144 <mem_trim+0x200>)
 800dff0:	f00c fa30 	bl	801a454 <iprintf>
  if (newsize > size) {
 800dff4:	8bfa      	ldrh	r2, [r7, #30]
 800dff6:	8abb      	ldrh	r3, [r7, #20]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d901      	bls.n	800e000 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800dffc:	2300      	movs	r3, #0
 800dffe:	e095      	b.n	800e12c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e000:	8bfa      	ldrh	r2, [r7, #30]
 800e002:	8abb      	ldrh	r3, [r7, #20]
 800e004:	429a      	cmp	r2, r3
 800e006:	d101      	bne.n	800e00c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	e08f      	b.n	800e12c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e00c:	484f      	ldr	r0, [pc, #316]	; (800e14c <mem_trim+0x208>)
 800e00e:	f00b fd89 	bl	8019b24 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	881b      	ldrh	r3, [r3, #0]
 800e016:	4618      	mov	r0, r3
 800e018:	f7ff fdb0 	bl	800db7c <ptr_to_mem>
 800e01c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	791b      	ldrb	r3, [r3, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d13f      	bne.n	800e0a6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e026:	69bb      	ldr	r3, [r7, #24]
 800e028:	881b      	ldrh	r3, [r3, #0]
 800e02a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e02e:	d106      	bne.n	800e03e <mem_trim+0xfa>
 800e030:	4b42      	ldr	r3, [pc, #264]	; (800e13c <mem_trim+0x1f8>)
 800e032:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e036:	4946      	ldr	r1, [pc, #280]	; (800e150 <mem_trim+0x20c>)
 800e038:	4842      	ldr	r0, [pc, #264]	; (800e144 <mem_trim+0x200>)
 800e03a:	f00c fa0b 	bl	801a454 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	881b      	ldrh	r3, [r3, #0]
 800e042:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e044:	8afa      	ldrh	r2, [r7, #22]
 800e046:	8bfb      	ldrh	r3, [r7, #30]
 800e048:	4413      	add	r3, r2
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	3308      	adds	r3, #8
 800e04e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e050:	4b40      	ldr	r3, [pc, #256]	; (800e154 <mem_trim+0x210>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	693a      	ldr	r2, [r7, #16]
 800e056:	429a      	cmp	r2, r3
 800e058:	d106      	bne.n	800e068 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e05a:	89fb      	ldrh	r3, [r7, #14]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7ff fd8d 	bl	800db7c <ptr_to_mem>
 800e062:	4603      	mov	r3, r0
 800e064:	4a3b      	ldr	r2, [pc, #236]	; (800e154 <mem_trim+0x210>)
 800e066:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e068:	89fb      	ldrh	r3, [r7, #14]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7ff fd86 	bl	800db7c <ptr_to_mem>
 800e070:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	2200      	movs	r2, #0
 800e076:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	89ba      	ldrh	r2, [r7, #12]
 800e07c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	8afa      	ldrh	r2, [r7, #22]
 800e082:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	89fa      	ldrh	r2, [r7, #14]
 800e088:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	881b      	ldrh	r3, [r3, #0]
 800e08e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e092:	d047      	beq.n	800e124 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	881b      	ldrh	r3, [r3, #0]
 800e098:	4618      	mov	r0, r3
 800e09a:	f7ff fd6f 	bl	800db7c <ptr_to_mem>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	89fb      	ldrh	r3, [r7, #14]
 800e0a2:	8053      	strh	r3, [r2, #2]
 800e0a4:	e03e      	b.n	800e124 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e0a6:	8bfb      	ldrh	r3, [r7, #30]
 800e0a8:	f103 0214 	add.w	r2, r3, #20
 800e0ac:	8abb      	ldrh	r3, [r7, #20]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d838      	bhi.n	800e124 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e0b2:	8afa      	ldrh	r2, [r7, #22]
 800e0b4:	8bfb      	ldrh	r3, [r7, #30]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	3308      	adds	r3, #8
 800e0bc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	881b      	ldrh	r3, [r3, #0]
 800e0c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e0c6:	d106      	bne.n	800e0d6 <mem_trim+0x192>
 800e0c8:	4b1c      	ldr	r3, [pc, #112]	; (800e13c <mem_trim+0x1f8>)
 800e0ca:	f240 3216 	movw	r2, #790	; 0x316
 800e0ce:	4920      	ldr	r1, [pc, #128]	; (800e150 <mem_trim+0x20c>)
 800e0d0:	481c      	ldr	r0, [pc, #112]	; (800e144 <mem_trim+0x200>)
 800e0d2:	f00c f9bf 	bl	801a454 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e0d6:	89fb      	ldrh	r3, [r7, #14]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7ff fd4f 	bl	800db7c <ptr_to_mem>
 800e0de:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e0e0:	4b1c      	ldr	r3, [pc, #112]	; (800e154 <mem_trim+0x210>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	693a      	ldr	r2, [r7, #16]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d202      	bcs.n	800e0f0 <mem_trim+0x1ac>
      lfree = mem2;
 800e0ea:	4a1a      	ldr	r2, [pc, #104]	; (800e154 <mem_trim+0x210>)
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e0f6:	69bb      	ldr	r3, [r7, #24]
 800e0f8:	881a      	ldrh	r2, [r3, #0]
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	8afa      	ldrh	r2, [r7, #22]
 800e102:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e104:	69bb      	ldr	r3, [r7, #24]
 800e106:	89fa      	ldrh	r2, [r7, #14]
 800e108:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	881b      	ldrh	r3, [r3, #0]
 800e10e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e112:	d007      	beq.n	800e124 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	881b      	ldrh	r3, [r3, #0]
 800e118:	4618      	mov	r0, r3
 800e11a:	f7ff fd2f 	bl	800db7c <ptr_to_mem>
 800e11e:	4602      	mov	r2, r0
 800e120:	89fb      	ldrh	r3, [r7, #14]
 800e122:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e124:	4809      	ldr	r0, [pc, #36]	; (800e14c <mem_trim+0x208>)
 800e126:	f00b fd0c 	bl	8019b42 <sys_mutex_unlock>
  return rmem;
 800e12a:	687b      	ldr	r3, [r7, #4]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3720      	adds	r7, #32
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	2000848c 	.word	0x2000848c
 800e138:	20008490 	.word	0x20008490
 800e13c:	0801bc14 	.word	0x0801bc14
 800e140:	0801bda0 	.word	0x0801bda0
 800e144:	0801bc5c 	.word	0x0801bc5c
 800e148:	0801bdb8 	.word	0x0801bdb8
 800e14c:	20008494 	.word	0x20008494
 800e150:	0801bdd8 	.word	0x0801bdd8
 800e154:	20008498 	.word	0x20008498

0800e158 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b088      	sub	sp, #32
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	4603      	mov	r3, r0
 800e160:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e162:	88fb      	ldrh	r3, [r7, #6]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d101      	bne.n	800e16c <mem_malloc+0x14>
    return NULL;
 800e168:	2300      	movs	r3, #0
 800e16a:	e0e2      	b.n	800e332 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e16c:	88fb      	ldrh	r3, [r7, #6]
 800e16e:	3303      	adds	r3, #3
 800e170:	b29b      	uxth	r3, r3
 800e172:	f023 0303 	bic.w	r3, r3, #3
 800e176:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e178:	8bbb      	ldrh	r3, [r7, #28]
 800e17a:	2b0b      	cmp	r3, #11
 800e17c:	d801      	bhi.n	800e182 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e17e:	230c      	movs	r3, #12
 800e180:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e182:	8bbb      	ldrh	r3, [r7, #28]
 800e184:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e188:	d803      	bhi.n	800e192 <mem_malloc+0x3a>
 800e18a:	8bba      	ldrh	r2, [r7, #28]
 800e18c:	88fb      	ldrh	r3, [r7, #6]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d201      	bcs.n	800e196 <mem_malloc+0x3e>
    return NULL;
 800e192:	2300      	movs	r3, #0
 800e194:	e0cd      	b.n	800e332 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e196:	4869      	ldr	r0, [pc, #420]	; (800e33c <mem_malloc+0x1e4>)
 800e198:	f00b fcc4 	bl	8019b24 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e19c:	4b68      	ldr	r3, [pc, #416]	; (800e340 <mem_malloc+0x1e8>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7ff fcfd 	bl	800dba0 <mem_to_ptr>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	83fb      	strh	r3, [r7, #30]
 800e1aa:	e0b7      	b.n	800e31c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e1ac:	8bfb      	ldrh	r3, [r7, #30]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7ff fce4 	bl	800db7c <ptr_to_mem>
 800e1b4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	791b      	ldrb	r3, [r3, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f040 80a7 	bne.w	800e30e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	881b      	ldrh	r3, [r3, #0]
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	8bfb      	ldrh	r3, [r7, #30]
 800e1c8:	1ad3      	subs	r3, r2, r3
 800e1ca:	f1a3 0208 	sub.w	r2, r3, #8
 800e1ce:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	f0c0 809c 	bcc.w	800e30e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	881b      	ldrh	r3, [r3, #0]
 800e1da:	461a      	mov	r2, r3
 800e1dc:	8bfb      	ldrh	r3, [r7, #30]
 800e1de:	1ad3      	subs	r3, r2, r3
 800e1e0:	f1a3 0208 	sub.w	r2, r3, #8
 800e1e4:	8bbb      	ldrh	r3, [r7, #28]
 800e1e6:	3314      	adds	r3, #20
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d333      	bcc.n	800e254 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e1ec:	8bfa      	ldrh	r2, [r7, #30]
 800e1ee:	8bbb      	ldrh	r3, [r7, #28]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	3308      	adds	r3, #8
 800e1f6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e1f8:	8a7b      	ldrh	r3, [r7, #18]
 800e1fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e1fe:	d106      	bne.n	800e20e <mem_malloc+0xb6>
 800e200:	4b50      	ldr	r3, [pc, #320]	; (800e344 <mem_malloc+0x1ec>)
 800e202:	f240 3287 	movw	r2, #903	; 0x387
 800e206:	4950      	ldr	r1, [pc, #320]	; (800e348 <mem_malloc+0x1f0>)
 800e208:	4850      	ldr	r0, [pc, #320]	; (800e34c <mem_malloc+0x1f4>)
 800e20a:	f00c f923 	bl	801a454 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e20e:	8a7b      	ldrh	r3, [r7, #18]
 800e210:	4618      	mov	r0, r3
 800e212:	f7ff fcb3 	bl	800db7c <ptr_to_mem>
 800e216:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2200      	movs	r2, #0
 800e21c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	881a      	ldrh	r2, [r3, #0]
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	8bfa      	ldrh	r2, [r7, #30]
 800e22a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	8a7a      	ldrh	r2, [r7, #18]
 800e230:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	2201      	movs	r2, #1
 800e236:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	881b      	ldrh	r3, [r3, #0]
 800e23c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e240:	d00b      	beq.n	800e25a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	881b      	ldrh	r3, [r3, #0]
 800e246:	4618      	mov	r0, r3
 800e248:	f7ff fc98 	bl	800db7c <ptr_to_mem>
 800e24c:	4602      	mov	r2, r0
 800e24e:	8a7b      	ldrh	r3, [r7, #18]
 800e250:	8053      	strh	r3, [r2, #2]
 800e252:	e002      	b.n	800e25a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	2201      	movs	r2, #1
 800e258:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e25a:	4b39      	ldr	r3, [pc, #228]	; (800e340 <mem_malloc+0x1e8>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	697a      	ldr	r2, [r7, #20]
 800e260:	429a      	cmp	r2, r3
 800e262:	d127      	bne.n	800e2b4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e264:	4b36      	ldr	r3, [pc, #216]	; (800e340 <mem_malloc+0x1e8>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e26a:	e005      	b.n	800e278 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	4618      	mov	r0, r3
 800e272:	f7ff fc83 	bl	800db7c <ptr_to_mem>
 800e276:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	791b      	ldrb	r3, [r3, #4]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d004      	beq.n	800e28a <mem_malloc+0x132>
 800e280:	4b33      	ldr	r3, [pc, #204]	; (800e350 <mem_malloc+0x1f8>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	69ba      	ldr	r2, [r7, #24]
 800e286:	429a      	cmp	r2, r3
 800e288:	d1f0      	bne.n	800e26c <mem_malloc+0x114>
          }
          lfree = cur;
 800e28a:	4a2d      	ldr	r2, [pc, #180]	; (800e340 <mem_malloc+0x1e8>)
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e290:	4b2b      	ldr	r3, [pc, #172]	; (800e340 <mem_malloc+0x1e8>)
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	4b2e      	ldr	r3, [pc, #184]	; (800e350 <mem_malloc+0x1f8>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d00b      	beq.n	800e2b4 <mem_malloc+0x15c>
 800e29c:	4b28      	ldr	r3, [pc, #160]	; (800e340 <mem_malloc+0x1e8>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	791b      	ldrb	r3, [r3, #4]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d006      	beq.n	800e2b4 <mem_malloc+0x15c>
 800e2a6:	4b27      	ldr	r3, [pc, #156]	; (800e344 <mem_malloc+0x1ec>)
 800e2a8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e2ac:	4929      	ldr	r1, [pc, #164]	; (800e354 <mem_malloc+0x1fc>)
 800e2ae:	4827      	ldr	r0, [pc, #156]	; (800e34c <mem_malloc+0x1f4>)
 800e2b0:	f00c f8d0 	bl	801a454 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e2b4:	4821      	ldr	r0, [pc, #132]	; (800e33c <mem_malloc+0x1e4>)
 800e2b6:	f00b fc44 	bl	8019b42 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e2ba:	8bba      	ldrh	r2, [r7, #28]
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	4413      	add	r3, r2
 800e2c0:	3308      	adds	r3, #8
 800e2c2:	4a23      	ldr	r2, [pc, #140]	; (800e350 <mem_malloc+0x1f8>)
 800e2c4:	6812      	ldr	r2, [r2, #0]
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d906      	bls.n	800e2d8 <mem_malloc+0x180>
 800e2ca:	4b1e      	ldr	r3, [pc, #120]	; (800e344 <mem_malloc+0x1ec>)
 800e2cc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e2d0:	4921      	ldr	r1, [pc, #132]	; (800e358 <mem_malloc+0x200>)
 800e2d2:	481e      	ldr	r0, [pc, #120]	; (800e34c <mem_malloc+0x1f4>)
 800e2d4:	f00c f8be 	bl	801a454 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	f003 0303 	and.w	r3, r3, #3
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d006      	beq.n	800e2f0 <mem_malloc+0x198>
 800e2e2:	4b18      	ldr	r3, [pc, #96]	; (800e344 <mem_malloc+0x1ec>)
 800e2e4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e2e8:	491c      	ldr	r1, [pc, #112]	; (800e35c <mem_malloc+0x204>)
 800e2ea:	4818      	ldr	r0, [pc, #96]	; (800e34c <mem_malloc+0x1f4>)
 800e2ec:	f00c f8b2 	bl	801a454 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	f003 0303 	and.w	r3, r3, #3
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d006      	beq.n	800e308 <mem_malloc+0x1b0>
 800e2fa:	4b12      	ldr	r3, [pc, #72]	; (800e344 <mem_malloc+0x1ec>)
 800e2fc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e300:	4917      	ldr	r1, [pc, #92]	; (800e360 <mem_malloc+0x208>)
 800e302:	4812      	ldr	r0, [pc, #72]	; (800e34c <mem_malloc+0x1f4>)
 800e304:	f00c f8a6 	bl	801a454 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	3308      	adds	r3, #8
 800e30c:	e011      	b.n	800e332 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e30e:	8bfb      	ldrh	r3, [r7, #30]
 800e310:	4618      	mov	r0, r3
 800e312:	f7ff fc33 	bl	800db7c <ptr_to_mem>
 800e316:	4603      	mov	r3, r0
 800e318:	881b      	ldrh	r3, [r3, #0]
 800e31a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e31c:	8bfa      	ldrh	r2, [r7, #30]
 800e31e:	8bbb      	ldrh	r3, [r7, #28]
 800e320:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800e324:	429a      	cmp	r2, r3
 800e326:	f4ff af41 	bcc.w	800e1ac <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e32a:	4804      	ldr	r0, [pc, #16]	; (800e33c <mem_malloc+0x1e4>)
 800e32c:	f00b fc09 	bl	8019b42 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e330:	2300      	movs	r3, #0
}
 800e332:	4618      	mov	r0, r3
 800e334:	3720      	adds	r7, #32
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	20008494 	.word	0x20008494
 800e340:	20008498 	.word	0x20008498
 800e344:	0801bc14 	.word	0x0801bc14
 800e348:	0801bdd8 	.word	0x0801bdd8
 800e34c:	0801bc5c 	.word	0x0801bc5c
 800e350:	20008490 	.word	0x20008490
 800e354:	0801bdec 	.word	0x0801bdec
 800e358:	0801be08 	.word	0x0801be08
 800e35c:	0801be38 	.word	0x0801be38
 800e360:	0801be68 	.word	0x0801be68

0800e364 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e364:	b480      	push	{r7}
 800e366:	b085      	sub	sp, #20
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	689b      	ldr	r3, [r3, #8]
 800e370:	2200      	movs	r2, #0
 800e372:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	685b      	ldr	r3, [r3, #4]
 800e378:	3303      	adds	r3, #3
 800e37a:	f023 0303 	bic.w	r3, r3, #3
 800e37e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e380:	2300      	movs	r3, #0
 800e382:	60fb      	str	r3, [r7, #12]
 800e384:	e011      	b.n	800e3aa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	689b      	ldr	r3, [r3, #8]
 800e394:	68ba      	ldr	r2, [r7, #8]
 800e396:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	881b      	ldrh	r3, [r3, #0]
 800e39c:	461a      	mov	r2, r3
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	60fb      	str	r3, [r7, #12]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	885b      	ldrh	r3, [r3, #2]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	dbe7      	blt.n	800e386 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e3b6:	bf00      	nop
 800e3b8:	bf00      	nop
 800e3ba:	3714      	adds	r7, #20
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr

0800e3c4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	80fb      	strh	r3, [r7, #6]
 800e3ce:	e009      	b.n	800e3e4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e3d0:	88fb      	ldrh	r3, [r7, #6]
 800e3d2:	4a08      	ldr	r2, [pc, #32]	; (800e3f4 <memp_init+0x30>)
 800e3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7ff ffc3 	bl	800e364 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e3de:	88fb      	ldrh	r3, [r7, #6]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	80fb      	strh	r3, [r7, #6]
 800e3e4:	88fb      	ldrh	r3, [r7, #6]
 800e3e6:	2b0c      	cmp	r3, #12
 800e3e8:	d9f2      	bls.n	800e3d0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e3ea:	bf00      	nop
 800e3ec:	bf00      	nop
 800e3ee:	3708      	adds	r7, #8
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	0801ea24 	.word	0x0801ea24

0800e3f8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e400:	f00b fbd2 	bl	8019ba8 <sys_arch_protect>
 800e404:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	689b      	ldr	r3, [r3, #8]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d015      	beq.n	800e440 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	689b      	ldr	r3, [r3, #8]
 800e418:	68ba      	ldr	r2, [r7, #8]
 800e41a:	6812      	ldr	r2, [r2, #0]
 800e41c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	f003 0303 	and.w	r3, r3, #3
 800e424:	2b00      	cmp	r3, #0
 800e426:	d006      	beq.n	800e436 <do_memp_malloc_pool+0x3e>
 800e428:	4b09      	ldr	r3, [pc, #36]	; (800e450 <do_memp_malloc_pool+0x58>)
 800e42a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e42e:	4909      	ldr	r1, [pc, #36]	; (800e454 <do_memp_malloc_pool+0x5c>)
 800e430:	4809      	ldr	r0, [pc, #36]	; (800e458 <do_memp_malloc_pool+0x60>)
 800e432:	f00c f80f 	bl	801a454 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e436:	68f8      	ldr	r0, [r7, #12]
 800e438:	f00b fbc4 	bl	8019bc4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	e003      	b.n	800e448 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e440:	68f8      	ldr	r0, [r7, #12]
 800e442:	f00b fbbf 	bl	8019bc4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e446:	2300      	movs	r3, #0
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	0801be8c 	.word	0x0801be8c
 800e454:	0801bebc 	.word	0x0801bebc
 800e458:	0801bee0 	.word	0x0801bee0

0800e45c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	4603      	mov	r3, r0
 800e464:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e466:	79fb      	ldrb	r3, [r7, #7]
 800e468:	2b0c      	cmp	r3, #12
 800e46a:	d908      	bls.n	800e47e <memp_malloc+0x22>
 800e46c:	4b0a      	ldr	r3, [pc, #40]	; (800e498 <memp_malloc+0x3c>)
 800e46e:	f240 1257 	movw	r2, #343	; 0x157
 800e472:	490a      	ldr	r1, [pc, #40]	; (800e49c <memp_malloc+0x40>)
 800e474:	480a      	ldr	r0, [pc, #40]	; (800e4a0 <memp_malloc+0x44>)
 800e476:	f00b ffed 	bl	801a454 <iprintf>
 800e47a:	2300      	movs	r3, #0
 800e47c:	e008      	b.n	800e490 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e47e:	79fb      	ldrb	r3, [r7, #7]
 800e480:	4a08      	ldr	r2, [pc, #32]	; (800e4a4 <memp_malloc+0x48>)
 800e482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e486:	4618      	mov	r0, r3
 800e488:	f7ff ffb6 	bl	800e3f8 <do_memp_malloc_pool>
 800e48c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e48e:	68fb      	ldr	r3, [r7, #12]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3710      	adds	r7, #16
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	0801be8c 	.word	0x0801be8c
 800e49c:	0801bf1c 	.word	0x0801bf1c
 800e4a0:	0801bee0 	.word	0x0801bee0
 800e4a4:	0801ea24 	.word	0x0801ea24

0800e4a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	f003 0303 	and.w	r3, r3, #3
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d006      	beq.n	800e4ca <do_memp_free_pool+0x22>
 800e4bc:	4b0d      	ldr	r3, [pc, #52]	; (800e4f4 <do_memp_free_pool+0x4c>)
 800e4be:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e4c2:	490d      	ldr	r1, [pc, #52]	; (800e4f8 <do_memp_free_pool+0x50>)
 800e4c4:	480d      	ldr	r0, [pc, #52]	; (800e4fc <do_memp_free_pool+0x54>)
 800e4c6:	f00b ffc5 	bl	801a454 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e4ce:	f00b fb6b 	bl	8019ba8 <sys_arch_protect>
 800e4d2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	689b      	ldr	r3, [r3, #8]
 800e4d8:	681a      	ldr	r2, [r3, #0]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	68fa      	ldr	r2, [r7, #12]
 800e4e4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e4e6:	68b8      	ldr	r0, [r7, #8]
 800e4e8:	f00b fb6c 	bl	8019bc4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e4ec:	bf00      	nop
 800e4ee:	3710      	adds	r7, #16
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	0801be8c 	.word	0x0801be8c
 800e4f8:	0801bf3c 	.word	0x0801bf3c
 800e4fc:	0801bee0 	.word	0x0801bee0

0800e500 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	4603      	mov	r3, r0
 800e508:	6039      	str	r1, [r7, #0]
 800e50a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e50c:	79fb      	ldrb	r3, [r7, #7]
 800e50e:	2b0c      	cmp	r3, #12
 800e510:	d907      	bls.n	800e522 <memp_free+0x22>
 800e512:	4b0c      	ldr	r3, [pc, #48]	; (800e544 <memp_free+0x44>)
 800e514:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e518:	490b      	ldr	r1, [pc, #44]	; (800e548 <memp_free+0x48>)
 800e51a:	480c      	ldr	r0, [pc, #48]	; (800e54c <memp_free+0x4c>)
 800e51c:	f00b ff9a 	bl	801a454 <iprintf>
 800e520:	e00c      	b.n	800e53c <memp_free+0x3c>

  if (mem == NULL) {
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d008      	beq.n	800e53a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e528:	79fb      	ldrb	r3, [r7, #7]
 800e52a:	4a09      	ldr	r2, [pc, #36]	; (800e550 <memp_free+0x50>)
 800e52c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e530:	6839      	ldr	r1, [r7, #0]
 800e532:	4618      	mov	r0, r3
 800e534:	f7ff ffb8 	bl	800e4a8 <do_memp_free_pool>
 800e538:	e000      	b.n	800e53c <memp_free+0x3c>
    return;
 800e53a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e53c:	3708      	adds	r7, #8
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	0801be8c 	.word	0x0801be8c
 800e548:	0801bf5c 	.word	0x0801bf5c
 800e54c:	0801bee0 	.word	0x0801bee0
 800e550:	0801ea24 	.word	0x0801ea24

0800e554 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e554:	b480      	push	{r7}
 800e556:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e558:	bf00      	nop
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr
	...

0800e564 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b086      	sub	sp, #24
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	607a      	str	r2, [r7, #4]
 800e570:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d108      	bne.n	800e58a <netif_add+0x26>
 800e578:	4b5b      	ldr	r3, [pc, #364]	; (800e6e8 <netif_add+0x184>)
 800e57a:	f240 1227 	movw	r2, #295	; 0x127
 800e57e:	495b      	ldr	r1, [pc, #364]	; (800e6ec <netif_add+0x188>)
 800e580:	485b      	ldr	r0, [pc, #364]	; (800e6f0 <netif_add+0x18c>)
 800e582:	f00b ff67 	bl	801a454 <iprintf>
 800e586:	2300      	movs	r3, #0
 800e588:	e0a9      	b.n	800e6de <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d108      	bne.n	800e5a2 <netif_add+0x3e>
 800e590:	4b55      	ldr	r3, [pc, #340]	; (800e6e8 <netif_add+0x184>)
 800e592:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e596:	4957      	ldr	r1, [pc, #348]	; (800e6f4 <netif_add+0x190>)
 800e598:	4855      	ldr	r0, [pc, #340]	; (800e6f0 <netif_add+0x18c>)
 800e59a:	f00b ff5b 	bl	801a454 <iprintf>
 800e59e:	2300      	movs	r3, #0
 800e5a0:	e09d      	b.n	800e6de <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d101      	bne.n	800e5ac <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e5a8:	4b53      	ldr	r3, [pc, #332]	; (800e6f8 <netif_add+0x194>)
 800e5aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d101      	bne.n	800e5b6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e5b2:	4b51      	ldr	r3, [pc, #324]	; (800e6f8 <netif_add+0x194>)
 800e5b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d101      	bne.n	800e5c0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e5bc:	4b4e      	ldr	r3, [pc, #312]	; (800e6f8 <netif_add+0x194>)
 800e5be:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	4a49      	ldr	r2, [pc, #292]	; (800e6fc <netif_add+0x198>)
 800e5d6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	3324      	adds	r3, #36	; 0x24
 800e5ea:	2204      	movs	r2, #4
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f00b fe7e 	bl	801a2f0 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	6a3a      	ldr	r2, [r7, #32]
 800e5fe:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e600:	4b3f      	ldr	r3, [pc, #252]	; (800e700 <netif_add+0x19c>)
 800e602:	781a      	ldrb	r2, [r3, #0]
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e60e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	68b9      	ldr	r1, [r7, #8]
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	f000 f914 	bl	800e844 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61e:	68f8      	ldr	r0, [r7, #12]
 800e620:	4798      	blx	r3
 800e622:	4603      	mov	r3, r0
 800e624:	2b00      	cmp	r3, #0
 800e626:	d001      	beq.n	800e62c <netif_add+0xc8>
    return NULL;
 800e628:	2300      	movs	r3, #0
 800e62a:	e058      	b.n	800e6de <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e632:	2bff      	cmp	r3, #255	; 0xff
 800e634:	d103      	bne.n	800e63e <netif_add+0xda>
        netif->num = 0;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2200      	movs	r2, #0
 800e63a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800e63e:	2300      	movs	r3, #0
 800e640:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e642:	4b30      	ldr	r3, [pc, #192]	; (800e704 <netif_add+0x1a0>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	617b      	str	r3, [r7, #20]
 800e648:	e02b      	b.n	800e6a2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e64a:	697a      	ldr	r2, [r7, #20]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d106      	bne.n	800e660 <netif_add+0xfc>
 800e652:	4b25      	ldr	r3, [pc, #148]	; (800e6e8 <netif_add+0x184>)
 800e654:	f240 128b 	movw	r2, #395	; 0x18b
 800e658:	492b      	ldr	r1, [pc, #172]	; (800e708 <netif_add+0x1a4>)
 800e65a:	4825      	ldr	r0, [pc, #148]	; (800e6f0 <netif_add+0x18c>)
 800e65c:	f00b fefa 	bl	801a454 <iprintf>
        num_netifs++;
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	3301      	adds	r3, #1
 800e664:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	2bff      	cmp	r3, #255	; 0xff
 800e66a:	dd06      	ble.n	800e67a <netif_add+0x116>
 800e66c:	4b1e      	ldr	r3, [pc, #120]	; (800e6e8 <netif_add+0x184>)
 800e66e:	f240 128d 	movw	r2, #397	; 0x18d
 800e672:	4926      	ldr	r1, [pc, #152]	; (800e70c <netif_add+0x1a8>)
 800e674:	481e      	ldr	r0, [pc, #120]	; (800e6f0 <netif_add+0x18c>)
 800e676:	f00b feed 	bl	801a454 <iprintf>
        if (netif2->num == netif->num) {
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e686:	429a      	cmp	r2, r3
 800e688:	d108      	bne.n	800e69c <netif_add+0x138>
          netif->num++;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e690:	3301      	adds	r3, #1
 800e692:	b2da      	uxtb	r2, r3
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800e69a:	e005      	b.n	800e6a8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	617b      	str	r3, [r7, #20]
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d1d0      	bne.n	800e64a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d1be      	bne.n	800e62c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e6b4:	2bfe      	cmp	r3, #254	; 0xfe
 800e6b6:	d103      	bne.n	800e6c0 <netif_add+0x15c>
    netif_num = 0;
 800e6b8:	4b11      	ldr	r3, [pc, #68]	; (800e700 <netif_add+0x19c>)
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	701a      	strb	r2, [r3, #0]
 800e6be:	e006      	b.n	800e6ce <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	b2da      	uxtb	r2, r3
 800e6ca:	4b0d      	ldr	r3, [pc, #52]	; (800e700 <netif_add+0x19c>)
 800e6cc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e6ce:	4b0d      	ldr	r3, [pc, #52]	; (800e704 <netif_add+0x1a0>)
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e6d6:	4a0b      	ldr	r2, [pc, #44]	; (800e704 <netif_add+0x1a0>)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3718      	adds	r7, #24
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	0801bf78 	.word	0x0801bf78
 800e6ec:	0801c00c 	.word	0x0801c00c
 800e6f0:	0801bfc8 	.word	0x0801bfc8
 800e6f4:	0801c028 	.word	0x0801c028
 800e6f8:	0801eaa8 	.word	0x0801eaa8
 800e6fc:	0800eb27 	.word	0x0800eb27
 800e700:	200084d0 	.word	0x200084d0
 800e704:	2000f384 	.word	0x2000f384
 800e708:	0801c04c 	.word	0x0801c04c
 800e70c:	0801c060 	.word	0x0801c060

0800e710 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b082      	sub	sp, #8
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f002 fb91 	bl	8010e44 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e722:	6839      	ldr	r1, [r7, #0]
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f006 ffa3 	bl	8015670 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e72a:	bf00      	nop
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
	...

0800e734 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b086      	sub	sp, #24
 800e738:	af00      	add	r7, sp, #0
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d106      	bne.n	800e754 <netif_do_set_ipaddr+0x20>
 800e746:	4b1d      	ldr	r3, [pc, #116]	; (800e7bc <netif_do_set_ipaddr+0x88>)
 800e748:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e74c:	491c      	ldr	r1, [pc, #112]	; (800e7c0 <netif_do_set_ipaddr+0x8c>)
 800e74e:	481d      	ldr	r0, [pc, #116]	; (800e7c4 <netif_do_set_ipaddr+0x90>)
 800e750:	f00b fe80 	bl	801a454 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d106      	bne.n	800e768 <netif_do_set_ipaddr+0x34>
 800e75a:	4b18      	ldr	r3, [pc, #96]	; (800e7bc <netif_do_set_ipaddr+0x88>)
 800e75c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e760:	4917      	ldr	r1, [pc, #92]	; (800e7c0 <netif_do_set_ipaddr+0x8c>)
 800e762:	4818      	ldr	r0, [pc, #96]	; (800e7c4 <netif_do_set_ipaddr+0x90>)
 800e764:	f00b fe76 	bl	801a454 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	3304      	adds	r3, #4
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	429a      	cmp	r2, r3
 800e774:	d01c      	beq.n	800e7b0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	3304      	adds	r3, #4
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e786:	f107 0314 	add.w	r3, r7, #20
 800e78a:	4619      	mov	r1, r3
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f7ff ffbf 	bl	800e710 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d002      	beq.n	800e79e <netif_do_set_ipaddr+0x6a>
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	e000      	b.n	800e7a0 <netif_do_set_ipaddr+0x6c>
 800e79e:	2300      	movs	r3, #0
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e7a4:	2101      	movs	r1, #1
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f000 f8d2 	bl	800e950 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	e000      	b.n	800e7b2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e7b0:	2300      	movs	r3, #0
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3718      	adds	r7, #24
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	0801bf78 	.word	0x0801bf78
 800e7c0:	0801c090 	.word	0x0801c090
 800e7c4:	0801bfc8 	.word	0x0801bfc8

0800e7c8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b085      	sub	sp, #20
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	3308      	adds	r3, #8
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d00a      	beq.n	800e7f8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d002      	beq.n	800e7ee <netif_do_set_netmask+0x26>
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	e000      	b.n	800e7f0 <netif_do_set_netmask+0x28>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	e000      	b.n	800e7fa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e7f8:	2300      	movs	r3, #0
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3714      	adds	r7, #20
 800e7fe:	46bd      	mov	sp, r7
 800e800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e804:	4770      	bx	lr

0800e806 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e806:	b480      	push	{r7}
 800e808:	b085      	sub	sp, #20
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	60f8      	str	r0, [r7, #12]
 800e80e:	60b9      	str	r1, [r7, #8]
 800e810:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	330c      	adds	r3, #12
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d00a      	beq.n	800e836 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d002      	beq.n	800e82c <netif_do_set_gw+0x26>
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	e000      	b.n	800e82e <netif_do_set_gw+0x28>
 800e82c:	2300      	movs	r3, #0
 800e82e:	68fa      	ldr	r2, [r7, #12]
 800e830:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e832:	2301      	movs	r3, #1
 800e834:	e000      	b.n	800e838 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e836:	2300      	movs	r3, #0
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3714      	adds	r7, #20
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr

0800e844 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b088      	sub	sp, #32
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	607a      	str	r2, [r7, #4]
 800e850:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e852:	2300      	movs	r3, #0
 800e854:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e856:	2300      	movs	r3, #0
 800e858:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d101      	bne.n	800e864 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e860:	4b1c      	ldr	r3, [pc, #112]	; (800e8d4 <netif_set_addr+0x90>)
 800e862:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d101      	bne.n	800e86e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e86a:	4b1a      	ldr	r3, [pc, #104]	; (800e8d4 <netif_set_addr+0x90>)
 800e86c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d101      	bne.n	800e878 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e874:	4b17      	ldr	r3, [pc, #92]	; (800e8d4 <netif_set_addr+0x90>)
 800e876:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d003      	beq.n	800e886 <netif_set_addr+0x42>
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d101      	bne.n	800e88a <netif_set_addr+0x46>
 800e886:	2301      	movs	r3, #1
 800e888:	e000      	b.n	800e88c <netif_set_addr+0x48>
 800e88a:	2300      	movs	r3, #0
 800e88c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d006      	beq.n	800e8a2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e894:	f107 0310 	add.w	r3, r7, #16
 800e898:	461a      	mov	r2, r3
 800e89a:	68b9      	ldr	r1, [r7, #8]
 800e89c:	68f8      	ldr	r0, [r7, #12]
 800e89e:	f7ff ff49 	bl	800e734 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e8a2:	69fa      	ldr	r2, [r7, #28]
 800e8a4:	6879      	ldr	r1, [r7, #4]
 800e8a6:	68f8      	ldr	r0, [r7, #12]
 800e8a8:	f7ff ff8e 	bl	800e7c8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e8ac:	69ba      	ldr	r2, [r7, #24]
 800e8ae:	6839      	ldr	r1, [r7, #0]
 800e8b0:	68f8      	ldr	r0, [r7, #12]
 800e8b2:	f7ff ffa8 	bl	800e806 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d106      	bne.n	800e8ca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e8bc:	f107 0310 	add.w	r3, r7, #16
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	68b9      	ldr	r1, [r7, #8]
 800e8c4:	68f8      	ldr	r0, [r7, #12]
 800e8c6:	f7ff ff35 	bl	800e734 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e8ca:	bf00      	nop
 800e8cc:	3720      	adds	r7, #32
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	0801eaa8 	.word	0x0801eaa8

0800e8d8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b083      	sub	sp, #12
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e8e0:	4a04      	ldr	r2, [pc, #16]	; (800e8f4 <netif_set_default+0x1c>)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e8e6:	bf00      	nop
 800e8e8:	370c      	adds	r7, #12
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop
 800e8f4:	2000f388 	.word	0x2000f388

0800e8f8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d107      	bne.n	800e916 <netif_set_up+0x1e>
 800e906:	4b0f      	ldr	r3, [pc, #60]	; (800e944 <netif_set_up+0x4c>)
 800e908:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e90c:	490e      	ldr	r1, [pc, #56]	; (800e948 <netif_set_up+0x50>)
 800e90e:	480f      	ldr	r0, [pc, #60]	; (800e94c <netif_set_up+0x54>)
 800e910:	f00b fda0 	bl	801a454 <iprintf>
 800e914:	e013      	b.n	800e93e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e91c:	f003 0301 	and.w	r3, r3, #1
 800e920:	2b00      	cmp	r3, #0
 800e922:	d10c      	bne.n	800e93e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e92a:	f043 0301 	orr.w	r3, r3, #1
 800e92e:	b2da      	uxtb	r2, r3
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e936:	2103      	movs	r1, #3
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 f809 	bl	800e950 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	0801bf78 	.word	0x0801bf78
 800e948:	0801c100 	.word	0x0801c100
 800e94c:	0801bfc8 	.word	0x0801bfc8

0800e950 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	460b      	mov	r3, r1
 800e95a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d106      	bne.n	800e970 <netif_issue_reports+0x20>
 800e962:	4b18      	ldr	r3, [pc, #96]	; (800e9c4 <netif_issue_reports+0x74>)
 800e964:	f240 326d 	movw	r2, #877	; 0x36d
 800e968:	4917      	ldr	r1, [pc, #92]	; (800e9c8 <netif_issue_reports+0x78>)
 800e96a:	4818      	ldr	r0, [pc, #96]	; (800e9cc <netif_issue_reports+0x7c>)
 800e96c:	f00b fd72 	bl	801a454 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e976:	f003 0304 	and.w	r3, r3, #4
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d01e      	beq.n	800e9bc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e984:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d017      	beq.n	800e9bc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e98c:	78fb      	ldrb	r3, [r7, #3]
 800e98e:	f003 0301 	and.w	r3, r3, #1
 800e992:	2b00      	cmp	r3, #0
 800e994:	d013      	beq.n	800e9be <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	3304      	adds	r3, #4
 800e99a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d00e      	beq.n	800e9be <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e9a6:	f003 0308 	and.w	r3, r3, #8
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d007      	beq.n	800e9be <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	3304      	adds	r3, #4
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f009 fc5b 	bl	8018270 <etharp_request>
 800e9ba:	e000      	b.n	800e9be <netif_issue_reports+0x6e>
    return;
 800e9bc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e9be:	3708      	adds	r7, #8
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	0801bf78 	.word	0x0801bf78
 800e9c8:	0801c11c 	.word	0x0801c11c
 800e9cc:	0801bfc8 	.word	0x0801bfc8

0800e9d0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d107      	bne.n	800e9ee <netif_set_down+0x1e>
 800e9de:	4b12      	ldr	r3, [pc, #72]	; (800ea28 <netif_set_down+0x58>)
 800e9e0:	f240 329b 	movw	r2, #923	; 0x39b
 800e9e4:	4911      	ldr	r1, [pc, #68]	; (800ea2c <netif_set_down+0x5c>)
 800e9e6:	4812      	ldr	r0, [pc, #72]	; (800ea30 <netif_set_down+0x60>)
 800e9e8:	f00b fd34 	bl	801a454 <iprintf>
 800e9ec:	e019      	b.n	800ea22 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e9f4:	f003 0301 	and.w	r3, r3, #1
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d012      	beq.n	800ea22 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea02:	f023 0301 	bic.w	r3, r3, #1
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea14:	f003 0308 	and.w	r3, r3, #8
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d002      	beq.n	800ea22 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f008 ffe1 	bl	80179e4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	0801bf78 	.word	0x0801bf78
 800ea2c:	0801c140 	.word	0x0801c140
 800ea30:	0801bfc8 	.word	0x0801bfc8

0800ea34 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d107      	bne.n	800ea52 <netif_set_link_up+0x1e>
 800ea42:	4b15      	ldr	r3, [pc, #84]	; (800ea98 <netif_set_link_up+0x64>)
 800ea44:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ea48:	4914      	ldr	r1, [pc, #80]	; (800ea9c <netif_set_link_up+0x68>)
 800ea4a:	4815      	ldr	r0, [pc, #84]	; (800eaa0 <netif_set_link_up+0x6c>)
 800ea4c:	f00b fd02 	bl	801a454 <iprintf>
 800ea50:	e01e      	b.n	800ea90 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea58:	f003 0304 	and.w	r3, r3, #4
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d117      	bne.n	800ea90 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea66:	f043 0304 	orr.w	r3, r3, #4
 800ea6a:	b2da      	uxtb	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f007 fa26 	bl	8015ec4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ea78:	2103      	movs	r1, #3
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f7ff ff68 	bl	800e950 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	69db      	ldr	r3, [r3, #28]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d003      	beq.n	800ea90 <netif_set_link_up+0x5c>
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	69db      	ldr	r3, [r3, #28]
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ea90:	3708      	adds	r7, #8
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	0801bf78 	.word	0x0801bf78
 800ea9c:	0801c160 	.word	0x0801c160
 800eaa0:	0801bfc8 	.word	0x0801bfc8

0800eaa4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d107      	bne.n	800eac2 <netif_set_link_down+0x1e>
 800eab2:	4b11      	ldr	r3, [pc, #68]	; (800eaf8 <netif_set_link_down+0x54>)
 800eab4:	f240 4206 	movw	r2, #1030	; 0x406
 800eab8:	4910      	ldr	r1, [pc, #64]	; (800eafc <netif_set_link_down+0x58>)
 800eaba:	4811      	ldr	r0, [pc, #68]	; (800eb00 <netif_set_link_down+0x5c>)
 800eabc:	f00b fcca 	bl	801a454 <iprintf>
 800eac0:	e017      	b.n	800eaf2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eac8:	f003 0304 	and.w	r3, r3, #4
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d010      	beq.n	800eaf2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ead6:	f023 0304 	bic.w	r3, r3, #4
 800eada:	b2da      	uxtb	r2, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	69db      	ldr	r3, [r3, #28]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d003      	beq.n	800eaf2 <netif_set_link_down+0x4e>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	69db      	ldr	r3, [r3, #28]
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800eaf2:	3708      	adds	r7, #8
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	0801bf78 	.word	0x0801bf78
 800eafc:	0801c184 	.word	0x0801c184
 800eb00:	0801bfc8 	.word	0x0801bfc8

0800eb04 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d002      	beq.n	800eb1a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	61da      	str	r2, [r3, #28]
  }
}
 800eb1a:	bf00      	nop
 800eb1c:	370c      	adds	r7, #12
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb24:	4770      	bx	lr

0800eb26 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800eb26:	b480      	push	{r7}
 800eb28:	b085      	sub	sp, #20
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	60f8      	str	r0, [r7, #12]
 800eb2e:	60b9      	str	r1, [r7, #8]
 800eb30:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800eb32:	f06f 030b 	mvn.w	r3, #11
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3714      	adds	r7, #20
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr
	...

0800eb44 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b085      	sub	sp, #20
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800eb4e:	79fb      	ldrb	r3, [r7, #7]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d013      	beq.n	800eb7c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800eb54:	4b0d      	ldr	r3, [pc, #52]	; (800eb8c <netif_get_by_index+0x48>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	60fb      	str	r3, [r7, #12]
 800eb5a:	e00c      	b.n	800eb76 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb62:	3301      	adds	r3, #1
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	79fa      	ldrb	r2, [r7, #7]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d101      	bne.n	800eb70 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	e006      	b.n	800eb7e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	60fb      	str	r3, [r7, #12]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d1ef      	bne.n	800eb5c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3714      	adds	r7, #20
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr
 800eb8a:	bf00      	nop
 800eb8c:	2000f384 	.word	0x2000f384

0800eb90 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800eb96:	f00b f807 	bl	8019ba8 <sys_arch_protect>
 800eb9a:	6038      	str	r0, [r7, #0]
 800eb9c:	4b0d      	ldr	r3, [pc, #52]	; (800ebd4 <pbuf_free_ooseq+0x44>)
 800eb9e:	2200      	movs	r2, #0
 800eba0:	701a      	strb	r2, [r3, #0]
 800eba2:	6838      	ldr	r0, [r7, #0]
 800eba4:	f00b f80e 	bl	8019bc4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800eba8:	4b0b      	ldr	r3, [pc, #44]	; (800ebd8 <pbuf_free_ooseq+0x48>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	607b      	str	r3, [r7, #4]
 800ebae:	e00a      	b.n	800ebc6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d003      	beq.n	800ebc0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f002 f981 	bl	8010ec0 <tcp_free_ooseq>
      return;
 800ebbe:	e005      	b.n	800ebcc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	607b      	str	r3, [r7, #4]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d1f1      	bne.n	800ebb0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ebcc:	3708      	adds	r7, #8
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	2000f38c 	.word	0x2000f38c
 800ebd8:	2000f394 	.word	0x2000f394

0800ebdc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ebe4:	f7ff ffd4 	bl	800eb90 <pbuf_free_ooseq>
}
 800ebe8:	bf00      	nop
 800ebea:	3708      	adds	r7, #8
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ebf6:	f00a ffd7 	bl	8019ba8 <sys_arch_protect>
 800ebfa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ebfc:	4b0f      	ldr	r3, [pc, #60]	; (800ec3c <pbuf_pool_is_empty+0x4c>)
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ec02:	4b0e      	ldr	r3, [pc, #56]	; (800ec3c <pbuf_pool_is_empty+0x4c>)
 800ec04:	2201      	movs	r2, #1
 800ec06:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f00a ffdb 	bl	8019bc4 <sys_arch_unprotect>

  if (!queued) {
 800ec0e:	78fb      	ldrb	r3, [r7, #3]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d10f      	bne.n	800ec34 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ec14:	2100      	movs	r1, #0
 800ec16:	480a      	ldr	r0, [pc, #40]	; (800ec40 <pbuf_pool_is_empty+0x50>)
 800ec18:	f7fe fee0 	bl	800d9dc <tcpip_try_callback>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d008      	beq.n	800ec34 <pbuf_pool_is_empty+0x44>
 800ec22:	f00a ffc1 	bl	8019ba8 <sys_arch_protect>
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	4b04      	ldr	r3, [pc, #16]	; (800ec3c <pbuf_pool_is_empty+0x4c>)
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	701a      	strb	r2, [r3, #0]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f00a ffc8 	bl	8019bc4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ec34:	bf00      	nop
 800ec36:	3708      	adds	r7, #8
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	2000f38c 	.word	0x2000f38c
 800ec40:	0800ebdd 	.word	0x0800ebdd

0800ec44 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b085      	sub	sp, #20
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	4611      	mov	r1, r2
 800ec50:	461a      	mov	r2, r3
 800ec52:	460b      	mov	r3, r1
 800ec54:	80fb      	strh	r3, [r7, #6]
 800ec56:	4613      	mov	r3, r2
 800ec58:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	68ba      	ldr	r2, [r7, #8]
 800ec64:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	88fa      	ldrh	r2, [r7, #6]
 800ec6a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	88ba      	ldrh	r2, [r7, #4]
 800ec70:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ec72:	8b3b      	ldrh	r3, [r7, #24]
 800ec74:	b2da      	uxtb	r2, r3
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	7f3a      	ldrb	r2, [r7, #28]
 800ec7e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2201      	movs	r2, #1
 800ec84:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	73da      	strb	r2, [r3, #15]
}
 800ec8c:	bf00      	nop
 800ec8e:	3714      	adds	r7, #20
 800ec90:	46bd      	mov	sp, r7
 800ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec96:	4770      	bx	lr

0800ec98 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b08c      	sub	sp, #48	; 0x30
 800ec9c:	af02      	add	r7, sp, #8
 800ec9e:	4603      	mov	r3, r0
 800eca0:	71fb      	strb	r3, [r7, #7]
 800eca2:	460b      	mov	r3, r1
 800eca4:	80bb      	strh	r3, [r7, #4]
 800eca6:	4613      	mov	r3, r2
 800eca8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ecaa:	79fb      	ldrb	r3, [r7, #7]
 800ecac:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ecae:	887b      	ldrh	r3, [r7, #2]
 800ecb0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ecb4:	d07f      	beq.n	800edb6 <pbuf_alloc+0x11e>
 800ecb6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ecba:	f300 80c8 	bgt.w	800ee4e <pbuf_alloc+0x1b6>
 800ecbe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ecc2:	d010      	beq.n	800ece6 <pbuf_alloc+0x4e>
 800ecc4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ecc8:	f300 80c1 	bgt.w	800ee4e <pbuf_alloc+0x1b6>
 800eccc:	2b01      	cmp	r3, #1
 800ecce:	d002      	beq.n	800ecd6 <pbuf_alloc+0x3e>
 800ecd0:	2b41      	cmp	r3, #65	; 0x41
 800ecd2:	f040 80bc 	bne.w	800ee4e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ecd6:	887a      	ldrh	r2, [r7, #2]
 800ecd8:	88bb      	ldrh	r3, [r7, #4]
 800ecda:	4619      	mov	r1, r3
 800ecdc:	2000      	movs	r0, #0
 800ecde:	f000 f8d1 	bl	800ee84 <pbuf_alloc_reference>
 800ece2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ece4:	e0bd      	b.n	800ee62 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ece6:	2300      	movs	r3, #0
 800ece8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ecea:	2300      	movs	r3, #0
 800ecec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ecee:	88bb      	ldrh	r3, [r7, #4]
 800ecf0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ecf2:	200c      	movs	r0, #12
 800ecf4:	f7ff fbb2 	bl	800e45c <memp_malloc>
 800ecf8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d109      	bne.n	800ed14 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ed00:	f7ff ff76 	bl	800ebf0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ed04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d002      	beq.n	800ed10 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ed0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed0c:	f000 faa8 	bl	800f260 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ed10:	2300      	movs	r3, #0
 800ed12:	e0a7      	b.n	800ee64 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ed14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed16:	3303      	adds	r3, #3
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	f023 0303 	bic.w	r3, r3, #3
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	8b7a      	ldrh	r2, [r7, #26]
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	bf28      	it	cs
 800ed2c:	4613      	movcs	r3, r2
 800ed2e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ed30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed32:	3310      	adds	r3, #16
 800ed34:	693a      	ldr	r2, [r7, #16]
 800ed36:	4413      	add	r3, r2
 800ed38:	3303      	adds	r3, #3
 800ed3a:	f023 0303 	bic.w	r3, r3, #3
 800ed3e:	4618      	mov	r0, r3
 800ed40:	89f9      	ldrh	r1, [r7, #14]
 800ed42:	8b7a      	ldrh	r2, [r7, #26]
 800ed44:	2300      	movs	r3, #0
 800ed46:	9301      	str	r3, [sp, #4]
 800ed48:	887b      	ldrh	r3, [r7, #2]
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	4601      	mov	r1, r0
 800ed50:	6938      	ldr	r0, [r7, #16]
 800ed52:	f7ff ff77 	bl	800ec44 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	685b      	ldr	r3, [r3, #4]
 800ed5a:	f003 0303 	and.w	r3, r3, #3
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d006      	beq.n	800ed70 <pbuf_alloc+0xd8>
 800ed62:	4b42      	ldr	r3, [pc, #264]	; (800ee6c <pbuf_alloc+0x1d4>)
 800ed64:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed68:	4941      	ldr	r1, [pc, #260]	; (800ee70 <pbuf_alloc+0x1d8>)
 800ed6a:	4842      	ldr	r0, [pc, #264]	; (800ee74 <pbuf_alloc+0x1dc>)
 800ed6c:	f00b fb72 	bl	801a454 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ed70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed72:	3303      	adds	r3, #3
 800ed74:	f023 0303 	bic.w	r3, r3, #3
 800ed78:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ed7c:	d106      	bne.n	800ed8c <pbuf_alloc+0xf4>
 800ed7e:	4b3b      	ldr	r3, [pc, #236]	; (800ee6c <pbuf_alloc+0x1d4>)
 800ed80:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ed84:	493c      	ldr	r1, [pc, #240]	; (800ee78 <pbuf_alloc+0x1e0>)
 800ed86:	483b      	ldr	r0, [pc, #236]	; (800ee74 <pbuf_alloc+0x1dc>)
 800ed88:	f00b fb64 	bl	801a454 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ed8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d102      	bne.n	800ed98 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	627b      	str	r3, [r7, #36]	; 0x24
 800ed96:	e002      	b.n	800ed9e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	693a      	ldr	r2, [r7, #16]
 800ed9c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800eda2:	8b7a      	ldrh	r2, [r7, #26]
 800eda4:	89fb      	ldrh	r3, [r7, #14]
 800eda6:	1ad3      	subs	r3, r2, r3
 800eda8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800edaa:	2300      	movs	r3, #0
 800edac:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800edae:	8b7b      	ldrh	r3, [r7, #26]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d19e      	bne.n	800ecf2 <pbuf_alloc+0x5a>
      break;
 800edb4:	e055      	b.n	800ee62 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800edb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800edb8:	3303      	adds	r3, #3
 800edba:	b29b      	uxth	r3, r3
 800edbc:	f023 0303 	bic.w	r3, r3, #3
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	88bb      	ldrh	r3, [r7, #4]
 800edc4:	3303      	adds	r3, #3
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	f023 0303 	bic.w	r3, r3, #3
 800edcc:	b29b      	uxth	r3, r3
 800edce:	4413      	add	r3, r2
 800edd0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800edd2:	8b3b      	ldrh	r3, [r7, #24]
 800edd4:	3310      	adds	r3, #16
 800edd6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800edd8:	8b3a      	ldrh	r2, [r7, #24]
 800edda:	88bb      	ldrh	r3, [r7, #4]
 800eddc:	3303      	adds	r3, #3
 800edde:	f023 0303 	bic.w	r3, r3, #3
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d306      	bcc.n	800edf4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ede6:	8afa      	ldrh	r2, [r7, #22]
 800ede8:	88bb      	ldrh	r3, [r7, #4]
 800edea:	3303      	adds	r3, #3
 800edec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d201      	bcs.n	800edf8 <pbuf_alloc+0x160>
        return NULL;
 800edf4:	2300      	movs	r3, #0
 800edf6:	e035      	b.n	800ee64 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800edf8:	8afb      	ldrh	r3, [r7, #22]
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7ff f9ac 	bl	800e158 <mem_malloc>
 800ee00:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ee02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d101      	bne.n	800ee0c <pbuf_alloc+0x174>
        return NULL;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	e02b      	b.n	800ee64 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ee0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee0e:	3310      	adds	r3, #16
 800ee10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee12:	4413      	add	r3, r2
 800ee14:	3303      	adds	r3, #3
 800ee16:	f023 0303 	bic.w	r3, r3, #3
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	88b9      	ldrh	r1, [r7, #4]
 800ee1e:	88ba      	ldrh	r2, [r7, #4]
 800ee20:	2300      	movs	r3, #0
 800ee22:	9301      	str	r3, [sp, #4]
 800ee24:	887b      	ldrh	r3, [r7, #2]
 800ee26:	9300      	str	r3, [sp, #0]
 800ee28:	460b      	mov	r3, r1
 800ee2a:	4601      	mov	r1, r0
 800ee2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee2e:	f7ff ff09 	bl	800ec44 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ee32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	f003 0303 	and.w	r3, r3, #3
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d010      	beq.n	800ee60 <pbuf_alloc+0x1c8>
 800ee3e:	4b0b      	ldr	r3, [pc, #44]	; (800ee6c <pbuf_alloc+0x1d4>)
 800ee40:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ee44:	490d      	ldr	r1, [pc, #52]	; (800ee7c <pbuf_alloc+0x1e4>)
 800ee46:	480b      	ldr	r0, [pc, #44]	; (800ee74 <pbuf_alloc+0x1dc>)
 800ee48:	f00b fb04 	bl	801a454 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ee4c:	e008      	b.n	800ee60 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ee4e:	4b07      	ldr	r3, [pc, #28]	; (800ee6c <pbuf_alloc+0x1d4>)
 800ee50:	f240 1227 	movw	r2, #295	; 0x127
 800ee54:	490a      	ldr	r1, [pc, #40]	; (800ee80 <pbuf_alloc+0x1e8>)
 800ee56:	4807      	ldr	r0, [pc, #28]	; (800ee74 <pbuf_alloc+0x1dc>)
 800ee58:	f00b fafc 	bl	801a454 <iprintf>
      return NULL;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	e001      	b.n	800ee64 <pbuf_alloc+0x1cc>
      break;
 800ee60:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ee62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3728      	adds	r7, #40	; 0x28
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}
 800ee6c:	0801c1a8 	.word	0x0801c1a8
 800ee70:	0801c1d8 	.word	0x0801c1d8
 800ee74:	0801c208 	.word	0x0801c208
 800ee78:	0801c230 	.word	0x0801c230
 800ee7c:	0801c264 	.word	0x0801c264
 800ee80:	0801c290 	.word	0x0801c290

0800ee84 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b086      	sub	sp, #24
 800ee88:	af02      	add	r7, sp, #8
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	807b      	strh	r3, [r7, #2]
 800ee90:	4613      	mov	r3, r2
 800ee92:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ee94:	883b      	ldrh	r3, [r7, #0]
 800ee96:	2b41      	cmp	r3, #65	; 0x41
 800ee98:	d009      	beq.n	800eeae <pbuf_alloc_reference+0x2a>
 800ee9a:	883b      	ldrh	r3, [r7, #0]
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d006      	beq.n	800eeae <pbuf_alloc_reference+0x2a>
 800eea0:	4b0f      	ldr	r3, [pc, #60]	; (800eee0 <pbuf_alloc_reference+0x5c>)
 800eea2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800eea6:	490f      	ldr	r1, [pc, #60]	; (800eee4 <pbuf_alloc_reference+0x60>)
 800eea8:	480f      	ldr	r0, [pc, #60]	; (800eee8 <pbuf_alloc_reference+0x64>)
 800eeaa:	f00b fad3 	bl	801a454 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800eeae:	200b      	movs	r0, #11
 800eeb0:	f7ff fad4 	bl	800e45c <memp_malloc>
 800eeb4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d101      	bne.n	800eec0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800eebc:	2300      	movs	r3, #0
 800eebe:	e00b      	b.n	800eed8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800eec0:	8879      	ldrh	r1, [r7, #2]
 800eec2:	887a      	ldrh	r2, [r7, #2]
 800eec4:	2300      	movs	r3, #0
 800eec6:	9301      	str	r3, [sp, #4]
 800eec8:	883b      	ldrh	r3, [r7, #0]
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	460b      	mov	r3, r1
 800eece:	6879      	ldr	r1, [r7, #4]
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	f7ff feb7 	bl	800ec44 <pbuf_init_alloced_pbuf>
  return p;
 800eed6:	68fb      	ldr	r3, [r7, #12]
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3710      	adds	r7, #16
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	0801c1a8 	.word	0x0801c1a8
 800eee4:	0801c2ac 	.word	0x0801c2ac
 800eee8:	0801c208 	.word	0x0801c208

0800eeec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b088      	sub	sp, #32
 800eef0:	af02      	add	r7, sp, #8
 800eef2:	607b      	str	r3, [r7, #4]
 800eef4:	4603      	mov	r3, r0
 800eef6:	73fb      	strb	r3, [r7, #15]
 800eef8:	460b      	mov	r3, r1
 800eefa:	81bb      	strh	r3, [r7, #12]
 800eefc:	4613      	mov	r3, r2
 800eefe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ef00:	7bfb      	ldrb	r3, [r7, #15]
 800ef02:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ef04:	8a7b      	ldrh	r3, [r7, #18]
 800ef06:	3303      	adds	r3, #3
 800ef08:	f023 0203 	bic.w	r2, r3, #3
 800ef0c:	89bb      	ldrh	r3, [r7, #12]
 800ef0e:	441a      	add	r2, r3
 800ef10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d901      	bls.n	800ef1a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ef16:	2300      	movs	r3, #0
 800ef18:	e018      	b.n	800ef4c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ef1a:	6a3b      	ldr	r3, [r7, #32]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d007      	beq.n	800ef30 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ef20:	8a7b      	ldrh	r3, [r7, #18]
 800ef22:	3303      	adds	r3, #3
 800ef24:	f023 0303 	bic.w	r3, r3, #3
 800ef28:	6a3a      	ldr	r2, [r7, #32]
 800ef2a:	4413      	add	r3, r2
 800ef2c:	617b      	str	r3, [r7, #20]
 800ef2e:	e001      	b.n	800ef34 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ef30:	2300      	movs	r3, #0
 800ef32:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	89b9      	ldrh	r1, [r7, #12]
 800ef38:	89ba      	ldrh	r2, [r7, #12]
 800ef3a:	2302      	movs	r3, #2
 800ef3c:	9301      	str	r3, [sp, #4]
 800ef3e:	897b      	ldrh	r3, [r7, #10]
 800ef40:	9300      	str	r3, [sp, #0]
 800ef42:	460b      	mov	r3, r1
 800ef44:	6979      	ldr	r1, [r7, #20]
 800ef46:	f7ff fe7d 	bl	800ec44 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ef4a:	687b      	ldr	r3, [r7, #4]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3718      	adds	r7, #24
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d106      	bne.n	800ef74 <pbuf_realloc+0x20>
 800ef66:	4b3a      	ldr	r3, [pc, #232]	; (800f050 <pbuf_realloc+0xfc>)
 800ef68:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ef6c:	4939      	ldr	r1, [pc, #228]	; (800f054 <pbuf_realloc+0x100>)
 800ef6e:	483a      	ldr	r0, [pc, #232]	; (800f058 <pbuf_realloc+0x104>)
 800ef70:	f00b fa70 	bl	801a454 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	891b      	ldrh	r3, [r3, #8]
 800ef78:	887a      	ldrh	r2, [r7, #2]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d263      	bcs.n	800f046 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	891a      	ldrh	r2, [r3, #8]
 800ef82:	887b      	ldrh	r3, [r7, #2]
 800ef84:	1ad3      	subs	r3, r2, r3
 800ef86:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ef88:	887b      	ldrh	r3, [r7, #2]
 800ef8a:	817b      	strh	r3, [r7, #10]
  q = p;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ef90:	e018      	b.n	800efc4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	895b      	ldrh	r3, [r3, #10]
 800ef96:	897a      	ldrh	r2, [r7, #10]
 800ef98:	1ad3      	subs	r3, r2, r3
 800ef9a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	891a      	ldrh	r2, [r3, #8]
 800efa0:	893b      	ldrh	r3, [r7, #8]
 800efa2:	1ad3      	subs	r3, r2, r3
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d106      	bne.n	800efc4 <pbuf_realloc+0x70>
 800efb6:	4b26      	ldr	r3, [pc, #152]	; (800f050 <pbuf_realloc+0xfc>)
 800efb8:	f240 12af 	movw	r2, #431	; 0x1af
 800efbc:	4927      	ldr	r1, [pc, #156]	; (800f05c <pbuf_realloc+0x108>)
 800efbe:	4826      	ldr	r0, [pc, #152]	; (800f058 <pbuf_realloc+0x104>)
 800efc0:	f00b fa48 	bl	801a454 <iprintf>
  while (rem_len > q->len) {
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	895b      	ldrh	r3, [r3, #10]
 800efc8:	897a      	ldrh	r2, [r7, #10]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d8e1      	bhi.n	800ef92 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	7b1b      	ldrb	r3, [r3, #12]
 800efd2:	f003 030f 	and.w	r3, r3, #15
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d121      	bne.n	800f01e <pbuf_realloc+0xca>
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	895b      	ldrh	r3, [r3, #10]
 800efde:	897a      	ldrh	r2, [r7, #10]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d01c      	beq.n	800f01e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	7b5b      	ldrb	r3, [r3, #13]
 800efe8:	f003 0302 	and.w	r3, r3, #2
 800efec:	2b00      	cmp	r3, #0
 800efee:	d116      	bne.n	800f01e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	685a      	ldr	r2, [r3, #4]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	1ad3      	subs	r3, r2, r3
 800eff8:	b29a      	uxth	r2, r3
 800effa:	897b      	ldrh	r3, [r7, #10]
 800effc:	4413      	add	r3, r2
 800effe:	b29b      	uxth	r3, r3
 800f000:	4619      	mov	r1, r3
 800f002:	68f8      	ldr	r0, [r7, #12]
 800f004:	f7fe ff9e 	bl	800df44 <mem_trim>
 800f008:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d106      	bne.n	800f01e <pbuf_realloc+0xca>
 800f010:	4b0f      	ldr	r3, [pc, #60]	; (800f050 <pbuf_realloc+0xfc>)
 800f012:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f016:	4912      	ldr	r1, [pc, #72]	; (800f060 <pbuf_realloc+0x10c>)
 800f018:	480f      	ldr	r0, [pc, #60]	; (800f058 <pbuf_realloc+0x104>)
 800f01a:	f00b fa1b 	bl	801a454 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	897a      	ldrh	r2, [r7, #10]
 800f022:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	895a      	ldrh	r2, [r3, #10]
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d004      	beq.n	800f03e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	4618      	mov	r0, r3
 800f03a:	f000 f911 	bl	800f260 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2200      	movs	r2, #0
 800f042:	601a      	str	r2, [r3, #0]
 800f044:	e000      	b.n	800f048 <pbuf_realloc+0xf4>
    return;
 800f046:	bf00      	nop

}
 800f048:	3710      	adds	r7, #16
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	0801c1a8 	.word	0x0801c1a8
 800f054:	0801c2c0 	.word	0x0801c2c0
 800f058:	0801c208 	.word	0x0801c208
 800f05c:	0801c2d8 	.word	0x0801c2d8
 800f060:	0801c2f0 	.word	0x0801c2f0

0800f064 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b086      	sub	sp, #24
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	4613      	mov	r3, r2
 800f070:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d106      	bne.n	800f086 <pbuf_add_header_impl+0x22>
 800f078:	4b2b      	ldr	r3, [pc, #172]	; (800f128 <pbuf_add_header_impl+0xc4>)
 800f07a:	f240 12df 	movw	r2, #479	; 0x1df
 800f07e:	492b      	ldr	r1, [pc, #172]	; (800f12c <pbuf_add_header_impl+0xc8>)
 800f080:	482b      	ldr	r0, [pc, #172]	; (800f130 <pbuf_add_header_impl+0xcc>)
 800f082:	f00b f9e7 	bl	801a454 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d003      	beq.n	800f094 <pbuf_add_header_impl+0x30>
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f092:	d301      	bcc.n	800f098 <pbuf_add_header_impl+0x34>
    return 1;
 800f094:	2301      	movs	r3, #1
 800f096:	e043      	b.n	800f120 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d101      	bne.n	800f0a2 <pbuf_add_header_impl+0x3e>
    return 0;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	e03e      	b.n	800f120 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	891a      	ldrh	r2, [r3, #8]
 800f0aa:	8a7b      	ldrh	r3, [r7, #18]
 800f0ac:	4413      	add	r3, r2
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	8a7a      	ldrh	r2, [r7, #18]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d901      	bls.n	800f0ba <pbuf_add_header_impl+0x56>
    return 1;
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	e032      	b.n	800f120 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	7b1b      	ldrb	r3, [r3, #12]
 800f0be:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f0c0:	8a3b      	ldrh	r3, [r7, #16]
 800f0c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00c      	beq.n	800f0e4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	685a      	ldr	r2, [r3, #4]
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	425b      	negs	r3, r3
 800f0d2:	4413      	add	r3, r2
 800f0d4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	3310      	adds	r3, #16
 800f0da:	697a      	ldr	r2, [r7, #20]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d20d      	bcs.n	800f0fc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e01d      	b.n	800f120 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f0e4:	79fb      	ldrb	r3, [r7, #7]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d006      	beq.n	800f0f8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	685a      	ldr	r2, [r3, #4]
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	425b      	negs	r3, r3
 800f0f2:	4413      	add	r3, r2
 800f0f4:	617b      	str	r3, [r7, #20]
 800f0f6:	e001      	b.n	800f0fc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	e011      	b.n	800f120 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	697a      	ldr	r2, [r7, #20]
 800f100:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	895a      	ldrh	r2, [r3, #10]
 800f106:	8a7b      	ldrh	r3, [r7, #18]
 800f108:	4413      	add	r3, r2
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	891a      	ldrh	r2, [r3, #8]
 800f114:	8a7b      	ldrh	r3, [r7, #18]
 800f116:	4413      	add	r3, r2
 800f118:	b29a      	uxth	r2, r3
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	811a      	strh	r2, [r3, #8]


  return 0;
 800f11e:	2300      	movs	r3, #0
}
 800f120:	4618      	mov	r0, r3
 800f122:	3718      	adds	r7, #24
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}
 800f128:	0801c1a8 	.word	0x0801c1a8
 800f12c:	0801c30c 	.word	0x0801c30c
 800f130:	0801c208 	.word	0x0801c208

0800f134 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f13e:	2200      	movs	r2, #0
 800f140:	6839      	ldr	r1, [r7, #0]
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f7ff ff8e 	bl	800f064 <pbuf_add_header_impl>
 800f148:	4603      	mov	r3, r0
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3708      	adds	r7, #8
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
	...

0800f154 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d106      	bne.n	800f172 <pbuf_remove_header+0x1e>
 800f164:	4b20      	ldr	r3, [pc, #128]	; (800f1e8 <pbuf_remove_header+0x94>)
 800f166:	f240 224b 	movw	r2, #587	; 0x24b
 800f16a:	4920      	ldr	r1, [pc, #128]	; (800f1ec <pbuf_remove_header+0x98>)
 800f16c:	4820      	ldr	r0, [pc, #128]	; (800f1f0 <pbuf_remove_header+0x9c>)
 800f16e:	f00b f971 	bl	801a454 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d003      	beq.n	800f180 <pbuf_remove_header+0x2c>
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f17e:	d301      	bcc.n	800f184 <pbuf_remove_header+0x30>
    return 1;
 800f180:	2301      	movs	r3, #1
 800f182:	e02c      	b.n	800f1de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d101      	bne.n	800f18e <pbuf_remove_header+0x3a>
    return 0;
 800f18a:	2300      	movs	r3, #0
 800f18c:	e027      	b.n	800f1de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	895b      	ldrh	r3, [r3, #10]
 800f196:	89fa      	ldrh	r2, [r7, #14]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d908      	bls.n	800f1ae <pbuf_remove_header+0x5a>
 800f19c:	4b12      	ldr	r3, [pc, #72]	; (800f1e8 <pbuf_remove_header+0x94>)
 800f19e:	f240 2255 	movw	r2, #597	; 0x255
 800f1a2:	4914      	ldr	r1, [pc, #80]	; (800f1f4 <pbuf_remove_header+0xa0>)
 800f1a4:	4812      	ldr	r0, [pc, #72]	; (800f1f0 <pbuf_remove_header+0x9c>)
 800f1a6:	f00b f955 	bl	801a454 <iprintf>
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	e017      	b.n	800f1de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	685a      	ldr	r2, [r3, #4]
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	441a      	add	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	895a      	ldrh	r2, [r3, #10]
 800f1c4:	89fb      	ldrh	r3, [r7, #14]
 800f1c6:	1ad3      	subs	r3, r2, r3
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	891a      	ldrh	r2, [r3, #8]
 800f1d2:	89fb      	ldrh	r3, [r7, #14]
 800f1d4:	1ad3      	subs	r3, r2, r3
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f1dc:	2300      	movs	r3, #0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3710      	adds	r7, #16
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	0801c1a8 	.word	0x0801c1a8
 800f1ec:	0801c30c 	.word	0x0801c30c
 800f1f0:	0801c208 	.word	0x0801c208
 800f1f4:	0801c318 	.word	0x0801c318

0800f1f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	460b      	mov	r3, r1
 800f202:	807b      	strh	r3, [r7, #2]
 800f204:	4613      	mov	r3, r2
 800f206:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f208:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	da08      	bge.n	800f222 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f210:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f214:	425b      	negs	r3, r3
 800f216:	4619      	mov	r1, r3
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f7ff ff9b 	bl	800f154 <pbuf_remove_header>
 800f21e:	4603      	mov	r3, r0
 800f220:	e007      	b.n	800f232 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f222:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f226:	787a      	ldrb	r2, [r7, #1]
 800f228:	4619      	mov	r1, r3
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f7ff ff1a 	bl	800f064 <pbuf_add_header_impl>
 800f230:	4603      	mov	r3, r0
  }
}
 800f232:	4618      	mov	r0, r3
 800f234:	3708      	adds	r7, #8
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}

0800f23a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f23a:	b580      	push	{r7, lr}
 800f23c:	b082      	sub	sp, #8
 800f23e:	af00      	add	r7, sp, #0
 800f240:	6078      	str	r0, [r7, #4]
 800f242:	460b      	mov	r3, r1
 800f244:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f246:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f24a:	2201      	movs	r2, #1
 800f24c:	4619      	mov	r1, r3
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7ff ffd2 	bl	800f1f8 <pbuf_header_impl>
 800f254:	4603      	mov	r3, r0
}
 800f256:	4618      	mov	r0, r3
 800f258:	3708      	adds	r7, #8
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
	...

0800f260 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b088      	sub	sp, #32
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d10b      	bne.n	800f286 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d106      	bne.n	800f282 <pbuf_free+0x22>
 800f274:	4b3b      	ldr	r3, [pc, #236]	; (800f364 <pbuf_free+0x104>)
 800f276:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f27a:	493b      	ldr	r1, [pc, #236]	; (800f368 <pbuf_free+0x108>)
 800f27c:	483b      	ldr	r0, [pc, #236]	; (800f36c <pbuf_free+0x10c>)
 800f27e:	f00b f8e9 	bl	801a454 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f282:	2300      	movs	r3, #0
 800f284:	e069      	b.n	800f35a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f286:	2300      	movs	r3, #0
 800f288:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f28a:	e062      	b.n	800f352 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f28c:	f00a fc8c 	bl	8019ba8 <sys_arch_protect>
 800f290:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	7b9b      	ldrb	r3, [r3, #14]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d106      	bne.n	800f2a8 <pbuf_free+0x48>
 800f29a:	4b32      	ldr	r3, [pc, #200]	; (800f364 <pbuf_free+0x104>)
 800f29c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f2a0:	4933      	ldr	r1, [pc, #204]	; (800f370 <pbuf_free+0x110>)
 800f2a2:	4832      	ldr	r0, [pc, #200]	; (800f36c <pbuf_free+0x10c>)
 800f2a4:	f00b f8d6 	bl	801a454 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	7b9b      	ldrb	r3, [r3, #14]
 800f2ac:	3b01      	subs	r3, #1
 800f2ae:	b2da      	uxtb	r2, r3
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	739a      	strb	r2, [r3, #14]
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	7b9b      	ldrb	r3, [r3, #14]
 800f2b8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f2ba:	69b8      	ldr	r0, [r7, #24]
 800f2bc:	f00a fc82 	bl	8019bc4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f2c0:	7dfb      	ldrb	r3, [r7, #23]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d143      	bne.n	800f34e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	7b1b      	ldrb	r3, [r3, #12]
 800f2d0:	f003 030f 	and.w	r3, r3, #15
 800f2d4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	7b5b      	ldrb	r3, [r3, #13]
 800f2da:	f003 0302 	and.w	r3, r3, #2
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d011      	beq.n	800f306 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	691b      	ldr	r3, [r3, #16]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d106      	bne.n	800f2fc <pbuf_free+0x9c>
 800f2ee:	4b1d      	ldr	r3, [pc, #116]	; (800f364 <pbuf_free+0x104>)
 800f2f0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f2f4:	491f      	ldr	r1, [pc, #124]	; (800f374 <pbuf_free+0x114>)
 800f2f6:	481d      	ldr	r0, [pc, #116]	; (800f36c <pbuf_free+0x10c>)
 800f2f8:	f00b f8ac 	bl	801a454 <iprintf>
        pc->custom_free_function(p);
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	691b      	ldr	r3, [r3, #16]
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	4798      	blx	r3
 800f304:	e01d      	b.n	800f342 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f306:	7bfb      	ldrb	r3, [r7, #15]
 800f308:	2b02      	cmp	r3, #2
 800f30a:	d104      	bne.n	800f316 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f30c:	6879      	ldr	r1, [r7, #4]
 800f30e:	200c      	movs	r0, #12
 800f310:	f7ff f8f6 	bl	800e500 <memp_free>
 800f314:	e015      	b.n	800f342 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f316:	7bfb      	ldrb	r3, [r7, #15]
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d104      	bne.n	800f326 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f31c:	6879      	ldr	r1, [r7, #4]
 800f31e:	200b      	movs	r0, #11
 800f320:	f7ff f8ee 	bl	800e500 <memp_free>
 800f324:	e00d      	b.n	800f342 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f326:	7bfb      	ldrb	r3, [r7, #15]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d103      	bne.n	800f334 <pbuf_free+0xd4>
          mem_free(p);
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f7fe fd79 	bl	800de24 <mem_free>
 800f332:	e006      	b.n	800f342 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f334:	4b0b      	ldr	r3, [pc, #44]	; (800f364 <pbuf_free+0x104>)
 800f336:	f240 320f 	movw	r2, #783	; 0x30f
 800f33a:	490f      	ldr	r1, [pc, #60]	; (800f378 <pbuf_free+0x118>)
 800f33c:	480b      	ldr	r0, [pc, #44]	; (800f36c <pbuf_free+0x10c>)
 800f33e:	f00b f889 	bl	801a454 <iprintf>
        }
      }
      count++;
 800f342:	7ffb      	ldrb	r3, [r7, #31]
 800f344:	3301      	adds	r3, #1
 800f346:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	607b      	str	r3, [r7, #4]
 800f34c:	e001      	b.n	800f352 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f34e:	2300      	movs	r3, #0
 800f350:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d199      	bne.n	800f28c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f358:	7ffb      	ldrb	r3, [r7, #31]
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3720      	adds	r7, #32
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
 800f362:	bf00      	nop
 800f364:	0801c1a8 	.word	0x0801c1a8
 800f368:	0801c30c 	.word	0x0801c30c
 800f36c:	0801c208 	.word	0x0801c208
 800f370:	0801c338 	.word	0x0801c338
 800f374:	0801c350 	.word	0x0801c350
 800f378:	0801c374 	.word	0x0801c374

0800f37c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f37c:	b480      	push	{r7}
 800f37e:	b085      	sub	sp, #20
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f384:	2300      	movs	r3, #0
 800f386:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f388:	e005      	b.n	800f396 <pbuf_clen+0x1a>
    ++len;
 800f38a:	89fb      	ldrh	r3, [r7, #14]
 800f38c:	3301      	adds	r3, #1
 800f38e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d1f6      	bne.n	800f38a <pbuf_clen+0xe>
  }
  return len;
 800f39c:	89fb      	ldrh	r3, [r7, #14]
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3714      	adds	r7, #20
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a8:	4770      	bx	lr
	...

0800f3ac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b084      	sub	sp, #16
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d016      	beq.n	800f3e8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f3ba:	f00a fbf5 	bl	8019ba8 <sys_arch_protect>
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	7b9b      	ldrb	r3, [r3, #14]
 800f3c4:	3301      	adds	r3, #1
 800f3c6:	b2da      	uxtb	r2, r3
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	739a      	strb	r2, [r3, #14]
 800f3cc:	68f8      	ldr	r0, [r7, #12]
 800f3ce:	f00a fbf9 	bl	8019bc4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	7b9b      	ldrb	r3, [r3, #14]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d106      	bne.n	800f3e8 <pbuf_ref+0x3c>
 800f3da:	4b05      	ldr	r3, [pc, #20]	; (800f3f0 <pbuf_ref+0x44>)
 800f3dc:	f240 3242 	movw	r2, #834	; 0x342
 800f3e0:	4904      	ldr	r1, [pc, #16]	; (800f3f4 <pbuf_ref+0x48>)
 800f3e2:	4805      	ldr	r0, [pc, #20]	; (800f3f8 <pbuf_ref+0x4c>)
 800f3e4:	f00b f836 	bl	801a454 <iprintf>
  }
}
 800f3e8:	bf00      	nop
 800f3ea:	3710      	adds	r7, #16
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	0801c1a8 	.word	0x0801c1a8
 800f3f4:	0801c388 	.word	0x0801c388
 800f3f8:	0801c208 	.word	0x0801c208

0800f3fc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b084      	sub	sp, #16
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d002      	beq.n	800f412 <pbuf_cat+0x16>
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d107      	bne.n	800f422 <pbuf_cat+0x26>
 800f412:	4b20      	ldr	r3, [pc, #128]	; (800f494 <pbuf_cat+0x98>)
 800f414:	f240 3259 	movw	r2, #857	; 0x359
 800f418:	491f      	ldr	r1, [pc, #124]	; (800f498 <pbuf_cat+0x9c>)
 800f41a:	4820      	ldr	r0, [pc, #128]	; (800f49c <pbuf_cat+0xa0>)
 800f41c:	f00b f81a 	bl	801a454 <iprintf>
 800f420:	e034      	b.n	800f48c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	60fb      	str	r3, [r7, #12]
 800f426:	e00a      	b.n	800f43e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	891a      	ldrh	r2, [r3, #8]
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	891b      	ldrh	r3, [r3, #8]
 800f430:	4413      	add	r3, r2
 800f432:	b29a      	uxth	r2, r3
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	60fb      	str	r3, [r7, #12]
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1f0      	bne.n	800f428 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	891a      	ldrh	r2, [r3, #8]
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	895b      	ldrh	r3, [r3, #10]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d006      	beq.n	800f460 <pbuf_cat+0x64>
 800f452:	4b10      	ldr	r3, [pc, #64]	; (800f494 <pbuf_cat+0x98>)
 800f454:	f240 3262 	movw	r2, #866	; 0x362
 800f458:	4911      	ldr	r1, [pc, #68]	; (800f4a0 <pbuf_cat+0xa4>)
 800f45a:	4810      	ldr	r0, [pc, #64]	; (800f49c <pbuf_cat+0xa0>)
 800f45c:	f00a fffa 	bl	801a454 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d006      	beq.n	800f476 <pbuf_cat+0x7a>
 800f468:	4b0a      	ldr	r3, [pc, #40]	; (800f494 <pbuf_cat+0x98>)
 800f46a:	f240 3263 	movw	r2, #867	; 0x363
 800f46e:	490d      	ldr	r1, [pc, #52]	; (800f4a4 <pbuf_cat+0xa8>)
 800f470:	480a      	ldr	r0, [pc, #40]	; (800f49c <pbuf_cat+0xa0>)
 800f472:	f00a ffef 	bl	801a454 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	891a      	ldrh	r2, [r3, #8]
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	891b      	ldrh	r3, [r3, #8]
 800f47e:	4413      	add	r3, r2
 800f480:	b29a      	uxth	r2, r3
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	683a      	ldr	r2, [r7, #0]
 800f48a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f48c:	3710      	adds	r7, #16
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	0801c1a8 	.word	0x0801c1a8
 800f498:	0801c39c 	.word	0x0801c39c
 800f49c:	0801c208 	.word	0x0801c208
 800f4a0:	0801c3d4 	.word	0x0801c3d4
 800f4a4:	0801c404 	.word	0x0801c404

0800f4a8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b082      	sub	sp, #8
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f4b2:	6839      	ldr	r1, [r7, #0]
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7ff ffa1 	bl	800f3fc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f4ba:	6838      	ldr	r0, [r7, #0]
 800f4bc:	f7ff ff76 	bl	800f3ac <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f4c0:	bf00      	nop
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b086      	sub	sp, #24
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	617b      	str	r3, [r7, #20]
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d008      	beq.n	800f4f2 <pbuf_copy+0x2a>
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d005      	beq.n	800f4f2 <pbuf_copy+0x2a>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	891a      	ldrh	r2, [r3, #8]
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	891b      	ldrh	r3, [r3, #8]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d209      	bcs.n	800f506 <pbuf_copy+0x3e>
 800f4f2:	4b57      	ldr	r3, [pc, #348]	; (800f650 <pbuf_copy+0x188>)
 800f4f4:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f4f8:	4956      	ldr	r1, [pc, #344]	; (800f654 <pbuf_copy+0x18c>)
 800f4fa:	4857      	ldr	r0, [pc, #348]	; (800f658 <pbuf_copy+0x190>)
 800f4fc:	f00a ffaa 	bl	801a454 <iprintf>
 800f500:	f06f 030f 	mvn.w	r3, #15
 800f504:	e09f      	b.n	800f646 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	895b      	ldrh	r3, [r3, #10]
 800f50a:	461a      	mov	r2, r3
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	1ad2      	subs	r2, r2, r3
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	895b      	ldrh	r3, [r3, #10]
 800f514:	4619      	mov	r1, r3
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	1acb      	subs	r3, r1, r3
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d306      	bcc.n	800f52c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	895b      	ldrh	r3, [r3, #10]
 800f522:	461a      	mov	r2, r3
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	1ad3      	subs	r3, r2, r3
 800f528:	60fb      	str	r3, [r7, #12]
 800f52a:	e005      	b.n	800f538 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	895b      	ldrh	r3, [r3, #10]
 800f530:	461a      	mov	r2, r3
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	1ad3      	subs	r3, r2, r3
 800f536:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	685a      	ldr	r2, [r3, #4]
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	18d0      	adds	r0, r2, r3
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	685a      	ldr	r2, [r3, #4]
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	4413      	add	r3, r2
 800f548:	68fa      	ldr	r2, [r7, #12]
 800f54a:	4619      	mov	r1, r3
 800f54c:	f00a fec2 	bl	801a2d4 <memcpy>
    offset_to += len;
 800f550:	697a      	ldr	r2, [r7, #20]
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	4413      	add	r3, r2
 800f556:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f558:	693a      	ldr	r2, [r7, #16]
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	4413      	add	r3, r2
 800f55e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	895b      	ldrh	r3, [r3, #10]
 800f564:	461a      	mov	r2, r3
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	4293      	cmp	r3, r2
 800f56a:	d906      	bls.n	800f57a <pbuf_copy+0xb2>
 800f56c:	4b38      	ldr	r3, [pc, #224]	; (800f650 <pbuf_copy+0x188>)
 800f56e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f572:	493a      	ldr	r1, [pc, #232]	; (800f65c <pbuf_copy+0x194>)
 800f574:	4838      	ldr	r0, [pc, #224]	; (800f658 <pbuf_copy+0x190>)
 800f576:	f00a ff6d 	bl	801a454 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	895b      	ldrh	r3, [r3, #10]
 800f57e:	461a      	mov	r2, r3
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	4293      	cmp	r3, r2
 800f584:	d906      	bls.n	800f594 <pbuf_copy+0xcc>
 800f586:	4b32      	ldr	r3, [pc, #200]	; (800f650 <pbuf_copy+0x188>)
 800f588:	f240 32da 	movw	r2, #986	; 0x3da
 800f58c:	4934      	ldr	r1, [pc, #208]	; (800f660 <pbuf_copy+0x198>)
 800f58e:	4832      	ldr	r0, [pc, #200]	; (800f658 <pbuf_copy+0x190>)
 800f590:	f00a ff60 	bl	801a454 <iprintf>
    if (offset_from >= p_from->len) {
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	895b      	ldrh	r3, [r3, #10]
 800f598:	461a      	mov	r2, r3
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d304      	bcc.n	800f5aa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	895b      	ldrh	r3, [r3, #10]
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d114      	bne.n	800f5e0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d10c      	bne.n	800f5e0 <pbuf_copy+0x118>
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d009      	beq.n	800f5e0 <pbuf_copy+0x118>
 800f5cc:	4b20      	ldr	r3, [pc, #128]	; (800f650 <pbuf_copy+0x188>)
 800f5ce:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f5d2:	4924      	ldr	r1, [pc, #144]	; (800f664 <pbuf_copy+0x19c>)
 800f5d4:	4820      	ldr	r0, [pc, #128]	; (800f658 <pbuf_copy+0x190>)
 800f5d6:	f00a ff3d 	bl	801a454 <iprintf>
 800f5da:	f06f 030f 	mvn.w	r3, #15
 800f5de:	e032      	b.n	800f646 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d013      	beq.n	800f60e <pbuf_copy+0x146>
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	895a      	ldrh	r2, [r3, #10]
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	891b      	ldrh	r3, [r3, #8]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d10d      	bne.n	800f60e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d009      	beq.n	800f60e <pbuf_copy+0x146>
 800f5fa:	4b15      	ldr	r3, [pc, #84]	; (800f650 <pbuf_copy+0x188>)
 800f5fc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f600:	4919      	ldr	r1, [pc, #100]	; (800f668 <pbuf_copy+0x1a0>)
 800f602:	4815      	ldr	r0, [pc, #84]	; (800f658 <pbuf_copy+0x190>)
 800f604:	f00a ff26 	bl	801a454 <iprintf>
 800f608:	f06f 0305 	mvn.w	r3, #5
 800f60c:	e01b      	b.n	800f646 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d013      	beq.n	800f63c <pbuf_copy+0x174>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	895a      	ldrh	r2, [r3, #10]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	891b      	ldrh	r3, [r3, #8]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d10d      	bne.n	800f63c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d009      	beq.n	800f63c <pbuf_copy+0x174>
 800f628:	4b09      	ldr	r3, [pc, #36]	; (800f650 <pbuf_copy+0x188>)
 800f62a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f62e:	490e      	ldr	r1, [pc, #56]	; (800f668 <pbuf_copy+0x1a0>)
 800f630:	4809      	ldr	r0, [pc, #36]	; (800f658 <pbuf_copy+0x190>)
 800f632:	f00a ff0f 	bl	801a454 <iprintf>
 800f636:	f06f 0305 	mvn.w	r3, #5
 800f63a:	e004      	b.n	800f646 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	f47f af61 	bne.w	800f506 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f644:	2300      	movs	r3, #0
}
 800f646:	4618      	mov	r0, r3
 800f648:	3718      	adds	r7, #24
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	0801c1a8 	.word	0x0801c1a8
 800f654:	0801c450 	.word	0x0801c450
 800f658:	0801c208 	.word	0x0801c208
 800f65c:	0801c480 	.word	0x0801c480
 800f660:	0801c498 	.word	0x0801c498
 800f664:	0801c4b4 	.word	0x0801c4b4
 800f668:	0801c4c4 	.word	0x0801c4c4

0800f66c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b088      	sub	sp, #32
 800f670:	af00      	add	r7, sp, #0
 800f672:	60f8      	str	r0, [r7, #12]
 800f674:	60b9      	str	r1, [r7, #8]
 800f676:	4611      	mov	r1, r2
 800f678:	461a      	mov	r2, r3
 800f67a:	460b      	mov	r3, r1
 800f67c:	80fb      	strh	r3, [r7, #6]
 800f67e:	4613      	mov	r3, r2
 800f680:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f682:	2300      	movs	r3, #0
 800f684:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f686:	2300      	movs	r3, #0
 800f688:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d108      	bne.n	800f6a2 <pbuf_copy_partial+0x36>
 800f690:	4b2b      	ldr	r3, [pc, #172]	; (800f740 <pbuf_copy_partial+0xd4>)
 800f692:	f240 420a 	movw	r2, #1034	; 0x40a
 800f696:	492b      	ldr	r1, [pc, #172]	; (800f744 <pbuf_copy_partial+0xd8>)
 800f698:	482b      	ldr	r0, [pc, #172]	; (800f748 <pbuf_copy_partial+0xdc>)
 800f69a:	f00a fedb 	bl	801a454 <iprintf>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	e04a      	b.n	800f738 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d108      	bne.n	800f6ba <pbuf_copy_partial+0x4e>
 800f6a8:	4b25      	ldr	r3, [pc, #148]	; (800f740 <pbuf_copy_partial+0xd4>)
 800f6aa:	f240 420b 	movw	r2, #1035	; 0x40b
 800f6ae:	4927      	ldr	r1, [pc, #156]	; (800f74c <pbuf_copy_partial+0xe0>)
 800f6b0:	4825      	ldr	r0, [pc, #148]	; (800f748 <pbuf_copy_partial+0xdc>)
 800f6b2:	f00a fecf 	bl	801a454 <iprintf>
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	e03e      	b.n	800f738 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	61fb      	str	r3, [r7, #28]
 800f6be:	e034      	b.n	800f72a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f6c0:	88bb      	ldrh	r3, [r7, #4]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d00a      	beq.n	800f6dc <pbuf_copy_partial+0x70>
 800f6c6:	69fb      	ldr	r3, [r7, #28]
 800f6c8:	895b      	ldrh	r3, [r3, #10]
 800f6ca:	88ba      	ldrh	r2, [r7, #4]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d305      	bcc.n	800f6dc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f6d0:	69fb      	ldr	r3, [r7, #28]
 800f6d2:	895b      	ldrh	r3, [r3, #10]
 800f6d4:	88ba      	ldrh	r2, [r7, #4]
 800f6d6:	1ad3      	subs	r3, r2, r3
 800f6d8:	80bb      	strh	r3, [r7, #4]
 800f6da:	e023      	b.n	800f724 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	895a      	ldrh	r2, [r3, #10]
 800f6e0:	88bb      	ldrh	r3, [r7, #4]
 800f6e2:	1ad3      	subs	r3, r2, r3
 800f6e4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f6e6:	8b3a      	ldrh	r2, [r7, #24]
 800f6e8:	88fb      	ldrh	r3, [r7, #6]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d901      	bls.n	800f6f2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f6ee:	88fb      	ldrh	r3, [r7, #6]
 800f6f0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f6f2:	8b7b      	ldrh	r3, [r7, #26]
 800f6f4:	68ba      	ldr	r2, [r7, #8]
 800f6f6:	18d0      	adds	r0, r2, r3
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	685a      	ldr	r2, [r3, #4]
 800f6fc:	88bb      	ldrh	r3, [r7, #4]
 800f6fe:	4413      	add	r3, r2
 800f700:	8b3a      	ldrh	r2, [r7, #24]
 800f702:	4619      	mov	r1, r3
 800f704:	f00a fde6 	bl	801a2d4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f708:	8afa      	ldrh	r2, [r7, #22]
 800f70a:	8b3b      	ldrh	r3, [r7, #24]
 800f70c:	4413      	add	r3, r2
 800f70e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f710:	8b7a      	ldrh	r2, [r7, #26]
 800f712:	8b3b      	ldrh	r3, [r7, #24]
 800f714:	4413      	add	r3, r2
 800f716:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f718:	88fa      	ldrh	r2, [r7, #6]
 800f71a:	8b3b      	ldrh	r3, [r7, #24]
 800f71c:	1ad3      	subs	r3, r2, r3
 800f71e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f720:	2300      	movs	r3, #0
 800f722:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f724:	69fb      	ldr	r3, [r7, #28]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	61fb      	str	r3, [r7, #28]
 800f72a:	88fb      	ldrh	r3, [r7, #6]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d002      	beq.n	800f736 <pbuf_copy_partial+0xca>
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d1c4      	bne.n	800f6c0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f736:	8afb      	ldrh	r3, [r7, #22]
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3720      	adds	r7, #32
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	0801c1a8 	.word	0x0801c1a8
 800f744:	0801c4f0 	.word	0x0801c4f0
 800f748:	0801c208 	.word	0x0801c208
 800f74c:	0801c510 	.word	0x0801c510

0800f750 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b084      	sub	sp, #16
 800f754:	af00      	add	r7, sp, #0
 800f756:	4603      	mov	r3, r0
 800f758:	603a      	str	r2, [r7, #0]
 800f75a:	71fb      	strb	r3, [r7, #7]
 800f75c:	460b      	mov	r3, r1
 800f75e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	8919      	ldrh	r1, [r3, #8]
 800f764:	88ba      	ldrh	r2, [r7, #4]
 800f766:	79fb      	ldrb	r3, [r7, #7]
 800f768:	4618      	mov	r0, r3
 800f76a:	f7ff fa95 	bl	800ec98 <pbuf_alloc>
 800f76e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d101      	bne.n	800f77a <pbuf_clone+0x2a>
    return NULL;
 800f776:	2300      	movs	r3, #0
 800f778:	e011      	b.n	800f79e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f77a:	6839      	ldr	r1, [r7, #0]
 800f77c:	68f8      	ldr	r0, [r7, #12]
 800f77e:	f7ff fea3 	bl	800f4c8 <pbuf_copy>
 800f782:	4603      	mov	r3, r0
 800f784:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f786:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d006      	beq.n	800f79c <pbuf_clone+0x4c>
 800f78e:	4b06      	ldr	r3, [pc, #24]	; (800f7a8 <pbuf_clone+0x58>)
 800f790:	f240 5224 	movw	r2, #1316	; 0x524
 800f794:	4905      	ldr	r1, [pc, #20]	; (800f7ac <pbuf_clone+0x5c>)
 800f796:	4806      	ldr	r0, [pc, #24]	; (800f7b0 <pbuf_clone+0x60>)
 800f798:	f00a fe5c 	bl	801a454 <iprintf>
  return q;
 800f79c:	68fb      	ldr	r3, [r7, #12]
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3710      	adds	r7, #16
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	0801c1a8 	.word	0x0801c1a8
 800f7ac:	0801c61c 	.word	0x0801c61c
 800f7b0:	0801c208 	.word	0x0801c208

0800f7b4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f7b8:	f00a fe7a 	bl	801a4b0 <rand>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	b29b      	uxth	r3, r3
 800f7c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f7ca:	b29a      	uxth	r2, r3
 800f7cc:	4b01      	ldr	r3, [pc, #4]	; (800f7d4 <tcp_init+0x20>)
 800f7ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f7d0:	bf00      	nop
 800f7d2:	bd80      	pop	{r7, pc}
 800f7d4:	20000030 	.word	0x20000030

0800f7d8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	7d1b      	ldrb	r3, [r3, #20]
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	d105      	bne.n	800f7f4 <tcp_free+0x1c>
 800f7e8:	4b06      	ldr	r3, [pc, #24]	; (800f804 <tcp_free+0x2c>)
 800f7ea:	22d4      	movs	r2, #212	; 0xd4
 800f7ec:	4906      	ldr	r1, [pc, #24]	; (800f808 <tcp_free+0x30>)
 800f7ee:	4807      	ldr	r0, [pc, #28]	; (800f80c <tcp_free+0x34>)
 800f7f0:	f00a fe30 	bl	801a454 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f7f4:	6879      	ldr	r1, [r7, #4]
 800f7f6:	2001      	movs	r0, #1
 800f7f8:	f7fe fe82 	bl	800e500 <memp_free>
}
 800f7fc:	bf00      	nop
 800f7fe:	3708      	adds	r7, #8
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}
 800f804:	0801c6a8 	.word	0x0801c6a8
 800f808:	0801c6d8 	.word	0x0801c6d8
 800f80c:	0801c6ec 	.word	0x0801c6ec

0800f810 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	7d1b      	ldrb	r3, [r3, #20]
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d105      	bne.n	800f82c <tcp_free_listen+0x1c>
 800f820:	4b06      	ldr	r3, [pc, #24]	; (800f83c <tcp_free_listen+0x2c>)
 800f822:	22df      	movs	r2, #223	; 0xdf
 800f824:	4906      	ldr	r1, [pc, #24]	; (800f840 <tcp_free_listen+0x30>)
 800f826:	4807      	ldr	r0, [pc, #28]	; (800f844 <tcp_free_listen+0x34>)
 800f828:	f00a fe14 	bl	801a454 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f82c:	6879      	ldr	r1, [r7, #4]
 800f82e:	2002      	movs	r0, #2
 800f830:	f7fe fe66 	bl	800e500 <memp_free>
}
 800f834:	bf00      	nop
 800f836:	3708      	adds	r7, #8
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}
 800f83c:	0801c6a8 	.word	0x0801c6a8
 800f840:	0801c714 	.word	0x0801c714
 800f844:	0801c6ec 	.word	0x0801c6ec

0800f848 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f84c:	f000 fea2 	bl	8010594 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f850:	4b07      	ldr	r3, [pc, #28]	; (800f870 <tcp_tmr+0x28>)
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	3301      	adds	r3, #1
 800f856:	b2da      	uxtb	r2, r3
 800f858:	4b05      	ldr	r3, [pc, #20]	; (800f870 <tcp_tmr+0x28>)
 800f85a:	701a      	strb	r2, [r3, #0]
 800f85c:	4b04      	ldr	r3, [pc, #16]	; (800f870 <tcp_tmr+0x28>)
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	f003 0301 	and.w	r3, r3, #1
 800f864:	2b00      	cmp	r3, #0
 800f866:	d001      	beq.n	800f86c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f868:	f000 fb54 	bl	800ff14 <tcp_slowtmr>
  }
}
 800f86c:	bf00      	nop
 800f86e:	bd80      	pop	{r7, pc}
 800f870:	200084d1 	.word	0x200084d1

0800f874 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d105      	bne.n	800f890 <tcp_remove_listener+0x1c>
 800f884:	4b0d      	ldr	r3, [pc, #52]	; (800f8bc <tcp_remove_listener+0x48>)
 800f886:	22ff      	movs	r2, #255	; 0xff
 800f888:	490d      	ldr	r1, [pc, #52]	; (800f8c0 <tcp_remove_listener+0x4c>)
 800f88a:	480e      	ldr	r0, [pc, #56]	; (800f8c4 <tcp_remove_listener+0x50>)
 800f88c:	f00a fde2 	bl	801a454 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	60fb      	str	r3, [r7, #12]
 800f894:	e00a      	b.n	800f8ac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f89a:	683a      	ldr	r2, [r7, #0]
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d102      	bne.n	800f8a6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	68db      	ldr	r3, [r3, #12]
 800f8aa:	60fb      	str	r3, [r7, #12]
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d1f1      	bne.n	800f896 <tcp_remove_listener+0x22>
    }
  }
}
 800f8b2:	bf00      	nop
 800f8b4:	bf00      	nop
 800f8b6:	3710      	adds	r7, #16
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	0801c6a8 	.word	0x0801c6a8
 800f8c0:	0801c730 	.word	0x0801c730
 800f8c4:	0801c6ec 	.word	0x0801c6ec

0800f8c8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d106      	bne.n	800f8e4 <tcp_listen_closed+0x1c>
 800f8d6:	4b14      	ldr	r3, [pc, #80]	; (800f928 <tcp_listen_closed+0x60>)
 800f8d8:	f240 1211 	movw	r2, #273	; 0x111
 800f8dc:	4913      	ldr	r1, [pc, #76]	; (800f92c <tcp_listen_closed+0x64>)
 800f8de:	4814      	ldr	r0, [pc, #80]	; (800f930 <tcp_listen_closed+0x68>)
 800f8e0:	f00a fdb8 	bl	801a454 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	7d1b      	ldrb	r3, [r3, #20]
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d006      	beq.n	800f8fa <tcp_listen_closed+0x32>
 800f8ec:	4b0e      	ldr	r3, [pc, #56]	; (800f928 <tcp_listen_closed+0x60>)
 800f8ee:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f8f2:	4910      	ldr	r1, [pc, #64]	; (800f934 <tcp_listen_closed+0x6c>)
 800f8f4:	480e      	ldr	r0, [pc, #56]	; (800f930 <tcp_listen_closed+0x68>)
 800f8f6:	f00a fdad 	bl	801a454 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	60fb      	str	r3, [r7, #12]
 800f8fe:	e00b      	b.n	800f918 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f900:	4a0d      	ldr	r2, [pc, #52]	; (800f938 <tcp_listen_closed+0x70>)
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	6879      	ldr	r1, [r7, #4]
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7ff ffb1 	bl	800f874 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	3301      	adds	r3, #1
 800f916:	60fb      	str	r3, [r7, #12]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2b03      	cmp	r3, #3
 800f91c:	d9f0      	bls.n	800f900 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f91e:	bf00      	nop
 800f920:	bf00      	nop
 800f922:	3710      	adds	r7, #16
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	0801c6a8 	.word	0x0801c6a8
 800f92c:	0801c758 	.word	0x0801c758
 800f930:	0801c6ec 	.word	0x0801c6ec
 800f934:	0801c764 	.word	0x0801c764
 800f938:	0801ea70 	.word	0x0801ea70

0800f93c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f93c:	b5b0      	push	{r4, r5, r7, lr}
 800f93e:	b088      	sub	sp, #32
 800f940:	af04      	add	r7, sp, #16
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	460b      	mov	r3, r1
 800f946:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d106      	bne.n	800f95c <tcp_close_shutdown+0x20>
 800f94e:	4b63      	ldr	r3, [pc, #396]	; (800fadc <tcp_close_shutdown+0x1a0>)
 800f950:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f954:	4962      	ldr	r1, [pc, #392]	; (800fae0 <tcp_close_shutdown+0x1a4>)
 800f956:	4863      	ldr	r0, [pc, #396]	; (800fae4 <tcp_close_shutdown+0x1a8>)
 800f958:	f00a fd7c 	bl	801a454 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f95c:	78fb      	ldrb	r3, [r7, #3]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d066      	beq.n	800fa30 <tcp_close_shutdown+0xf4>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	7d1b      	ldrb	r3, [r3, #20]
 800f966:	2b04      	cmp	r3, #4
 800f968:	d003      	beq.n	800f972 <tcp_close_shutdown+0x36>
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	7d1b      	ldrb	r3, [r3, #20]
 800f96e:	2b07      	cmp	r3, #7
 800f970:	d15e      	bne.n	800fa30 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f976:	2b00      	cmp	r3, #0
 800f978:	d104      	bne.n	800f984 <tcp_close_shutdown+0x48>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f97e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f982:	d055      	beq.n	800fa30 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	8b5b      	ldrh	r3, [r3, #26]
 800f988:	f003 0310 	and.w	r3, r3, #16
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d106      	bne.n	800f99e <tcp_close_shutdown+0x62>
 800f990:	4b52      	ldr	r3, [pc, #328]	; (800fadc <tcp_close_shutdown+0x1a0>)
 800f992:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f996:	4954      	ldr	r1, [pc, #336]	; (800fae8 <tcp_close_shutdown+0x1ac>)
 800f998:	4852      	ldr	r0, [pc, #328]	; (800fae4 <tcp_close_shutdown+0x1a8>)
 800f99a:	f00a fd5b 	bl	801a454 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f9a6:	687d      	ldr	r5, [r7, #4]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	3304      	adds	r3, #4
 800f9ac:	687a      	ldr	r2, [r7, #4]
 800f9ae:	8ad2      	ldrh	r2, [r2, #22]
 800f9b0:	6879      	ldr	r1, [r7, #4]
 800f9b2:	8b09      	ldrh	r1, [r1, #24]
 800f9b4:	9102      	str	r1, [sp, #8]
 800f9b6:	9201      	str	r2, [sp, #4]
 800f9b8:	9300      	str	r3, [sp, #0]
 800f9ba:	462b      	mov	r3, r5
 800f9bc:	4622      	mov	r2, r4
 800f9be:	4601      	mov	r1, r0
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f004 fe8d 	bl	80146e0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f001 f8c6 	bl	8010b58 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f9cc:	4b47      	ldr	r3, [pc, #284]	; (800faec <tcp_close_shutdown+0x1b0>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	687a      	ldr	r2, [r7, #4]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d105      	bne.n	800f9e2 <tcp_close_shutdown+0xa6>
 800f9d6:	4b45      	ldr	r3, [pc, #276]	; (800faec <tcp_close_shutdown+0x1b0>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	4a43      	ldr	r2, [pc, #268]	; (800faec <tcp_close_shutdown+0x1b0>)
 800f9de:	6013      	str	r3, [r2, #0]
 800f9e0:	e013      	b.n	800fa0a <tcp_close_shutdown+0xce>
 800f9e2:	4b42      	ldr	r3, [pc, #264]	; (800faec <tcp_close_shutdown+0x1b0>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	60fb      	str	r3, [r7, #12]
 800f9e8:	e00c      	b.n	800fa04 <tcp_close_shutdown+0xc8>
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	68db      	ldr	r3, [r3, #12]
 800f9ee:	687a      	ldr	r2, [r7, #4]
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d104      	bne.n	800f9fe <tcp_close_shutdown+0xc2>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	68da      	ldr	r2, [r3, #12]
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	60da      	str	r2, [r3, #12]
 800f9fc:	e005      	b.n	800fa0a <tcp_close_shutdown+0xce>
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	68db      	ldr	r3, [r3, #12]
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d1ef      	bne.n	800f9ea <tcp_close_shutdown+0xae>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	60da      	str	r2, [r3, #12]
 800fa10:	4b37      	ldr	r3, [pc, #220]	; (800faf0 <tcp_close_shutdown+0x1b4>)
 800fa12:	2201      	movs	r2, #1
 800fa14:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fa16:	4b37      	ldr	r3, [pc, #220]	; (800faf4 <tcp_close_shutdown+0x1b8>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d102      	bne.n	800fa26 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fa20:	f003 fd5a 	bl	80134d8 <tcp_trigger_input_pcb_close>
 800fa24:	e002      	b.n	800fa2c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f7ff fed6 	bl	800f7d8 <tcp_free>
      }
      return ERR_OK;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	e050      	b.n	800fad2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	7d1b      	ldrb	r3, [r3, #20]
 800fa34:	2b02      	cmp	r3, #2
 800fa36:	d03b      	beq.n	800fab0 <tcp_close_shutdown+0x174>
 800fa38:	2b02      	cmp	r3, #2
 800fa3a:	dc44      	bgt.n	800fac6 <tcp_close_shutdown+0x18a>
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d002      	beq.n	800fa46 <tcp_close_shutdown+0x10a>
 800fa40:	2b01      	cmp	r3, #1
 800fa42:	d02a      	beq.n	800fa9a <tcp_close_shutdown+0x15e>
 800fa44:	e03f      	b.n	800fac6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	8adb      	ldrh	r3, [r3, #22]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d021      	beq.n	800fa92 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fa4e:	4b2a      	ldr	r3, [pc, #168]	; (800faf8 <tcp_close_shutdown+0x1bc>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	687a      	ldr	r2, [r7, #4]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d105      	bne.n	800fa64 <tcp_close_shutdown+0x128>
 800fa58:	4b27      	ldr	r3, [pc, #156]	; (800faf8 <tcp_close_shutdown+0x1bc>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	68db      	ldr	r3, [r3, #12]
 800fa5e:	4a26      	ldr	r2, [pc, #152]	; (800faf8 <tcp_close_shutdown+0x1bc>)
 800fa60:	6013      	str	r3, [r2, #0]
 800fa62:	e013      	b.n	800fa8c <tcp_close_shutdown+0x150>
 800fa64:	4b24      	ldr	r3, [pc, #144]	; (800faf8 <tcp_close_shutdown+0x1bc>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	60bb      	str	r3, [r7, #8]
 800fa6a:	e00c      	b.n	800fa86 <tcp_close_shutdown+0x14a>
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	687a      	ldr	r2, [r7, #4]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d104      	bne.n	800fa80 <tcp_close_shutdown+0x144>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	68da      	ldr	r2, [r3, #12]
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	60da      	str	r2, [r3, #12]
 800fa7e:	e005      	b.n	800fa8c <tcp_close_shutdown+0x150>
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	60bb      	str	r3, [r7, #8]
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d1ef      	bne.n	800fa6c <tcp_close_shutdown+0x130>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f7ff fea0 	bl	800f7d8 <tcp_free>
      break;
 800fa98:	e01a      	b.n	800fad0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f7ff ff14 	bl	800f8c8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800faa0:	6879      	ldr	r1, [r7, #4]
 800faa2:	4816      	ldr	r0, [pc, #88]	; (800fafc <tcp_close_shutdown+0x1c0>)
 800faa4:	f001 f8a8 	bl	8010bf8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f7ff feb1 	bl	800f810 <tcp_free_listen>
      break;
 800faae:	e00f      	b.n	800fad0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fab0:	6879      	ldr	r1, [r7, #4]
 800fab2:	480e      	ldr	r0, [pc, #56]	; (800faec <tcp_close_shutdown+0x1b0>)
 800fab4:	f001 f8a0 	bl	8010bf8 <tcp_pcb_remove>
 800fab8:	4b0d      	ldr	r3, [pc, #52]	; (800faf0 <tcp_close_shutdown+0x1b4>)
 800faba:	2201      	movs	r2, #1
 800fabc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f7ff fe8a 	bl	800f7d8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fac4:	e004      	b.n	800fad0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f000 f81a 	bl	800fb00 <tcp_close_shutdown_fin>
 800facc:	4603      	mov	r3, r0
 800face:	e000      	b.n	800fad2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800fad0:	2300      	movs	r3, #0
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3710      	adds	r7, #16
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bdb0      	pop	{r4, r5, r7, pc}
 800fada:	bf00      	nop
 800fadc:	0801c6a8 	.word	0x0801c6a8
 800fae0:	0801c77c 	.word	0x0801c77c
 800fae4:	0801c6ec 	.word	0x0801c6ec
 800fae8:	0801c79c 	.word	0x0801c79c
 800faec:	2000f394 	.word	0x2000f394
 800faf0:	2000f390 	.word	0x2000f390
 800faf4:	2000f3a8 	.word	0x2000f3a8
 800faf8:	2000f3a0 	.word	0x2000f3a0
 800fafc:	2000f39c 	.word	0x2000f39c

0800fb00 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d106      	bne.n	800fb1c <tcp_close_shutdown_fin+0x1c>
 800fb0e:	4b2e      	ldr	r3, [pc, #184]	; (800fbc8 <tcp_close_shutdown_fin+0xc8>)
 800fb10:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800fb14:	492d      	ldr	r1, [pc, #180]	; (800fbcc <tcp_close_shutdown_fin+0xcc>)
 800fb16:	482e      	ldr	r0, [pc, #184]	; (800fbd0 <tcp_close_shutdown_fin+0xd0>)
 800fb18:	f00a fc9c 	bl	801a454 <iprintf>

  switch (pcb->state) {
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	7d1b      	ldrb	r3, [r3, #20]
 800fb20:	2b07      	cmp	r3, #7
 800fb22:	d020      	beq.n	800fb66 <tcp_close_shutdown_fin+0x66>
 800fb24:	2b07      	cmp	r3, #7
 800fb26:	dc2b      	bgt.n	800fb80 <tcp_close_shutdown_fin+0x80>
 800fb28:	2b03      	cmp	r3, #3
 800fb2a:	d002      	beq.n	800fb32 <tcp_close_shutdown_fin+0x32>
 800fb2c:	2b04      	cmp	r3, #4
 800fb2e:	d00d      	beq.n	800fb4c <tcp_close_shutdown_fin+0x4c>
 800fb30:	e026      	b.n	800fb80 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f003 fee2 	bl	80138fc <tcp_send_fin>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fb3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d11f      	bne.n	800fb84 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2205      	movs	r2, #5
 800fb48:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fb4a:	e01b      	b.n	800fb84 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f003 fed5 	bl	80138fc <tcp_send_fin>
 800fb52:	4603      	mov	r3, r0
 800fb54:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fb56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d114      	bne.n	800fb88 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2205      	movs	r2, #5
 800fb62:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fb64:	e010      	b.n	800fb88 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f003 fec8 	bl	80138fc <tcp_send_fin>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fb70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d109      	bne.n	800fb8c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2209      	movs	r2, #9
 800fb7c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fb7e:	e005      	b.n	800fb8c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800fb80:	2300      	movs	r3, #0
 800fb82:	e01c      	b.n	800fbbe <tcp_close_shutdown_fin+0xbe>
      break;
 800fb84:	bf00      	nop
 800fb86:	e002      	b.n	800fb8e <tcp_close_shutdown_fin+0x8e>
      break;
 800fb88:	bf00      	nop
 800fb8a:	e000      	b.n	800fb8e <tcp_close_shutdown_fin+0x8e>
      break;
 800fb8c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800fb8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d103      	bne.n	800fb9e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f003 ffee 	bl	8013b78 <tcp_output>
 800fb9c:	e00d      	b.n	800fbba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800fb9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fba6:	d108      	bne.n	800fbba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	8b5b      	ldrh	r3, [r3, #26]
 800fbac:	f043 0308 	orr.w	r3, r3, #8
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	e001      	b.n	800fbbe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800fbba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	0801c6a8 	.word	0x0801c6a8
 800fbcc:	0801c758 	.word	0x0801c758
 800fbd0:	0801c6ec 	.word	0x0801c6ec

0800fbd4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d109      	bne.n	800fbf6 <tcp_close+0x22>
 800fbe2:	4b0f      	ldr	r3, [pc, #60]	; (800fc20 <tcp_close+0x4c>)
 800fbe4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800fbe8:	490e      	ldr	r1, [pc, #56]	; (800fc24 <tcp_close+0x50>)
 800fbea:	480f      	ldr	r0, [pc, #60]	; (800fc28 <tcp_close+0x54>)
 800fbec:	f00a fc32 	bl	801a454 <iprintf>
 800fbf0:	f06f 030f 	mvn.w	r3, #15
 800fbf4:	e00f      	b.n	800fc16 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	7d1b      	ldrb	r3, [r3, #20]
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d006      	beq.n	800fc0c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	8b5b      	ldrh	r3, [r3, #26]
 800fc02:	f043 0310 	orr.w	r3, r3, #16
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800fc0c:	2101      	movs	r1, #1
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f7ff fe94 	bl	800f93c <tcp_close_shutdown>
 800fc14:	4603      	mov	r3, r0
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3708      	adds	r7, #8
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	0801c6a8 	.word	0x0801c6a8
 800fc24:	0801c7b8 	.word	0x0801c7b8
 800fc28:	0801c6ec 	.word	0x0801c6ec

0800fc2c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b08e      	sub	sp, #56	; 0x38
 800fc30:	af04      	add	r7, sp, #16
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d107      	bne.n	800fc4c <tcp_abandon+0x20>
 800fc3c:	4b52      	ldr	r3, [pc, #328]	; (800fd88 <tcp_abandon+0x15c>)
 800fc3e:	f240 223d 	movw	r2, #573	; 0x23d
 800fc42:	4952      	ldr	r1, [pc, #328]	; (800fd8c <tcp_abandon+0x160>)
 800fc44:	4852      	ldr	r0, [pc, #328]	; (800fd90 <tcp_abandon+0x164>)
 800fc46:	f00a fc05 	bl	801a454 <iprintf>
 800fc4a:	e099      	b.n	800fd80 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	7d1b      	ldrb	r3, [r3, #20]
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d106      	bne.n	800fc62 <tcp_abandon+0x36>
 800fc54:	4b4c      	ldr	r3, [pc, #304]	; (800fd88 <tcp_abandon+0x15c>)
 800fc56:	f44f 7210 	mov.w	r2, #576	; 0x240
 800fc5a:	494e      	ldr	r1, [pc, #312]	; (800fd94 <tcp_abandon+0x168>)
 800fc5c:	484c      	ldr	r0, [pc, #304]	; (800fd90 <tcp_abandon+0x164>)
 800fc5e:	f00a fbf9 	bl	801a454 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	7d1b      	ldrb	r3, [r3, #20]
 800fc66:	2b0a      	cmp	r3, #10
 800fc68:	d107      	bne.n	800fc7a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fc6a:	6879      	ldr	r1, [r7, #4]
 800fc6c:	484a      	ldr	r0, [pc, #296]	; (800fd98 <tcp_abandon+0x16c>)
 800fc6e:	f000 ffc3 	bl	8010bf8 <tcp_pcb_remove>
    tcp_free(pcb);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f7ff fdb0 	bl	800f7d8 <tcp_free>
 800fc78:	e082      	b.n	800fd80 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc86:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc8c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc94:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	691b      	ldr	r3, [r3, #16]
 800fc9a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	7d1b      	ldrb	r3, [r3, #20]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d126      	bne.n	800fcf2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	8adb      	ldrh	r3, [r3, #22]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d02e      	beq.n	800fd0a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fcac:	4b3b      	ldr	r3, [pc, #236]	; (800fd9c <tcp_abandon+0x170>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d105      	bne.n	800fcc2 <tcp_abandon+0x96>
 800fcb6:	4b39      	ldr	r3, [pc, #228]	; (800fd9c <tcp_abandon+0x170>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	4a37      	ldr	r2, [pc, #220]	; (800fd9c <tcp_abandon+0x170>)
 800fcbe:	6013      	str	r3, [r2, #0]
 800fcc0:	e013      	b.n	800fcea <tcp_abandon+0xbe>
 800fcc2:	4b36      	ldr	r3, [pc, #216]	; (800fd9c <tcp_abandon+0x170>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	61fb      	str	r3, [r7, #28]
 800fcc8:	e00c      	b.n	800fce4 <tcp_abandon+0xb8>
 800fcca:	69fb      	ldr	r3, [r7, #28]
 800fccc:	68db      	ldr	r3, [r3, #12]
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d104      	bne.n	800fcde <tcp_abandon+0xb2>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	68da      	ldr	r2, [r3, #12]
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	60da      	str	r2, [r3, #12]
 800fcdc:	e005      	b.n	800fcea <tcp_abandon+0xbe>
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	61fb      	str	r3, [r7, #28]
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d1ef      	bne.n	800fcca <tcp_abandon+0x9e>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2200      	movs	r2, #0
 800fcee:	60da      	str	r2, [r3, #12]
 800fcf0:	e00b      	b.n	800fd0a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	8adb      	ldrh	r3, [r3, #22]
 800fcfa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fcfc:	6879      	ldr	r1, [r7, #4]
 800fcfe:	4828      	ldr	r0, [pc, #160]	; (800fda0 <tcp_abandon+0x174>)
 800fd00:	f000 ff7a 	bl	8010bf8 <tcp_pcb_remove>
 800fd04:	4b27      	ldr	r3, [pc, #156]	; (800fda4 <tcp_abandon+0x178>)
 800fd06:	2201      	movs	r2, #1
 800fd08:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d004      	beq.n	800fd1c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd16:	4618      	mov	r0, r3
 800fd18:	f000 fd1c 	bl	8010754 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d004      	beq.n	800fd2e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f000 fd13 	bl	8010754 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d004      	beq.n	800fd40 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f000 fd0a 	bl	8010754 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d00e      	beq.n	800fd64 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fd46:	6879      	ldr	r1, [r7, #4]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	3304      	adds	r3, #4
 800fd4c:	687a      	ldr	r2, [r7, #4]
 800fd4e:	8b12      	ldrh	r2, [r2, #24]
 800fd50:	9202      	str	r2, [sp, #8]
 800fd52:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fd54:	9201      	str	r2, [sp, #4]
 800fd56:	9300      	str	r3, [sp, #0]
 800fd58:	460b      	mov	r3, r1
 800fd5a:	697a      	ldr	r2, [r7, #20]
 800fd5c:	69b9      	ldr	r1, [r7, #24]
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f004 fcbe 	bl	80146e0 <tcp_rst>
    }
    last_state = pcb->state;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	7d1b      	ldrb	r3, [r3, #20]
 800fd68:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f7ff fd34 	bl	800f7d8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d004      	beq.n	800fd80 <tcp_abandon+0x154>
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	f06f 010c 	mvn.w	r1, #12
 800fd7c:	68f8      	ldr	r0, [r7, #12]
 800fd7e:	4798      	blx	r3
  }
}
 800fd80:	3728      	adds	r7, #40	; 0x28
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	0801c6a8 	.word	0x0801c6a8
 800fd8c:	0801c7ec 	.word	0x0801c7ec
 800fd90:	0801c6ec 	.word	0x0801c6ec
 800fd94:	0801c808 	.word	0x0801c808
 800fd98:	2000f3a4 	.word	0x2000f3a4
 800fd9c:	2000f3a0 	.word	0x2000f3a0
 800fda0:	2000f394 	.word	0x2000f394
 800fda4:	2000f390 	.word	0x2000f390

0800fda8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800fdb0:	2101      	movs	r1, #1
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f7ff ff3a 	bl	800fc2c <tcp_abandon>
}
 800fdb8:	bf00      	nop
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d106      	bne.n	800fddc <tcp_update_rcv_ann_wnd+0x1c>
 800fdce:	4b25      	ldr	r3, [pc, #148]	; (800fe64 <tcp_update_rcv_ann_wnd+0xa4>)
 800fdd0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fdd4:	4924      	ldr	r1, [pc, #144]	; (800fe68 <tcp_update_rcv_ann_wnd+0xa8>)
 800fdd6:	4825      	ldr	r0, [pc, #148]	; (800fe6c <tcp_update_rcv_ann_wnd+0xac>)
 800fdd8:	f00a fb3c 	bl	801a454 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800fde4:	4413      	add	r3, r2
 800fde6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdec:	687a      	ldr	r2, [r7, #4]
 800fdee:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800fdf0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800fdf4:	bf28      	it	cs
 800fdf6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800fdfa:	b292      	uxth	r2, r2
 800fdfc:	4413      	add	r3, r2
 800fdfe:	68fa      	ldr	r2, [r7, #12]
 800fe00:	1ad3      	subs	r3, r2, r3
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	db08      	blt.n	800fe18 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe12:	68fa      	ldr	r2, [r7, #12]
 800fe14:	1ad3      	subs	r3, r2, r3
 800fe16:	e020      	b.n	800fe5a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe20:	1ad3      	subs	r3, r2, r3
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	dd03      	ble.n	800fe2e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fe2c:	e014      	b.n	800fe58 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe36:	1ad3      	subs	r3, r2, r3
 800fe38:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe40:	d306      	bcc.n	800fe50 <tcp_update_rcv_ann_wnd+0x90>
 800fe42:	4b08      	ldr	r3, [pc, #32]	; (800fe64 <tcp_update_rcv_ann_wnd+0xa4>)
 800fe44:	f240 32b6 	movw	r2, #950	; 0x3b6
 800fe48:	4909      	ldr	r1, [pc, #36]	; (800fe70 <tcp_update_rcv_ann_wnd+0xb0>)
 800fe4a:	4808      	ldr	r0, [pc, #32]	; (800fe6c <tcp_update_rcv_ann_wnd+0xac>)
 800fe4c:	f00a fb02 	bl	801a454 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	b29a      	uxth	r2, r3
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800fe58:	2300      	movs	r3, #0
  }
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3710      	adds	r7, #16
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	0801c6a8 	.word	0x0801c6a8
 800fe68:	0801c904 	.word	0x0801c904
 800fe6c:	0801c6ec 	.word	0x0801c6ec
 800fe70:	0801c928 	.word	0x0801c928

0800fe74 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b084      	sub	sp, #16
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	460b      	mov	r3, r1
 800fe7e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d107      	bne.n	800fe96 <tcp_recved+0x22>
 800fe86:	4b1f      	ldr	r3, [pc, #124]	; (800ff04 <tcp_recved+0x90>)
 800fe88:	f240 32cf 	movw	r2, #975	; 0x3cf
 800fe8c:	491e      	ldr	r1, [pc, #120]	; (800ff08 <tcp_recved+0x94>)
 800fe8e:	481f      	ldr	r0, [pc, #124]	; (800ff0c <tcp_recved+0x98>)
 800fe90:	f00a fae0 	bl	801a454 <iprintf>
 800fe94:	e032      	b.n	800fefc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	7d1b      	ldrb	r3, [r3, #20]
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	d106      	bne.n	800feac <tcp_recved+0x38>
 800fe9e:	4b19      	ldr	r3, [pc, #100]	; (800ff04 <tcp_recved+0x90>)
 800fea0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800fea4:	491a      	ldr	r1, [pc, #104]	; (800ff10 <tcp_recved+0x9c>)
 800fea6:	4819      	ldr	r0, [pc, #100]	; (800ff0c <tcp_recved+0x98>)
 800fea8:	f00a fad4 	bl	801a454 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800feb0:	887b      	ldrh	r3, [r7, #2]
 800feb2:	4413      	add	r3, r2
 800feb4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800feb6:	89fb      	ldrh	r3, [r7, #14]
 800feb8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800febc:	d804      	bhi.n	800fec8 <tcp_recved+0x54>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fec2:	89fa      	ldrh	r2, [r7, #14]
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d204      	bcs.n	800fed2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fece:	851a      	strh	r2, [r3, #40]	; 0x28
 800fed0:	e002      	b.n	800fed8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	89fa      	ldrh	r2, [r7, #14]
 800fed6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f7ff ff71 	bl	800fdc0 <tcp_update_rcv_ann_wnd>
 800fede:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fee6:	d309      	bcc.n	800fefc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	8b5b      	ldrh	r3, [r3, #26]
 800feec:	f043 0302 	orr.w	r3, r3, #2
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f003 fe3e 	bl	8013b78 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fefc:	3710      	adds	r7, #16
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}
 800ff02:	bf00      	nop
 800ff04:	0801c6a8 	.word	0x0801c6a8
 800ff08:	0801c944 	.word	0x0801c944
 800ff0c:	0801c6ec 	.word	0x0801c6ec
 800ff10:	0801c95c 	.word	0x0801c95c

0800ff14 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ff14:	b5b0      	push	{r4, r5, r7, lr}
 800ff16:	b090      	sub	sp, #64	; 0x40
 800ff18:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ff20:	4b94      	ldr	r3, [pc, #592]	; (8010174 <tcp_slowtmr+0x260>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	3301      	adds	r3, #1
 800ff26:	4a93      	ldr	r2, [pc, #588]	; (8010174 <tcp_slowtmr+0x260>)
 800ff28:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ff2a:	4b93      	ldr	r3, [pc, #588]	; (8010178 <tcp_slowtmr+0x264>)
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	3301      	adds	r3, #1
 800ff30:	b2da      	uxtb	r2, r3
 800ff32:	4b91      	ldr	r3, [pc, #580]	; (8010178 <tcp_slowtmr+0x264>)
 800ff34:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ff36:	2300      	movs	r3, #0
 800ff38:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ff3a:	4b90      	ldr	r3, [pc, #576]	; (801017c <tcp_slowtmr+0x268>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ff40:	e29f      	b.n	8010482 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ff42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff44:	7d1b      	ldrb	r3, [r3, #20]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d106      	bne.n	800ff58 <tcp_slowtmr+0x44>
 800ff4a:	4b8d      	ldr	r3, [pc, #564]	; (8010180 <tcp_slowtmr+0x26c>)
 800ff4c:	f240 42be 	movw	r2, #1214	; 0x4be
 800ff50:	498c      	ldr	r1, [pc, #560]	; (8010184 <tcp_slowtmr+0x270>)
 800ff52:	488d      	ldr	r0, [pc, #564]	; (8010188 <tcp_slowtmr+0x274>)
 800ff54:	f00a fa7e 	bl	801a454 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ff58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff5a:	7d1b      	ldrb	r3, [r3, #20]
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d106      	bne.n	800ff6e <tcp_slowtmr+0x5a>
 800ff60:	4b87      	ldr	r3, [pc, #540]	; (8010180 <tcp_slowtmr+0x26c>)
 800ff62:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ff66:	4989      	ldr	r1, [pc, #548]	; (801018c <tcp_slowtmr+0x278>)
 800ff68:	4887      	ldr	r0, [pc, #540]	; (8010188 <tcp_slowtmr+0x274>)
 800ff6a:	f00a fa73 	bl	801a454 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ff6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff70:	7d1b      	ldrb	r3, [r3, #20]
 800ff72:	2b0a      	cmp	r3, #10
 800ff74:	d106      	bne.n	800ff84 <tcp_slowtmr+0x70>
 800ff76:	4b82      	ldr	r3, [pc, #520]	; (8010180 <tcp_slowtmr+0x26c>)
 800ff78:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ff7c:	4984      	ldr	r1, [pc, #528]	; (8010190 <tcp_slowtmr+0x27c>)
 800ff7e:	4882      	ldr	r0, [pc, #520]	; (8010188 <tcp_slowtmr+0x274>)
 800ff80:	f00a fa68 	bl	801a454 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ff84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff86:	7f9a      	ldrb	r2, [r3, #30]
 800ff88:	4b7b      	ldr	r3, [pc, #492]	; (8010178 <tcp_slowtmr+0x264>)
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d105      	bne.n	800ff9c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ff90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff92:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ff94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ff9a:	e272      	b.n	8010482 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ff9c:	4b76      	ldr	r3, [pc, #472]	; (8010178 <tcp_slowtmr+0x264>)
 800ff9e:	781a      	ldrb	r2, [r3, #0]
 800ffa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ffb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb2:	7d1b      	ldrb	r3, [r3, #20]
 800ffb4:	2b02      	cmp	r3, #2
 800ffb6:	d10a      	bne.n	800ffce <tcp_slowtmr+0xba>
 800ffb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ffbe:	2b05      	cmp	r3, #5
 800ffc0:	d905      	bls.n	800ffce <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ffc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ffcc:	e11e      	b.n	801020c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ffce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ffd4:	2b0b      	cmp	r3, #11
 800ffd6:	d905      	bls.n	800ffe4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ffd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffdc:	3301      	adds	r3, #1
 800ffde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ffe2:	e113      	b.n	801020c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ffe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d075      	beq.n	80100da <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ffee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d006      	beq.n	8010004 <tcp_slowtmr+0xf0>
 800fff6:	4b62      	ldr	r3, [pc, #392]	; (8010180 <tcp_slowtmr+0x26c>)
 800fff8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800fffc:	4965      	ldr	r1, [pc, #404]	; (8010194 <tcp_slowtmr+0x280>)
 800fffe:	4862      	ldr	r0, [pc, #392]	; (8010188 <tcp_slowtmr+0x274>)
 8010000:	f00a fa28 	bl	801a454 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010008:	2b00      	cmp	r3, #0
 801000a:	d106      	bne.n	801001a <tcp_slowtmr+0x106>
 801000c:	4b5c      	ldr	r3, [pc, #368]	; (8010180 <tcp_slowtmr+0x26c>)
 801000e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010012:	4961      	ldr	r1, [pc, #388]	; (8010198 <tcp_slowtmr+0x284>)
 8010014:	485c      	ldr	r0, [pc, #368]	; (8010188 <tcp_slowtmr+0x274>)
 8010016:	f00a fa1d 	bl	801a454 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801001a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801001c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010020:	2b0b      	cmp	r3, #11
 8010022:	d905      	bls.n	8010030 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010028:	3301      	adds	r3, #1
 801002a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801002e:	e0ed      	b.n	801020c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010032:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010036:	3b01      	subs	r3, #1
 8010038:	4a58      	ldr	r2, [pc, #352]	; (801019c <tcp_slowtmr+0x288>)
 801003a:	5cd3      	ldrb	r3, [r2, r3]
 801003c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801003e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010040:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010044:	7c7a      	ldrb	r2, [r7, #17]
 8010046:	429a      	cmp	r2, r3
 8010048:	d907      	bls.n	801005a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801004a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801004c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010050:	3301      	adds	r3, #1
 8010052:	b2da      	uxtb	r2, r3
 8010054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010056:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801005a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801005c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010060:	7c7a      	ldrb	r2, [r7, #17]
 8010062:	429a      	cmp	r2, r3
 8010064:	f200 80d2 	bhi.w	801020c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010068:	2301      	movs	r3, #1
 801006a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801006c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801006e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010072:	2b00      	cmp	r3, #0
 8010074:	d108      	bne.n	8010088 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010078:	f004 fc26 	bl	80148c8 <tcp_zero_window_probe>
 801007c:	4603      	mov	r3, r0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d014      	beq.n	80100ac <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8010082:	2300      	movs	r3, #0
 8010084:	623b      	str	r3, [r7, #32]
 8010086:	e011      	b.n	80100ac <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801008a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801008e:	4619      	mov	r1, r3
 8010090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010092:	f003 faeb 	bl	801366c <tcp_split_unsent_seg>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	d107      	bne.n	80100ac <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801009c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801009e:	f003 fd6b 	bl	8013b78 <tcp_output>
 80100a2:	4603      	mov	r3, r0
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d101      	bne.n	80100ac <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80100a8:	2300      	movs	r3, #0
 80100aa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80100ac:	6a3b      	ldr	r3, [r7, #32]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f000 80ac 	beq.w	801020c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80100b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b6:	2200      	movs	r2, #0
 80100b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80100bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80100c2:	2b06      	cmp	r3, #6
 80100c4:	f200 80a2 	bhi.w	801020c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80100c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80100ce:	3301      	adds	r3, #1
 80100d0:	b2da      	uxtb	r2, r3
 80100d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80100d8:	e098      	b.n	801020c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80100da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	db0f      	blt.n	8010104 <tcp_slowtmr+0x1f0>
 80100e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80100ea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80100ee:	4293      	cmp	r3, r2
 80100f0:	d008      	beq.n	8010104 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80100f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	3301      	adds	r3, #1
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	b21a      	sxth	r2, r3
 8010100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010102:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010106:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010110:	429a      	cmp	r2, r3
 8010112:	db7b      	blt.n	801020c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010116:	f004 f821 	bl	801415c <tcp_rexmit_rto_prepare>
 801011a:	4603      	mov	r3, r0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d007      	beq.n	8010130 <tcp_slowtmr+0x21c>
 8010120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010124:	2b00      	cmp	r3, #0
 8010126:	d171      	bne.n	801020c <tcp_slowtmr+0x2f8>
 8010128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801012c:	2b00      	cmp	r3, #0
 801012e:	d06d      	beq.n	801020c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010132:	7d1b      	ldrb	r3, [r3, #20]
 8010134:	2b02      	cmp	r3, #2
 8010136:	d03a      	beq.n	80101ae <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801013a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801013e:	2b0c      	cmp	r3, #12
 8010140:	bf28      	it	cs
 8010142:	230c      	movcs	r3, #12
 8010144:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010148:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801014c:	10db      	asrs	r3, r3, #3
 801014e:	b21b      	sxth	r3, r3
 8010150:	461a      	mov	r2, r3
 8010152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010154:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010158:	4413      	add	r3, r2
 801015a:	7efa      	ldrb	r2, [r7, #27]
 801015c:	4910      	ldr	r1, [pc, #64]	; (80101a0 <tcp_slowtmr+0x28c>)
 801015e:	5c8a      	ldrb	r2, [r1, r2]
 8010160:	4093      	lsls	r3, r2
 8010162:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801016a:	4293      	cmp	r3, r2
 801016c:	dc1a      	bgt.n	80101a4 <tcp_slowtmr+0x290>
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	b21a      	sxth	r2, r3
 8010172:	e019      	b.n	80101a8 <tcp_slowtmr+0x294>
 8010174:	2000f398 	.word	0x2000f398
 8010178:	200084d2 	.word	0x200084d2
 801017c:	2000f394 	.word	0x2000f394
 8010180:	0801c6a8 	.word	0x0801c6a8
 8010184:	0801c9ec 	.word	0x0801c9ec
 8010188:	0801c6ec 	.word	0x0801c6ec
 801018c:	0801ca18 	.word	0x0801ca18
 8010190:	0801ca44 	.word	0x0801ca44
 8010194:	0801ca74 	.word	0x0801ca74
 8010198:	0801caa8 	.word	0x0801caa8
 801019c:	0801ea68 	.word	0x0801ea68
 80101a0:	0801ea58 	.word	0x0801ea58
 80101a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80101a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80101ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b0:	2200      	movs	r2, #0
 80101b2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80101b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80101ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80101c0:	4293      	cmp	r3, r2
 80101c2:	bf28      	it	cs
 80101c4:	4613      	movcs	r3, r2
 80101c6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80101c8:	8a7b      	ldrh	r3, [r7, #18]
 80101ca:	085b      	lsrs	r3, r3, #1
 80101cc:	b29a      	uxth	r2, r3
 80101ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80101d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80101da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101de:	005b      	lsls	r3, r3, #1
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d206      	bcs.n	80101f4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80101e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101ea:	005b      	lsls	r3, r3, #1
 80101ec:	b29a      	uxth	r2, r3
 80101ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80101f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80101f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80101fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010200:	2200      	movs	r2, #0
 8010202:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8010206:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010208:	f004 f818 	bl	801423c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801020c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801020e:	7d1b      	ldrb	r3, [r3, #20]
 8010210:	2b06      	cmp	r3, #6
 8010212:	d111      	bne.n	8010238 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010216:	8b5b      	ldrh	r3, [r3, #26]
 8010218:	f003 0310 	and.w	r3, r3, #16
 801021c:	2b00      	cmp	r3, #0
 801021e:	d00b      	beq.n	8010238 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010220:	4b9d      	ldr	r3, [pc, #628]	; (8010498 <tcp_slowtmr+0x584>)
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010226:	6a1b      	ldr	r3, [r3, #32]
 8010228:	1ad3      	subs	r3, r2, r3
 801022a:	2b28      	cmp	r3, #40	; 0x28
 801022c:	d904      	bls.n	8010238 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801022e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010232:	3301      	adds	r3, #1
 8010234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023a:	7a5b      	ldrb	r3, [r3, #9]
 801023c:	f003 0308 	and.w	r3, r3, #8
 8010240:	2b00      	cmp	r3, #0
 8010242:	d04c      	beq.n	80102de <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010246:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010248:	2b04      	cmp	r3, #4
 801024a:	d003      	beq.n	8010254 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801024c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010250:	2b07      	cmp	r3, #7
 8010252:	d144      	bne.n	80102de <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010254:	4b90      	ldr	r3, [pc, #576]	; (8010498 <tcp_slowtmr+0x584>)
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025a:	6a1b      	ldr	r3, [r3, #32]
 801025c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801025e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010264:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8010268:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801026c:	498b      	ldr	r1, [pc, #556]	; (801049c <tcp_slowtmr+0x588>)
 801026e:	fba1 1303 	umull	r1, r3, r1, r3
 8010272:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010274:	429a      	cmp	r2, r3
 8010276:	d90a      	bls.n	801028e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801027c:	3301      	adds	r3, #1
 801027e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8010282:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010286:	3301      	adds	r3, #1
 8010288:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801028c:	e027      	b.n	80102de <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801028e:	4b82      	ldr	r3, [pc, #520]	; (8010498 <tcp_slowtmr+0x584>)
 8010290:	681a      	ldr	r2, [r3, #0]
 8010292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010294:	6a1b      	ldr	r3, [r3, #32]
 8010296:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801029a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801029e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80102a4:	4618      	mov	r0, r3
 80102a6:	4b7e      	ldr	r3, [pc, #504]	; (80104a0 <tcp_slowtmr+0x58c>)
 80102a8:	fb03 f300 	mul.w	r3, r3, r0
 80102ac:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80102ae:	497b      	ldr	r1, [pc, #492]	; (801049c <tcp_slowtmr+0x588>)
 80102b0:	fba1 1303 	umull	r1, r3, r1, r3
 80102b4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d911      	bls.n	80102de <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80102ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102bc:	f004 fac4 	bl	8014848 <tcp_keepalive>
 80102c0:	4603      	mov	r3, r0
 80102c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80102c6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d107      	bne.n	80102de <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80102ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102d0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80102d4:	3301      	adds	r3, #1
 80102d6:	b2da      	uxtb	r2, r3
 80102d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102da:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80102de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d011      	beq.n	801030a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80102e6:	4b6c      	ldr	r3, [pc, #432]	; (8010498 <tcp_slowtmr+0x584>)
 80102e8:	681a      	ldr	r2, [r3, #0]
 80102ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ec:	6a1b      	ldr	r3, [r3, #32]
 80102ee:	1ad2      	subs	r2, r2, r3
 80102f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80102f6:	4619      	mov	r1, r3
 80102f8:	460b      	mov	r3, r1
 80102fa:	005b      	lsls	r3, r3, #1
 80102fc:	440b      	add	r3, r1
 80102fe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010300:	429a      	cmp	r2, r3
 8010302:	d302      	bcc.n	801030a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010304:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010306:	f000 fddb 	bl	8010ec0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801030a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030c:	7d1b      	ldrb	r3, [r3, #20]
 801030e:	2b03      	cmp	r3, #3
 8010310:	d10b      	bne.n	801032a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010312:	4b61      	ldr	r3, [pc, #388]	; (8010498 <tcp_slowtmr+0x584>)
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010318:	6a1b      	ldr	r3, [r3, #32]
 801031a:	1ad3      	subs	r3, r2, r3
 801031c:	2b28      	cmp	r3, #40	; 0x28
 801031e:	d904      	bls.n	801032a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010324:	3301      	adds	r3, #1
 8010326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801032a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032c:	7d1b      	ldrb	r3, [r3, #20]
 801032e:	2b09      	cmp	r3, #9
 8010330:	d10b      	bne.n	801034a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010332:	4b59      	ldr	r3, [pc, #356]	; (8010498 <tcp_slowtmr+0x584>)
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010338:	6a1b      	ldr	r3, [r3, #32]
 801033a:	1ad3      	subs	r3, r2, r3
 801033c:	2bf0      	cmp	r3, #240	; 0xf0
 801033e:	d904      	bls.n	801034a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010344:	3301      	adds	r3, #1
 8010346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801034a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801034e:	2b00      	cmp	r3, #0
 8010350:	d060      	beq.n	8010414 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010358:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801035a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801035c:	f000 fbfc 	bl	8010b58 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010362:	2b00      	cmp	r3, #0
 8010364:	d010      	beq.n	8010388 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010366:	4b4f      	ldr	r3, [pc, #316]	; (80104a4 <tcp_slowtmr+0x590>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801036c:	429a      	cmp	r2, r3
 801036e:	d106      	bne.n	801037e <tcp_slowtmr+0x46a>
 8010370:	4b4d      	ldr	r3, [pc, #308]	; (80104a8 <tcp_slowtmr+0x594>)
 8010372:	f240 526d 	movw	r2, #1389	; 0x56d
 8010376:	494d      	ldr	r1, [pc, #308]	; (80104ac <tcp_slowtmr+0x598>)
 8010378:	484d      	ldr	r0, [pc, #308]	; (80104b0 <tcp_slowtmr+0x59c>)
 801037a:	f00a f86b 	bl	801a454 <iprintf>
        prev->next = pcb->next;
 801037e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010380:	68da      	ldr	r2, [r3, #12]
 8010382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010384:	60da      	str	r2, [r3, #12]
 8010386:	e00f      	b.n	80103a8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010388:	4b46      	ldr	r3, [pc, #280]	; (80104a4 <tcp_slowtmr+0x590>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801038e:	429a      	cmp	r2, r3
 8010390:	d006      	beq.n	80103a0 <tcp_slowtmr+0x48c>
 8010392:	4b45      	ldr	r3, [pc, #276]	; (80104a8 <tcp_slowtmr+0x594>)
 8010394:	f240 5271 	movw	r2, #1393	; 0x571
 8010398:	4946      	ldr	r1, [pc, #280]	; (80104b4 <tcp_slowtmr+0x5a0>)
 801039a:	4845      	ldr	r0, [pc, #276]	; (80104b0 <tcp_slowtmr+0x59c>)
 801039c:	f00a f85a 	bl	801a454 <iprintf>
        tcp_active_pcbs = pcb->next;
 80103a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	4a3f      	ldr	r2, [pc, #252]	; (80104a4 <tcp_slowtmr+0x590>)
 80103a6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80103a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d013      	beq.n	80103d8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80103b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80103b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80103b8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80103ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103bc:	3304      	adds	r3, #4
 80103be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103c0:	8ad2      	ldrh	r2, [r2, #22]
 80103c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80103c4:	8b09      	ldrh	r1, [r1, #24]
 80103c6:	9102      	str	r1, [sp, #8]
 80103c8:	9201      	str	r2, [sp, #4]
 80103ca:	9300      	str	r3, [sp, #0]
 80103cc:	462b      	mov	r3, r5
 80103ce:	4622      	mov	r2, r4
 80103d0:	4601      	mov	r1, r0
 80103d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103d4:	f004 f984 	bl	80146e0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80103d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103da:	691b      	ldr	r3, [r3, #16]
 80103dc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80103de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e0:	7d1b      	ldrb	r3, [r3, #20]
 80103e2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80103e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80103e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80103ee:	6838      	ldr	r0, [r7, #0]
 80103f0:	f7ff f9f2 	bl	800f7d8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80103f4:	4b30      	ldr	r3, [pc, #192]	; (80104b8 <tcp_slowtmr+0x5a4>)
 80103f6:	2200      	movs	r2, #0
 80103f8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d004      	beq.n	801040a <tcp_slowtmr+0x4f6>
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	f06f 010c 	mvn.w	r1, #12
 8010406:	68b8      	ldr	r0, [r7, #8]
 8010408:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801040a:	4b2b      	ldr	r3, [pc, #172]	; (80104b8 <tcp_slowtmr+0x5a4>)
 801040c:	781b      	ldrb	r3, [r3, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d037      	beq.n	8010482 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8010412:	e590      	b.n	800ff36 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010416:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801041e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010420:	7f1b      	ldrb	r3, [r3, #28]
 8010422:	3301      	adds	r3, #1
 8010424:	b2da      	uxtb	r2, r3
 8010426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010428:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801042a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801042c:	7f1a      	ldrb	r2, [r3, #28]
 801042e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010430:	7f5b      	ldrb	r3, [r3, #29]
 8010432:	429a      	cmp	r2, r3
 8010434:	d325      	bcc.n	8010482 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8010436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010438:	2200      	movs	r2, #0
 801043a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801043c:	4b1e      	ldr	r3, [pc, #120]	; (80104b8 <tcp_slowtmr+0x5a4>)
 801043e:	2200      	movs	r2, #0
 8010440:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010448:	2b00      	cmp	r3, #0
 801044a:	d00b      	beq.n	8010464 <tcp_slowtmr+0x550>
 801044c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010454:	6912      	ldr	r2, [r2, #16]
 8010456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010458:	4610      	mov	r0, r2
 801045a:	4798      	blx	r3
 801045c:	4603      	mov	r3, r0
 801045e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010462:	e002      	b.n	801046a <tcp_slowtmr+0x556>
 8010464:	2300      	movs	r3, #0
 8010466:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801046a:	4b13      	ldr	r3, [pc, #76]	; (80104b8 <tcp_slowtmr+0x5a4>)
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d000      	beq.n	8010474 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8010472:	e560      	b.n	800ff36 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010474:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010478:	2b00      	cmp	r3, #0
 801047a:	d102      	bne.n	8010482 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801047c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801047e:	f003 fb7b 	bl	8013b78 <tcp_output>
  while (pcb != NULL) {
 8010482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010484:	2b00      	cmp	r3, #0
 8010486:	f47f ad5c 	bne.w	800ff42 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801048a:	2300      	movs	r3, #0
 801048c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801048e:	4b0b      	ldr	r3, [pc, #44]	; (80104bc <tcp_slowtmr+0x5a8>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010494:	e067      	b.n	8010566 <tcp_slowtmr+0x652>
 8010496:	bf00      	nop
 8010498:	2000f398 	.word	0x2000f398
 801049c:	10624dd3 	.word	0x10624dd3
 80104a0:	000124f8 	.word	0x000124f8
 80104a4:	2000f394 	.word	0x2000f394
 80104a8:	0801c6a8 	.word	0x0801c6a8
 80104ac:	0801cae0 	.word	0x0801cae0
 80104b0:	0801c6ec 	.word	0x0801c6ec
 80104b4:	0801cb0c 	.word	0x0801cb0c
 80104b8:	2000f390 	.word	0x2000f390
 80104bc:	2000f3a4 	.word	0x2000f3a4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80104c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c2:	7d1b      	ldrb	r3, [r3, #20]
 80104c4:	2b0a      	cmp	r3, #10
 80104c6:	d006      	beq.n	80104d6 <tcp_slowtmr+0x5c2>
 80104c8:	4b2b      	ldr	r3, [pc, #172]	; (8010578 <tcp_slowtmr+0x664>)
 80104ca:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80104ce:	492b      	ldr	r1, [pc, #172]	; (801057c <tcp_slowtmr+0x668>)
 80104d0:	482b      	ldr	r0, [pc, #172]	; (8010580 <tcp_slowtmr+0x66c>)
 80104d2:	f009 ffbf 	bl	801a454 <iprintf>
    pcb_remove = 0;
 80104d6:	2300      	movs	r3, #0
 80104d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80104dc:	4b29      	ldr	r3, [pc, #164]	; (8010584 <tcp_slowtmr+0x670>)
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e2:	6a1b      	ldr	r3, [r3, #32]
 80104e4:	1ad3      	subs	r3, r2, r3
 80104e6:	2bf0      	cmp	r3, #240	; 0xf0
 80104e8:	d904      	bls.n	80104f4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80104ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104ee:	3301      	adds	r3, #1
 80104f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80104f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d02f      	beq.n	801055c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80104fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104fe:	f000 fb2b 	bl	8010b58 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010504:	2b00      	cmp	r3, #0
 8010506:	d010      	beq.n	801052a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010508:	4b1f      	ldr	r3, [pc, #124]	; (8010588 <tcp_slowtmr+0x674>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801050e:	429a      	cmp	r2, r3
 8010510:	d106      	bne.n	8010520 <tcp_slowtmr+0x60c>
 8010512:	4b19      	ldr	r3, [pc, #100]	; (8010578 <tcp_slowtmr+0x664>)
 8010514:	f240 52af 	movw	r2, #1455	; 0x5af
 8010518:	491c      	ldr	r1, [pc, #112]	; (801058c <tcp_slowtmr+0x678>)
 801051a:	4819      	ldr	r0, [pc, #100]	; (8010580 <tcp_slowtmr+0x66c>)
 801051c:	f009 ff9a 	bl	801a454 <iprintf>
        prev->next = pcb->next;
 8010520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010522:	68da      	ldr	r2, [r3, #12]
 8010524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010526:	60da      	str	r2, [r3, #12]
 8010528:	e00f      	b.n	801054a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801052a:	4b17      	ldr	r3, [pc, #92]	; (8010588 <tcp_slowtmr+0x674>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010530:	429a      	cmp	r2, r3
 8010532:	d006      	beq.n	8010542 <tcp_slowtmr+0x62e>
 8010534:	4b10      	ldr	r3, [pc, #64]	; (8010578 <tcp_slowtmr+0x664>)
 8010536:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801053a:	4915      	ldr	r1, [pc, #84]	; (8010590 <tcp_slowtmr+0x67c>)
 801053c:	4810      	ldr	r0, [pc, #64]	; (8010580 <tcp_slowtmr+0x66c>)
 801053e:	f009 ff89 	bl	801a454 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010544:	68db      	ldr	r3, [r3, #12]
 8010546:	4a10      	ldr	r2, [pc, #64]	; (8010588 <tcp_slowtmr+0x674>)
 8010548:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801054a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801054c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801054e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010554:	69f8      	ldr	r0, [r7, #28]
 8010556:	f7ff f93f 	bl	800f7d8 <tcp_free>
 801055a:	e004      	b.n	8010566 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801055c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010568:	2b00      	cmp	r3, #0
 801056a:	d1a9      	bne.n	80104c0 <tcp_slowtmr+0x5ac>
    }
  }
}
 801056c:	bf00      	nop
 801056e:	bf00      	nop
 8010570:	3730      	adds	r7, #48	; 0x30
 8010572:	46bd      	mov	sp, r7
 8010574:	bdb0      	pop	{r4, r5, r7, pc}
 8010576:	bf00      	nop
 8010578:	0801c6a8 	.word	0x0801c6a8
 801057c:	0801cb38 	.word	0x0801cb38
 8010580:	0801c6ec 	.word	0x0801c6ec
 8010584:	2000f398 	.word	0x2000f398
 8010588:	2000f3a4 	.word	0x2000f3a4
 801058c:	0801cb68 	.word	0x0801cb68
 8010590:	0801cb90 	.word	0x0801cb90

08010594 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801059a:	4b2d      	ldr	r3, [pc, #180]	; (8010650 <tcp_fasttmr+0xbc>)
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	3301      	adds	r3, #1
 80105a0:	b2da      	uxtb	r2, r3
 80105a2:	4b2b      	ldr	r3, [pc, #172]	; (8010650 <tcp_fasttmr+0xbc>)
 80105a4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80105a6:	4b2b      	ldr	r3, [pc, #172]	; (8010654 <tcp_fasttmr+0xc0>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80105ac:	e048      	b.n	8010640 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	7f9a      	ldrb	r2, [r3, #30]
 80105b2:	4b27      	ldr	r3, [pc, #156]	; (8010650 <tcp_fasttmr+0xbc>)
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d03f      	beq.n	801063a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80105ba:	4b25      	ldr	r3, [pc, #148]	; (8010650 <tcp_fasttmr+0xbc>)
 80105bc:	781a      	ldrb	r2, [r3, #0]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	8b5b      	ldrh	r3, [r3, #26]
 80105c6:	f003 0301 	and.w	r3, r3, #1
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d010      	beq.n	80105f0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	8b5b      	ldrh	r3, [r3, #26]
 80105d2:	f043 0302 	orr.w	r3, r3, #2
 80105d6:	b29a      	uxth	r2, r3
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f003 facb 	bl	8013b78 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	8b5b      	ldrh	r3, [r3, #26]
 80105e6:	f023 0303 	bic.w	r3, r3, #3
 80105ea:	b29a      	uxth	r2, r3
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	8b5b      	ldrh	r3, [r3, #26]
 80105f4:	f003 0308 	and.w	r3, r3, #8
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d009      	beq.n	8010610 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	8b5b      	ldrh	r3, [r3, #26]
 8010600:	f023 0308 	bic.w	r3, r3, #8
 8010604:	b29a      	uxth	r2, r3
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f7ff fa78 	bl	800fb00 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801061a:	2b00      	cmp	r3, #0
 801061c:	d00a      	beq.n	8010634 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801061e:	4b0e      	ldr	r3, [pc, #56]	; (8010658 <tcp_fasttmr+0xc4>)
 8010620:	2200      	movs	r2, #0
 8010622:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f000 f819 	bl	801065c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801062a:	4b0b      	ldr	r3, [pc, #44]	; (8010658 <tcp_fasttmr+0xc4>)
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d000      	beq.n	8010634 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010632:	e7b8      	b.n	80105a6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	607b      	str	r3, [r7, #4]
 8010638:	e002      	b.n	8010640 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	68db      	ldr	r3, [r3, #12]
 801063e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d1b3      	bne.n	80105ae <tcp_fasttmr+0x1a>
    }
  }
}
 8010646:	bf00      	nop
 8010648:	bf00      	nop
 801064a:	3708      	adds	r7, #8
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	200084d2 	.word	0x200084d2
 8010654:	2000f394 	.word	0x2000f394
 8010658:	2000f390 	.word	0x2000f390

0801065c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801065c:	b590      	push	{r4, r7, lr}
 801065e:	b085      	sub	sp, #20
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d109      	bne.n	801067e <tcp_process_refused_data+0x22>
 801066a:	4b37      	ldr	r3, [pc, #220]	; (8010748 <tcp_process_refused_data+0xec>)
 801066c:	f240 6209 	movw	r2, #1545	; 0x609
 8010670:	4936      	ldr	r1, [pc, #216]	; (801074c <tcp_process_refused_data+0xf0>)
 8010672:	4837      	ldr	r0, [pc, #220]	; (8010750 <tcp_process_refused_data+0xf4>)
 8010674:	f009 feee 	bl	801a454 <iprintf>
 8010678:	f06f 030f 	mvn.w	r3, #15
 801067c:	e060      	b.n	8010740 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010682:	7b5b      	ldrb	r3, [r3, #13]
 8010684:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801068a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2200      	movs	r2, #0
 8010690:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00b      	beq.n	80106b4 <tcp_process_refused_data+0x58>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6918      	ldr	r0, [r3, #16]
 80106a6:	2300      	movs	r3, #0
 80106a8:	68ba      	ldr	r2, [r7, #8]
 80106aa:	6879      	ldr	r1, [r7, #4]
 80106ac:	47a0      	blx	r4
 80106ae:	4603      	mov	r3, r0
 80106b0:	73fb      	strb	r3, [r7, #15]
 80106b2:	e007      	b.n	80106c4 <tcp_process_refused_data+0x68>
 80106b4:	2300      	movs	r3, #0
 80106b6:	68ba      	ldr	r2, [r7, #8]
 80106b8:	6879      	ldr	r1, [r7, #4]
 80106ba:	2000      	movs	r0, #0
 80106bc:	f000 f8a4 	bl	8010808 <tcp_recv_null>
 80106c0:	4603      	mov	r3, r0
 80106c2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80106c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d12a      	bne.n	8010722 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80106cc:	7bbb      	ldrb	r3, [r7, #14]
 80106ce:	f003 0320 	and.w	r3, r3, #32
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d033      	beq.n	801073e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80106de:	d005      	beq.n	80106ec <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106e4:	3301      	adds	r3, #1
 80106e6:	b29a      	uxth	r2, r3
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d00b      	beq.n	801070e <tcp_process_refused_data+0xb2>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6918      	ldr	r0, [r3, #16]
 8010700:	2300      	movs	r3, #0
 8010702:	2200      	movs	r2, #0
 8010704:	6879      	ldr	r1, [r7, #4]
 8010706:	47a0      	blx	r4
 8010708:	4603      	mov	r3, r0
 801070a:	73fb      	strb	r3, [r7, #15]
 801070c:	e001      	b.n	8010712 <tcp_process_refused_data+0xb6>
 801070e:	2300      	movs	r3, #0
 8010710:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010716:	f113 0f0d 	cmn.w	r3, #13
 801071a:	d110      	bne.n	801073e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801071c:	f06f 030c 	mvn.w	r3, #12
 8010720:	e00e      	b.n	8010740 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010726:	f113 0f0d 	cmn.w	r3, #13
 801072a:	d102      	bne.n	8010732 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801072c:	f06f 030c 	mvn.w	r3, #12
 8010730:	e006      	b.n	8010740 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	68ba      	ldr	r2, [r7, #8]
 8010736:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010738:	f06f 0304 	mvn.w	r3, #4
 801073c:	e000      	b.n	8010740 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801073e:	2300      	movs	r3, #0
}
 8010740:	4618      	mov	r0, r3
 8010742:	3714      	adds	r7, #20
 8010744:	46bd      	mov	sp, r7
 8010746:	bd90      	pop	{r4, r7, pc}
 8010748:	0801c6a8 	.word	0x0801c6a8
 801074c:	0801cbb8 	.word	0x0801cbb8
 8010750:	0801c6ec 	.word	0x0801c6ec

08010754 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801075c:	e007      	b.n	801076e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f000 f80a 	bl	801077e <tcp_seg_free>
    seg = next;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d1f4      	bne.n	801075e <tcp_segs_free+0xa>
  }
}
 8010774:	bf00      	nop
 8010776:	bf00      	nop
 8010778:	3710      	adds	r7, #16
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801077e:	b580      	push	{r7, lr}
 8010780:	b082      	sub	sp, #8
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d00c      	beq.n	80107a6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	685b      	ldr	r3, [r3, #4]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d004      	beq.n	801079e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	4618      	mov	r0, r3
 801079a:	f7fe fd61 	bl	800f260 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801079e:	6879      	ldr	r1, [r7, #4]
 80107a0:	2003      	movs	r0, #3
 80107a2:	f7fd fead 	bl	800e500 <memp_free>
  }
}
 80107a6:	bf00      	nop
 80107a8:	3708      	adds	r7, #8
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}
	...

080107b0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d106      	bne.n	80107cc <tcp_seg_copy+0x1c>
 80107be:	4b0f      	ldr	r3, [pc, #60]	; (80107fc <tcp_seg_copy+0x4c>)
 80107c0:	f240 6282 	movw	r2, #1666	; 0x682
 80107c4:	490e      	ldr	r1, [pc, #56]	; (8010800 <tcp_seg_copy+0x50>)
 80107c6:	480f      	ldr	r0, [pc, #60]	; (8010804 <tcp_seg_copy+0x54>)
 80107c8:	f009 fe44 	bl	801a454 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80107cc:	2003      	movs	r0, #3
 80107ce:	f7fd fe45 	bl	800e45c <memp_malloc>
 80107d2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d101      	bne.n	80107de <tcp_seg_copy+0x2e>
    return NULL;
 80107da:	2300      	movs	r3, #0
 80107dc:	e00a      	b.n	80107f4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80107de:	2210      	movs	r2, #16
 80107e0:	6879      	ldr	r1, [r7, #4]
 80107e2:	68f8      	ldr	r0, [r7, #12]
 80107e4:	f009 fd76 	bl	801a2d4 <memcpy>
  pbuf_ref(cseg->p);
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7fe fddd 	bl	800f3ac <pbuf_ref>
  return cseg;
 80107f2:	68fb      	ldr	r3, [r7, #12]
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3710      	adds	r7, #16
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	0801c6a8 	.word	0x0801c6a8
 8010800:	0801cbfc 	.word	0x0801cbfc
 8010804:	0801c6ec 	.word	0x0801c6ec

08010808 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b084      	sub	sp, #16
 801080c:	af00      	add	r7, sp, #0
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]
 8010814:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d109      	bne.n	8010830 <tcp_recv_null+0x28>
 801081c:	4b12      	ldr	r3, [pc, #72]	; (8010868 <tcp_recv_null+0x60>)
 801081e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010822:	4912      	ldr	r1, [pc, #72]	; (801086c <tcp_recv_null+0x64>)
 8010824:	4812      	ldr	r0, [pc, #72]	; (8010870 <tcp_recv_null+0x68>)
 8010826:	f009 fe15 	bl	801a454 <iprintf>
 801082a:	f06f 030f 	mvn.w	r3, #15
 801082e:	e016      	b.n	801085e <tcp_recv_null+0x56>

  if (p != NULL) {
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d009      	beq.n	801084a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	891b      	ldrh	r3, [r3, #8]
 801083a:	4619      	mov	r1, r3
 801083c:	68b8      	ldr	r0, [r7, #8]
 801083e:	f7ff fb19 	bl	800fe74 <tcp_recved>
    pbuf_free(p);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f7fe fd0c 	bl	800f260 <pbuf_free>
 8010848:	e008      	b.n	801085c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801084a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d104      	bne.n	801085c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010852:	68b8      	ldr	r0, [r7, #8]
 8010854:	f7ff f9be 	bl	800fbd4 <tcp_close>
 8010858:	4603      	mov	r3, r0
 801085a:	e000      	b.n	801085e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801085c:	2300      	movs	r3, #0
}
 801085e:	4618      	mov	r0, r3
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	0801c6a8 	.word	0x0801c6a8
 801086c:	0801cc18 	.word	0x0801cc18
 8010870:	0801c6ec 	.word	0x0801c6ec

08010874 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b086      	sub	sp, #24
 8010878:	af00      	add	r7, sp, #0
 801087a:	4603      	mov	r3, r0
 801087c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010882:	2b00      	cmp	r3, #0
 8010884:	db01      	blt.n	801088a <tcp_kill_prio+0x16>
 8010886:	79fb      	ldrb	r3, [r7, #7]
 8010888:	e000      	b.n	801088c <tcp_kill_prio+0x18>
 801088a:	237f      	movs	r3, #127	; 0x7f
 801088c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801088e:	7afb      	ldrb	r3, [r7, #11]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d034      	beq.n	80108fe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010894:	7afb      	ldrb	r3, [r7, #11]
 8010896:	3b01      	subs	r3, #1
 8010898:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801089a:	2300      	movs	r3, #0
 801089c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801089e:	2300      	movs	r3, #0
 80108a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80108a2:	4b19      	ldr	r3, [pc, #100]	; (8010908 <tcp_kill_prio+0x94>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	617b      	str	r3, [r7, #20]
 80108a8:	e01f      	b.n	80108ea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	7d5b      	ldrb	r3, [r3, #21]
 80108ae:	7afa      	ldrb	r2, [r7, #11]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d80c      	bhi.n	80108ce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80108b8:	7afa      	ldrb	r2, [r7, #11]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d112      	bne.n	80108e4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80108be:	4b13      	ldr	r3, [pc, #76]	; (801090c <tcp_kill_prio+0x98>)
 80108c0:	681a      	ldr	r2, [r3, #0]
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	6a1b      	ldr	r3, [r3, #32]
 80108c6:	1ad3      	subs	r3, r2, r3
 80108c8:	68fa      	ldr	r2, [r7, #12]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d80a      	bhi.n	80108e4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80108ce:	4b0f      	ldr	r3, [pc, #60]	; (801090c <tcp_kill_prio+0x98>)
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	6a1b      	ldr	r3, [r3, #32]
 80108d6:	1ad3      	subs	r3, r2, r3
 80108d8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	7d5b      	ldrb	r3, [r3, #21]
 80108e2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	68db      	ldr	r3, [r3, #12]
 80108e8:	617b      	str	r3, [r7, #20]
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d1dc      	bne.n	80108aa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d004      	beq.n	8010900 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80108f6:	6938      	ldr	r0, [r7, #16]
 80108f8:	f7ff fa56 	bl	800fda8 <tcp_abort>
 80108fc:	e000      	b.n	8010900 <tcp_kill_prio+0x8c>
    return;
 80108fe:	bf00      	nop
  }
}
 8010900:	3718      	adds	r7, #24
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	2000f394 	.word	0x2000f394
 801090c:	2000f398 	.word	0x2000f398

08010910 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b086      	sub	sp, #24
 8010914:	af00      	add	r7, sp, #0
 8010916:	4603      	mov	r3, r0
 8010918:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801091a:	79fb      	ldrb	r3, [r7, #7]
 801091c:	2b08      	cmp	r3, #8
 801091e:	d009      	beq.n	8010934 <tcp_kill_state+0x24>
 8010920:	79fb      	ldrb	r3, [r7, #7]
 8010922:	2b09      	cmp	r3, #9
 8010924:	d006      	beq.n	8010934 <tcp_kill_state+0x24>
 8010926:	4b1a      	ldr	r3, [pc, #104]	; (8010990 <tcp_kill_state+0x80>)
 8010928:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801092c:	4919      	ldr	r1, [pc, #100]	; (8010994 <tcp_kill_state+0x84>)
 801092e:	481a      	ldr	r0, [pc, #104]	; (8010998 <tcp_kill_state+0x88>)
 8010930:	f009 fd90 	bl	801a454 <iprintf>

  inactivity = 0;
 8010934:	2300      	movs	r3, #0
 8010936:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010938:	2300      	movs	r3, #0
 801093a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801093c:	4b17      	ldr	r3, [pc, #92]	; (801099c <tcp_kill_state+0x8c>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	617b      	str	r3, [r7, #20]
 8010942:	e017      	b.n	8010974 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	7d1b      	ldrb	r3, [r3, #20]
 8010948:	79fa      	ldrb	r2, [r7, #7]
 801094a:	429a      	cmp	r2, r3
 801094c:	d10f      	bne.n	801096e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801094e:	4b14      	ldr	r3, [pc, #80]	; (80109a0 <tcp_kill_state+0x90>)
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	6a1b      	ldr	r3, [r3, #32]
 8010956:	1ad3      	subs	r3, r2, r3
 8010958:	68fa      	ldr	r2, [r7, #12]
 801095a:	429a      	cmp	r2, r3
 801095c:	d807      	bhi.n	801096e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801095e:	4b10      	ldr	r3, [pc, #64]	; (80109a0 <tcp_kill_state+0x90>)
 8010960:	681a      	ldr	r2, [r3, #0]
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	6a1b      	ldr	r3, [r3, #32]
 8010966:	1ad3      	subs	r3, r2, r3
 8010968:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	68db      	ldr	r3, [r3, #12]
 8010972:	617b      	str	r3, [r7, #20]
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d1e4      	bne.n	8010944 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801097a:	693b      	ldr	r3, [r7, #16]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d003      	beq.n	8010988 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010980:	2100      	movs	r1, #0
 8010982:	6938      	ldr	r0, [r7, #16]
 8010984:	f7ff f952 	bl	800fc2c <tcp_abandon>
  }
}
 8010988:	bf00      	nop
 801098a:	3718      	adds	r7, #24
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	0801c6a8 	.word	0x0801c6a8
 8010994:	0801cc34 	.word	0x0801cc34
 8010998:	0801c6ec 	.word	0x0801c6ec
 801099c:	2000f394 	.word	0x2000f394
 80109a0:	2000f398 	.word	0x2000f398

080109a4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80109aa:	2300      	movs	r3, #0
 80109ac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80109ae:	2300      	movs	r3, #0
 80109b0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80109b2:	4b12      	ldr	r3, [pc, #72]	; (80109fc <tcp_kill_timewait+0x58>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	60fb      	str	r3, [r7, #12]
 80109b8:	e012      	b.n	80109e0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80109ba:	4b11      	ldr	r3, [pc, #68]	; (8010a00 <tcp_kill_timewait+0x5c>)
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	6a1b      	ldr	r3, [r3, #32]
 80109c2:	1ad3      	subs	r3, r2, r3
 80109c4:	687a      	ldr	r2, [r7, #4]
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d807      	bhi.n	80109da <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80109ca:	4b0d      	ldr	r3, [pc, #52]	; (8010a00 <tcp_kill_timewait+0x5c>)
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	6a1b      	ldr	r3, [r3, #32]
 80109d2:	1ad3      	subs	r3, r2, r3
 80109d4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	68db      	ldr	r3, [r3, #12]
 80109de:	60fb      	str	r3, [r7, #12]
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d1e9      	bne.n	80109ba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d002      	beq.n	80109f2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80109ec:	68b8      	ldr	r0, [r7, #8]
 80109ee:	f7ff f9db 	bl	800fda8 <tcp_abort>
  }
}
 80109f2:	bf00      	nop
 80109f4:	3710      	adds	r7, #16
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}
 80109fa:	bf00      	nop
 80109fc:	2000f3a4 	.word	0x2000f3a4
 8010a00:	2000f398 	.word	0x2000f398

08010a04 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010a0a:	4b10      	ldr	r3, [pc, #64]	; (8010a4c <tcp_handle_closepend+0x48>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010a10:	e014      	b.n	8010a3c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	68db      	ldr	r3, [r3, #12]
 8010a16:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	8b5b      	ldrh	r3, [r3, #26]
 8010a1c:	f003 0308 	and.w	r3, r3, #8
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d009      	beq.n	8010a38 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	8b5b      	ldrh	r3, [r3, #26]
 8010a28:	f023 0308 	bic.w	r3, r3, #8
 8010a2c:	b29a      	uxth	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f7ff f864 	bl	800fb00 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d1e7      	bne.n	8010a12 <tcp_handle_closepend+0xe>
  }
}
 8010a42:	bf00      	nop
 8010a44:	bf00      	nop
 8010a46:	3708      	adds	r7, #8
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	2000f394 	.word	0x2000f394

08010a50 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	4603      	mov	r3, r0
 8010a58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a5a:	2001      	movs	r0, #1
 8010a5c:	f7fd fcfe 	bl	800e45c <memp_malloc>
 8010a60:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d126      	bne.n	8010ab6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010a68:	f7ff ffcc 	bl	8010a04 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010a6c:	f7ff ff9a 	bl	80109a4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a70:	2001      	movs	r0, #1
 8010a72:	f7fd fcf3 	bl	800e45c <memp_malloc>
 8010a76:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d11b      	bne.n	8010ab6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010a7e:	2009      	movs	r0, #9
 8010a80:	f7ff ff46 	bl	8010910 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a84:	2001      	movs	r0, #1
 8010a86:	f7fd fce9 	bl	800e45c <memp_malloc>
 8010a8a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d111      	bne.n	8010ab6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010a92:	2008      	movs	r0, #8
 8010a94:	f7ff ff3c 	bl	8010910 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a98:	2001      	movs	r0, #1
 8010a9a:	f7fd fcdf 	bl	800e45c <memp_malloc>
 8010a9e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d107      	bne.n	8010ab6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010aa6:	79fb      	ldrb	r3, [r7, #7]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7ff fee3 	bl	8010874 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010aae:	2001      	movs	r0, #1
 8010ab0:	f7fd fcd4 	bl	800e45c <memp_malloc>
 8010ab4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d03f      	beq.n	8010b3c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010abc:	229c      	movs	r2, #156	; 0x9c
 8010abe:	2100      	movs	r1, #0
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f009 fc15 	bl	801a2f0 <memset>
    pcb->prio = prio;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	79fa      	ldrb	r2, [r7, #7]
 8010aca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010ad2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010adc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	22ff      	movs	r2, #255	; 0xff
 8010aea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010af2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2206      	movs	r2, #6
 8010af8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2206      	movs	r2, #6
 8010b00:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b08:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010b12:	4b0d      	ldr	r3, [pc, #52]	; (8010b48 <tcp_alloc+0xf8>)
 8010b14:	681a      	ldr	r2, [r3, #0]
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010b1a:	4b0c      	ldr	r3, [pc, #48]	; (8010b4c <tcp_alloc+0xfc>)
 8010b1c:	781a      	ldrb	r2, [r3, #0]
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010b28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	4a08      	ldr	r2, [pc, #32]	; (8010b50 <tcp_alloc+0x100>)
 8010b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	4a07      	ldr	r2, [pc, #28]	; (8010b54 <tcp_alloc+0x104>)
 8010b38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3710      	adds	r7, #16
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	2000f398 	.word	0x2000f398
 8010b4c:	200084d2 	.word	0x200084d2
 8010b50:	08010809 	.word	0x08010809
 8010b54:	006ddd00 	.word	0x006ddd00

08010b58 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d107      	bne.n	8010b76 <tcp_pcb_purge+0x1e>
 8010b66:	4b21      	ldr	r3, [pc, #132]	; (8010bec <tcp_pcb_purge+0x94>)
 8010b68:	f640 0251 	movw	r2, #2129	; 0x851
 8010b6c:	4920      	ldr	r1, [pc, #128]	; (8010bf0 <tcp_pcb_purge+0x98>)
 8010b6e:	4821      	ldr	r0, [pc, #132]	; (8010bf4 <tcp_pcb_purge+0x9c>)
 8010b70:	f009 fc70 	bl	801a454 <iprintf>
 8010b74:	e037      	b.n	8010be6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	7d1b      	ldrb	r3, [r3, #20]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d033      	beq.n	8010be6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010b82:	2b0a      	cmp	r3, #10
 8010b84:	d02f      	beq.n	8010be6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010b8a:	2b01      	cmp	r3, #1
 8010b8c:	d02b      	beq.n	8010be6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d007      	beq.n	8010ba6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fe fb60 	bl	800f260 <pbuf_free>
      pcb->refused_data = NULL;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d002      	beq.n	8010bb4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f000 f986 	bl	8010ec0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bba:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7ff fdc7 	bl	8010754 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7ff fdc2 	bl	8010754 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	66da      	str	r2, [r3, #108]	; 0x6c
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2200      	movs	r2, #0
 8010be2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010be6:	3708      	adds	r7, #8
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}
 8010bec:	0801c6a8 	.word	0x0801c6a8
 8010bf0:	0801ccf4 	.word	0x0801ccf4
 8010bf4:	0801c6ec 	.word	0x0801c6ec

08010bf8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b084      	sub	sp, #16
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d106      	bne.n	8010c16 <tcp_pcb_remove+0x1e>
 8010c08:	4b3e      	ldr	r3, [pc, #248]	; (8010d04 <tcp_pcb_remove+0x10c>)
 8010c0a:	f640 0283 	movw	r2, #2179	; 0x883
 8010c0e:	493e      	ldr	r1, [pc, #248]	; (8010d08 <tcp_pcb_remove+0x110>)
 8010c10:	483e      	ldr	r0, [pc, #248]	; (8010d0c <tcp_pcb_remove+0x114>)
 8010c12:	f009 fc1f 	bl	801a454 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d106      	bne.n	8010c2a <tcp_pcb_remove+0x32>
 8010c1c:	4b39      	ldr	r3, [pc, #228]	; (8010d04 <tcp_pcb_remove+0x10c>)
 8010c1e:	f640 0284 	movw	r2, #2180	; 0x884
 8010c22:	493b      	ldr	r1, [pc, #236]	; (8010d10 <tcp_pcb_remove+0x118>)
 8010c24:	4839      	ldr	r0, [pc, #228]	; (8010d0c <tcp_pcb_remove+0x114>)
 8010c26:	f009 fc15 	bl	801a454 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	683a      	ldr	r2, [r7, #0]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d105      	bne.n	8010c40 <tcp_pcb_remove+0x48>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	68da      	ldr	r2, [r3, #12]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	601a      	str	r2, [r3, #0]
 8010c3e:	e013      	b.n	8010c68 <tcp_pcb_remove+0x70>
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	60fb      	str	r3, [r7, #12]
 8010c46:	e00c      	b.n	8010c62 <tcp_pcb_remove+0x6a>
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	683a      	ldr	r2, [r7, #0]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d104      	bne.n	8010c5c <tcp_pcb_remove+0x64>
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	68da      	ldr	r2, [r3, #12]
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	60da      	str	r2, [r3, #12]
 8010c5a:	e005      	b.n	8010c68 <tcp_pcb_remove+0x70>
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	60fb      	str	r3, [r7, #12]
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d1ef      	bne.n	8010c48 <tcp_pcb_remove+0x50>
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010c6e:	6838      	ldr	r0, [r7, #0]
 8010c70:	f7ff ff72 	bl	8010b58 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	7d1b      	ldrb	r3, [r3, #20]
 8010c78:	2b0a      	cmp	r3, #10
 8010c7a:	d013      	beq.n	8010ca4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	d00f      	beq.n	8010ca4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	8b5b      	ldrh	r3, [r3, #26]
 8010c88:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d009      	beq.n	8010ca4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	8b5b      	ldrh	r3, [r3, #26]
 8010c94:	f043 0302 	orr.w	r3, r3, #2
 8010c98:	b29a      	uxth	r2, r3
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010c9e:	6838      	ldr	r0, [r7, #0]
 8010ca0:	f002 ff6a 	bl	8013b78 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	7d1b      	ldrb	r3, [r3, #20]
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	d020      	beq.n	8010cee <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d006      	beq.n	8010cc2 <tcp_pcb_remove+0xca>
 8010cb4:	4b13      	ldr	r3, [pc, #76]	; (8010d04 <tcp_pcb_remove+0x10c>)
 8010cb6:	f640 0293 	movw	r2, #2195	; 0x893
 8010cba:	4916      	ldr	r1, [pc, #88]	; (8010d14 <tcp_pcb_remove+0x11c>)
 8010cbc:	4813      	ldr	r0, [pc, #76]	; (8010d0c <tcp_pcb_remove+0x114>)
 8010cbe:	f009 fbc9 	bl	801a454 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d006      	beq.n	8010cd8 <tcp_pcb_remove+0xe0>
 8010cca:	4b0e      	ldr	r3, [pc, #56]	; (8010d04 <tcp_pcb_remove+0x10c>)
 8010ccc:	f640 0294 	movw	r2, #2196	; 0x894
 8010cd0:	4911      	ldr	r1, [pc, #68]	; (8010d18 <tcp_pcb_remove+0x120>)
 8010cd2:	480e      	ldr	r0, [pc, #56]	; (8010d0c <tcp_pcb_remove+0x114>)
 8010cd4:	f009 fbbe 	bl	801a454 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d006      	beq.n	8010cee <tcp_pcb_remove+0xf6>
 8010ce0:	4b08      	ldr	r3, [pc, #32]	; (8010d04 <tcp_pcb_remove+0x10c>)
 8010ce2:	f640 0296 	movw	r2, #2198	; 0x896
 8010ce6:	490d      	ldr	r1, [pc, #52]	; (8010d1c <tcp_pcb_remove+0x124>)
 8010ce8:	4808      	ldr	r0, [pc, #32]	; (8010d0c <tcp_pcb_remove+0x114>)
 8010cea:	f009 fbb3 	bl	801a454 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010cfa:	bf00      	nop
 8010cfc:	3710      	adds	r7, #16
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	0801c6a8 	.word	0x0801c6a8
 8010d08:	0801cd10 	.word	0x0801cd10
 8010d0c:	0801c6ec 	.word	0x0801c6ec
 8010d10:	0801cd2c 	.word	0x0801cd2c
 8010d14:	0801cd4c 	.word	0x0801cd4c
 8010d18:	0801cd64 	.word	0x0801cd64
 8010d1c:	0801cd80 	.word	0x0801cd80

08010d20 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d106      	bne.n	8010d3c <tcp_next_iss+0x1c>
 8010d2e:	4b0a      	ldr	r3, [pc, #40]	; (8010d58 <tcp_next_iss+0x38>)
 8010d30:	f640 02af 	movw	r2, #2223	; 0x8af
 8010d34:	4909      	ldr	r1, [pc, #36]	; (8010d5c <tcp_next_iss+0x3c>)
 8010d36:	480a      	ldr	r0, [pc, #40]	; (8010d60 <tcp_next_iss+0x40>)
 8010d38:	f009 fb8c 	bl	801a454 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010d3c:	4b09      	ldr	r3, [pc, #36]	; (8010d64 <tcp_next_iss+0x44>)
 8010d3e:	681a      	ldr	r2, [r3, #0]
 8010d40:	4b09      	ldr	r3, [pc, #36]	; (8010d68 <tcp_next_iss+0x48>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	4413      	add	r3, r2
 8010d46:	4a07      	ldr	r2, [pc, #28]	; (8010d64 <tcp_next_iss+0x44>)
 8010d48:	6013      	str	r3, [r2, #0]
  return iss;
 8010d4a:	4b06      	ldr	r3, [pc, #24]	; (8010d64 <tcp_next_iss+0x44>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3708      	adds	r7, #8
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}
 8010d56:	bf00      	nop
 8010d58:	0801c6a8 	.word	0x0801c6a8
 8010d5c:	0801cd98 	.word	0x0801cd98
 8010d60:	0801c6ec 	.word	0x0801c6ec
 8010d64:	20000034 	.word	0x20000034
 8010d68:	2000f398 	.word	0x2000f398

08010d6c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b086      	sub	sp, #24
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	4603      	mov	r3, r0
 8010d74:	60b9      	str	r1, [r7, #8]
 8010d76:	607a      	str	r2, [r7, #4]
 8010d78:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d106      	bne.n	8010d8e <tcp_eff_send_mss_netif+0x22>
 8010d80:	4b14      	ldr	r3, [pc, #80]	; (8010dd4 <tcp_eff_send_mss_netif+0x68>)
 8010d82:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010d86:	4914      	ldr	r1, [pc, #80]	; (8010dd8 <tcp_eff_send_mss_netif+0x6c>)
 8010d88:	4814      	ldr	r0, [pc, #80]	; (8010ddc <tcp_eff_send_mss_netif+0x70>)
 8010d8a:	f009 fb63 	bl	801a454 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d101      	bne.n	8010d98 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010d94:	89fb      	ldrh	r3, [r7, #14]
 8010d96:	e019      	b.n	8010dcc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d9c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010d9e:	8afb      	ldrh	r3, [r7, #22]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d012      	beq.n	8010dca <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010da4:	2328      	movs	r3, #40	; 0x28
 8010da6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010da8:	8afa      	ldrh	r2, [r7, #22]
 8010daa:	8abb      	ldrh	r3, [r7, #20]
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d904      	bls.n	8010dba <tcp_eff_send_mss_netif+0x4e>
 8010db0:	8afa      	ldrh	r2, [r7, #22]
 8010db2:	8abb      	ldrh	r3, [r7, #20]
 8010db4:	1ad3      	subs	r3, r2, r3
 8010db6:	b29b      	uxth	r3, r3
 8010db8:	e000      	b.n	8010dbc <tcp_eff_send_mss_netif+0x50>
 8010dba:	2300      	movs	r3, #0
 8010dbc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010dbe:	8a7a      	ldrh	r2, [r7, #18]
 8010dc0:	89fb      	ldrh	r3, [r7, #14]
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	bf28      	it	cs
 8010dc6:	4613      	movcs	r3, r2
 8010dc8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010dca:	89fb      	ldrh	r3, [r7, #14]
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3718      	adds	r7, #24
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	0801c6a8 	.word	0x0801c6a8
 8010dd8:	0801cdb4 	.word	0x0801cdb4
 8010ddc:	0801c6ec 	.word	0x0801c6ec

08010de0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b084      	sub	sp, #16
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d119      	bne.n	8010e28 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010df4:	4b10      	ldr	r3, [pc, #64]	; (8010e38 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010df6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010dfa:	4910      	ldr	r1, [pc, #64]	; (8010e3c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010dfc:	4810      	ldr	r0, [pc, #64]	; (8010e40 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010dfe:	f009 fb29 	bl	801a454 <iprintf>

  while (pcb != NULL) {
 8010e02:	e011      	b.n	8010e28 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d108      	bne.n	8010e22 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	68db      	ldr	r3, [r3, #12]
 8010e14:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010e16:	68f8      	ldr	r0, [r7, #12]
 8010e18:	f7fe ffc6 	bl	800fda8 <tcp_abort>
      pcb = next;
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	60fb      	str	r3, [r7, #12]
 8010e20:	e002      	b.n	8010e28 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d1ea      	bne.n	8010e04 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010e2e:	bf00      	nop
 8010e30:	bf00      	nop
 8010e32:	3710      	adds	r7, #16
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	0801c6a8 	.word	0x0801c6a8
 8010e3c:	0801cddc 	.word	0x0801cddc
 8010e40:	0801c6ec 	.word	0x0801c6ec

08010e44 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b084      	sub	sp, #16
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d02a      	beq.n	8010eaa <tcp_netif_ip_addr_changed+0x66>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d026      	beq.n	8010eaa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010e5c:	4b15      	ldr	r3, [pc, #84]	; (8010eb4 <tcp_netif_ip_addr_changed+0x70>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	4619      	mov	r1, r3
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f7ff ffbc 	bl	8010de0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010e68:	4b13      	ldr	r3, [pc, #76]	; (8010eb8 <tcp_netif_ip_addr_changed+0x74>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f7ff ffb6 	bl	8010de0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d017      	beq.n	8010eaa <tcp_netif_ip_addr_changed+0x66>
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d013      	beq.n	8010eaa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010e82:	4b0e      	ldr	r3, [pc, #56]	; (8010ebc <tcp_netif_ip_addr_changed+0x78>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	60fb      	str	r3, [r7, #12]
 8010e88:	e00c      	b.n	8010ea4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	681a      	ldr	r2, [r3, #0]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d103      	bne.n	8010e9e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	68db      	ldr	r3, [r3, #12]
 8010ea2:	60fb      	str	r3, [r7, #12]
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d1ef      	bne.n	8010e8a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010eaa:	bf00      	nop
 8010eac:	3710      	adds	r7, #16
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	2000f394 	.word	0x2000f394
 8010eb8:	2000f3a0 	.word	0x2000f3a0
 8010ebc:	2000f39c 	.word	0x2000f39c

08010ec0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d007      	beq.n	8010ee0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7ff fc3d 	bl	8010754 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2200      	movs	r2, #0
 8010ede:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010ee0:	bf00      	nop
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010ee8:	b590      	push	{r4, r7, lr}
 8010eea:	b08d      	sub	sp, #52	; 0x34
 8010eec:	af04      	add	r7, sp, #16
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d105      	bne.n	8010f04 <tcp_input+0x1c>
 8010ef8:	4b9b      	ldr	r3, [pc, #620]	; (8011168 <tcp_input+0x280>)
 8010efa:	2283      	movs	r2, #131	; 0x83
 8010efc:	499b      	ldr	r1, [pc, #620]	; (801116c <tcp_input+0x284>)
 8010efe:	489c      	ldr	r0, [pc, #624]	; (8011170 <tcp_input+0x288>)
 8010f00:	f009 faa8 	bl	801a454 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	685b      	ldr	r3, [r3, #4]
 8010f08:	4a9a      	ldr	r2, [pc, #616]	; (8011174 <tcp_input+0x28c>)
 8010f0a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	895b      	ldrh	r3, [r3, #10]
 8010f10:	2b13      	cmp	r3, #19
 8010f12:	f240 83c4 	bls.w	801169e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010f16:	4b98      	ldr	r3, [pc, #608]	; (8011178 <tcp_input+0x290>)
 8010f18:	695b      	ldr	r3, [r3, #20]
 8010f1a:	4a97      	ldr	r2, [pc, #604]	; (8011178 <tcp_input+0x290>)
 8010f1c:	6812      	ldr	r2, [r2, #0]
 8010f1e:	4611      	mov	r1, r2
 8010f20:	4618      	mov	r0, r3
 8010f22:	f007 fdf9 	bl	8018b18 <ip4_addr_isbroadcast_u32>
 8010f26:	4603      	mov	r3, r0
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	f040 83ba 	bne.w	80116a2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010f2e:	4b92      	ldr	r3, [pc, #584]	; (8011178 <tcp_input+0x290>)
 8010f30:	695b      	ldr	r3, [r3, #20]
 8010f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010f36:	2be0      	cmp	r3, #224	; 0xe0
 8010f38:	f000 83b3 	beq.w	80116a2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010f3c:	4b8d      	ldr	r3, [pc, #564]	; (8011174 <tcp_input+0x28c>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	899b      	ldrh	r3, [r3, #12]
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7fc fdd3 	bl	800daf0 <lwip_htons>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	0b1b      	lsrs	r3, r3, #12
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	009b      	lsls	r3, r3, #2
 8010f54:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010f56:	7cbb      	ldrb	r3, [r7, #18]
 8010f58:	2b13      	cmp	r3, #19
 8010f5a:	f240 83a4 	bls.w	80116a6 <tcp_input+0x7be>
 8010f5e:	7cbb      	ldrb	r3, [r7, #18]
 8010f60:	b29a      	uxth	r2, r3
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	891b      	ldrh	r3, [r3, #8]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	f200 839d 	bhi.w	80116a6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010f6c:	7cbb      	ldrb	r3, [r7, #18]
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	3b14      	subs	r3, #20
 8010f72:	b29a      	uxth	r2, r3
 8010f74:	4b81      	ldr	r3, [pc, #516]	; (801117c <tcp_input+0x294>)
 8010f76:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010f78:	4b81      	ldr	r3, [pc, #516]	; (8011180 <tcp_input+0x298>)
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	895a      	ldrh	r2, [r3, #10]
 8010f82:	7cbb      	ldrb	r3, [r7, #18]
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d309      	bcc.n	8010f9e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010f8a:	4b7c      	ldr	r3, [pc, #496]	; (801117c <tcp_input+0x294>)
 8010f8c:	881a      	ldrh	r2, [r3, #0]
 8010f8e:	4b7d      	ldr	r3, [pc, #500]	; (8011184 <tcp_input+0x29c>)
 8010f90:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010f92:	7cbb      	ldrb	r3, [r7, #18]
 8010f94:	4619      	mov	r1, r3
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f7fe f8dc 	bl	800f154 <pbuf_remove_header>
 8010f9c:	e04e      	b.n	801103c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d105      	bne.n	8010fb2 <tcp_input+0xca>
 8010fa6:	4b70      	ldr	r3, [pc, #448]	; (8011168 <tcp_input+0x280>)
 8010fa8:	22c2      	movs	r2, #194	; 0xc2
 8010faa:	4977      	ldr	r1, [pc, #476]	; (8011188 <tcp_input+0x2a0>)
 8010fac:	4870      	ldr	r0, [pc, #448]	; (8011170 <tcp_input+0x288>)
 8010fae:	f009 fa51 	bl	801a454 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010fb2:	2114      	movs	r1, #20
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f7fe f8cd 	bl	800f154 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	895a      	ldrh	r2, [r3, #10]
 8010fbe:	4b71      	ldr	r3, [pc, #452]	; (8011184 <tcp_input+0x29c>)
 8010fc0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010fc2:	4b6e      	ldr	r3, [pc, #440]	; (801117c <tcp_input+0x294>)
 8010fc4:	881a      	ldrh	r2, [r3, #0]
 8010fc6:	4b6f      	ldr	r3, [pc, #444]	; (8011184 <tcp_input+0x29c>)
 8010fc8:	881b      	ldrh	r3, [r3, #0]
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010fce:	4b6d      	ldr	r3, [pc, #436]	; (8011184 <tcp_input+0x29c>)
 8010fd0:	881b      	ldrh	r3, [r3, #0]
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f7fe f8bd 	bl	800f154 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	895b      	ldrh	r3, [r3, #10]
 8010fe0:	8a3a      	ldrh	r2, [r7, #16]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	f200 8361 	bhi.w	80116aa <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	685b      	ldr	r3, [r3, #4]
 8010fee:	4a64      	ldr	r2, [pc, #400]	; (8011180 <tcp_input+0x298>)
 8010ff0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	8a3a      	ldrh	r2, [r7, #16]
 8010ff8:	4611      	mov	r1, r2
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7fe f8aa 	bl	800f154 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	891a      	ldrh	r2, [r3, #8]
 8011004:	8a3b      	ldrh	r3, [r7, #16]
 8011006:	1ad3      	subs	r3, r2, r3
 8011008:	b29a      	uxth	r2, r3
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	895b      	ldrh	r3, [r3, #10]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d005      	beq.n	8011022 <tcp_input+0x13a>
 8011016:	4b54      	ldr	r3, [pc, #336]	; (8011168 <tcp_input+0x280>)
 8011018:	22df      	movs	r2, #223	; 0xdf
 801101a:	495c      	ldr	r1, [pc, #368]	; (801118c <tcp_input+0x2a4>)
 801101c:	4854      	ldr	r0, [pc, #336]	; (8011170 <tcp_input+0x288>)
 801101e:	f009 fa19 	bl	801a454 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	891a      	ldrh	r2, [r3, #8]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	891b      	ldrh	r3, [r3, #8]
 801102c:	429a      	cmp	r2, r3
 801102e:	d005      	beq.n	801103c <tcp_input+0x154>
 8011030:	4b4d      	ldr	r3, [pc, #308]	; (8011168 <tcp_input+0x280>)
 8011032:	22e0      	movs	r2, #224	; 0xe0
 8011034:	4956      	ldr	r1, [pc, #344]	; (8011190 <tcp_input+0x2a8>)
 8011036:	484e      	ldr	r0, [pc, #312]	; (8011170 <tcp_input+0x288>)
 8011038:	f009 fa0c 	bl	801a454 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801103c:	4b4d      	ldr	r3, [pc, #308]	; (8011174 <tcp_input+0x28c>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	881b      	ldrh	r3, [r3, #0]
 8011042:	b29b      	uxth	r3, r3
 8011044:	4a4b      	ldr	r2, [pc, #300]	; (8011174 <tcp_input+0x28c>)
 8011046:	6814      	ldr	r4, [r2, #0]
 8011048:	4618      	mov	r0, r3
 801104a:	f7fc fd51 	bl	800daf0 <lwip_htons>
 801104e:	4603      	mov	r3, r0
 8011050:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011052:	4b48      	ldr	r3, [pc, #288]	; (8011174 <tcp_input+0x28c>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	885b      	ldrh	r3, [r3, #2]
 8011058:	b29b      	uxth	r3, r3
 801105a:	4a46      	ldr	r2, [pc, #280]	; (8011174 <tcp_input+0x28c>)
 801105c:	6814      	ldr	r4, [r2, #0]
 801105e:	4618      	mov	r0, r3
 8011060:	f7fc fd46 	bl	800daf0 <lwip_htons>
 8011064:	4603      	mov	r3, r0
 8011066:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011068:	4b42      	ldr	r3, [pc, #264]	; (8011174 <tcp_input+0x28c>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	4a41      	ldr	r2, [pc, #260]	; (8011174 <tcp_input+0x28c>)
 8011070:	6814      	ldr	r4, [r2, #0]
 8011072:	4618      	mov	r0, r3
 8011074:	f7fc fd51 	bl	800db1a <lwip_htonl>
 8011078:	4603      	mov	r3, r0
 801107a:	6063      	str	r3, [r4, #4]
 801107c:	6863      	ldr	r3, [r4, #4]
 801107e:	4a45      	ldr	r2, [pc, #276]	; (8011194 <tcp_input+0x2ac>)
 8011080:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011082:	4b3c      	ldr	r3, [pc, #240]	; (8011174 <tcp_input+0x28c>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	689b      	ldr	r3, [r3, #8]
 8011088:	4a3a      	ldr	r2, [pc, #232]	; (8011174 <tcp_input+0x28c>)
 801108a:	6814      	ldr	r4, [r2, #0]
 801108c:	4618      	mov	r0, r3
 801108e:	f7fc fd44 	bl	800db1a <lwip_htonl>
 8011092:	4603      	mov	r3, r0
 8011094:	60a3      	str	r3, [r4, #8]
 8011096:	68a3      	ldr	r3, [r4, #8]
 8011098:	4a3f      	ldr	r2, [pc, #252]	; (8011198 <tcp_input+0x2b0>)
 801109a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801109c:	4b35      	ldr	r3, [pc, #212]	; (8011174 <tcp_input+0x28c>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	89db      	ldrh	r3, [r3, #14]
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	4a33      	ldr	r2, [pc, #204]	; (8011174 <tcp_input+0x28c>)
 80110a6:	6814      	ldr	r4, [r2, #0]
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7fc fd21 	bl	800daf0 <lwip_htons>
 80110ae:	4603      	mov	r3, r0
 80110b0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80110b2:	4b30      	ldr	r3, [pc, #192]	; (8011174 <tcp_input+0x28c>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	899b      	ldrh	r3, [r3, #12]
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7fc fd18 	bl	800daf0 <lwip_htons>
 80110c0:	4603      	mov	r3, r0
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110c8:	b2da      	uxtb	r2, r3
 80110ca:	4b34      	ldr	r3, [pc, #208]	; (801119c <tcp_input+0x2b4>)
 80110cc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	891a      	ldrh	r2, [r3, #8]
 80110d2:	4b33      	ldr	r3, [pc, #204]	; (80111a0 <tcp_input+0x2b8>)
 80110d4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80110d6:	4b31      	ldr	r3, [pc, #196]	; (801119c <tcp_input+0x2b4>)
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	f003 0303 	and.w	r3, r3, #3
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d00c      	beq.n	80110fc <tcp_input+0x214>
    tcplen++;
 80110e2:	4b2f      	ldr	r3, [pc, #188]	; (80111a0 <tcp_input+0x2b8>)
 80110e4:	881b      	ldrh	r3, [r3, #0]
 80110e6:	3301      	adds	r3, #1
 80110e8:	b29a      	uxth	r2, r3
 80110ea:	4b2d      	ldr	r3, [pc, #180]	; (80111a0 <tcp_input+0x2b8>)
 80110ec:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	891a      	ldrh	r2, [r3, #8]
 80110f2:	4b2b      	ldr	r3, [pc, #172]	; (80111a0 <tcp_input+0x2b8>)
 80110f4:	881b      	ldrh	r3, [r3, #0]
 80110f6:	429a      	cmp	r2, r3
 80110f8:	f200 82d9 	bhi.w	80116ae <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80110fc:	2300      	movs	r3, #0
 80110fe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011100:	4b28      	ldr	r3, [pc, #160]	; (80111a4 <tcp_input+0x2bc>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	61fb      	str	r3, [r7, #28]
 8011106:	e09d      	b.n	8011244 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011108:	69fb      	ldr	r3, [r7, #28]
 801110a:	7d1b      	ldrb	r3, [r3, #20]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d105      	bne.n	801111c <tcp_input+0x234>
 8011110:	4b15      	ldr	r3, [pc, #84]	; (8011168 <tcp_input+0x280>)
 8011112:	22fb      	movs	r2, #251	; 0xfb
 8011114:	4924      	ldr	r1, [pc, #144]	; (80111a8 <tcp_input+0x2c0>)
 8011116:	4816      	ldr	r0, [pc, #88]	; (8011170 <tcp_input+0x288>)
 8011118:	f009 f99c 	bl	801a454 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801111c:	69fb      	ldr	r3, [r7, #28]
 801111e:	7d1b      	ldrb	r3, [r3, #20]
 8011120:	2b0a      	cmp	r3, #10
 8011122:	d105      	bne.n	8011130 <tcp_input+0x248>
 8011124:	4b10      	ldr	r3, [pc, #64]	; (8011168 <tcp_input+0x280>)
 8011126:	22fc      	movs	r2, #252	; 0xfc
 8011128:	4920      	ldr	r1, [pc, #128]	; (80111ac <tcp_input+0x2c4>)
 801112a:	4811      	ldr	r0, [pc, #68]	; (8011170 <tcp_input+0x288>)
 801112c:	f009 f992 	bl	801a454 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011130:	69fb      	ldr	r3, [r7, #28]
 8011132:	7d1b      	ldrb	r3, [r3, #20]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d105      	bne.n	8011144 <tcp_input+0x25c>
 8011138:	4b0b      	ldr	r3, [pc, #44]	; (8011168 <tcp_input+0x280>)
 801113a:	22fd      	movs	r2, #253	; 0xfd
 801113c:	491c      	ldr	r1, [pc, #112]	; (80111b0 <tcp_input+0x2c8>)
 801113e:	480c      	ldr	r0, [pc, #48]	; (8011170 <tcp_input+0x288>)
 8011140:	f009 f988 	bl	801a454 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011144:	69fb      	ldr	r3, [r7, #28]
 8011146:	7a1b      	ldrb	r3, [r3, #8]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d033      	beq.n	80111b4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	7a1a      	ldrb	r2, [r3, #8]
 8011150:	4b09      	ldr	r3, [pc, #36]	; (8011178 <tcp_input+0x290>)
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011158:	3301      	adds	r3, #1
 801115a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801115c:	429a      	cmp	r2, r3
 801115e:	d029      	beq.n	80111b4 <tcp_input+0x2cc>
      prev = pcb;
 8011160:	69fb      	ldr	r3, [r7, #28]
 8011162:	61bb      	str	r3, [r7, #24]
      continue;
 8011164:	e06b      	b.n	801123e <tcp_input+0x356>
 8011166:	bf00      	nop
 8011168:	0801ce10 	.word	0x0801ce10
 801116c:	0801ce44 	.word	0x0801ce44
 8011170:	0801ce5c 	.word	0x0801ce5c
 8011174:	200084e4 	.word	0x200084e4
 8011178:	2000bc60 	.word	0x2000bc60
 801117c:	200084e8 	.word	0x200084e8
 8011180:	200084ec 	.word	0x200084ec
 8011184:	200084ea 	.word	0x200084ea
 8011188:	0801ce84 	.word	0x0801ce84
 801118c:	0801ce94 	.word	0x0801ce94
 8011190:	0801cea0 	.word	0x0801cea0
 8011194:	200084f4 	.word	0x200084f4
 8011198:	200084f8 	.word	0x200084f8
 801119c:	20008500 	.word	0x20008500
 80111a0:	200084fe 	.word	0x200084fe
 80111a4:	2000f394 	.word	0x2000f394
 80111a8:	0801cec0 	.word	0x0801cec0
 80111ac:	0801cee8 	.word	0x0801cee8
 80111b0:	0801cf14 	.word	0x0801cf14
    }

    if (pcb->remote_port == tcphdr->src &&
 80111b4:	69fb      	ldr	r3, [r7, #28]
 80111b6:	8b1a      	ldrh	r2, [r3, #24]
 80111b8:	4b94      	ldr	r3, [pc, #592]	; (801140c <tcp_input+0x524>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	881b      	ldrh	r3, [r3, #0]
 80111be:	b29b      	uxth	r3, r3
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d13a      	bne.n	801123a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80111c4:	69fb      	ldr	r3, [r7, #28]
 80111c6:	8ada      	ldrh	r2, [r3, #22]
 80111c8:	4b90      	ldr	r3, [pc, #576]	; (801140c <tcp_input+0x524>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	885b      	ldrh	r3, [r3, #2]
 80111ce:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d132      	bne.n	801123a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80111d4:	69fb      	ldr	r3, [r7, #28]
 80111d6:	685a      	ldr	r2, [r3, #4]
 80111d8:	4b8d      	ldr	r3, [pc, #564]	; (8011410 <tcp_input+0x528>)
 80111da:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80111dc:	429a      	cmp	r2, r3
 80111de:	d12c      	bne.n	801123a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80111e0:	69fb      	ldr	r3, [r7, #28]
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	4b8a      	ldr	r3, [pc, #552]	; (8011410 <tcp_input+0x528>)
 80111e6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d126      	bne.n	801123a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80111ec:	69fb      	ldr	r3, [r7, #28]
 80111ee:	68db      	ldr	r3, [r3, #12]
 80111f0:	69fa      	ldr	r2, [r7, #28]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d106      	bne.n	8011204 <tcp_input+0x31c>
 80111f6:	4b87      	ldr	r3, [pc, #540]	; (8011414 <tcp_input+0x52c>)
 80111f8:	f240 120d 	movw	r2, #269	; 0x10d
 80111fc:	4986      	ldr	r1, [pc, #536]	; (8011418 <tcp_input+0x530>)
 80111fe:	4887      	ldr	r0, [pc, #540]	; (801141c <tcp_input+0x534>)
 8011200:	f009 f928 	bl	801a454 <iprintf>
      if (prev != NULL) {
 8011204:	69bb      	ldr	r3, [r7, #24]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d00a      	beq.n	8011220 <tcp_input+0x338>
        prev->next = pcb->next;
 801120a:	69fb      	ldr	r3, [r7, #28]
 801120c:	68da      	ldr	r2, [r3, #12]
 801120e:	69bb      	ldr	r3, [r7, #24]
 8011210:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011212:	4b83      	ldr	r3, [pc, #524]	; (8011420 <tcp_input+0x538>)
 8011214:	681a      	ldr	r2, [r3, #0]
 8011216:	69fb      	ldr	r3, [r7, #28]
 8011218:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801121a:	4a81      	ldr	r2, [pc, #516]	; (8011420 <tcp_input+0x538>)
 801121c:	69fb      	ldr	r3, [r7, #28]
 801121e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	68db      	ldr	r3, [r3, #12]
 8011224:	69fa      	ldr	r2, [r7, #28]
 8011226:	429a      	cmp	r2, r3
 8011228:	d111      	bne.n	801124e <tcp_input+0x366>
 801122a:	4b7a      	ldr	r3, [pc, #488]	; (8011414 <tcp_input+0x52c>)
 801122c:	f240 1215 	movw	r2, #277	; 0x115
 8011230:	497c      	ldr	r1, [pc, #496]	; (8011424 <tcp_input+0x53c>)
 8011232:	487a      	ldr	r0, [pc, #488]	; (801141c <tcp_input+0x534>)
 8011234:	f009 f90e 	bl	801a454 <iprintf>
      break;
 8011238:	e009      	b.n	801124e <tcp_input+0x366>
    }
    prev = pcb;
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801123e:	69fb      	ldr	r3, [r7, #28]
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	61fb      	str	r3, [r7, #28]
 8011244:	69fb      	ldr	r3, [r7, #28]
 8011246:	2b00      	cmp	r3, #0
 8011248:	f47f af5e 	bne.w	8011108 <tcp_input+0x220>
 801124c:	e000      	b.n	8011250 <tcp_input+0x368>
      break;
 801124e:	bf00      	nop
  }

  if (pcb == NULL) {
 8011250:	69fb      	ldr	r3, [r7, #28]
 8011252:	2b00      	cmp	r3, #0
 8011254:	f040 8095 	bne.w	8011382 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011258:	4b73      	ldr	r3, [pc, #460]	; (8011428 <tcp_input+0x540>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	61fb      	str	r3, [r7, #28]
 801125e:	e03f      	b.n	80112e0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	7d1b      	ldrb	r3, [r3, #20]
 8011264:	2b0a      	cmp	r3, #10
 8011266:	d006      	beq.n	8011276 <tcp_input+0x38e>
 8011268:	4b6a      	ldr	r3, [pc, #424]	; (8011414 <tcp_input+0x52c>)
 801126a:	f240 121f 	movw	r2, #287	; 0x11f
 801126e:	496f      	ldr	r1, [pc, #444]	; (801142c <tcp_input+0x544>)
 8011270:	486a      	ldr	r0, [pc, #424]	; (801141c <tcp_input+0x534>)
 8011272:	f009 f8ef 	bl	801a454 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	7a1b      	ldrb	r3, [r3, #8]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d009      	beq.n	8011292 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801127e:	69fb      	ldr	r3, [r7, #28]
 8011280:	7a1a      	ldrb	r2, [r3, #8]
 8011282:	4b63      	ldr	r3, [pc, #396]	; (8011410 <tcp_input+0x528>)
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801128a:	3301      	adds	r3, #1
 801128c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801128e:	429a      	cmp	r2, r3
 8011290:	d122      	bne.n	80112d8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011292:	69fb      	ldr	r3, [r7, #28]
 8011294:	8b1a      	ldrh	r2, [r3, #24]
 8011296:	4b5d      	ldr	r3, [pc, #372]	; (801140c <tcp_input+0x524>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	881b      	ldrh	r3, [r3, #0]
 801129c:	b29b      	uxth	r3, r3
 801129e:	429a      	cmp	r2, r3
 80112a0:	d11b      	bne.n	80112da <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80112a2:	69fb      	ldr	r3, [r7, #28]
 80112a4:	8ada      	ldrh	r2, [r3, #22]
 80112a6:	4b59      	ldr	r3, [pc, #356]	; (801140c <tcp_input+0x524>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	885b      	ldrh	r3, [r3, #2]
 80112ac:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d113      	bne.n	80112da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80112b2:	69fb      	ldr	r3, [r7, #28]
 80112b4:	685a      	ldr	r2, [r3, #4]
 80112b6:	4b56      	ldr	r3, [pc, #344]	; (8011410 <tcp_input+0x528>)
 80112b8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d10d      	bne.n	80112da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80112be:	69fb      	ldr	r3, [r7, #28]
 80112c0:	681a      	ldr	r2, [r3, #0]
 80112c2:	4b53      	ldr	r3, [pc, #332]	; (8011410 <tcp_input+0x528>)
 80112c4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d107      	bne.n	80112da <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80112ca:	69f8      	ldr	r0, [r7, #28]
 80112cc:	f000 fb54 	bl	8011978 <tcp_timewait_input>
        }
        pbuf_free(p);
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f7fd ffc5 	bl	800f260 <pbuf_free>
        return;
 80112d6:	e1f0      	b.n	80116ba <tcp_input+0x7d2>
        continue;
 80112d8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80112da:	69fb      	ldr	r3, [r7, #28]
 80112dc:	68db      	ldr	r3, [r3, #12]
 80112de:	61fb      	str	r3, [r7, #28]
 80112e0:	69fb      	ldr	r3, [r7, #28]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d1bc      	bne.n	8011260 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80112e6:	2300      	movs	r3, #0
 80112e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80112ea:	4b51      	ldr	r3, [pc, #324]	; (8011430 <tcp_input+0x548>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	617b      	str	r3, [r7, #20]
 80112f0:	e02a      	b.n	8011348 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	7a1b      	ldrb	r3, [r3, #8]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d00c      	beq.n	8011314 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	7a1a      	ldrb	r2, [r3, #8]
 80112fe:	4b44      	ldr	r3, [pc, #272]	; (8011410 <tcp_input+0x528>)
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011306:	3301      	adds	r3, #1
 8011308:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801130a:	429a      	cmp	r2, r3
 801130c:	d002      	beq.n	8011314 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	61bb      	str	r3, [r7, #24]
        continue;
 8011312:	e016      	b.n	8011342 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	8ada      	ldrh	r2, [r3, #22]
 8011318:	4b3c      	ldr	r3, [pc, #240]	; (801140c <tcp_input+0x524>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	885b      	ldrh	r3, [r3, #2]
 801131e:	b29b      	uxth	r3, r3
 8011320:	429a      	cmp	r2, r3
 8011322:	d10c      	bne.n	801133e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	681a      	ldr	r2, [r3, #0]
 8011328:	4b39      	ldr	r3, [pc, #228]	; (8011410 <tcp_input+0x528>)
 801132a:	695b      	ldr	r3, [r3, #20]
 801132c:	429a      	cmp	r2, r3
 801132e:	d00f      	beq.n	8011350 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d00d      	beq.n	8011352 <tcp_input+0x46a>
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d009      	beq.n	8011352 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011342:	697b      	ldr	r3, [r7, #20]
 8011344:	68db      	ldr	r3, [r3, #12]
 8011346:	617b      	str	r3, [r7, #20]
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d1d1      	bne.n	80112f2 <tcp_input+0x40a>
 801134e:	e000      	b.n	8011352 <tcp_input+0x46a>
            break;
 8011350:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d014      	beq.n	8011382 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011358:	69bb      	ldr	r3, [r7, #24]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d00a      	beq.n	8011374 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	68da      	ldr	r2, [r3, #12]
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011366:	4b32      	ldr	r3, [pc, #200]	; (8011430 <tcp_input+0x548>)
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801136e:	4a30      	ldr	r2, [pc, #192]	; (8011430 <tcp_input+0x548>)
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011374:	6978      	ldr	r0, [r7, #20]
 8011376:	f000 fa01 	bl	801177c <tcp_listen_input>
      }
      pbuf_free(p);
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f7fd ff70 	bl	800f260 <pbuf_free>
      return;
 8011380:	e19b      	b.n	80116ba <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011382:	69fb      	ldr	r3, [r7, #28]
 8011384:	2b00      	cmp	r3, #0
 8011386:	f000 8160 	beq.w	801164a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801138a:	4b2a      	ldr	r3, [pc, #168]	; (8011434 <tcp_input+0x54c>)
 801138c:	2200      	movs	r2, #0
 801138e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	891a      	ldrh	r2, [r3, #8]
 8011394:	4b27      	ldr	r3, [pc, #156]	; (8011434 <tcp_input+0x54c>)
 8011396:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011398:	4a26      	ldr	r2, [pc, #152]	; (8011434 <tcp_input+0x54c>)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801139e:	4b1b      	ldr	r3, [pc, #108]	; (801140c <tcp_input+0x524>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	4a24      	ldr	r2, [pc, #144]	; (8011434 <tcp_input+0x54c>)
 80113a4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80113a6:	4b24      	ldr	r3, [pc, #144]	; (8011438 <tcp_input+0x550>)
 80113a8:	2200      	movs	r2, #0
 80113aa:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80113ac:	4b23      	ldr	r3, [pc, #140]	; (801143c <tcp_input+0x554>)
 80113ae:	2200      	movs	r2, #0
 80113b0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80113b2:	4b23      	ldr	r3, [pc, #140]	; (8011440 <tcp_input+0x558>)
 80113b4:	2200      	movs	r2, #0
 80113b6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80113b8:	4b22      	ldr	r3, [pc, #136]	; (8011444 <tcp_input+0x55c>)
 80113ba:	781b      	ldrb	r3, [r3, #0]
 80113bc:	f003 0308 	and.w	r3, r3, #8
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d006      	beq.n	80113d2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	7b5b      	ldrb	r3, [r3, #13]
 80113c8:	f043 0301 	orr.w	r3, r3, #1
 80113cc:	b2da      	uxtb	r2, r3
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80113d2:	69fb      	ldr	r3, [r7, #28]
 80113d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d038      	beq.n	801144c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80113da:	69f8      	ldr	r0, [r7, #28]
 80113dc:	f7ff f93e 	bl	801065c <tcp_process_refused_data>
 80113e0:	4603      	mov	r3, r0
 80113e2:	f113 0f0d 	cmn.w	r3, #13
 80113e6:	d007      	beq.n	80113f8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80113e8:	69fb      	ldr	r3, [r7, #28]
 80113ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d02d      	beq.n	801144c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80113f0:	4b15      	ldr	r3, [pc, #84]	; (8011448 <tcp_input+0x560>)
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d029      	beq.n	801144c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80113f8:	69fb      	ldr	r3, [r7, #28]
 80113fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	f040 8104 	bne.w	801160a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011402:	69f8      	ldr	r0, [r7, #28]
 8011404:	f003 f9be 	bl	8014784 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011408:	e0ff      	b.n	801160a <tcp_input+0x722>
 801140a:	bf00      	nop
 801140c:	200084e4 	.word	0x200084e4
 8011410:	2000bc60 	.word	0x2000bc60
 8011414:	0801ce10 	.word	0x0801ce10
 8011418:	0801cf3c 	.word	0x0801cf3c
 801141c:	0801ce5c 	.word	0x0801ce5c
 8011420:	2000f394 	.word	0x2000f394
 8011424:	0801cf68 	.word	0x0801cf68
 8011428:	2000f3a4 	.word	0x2000f3a4
 801142c:	0801cf94 	.word	0x0801cf94
 8011430:	2000f39c 	.word	0x2000f39c
 8011434:	200084d4 	.word	0x200084d4
 8011438:	20008504 	.word	0x20008504
 801143c:	20008501 	.word	0x20008501
 8011440:	200084fc 	.word	0x200084fc
 8011444:	20008500 	.word	0x20008500
 8011448:	200084fe 	.word	0x200084fe
      }
    }
    tcp_input_pcb = pcb;
 801144c:	4a9c      	ldr	r2, [pc, #624]	; (80116c0 <tcp_input+0x7d8>)
 801144e:	69fb      	ldr	r3, [r7, #28]
 8011450:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011452:	69f8      	ldr	r0, [r7, #28]
 8011454:	f000 fb0a 	bl	8011a6c <tcp_process>
 8011458:	4603      	mov	r3, r0
 801145a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801145c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011460:	f113 0f0d 	cmn.w	r3, #13
 8011464:	f000 80d3 	beq.w	801160e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8011468:	4b96      	ldr	r3, [pc, #600]	; (80116c4 <tcp_input+0x7dc>)
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	f003 0308 	and.w	r3, r3, #8
 8011470:	2b00      	cmp	r3, #0
 8011472:	d015      	beq.n	80114a0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801147a:	2b00      	cmp	r3, #0
 801147c:	d008      	beq.n	8011490 <tcp_input+0x5a8>
 801147e:	69fb      	ldr	r3, [r7, #28]
 8011480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011484:	69fa      	ldr	r2, [r7, #28]
 8011486:	6912      	ldr	r2, [r2, #16]
 8011488:	f06f 010d 	mvn.w	r1, #13
 801148c:	4610      	mov	r0, r2
 801148e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011490:	69f9      	ldr	r1, [r7, #28]
 8011492:	488d      	ldr	r0, [pc, #564]	; (80116c8 <tcp_input+0x7e0>)
 8011494:	f7ff fbb0 	bl	8010bf8 <tcp_pcb_remove>
        tcp_free(pcb);
 8011498:	69f8      	ldr	r0, [r7, #28]
 801149a:	f7fe f99d 	bl	800f7d8 <tcp_free>
 801149e:	e0c1      	b.n	8011624 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80114a0:	2300      	movs	r3, #0
 80114a2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80114a4:	4b89      	ldr	r3, [pc, #548]	; (80116cc <tcp_input+0x7e4>)
 80114a6:	881b      	ldrh	r3, [r3, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d01d      	beq.n	80114e8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80114ac:	4b87      	ldr	r3, [pc, #540]	; (80116cc <tcp_input+0x7e4>)
 80114ae:	881b      	ldrh	r3, [r3, #0]
 80114b0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80114b2:	69fb      	ldr	r3, [r7, #28]
 80114b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d00a      	beq.n	80114d2 <tcp_input+0x5ea>
 80114bc:	69fb      	ldr	r3, [r7, #28]
 80114be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80114c2:	69fa      	ldr	r2, [r7, #28]
 80114c4:	6910      	ldr	r0, [r2, #16]
 80114c6:	89fa      	ldrh	r2, [r7, #14]
 80114c8:	69f9      	ldr	r1, [r7, #28]
 80114ca:	4798      	blx	r3
 80114cc:	4603      	mov	r3, r0
 80114ce:	74fb      	strb	r3, [r7, #19]
 80114d0:	e001      	b.n	80114d6 <tcp_input+0x5ee>
 80114d2:	2300      	movs	r3, #0
 80114d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80114d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114da:	f113 0f0d 	cmn.w	r3, #13
 80114de:	f000 8098 	beq.w	8011612 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80114e2:	4b7a      	ldr	r3, [pc, #488]	; (80116cc <tcp_input+0x7e4>)
 80114e4:	2200      	movs	r2, #0
 80114e6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80114e8:	69f8      	ldr	r0, [r7, #28]
 80114ea:	f000 f907 	bl	80116fc <tcp_input_delayed_close>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	f040 8090 	bne.w	8011616 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80114f6:	4b76      	ldr	r3, [pc, #472]	; (80116d0 <tcp_input+0x7e8>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d041      	beq.n	8011582 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80114fe:	69fb      	ldr	r3, [r7, #28]
 8011500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011502:	2b00      	cmp	r3, #0
 8011504:	d006      	beq.n	8011514 <tcp_input+0x62c>
 8011506:	4b73      	ldr	r3, [pc, #460]	; (80116d4 <tcp_input+0x7ec>)
 8011508:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801150c:	4972      	ldr	r1, [pc, #456]	; (80116d8 <tcp_input+0x7f0>)
 801150e:	4873      	ldr	r0, [pc, #460]	; (80116dc <tcp_input+0x7f4>)
 8011510:	f008 ffa0 	bl	801a454 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011514:	69fb      	ldr	r3, [r7, #28]
 8011516:	8b5b      	ldrh	r3, [r3, #26]
 8011518:	f003 0310 	and.w	r3, r3, #16
 801151c:	2b00      	cmp	r3, #0
 801151e:	d008      	beq.n	8011532 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011520:	4b6b      	ldr	r3, [pc, #428]	; (80116d0 <tcp_input+0x7e8>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	4618      	mov	r0, r3
 8011526:	f7fd fe9b 	bl	800f260 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801152a:	69f8      	ldr	r0, [r7, #28]
 801152c:	f7fe fc3c 	bl	800fda8 <tcp_abort>
            goto aborted;
 8011530:	e078      	b.n	8011624 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011532:	69fb      	ldr	r3, [r7, #28]
 8011534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011538:	2b00      	cmp	r3, #0
 801153a:	d00c      	beq.n	8011556 <tcp_input+0x66e>
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011542:	69fb      	ldr	r3, [r7, #28]
 8011544:	6918      	ldr	r0, [r3, #16]
 8011546:	4b62      	ldr	r3, [pc, #392]	; (80116d0 <tcp_input+0x7e8>)
 8011548:	681a      	ldr	r2, [r3, #0]
 801154a:	2300      	movs	r3, #0
 801154c:	69f9      	ldr	r1, [r7, #28]
 801154e:	47a0      	blx	r4
 8011550:	4603      	mov	r3, r0
 8011552:	74fb      	strb	r3, [r7, #19]
 8011554:	e008      	b.n	8011568 <tcp_input+0x680>
 8011556:	4b5e      	ldr	r3, [pc, #376]	; (80116d0 <tcp_input+0x7e8>)
 8011558:	681a      	ldr	r2, [r3, #0]
 801155a:	2300      	movs	r3, #0
 801155c:	69f9      	ldr	r1, [r7, #28]
 801155e:	2000      	movs	r0, #0
 8011560:	f7ff f952 	bl	8010808 <tcp_recv_null>
 8011564:	4603      	mov	r3, r0
 8011566:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011568:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801156c:	f113 0f0d 	cmn.w	r3, #13
 8011570:	d053      	beq.n	801161a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011572:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d003      	beq.n	8011582 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801157a:	4b55      	ldr	r3, [pc, #340]	; (80116d0 <tcp_input+0x7e8>)
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	69fb      	ldr	r3, [r7, #28]
 8011580:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011582:	4b50      	ldr	r3, [pc, #320]	; (80116c4 <tcp_input+0x7dc>)
 8011584:	781b      	ldrb	r3, [r3, #0]
 8011586:	f003 0320 	and.w	r3, r3, #32
 801158a:	2b00      	cmp	r3, #0
 801158c:	d030      	beq.n	80115f0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011592:	2b00      	cmp	r3, #0
 8011594:	d009      	beq.n	80115aa <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011596:	69fb      	ldr	r3, [r7, #28]
 8011598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801159a:	7b5a      	ldrb	r2, [r3, #13]
 801159c:	69fb      	ldr	r3, [r7, #28]
 801159e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115a0:	f042 0220 	orr.w	r2, r2, #32
 80115a4:	b2d2      	uxtb	r2, r2
 80115a6:	735a      	strb	r2, [r3, #13]
 80115a8:	e022      	b.n	80115f0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80115aa:	69fb      	ldr	r3, [r7, #28]
 80115ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115ae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80115b2:	d005      	beq.n	80115c0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80115b4:	69fb      	ldr	r3, [r7, #28]
 80115b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115b8:	3301      	adds	r3, #1
 80115ba:	b29a      	uxth	r2, r3
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80115c0:	69fb      	ldr	r3, [r7, #28]
 80115c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d00b      	beq.n	80115e2 <tcp_input+0x6fa>
 80115ca:	69fb      	ldr	r3, [r7, #28]
 80115cc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80115d0:	69fb      	ldr	r3, [r7, #28]
 80115d2:	6918      	ldr	r0, [r3, #16]
 80115d4:	2300      	movs	r3, #0
 80115d6:	2200      	movs	r2, #0
 80115d8:	69f9      	ldr	r1, [r7, #28]
 80115da:	47a0      	blx	r4
 80115dc:	4603      	mov	r3, r0
 80115de:	74fb      	strb	r3, [r7, #19]
 80115e0:	e001      	b.n	80115e6 <tcp_input+0x6fe>
 80115e2:	2300      	movs	r3, #0
 80115e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80115e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80115ea:	f113 0f0d 	cmn.w	r3, #13
 80115ee:	d016      	beq.n	801161e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80115f0:	4b33      	ldr	r3, [pc, #204]	; (80116c0 <tcp_input+0x7d8>)
 80115f2:	2200      	movs	r2, #0
 80115f4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80115f6:	69f8      	ldr	r0, [r7, #28]
 80115f8:	f000 f880 	bl	80116fc <tcp_input_delayed_close>
 80115fc:	4603      	mov	r3, r0
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d10f      	bne.n	8011622 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011602:	69f8      	ldr	r0, [r7, #28]
 8011604:	f002 fab8 	bl	8013b78 <tcp_output>
 8011608:	e00c      	b.n	8011624 <tcp_input+0x73c>
        goto aborted;
 801160a:	bf00      	nop
 801160c:	e00a      	b.n	8011624 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801160e:	bf00      	nop
 8011610:	e008      	b.n	8011624 <tcp_input+0x73c>
              goto aborted;
 8011612:	bf00      	nop
 8011614:	e006      	b.n	8011624 <tcp_input+0x73c>
          goto aborted;
 8011616:	bf00      	nop
 8011618:	e004      	b.n	8011624 <tcp_input+0x73c>
            goto aborted;
 801161a:	bf00      	nop
 801161c:	e002      	b.n	8011624 <tcp_input+0x73c>
              goto aborted;
 801161e:	bf00      	nop
 8011620:	e000      	b.n	8011624 <tcp_input+0x73c>
          goto aborted;
 8011622:	bf00      	nop
    tcp_input_pcb = NULL;
 8011624:	4b26      	ldr	r3, [pc, #152]	; (80116c0 <tcp_input+0x7d8>)
 8011626:	2200      	movs	r2, #0
 8011628:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801162a:	4b29      	ldr	r3, [pc, #164]	; (80116d0 <tcp_input+0x7e8>)
 801162c:	2200      	movs	r2, #0
 801162e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011630:	4b2b      	ldr	r3, [pc, #172]	; (80116e0 <tcp_input+0x7f8>)
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d03f      	beq.n	80116b8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8011638:	4b29      	ldr	r3, [pc, #164]	; (80116e0 <tcp_input+0x7f8>)
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	4618      	mov	r0, r3
 801163e:	f7fd fe0f 	bl	800f260 <pbuf_free>
      inseg.p = NULL;
 8011642:	4b27      	ldr	r3, [pc, #156]	; (80116e0 <tcp_input+0x7f8>)
 8011644:	2200      	movs	r2, #0
 8011646:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011648:	e036      	b.n	80116b8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801164a:	4b26      	ldr	r3, [pc, #152]	; (80116e4 <tcp_input+0x7fc>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	899b      	ldrh	r3, [r3, #12]
 8011650:	b29b      	uxth	r3, r3
 8011652:	4618      	mov	r0, r3
 8011654:	f7fc fa4c 	bl	800daf0 <lwip_htons>
 8011658:	4603      	mov	r3, r0
 801165a:	b2db      	uxtb	r3, r3
 801165c:	f003 0304 	and.w	r3, r3, #4
 8011660:	2b00      	cmp	r3, #0
 8011662:	d118      	bne.n	8011696 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011664:	4b20      	ldr	r3, [pc, #128]	; (80116e8 <tcp_input+0x800>)
 8011666:	6819      	ldr	r1, [r3, #0]
 8011668:	4b20      	ldr	r3, [pc, #128]	; (80116ec <tcp_input+0x804>)
 801166a:	881b      	ldrh	r3, [r3, #0]
 801166c:	461a      	mov	r2, r3
 801166e:	4b20      	ldr	r3, [pc, #128]	; (80116f0 <tcp_input+0x808>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011674:	4b1b      	ldr	r3, [pc, #108]	; (80116e4 <tcp_input+0x7fc>)
 8011676:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011678:	885b      	ldrh	r3, [r3, #2]
 801167a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801167c:	4a19      	ldr	r2, [pc, #100]	; (80116e4 <tcp_input+0x7fc>)
 801167e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011680:	8812      	ldrh	r2, [r2, #0]
 8011682:	b292      	uxth	r2, r2
 8011684:	9202      	str	r2, [sp, #8]
 8011686:	9301      	str	r3, [sp, #4]
 8011688:	4b1a      	ldr	r3, [pc, #104]	; (80116f4 <tcp_input+0x80c>)
 801168a:	9300      	str	r3, [sp, #0]
 801168c:	4b1a      	ldr	r3, [pc, #104]	; (80116f8 <tcp_input+0x810>)
 801168e:	4602      	mov	r2, r0
 8011690:	2000      	movs	r0, #0
 8011692:	f003 f825 	bl	80146e0 <tcp_rst>
    pbuf_free(p);
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f7fd fde2 	bl	800f260 <pbuf_free>
  return;
 801169c:	e00c      	b.n	80116b8 <tcp_input+0x7d0>
    goto dropped;
 801169e:	bf00      	nop
 80116a0:	e006      	b.n	80116b0 <tcp_input+0x7c8>
    goto dropped;
 80116a2:	bf00      	nop
 80116a4:	e004      	b.n	80116b0 <tcp_input+0x7c8>
    goto dropped;
 80116a6:	bf00      	nop
 80116a8:	e002      	b.n	80116b0 <tcp_input+0x7c8>
      goto dropped;
 80116aa:	bf00      	nop
 80116ac:	e000      	b.n	80116b0 <tcp_input+0x7c8>
      goto dropped;
 80116ae:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f7fd fdd5 	bl	800f260 <pbuf_free>
 80116b6:	e000      	b.n	80116ba <tcp_input+0x7d2>
  return;
 80116b8:	bf00      	nop
}
 80116ba:	3724      	adds	r7, #36	; 0x24
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd90      	pop	{r4, r7, pc}
 80116c0:	2000f3a8 	.word	0x2000f3a8
 80116c4:	20008501 	.word	0x20008501
 80116c8:	2000f394 	.word	0x2000f394
 80116cc:	200084fc 	.word	0x200084fc
 80116d0:	20008504 	.word	0x20008504
 80116d4:	0801ce10 	.word	0x0801ce10
 80116d8:	0801cfc4 	.word	0x0801cfc4
 80116dc:	0801ce5c 	.word	0x0801ce5c
 80116e0:	200084d4 	.word	0x200084d4
 80116e4:	200084e4 	.word	0x200084e4
 80116e8:	200084f8 	.word	0x200084f8
 80116ec:	200084fe 	.word	0x200084fe
 80116f0:	200084f4 	.word	0x200084f4
 80116f4:	2000bc70 	.word	0x2000bc70
 80116f8:	2000bc74 	.word	0x2000bc74

080116fc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b082      	sub	sp, #8
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d106      	bne.n	8011718 <tcp_input_delayed_close+0x1c>
 801170a:	4b17      	ldr	r3, [pc, #92]	; (8011768 <tcp_input_delayed_close+0x6c>)
 801170c:	f240 225a 	movw	r2, #602	; 0x25a
 8011710:	4916      	ldr	r1, [pc, #88]	; (801176c <tcp_input_delayed_close+0x70>)
 8011712:	4817      	ldr	r0, [pc, #92]	; (8011770 <tcp_input_delayed_close+0x74>)
 8011714:	f008 fe9e 	bl	801a454 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011718:	4b16      	ldr	r3, [pc, #88]	; (8011774 <tcp_input_delayed_close+0x78>)
 801171a:	781b      	ldrb	r3, [r3, #0]
 801171c:	f003 0310 	and.w	r3, r3, #16
 8011720:	2b00      	cmp	r3, #0
 8011722:	d01c      	beq.n	801175e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	8b5b      	ldrh	r3, [r3, #26]
 8011728:	f003 0310 	and.w	r3, r3, #16
 801172c:	2b00      	cmp	r3, #0
 801172e:	d10d      	bne.n	801174c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011736:	2b00      	cmp	r3, #0
 8011738:	d008      	beq.n	801174c <tcp_input_delayed_close+0x50>
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	6912      	ldr	r2, [r2, #16]
 8011744:	f06f 010e 	mvn.w	r1, #14
 8011748:	4610      	mov	r0, r2
 801174a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801174c:	6879      	ldr	r1, [r7, #4]
 801174e:	480a      	ldr	r0, [pc, #40]	; (8011778 <tcp_input_delayed_close+0x7c>)
 8011750:	f7ff fa52 	bl	8010bf8 <tcp_pcb_remove>
    tcp_free(pcb);
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f7fe f83f 	bl	800f7d8 <tcp_free>
    return 1;
 801175a:	2301      	movs	r3, #1
 801175c:	e000      	b.n	8011760 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801175e:	2300      	movs	r3, #0
}
 8011760:	4618      	mov	r0, r3
 8011762:	3708      	adds	r7, #8
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	0801ce10 	.word	0x0801ce10
 801176c:	0801cfe0 	.word	0x0801cfe0
 8011770:	0801ce5c 	.word	0x0801ce5c
 8011774:	20008501 	.word	0x20008501
 8011778:	2000f394 	.word	0x2000f394

0801177c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801177c:	b590      	push	{r4, r7, lr}
 801177e:	b08b      	sub	sp, #44	; 0x2c
 8011780:	af04      	add	r7, sp, #16
 8011782:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011784:	4b6f      	ldr	r3, [pc, #444]	; (8011944 <tcp_listen_input+0x1c8>)
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	f003 0304 	and.w	r3, r3, #4
 801178c:	2b00      	cmp	r3, #0
 801178e:	f040 80d2 	bne.w	8011936 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d106      	bne.n	80117a6 <tcp_listen_input+0x2a>
 8011798:	4b6b      	ldr	r3, [pc, #428]	; (8011948 <tcp_listen_input+0x1cc>)
 801179a:	f240 2281 	movw	r2, #641	; 0x281
 801179e:	496b      	ldr	r1, [pc, #428]	; (801194c <tcp_listen_input+0x1d0>)
 80117a0:	486b      	ldr	r0, [pc, #428]	; (8011950 <tcp_listen_input+0x1d4>)
 80117a2:	f008 fe57 	bl	801a454 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80117a6:	4b67      	ldr	r3, [pc, #412]	; (8011944 <tcp_listen_input+0x1c8>)
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	f003 0310 	and.w	r3, r3, #16
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d019      	beq.n	80117e6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117b2:	4b68      	ldr	r3, [pc, #416]	; (8011954 <tcp_listen_input+0x1d8>)
 80117b4:	6819      	ldr	r1, [r3, #0]
 80117b6:	4b68      	ldr	r3, [pc, #416]	; (8011958 <tcp_listen_input+0x1dc>)
 80117b8:	881b      	ldrh	r3, [r3, #0]
 80117ba:	461a      	mov	r2, r3
 80117bc:	4b67      	ldr	r3, [pc, #412]	; (801195c <tcp_listen_input+0x1e0>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117c2:	4b67      	ldr	r3, [pc, #412]	; (8011960 <tcp_listen_input+0x1e4>)
 80117c4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117c6:	885b      	ldrh	r3, [r3, #2]
 80117c8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117ca:	4a65      	ldr	r2, [pc, #404]	; (8011960 <tcp_listen_input+0x1e4>)
 80117cc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117ce:	8812      	ldrh	r2, [r2, #0]
 80117d0:	b292      	uxth	r2, r2
 80117d2:	9202      	str	r2, [sp, #8]
 80117d4:	9301      	str	r3, [sp, #4]
 80117d6:	4b63      	ldr	r3, [pc, #396]	; (8011964 <tcp_listen_input+0x1e8>)
 80117d8:	9300      	str	r3, [sp, #0]
 80117da:	4b63      	ldr	r3, [pc, #396]	; (8011968 <tcp_listen_input+0x1ec>)
 80117dc:	4602      	mov	r2, r0
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f002 ff7e 	bl	80146e0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80117e4:	e0a9      	b.n	801193a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80117e6:	4b57      	ldr	r3, [pc, #348]	; (8011944 <tcp_listen_input+0x1c8>)
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	f003 0302 	and.w	r3, r3, #2
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	f000 80a3 	beq.w	801193a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	7d5b      	ldrb	r3, [r3, #21]
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7ff f929 	bl	8010a50 <tcp_alloc>
 80117fe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d111      	bne.n	801182a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	699b      	ldr	r3, [r3, #24]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d00a      	beq.n	8011824 <tcp_listen_input+0xa8>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	699b      	ldr	r3, [r3, #24]
 8011812:	687a      	ldr	r2, [r7, #4]
 8011814:	6910      	ldr	r0, [r2, #16]
 8011816:	f04f 32ff 	mov.w	r2, #4294967295
 801181a:	2100      	movs	r1, #0
 801181c:	4798      	blx	r3
 801181e:	4603      	mov	r3, r0
 8011820:	73bb      	strb	r3, [r7, #14]
      return;
 8011822:	e08b      	b.n	801193c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011824:	23f0      	movs	r3, #240	; 0xf0
 8011826:	73bb      	strb	r3, [r7, #14]
      return;
 8011828:	e088      	b.n	801193c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801182a:	4b50      	ldr	r3, [pc, #320]	; (801196c <tcp_listen_input+0x1f0>)
 801182c:	695a      	ldr	r2, [r3, #20]
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011832:	4b4e      	ldr	r3, [pc, #312]	; (801196c <tcp_listen_input+0x1f0>)
 8011834:	691a      	ldr	r2, [r3, #16]
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	8ada      	ldrh	r2, [r3, #22]
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011842:	4b47      	ldr	r3, [pc, #284]	; (8011960 <tcp_listen_input+0x1e4>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	881b      	ldrh	r3, [r3, #0]
 8011848:	b29a      	uxth	r2, r3
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	2203      	movs	r2, #3
 8011852:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011854:	4b41      	ldr	r3, [pc, #260]	; (801195c <tcp_listen_input+0x1e0>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	1c5a      	adds	r2, r3, #1
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011866:	6978      	ldr	r0, [r7, #20]
 8011868:	f7ff fa5a 	bl	8010d20 <tcp_next_iss>
 801186c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	693a      	ldr	r2, [r7, #16]
 8011872:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	693a      	ldr	r2, [r7, #16]
 8011878:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	693a      	ldr	r2, [r7, #16]
 801187e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	693a      	ldr	r2, [r7, #16]
 8011884:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011886:	4b35      	ldr	r3, [pc, #212]	; (801195c <tcp_listen_input+0x1e0>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	1e5a      	subs	r2, r3, #1
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	691a      	ldr	r2, [r3, #16]
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	7a5b      	ldrb	r3, [r3, #9]
 80118a2:	f003 030c 	and.w	r3, r3, #12
 80118a6:	b2da      	uxtb	r2, r3
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	7a1a      	ldrb	r2, [r3, #8]
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80118b4:	4b2e      	ldr	r3, [pc, #184]	; (8011970 <tcp_listen_input+0x1f4>)
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	60da      	str	r2, [r3, #12]
 80118bc:	4a2c      	ldr	r2, [pc, #176]	; (8011970 <tcp_listen_input+0x1f4>)
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	6013      	str	r3, [r2, #0]
 80118c2:	f003 f8cf 	bl	8014a64 <tcp_timer_needed>
 80118c6:	4b2b      	ldr	r3, [pc, #172]	; (8011974 <tcp_listen_input+0x1f8>)
 80118c8:	2201      	movs	r2, #1
 80118ca:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80118cc:	6978      	ldr	r0, [r7, #20]
 80118ce:	f001 fd8d 	bl	80133ec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80118d2:	4b23      	ldr	r3, [pc, #140]	; (8011960 <tcp_listen_input+0x1e4>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	89db      	ldrh	r3, [r3, #14]
 80118d8:	b29a      	uxth	r2, r3
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	3304      	adds	r3, #4
 80118f4:	4618      	mov	r0, r3
 80118f6:	f006 fe5b 	bl	80185b0 <ip4_route>
 80118fa:	4601      	mov	r1, r0
 80118fc:	697b      	ldr	r3, [r7, #20]
 80118fe:	3304      	adds	r3, #4
 8011900:	461a      	mov	r2, r3
 8011902:	4620      	mov	r0, r4
 8011904:	f7ff fa32 	bl	8010d6c <tcp_eff_send_mss_netif>
 8011908:	4603      	mov	r3, r0
 801190a:	461a      	mov	r2, r3
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011910:	2112      	movs	r1, #18
 8011912:	6978      	ldr	r0, [r7, #20]
 8011914:	f002 f842 	bl	801399c <tcp_enqueue_flags>
 8011918:	4603      	mov	r3, r0
 801191a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801191c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d004      	beq.n	801192e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011924:	2100      	movs	r1, #0
 8011926:	6978      	ldr	r0, [r7, #20]
 8011928:	f7fe f980 	bl	800fc2c <tcp_abandon>
      return;
 801192c:	e006      	b.n	801193c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801192e:	6978      	ldr	r0, [r7, #20]
 8011930:	f002 f922 	bl	8013b78 <tcp_output>
  return;
 8011934:	e001      	b.n	801193a <tcp_listen_input+0x1be>
    return;
 8011936:	bf00      	nop
 8011938:	e000      	b.n	801193c <tcp_listen_input+0x1c0>
  return;
 801193a:	bf00      	nop
}
 801193c:	371c      	adds	r7, #28
 801193e:	46bd      	mov	sp, r7
 8011940:	bd90      	pop	{r4, r7, pc}
 8011942:	bf00      	nop
 8011944:	20008500 	.word	0x20008500
 8011948:	0801ce10 	.word	0x0801ce10
 801194c:	0801d008 	.word	0x0801d008
 8011950:	0801ce5c 	.word	0x0801ce5c
 8011954:	200084f8 	.word	0x200084f8
 8011958:	200084fe 	.word	0x200084fe
 801195c:	200084f4 	.word	0x200084f4
 8011960:	200084e4 	.word	0x200084e4
 8011964:	2000bc70 	.word	0x2000bc70
 8011968:	2000bc74 	.word	0x2000bc74
 801196c:	2000bc60 	.word	0x2000bc60
 8011970:	2000f394 	.word	0x2000f394
 8011974:	2000f390 	.word	0x2000f390

08011978 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b086      	sub	sp, #24
 801197c:	af04      	add	r7, sp, #16
 801197e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011980:	4b2f      	ldr	r3, [pc, #188]	; (8011a40 <tcp_timewait_input+0xc8>)
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	f003 0304 	and.w	r3, r3, #4
 8011988:	2b00      	cmp	r3, #0
 801198a:	d153      	bne.n	8011a34 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d106      	bne.n	80119a0 <tcp_timewait_input+0x28>
 8011992:	4b2c      	ldr	r3, [pc, #176]	; (8011a44 <tcp_timewait_input+0xcc>)
 8011994:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011998:	492b      	ldr	r1, [pc, #172]	; (8011a48 <tcp_timewait_input+0xd0>)
 801199a:	482c      	ldr	r0, [pc, #176]	; (8011a4c <tcp_timewait_input+0xd4>)
 801199c:	f008 fd5a 	bl	801a454 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80119a0:	4b27      	ldr	r3, [pc, #156]	; (8011a40 <tcp_timewait_input+0xc8>)
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	f003 0302 	and.w	r3, r3, #2
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d02a      	beq.n	8011a02 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80119ac:	4b28      	ldr	r3, [pc, #160]	; (8011a50 <tcp_timewait_input+0xd8>)
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119b4:	1ad3      	subs	r3, r2, r3
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	db2d      	blt.n	8011a16 <tcp_timewait_input+0x9e>
 80119ba:	4b25      	ldr	r3, [pc, #148]	; (8011a50 <tcp_timewait_input+0xd8>)
 80119bc:	681a      	ldr	r2, [r3, #0]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119c2:	6879      	ldr	r1, [r7, #4]
 80119c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80119c6:	440b      	add	r3, r1
 80119c8:	1ad3      	subs	r3, r2, r3
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	dc23      	bgt.n	8011a16 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119ce:	4b21      	ldr	r3, [pc, #132]	; (8011a54 <tcp_timewait_input+0xdc>)
 80119d0:	6819      	ldr	r1, [r3, #0]
 80119d2:	4b21      	ldr	r3, [pc, #132]	; (8011a58 <tcp_timewait_input+0xe0>)
 80119d4:	881b      	ldrh	r3, [r3, #0]
 80119d6:	461a      	mov	r2, r3
 80119d8:	4b1d      	ldr	r3, [pc, #116]	; (8011a50 <tcp_timewait_input+0xd8>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80119de:	4b1f      	ldr	r3, [pc, #124]	; (8011a5c <tcp_timewait_input+0xe4>)
 80119e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119e2:	885b      	ldrh	r3, [r3, #2]
 80119e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80119e6:	4a1d      	ldr	r2, [pc, #116]	; (8011a5c <tcp_timewait_input+0xe4>)
 80119e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119ea:	8812      	ldrh	r2, [r2, #0]
 80119ec:	b292      	uxth	r2, r2
 80119ee:	9202      	str	r2, [sp, #8]
 80119f0:	9301      	str	r3, [sp, #4]
 80119f2:	4b1b      	ldr	r3, [pc, #108]	; (8011a60 <tcp_timewait_input+0xe8>)
 80119f4:	9300      	str	r3, [sp, #0]
 80119f6:	4b1b      	ldr	r3, [pc, #108]	; (8011a64 <tcp_timewait_input+0xec>)
 80119f8:	4602      	mov	r2, r0
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f002 fe70 	bl	80146e0 <tcp_rst>
      return;
 8011a00:	e01b      	b.n	8011a3a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011a02:	4b0f      	ldr	r3, [pc, #60]	; (8011a40 <tcp_timewait_input+0xc8>)
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	f003 0301 	and.w	r3, r3, #1
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d003      	beq.n	8011a16 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011a0e:	4b16      	ldr	r3, [pc, #88]	; (8011a68 <tcp_timewait_input+0xf0>)
 8011a10:	681a      	ldr	r2, [r3, #0]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011a16:	4b10      	ldr	r3, [pc, #64]	; (8011a58 <tcp_timewait_input+0xe0>)
 8011a18:	881b      	ldrh	r3, [r3, #0]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d00c      	beq.n	8011a38 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	8b5b      	ldrh	r3, [r3, #26]
 8011a22:	f043 0302 	orr.w	r3, r3, #2
 8011a26:	b29a      	uxth	r2, r3
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f002 f8a3 	bl	8013b78 <tcp_output>
  }
  return;
 8011a32:	e001      	b.n	8011a38 <tcp_timewait_input+0xc0>
    return;
 8011a34:	bf00      	nop
 8011a36:	e000      	b.n	8011a3a <tcp_timewait_input+0xc2>
  return;
 8011a38:	bf00      	nop
}
 8011a3a:	3708      	adds	r7, #8
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}
 8011a40:	20008500 	.word	0x20008500
 8011a44:	0801ce10 	.word	0x0801ce10
 8011a48:	0801d028 	.word	0x0801d028
 8011a4c:	0801ce5c 	.word	0x0801ce5c
 8011a50:	200084f4 	.word	0x200084f4
 8011a54:	200084f8 	.word	0x200084f8
 8011a58:	200084fe 	.word	0x200084fe
 8011a5c:	200084e4 	.word	0x200084e4
 8011a60:	2000bc70 	.word	0x2000bc70
 8011a64:	2000bc74 	.word	0x2000bc74
 8011a68:	2000f398 	.word	0x2000f398

08011a6c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011a6c:	b590      	push	{r4, r7, lr}
 8011a6e:	b08d      	sub	sp, #52	; 0x34
 8011a70:	af04      	add	r7, sp, #16
 8011a72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011a74:	2300      	movs	r3, #0
 8011a76:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d106      	bne.n	8011a90 <tcp_process+0x24>
 8011a82:	4ba5      	ldr	r3, [pc, #660]	; (8011d18 <tcp_process+0x2ac>)
 8011a84:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011a88:	49a4      	ldr	r1, [pc, #656]	; (8011d1c <tcp_process+0x2b0>)
 8011a8a:	48a5      	ldr	r0, [pc, #660]	; (8011d20 <tcp_process+0x2b4>)
 8011a8c:	f008 fce2 	bl	801a454 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011a90:	4ba4      	ldr	r3, [pc, #656]	; (8011d24 <tcp_process+0x2b8>)
 8011a92:	781b      	ldrb	r3, [r3, #0]
 8011a94:	f003 0304 	and.w	r3, r3, #4
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d04e      	beq.n	8011b3a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	7d1b      	ldrb	r3, [r3, #20]
 8011aa0:	2b02      	cmp	r3, #2
 8011aa2:	d108      	bne.n	8011ab6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011aa8:	4b9f      	ldr	r3, [pc, #636]	; (8011d28 <tcp_process+0x2bc>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d123      	bne.n	8011af8 <tcp_process+0x8c>
        acceptable = 1;
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	76fb      	strb	r3, [r7, #27]
 8011ab4:	e020      	b.n	8011af8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011aba:	4b9c      	ldr	r3, [pc, #624]	; (8011d2c <tcp_process+0x2c0>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d102      	bne.n	8011ac8 <tcp_process+0x5c>
        acceptable = 1;
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	76fb      	strb	r3, [r7, #27]
 8011ac6:	e017      	b.n	8011af8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011ac8:	4b98      	ldr	r3, [pc, #608]	; (8011d2c <tcp_process+0x2c0>)
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ad0:	1ad3      	subs	r3, r2, r3
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	db10      	blt.n	8011af8 <tcp_process+0x8c>
 8011ad6:	4b95      	ldr	r3, [pc, #596]	; (8011d2c <tcp_process+0x2c0>)
 8011ad8:	681a      	ldr	r2, [r3, #0]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ade:	6879      	ldr	r1, [r7, #4]
 8011ae0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011ae2:	440b      	add	r3, r1
 8011ae4:	1ad3      	subs	r3, r2, r3
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	dc06      	bgt.n	8011af8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	8b5b      	ldrh	r3, [r3, #26]
 8011aee:	f043 0302 	orr.w	r3, r3, #2
 8011af2:	b29a      	uxth	r2, r3
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011af8:	7efb      	ldrb	r3, [r7, #27]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d01b      	beq.n	8011b36 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	7d1b      	ldrb	r3, [r3, #20]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d106      	bne.n	8011b14 <tcp_process+0xa8>
 8011b06:	4b84      	ldr	r3, [pc, #528]	; (8011d18 <tcp_process+0x2ac>)
 8011b08:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011b0c:	4988      	ldr	r1, [pc, #544]	; (8011d30 <tcp_process+0x2c4>)
 8011b0e:	4884      	ldr	r0, [pc, #528]	; (8011d20 <tcp_process+0x2b4>)
 8011b10:	f008 fca0 	bl	801a454 <iprintf>
      recv_flags |= TF_RESET;
 8011b14:	4b87      	ldr	r3, [pc, #540]	; (8011d34 <tcp_process+0x2c8>)
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	f043 0308 	orr.w	r3, r3, #8
 8011b1c:	b2da      	uxtb	r2, r3
 8011b1e:	4b85      	ldr	r3, [pc, #532]	; (8011d34 <tcp_process+0x2c8>)
 8011b20:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	8b5b      	ldrh	r3, [r3, #26]
 8011b26:	f023 0301 	bic.w	r3, r3, #1
 8011b2a:	b29a      	uxth	r2, r3
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011b30:	f06f 030d 	mvn.w	r3, #13
 8011b34:	e37a      	b.n	801222c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011b36:	2300      	movs	r3, #0
 8011b38:	e378      	b.n	801222c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011b3a:	4b7a      	ldr	r3, [pc, #488]	; (8011d24 <tcp_process+0x2b8>)
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	f003 0302 	and.w	r3, r3, #2
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d010      	beq.n	8011b68 <tcp_process+0xfc>
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	7d1b      	ldrb	r3, [r3, #20]
 8011b4a:	2b02      	cmp	r3, #2
 8011b4c:	d00c      	beq.n	8011b68 <tcp_process+0xfc>
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	7d1b      	ldrb	r3, [r3, #20]
 8011b52:	2b03      	cmp	r3, #3
 8011b54:	d008      	beq.n	8011b68 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	8b5b      	ldrh	r3, [r3, #26]
 8011b5a:	f043 0302 	orr.w	r3, r3, #2
 8011b5e:	b29a      	uxth	r2, r3
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011b64:	2300      	movs	r3, #0
 8011b66:	e361      	b.n	801222c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	8b5b      	ldrh	r3, [r3, #26]
 8011b6c:	f003 0310 	and.w	r3, r3, #16
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d103      	bne.n	8011b7c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011b74:	4b70      	ldr	r3, [pc, #448]	; (8011d38 <tcp_process+0x2cc>)
 8011b76:	681a      	ldr	r2, [r3, #0]
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	2200      	movs	r2, #0
 8011b80:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2200      	movs	r2, #0
 8011b88:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011b8c:	6878      	ldr	r0, [r7, #4]
 8011b8e:	f001 fc2d 	bl	80133ec <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	7d1b      	ldrb	r3, [r3, #20]
 8011b96:	3b02      	subs	r3, #2
 8011b98:	2b07      	cmp	r3, #7
 8011b9a:	f200 8337 	bhi.w	801220c <tcp_process+0x7a0>
 8011b9e:	a201      	add	r2, pc, #4	; (adr r2, 8011ba4 <tcp_process+0x138>)
 8011ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ba4:	08011bc5 	.word	0x08011bc5
 8011ba8:	08011df5 	.word	0x08011df5
 8011bac:	08011f6d 	.word	0x08011f6d
 8011bb0:	08011f97 	.word	0x08011f97
 8011bb4:	080120bb 	.word	0x080120bb
 8011bb8:	08011f6d 	.word	0x08011f6d
 8011bbc:	08012147 	.word	0x08012147
 8011bc0:	080121d7 	.word	0x080121d7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011bc4:	4b57      	ldr	r3, [pc, #348]	; (8011d24 <tcp_process+0x2b8>)
 8011bc6:	781b      	ldrb	r3, [r3, #0]
 8011bc8:	f003 0310 	and.w	r3, r3, #16
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	f000 80e4 	beq.w	8011d9a <tcp_process+0x32e>
 8011bd2:	4b54      	ldr	r3, [pc, #336]	; (8011d24 <tcp_process+0x2b8>)
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	f003 0302 	and.w	r3, r3, #2
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	f000 80dd 	beq.w	8011d9a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011be4:	1c5a      	adds	r2, r3, #1
 8011be6:	4b50      	ldr	r3, [pc, #320]	; (8011d28 <tcp_process+0x2bc>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	f040 80d5 	bne.w	8011d9a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011bf0:	4b4e      	ldr	r3, [pc, #312]	; (8011d2c <tcp_process+0x2c0>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	1c5a      	adds	r2, r3, #1
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011c02:	4b49      	ldr	r3, [pc, #292]	; (8011d28 <tcp_process+0x2bc>)
 8011c04:	681a      	ldr	r2, [r3, #0]
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011c0a:	4b4c      	ldr	r3, [pc, #304]	; (8011d3c <tcp_process+0x2d0>)
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	89db      	ldrh	r3, [r3, #14]
 8011c10:	b29a      	uxth	r2, r3
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011c24:	4b41      	ldr	r3, [pc, #260]	; (8011d2c <tcp_process+0x2c0>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	1e5a      	subs	r2, r3, #1
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2204      	movs	r2, #4
 8011c32:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	3304      	adds	r3, #4
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f006 fcb7 	bl	80185b0 <ip4_route>
 8011c42:	4601      	mov	r1, r0
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	3304      	adds	r3, #4
 8011c48:	461a      	mov	r2, r3
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	f7ff f88e 	bl	8010d6c <tcp_eff_send_mss_netif>
 8011c50:	4603      	mov	r3, r0
 8011c52:	461a      	mov	r2, r3
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c5c:	009a      	lsls	r2, r3, #2
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c62:	005b      	lsls	r3, r3, #1
 8011c64:	f241 111c 	movw	r1, #4380	; 0x111c
 8011c68:	428b      	cmp	r3, r1
 8011c6a:	bf38      	it	cc
 8011c6c:	460b      	movcc	r3, r1
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d204      	bcs.n	8011c7c <tcp_process+0x210>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c76:	009b      	lsls	r3, r3, #2
 8011c78:	b29b      	uxth	r3, r3
 8011c7a:	e00d      	b.n	8011c98 <tcp_process+0x22c>
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c80:	005b      	lsls	r3, r3, #1
 8011c82:	f241 121c 	movw	r2, #4380	; 0x111c
 8011c86:	4293      	cmp	r3, r2
 8011c88:	d904      	bls.n	8011c94 <tcp_process+0x228>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c8e:	005b      	lsls	r3, r3, #1
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	e001      	b.n	8011c98 <tcp_process+0x22c>
 8011c94:	f241 131c 	movw	r3, #4380	; 0x111c
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d106      	bne.n	8011cb6 <tcp_process+0x24a>
 8011ca8:	4b1b      	ldr	r3, [pc, #108]	; (8011d18 <tcp_process+0x2ac>)
 8011caa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011cae:	4924      	ldr	r1, [pc, #144]	; (8011d40 <tcp_process+0x2d4>)
 8011cb0:	481b      	ldr	r0, [pc, #108]	; (8011d20 <tcp_process+0x2b4>)
 8011cb2:	f008 fbcf 	bl	801a454 <iprintf>
        --pcb->snd_queuelen;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cbc:	3b01      	subs	r3, #1
 8011cbe:	b29a      	uxth	r2, r3
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cca:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011ccc:	69fb      	ldr	r3, [r7, #28]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d111      	bne.n	8011cf6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cd6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011cd8:	69fb      	ldr	r3, [r7, #28]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d106      	bne.n	8011cec <tcp_process+0x280>
 8011cde:	4b0e      	ldr	r3, [pc, #56]	; (8011d18 <tcp_process+0x2ac>)
 8011ce0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011ce4:	4917      	ldr	r1, [pc, #92]	; (8011d44 <tcp_process+0x2d8>)
 8011ce6:	480e      	ldr	r0, [pc, #56]	; (8011d20 <tcp_process+0x2b4>)
 8011ce8:	f008 fbb4 	bl	801a454 <iprintf>
          pcb->unsent = rseg->next;
 8011cec:	69fb      	ldr	r3, [r7, #28]
 8011cee:	681a      	ldr	r2, [r3, #0]
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	66da      	str	r2, [r3, #108]	; 0x6c
 8011cf4:	e003      	b.n	8011cfe <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8011cf6:	69fb      	ldr	r3, [r7, #28]
 8011cf8:	681a      	ldr	r2, [r3, #0]
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011cfe:	69f8      	ldr	r0, [r7, #28]
 8011d00:	f7fe fd3d 	bl	801077e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d11d      	bne.n	8011d48 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d12:	861a      	strh	r2, [r3, #48]	; 0x30
 8011d14:	e01f      	b.n	8011d56 <tcp_process+0x2ea>
 8011d16:	bf00      	nop
 8011d18:	0801ce10 	.word	0x0801ce10
 8011d1c:	0801d048 	.word	0x0801d048
 8011d20:	0801ce5c 	.word	0x0801ce5c
 8011d24:	20008500 	.word	0x20008500
 8011d28:	200084f8 	.word	0x200084f8
 8011d2c:	200084f4 	.word	0x200084f4
 8011d30:	0801d064 	.word	0x0801d064
 8011d34:	20008501 	.word	0x20008501
 8011d38:	2000f398 	.word	0x2000f398
 8011d3c:	200084e4 	.word	0x200084e4
 8011d40:	0801d084 	.word	0x0801d084
 8011d44:	0801d09c 	.word	0x0801d09c
        } else {
          pcb->rtime = 0;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2200      	movs	r2, #0
 8011d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d00a      	beq.n	8011d76 <tcp_process+0x30a>
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d66:	687a      	ldr	r2, [r7, #4]
 8011d68:	6910      	ldr	r0, [r2, #16]
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	6879      	ldr	r1, [r7, #4]
 8011d6e:	4798      	blx	r3
 8011d70:	4603      	mov	r3, r0
 8011d72:	76bb      	strb	r3, [r7, #26]
 8011d74:	e001      	b.n	8011d7a <tcp_process+0x30e>
 8011d76:	2300      	movs	r3, #0
 8011d78:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011d7a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011d7e:	f113 0f0d 	cmn.w	r3, #13
 8011d82:	d102      	bne.n	8011d8a <tcp_process+0x31e>
          return ERR_ABRT;
 8011d84:	f06f 030c 	mvn.w	r3, #12
 8011d88:	e250      	b.n	801222c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	8b5b      	ldrh	r3, [r3, #26]
 8011d8e:	f043 0302 	orr.w	r3, r3, #2
 8011d92:	b29a      	uxth	r2, r3
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011d98:	e23a      	b.n	8012210 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011d9a:	4b9d      	ldr	r3, [pc, #628]	; (8012010 <tcp_process+0x5a4>)
 8011d9c:	781b      	ldrb	r3, [r3, #0]
 8011d9e:	f003 0310 	and.w	r3, r3, #16
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	f000 8234 	beq.w	8012210 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011da8:	4b9a      	ldr	r3, [pc, #616]	; (8012014 <tcp_process+0x5a8>)
 8011daa:	6819      	ldr	r1, [r3, #0]
 8011dac:	4b9a      	ldr	r3, [pc, #616]	; (8012018 <tcp_process+0x5ac>)
 8011dae:	881b      	ldrh	r3, [r3, #0]
 8011db0:	461a      	mov	r2, r3
 8011db2:	4b9a      	ldr	r3, [pc, #616]	; (801201c <tcp_process+0x5b0>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011db8:	4b99      	ldr	r3, [pc, #612]	; (8012020 <tcp_process+0x5b4>)
 8011dba:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011dbc:	885b      	ldrh	r3, [r3, #2]
 8011dbe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011dc0:	4a97      	ldr	r2, [pc, #604]	; (8012020 <tcp_process+0x5b4>)
 8011dc2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011dc4:	8812      	ldrh	r2, [r2, #0]
 8011dc6:	b292      	uxth	r2, r2
 8011dc8:	9202      	str	r2, [sp, #8]
 8011dca:	9301      	str	r3, [sp, #4]
 8011dcc:	4b95      	ldr	r3, [pc, #596]	; (8012024 <tcp_process+0x5b8>)
 8011dce:	9300      	str	r3, [sp, #0]
 8011dd0:	4b95      	ldr	r3, [pc, #596]	; (8012028 <tcp_process+0x5bc>)
 8011dd2:	4602      	mov	r2, r0
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f002 fc83 	bl	80146e0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011de0:	2b05      	cmp	r3, #5
 8011de2:	f200 8215 	bhi.w	8012210 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	2200      	movs	r2, #0
 8011dea:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f002 fa4d 	bl	801428c <tcp_rexmit_rto>
      break;
 8011df2:	e20d      	b.n	8012210 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011df4:	4b86      	ldr	r3, [pc, #536]	; (8012010 <tcp_process+0x5a4>)
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	f003 0310 	and.w	r3, r3, #16
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	f000 80a1 	beq.w	8011f44 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011e02:	4b84      	ldr	r3, [pc, #528]	; (8012014 <tcp_process+0x5a8>)
 8011e04:	681a      	ldr	r2, [r3, #0]
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e0a:	1ad3      	subs	r3, r2, r3
 8011e0c:	3b01      	subs	r3, #1
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	db7e      	blt.n	8011f10 <tcp_process+0x4a4>
 8011e12:	4b80      	ldr	r3, [pc, #512]	; (8012014 <tcp_process+0x5a8>)
 8011e14:	681a      	ldr	r2, [r3, #0]
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e1a:	1ad3      	subs	r3, r2, r3
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	dc77      	bgt.n	8011f10 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2204      	movs	r2, #4
 8011e24:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d102      	bne.n	8011e34 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011e2e:	23fa      	movs	r3, #250	; 0xfa
 8011e30:	76bb      	strb	r3, [r7, #26]
 8011e32:	e01d      	b.n	8011e70 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e38:	699b      	ldr	r3, [r3, #24]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d106      	bne.n	8011e4c <tcp_process+0x3e0>
 8011e3e:	4b7b      	ldr	r3, [pc, #492]	; (801202c <tcp_process+0x5c0>)
 8011e40:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011e44:	497a      	ldr	r1, [pc, #488]	; (8012030 <tcp_process+0x5c4>)
 8011e46:	487b      	ldr	r0, [pc, #492]	; (8012034 <tcp_process+0x5c8>)
 8011e48:	f008 fb04 	bl	801a454 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e50:	699b      	ldr	r3, [r3, #24]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d00a      	beq.n	8011e6c <tcp_process+0x400>
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e5a:	699b      	ldr	r3, [r3, #24]
 8011e5c:	687a      	ldr	r2, [r7, #4]
 8011e5e:	6910      	ldr	r0, [r2, #16]
 8011e60:	2200      	movs	r2, #0
 8011e62:	6879      	ldr	r1, [r7, #4]
 8011e64:	4798      	blx	r3
 8011e66:	4603      	mov	r3, r0
 8011e68:	76bb      	strb	r3, [r7, #26]
 8011e6a:	e001      	b.n	8011e70 <tcp_process+0x404>
 8011e6c:	23f0      	movs	r3, #240	; 0xf0
 8011e6e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011e70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d00a      	beq.n	8011e8e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011e78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011e7c:	f113 0f0d 	cmn.w	r3, #13
 8011e80:	d002      	beq.n	8011e88 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f7fd ff90 	bl	800fda8 <tcp_abort>
            }
            return ERR_ABRT;
 8011e88:	f06f 030c 	mvn.w	r3, #12
 8011e8c:	e1ce      	b.n	801222c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f000 fae0 	bl	8012454 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011e94:	4b68      	ldr	r3, [pc, #416]	; (8012038 <tcp_process+0x5cc>)
 8011e96:	881b      	ldrh	r3, [r3, #0]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d005      	beq.n	8011ea8 <tcp_process+0x43c>
            recv_acked--;
 8011e9c:	4b66      	ldr	r3, [pc, #408]	; (8012038 <tcp_process+0x5cc>)
 8011e9e:	881b      	ldrh	r3, [r3, #0]
 8011ea0:	3b01      	subs	r3, #1
 8011ea2:	b29a      	uxth	r2, r3
 8011ea4:	4b64      	ldr	r3, [pc, #400]	; (8012038 <tcp_process+0x5cc>)
 8011ea6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011eac:	009a      	lsls	r2, r3, #2
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011eb2:	005b      	lsls	r3, r3, #1
 8011eb4:	f241 111c 	movw	r1, #4380	; 0x111c
 8011eb8:	428b      	cmp	r3, r1
 8011eba:	bf38      	it	cc
 8011ebc:	460b      	movcc	r3, r1
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d204      	bcs.n	8011ecc <tcp_process+0x460>
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ec6:	009b      	lsls	r3, r3, #2
 8011ec8:	b29b      	uxth	r3, r3
 8011eca:	e00d      	b.n	8011ee8 <tcp_process+0x47c>
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ed0:	005b      	lsls	r3, r3, #1
 8011ed2:	f241 121c 	movw	r2, #4380	; 0x111c
 8011ed6:	4293      	cmp	r3, r2
 8011ed8:	d904      	bls.n	8011ee4 <tcp_process+0x478>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ede:	005b      	lsls	r3, r3, #1
 8011ee0:	b29b      	uxth	r3, r3
 8011ee2:	e001      	b.n	8011ee8 <tcp_process+0x47c>
 8011ee4:	f241 131c 	movw	r3, #4380	; 0x111c
 8011ee8:	687a      	ldr	r2, [r7, #4]
 8011eea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011eee:	4b53      	ldr	r3, [pc, #332]	; (801203c <tcp_process+0x5d0>)
 8011ef0:	781b      	ldrb	r3, [r3, #0]
 8011ef2:	f003 0320 	and.w	r3, r3, #32
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d037      	beq.n	8011f6a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	8b5b      	ldrh	r3, [r3, #26]
 8011efe:	f043 0302 	orr.w	r3, r3, #2
 8011f02:	b29a      	uxth	r2, r3
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2207      	movs	r2, #7
 8011f0c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011f0e:	e02c      	b.n	8011f6a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f10:	4b40      	ldr	r3, [pc, #256]	; (8012014 <tcp_process+0x5a8>)
 8011f12:	6819      	ldr	r1, [r3, #0]
 8011f14:	4b40      	ldr	r3, [pc, #256]	; (8012018 <tcp_process+0x5ac>)
 8011f16:	881b      	ldrh	r3, [r3, #0]
 8011f18:	461a      	mov	r2, r3
 8011f1a:	4b40      	ldr	r3, [pc, #256]	; (801201c <tcp_process+0x5b0>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f20:	4b3f      	ldr	r3, [pc, #252]	; (8012020 <tcp_process+0x5b4>)
 8011f22:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f24:	885b      	ldrh	r3, [r3, #2]
 8011f26:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f28:	4a3d      	ldr	r2, [pc, #244]	; (8012020 <tcp_process+0x5b4>)
 8011f2a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f2c:	8812      	ldrh	r2, [r2, #0]
 8011f2e:	b292      	uxth	r2, r2
 8011f30:	9202      	str	r2, [sp, #8]
 8011f32:	9301      	str	r3, [sp, #4]
 8011f34:	4b3b      	ldr	r3, [pc, #236]	; (8012024 <tcp_process+0x5b8>)
 8011f36:	9300      	str	r3, [sp, #0]
 8011f38:	4b3b      	ldr	r3, [pc, #236]	; (8012028 <tcp_process+0x5bc>)
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f002 fbcf 	bl	80146e0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011f42:	e167      	b.n	8012214 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011f44:	4b32      	ldr	r3, [pc, #200]	; (8012010 <tcp_process+0x5a4>)
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	f003 0302 	and.w	r3, r3, #2
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	f000 8161 	beq.w	8012214 <tcp_process+0x7a8>
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f56:	1e5a      	subs	r2, r3, #1
 8011f58:	4b30      	ldr	r3, [pc, #192]	; (801201c <tcp_process+0x5b0>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	f040 8159 	bne.w	8012214 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f002 f9b4 	bl	80142d0 <tcp_rexmit>
      break;
 8011f68:	e154      	b.n	8012214 <tcp_process+0x7a8>
 8011f6a:	e153      	b.n	8012214 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f000 fa71 	bl	8012454 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011f72:	4b32      	ldr	r3, [pc, #200]	; (801203c <tcp_process+0x5d0>)
 8011f74:	781b      	ldrb	r3, [r3, #0]
 8011f76:	f003 0320 	and.w	r3, r3, #32
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	f000 814c 	beq.w	8012218 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	8b5b      	ldrh	r3, [r3, #26]
 8011f84:	f043 0302 	orr.w	r3, r3, #2
 8011f88:	b29a      	uxth	r2, r3
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2207      	movs	r2, #7
 8011f92:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011f94:	e140      	b.n	8012218 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f000 fa5c 	bl	8012454 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011f9c:	4b27      	ldr	r3, [pc, #156]	; (801203c <tcp_process+0x5d0>)
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	f003 0320 	and.w	r3, r3, #32
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d071      	beq.n	801208c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011fa8:	4b19      	ldr	r3, [pc, #100]	; (8012010 <tcp_process+0x5a4>)
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	f003 0310 	and.w	r3, r3, #16
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d060      	beq.n	8012076 <tcp_process+0x60a>
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011fb8:	4b16      	ldr	r3, [pc, #88]	; (8012014 <tcp_process+0x5a8>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d15a      	bne.n	8012076 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d156      	bne.n	8012076 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	8b5b      	ldrh	r3, [r3, #26]
 8011fcc:	f043 0302 	orr.w	r3, r3, #2
 8011fd0:	b29a      	uxth	r2, r3
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f7fe fdbe 	bl	8010b58 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011fdc:	4b18      	ldr	r3, [pc, #96]	; (8012040 <tcp_process+0x5d4>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	687a      	ldr	r2, [r7, #4]
 8011fe2:	429a      	cmp	r2, r3
 8011fe4:	d105      	bne.n	8011ff2 <tcp_process+0x586>
 8011fe6:	4b16      	ldr	r3, [pc, #88]	; (8012040 <tcp_process+0x5d4>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	4a14      	ldr	r2, [pc, #80]	; (8012040 <tcp_process+0x5d4>)
 8011fee:	6013      	str	r3, [r2, #0]
 8011ff0:	e02e      	b.n	8012050 <tcp_process+0x5e4>
 8011ff2:	4b13      	ldr	r3, [pc, #76]	; (8012040 <tcp_process+0x5d4>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	617b      	str	r3, [r7, #20]
 8011ff8:	e027      	b.n	801204a <tcp_process+0x5de>
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	68db      	ldr	r3, [r3, #12]
 8011ffe:	687a      	ldr	r2, [r7, #4]
 8012000:	429a      	cmp	r2, r3
 8012002:	d11f      	bne.n	8012044 <tcp_process+0x5d8>
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	68da      	ldr	r2, [r3, #12]
 8012008:	697b      	ldr	r3, [r7, #20]
 801200a:	60da      	str	r2, [r3, #12]
 801200c:	e020      	b.n	8012050 <tcp_process+0x5e4>
 801200e:	bf00      	nop
 8012010:	20008500 	.word	0x20008500
 8012014:	200084f8 	.word	0x200084f8
 8012018:	200084fe 	.word	0x200084fe
 801201c:	200084f4 	.word	0x200084f4
 8012020:	200084e4 	.word	0x200084e4
 8012024:	2000bc70 	.word	0x2000bc70
 8012028:	2000bc74 	.word	0x2000bc74
 801202c:	0801ce10 	.word	0x0801ce10
 8012030:	0801d0b0 	.word	0x0801d0b0
 8012034:	0801ce5c 	.word	0x0801ce5c
 8012038:	200084fc 	.word	0x200084fc
 801203c:	20008501 	.word	0x20008501
 8012040:	2000f394 	.word	0x2000f394
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	617b      	str	r3, [r7, #20]
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d1d4      	bne.n	8011ffa <tcp_process+0x58e>
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2200      	movs	r2, #0
 8012054:	60da      	str	r2, [r3, #12]
 8012056:	4b77      	ldr	r3, [pc, #476]	; (8012234 <tcp_process+0x7c8>)
 8012058:	2201      	movs	r2, #1
 801205a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	220a      	movs	r2, #10
 8012060:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012062:	4b75      	ldr	r3, [pc, #468]	; (8012238 <tcp_process+0x7cc>)
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	60da      	str	r2, [r3, #12]
 801206a:	4a73      	ldr	r2, [pc, #460]	; (8012238 <tcp_process+0x7cc>)
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6013      	str	r3, [r2, #0]
 8012070:	f002 fcf8 	bl	8014a64 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012074:	e0d2      	b.n	801221c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	8b5b      	ldrh	r3, [r3, #26]
 801207a:	f043 0302 	orr.w	r3, r3, #2
 801207e:	b29a      	uxth	r2, r3
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2208      	movs	r2, #8
 8012088:	751a      	strb	r2, [r3, #20]
      break;
 801208a:	e0c7      	b.n	801221c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801208c:	4b6b      	ldr	r3, [pc, #428]	; (801223c <tcp_process+0x7d0>)
 801208e:	781b      	ldrb	r3, [r3, #0]
 8012090:	f003 0310 	and.w	r3, r3, #16
 8012094:	2b00      	cmp	r3, #0
 8012096:	f000 80c1 	beq.w	801221c <tcp_process+0x7b0>
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801209e:	4b68      	ldr	r3, [pc, #416]	; (8012240 <tcp_process+0x7d4>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	429a      	cmp	r2, r3
 80120a4:	f040 80ba 	bne.w	801221c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	f040 80b5 	bne.w	801221c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2206      	movs	r2, #6
 80120b6:	751a      	strb	r2, [r3, #20]
      break;
 80120b8:	e0b0      	b.n	801221c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f000 f9ca 	bl	8012454 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80120c0:	4b60      	ldr	r3, [pc, #384]	; (8012244 <tcp_process+0x7d8>)
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	f003 0320 	and.w	r3, r3, #32
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	f000 80a9 	beq.w	8012220 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	8b5b      	ldrh	r3, [r3, #26]
 80120d2:	f043 0302 	orr.w	r3, r3, #2
 80120d6:	b29a      	uxth	r2, r3
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f7fe fd3b 	bl	8010b58 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80120e2:	4b59      	ldr	r3, [pc, #356]	; (8012248 <tcp_process+0x7dc>)
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	687a      	ldr	r2, [r7, #4]
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d105      	bne.n	80120f8 <tcp_process+0x68c>
 80120ec:	4b56      	ldr	r3, [pc, #344]	; (8012248 <tcp_process+0x7dc>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	68db      	ldr	r3, [r3, #12]
 80120f2:	4a55      	ldr	r2, [pc, #340]	; (8012248 <tcp_process+0x7dc>)
 80120f4:	6013      	str	r3, [r2, #0]
 80120f6:	e013      	b.n	8012120 <tcp_process+0x6b4>
 80120f8:	4b53      	ldr	r3, [pc, #332]	; (8012248 <tcp_process+0x7dc>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	613b      	str	r3, [r7, #16]
 80120fe:	e00c      	b.n	801211a <tcp_process+0x6ae>
 8012100:	693b      	ldr	r3, [r7, #16]
 8012102:	68db      	ldr	r3, [r3, #12]
 8012104:	687a      	ldr	r2, [r7, #4]
 8012106:	429a      	cmp	r2, r3
 8012108:	d104      	bne.n	8012114 <tcp_process+0x6a8>
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	68da      	ldr	r2, [r3, #12]
 801210e:	693b      	ldr	r3, [r7, #16]
 8012110:	60da      	str	r2, [r3, #12]
 8012112:	e005      	b.n	8012120 <tcp_process+0x6b4>
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	613b      	str	r3, [r7, #16]
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d1ef      	bne.n	8012100 <tcp_process+0x694>
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2200      	movs	r2, #0
 8012124:	60da      	str	r2, [r3, #12]
 8012126:	4b43      	ldr	r3, [pc, #268]	; (8012234 <tcp_process+0x7c8>)
 8012128:	2201      	movs	r2, #1
 801212a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	220a      	movs	r2, #10
 8012130:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012132:	4b41      	ldr	r3, [pc, #260]	; (8012238 <tcp_process+0x7cc>)
 8012134:	681a      	ldr	r2, [r3, #0]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	60da      	str	r2, [r3, #12]
 801213a:	4a3f      	ldr	r2, [pc, #252]	; (8012238 <tcp_process+0x7cc>)
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6013      	str	r3, [r2, #0]
 8012140:	f002 fc90 	bl	8014a64 <tcp_timer_needed>
      }
      break;
 8012144:	e06c      	b.n	8012220 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f000 f984 	bl	8012454 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801214c:	4b3b      	ldr	r3, [pc, #236]	; (801223c <tcp_process+0x7d0>)
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	f003 0310 	and.w	r3, r3, #16
 8012154:	2b00      	cmp	r3, #0
 8012156:	d065      	beq.n	8012224 <tcp_process+0x7b8>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801215c:	4b38      	ldr	r3, [pc, #224]	; (8012240 <tcp_process+0x7d4>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	429a      	cmp	r2, r3
 8012162:	d15f      	bne.n	8012224 <tcp_process+0x7b8>
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012168:	2b00      	cmp	r3, #0
 801216a:	d15b      	bne.n	8012224 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f7fe fcf3 	bl	8010b58 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012172:	4b35      	ldr	r3, [pc, #212]	; (8012248 <tcp_process+0x7dc>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	687a      	ldr	r2, [r7, #4]
 8012178:	429a      	cmp	r2, r3
 801217a:	d105      	bne.n	8012188 <tcp_process+0x71c>
 801217c:	4b32      	ldr	r3, [pc, #200]	; (8012248 <tcp_process+0x7dc>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	68db      	ldr	r3, [r3, #12]
 8012182:	4a31      	ldr	r2, [pc, #196]	; (8012248 <tcp_process+0x7dc>)
 8012184:	6013      	str	r3, [r2, #0]
 8012186:	e013      	b.n	80121b0 <tcp_process+0x744>
 8012188:	4b2f      	ldr	r3, [pc, #188]	; (8012248 <tcp_process+0x7dc>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	60fb      	str	r3, [r7, #12]
 801218e:	e00c      	b.n	80121aa <tcp_process+0x73e>
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	68db      	ldr	r3, [r3, #12]
 8012194:	687a      	ldr	r2, [r7, #4]
 8012196:	429a      	cmp	r2, r3
 8012198:	d104      	bne.n	80121a4 <tcp_process+0x738>
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	68da      	ldr	r2, [r3, #12]
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	60da      	str	r2, [r3, #12]
 80121a2:	e005      	b.n	80121b0 <tcp_process+0x744>
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	68db      	ldr	r3, [r3, #12]
 80121a8:	60fb      	str	r3, [r7, #12]
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d1ef      	bne.n	8012190 <tcp_process+0x724>
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2200      	movs	r2, #0
 80121b4:	60da      	str	r2, [r3, #12]
 80121b6:	4b1f      	ldr	r3, [pc, #124]	; (8012234 <tcp_process+0x7c8>)
 80121b8:	2201      	movs	r2, #1
 80121ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	220a      	movs	r2, #10
 80121c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80121c2:	4b1d      	ldr	r3, [pc, #116]	; (8012238 <tcp_process+0x7cc>)
 80121c4:	681a      	ldr	r2, [r3, #0]
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	60da      	str	r2, [r3, #12]
 80121ca:	4a1b      	ldr	r2, [pc, #108]	; (8012238 <tcp_process+0x7cc>)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	6013      	str	r3, [r2, #0]
 80121d0:	f002 fc48 	bl	8014a64 <tcp_timer_needed>
      }
      break;
 80121d4:	e026      	b.n	8012224 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f000 f93c 	bl	8012454 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80121dc:	4b17      	ldr	r3, [pc, #92]	; (801223c <tcp_process+0x7d0>)
 80121de:	781b      	ldrb	r3, [r3, #0]
 80121e0:	f003 0310 	and.w	r3, r3, #16
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d01f      	beq.n	8012228 <tcp_process+0x7bc>
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80121ec:	4b14      	ldr	r3, [pc, #80]	; (8012240 <tcp_process+0x7d4>)
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d119      	bne.n	8012228 <tcp_process+0x7bc>
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d115      	bne.n	8012228 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80121fc:	4b11      	ldr	r3, [pc, #68]	; (8012244 <tcp_process+0x7d8>)
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	f043 0310 	orr.w	r3, r3, #16
 8012204:	b2da      	uxtb	r2, r3
 8012206:	4b0f      	ldr	r3, [pc, #60]	; (8012244 <tcp_process+0x7d8>)
 8012208:	701a      	strb	r2, [r3, #0]
      }
      break;
 801220a:	e00d      	b.n	8012228 <tcp_process+0x7bc>
    default:
      break;
 801220c:	bf00      	nop
 801220e:	e00c      	b.n	801222a <tcp_process+0x7be>
      break;
 8012210:	bf00      	nop
 8012212:	e00a      	b.n	801222a <tcp_process+0x7be>
      break;
 8012214:	bf00      	nop
 8012216:	e008      	b.n	801222a <tcp_process+0x7be>
      break;
 8012218:	bf00      	nop
 801221a:	e006      	b.n	801222a <tcp_process+0x7be>
      break;
 801221c:	bf00      	nop
 801221e:	e004      	b.n	801222a <tcp_process+0x7be>
      break;
 8012220:	bf00      	nop
 8012222:	e002      	b.n	801222a <tcp_process+0x7be>
      break;
 8012224:	bf00      	nop
 8012226:	e000      	b.n	801222a <tcp_process+0x7be>
      break;
 8012228:	bf00      	nop
  }
  return ERR_OK;
 801222a:	2300      	movs	r3, #0
}
 801222c:	4618      	mov	r0, r3
 801222e:	3724      	adds	r7, #36	; 0x24
 8012230:	46bd      	mov	sp, r7
 8012232:	bd90      	pop	{r4, r7, pc}
 8012234:	2000f390 	.word	0x2000f390
 8012238:	2000f3a4 	.word	0x2000f3a4
 801223c:	20008500 	.word	0x20008500
 8012240:	200084f8 	.word	0x200084f8
 8012244:	20008501 	.word	0x20008501
 8012248:	2000f394 	.word	0x2000f394

0801224c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801224c:	b590      	push	{r4, r7, lr}
 801224e:	b085      	sub	sp, #20
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d106      	bne.n	801226a <tcp_oos_insert_segment+0x1e>
 801225c:	4b3b      	ldr	r3, [pc, #236]	; (801234c <tcp_oos_insert_segment+0x100>)
 801225e:	f240 421f 	movw	r2, #1055	; 0x41f
 8012262:	493b      	ldr	r1, [pc, #236]	; (8012350 <tcp_oos_insert_segment+0x104>)
 8012264:	483b      	ldr	r0, [pc, #236]	; (8012354 <tcp_oos_insert_segment+0x108>)
 8012266:	f008 f8f5 	bl	801a454 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	68db      	ldr	r3, [r3, #12]
 801226e:	899b      	ldrh	r3, [r3, #12]
 8012270:	b29b      	uxth	r3, r3
 8012272:	4618      	mov	r0, r3
 8012274:	f7fb fc3c 	bl	800daf0 <lwip_htons>
 8012278:	4603      	mov	r3, r0
 801227a:	b2db      	uxtb	r3, r3
 801227c:	f003 0301 	and.w	r3, r3, #1
 8012280:	2b00      	cmp	r3, #0
 8012282:	d028      	beq.n	80122d6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012284:	6838      	ldr	r0, [r7, #0]
 8012286:	f7fe fa65 	bl	8010754 <tcp_segs_free>
    next = NULL;
 801228a:	2300      	movs	r3, #0
 801228c:	603b      	str	r3, [r7, #0]
 801228e:	e056      	b.n	801233e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	68db      	ldr	r3, [r3, #12]
 8012294:	899b      	ldrh	r3, [r3, #12]
 8012296:	b29b      	uxth	r3, r3
 8012298:	4618      	mov	r0, r3
 801229a:	f7fb fc29 	bl	800daf0 <lwip_htons>
 801229e:	4603      	mov	r3, r0
 80122a0:	b2db      	uxtb	r3, r3
 80122a2:	f003 0301 	and.w	r3, r3, #1
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d00d      	beq.n	80122c6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	68db      	ldr	r3, [r3, #12]
 80122ae:	899b      	ldrh	r3, [r3, #12]
 80122b0:	b29c      	uxth	r4, r3
 80122b2:	2001      	movs	r0, #1
 80122b4:	f7fb fc1c 	bl	800daf0 <lwip_htons>
 80122b8:	4603      	mov	r3, r0
 80122ba:	461a      	mov	r2, r3
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	68db      	ldr	r3, [r3, #12]
 80122c0:	4322      	orrs	r2, r4
 80122c2:	b292      	uxth	r2, r2
 80122c4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	f7fe fa54 	bl	801077e <tcp_seg_free>
    while (next &&
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d00e      	beq.n	80122fa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	891b      	ldrh	r3, [r3, #8]
 80122e0:	461a      	mov	r2, r3
 80122e2:	4b1d      	ldr	r3, [pc, #116]	; (8012358 <tcp_oos_insert_segment+0x10c>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	441a      	add	r2, r3
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	68db      	ldr	r3, [r3, #12]
 80122ec:	685b      	ldr	r3, [r3, #4]
 80122ee:	6839      	ldr	r1, [r7, #0]
 80122f0:	8909      	ldrh	r1, [r1, #8]
 80122f2:	440b      	add	r3, r1
 80122f4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	daca      	bge.n	8012290 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d01e      	beq.n	801233e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	891b      	ldrh	r3, [r3, #8]
 8012304:	461a      	mov	r2, r3
 8012306:	4b14      	ldr	r3, [pc, #80]	; (8012358 <tcp_oos_insert_segment+0x10c>)
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	441a      	add	r2, r3
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	68db      	ldr	r3, [r3, #12]
 8012310:	685b      	ldr	r3, [r3, #4]
 8012312:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012314:	2b00      	cmp	r3, #0
 8012316:	dd12      	ble.n	801233e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	68db      	ldr	r3, [r3, #12]
 801231c:	685b      	ldr	r3, [r3, #4]
 801231e:	b29a      	uxth	r2, r3
 8012320:	4b0d      	ldr	r3, [pc, #52]	; (8012358 <tcp_oos_insert_segment+0x10c>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	b29b      	uxth	r3, r3
 8012326:	1ad3      	subs	r3, r2, r3
 8012328:	b29a      	uxth	r2, r3
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	685a      	ldr	r2, [r3, #4]
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	891b      	ldrh	r3, [r3, #8]
 8012336:	4619      	mov	r1, r3
 8012338:	4610      	mov	r0, r2
 801233a:	f7fc fe0b 	bl	800ef54 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	683a      	ldr	r2, [r7, #0]
 8012342:	601a      	str	r2, [r3, #0]
}
 8012344:	bf00      	nop
 8012346:	3714      	adds	r7, #20
 8012348:	46bd      	mov	sp, r7
 801234a:	bd90      	pop	{r4, r7, pc}
 801234c:	0801ce10 	.word	0x0801ce10
 8012350:	0801d0d0 	.word	0x0801d0d0
 8012354:	0801ce5c 	.word	0x0801ce5c
 8012358:	200084f4 	.word	0x200084f4

0801235c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801235c:	b5b0      	push	{r4, r5, r7, lr}
 801235e:	b086      	sub	sp, #24
 8012360:	af00      	add	r7, sp, #0
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	60b9      	str	r1, [r7, #8]
 8012366:	607a      	str	r2, [r7, #4]
 8012368:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801236a:	e03e      	b.n	80123ea <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	685b      	ldr	r3, [r3, #4]
 801237a:	4618      	mov	r0, r3
 801237c:	f7fc fffe 	bl	800f37c <pbuf_clen>
 8012380:	4603      	mov	r3, r0
 8012382:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801238a:	8a7a      	ldrh	r2, [r7, #18]
 801238c:	429a      	cmp	r2, r3
 801238e:	d906      	bls.n	801239e <tcp_free_acked_segments+0x42>
 8012390:	4b2a      	ldr	r3, [pc, #168]	; (801243c <tcp_free_acked_segments+0xe0>)
 8012392:	f240 4257 	movw	r2, #1111	; 0x457
 8012396:	492a      	ldr	r1, [pc, #168]	; (8012440 <tcp_free_acked_segments+0xe4>)
 8012398:	482a      	ldr	r0, [pc, #168]	; (8012444 <tcp_free_acked_segments+0xe8>)
 801239a:	f008 f85b 	bl	801a454 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80123a4:	8a7b      	ldrh	r3, [r7, #18]
 80123a6:	1ad3      	subs	r3, r2, r3
 80123a8:	b29a      	uxth	r2, r3
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	891a      	ldrh	r2, [r3, #8]
 80123b4:	4b24      	ldr	r3, [pc, #144]	; (8012448 <tcp_free_acked_segments+0xec>)
 80123b6:	881b      	ldrh	r3, [r3, #0]
 80123b8:	4413      	add	r3, r2
 80123ba:	b29a      	uxth	r2, r3
 80123bc:	4b22      	ldr	r3, [pc, #136]	; (8012448 <tcp_free_acked_segments+0xec>)
 80123be:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80123c0:	6978      	ldr	r0, [r7, #20]
 80123c2:	f7fe f9dc 	bl	801077e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d00c      	beq.n	80123ea <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d109      	bne.n	80123ea <tcp_free_acked_segments+0x8e>
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d106      	bne.n	80123ea <tcp_free_acked_segments+0x8e>
 80123dc:	4b17      	ldr	r3, [pc, #92]	; (801243c <tcp_free_acked_segments+0xe0>)
 80123de:	f240 4261 	movw	r2, #1121	; 0x461
 80123e2:	491a      	ldr	r1, [pc, #104]	; (801244c <tcp_free_acked_segments+0xf0>)
 80123e4:	4817      	ldr	r0, [pc, #92]	; (8012444 <tcp_free_acked_segments+0xe8>)
 80123e6:	f008 f835 	bl	801a454 <iprintf>
  while (seg_list != NULL &&
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d020      	beq.n	8012432 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	68db      	ldr	r3, [r3, #12]
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7fb fb8f 	bl	800db1a <lwip_htonl>
 80123fc:	4604      	mov	r4, r0
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	891b      	ldrh	r3, [r3, #8]
 8012402:	461d      	mov	r5, r3
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	68db      	ldr	r3, [r3, #12]
 8012408:	899b      	ldrh	r3, [r3, #12]
 801240a:	b29b      	uxth	r3, r3
 801240c:	4618      	mov	r0, r3
 801240e:	f7fb fb6f 	bl	800daf0 <lwip_htons>
 8012412:	4603      	mov	r3, r0
 8012414:	b2db      	uxtb	r3, r3
 8012416:	f003 0303 	and.w	r3, r3, #3
 801241a:	2b00      	cmp	r3, #0
 801241c:	d001      	beq.n	8012422 <tcp_free_acked_segments+0xc6>
 801241e:	2301      	movs	r3, #1
 8012420:	e000      	b.n	8012424 <tcp_free_acked_segments+0xc8>
 8012422:	2300      	movs	r3, #0
 8012424:	442b      	add	r3, r5
 8012426:	18e2      	adds	r2, r4, r3
 8012428:	4b09      	ldr	r3, [pc, #36]	; (8012450 <tcp_free_acked_segments+0xf4>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801242e:	2b00      	cmp	r3, #0
 8012430:	dd9c      	ble.n	801236c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012432:	68bb      	ldr	r3, [r7, #8]
}
 8012434:	4618      	mov	r0, r3
 8012436:	3718      	adds	r7, #24
 8012438:	46bd      	mov	sp, r7
 801243a:	bdb0      	pop	{r4, r5, r7, pc}
 801243c:	0801ce10 	.word	0x0801ce10
 8012440:	0801d0f8 	.word	0x0801d0f8
 8012444:	0801ce5c 	.word	0x0801ce5c
 8012448:	200084fc 	.word	0x200084fc
 801244c:	0801d120 	.word	0x0801d120
 8012450:	200084f8 	.word	0x200084f8

08012454 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012454:	b5b0      	push	{r4, r5, r7, lr}
 8012456:	b094      	sub	sp, #80	; 0x50
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801245c:	2300      	movs	r3, #0
 801245e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d106      	bne.n	8012474 <tcp_receive+0x20>
 8012466:	4ba6      	ldr	r3, [pc, #664]	; (8012700 <tcp_receive+0x2ac>)
 8012468:	f240 427b 	movw	r2, #1147	; 0x47b
 801246c:	49a5      	ldr	r1, [pc, #660]	; (8012704 <tcp_receive+0x2b0>)
 801246e:	48a6      	ldr	r0, [pc, #664]	; (8012708 <tcp_receive+0x2b4>)
 8012470:	f007 fff0 	bl	801a454 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	7d1b      	ldrb	r3, [r3, #20]
 8012478:	2b03      	cmp	r3, #3
 801247a:	d806      	bhi.n	801248a <tcp_receive+0x36>
 801247c:	4ba0      	ldr	r3, [pc, #640]	; (8012700 <tcp_receive+0x2ac>)
 801247e:	f240 427c 	movw	r2, #1148	; 0x47c
 8012482:	49a2      	ldr	r1, [pc, #648]	; (801270c <tcp_receive+0x2b8>)
 8012484:	48a0      	ldr	r0, [pc, #640]	; (8012708 <tcp_receive+0x2b4>)
 8012486:	f007 ffe5 	bl	801a454 <iprintf>

  if (flags & TCP_ACK) {
 801248a:	4ba1      	ldr	r3, [pc, #644]	; (8012710 <tcp_receive+0x2bc>)
 801248c:	781b      	ldrb	r3, [r3, #0]
 801248e:	f003 0310 	and.w	r3, r3, #16
 8012492:	2b00      	cmp	r3, #0
 8012494:	f000 8263 	beq.w	801295e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801249e:	461a      	mov	r2, r3
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124a4:	4413      	add	r3, r2
 80124a6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80124ac:	4b99      	ldr	r3, [pc, #612]	; (8012714 <tcp_receive+0x2c0>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	1ad3      	subs	r3, r2, r3
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	db1b      	blt.n	80124ee <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80124ba:	4b96      	ldr	r3, [pc, #600]	; (8012714 <tcp_receive+0x2c0>)
 80124bc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80124be:	429a      	cmp	r2, r3
 80124c0:	d106      	bne.n	80124d0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80124c6:	4b94      	ldr	r3, [pc, #592]	; (8012718 <tcp_receive+0x2c4>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	1ad3      	subs	r3, r2, r3
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	db0e      	blt.n	80124ee <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80124d4:	4b90      	ldr	r3, [pc, #576]	; (8012718 <tcp_receive+0x2c4>)
 80124d6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80124d8:	429a      	cmp	r2, r3
 80124da:	d125      	bne.n	8012528 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80124dc:	4b8f      	ldr	r3, [pc, #572]	; (801271c <tcp_receive+0x2c8>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	89db      	ldrh	r3, [r3, #14]
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d91c      	bls.n	8012528 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80124ee:	4b8b      	ldr	r3, [pc, #556]	; (801271c <tcp_receive+0x2c8>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	89db      	ldrh	r3, [r3, #14]
 80124f4:	b29a      	uxth	r2, r3
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012508:	429a      	cmp	r2, r3
 801250a:	d205      	bcs.n	8012518 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012518:	4b7e      	ldr	r3, [pc, #504]	; (8012714 <tcp_receive+0x2c0>)
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012520:	4b7d      	ldr	r3, [pc, #500]	; (8012718 <tcp_receive+0x2c4>)
 8012522:	681a      	ldr	r2, [r3, #0]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012528:	4b7b      	ldr	r3, [pc, #492]	; (8012718 <tcp_receive+0x2c4>)
 801252a:	681a      	ldr	r2, [r3, #0]
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012530:	1ad3      	subs	r3, r2, r3
 8012532:	2b00      	cmp	r3, #0
 8012534:	dc58      	bgt.n	80125e8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012536:	4b7a      	ldr	r3, [pc, #488]	; (8012720 <tcp_receive+0x2cc>)
 8012538:	881b      	ldrh	r3, [r3, #0]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d14b      	bne.n	80125d6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012542:	687a      	ldr	r2, [r7, #4]
 8012544:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012548:	4413      	add	r3, r2
 801254a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801254c:	429a      	cmp	r2, r3
 801254e:	d142      	bne.n	80125d6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012556:	2b00      	cmp	r3, #0
 8012558:	db3d      	blt.n	80125d6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801255e:	4b6e      	ldr	r3, [pc, #440]	; (8012718 <tcp_receive+0x2c4>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	429a      	cmp	r2, r3
 8012564:	d137      	bne.n	80125d6 <tcp_receive+0x182>
              found_dupack = 1;
 8012566:	2301      	movs	r3, #1
 8012568:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012570:	2bff      	cmp	r3, #255	; 0xff
 8012572:	d007      	beq.n	8012584 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801257a:	3301      	adds	r3, #1
 801257c:	b2da      	uxtb	r2, r3
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801258a:	2b03      	cmp	r3, #3
 801258c:	d91b      	bls.n	80125c6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012598:	4413      	add	r3, r2
 801259a:	b29a      	uxth	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d30a      	bcc.n	80125bc <tcp_receive+0x168>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125b0:	4413      	add	r3, r2
 80125b2:	b29a      	uxth	r2, r3
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80125ba:	e004      	b.n	80125c6 <tcp_receive+0x172>
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80125cc:	2b02      	cmp	r3, #2
 80125ce:	d902      	bls.n	80125d6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f001 fee9 	bl	80143a8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80125d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125d8:	2b00      	cmp	r3, #0
 80125da:	f040 8160 	bne.w	801289e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2200      	movs	r2, #0
 80125e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80125e6:	e15a      	b.n	801289e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80125e8:	4b4b      	ldr	r3, [pc, #300]	; (8012718 <tcp_receive+0x2c4>)
 80125ea:	681a      	ldr	r2, [r3, #0]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125f0:	1ad3      	subs	r3, r2, r3
 80125f2:	3b01      	subs	r3, #1
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	f2c0 814d 	blt.w	8012894 <tcp_receive+0x440>
 80125fa:	4b47      	ldr	r3, [pc, #284]	; (8012718 <tcp_receive+0x2c4>)
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012602:	1ad3      	subs	r3, r2, r3
 8012604:	2b00      	cmp	r3, #0
 8012606:	f300 8145 	bgt.w	8012894 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	8b5b      	ldrh	r3, [r3, #26]
 801260e:	f003 0304 	and.w	r3, r3, #4
 8012612:	2b00      	cmp	r3, #0
 8012614:	d010      	beq.n	8012638 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	8b5b      	ldrh	r3, [r3, #26]
 801261a:	f023 0304 	bic.w	r3, r3, #4
 801261e:	b29a      	uxth	r2, r3
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2200      	movs	r2, #0
 8012634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2200      	movs	r2, #0
 801263c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012646:	10db      	asrs	r3, r3, #3
 8012648:	b21b      	sxth	r3, r3
 801264a:	b29a      	uxth	r2, r3
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012652:	b29b      	uxth	r3, r3
 8012654:	4413      	add	r3, r2
 8012656:	b29b      	uxth	r3, r3
 8012658:	b21a      	sxth	r2, r3
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012660:	4b2d      	ldr	r3, [pc, #180]	; (8012718 <tcp_receive+0x2c4>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	b29a      	uxth	r2, r3
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801266a:	b29b      	uxth	r3, r3
 801266c:	1ad3      	subs	r3, r2, r3
 801266e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2200      	movs	r2, #0
 8012674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012678:	4b27      	ldr	r3, [pc, #156]	; (8012718 <tcp_receive+0x2c4>)
 801267a:	681a      	ldr	r2, [r3, #0]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	7d1b      	ldrb	r3, [r3, #20]
 8012684:	2b03      	cmp	r3, #3
 8012686:	f240 8096 	bls.w	80127b6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012696:	429a      	cmp	r2, r3
 8012698:	d244      	bcs.n	8012724 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	8b5b      	ldrh	r3, [r3, #26]
 801269e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d001      	beq.n	80126aa <tcp_receive+0x256>
 80126a6:	2301      	movs	r3, #1
 80126a8:	e000      	b.n	80126ac <tcp_receive+0x258>
 80126aa:	2302      	movs	r3, #2
 80126ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80126b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80126b4:	b29a      	uxth	r2, r3
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126ba:	fb12 f303 	smulbb	r3, r2, r3
 80126be:	b29b      	uxth	r3, r3
 80126c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80126c2:	4293      	cmp	r3, r2
 80126c4:	bf28      	it	cs
 80126c6:	4613      	movcs	r3, r2
 80126c8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80126d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80126d2:	4413      	add	r3, r2
 80126d4:	b29a      	uxth	r2, r3
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80126dc:	429a      	cmp	r2, r3
 80126de:	d309      	bcc.n	80126f4 <tcp_receive+0x2a0>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80126e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80126e8:	4413      	add	r3, r2
 80126ea:	b29a      	uxth	r2, r3
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80126f2:	e060      	b.n	80127b6 <tcp_receive+0x362>
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80126fe:	e05a      	b.n	80127b6 <tcp_receive+0x362>
 8012700:	0801ce10 	.word	0x0801ce10
 8012704:	0801d140 	.word	0x0801d140
 8012708:	0801ce5c 	.word	0x0801ce5c
 801270c:	0801d15c 	.word	0x0801d15c
 8012710:	20008500 	.word	0x20008500
 8012714:	200084f4 	.word	0x200084f4
 8012718:	200084f8 	.word	0x200084f8
 801271c:	200084e4 	.word	0x200084e4
 8012720:	200084fe 	.word	0x200084fe
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801272a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801272c:	4413      	add	r3, r2
 801272e:	b29a      	uxth	r2, r3
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012736:	429a      	cmp	r2, r3
 8012738:	d309      	bcc.n	801274e <tcp_receive+0x2fa>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012740:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012742:	4413      	add	r3, r2
 8012744:	b29a      	uxth	r2, r3
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801274c:	e004      	b.n	8012758 <tcp_receive+0x304>
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012764:	429a      	cmp	r2, r3
 8012766:	d326      	bcc.n	80127b6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012774:	1ad3      	subs	r3, r2, r3
 8012776:	b29a      	uxth	r2, r3
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012788:	4413      	add	r3, r2
 801278a:	b29a      	uxth	r2, r3
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012792:	429a      	cmp	r2, r3
 8012794:	d30a      	bcc.n	80127ac <tcp_receive+0x358>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80127a0:	4413      	add	r3, r2
 80127a2:	b29a      	uxth	r2, r3
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80127aa:	e004      	b.n	80127b6 <tcp_receive+0x362>
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127be:	4a98      	ldr	r2, [pc, #608]	; (8012a20 <tcp_receive+0x5cc>)
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f7ff fdcb 	bl	801235c <tcp_free_acked_segments>
 80127c6:	4602      	mov	r2, r0
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127d4:	4a93      	ldr	r2, [pc, #588]	; (8012a24 <tcp_receive+0x5d0>)
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f7ff fdc0 	bl	801235c <tcp_free_acked_segments>
 80127dc:	4602      	mov	r2, r0
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d104      	bne.n	80127f4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127f0:	861a      	strh	r2, [r3, #48]	; 0x30
 80127f2:	e002      	b.n	80127fa <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2200      	movs	r2, #0
 80127f8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2200      	movs	r2, #0
 80127fe:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012804:	2b00      	cmp	r3, #0
 8012806:	d103      	bne.n	8012810 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2200      	movs	r2, #0
 801280c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012816:	4b84      	ldr	r3, [pc, #528]	; (8012a28 <tcp_receive+0x5d4>)
 8012818:	881b      	ldrh	r3, [r3, #0]
 801281a:	4413      	add	r3, r2
 801281c:	b29a      	uxth	r2, r3
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	8b5b      	ldrh	r3, [r3, #26]
 8012828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801282c:	2b00      	cmp	r3, #0
 801282e:	d035      	beq.n	801289c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012834:	2b00      	cmp	r3, #0
 8012836:	d118      	bne.n	801286a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801283c:	2b00      	cmp	r3, #0
 801283e:	d00c      	beq.n	801285a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012848:	68db      	ldr	r3, [r3, #12]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	4618      	mov	r0, r3
 801284e:	f7fb f964 	bl	800db1a <lwip_htonl>
 8012852:	4603      	mov	r3, r0
 8012854:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012856:	2b00      	cmp	r3, #0
 8012858:	dc20      	bgt.n	801289c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	8b5b      	ldrh	r3, [r3, #26]
 801285e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012862:	b29a      	uxth	r2, r3
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012868:	e018      	b.n	801289c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012872:	68db      	ldr	r3, [r3, #12]
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	4618      	mov	r0, r3
 8012878:	f7fb f94f 	bl	800db1a <lwip_htonl>
 801287c:	4603      	mov	r3, r0
 801287e:	1ae3      	subs	r3, r4, r3
 8012880:	2b00      	cmp	r3, #0
 8012882:	dc0b      	bgt.n	801289c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	8b5b      	ldrh	r3, [r3, #26]
 8012888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801288c:	b29a      	uxth	r2, r3
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012892:	e003      	b.n	801289c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f001 ff75 	bl	8014784 <tcp_send_empty_ack>
 801289a:	e000      	b.n	801289e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801289c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d05b      	beq.n	801295e <tcp_receive+0x50a>
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80128aa:	4b60      	ldr	r3, [pc, #384]	; (8012a2c <tcp_receive+0x5d8>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	1ad3      	subs	r3, r2, r3
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	da54      	bge.n	801295e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80128b4:	4b5e      	ldr	r3, [pc, #376]	; (8012a30 <tcp_receive+0x5dc>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	b29a      	uxth	r2, r3
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128be:	b29b      	uxth	r3, r3
 80128c0:	1ad3      	subs	r3, r2, r3
 80128c2:	b29b      	uxth	r3, r3
 80128c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80128c8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80128d2:	10db      	asrs	r3, r3, #3
 80128d4:	b21b      	sxth	r3, r3
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	1ad3      	subs	r3, r2, r3
 80128da:	b29b      	uxth	r3, r3
 80128dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80128e6:	b29a      	uxth	r2, r3
 80128e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80128ec:	4413      	add	r3, r2
 80128ee:	b29b      	uxth	r3, r3
 80128f0:	b21a      	sxth	r2, r3
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80128f6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	da05      	bge.n	801290a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80128fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012902:	425b      	negs	r3, r3
 8012904:	b29b      	uxth	r3, r3
 8012906:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801290a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012914:	109b      	asrs	r3, r3, #2
 8012916:	b21b      	sxth	r3, r3
 8012918:	b29b      	uxth	r3, r3
 801291a:	1ad3      	subs	r3, r2, r3
 801291c:	b29b      	uxth	r3, r3
 801291e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012928:	b29a      	uxth	r2, r3
 801292a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801292e:	4413      	add	r3, r2
 8012930:	b29b      	uxth	r3, r3
 8012932:	b21a      	sxth	r2, r3
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801293e:	10db      	asrs	r3, r3, #3
 8012940:	b21b      	sxth	r3, r3
 8012942:	b29a      	uxth	r2, r3
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801294a:	b29b      	uxth	r3, r3
 801294c:	4413      	add	r3, r2
 801294e:	b29b      	uxth	r3, r3
 8012950:	b21a      	sxth	r2, r3
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2200      	movs	r2, #0
 801295c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801295e:	4b35      	ldr	r3, [pc, #212]	; (8012a34 <tcp_receive+0x5e0>)
 8012960:	881b      	ldrh	r3, [r3, #0]
 8012962:	2b00      	cmp	r3, #0
 8012964:	f000 84e1 	beq.w	801332a <tcp_receive+0xed6>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	7d1b      	ldrb	r3, [r3, #20]
 801296c:	2b06      	cmp	r3, #6
 801296e:	f200 84dc 	bhi.w	801332a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012976:	4b30      	ldr	r3, [pc, #192]	; (8012a38 <tcp_receive+0x5e4>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	1ad3      	subs	r3, r2, r3
 801297c:	3b01      	subs	r3, #1
 801297e:	2b00      	cmp	r3, #0
 8012980:	f2c0 808e 	blt.w	8012aa0 <tcp_receive+0x64c>
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012988:	4b2a      	ldr	r3, [pc, #168]	; (8012a34 <tcp_receive+0x5e0>)
 801298a:	881b      	ldrh	r3, [r3, #0]
 801298c:	4619      	mov	r1, r3
 801298e:	4b2a      	ldr	r3, [pc, #168]	; (8012a38 <tcp_receive+0x5e4>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	440b      	add	r3, r1
 8012994:	1ad3      	subs	r3, r2, r3
 8012996:	3301      	adds	r3, #1
 8012998:	2b00      	cmp	r3, #0
 801299a:	f300 8081 	bgt.w	8012aa0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801299e:	4b27      	ldr	r3, [pc, #156]	; (8012a3c <tcp_receive+0x5e8>)
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80129a8:	4b23      	ldr	r3, [pc, #140]	; (8012a38 <tcp_receive+0x5e4>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	1ad3      	subs	r3, r2, r3
 80129ae:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80129b0:	4b22      	ldr	r3, [pc, #136]	; (8012a3c <tcp_receive+0x5e8>)
 80129b2:	685b      	ldr	r3, [r3, #4]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d106      	bne.n	80129c6 <tcp_receive+0x572>
 80129b8:	4b21      	ldr	r3, [pc, #132]	; (8012a40 <tcp_receive+0x5ec>)
 80129ba:	f240 5294 	movw	r2, #1428	; 0x594
 80129be:	4921      	ldr	r1, [pc, #132]	; (8012a44 <tcp_receive+0x5f0>)
 80129c0:	4821      	ldr	r0, [pc, #132]	; (8012a48 <tcp_receive+0x5f4>)
 80129c2:	f007 fd47 	bl	801a454 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80129c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80129cc:	4293      	cmp	r3, r2
 80129ce:	d906      	bls.n	80129de <tcp_receive+0x58a>
 80129d0:	4b1b      	ldr	r3, [pc, #108]	; (8012a40 <tcp_receive+0x5ec>)
 80129d2:	f240 5295 	movw	r2, #1429	; 0x595
 80129d6:	491d      	ldr	r1, [pc, #116]	; (8012a4c <tcp_receive+0x5f8>)
 80129d8:	481b      	ldr	r0, [pc, #108]	; (8012a48 <tcp_receive+0x5f4>)
 80129da:	f007 fd3b 	bl	801a454 <iprintf>
      off = (u16_t)off32;
 80129de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80129e4:	4b15      	ldr	r3, [pc, #84]	; (8012a3c <tcp_receive+0x5e8>)
 80129e6:	685b      	ldr	r3, [r3, #4]
 80129e8:	891b      	ldrh	r3, [r3, #8]
 80129ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d906      	bls.n	8012a00 <tcp_receive+0x5ac>
 80129f2:	4b13      	ldr	r3, [pc, #76]	; (8012a40 <tcp_receive+0x5ec>)
 80129f4:	f240 5297 	movw	r2, #1431	; 0x597
 80129f8:	4915      	ldr	r1, [pc, #84]	; (8012a50 <tcp_receive+0x5fc>)
 80129fa:	4813      	ldr	r0, [pc, #76]	; (8012a48 <tcp_receive+0x5f4>)
 80129fc:	f007 fd2a 	bl	801a454 <iprintf>
      inseg.len -= off;
 8012a00:	4b0e      	ldr	r3, [pc, #56]	; (8012a3c <tcp_receive+0x5e8>)
 8012a02:	891a      	ldrh	r2, [r3, #8]
 8012a04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a08:	1ad3      	subs	r3, r2, r3
 8012a0a:	b29a      	uxth	r2, r3
 8012a0c:	4b0b      	ldr	r3, [pc, #44]	; (8012a3c <tcp_receive+0x5e8>)
 8012a0e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012a10:	4b0a      	ldr	r3, [pc, #40]	; (8012a3c <tcp_receive+0x5e8>)
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	891a      	ldrh	r2, [r3, #8]
 8012a16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a1a:	1ad3      	subs	r3, r2, r3
 8012a1c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012a1e:	e029      	b.n	8012a74 <tcp_receive+0x620>
 8012a20:	0801d178 	.word	0x0801d178
 8012a24:	0801d180 	.word	0x0801d180
 8012a28:	200084fc 	.word	0x200084fc
 8012a2c:	200084f8 	.word	0x200084f8
 8012a30:	2000f398 	.word	0x2000f398
 8012a34:	200084fe 	.word	0x200084fe
 8012a38:	200084f4 	.word	0x200084f4
 8012a3c:	200084d4 	.word	0x200084d4
 8012a40:	0801ce10 	.word	0x0801ce10
 8012a44:	0801d188 	.word	0x0801d188
 8012a48:	0801ce5c 	.word	0x0801ce5c
 8012a4c:	0801d198 	.word	0x0801d198
 8012a50:	0801d1a8 	.word	0x0801d1a8
        off -= p->len;
 8012a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a56:	895b      	ldrh	r3, [r3, #10]
 8012a58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a5c:	1ad3      	subs	r3, r2, r3
 8012a5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012a66:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a76:	895b      	ldrh	r3, [r3, #10]
 8012a78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a7c:	429a      	cmp	r2, r3
 8012a7e:	d8e9      	bhi.n	8012a54 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012a80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a84:	4619      	mov	r1, r3
 8012a86:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012a88:	f7fc fb64 	bl	800f154 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a90:	4a91      	ldr	r2, [pc, #580]	; (8012cd8 <tcp_receive+0x884>)
 8012a92:	6013      	str	r3, [r2, #0]
 8012a94:	4b91      	ldr	r3, [pc, #580]	; (8012cdc <tcp_receive+0x888>)
 8012a96:	68db      	ldr	r3, [r3, #12]
 8012a98:	4a8f      	ldr	r2, [pc, #572]	; (8012cd8 <tcp_receive+0x884>)
 8012a9a:	6812      	ldr	r2, [r2, #0]
 8012a9c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012a9e:	e00d      	b.n	8012abc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012aa0:	4b8d      	ldr	r3, [pc, #564]	; (8012cd8 <tcp_receive+0x884>)
 8012aa2:	681a      	ldr	r2, [r3, #0]
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aa8:	1ad3      	subs	r3, r2, r3
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	da06      	bge.n	8012abc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	8b5b      	ldrh	r3, [r3, #26]
 8012ab2:	f043 0302 	orr.w	r3, r3, #2
 8012ab6:	b29a      	uxth	r2, r3
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012abc:	4b86      	ldr	r3, [pc, #536]	; (8012cd8 <tcp_receive+0x884>)
 8012abe:	681a      	ldr	r2, [r3, #0]
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ac4:	1ad3      	subs	r3, r2, r3
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	f2c0 842a 	blt.w	8013320 <tcp_receive+0xecc>
 8012acc:	4b82      	ldr	r3, [pc, #520]	; (8012cd8 <tcp_receive+0x884>)
 8012ace:	681a      	ldr	r2, [r3, #0]
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ad4:	6879      	ldr	r1, [r7, #4]
 8012ad6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012ad8:	440b      	add	r3, r1
 8012ada:	1ad3      	subs	r3, r2, r3
 8012adc:	3301      	adds	r3, #1
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	f300 841e 	bgt.w	8013320 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ae8:	4b7b      	ldr	r3, [pc, #492]	; (8012cd8 <tcp_receive+0x884>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	429a      	cmp	r2, r3
 8012aee:	f040 829a 	bne.w	8013026 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012af2:	4b7a      	ldr	r3, [pc, #488]	; (8012cdc <tcp_receive+0x888>)
 8012af4:	891c      	ldrh	r4, [r3, #8]
 8012af6:	4b79      	ldr	r3, [pc, #484]	; (8012cdc <tcp_receive+0x888>)
 8012af8:	68db      	ldr	r3, [r3, #12]
 8012afa:	899b      	ldrh	r3, [r3, #12]
 8012afc:	b29b      	uxth	r3, r3
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7fa fff6 	bl	800daf0 <lwip_htons>
 8012b04:	4603      	mov	r3, r0
 8012b06:	b2db      	uxtb	r3, r3
 8012b08:	f003 0303 	and.w	r3, r3, #3
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d001      	beq.n	8012b14 <tcp_receive+0x6c0>
 8012b10:	2301      	movs	r3, #1
 8012b12:	e000      	b.n	8012b16 <tcp_receive+0x6c2>
 8012b14:	2300      	movs	r3, #0
 8012b16:	4423      	add	r3, r4
 8012b18:	b29a      	uxth	r2, r3
 8012b1a:	4b71      	ldr	r3, [pc, #452]	; (8012ce0 <tcp_receive+0x88c>)
 8012b1c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012b22:	4b6f      	ldr	r3, [pc, #444]	; (8012ce0 <tcp_receive+0x88c>)
 8012b24:	881b      	ldrh	r3, [r3, #0]
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d275      	bcs.n	8012c16 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012b2a:	4b6c      	ldr	r3, [pc, #432]	; (8012cdc <tcp_receive+0x888>)
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	899b      	ldrh	r3, [r3, #12]
 8012b30:	b29b      	uxth	r3, r3
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7fa ffdc 	bl	800daf0 <lwip_htons>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	b2db      	uxtb	r3, r3
 8012b3c:	f003 0301 	and.w	r3, r3, #1
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d01f      	beq.n	8012b84 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012b44:	4b65      	ldr	r3, [pc, #404]	; (8012cdc <tcp_receive+0x888>)
 8012b46:	68db      	ldr	r3, [r3, #12]
 8012b48:	899b      	ldrh	r3, [r3, #12]
 8012b4a:	b29b      	uxth	r3, r3
 8012b4c:	b21b      	sxth	r3, r3
 8012b4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012b52:	b21c      	sxth	r4, r3
 8012b54:	4b61      	ldr	r3, [pc, #388]	; (8012cdc <tcp_receive+0x888>)
 8012b56:	68db      	ldr	r3, [r3, #12]
 8012b58:	899b      	ldrh	r3, [r3, #12]
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f7fa ffc7 	bl	800daf0 <lwip_htons>
 8012b62:	4603      	mov	r3, r0
 8012b64:	b2db      	uxtb	r3, r3
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012b6c:	b29b      	uxth	r3, r3
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7fa ffbe 	bl	800daf0 <lwip_htons>
 8012b74:	4603      	mov	r3, r0
 8012b76:	b21b      	sxth	r3, r3
 8012b78:	4323      	orrs	r3, r4
 8012b7a:	b21a      	sxth	r2, r3
 8012b7c:	4b57      	ldr	r3, [pc, #348]	; (8012cdc <tcp_receive+0x888>)
 8012b7e:	68db      	ldr	r3, [r3, #12]
 8012b80:	b292      	uxth	r2, r2
 8012b82:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012b88:	4b54      	ldr	r3, [pc, #336]	; (8012cdc <tcp_receive+0x888>)
 8012b8a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012b8c:	4b53      	ldr	r3, [pc, #332]	; (8012cdc <tcp_receive+0x888>)
 8012b8e:	68db      	ldr	r3, [r3, #12]
 8012b90:	899b      	ldrh	r3, [r3, #12]
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	4618      	mov	r0, r3
 8012b96:	f7fa ffab 	bl	800daf0 <lwip_htons>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	b2db      	uxtb	r3, r3
 8012b9e:	f003 0302 	and.w	r3, r3, #2
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d005      	beq.n	8012bb2 <tcp_receive+0x75e>
            inseg.len -= 1;
 8012ba6:	4b4d      	ldr	r3, [pc, #308]	; (8012cdc <tcp_receive+0x888>)
 8012ba8:	891b      	ldrh	r3, [r3, #8]
 8012baa:	3b01      	subs	r3, #1
 8012bac:	b29a      	uxth	r2, r3
 8012bae:	4b4b      	ldr	r3, [pc, #300]	; (8012cdc <tcp_receive+0x888>)
 8012bb0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012bb2:	4b4a      	ldr	r3, [pc, #296]	; (8012cdc <tcp_receive+0x888>)
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	4a49      	ldr	r2, [pc, #292]	; (8012cdc <tcp_receive+0x888>)
 8012bb8:	8912      	ldrh	r2, [r2, #8]
 8012bba:	4611      	mov	r1, r2
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7fc f9c9 	bl	800ef54 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012bc2:	4b46      	ldr	r3, [pc, #280]	; (8012cdc <tcp_receive+0x888>)
 8012bc4:	891c      	ldrh	r4, [r3, #8]
 8012bc6:	4b45      	ldr	r3, [pc, #276]	; (8012cdc <tcp_receive+0x888>)
 8012bc8:	68db      	ldr	r3, [r3, #12]
 8012bca:	899b      	ldrh	r3, [r3, #12]
 8012bcc:	b29b      	uxth	r3, r3
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7fa ff8e 	bl	800daf0 <lwip_htons>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	b2db      	uxtb	r3, r3
 8012bd8:	f003 0303 	and.w	r3, r3, #3
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d001      	beq.n	8012be4 <tcp_receive+0x790>
 8012be0:	2301      	movs	r3, #1
 8012be2:	e000      	b.n	8012be6 <tcp_receive+0x792>
 8012be4:	2300      	movs	r3, #0
 8012be6:	4423      	add	r3, r4
 8012be8:	b29a      	uxth	r2, r3
 8012bea:	4b3d      	ldr	r3, [pc, #244]	; (8012ce0 <tcp_receive+0x88c>)
 8012bec:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012bee:	4b3c      	ldr	r3, [pc, #240]	; (8012ce0 <tcp_receive+0x88c>)
 8012bf0:	881b      	ldrh	r3, [r3, #0]
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	4b38      	ldr	r3, [pc, #224]	; (8012cd8 <tcp_receive+0x884>)
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	441a      	add	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bfe:	6879      	ldr	r1, [r7, #4]
 8012c00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c02:	440b      	add	r3, r1
 8012c04:	429a      	cmp	r2, r3
 8012c06:	d006      	beq.n	8012c16 <tcp_receive+0x7c2>
 8012c08:	4b36      	ldr	r3, [pc, #216]	; (8012ce4 <tcp_receive+0x890>)
 8012c0a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012c0e:	4936      	ldr	r1, [pc, #216]	; (8012ce8 <tcp_receive+0x894>)
 8012c10:	4836      	ldr	r0, [pc, #216]	; (8012cec <tcp_receive+0x898>)
 8012c12:	f007 fc1f 	bl	801a454 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	f000 80e7 	beq.w	8012dee <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012c20:	4b2e      	ldr	r3, [pc, #184]	; (8012cdc <tcp_receive+0x888>)
 8012c22:	68db      	ldr	r3, [r3, #12]
 8012c24:	899b      	ldrh	r3, [r3, #12]
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7fa ff61 	bl	800daf0 <lwip_htons>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	b2db      	uxtb	r3, r3
 8012c32:	f003 0301 	and.w	r3, r3, #1
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d010      	beq.n	8012c5c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012c3a:	e00a      	b.n	8012c52 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c40:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c46:	681a      	ldr	r2, [r3, #0]
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012c4c:	68f8      	ldr	r0, [r7, #12]
 8012c4e:	f7fd fd96 	bl	801077e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d1f0      	bne.n	8012c3c <tcp_receive+0x7e8>
 8012c5a:	e0c8      	b.n	8012dee <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c60:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012c62:	e052      	b.n	8012d0a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c66:	68db      	ldr	r3, [r3, #12]
 8012c68:	899b      	ldrh	r3, [r3, #12]
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7fa ff3f 	bl	800daf0 <lwip_htons>
 8012c72:	4603      	mov	r3, r0
 8012c74:	b2db      	uxtb	r3, r3
 8012c76:	f003 0301 	and.w	r3, r3, #1
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d03d      	beq.n	8012cfa <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012c7e:	4b17      	ldr	r3, [pc, #92]	; (8012cdc <tcp_receive+0x888>)
 8012c80:	68db      	ldr	r3, [r3, #12]
 8012c82:	899b      	ldrh	r3, [r3, #12]
 8012c84:	b29b      	uxth	r3, r3
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7fa ff32 	bl	800daf0 <lwip_htons>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	b2db      	uxtb	r3, r3
 8012c90:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d130      	bne.n	8012cfa <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012c98:	4b10      	ldr	r3, [pc, #64]	; (8012cdc <tcp_receive+0x888>)
 8012c9a:	68db      	ldr	r3, [r3, #12]
 8012c9c:	899b      	ldrh	r3, [r3, #12]
 8012c9e:	b29c      	uxth	r4, r3
 8012ca0:	2001      	movs	r0, #1
 8012ca2:	f7fa ff25 	bl	800daf0 <lwip_htons>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	461a      	mov	r2, r3
 8012caa:	4b0c      	ldr	r3, [pc, #48]	; (8012cdc <tcp_receive+0x888>)
 8012cac:	68db      	ldr	r3, [r3, #12]
 8012cae:	4322      	orrs	r2, r4
 8012cb0:	b292      	uxth	r2, r2
 8012cb2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012cb4:	4b09      	ldr	r3, [pc, #36]	; (8012cdc <tcp_receive+0x888>)
 8012cb6:	891c      	ldrh	r4, [r3, #8]
 8012cb8:	4b08      	ldr	r3, [pc, #32]	; (8012cdc <tcp_receive+0x888>)
 8012cba:	68db      	ldr	r3, [r3, #12]
 8012cbc:	899b      	ldrh	r3, [r3, #12]
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7fa ff15 	bl	800daf0 <lwip_htons>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	b2db      	uxtb	r3, r3
 8012cca:	f003 0303 	and.w	r3, r3, #3
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d00e      	beq.n	8012cf0 <tcp_receive+0x89c>
 8012cd2:	2301      	movs	r3, #1
 8012cd4:	e00d      	b.n	8012cf2 <tcp_receive+0x89e>
 8012cd6:	bf00      	nop
 8012cd8:	200084f4 	.word	0x200084f4
 8012cdc:	200084d4 	.word	0x200084d4
 8012ce0:	200084fe 	.word	0x200084fe
 8012ce4:	0801ce10 	.word	0x0801ce10
 8012ce8:	0801d1b8 	.word	0x0801d1b8
 8012cec:	0801ce5c 	.word	0x0801ce5c
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	4423      	add	r3, r4
 8012cf4:	b29a      	uxth	r2, r3
 8012cf6:	4b98      	ldr	r3, [pc, #608]	; (8012f58 <tcp_receive+0xb04>)
 8012cf8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cfc:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012d04:	6938      	ldr	r0, [r7, #16]
 8012d06:	f7fd fd3a 	bl	801077e <tcp_seg_free>
            while (next &&
 8012d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d00e      	beq.n	8012d2e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012d10:	4b91      	ldr	r3, [pc, #580]	; (8012f58 <tcp_receive+0xb04>)
 8012d12:	881b      	ldrh	r3, [r3, #0]
 8012d14:	461a      	mov	r2, r3
 8012d16:	4b91      	ldr	r3, [pc, #580]	; (8012f5c <tcp_receive+0xb08>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	441a      	add	r2, r3
 8012d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d1e:	68db      	ldr	r3, [r3, #12]
 8012d20:	685b      	ldr	r3, [r3, #4]
 8012d22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012d24:	8909      	ldrh	r1, [r1, #8]
 8012d26:	440b      	add	r3, r1
 8012d28:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	da9a      	bge.n	8012c64 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d059      	beq.n	8012de8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012d34:	4b88      	ldr	r3, [pc, #544]	; (8012f58 <tcp_receive+0xb04>)
 8012d36:	881b      	ldrh	r3, [r3, #0]
 8012d38:	461a      	mov	r2, r3
 8012d3a:	4b88      	ldr	r3, [pc, #544]	; (8012f5c <tcp_receive+0xb08>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	441a      	add	r2, r3
 8012d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d42:	68db      	ldr	r3, [r3, #12]
 8012d44:	685b      	ldr	r3, [r3, #4]
 8012d46:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	dd4d      	ble.n	8012de8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	b29a      	uxth	r2, r3
 8012d54:	4b81      	ldr	r3, [pc, #516]	; (8012f5c <tcp_receive+0xb08>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	b29b      	uxth	r3, r3
 8012d5a:	1ad3      	subs	r3, r2, r3
 8012d5c:	b29a      	uxth	r2, r3
 8012d5e:	4b80      	ldr	r3, [pc, #512]	; (8012f60 <tcp_receive+0xb0c>)
 8012d60:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012d62:	4b7f      	ldr	r3, [pc, #508]	; (8012f60 <tcp_receive+0xb0c>)
 8012d64:	68db      	ldr	r3, [r3, #12]
 8012d66:	899b      	ldrh	r3, [r3, #12]
 8012d68:	b29b      	uxth	r3, r3
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7fa fec0 	bl	800daf0 <lwip_htons>
 8012d70:	4603      	mov	r3, r0
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	f003 0302 	and.w	r3, r3, #2
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d005      	beq.n	8012d88 <tcp_receive+0x934>
                inseg.len -= 1;
 8012d7c:	4b78      	ldr	r3, [pc, #480]	; (8012f60 <tcp_receive+0xb0c>)
 8012d7e:	891b      	ldrh	r3, [r3, #8]
 8012d80:	3b01      	subs	r3, #1
 8012d82:	b29a      	uxth	r2, r3
 8012d84:	4b76      	ldr	r3, [pc, #472]	; (8012f60 <tcp_receive+0xb0c>)
 8012d86:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012d88:	4b75      	ldr	r3, [pc, #468]	; (8012f60 <tcp_receive+0xb0c>)
 8012d8a:	685b      	ldr	r3, [r3, #4]
 8012d8c:	4a74      	ldr	r2, [pc, #464]	; (8012f60 <tcp_receive+0xb0c>)
 8012d8e:	8912      	ldrh	r2, [r2, #8]
 8012d90:	4611      	mov	r1, r2
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7fc f8de 	bl	800ef54 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012d98:	4b71      	ldr	r3, [pc, #452]	; (8012f60 <tcp_receive+0xb0c>)
 8012d9a:	891c      	ldrh	r4, [r3, #8]
 8012d9c:	4b70      	ldr	r3, [pc, #448]	; (8012f60 <tcp_receive+0xb0c>)
 8012d9e:	68db      	ldr	r3, [r3, #12]
 8012da0:	899b      	ldrh	r3, [r3, #12]
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	4618      	mov	r0, r3
 8012da6:	f7fa fea3 	bl	800daf0 <lwip_htons>
 8012daa:	4603      	mov	r3, r0
 8012dac:	b2db      	uxtb	r3, r3
 8012dae:	f003 0303 	and.w	r3, r3, #3
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d001      	beq.n	8012dba <tcp_receive+0x966>
 8012db6:	2301      	movs	r3, #1
 8012db8:	e000      	b.n	8012dbc <tcp_receive+0x968>
 8012dba:	2300      	movs	r3, #0
 8012dbc:	4423      	add	r3, r4
 8012dbe:	b29a      	uxth	r2, r3
 8012dc0:	4b65      	ldr	r3, [pc, #404]	; (8012f58 <tcp_receive+0xb04>)
 8012dc2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012dc4:	4b64      	ldr	r3, [pc, #400]	; (8012f58 <tcp_receive+0xb04>)
 8012dc6:	881b      	ldrh	r3, [r3, #0]
 8012dc8:	461a      	mov	r2, r3
 8012dca:	4b64      	ldr	r3, [pc, #400]	; (8012f5c <tcp_receive+0xb08>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	441a      	add	r2, r3
 8012dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	685b      	ldr	r3, [r3, #4]
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d006      	beq.n	8012de8 <tcp_receive+0x994>
 8012dda:	4b62      	ldr	r3, [pc, #392]	; (8012f64 <tcp_receive+0xb10>)
 8012ddc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012de0:	4961      	ldr	r1, [pc, #388]	; (8012f68 <tcp_receive+0xb14>)
 8012de2:	4862      	ldr	r0, [pc, #392]	; (8012f6c <tcp_receive+0xb18>)
 8012de4:	f007 fb36 	bl	801a454 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012dec:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012dee:	4b5a      	ldr	r3, [pc, #360]	; (8012f58 <tcp_receive+0xb04>)
 8012df0:	881b      	ldrh	r3, [r3, #0]
 8012df2:	461a      	mov	r2, r3
 8012df4:	4b59      	ldr	r3, [pc, #356]	; (8012f5c <tcp_receive+0xb08>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	441a      	add	r2, r3
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e02:	4b55      	ldr	r3, [pc, #340]	; (8012f58 <tcp_receive+0xb04>)
 8012e04:	881b      	ldrh	r3, [r3, #0]
 8012e06:	429a      	cmp	r2, r3
 8012e08:	d206      	bcs.n	8012e18 <tcp_receive+0x9c4>
 8012e0a:	4b56      	ldr	r3, [pc, #344]	; (8012f64 <tcp_receive+0xb10>)
 8012e0c:	f240 6207 	movw	r2, #1543	; 0x607
 8012e10:	4957      	ldr	r1, [pc, #348]	; (8012f70 <tcp_receive+0xb1c>)
 8012e12:	4856      	ldr	r0, [pc, #344]	; (8012f6c <tcp_receive+0xb18>)
 8012e14:	f007 fb1e 	bl	801a454 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e1c:	4b4e      	ldr	r3, [pc, #312]	; (8012f58 <tcp_receive+0xb04>)
 8012e1e:	881b      	ldrh	r3, [r3, #0]
 8012e20:	1ad3      	subs	r3, r2, r3
 8012e22:	b29a      	uxth	r2, r3
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f7fc ffc9 	bl	800fdc0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012e2e:	4b4c      	ldr	r3, [pc, #304]	; (8012f60 <tcp_receive+0xb0c>)
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	891b      	ldrh	r3, [r3, #8]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d006      	beq.n	8012e46 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012e38:	4b49      	ldr	r3, [pc, #292]	; (8012f60 <tcp_receive+0xb0c>)
 8012e3a:	685b      	ldr	r3, [r3, #4]
 8012e3c:	4a4d      	ldr	r2, [pc, #308]	; (8012f74 <tcp_receive+0xb20>)
 8012e3e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012e40:	4b47      	ldr	r3, [pc, #284]	; (8012f60 <tcp_receive+0xb0c>)
 8012e42:	2200      	movs	r2, #0
 8012e44:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012e46:	4b46      	ldr	r3, [pc, #280]	; (8012f60 <tcp_receive+0xb0c>)
 8012e48:	68db      	ldr	r3, [r3, #12]
 8012e4a:	899b      	ldrh	r3, [r3, #12]
 8012e4c:	b29b      	uxth	r3, r3
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7fa fe4e 	bl	800daf0 <lwip_htons>
 8012e54:	4603      	mov	r3, r0
 8012e56:	b2db      	uxtb	r3, r3
 8012e58:	f003 0301 	and.w	r3, r3, #1
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	f000 80b8 	beq.w	8012fd2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012e62:	4b45      	ldr	r3, [pc, #276]	; (8012f78 <tcp_receive+0xb24>)
 8012e64:	781b      	ldrb	r3, [r3, #0]
 8012e66:	f043 0320 	orr.w	r3, r3, #32
 8012e6a:	b2da      	uxtb	r2, r3
 8012e6c:	4b42      	ldr	r3, [pc, #264]	; (8012f78 <tcp_receive+0xb24>)
 8012e6e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012e70:	e0af      	b.n	8012fd2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e76:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e7c:	68db      	ldr	r3, [r3, #12]
 8012e7e:	685b      	ldr	r3, [r3, #4]
 8012e80:	4a36      	ldr	r2, [pc, #216]	; (8012f5c <tcp_receive+0xb08>)
 8012e82:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	891b      	ldrh	r3, [r3, #8]
 8012e88:	461c      	mov	r4, r3
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	68db      	ldr	r3, [r3, #12]
 8012e8e:	899b      	ldrh	r3, [r3, #12]
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7fa fe2c 	bl	800daf0 <lwip_htons>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	f003 0303 	and.w	r3, r3, #3
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d001      	beq.n	8012ea8 <tcp_receive+0xa54>
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	e000      	b.n	8012eaa <tcp_receive+0xa56>
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	191a      	adds	r2, r3, r4
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb0:	441a      	add	r2, r3
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012eba:	461c      	mov	r4, r3
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	891b      	ldrh	r3, [r3, #8]
 8012ec0:	461d      	mov	r5, r3
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	68db      	ldr	r3, [r3, #12]
 8012ec6:	899b      	ldrh	r3, [r3, #12]
 8012ec8:	b29b      	uxth	r3, r3
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f7fa fe10 	bl	800daf0 <lwip_htons>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	b2db      	uxtb	r3, r3
 8012ed4:	f003 0303 	and.w	r3, r3, #3
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d001      	beq.n	8012ee0 <tcp_receive+0xa8c>
 8012edc:	2301      	movs	r3, #1
 8012ede:	e000      	b.n	8012ee2 <tcp_receive+0xa8e>
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	442b      	add	r3, r5
 8012ee4:	429c      	cmp	r4, r3
 8012ee6:	d206      	bcs.n	8012ef6 <tcp_receive+0xaa2>
 8012ee8:	4b1e      	ldr	r3, [pc, #120]	; (8012f64 <tcp_receive+0xb10>)
 8012eea:	f240 622b 	movw	r2, #1579	; 0x62b
 8012eee:	4923      	ldr	r1, [pc, #140]	; (8012f7c <tcp_receive+0xb28>)
 8012ef0:	481e      	ldr	r0, [pc, #120]	; (8012f6c <tcp_receive+0xb18>)
 8012ef2:	f007 faaf 	bl	801a454 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	891b      	ldrh	r3, [r3, #8]
 8012efa:	461c      	mov	r4, r3
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	68db      	ldr	r3, [r3, #12]
 8012f00:	899b      	ldrh	r3, [r3, #12]
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7fa fdf3 	bl	800daf0 <lwip_htons>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	b2db      	uxtb	r3, r3
 8012f0e:	f003 0303 	and.w	r3, r3, #3
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d001      	beq.n	8012f1a <tcp_receive+0xac6>
 8012f16:	2301      	movs	r3, #1
 8012f18:	e000      	b.n	8012f1c <tcp_receive+0xac8>
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	1919      	adds	r1, r3, r4
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012f22:	b28b      	uxth	r3, r1
 8012f24:	1ad3      	subs	r3, r2, r3
 8012f26:	b29a      	uxth	r2, r3
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f7fc ff47 	bl	800fdc0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	685b      	ldr	r3, [r3, #4]
 8012f36:	891b      	ldrh	r3, [r3, #8]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d028      	beq.n	8012f8e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012f3c:	4b0d      	ldr	r3, [pc, #52]	; (8012f74 <tcp_receive+0xb20>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d01d      	beq.n	8012f80 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012f44:	4b0b      	ldr	r3, [pc, #44]	; (8012f74 <tcp_receive+0xb20>)
 8012f46:	681a      	ldr	r2, [r3, #0]
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	685b      	ldr	r3, [r3, #4]
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	4610      	mov	r0, r2
 8012f50:	f7fc fa54 	bl	800f3fc <pbuf_cat>
 8012f54:	e018      	b.n	8012f88 <tcp_receive+0xb34>
 8012f56:	bf00      	nop
 8012f58:	200084fe 	.word	0x200084fe
 8012f5c:	200084f4 	.word	0x200084f4
 8012f60:	200084d4 	.word	0x200084d4
 8012f64:	0801ce10 	.word	0x0801ce10
 8012f68:	0801d1f0 	.word	0x0801d1f0
 8012f6c:	0801ce5c 	.word	0x0801ce5c
 8012f70:	0801d22c 	.word	0x0801d22c
 8012f74:	20008504 	.word	0x20008504
 8012f78:	20008501 	.word	0x20008501
 8012f7c:	0801d24c 	.word	0x0801d24c
            } else {
              recv_data = cseg->p;
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	685b      	ldr	r3, [r3, #4]
 8012f84:	4a70      	ldr	r2, [pc, #448]	; (8013148 <tcp_receive+0xcf4>)
 8012f86:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	68db      	ldr	r3, [r3, #12]
 8012f92:	899b      	ldrh	r3, [r3, #12]
 8012f94:	b29b      	uxth	r3, r3
 8012f96:	4618      	mov	r0, r3
 8012f98:	f7fa fdaa 	bl	800daf0 <lwip_htons>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	b2db      	uxtb	r3, r3
 8012fa0:	f003 0301 	and.w	r3, r3, #1
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d00d      	beq.n	8012fc4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012fa8:	4b68      	ldr	r3, [pc, #416]	; (801314c <tcp_receive+0xcf8>)
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	f043 0320 	orr.w	r3, r3, #32
 8012fb0:	b2da      	uxtb	r2, r3
 8012fb2:	4b66      	ldr	r3, [pc, #408]	; (801314c <tcp_receive+0xcf8>)
 8012fb4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	7d1b      	ldrb	r3, [r3, #20]
 8012fba:	2b04      	cmp	r3, #4
 8012fbc:	d102      	bne.n	8012fc4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	2207      	movs	r2, #7
 8012fc2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012fc4:	68bb      	ldr	r3, [r7, #8]
 8012fc6:	681a      	ldr	r2, [r3, #0]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012fcc:	68b8      	ldr	r0, [r7, #8]
 8012fce:	f7fd fbd6 	bl	801077e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d008      	beq.n	8012fec <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fde:	68db      	ldr	r3, [r3, #12]
 8012fe0:	685a      	ldr	r2, [r3, #4]
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	f43f af43 	beq.w	8012e72 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	8b5b      	ldrh	r3, [r3, #26]
 8012ff0:	f003 0301 	and.w	r3, r3, #1
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d00e      	beq.n	8013016 <tcp_receive+0xbc2>
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	8b5b      	ldrh	r3, [r3, #26]
 8012ffc:	f023 0301 	bic.w	r3, r3, #1
 8013000:	b29a      	uxth	r2, r3
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	835a      	strh	r2, [r3, #26]
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	8b5b      	ldrh	r3, [r3, #26]
 801300a:	f043 0302 	orr.w	r3, r3, #2
 801300e:	b29a      	uxth	r2, r3
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013014:	e188      	b.n	8013328 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	8b5b      	ldrh	r3, [r3, #26]
 801301a:	f043 0301 	orr.w	r3, r3, #1
 801301e:	b29a      	uxth	r2, r3
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013024:	e180      	b.n	8013328 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801302a:	2b00      	cmp	r3, #0
 801302c:	d106      	bne.n	801303c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801302e:	4848      	ldr	r0, [pc, #288]	; (8013150 <tcp_receive+0xcfc>)
 8013030:	f7fd fbbe 	bl	80107b0 <tcp_seg_copy>
 8013034:	4602      	mov	r2, r0
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	675a      	str	r2, [r3, #116]	; 0x74
 801303a:	e16d      	b.n	8013318 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801303c:	2300      	movs	r3, #0
 801303e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013044:	63bb      	str	r3, [r7, #56]	; 0x38
 8013046:	e157      	b.n	80132f8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8013048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304a:	68db      	ldr	r3, [r3, #12]
 801304c:	685a      	ldr	r2, [r3, #4]
 801304e:	4b41      	ldr	r3, [pc, #260]	; (8013154 <tcp_receive+0xd00>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	429a      	cmp	r2, r3
 8013054:	d11d      	bne.n	8013092 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013056:	4b3e      	ldr	r3, [pc, #248]	; (8013150 <tcp_receive+0xcfc>)
 8013058:	891a      	ldrh	r2, [r3, #8]
 801305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305c:	891b      	ldrh	r3, [r3, #8]
 801305e:	429a      	cmp	r2, r3
 8013060:	f240 814f 	bls.w	8013302 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013064:	483a      	ldr	r0, [pc, #232]	; (8013150 <tcp_receive+0xcfc>)
 8013066:	f7fd fba3 	bl	80107b0 <tcp_seg_copy>
 801306a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	2b00      	cmp	r3, #0
 8013070:	f000 8149 	beq.w	8013306 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8013074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013076:	2b00      	cmp	r3, #0
 8013078:	d003      	beq.n	8013082 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801307a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801307c:	697a      	ldr	r2, [r7, #20]
 801307e:	601a      	str	r2, [r3, #0]
 8013080:	e002      	b.n	8013088 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	697a      	ldr	r2, [r7, #20]
 8013086:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013088:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801308a:	6978      	ldr	r0, [r7, #20]
 801308c:	f7ff f8de 	bl	801224c <tcp_oos_insert_segment>
                }
                break;
 8013090:	e139      	b.n	8013306 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013094:	2b00      	cmp	r3, #0
 8013096:	d117      	bne.n	80130c8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013098:	4b2e      	ldr	r3, [pc, #184]	; (8013154 <tcp_receive+0xd00>)
 801309a:	681a      	ldr	r2, [r3, #0]
 801309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801309e:	68db      	ldr	r3, [r3, #12]
 80130a0:	685b      	ldr	r3, [r3, #4]
 80130a2:	1ad3      	subs	r3, r2, r3
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	da57      	bge.n	8013158 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80130a8:	4829      	ldr	r0, [pc, #164]	; (8013150 <tcp_receive+0xcfc>)
 80130aa:	f7fd fb81 	bl	80107b0 <tcp_seg_copy>
 80130ae:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80130b0:	69bb      	ldr	r3, [r7, #24]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	f000 8129 	beq.w	801330a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	69ba      	ldr	r2, [r7, #24]
 80130bc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80130be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80130c0:	69b8      	ldr	r0, [r7, #24]
 80130c2:	f7ff f8c3 	bl	801224c <tcp_oos_insert_segment>
                  }
                  break;
 80130c6:	e120      	b.n	801330a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80130c8:	4b22      	ldr	r3, [pc, #136]	; (8013154 <tcp_receive+0xd00>)
 80130ca:	681a      	ldr	r2, [r3, #0]
 80130cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ce:	68db      	ldr	r3, [r3, #12]
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	1ad3      	subs	r3, r2, r3
 80130d4:	3b01      	subs	r3, #1
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	db3e      	blt.n	8013158 <tcp_receive+0xd04>
 80130da:	4b1e      	ldr	r3, [pc, #120]	; (8013154 <tcp_receive+0xd00>)
 80130dc:	681a      	ldr	r2, [r3, #0]
 80130de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e0:	68db      	ldr	r3, [r3, #12]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	1ad3      	subs	r3, r2, r3
 80130e6:	3301      	adds	r3, #1
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	dc35      	bgt.n	8013158 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80130ec:	4818      	ldr	r0, [pc, #96]	; (8013150 <tcp_receive+0xcfc>)
 80130ee:	f7fd fb5f 	bl	80107b0 <tcp_seg_copy>
 80130f2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80130f4:	69fb      	ldr	r3, [r7, #28]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	f000 8109 	beq.w	801330e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80130fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130fe:	68db      	ldr	r3, [r3, #12]
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013104:	8912      	ldrh	r2, [r2, #8]
 8013106:	441a      	add	r2, r3
 8013108:	4b12      	ldr	r3, [pc, #72]	; (8013154 <tcp_receive+0xd00>)
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	1ad3      	subs	r3, r2, r3
 801310e:	2b00      	cmp	r3, #0
 8013110:	dd12      	ble.n	8013138 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013112:	4b10      	ldr	r3, [pc, #64]	; (8013154 <tcp_receive+0xd00>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	b29a      	uxth	r2, r3
 8013118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801311a:	68db      	ldr	r3, [r3, #12]
 801311c:	685b      	ldr	r3, [r3, #4]
 801311e:	b29b      	uxth	r3, r3
 8013120:	1ad3      	subs	r3, r2, r3
 8013122:	b29a      	uxth	r2, r3
 8013124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013126:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801312a:	685a      	ldr	r2, [r3, #4]
 801312c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801312e:	891b      	ldrh	r3, [r3, #8]
 8013130:	4619      	mov	r1, r3
 8013132:	4610      	mov	r0, r2
 8013134:	f7fb ff0e 	bl	800ef54 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801313a:	69fa      	ldr	r2, [r7, #28]
 801313c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801313e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013140:	69f8      	ldr	r0, [r7, #28]
 8013142:	f7ff f883 	bl	801224c <tcp_oos_insert_segment>
                  }
                  break;
 8013146:	e0e2      	b.n	801330e <tcp_receive+0xeba>
 8013148:	20008504 	.word	0x20008504
 801314c:	20008501 	.word	0x20008501
 8013150:	200084d4 	.word	0x200084d4
 8013154:	200084f4 	.word	0x200084f4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801315a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	2b00      	cmp	r3, #0
 8013162:	f040 80c6 	bne.w	80132f2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013166:	4b80      	ldr	r3, [pc, #512]	; (8013368 <tcp_receive+0xf14>)
 8013168:	681a      	ldr	r2, [r3, #0]
 801316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801316c:	68db      	ldr	r3, [r3, #12]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013172:	2b00      	cmp	r3, #0
 8013174:	f340 80bd 	ble.w	80132f2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801317a:	68db      	ldr	r3, [r3, #12]
 801317c:	899b      	ldrh	r3, [r3, #12]
 801317e:	b29b      	uxth	r3, r3
 8013180:	4618      	mov	r0, r3
 8013182:	f7fa fcb5 	bl	800daf0 <lwip_htons>
 8013186:	4603      	mov	r3, r0
 8013188:	b2db      	uxtb	r3, r3
 801318a:	f003 0301 	and.w	r3, r3, #1
 801318e:	2b00      	cmp	r3, #0
 8013190:	f040 80bf 	bne.w	8013312 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013194:	4875      	ldr	r0, [pc, #468]	; (801336c <tcp_receive+0xf18>)
 8013196:	f7fd fb0b 	bl	80107b0 <tcp_seg_copy>
 801319a:	4602      	mov	r2, r0
 801319c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801319e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80131a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	f000 80b6 	beq.w	8013316 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80131aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ac:	68db      	ldr	r3, [r3, #12]
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131b2:	8912      	ldrh	r2, [r2, #8]
 80131b4:	441a      	add	r2, r3
 80131b6:	4b6c      	ldr	r3, [pc, #432]	; (8013368 <tcp_receive+0xf14>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	1ad3      	subs	r3, r2, r3
 80131bc:	2b00      	cmp	r3, #0
 80131be:	dd12      	ble.n	80131e6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80131c0:	4b69      	ldr	r3, [pc, #420]	; (8013368 <tcp_receive+0xf14>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	b29a      	uxth	r2, r3
 80131c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c8:	68db      	ldr	r3, [r3, #12]
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	b29b      	uxth	r3, r3
 80131ce:	1ad3      	subs	r3, r2, r3
 80131d0:	b29a      	uxth	r2, r3
 80131d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80131d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d8:	685a      	ldr	r2, [r3, #4]
 80131da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131dc:	891b      	ldrh	r3, [r3, #8]
 80131de:	4619      	mov	r1, r3
 80131e0:	4610      	mov	r0, r2
 80131e2:	f7fb feb7 	bl	800ef54 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80131e6:	4b62      	ldr	r3, [pc, #392]	; (8013370 <tcp_receive+0xf1c>)
 80131e8:	881b      	ldrh	r3, [r3, #0]
 80131ea:	461a      	mov	r2, r3
 80131ec:	4b5e      	ldr	r3, [pc, #376]	; (8013368 <tcp_receive+0xf14>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	441a      	add	r2, r3
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131f6:	6879      	ldr	r1, [r7, #4]
 80131f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80131fa:	440b      	add	r3, r1
 80131fc:	1ad3      	subs	r3, r2, r3
 80131fe:	2b00      	cmp	r3, #0
 8013200:	f340 8089 	ble.w	8013316 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	899b      	ldrh	r3, [r3, #12]
 801320c:	b29b      	uxth	r3, r3
 801320e:	4618      	mov	r0, r3
 8013210:	f7fa fc6e 	bl	800daf0 <lwip_htons>
 8013214:	4603      	mov	r3, r0
 8013216:	b2db      	uxtb	r3, r3
 8013218:	f003 0301 	and.w	r3, r3, #1
 801321c:	2b00      	cmp	r3, #0
 801321e:	d022      	beq.n	8013266 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	68db      	ldr	r3, [r3, #12]
 8013226:	899b      	ldrh	r3, [r3, #12]
 8013228:	b29b      	uxth	r3, r3
 801322a:	b21b      	sxth	r3, r3
 801322c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013230:	b21c      	sxth	r4, r3
 8013232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	68db      	ldr	r3, [r3, #12]
 8013238:	899b      	ldrh	r3, [r3, #12]
 801323a:	b29b      	uxth	r3, r3
 801323c:	4618      	mov	r0, r3
 801323e:	f7fa fc57 	bl	800daf0 <lwip_htons>
 8013242:	4603      	mov	r3, r0
 8013244:	b2db      	uxtb	r3, r3
 8013246:	b29b      	uxth	r3, r3
 8013248:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801324c:	b29b      	uxth	r3, r3
 801324e:	4618      	mov	r0, r3
 8013250:	f7fa fc4e 	bl	800daf0 <lwip_htons>
 8013254:	4603      	mov	r3, r0
 8013256:	b21b      	sxth	r3, r3
 8013258:	4323      	orrs	r3, r4
 801325a:	b21a      	sxth	r2, r3
 801325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	68db      	ldr	r3, [r3, #12]
 8013262:	b292      	uxth	r2, r2
 8013264:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801326a:	b29a      	uxth	r2, r3
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013270:	4413      	add	r3, r2
 8013272:	b299      	uxth	r1, r3
 8013274:	4b3c      	ldr	r3, [pc, #240]	; (8013368 <tcp_receive+0xf14>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	b29a      	uxth	r2, r3
 801327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	1a8a      	subs	r2, r1, r2
 8013280:	b292      	uxth	r2, r2
 8013282:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	685a      	ldr	r2, [r3, #4]
 801328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	891b      	ldrh	r3, [r3, #8]
 8013290:	4619      	mov	r1, r3
 8013292:	4610      	mov	r0, r2
 8013294:	f7fb fe5e 	bl	800ef54 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	891c      	ldrh	r4, [r3, #8]
 801329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	68db      	ldr	r3, [r3, #12]
 80132a4:	899b      	ldrh	r3, [r3, #12]
 80132a6:	b29b      	uxth	r3, r3
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7fa fc21 	bl	800daf0 <lwip_htons>
 80132ae:	4603      	mov	r3, r0
 80132b0:	b2db      	uxtb	r3, r3
 80132b2:	f003 0303 	and.w	r3, r3, #3
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d001      	beq.n	80132be <tcp_receive+0xe6a>
 80132ba:	2301      	movs	r3, #1
 80132bc:	e000      	b.n	80132c0 <tcp_receive+0xe6c>
 80132be:	2300      	movs	r3, #0
 80132c0:	4423      	add	r3, r4
 80132c2:	b29a      	uxth	r2, r3
 80132c4:	4b2a      	ldr	r3, [pc, #168]	; (8013370 <tcp_receive+0xf1c>)
 80132c6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80132c8:	4b29      	ldr	r3, [pc, #164]	; (8013370 <tcp_receive+0xf1c>)
 80132ca:	881b      	ldrh	r3, [r3, #0]
 80132cc:	461a      	mov	r2, r3
 80132ce:	4b26      	ldr	r3, [pc, #152]	; (8013368 <tcp_receive+0xf14>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	441a      	add	r2, r3
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132d8:	6879      	ldr	r1, [r7, #4]
 80132da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80132dc:	440b      	add	r3, r1
 80132de:	429a      	cmp	r2, r3
 80132e0:	d019      	beq.n	8013316 <tcp_receive+0xec2>
 80132e2:	4b24      	ldr	r3, [pc, #144]	; (8013374 <tcp_receive+0xf20>)
 80132e4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80132e8:	4923      	ldr	r1, [pc, #140]	; (8013378 <tcp_receive+0xf24>)
 80132ea:	4824      	ldr	r0, [pc, #144]	; (801337c <tcp_receive+0xf28>)
 80132ec:	f007 f8b2 	bl	801a454 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80132f0:	e011      	b.n	8013316 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80132f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80132f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	f47f aea4 	bne.w	8013048 <tcp_receive+0xbf4>
 8013300:	e00a      	b.n	8013318 <tcp_receive+0xec4>
                break;
 8013302:	bf00      	nop
 8013304:	e008      	b.n	8013318 <tcp_receive+0xec4>
                break;
 8013306:	bf00      	nop
 8013308:	e006      	b.n	8013318 <tcp_receive+0xec4>
                  break;
 801330a:	bf00      	nop
 801330c:	e004      	b.n	8013318 <tcp_receive+0xec4>
                  break;
 801330e:	bf00      	nop
 8013310:	e002      	b.n	8013318 <tcp_receive+0xec4>
                  break;
 8013312:	bf00      	nop
 8013314:	e000      	b.n	8013318 <tcp_receive+0xec4>
                break;
 8013316:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f001 fa33 	bl	8014784 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801331e:	e003      	b.n	8013328 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f001 fa2f 	bl	8014784 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013326:	e01a      	b.n	801335e <tcp_receive+0xf0a>
 8013328:	e019      	b.n	801335e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801332a:	4b0f      	ldr	r3, [pc, #60]	; (8013368 <tcp_receive+0xf14>)
 801332c:	681a      	ldr	r2, [r3, #0]
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013332:	1ad3      	subs	r3, r2, r3
 8013334:	2b00      	cmp	r3, #0
 8013336:	db0a      	blt.n	801334e <tcp_receive+0xefa>
 8013338:	4b0b      	ldr	r3, [pc, #44]	; (8013368 <tcp_receive+0xf14>)
 801333a:	681a      	ldr	r2, [r3, #0]
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013340:	6879      	ldr	r1, [r7, #4]
 8013342:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013344:	440b      	add	r3, r1
 8013346:	1ad3      	subs	r3, r2, r3
 8013348:	3301      	adds	r3, #1
 801334a:	2b00      	cmp	r3, #0
 801334c:	dd07      	ble.n	801335e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	8b5b      	ldrh	r3, [r3, #26]
 8013352:	f043 0302 	orr.w	r3, r3, #2
 8013356:	b29a      	uxth	r2, r3
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801335c:	e7ff      	b.n	801335e <tcp_receive+0xf0a>
 801335e:	bf00      	nop
 8013360:	3750      	adds	r7, #80	; 0x50
 8013362:	46bd      	mov	sp, r7
 8013364:	bdb0      	pop	{r4, r5, r7, pc}
 8013366:	bf00      	nop
 8013368:	200084f4 	.word	0x200084f4
 801336c:	200084d4 	.word	0x200084d4
 8013370:	200084fe 	.word	0x200084fe
 8013374:	0801ce10 	.word	0x0801ce10
 8013378:	0801d1b8 	.word	0x0801d1b8
 801337c:	0801ce5c 	.word	0x0801ce5c

08013380 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013380:	b480      	push	{r7}
 8013382:	b083      	sub	sp, #12
 8013384:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013386:	4b15      	ldr	r3, [pc, #84]	; (80133dc <tcp_get_next_optbyte+0x5c>)
 8013388:	881b      	ldrh	r3, [r3, #0]
 801338a:	1c5a      	adds	r2, r3, #1
 801338c:	b291      	uxth	r1, r2
 801338e:	4a13      	ldr	r2, [pc, #76]	; (80133dc <tcp_get_next_optbyte+0x5c>)
 8013390:	8011      	strh	r1, [r2, #0]
 8013392:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013394:	4b12      	ldr	r3, [pc, #72]	; (80133e0 <tcp_get_next_optbyte+0x60>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d004      	beq.n	80133a6 <tcp_get_next_optbyte+0x26>
 801339c:	4b11      	ldr	r3, [pc, #68]	; (80133e4 <tcp_get_next_optbyte+0x64>)
 801339e:	881b      	ldrh	r3, [r3, #0]
 80133a0:	88fa      	ldrh	r2, [r7, #6]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d208      	bcs.n	80133b8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80133a6:	4b10      	ldr	r3, [pc, #64]	; (80133e8 <tcp_get_next_optbyte+0x68>)
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	3314      	adds	r3, #20
 80133ac:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80133ae:	88fb      	ldrh	r3, [r7, #6]
 80133b0:	683a      	ldr	r2, [r7, #0]
 80133b2:	4413      	add	r3, r2
 80133b4:	781b      	ldrb	r3, [r3, #0]
 80133b6:	e00b      	b.n	80133d0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80133b8:	88fb      	ldrh	r3, [r7, #6]
 80133ba:	b2da      	uxtb	r2, r3
 80133bc:	4b09      	ldr	r3, [pc, #36]	; (80133e4 <tcp_get_next_optbyte+0x64>)
 80133be:	881b      	ldrh	r3, [r3, #0]
 80133c0:	b2db      	uxtb	r3, r3
 80133c2:	1ad3      	subs	r3, r2, r3
 80133c4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80133c6:	4b06      	ldr	r3, [pc, #24]	; (80133e0 <tcp_get_next_optbyte+0x60>)
 80133c8:	681a      	ldr	r2, [r3, #0]
 80133ca:	797b      	ldrb	r3, [r7, #5]
 80133cc:	4413      	add	r3, r2
 80133ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	370c      	adds	r7, #12
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr
 80133dc:	200084f0 	.word	0x200084f0
 80133e0:	200084ec 	.word	0x200084ec
 80133e4:	200084ea 	.word	0x200084ea
 80133e8:	200084e4 	.word	0x200084e4

080133ec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b084      	sub	sp, #16
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d106      	bne.n	8013408 <tcp_parseopt+0x1c>
 80133fa:	4b32      	ldr	r3, [pc, #200]	; (80134c4 <tcp_parseopt+0xd8>)
 80133fc:	f240 727d 	movw	r2, #1917	; 0x77d
 8013400:	4931      	ldr	r1, [pc, #196]	; (80134c8 <tcp_parseopt+0xdc>)
 8013402:	4832      	ldr	r0, [pc, #200]	; (80134cc <tcp_parseopt+0xe0>)
 8013404:	f007 f826 	bl	801a454 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013408:	4b31      	ldr	r3, [pc, #196]	; (80134d0 <tcp_parseopt+0xe4>)
 801340a:	881b      	ldrh	r3, [r3, #0]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d055      	beq.n	80134bc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013410:	4b30      	ldr	r3, [pc, #192]	; (80134d4 <tcp_parseopt+0xe8>)
 8013412:	2200      	movs	r2, #0
 8013414:	801a      	strh	r2, [r3, #0]
 8013416:	e045      	b.n	80134a4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8013418:	f7ff ffb2 	bl	8013380 <tcp_get_next_optbyte>
 801341c:	4603      	mov	r3, r0
 801341e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013420:	7bfb      	ldrb	r3, [r7, #15]
 8013422:	2b02      	cmp	r3, #2
 8013424:	d006      	beq.n	8013434 <tcp_parseopt+0x48>
 8013426:	2b02      	cmp	r3, #2
 8013428:	dc2b      	bgt.n	8013482 <tcp_parseopt+0x96>
 801342a:	2b00      	cmp	r3, #0
 801342c:	d041      	beq.n	80134b2 <tcp_parseopt+0xc6>
 801342e:	2b01      	cmp	r3, #1
 8013430:	d127      	bne.n	8013482 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013432:	e037      	b.n	80134a4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013434:	f7ff ffa4 	bl	8013380 <tcp_get_next_optbyte>
 8013438:	4603      	mov	r3, r0
 801343a:	2b04      	cmp	r3, #4
 801343c:	d13b      	bne.n	80134b6 <tcp_parseopt+0xca>
 801343e:	4b25      	ldr	r3, [pc, #148]	; (80134d4 <tcp_parseopt+0xe8>)
 8013440:	881b      	ldrh	r3, [r3, #0]
 8013442:	3301      	adds	r3, #1
 8013444:	4a22      	ldr	r2, [pc, #136]	; (80134d0 <tcp_parseopt+0xe4>)
 8013446:	8812      	ldrh	r2, [r2, #0]
 8013448:	4293      	cmp	r3, r2
 801344a:	da34      	bge.n	80134b6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801344c:	f7ff ff98 	bl	8013380 <tcp_get_next_optbyte>
 8013450:	4603      	mov	r3, r0
 8013452:	b29b      	uxth	r3, r3
 8013454:	021b      	lsls	r3, r3, #8
 8013456:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013458:	f7ff ff92 	bl	8013380 <tcp_get_next_optbyte>
 801345c:	4603      	mov	r3, r0
 801345e:	b29a      	uxth	r2, r3
 8013460:	89bb      	ldrh	r3, [r7, #12]
 8013462:	4313      	orrs	r3, r2
 8013464:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013466:	89bb      	ldrh	r3, [r7, #12]
 8013468:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801346c:	d804      	bhi.n	8013478 <tcp_parseopt+0x8c>
 801346e:	89bb      	ldrh	r3, [r7, #12]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d001      	beq.n	8013478 <tcp_parseopt+0x8c>
 8013474:	89ba      	ldrh	r2, [r7, #12]
 8013476:	e001      	b.n	801347c <tcp_parseopt+0x90>
 8013478:	f44f 7206 	mov.w	r2, #536	; 0x218
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013480:	e010      	b.n	80134a4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013482:	f7ff ff7d 	bl	8013380 <tcp_get_next_optbyte>
 8013486:	4603      	mov	r3, r0
 8013488:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801348a:	7afb      	ldrb	r3, [r7, #11]
 801348c:	2b01      	cmp	r3, #1
 801348e:	d914      	bls.n	80134ba <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013490:	7afb      	ldrb	r3, [r7, #11]
 8013492:	b29a      	uxth	r2, r3
 8013494:	4b0f      	ldr	r3, [pc, #60]	; (80134d4 <tcp_parseopt+0xe8>)
 8013496:	881b      	ldrh	r3, [r3, #0]
 8013498:	4413      	add	r3, r2
 801349a:	b29b      	uxth	r3, r3
 801349c:	3b02      	subs	r3, #2
 801349e:	b29a      	uxth	r2, r3
 80134a0:	4b0c      	ldr	r3, [pc, #48]	; (80134d4 <tcp_parseopt+0xe8>)
 80134a2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80134a4:	4b0b      	ldr	r3, [pc, #44]	; (80134d4 <tcp_parseopt+0xe8>)
 80134a6:	881a      	ldrh	r2, [r3, #0]
 80134a8:	4b09      	ldr	r3, [pc, #36]	; (80134d0 <tcp_parseopt+0xe4>)
 80134aa:	881b      	ldrh	r3, [r3, #0]
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d3b3      	bcc.n	8013418 <tcp_parseopt+0x2c>
 80134b0:	e004      	b.n	80134bc <tcp_parseopt+0xd0>
          return;
 80134b2:	bf00      	nop
 80134b4:	e002      	b.n	80134bc <tcp_parseopt+0xd0>
            return;
 80134b6:	bf00      	nop
 80134b8:	e000      	b.n	80134bc <tcp_parseopt+0xd0>
            return;
 80134ba:	bf00      	nop
      }
    }
  }
}
 80134bc:	3710      	adds	r7, #16
 80134be:	46bd      	mov	sp, r7
 80134c0:	bd80      	pop	{r7, pc}
 80134c2:	bf00      	nop
 80134c4:	0801ce10 	.word	0x0801ce10
 80134c8:	0801d274 	.word	0x0801d274
 80134cc:	0801ce5c 	.word	0x0801ce5c
 80134d0:	200084e8 	.word	0x200084e8
 80134d4:	200084f0 	.word	0x200084f0

080134d8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80134d8:	b480      	push	{r7}
 80134da:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80134dc:	4b05      	ldr	r3, [pc, #20]	; (80134f4 <tcp_trigger_input_pcb_close+0x1c>)
 80134de:	781b      	ldrb	r3, [r3, #0]
 80134e0:	f043 0310 	orr.w	r3, r3, #16
 80134e4:	b2da      	uxtb	r2, r3
 80134e6:	4b03      	ldr	r3, [pc, #12]	; (80134f4 <tcp_trigger_input_pcb_close+0x1c>)
 80134e8:	701a      	strb	r2, [r3, #0]
}
 80134ea:	bf00      	nop
 80134ec:	46bd      	mov	sp, r7
 80134ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f2:	4770      	bx	lr
 80134f4:	20008501 	.word	0x20008501

080134f8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b084      	sub	sp, #16
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	60b9      	str	r1, [r7, #8]
 8013502:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d00a      	beq.n	8013520 <tcp_route+0x28>
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	7a1b      	ldrb	r3, [r3, #8]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d006      	beq.n	8013520 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	7a1b      	ldrb	r3, [r3, #8]
 8013516:	4618      	mov	r0, r3
 8013518:	f7fb fb14 	bl	800eb44 <netif_get_by_index>
 801351c:	4603      	mov	r3, r0
 801351e:	e003      	b.n	8013528 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f005 f845 	bl	80185b0 <ip4_route>
 8013526:	4603      	mov	r3, r0
  }
}
 8013528:	4618      	mov	r0, r3
 801352a:	3710      	adds	r7, #16
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}

08013530 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013530:	b590      	push	{r4, r7, lr}
 8013532:	b087      	sub	sp, #28
 8013534:	af00      	add	r7, sp, #0
 8013536:	60f8      	str	r0, [r7, #12]
 8013538:	60b9      	str	r1, [r7, #8]
 801353a:	603b      	str	r3, [r7, #0]
 801353c:	4613      	mov	r3, r2
 801353e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d105      	bne.n	8013552 <tcp_create_segment+0x22>
 8013546:	4b44      	ldr	r3, [pc, #272]	; (8013658 <tcp_create_segment+0x128>)
 8013548:	22a3      	movs	r2, #163	; 0xa3
 801354a:	4944      	ldr	r1, [pc, #272]	; (801365c <tcp_create_segment+0x12c>)
 801354c:	4844      	ldr	r0, [pc, #272]	; (8013660 <tcp_create_segment+0x130>)
 801354e:	f006 ff81 	bl	801a454 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d105      	bne.n	8013564 <tcp_create_segment+0x34>
 8013558:	4b3f      	ldr	r3, [pc, #252]	; (8013658 <tcp_create_segment+0x128>)
 801355a:	22a4      	movs	r2, #164	; 0xa4
 801355c:	4941      	ldr	r1, [pc, #260]	; (8013664 <tcp_create_segment+0x134>)
 801355e:	4840      	ldr	r0, [pc, #256]	; (8013660 <tcp_create_segment+0x130>)
 8013560:	f006 ff78 	bl	801a454 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013564:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013568:	009b      	lsls	r3, r3, #2
 801356a:	b2db      	uxtb	r3, r3
 801356c:	f003 0304 	and.w	r3, r3, #4
 8013570:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013572:	2003      	movs	r0, #3
 8013574:	f7fa ff72 	bl	800e45c <memp_malloc>
 8013578:	6138      	str	r0, [r7, #16]
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d104      	bne.n	801358a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013580:	68b8      	ldr	r0, [r7, #8]
 8013582:	f7fb fe6d 	bl	800f260 <pbuf_free>
    return NULL;
 8013586:	2300      	movs	r3, #0
 8013588:	e061      	b.n	801364e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013590:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	2200      	movs	r2, #0
 8013596:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013598:	693b      	ldr	r3, [r7, #16]
 801359a:	68ba      	ldr	r2, [r7, #8]
 801359c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	891a      	ldrh	r2, [r3, #8]
 80135a2:	7dfb      	ldrb	r3, [r7, #23]
 80135a4:	b29b      	uxth	r3, r3
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d205      	bcs.n	80135b6 <tcp_create_segment+0x86>
 80135aa:	4b2b      	ldr	r3, [pc, #172]	; (8013658 <tcp_create_segment+0x128>)
 80135ac:	22b0      	movs	r2, #176	; 0xb0
 80135ae:	492e      	ldr	r1, [pc, #184]	; (8013668 <tcp_create_segment+0x138>)
 80135b0:	482b      	ldr	r0, [pc, #172]	; (8013660 <tcp_create_segment+0x130>)
 80135b2:	f006 ff4f 	bl	801a454 <iprintf>
  seg->len = p->tot_len - optlen;
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	891a      	ldrh	r2, [r3, #8]
 80135ba:	7dfb      	ldrb	r3, [r7, #23]
 80135bc:	b29b      	uxth	r3, r3
 80135be:	1ad3      	subs	r3, r2, r3
 80135c0:	b29a      	uxth	r2, r3
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80135c6:	2114      	movs	r1, #20
 80135c8:	68b8      	ldr	r0, [r7, #8]
 80135ca:	f7fb fdb3 	bl	800f134 <pbuf_add_header>
 80135ce:	4603      	mov	r3, r0
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d004      	beq.n	80135de <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80135d4:	6938      	ldr	r0, [r7, #16]
 80135d6:	f7fd f8d2 	bl	801077e <tcp_seg_free>
    return NULL;
 80135da:	2300      	movs	r3, #0
 80135dc:	e037      	b.n	801364e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80135de:	693b      	ldr	r3, [r7, #16]
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	685a      	ldr	r2, [r3, #4]
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	8ada      	ldrh	r2, [r3, #22]
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	68dc      	ldr	r4, [r3, #12]
 80135f0:	4610      	mov	r0, r2
 80135f2:	f7fa fa7d 	bl	800daf0 <lwip_htons>
 80135f6:	4603      	mov	r3, r0
 80135f8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	8b1a      	ldrh	r2, [r3, #24]
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	68dc      	ldr	r4, [r3, #12]
 8013602:	4610      	mov	r0, r2
 8013604:	f7fa fa74 	bl	800daf0 <lwip_htons>
 8013608:	4603      	mov	r3, r0
 801360a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	68dc      	ldr	r4, [r3, #12]
 8013610:	6838      	ldr	r0, [r7, #0]
 8013612:	f7fa fa82 	bl	800db1a <lwip_htonl>
 8013616:	4603      	mov	r3, r0
 8013618:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801361a:	7dfb      	ldrb	r3, [r7, #23]
 801361c:	089b      	lsrs	r3, r3, #2
 801361e:	b2db      	uxtb	r3, r3
 8013620:	b29b      	uxth	r3, r3
 8013622:	3305      	adds	r3, #5
 8013624:	b29b      	uxth	r3, r3
 8013626:	031b      	lsls	r3, r3, #12
 8013628:	b29a      	uxth	r2, r3
 801362a:	79fb      	ldrb	r3, [r7, #7]
 801362c:	b29b      	uxth	r3, r3
 801362e:	4313      	orrs	r3, r2
 8013630:	b29a      	uxth	r2, r3
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	68dc      	ldr	r4, [r3, #12]
 8013636:	4610      	mov	r0, r2
 8013638:	f7fa fa5a 	bl	800daf0 <lwip_htons>
 801363c:	4603      	mov	r3, r0
 801363e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013640:	693b      	ldr	r3, [r7, #16]
 8013642:	68db      	ldr	r3, [r3, #12]
 8013644:	2200      	movs	r2, #0
 8013646:	749a      	strb	r2, [r3, #18]
 8013648:	2200      	movs	r2, #0
 801364a:	74da      	strb	r2, [r3, #19]
  return seg;
 801364c:	693b      	ldr	r3, [r7, #16]
}
 801364e:	4618      	mov	r0, r3
 8013650:	371c      	adds	r7, #28
 8013652:	46bd      	mov	sp, r7
 8013654:	bd90      	pop	{r4, r7, pc}
 8013656:	bf00      	nop
 8013658:	0801d290 	.word	0x0801d290
 801365c:	0801d2c4 	.word	0x0801d2c4
 8013660:	0801d2e4 	.word	0x0801d2e4
 8013664:	0801d30c 	.word	0x0801d30c
 8013668:	0801d330 	.word	0x0801d330

0801366c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801366c:	b590      	push	{r4, r7, lr}
 801366e:	b08b      	sub	sp, #44	; 0x2c
 8013670:	af02      	add	r7, sp, #8
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	460b      	mov	r3, r1
 8013676:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013678:	2300      	movs	r3, #0
 801367a:	61fb      	str	r3, [r7, #28]
 801367c:	2300      	movs	r3, #0
 801367e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013680:	2300      	movs	r3, #0
 8013682:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d106      	bne.n	8013698 <tcp_split_unsent_seg+0x2c>
 801368a:	4b95      	ldr	r3, [pc, #596]	; (80138e0 <tcp_split_unsent_seg+0x274>)
 801368c:	f240 324b 	movw	r2, #843	; 0x34b
 8013690:	4994      	ldr	r1, [pc, #592]	; (80138e4 <tcp_split_unsent_seg+0x278>)
 8013692:	4895      	ldr	r0, [pc, #596]	; (80138e8 <tcp_split_unsent_seg+0x27c>)
 8013694:	f006 fede 	bl	801a454 <iprintf>

  useg = pcb->unsent;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801369c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d102      	bne.n	80136aa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80136a4:	f04f 33ff 	mov.w	r3, #4294967295
 80136a8:	e116      	b.n	80138d8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80136aa:	887b      	ldrh	r3, [r7, #2]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d109      	bne.n	80136c4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80136b0:	4b8b      	ldr	r3, [pc, #556]	; (80138e0 <tcp_split_unsent_seg+0x274>)
 80136b2:	f240 3253 	movw	r2, #851	; 0x353
 80136b6:	498d      	ldr	r1, [pc, #564]	; (80138ec <tcp_split_unsent_seg+0x280>)
 80136b8:	488b      	ldr	r0, [pc, #556]	; (80138e8 <tcp_split_unsent_seg+0x27c>)
 80136ba:	f006 fecb 	bl	801a454 <iprintf>
    return ERR_VAL;
 80136be:	f06f 0305 	mvn.w	r3, #5
 80136c2:	e109      	b.n	80138d8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	891b      	ldrh	r3, [r3, #8]
 80136c8:	887a      	ldrh	r2, [r7, #2]
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d301      	bcc.n	80136d2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80136ce:	2300      	movs	r3, #0
 80136d0:	e102      	b.n	80138d8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136d6:	887a      	ldrh	r2, [r7, #2]
 80136d8:	429a      	cmp	r2, r3
 80136da:	d906      	bls.n	80136ea <tcp_split_unsent_seg+0x7e>
 80136dc:	4b80      	ldr	r3, [pc, #512]	; (80138e0 <tcp_split_unsent_seg+0x274>)
 80136de:	f240 325b 	movw	r2, #859	; 0x35b
 80136e2:	4983      	ldr	r1, [pc, #524]	; (80138f0 <tcp_split_unsent_seg+0x284>)
 80136e4:	4880      	ldr	r0, [pc, #512]	; (80138e8 <tcp_split_unsent_seg+0x27c>)
 80136e6:	f006 feb5 	bl	801a454 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80136ea:	697b      	ldr	r3, [r7, #20]
 80136ec:	891b      	ldrh	r3, [r3, #8]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d106      	bne.n	8013700 <tcp_split_unsent_seg+0x94>
 80136f2:	4b7b      	ldr	r3, [pc, #492]	; (80138e0 <tcp_split_unsent_seg+0x274>)
 80136f4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80136f8:	497e      	ldr	r1, [pc, #504]	; (80138f4 <tcp_split_unsent_seg+0x288>)
 80136fa:	487b      	ldr	r0, [pc, #492]	; (80138e8 <tcp_split_unsent_seg+0x27c>)
 80136fc:	f006 feaa 	bl	801a454 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	7a9b      	ldrb	r3, [r3, #10]
 8013704:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013706:	7bfb      	ldrb	r3, [r7, #15]
 8013708:	009b      	lsls	r3, r3, #2
 801370a:	b2db      	uxtb	r3, r3
 801370c:	f003 0304 	and.w	r3, r3, #4
 8013710:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	891a      	ldrh	r2, [r3, #8]
 8013716:	887b      	ldrh	r3, [r7, #2]
 8013718:	1ad3      	subs	r3, r2, r3
 801371a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801371c:	7bbb      	ldrb	r3, [r7, #14]
 801371e:	b29a      	uxth	r2, r3
 8013720:	89bb      	ldrh	r3, [r7, #12]
 8013722:	4413      	add	r3, r2
 8013724:	b29b      	uxth	r3, r3
 8013726:	f44f 7220 	mov.w	r2, #640	; 0x280
 801372a:	4619      	mov	r1, r3
 801372c:	2036      	movs	r0, #54	; 0x36
 801372e:	f7fb fab3 	bl	800ec98 <pbuf_alloc>
 8013732:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	2b00      	cmp	r3, #0
 8013738:	f000 80b7 	beq.w	80138aa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	685b      	ldr	r3, [r3, #4]
 8013740:	891a      	ldrh	r2, [r3, #8]
 8013742:	697b      	ldr	r3, [r7, #20]
 8013744:	891b      	ldrh	r3, [r3, #8]
 8013746:	1ad3      	subs	r3, r2, r3
 8013748:	b29a      	uxth	r2, r3
 801374a:	887b      	ldrh	r3, [r7, #2]
 801374c:	4413      	add	r3, r2
 801374e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	6858      	ldr	r0, [r3, #4]
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	685a      	ldr	r2, [r3, #4]
 8013758:	7bbb      	ldrb	r3, [r7, #14]
 801375a:	18d1      	adds	r1, r2, r3
 801375c:	897b      	ldrh	r3, [r7, #10]
 801375e:	89ba      	ldrh	r2, [r7, #12]
 8013760:	f7fb ff84 	bl	800f66c <pbuf_copy_partial>
 8013764:	4603      	mov	r3, r0
 8013766:	461a      	mov	r2, r3
 8013768:	89bb      	ldrh	r3, [r7, #12]
 801376a:	4293      	cmp	r3, r2
 801376c:	f040 809f 	bne.w	80138ae <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	68db      	ldr	r3, [r3, #12]
 8013774:	899b      	ldrh	r3, [r3, #12]
 8013776:	b29b      	uxth	r3, r3
 8013778:	4618      	mov	r0, r3
 801377a:	f7fa f9b9 	bl	800daf0 <lwip_htons>
 801377e:	4603      	mov	r3, r0
 8013780:	b2db      	uxtb	r3, r3
 8013782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013786:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013788:	2300      	movs	r3, #0
 801378a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801378c:	7efb      	ldrb	r3, [r7, #27]
 801378e:	f003 0308 	and.w	r3, r3, #8
 8013792:	2b00      	cmp	r3, #0
 8013794:	d007      	beq.n	80137a6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013796:	7efb      	ldrb	r3, [r7, #27]
 8013798:	f023 0308 	bic.w	r3, r3, #8
 801379c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801379e:	7ebb      	ldrb	r3, [r7, #26]
 80137a0:	f043 0308 	orr.w	r3, r3, #8
 80137a4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80137a6:	7efb      	ldrb	r3, [r7, #27]
 80137a8:	f003 0301 	and.w	r3, r3, #1
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d007      	beq.n	80137c0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80137b0:	7efb      	ldrb	r3, [r7, #27]
 80137b2:	f023 0301 	bic.w	r3, r3, #1
 80137b6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80137b8:	7ebb      	ldrb	r3, [r7, #26]
 80137ba:	f043 0301 	orr.w	r3, r3, #1
 80137be:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	68db      	ldr	r3, [r3, #12]
 80137c4:	685b      	ldr	r3, [r3, #4]
 80137c6:	4618      	mov	r0, r3
 80137c8:	f7fa f9a7 	bl	800db1a <lwip_htonl>
 80137cc:	4602      	mov	r2, r0
 80137ce:	887b      	ldrh	r3, [r7, #2]
 80137d0:	18d1      	adds	r1, r2, r3
 80137d2:	7eba      	ldrb	r2, [r7, #26]
 80137d4:	7bfb      	ldrb	r3, [r7, #15]
 80137d6:	9300      	str	r3, [sp, #0]
 80137d8:	460b      	mov	r3, r1
 80137da:	6939      	ldr	r1, [r7, #16]
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f7ff fea7 	bl	8013530 <tcp_create_segment>
 80137e2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80137e4:	69fb      	ldr	r3, [r7, #28]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d063      	beq.n	80138b2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80137ea:	697b      	ldr	r3, [r7, #20]
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	4618      	mov	r0, r3
 80137f0:	f7fb fdc4 	bl	800f37c <pbuf_clen>
 80137f4:	4603      	mov	r3, r0
 80137f6:	461a      	mov	r2, r3
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137fe:	1a9b      	subs	r3, r3, r2
 8013800:	b29a      	uxth	r2, r3
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	6858      	ldr	r0, [r3, #4]
 801380c:	697b      	ldr	r3, [r7, #20]
 801380e:	685b      	ldr	r3, [r3, #4]
 8013810:	891a      	ldrh	r2, [r3, #8]
 8013812:	89bb      	ldrh	r3, [r7, #12]
 8013814:	1ad3      	subs	r3, r2, r3
 8013816:	b29b      	uxth	r3, r3
 8013818:	4619      	mov	r1, r3
 801381a:	f7fb fb9b 	bl	800ef54 <pbuf_realloc>
  useg->len -= remainder;
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	891a      	ldrh	r2, [r3, #8]
 8013822:	89bb      	ldrh	r3, [r7, #12]
 8013824:	1ad3      	subs	r3, r2, r3
 8013826:	b29a      	uxth	r2, r3
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	68db      	ldr	r3, [r3, #12]
 8013830:	899b      	ldrh	r3, [r3, #12]
 8013832:	b29c      	uxth	r4, r3
 8013834:	7efb      	ldrb	r3, [r7, #27]
 8013836:	b29b      	uxth	r3, r3
 8013838:	4618      	mov	r0, r3
 801383a:	f7fa f959 	bl	800daf0 <lwip_htons>
 801383e:	4603      	mov	r3, r0
 8013840:	461a      	mov	r2, r3
 8013842:	697b      	ldr	r3, [r7, #20]
 8013844:	68db      	ldr	r3, [r3, #12]
 8013846:	4322      	orrs	r2, r4
 8013848:	b292      	uxth	r2, r2
 801384a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	4618      	mov	r0, r3
 8013852:	f7fb fd93 	bl	800f37c <pbuf_clen>
 8013856:	4603      	mov	r3, r0
 8013858:	461a      	mov	r2, r3
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013860:	4413      	add	r3, r2
 8013862:	b29a      	uxth	r2, r3
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801386a:	69fb      	ldr	r3, [r7, #28]
 801386c:	685b      	ldr	r3, [r3, #4]
 801386e:	4618      	mov	r0, r3
 8013870:	f7fb fd84 	bl	800f37c <pbuf_clen>
 8013874:	4603      	mov	r3, r0
 8013876:	461a      	mov	r2, r3
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801387e:	4413      	add	r3, r2
 8013880:	b29a      	uxth	r2, r3
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	681a      	ldr	r2, [r3, #0]
 801388c:	69fb      	ldr	r3, [r7, #28]
 801388e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	69fa      	ldr	r2, [r7, #28]
 8013894:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013896:	69fb      	ldr	r3, [r7, #28]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d103      	bne.n	80138a6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2200      	movs	r2, #0
 80138a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80138a6:	2300      	movs	r3, #0
 80138a8:	e016      	b.n	80138d8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80138aa:	bf00      	nop
 80138ac:	e002      	b.n	80138b4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80138ae:	bf00      	nop
 80138b0:	e000      	b.n	80138b4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80138b2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d006      	beq.n	80138c8 <tcp_split_unsent_seg+0x25c>
 80138ba:	4b09      	ldr	r3, [pc, #36]	; (80138e0 <tcp_split_unsent_seg+0x274>)
 80138bc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80138c0:	490d      	ldr	r1, [pc, #52]	; (80138f8 <tcp_split_unsent_seg+0x28c>)
 80138c2:	4809      	ldr	r0, [pc, #36]	; (80138e8 <tcp_split_unsent_seg+0x27c>)
 80138c4:	f006 fdc6 	bl	801a454 <iprintf>
  if (p != NULL) {
 80138c8:	693b      	ldr	r3, [r7, #16]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d002      	beq.n	80138d4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80138ce:	6938      	ldr	r0, [r7, #16]
 80138d0:	f7fb fcc6 	bl	800f260 <pbuf_free>
  }

  return ERR_MEM;
 80138d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80138d8:	4618      	mov	r0, r3
 80138da:	3724      	adds	r7, #36	; 0x24
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd90      	pop	{r4, r7, pc}
 80138e0:	0801d290 	.word	0x0801d290
 80138e4:	0801d624 	.word	0x0801d624
 80138e8:	0801d2e4 	.word	0x0801d2e4
 80138ec:	0801d648 	.word	0x0801d648
 80138f0:	0801d66c 	.word	0x0801d66c
 80138f4:	0801d67c 	.word	0x0801d67c
 80138f8:	0801d68c 	.word	0x0801d68c

080138fc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80138fc:	b590      	push	{r4, r7, lr}
 80138fe:	b085      	sub	sp, #20
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d106      	bne.n	8013918 <tcp_send_fin+0x1c>
 801390a:	4b21      	ldr	r3, [pc, #132]	; (8013990 <tcp_send_fin+0x94>)
 801390c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013910:	4920      	ldr	r1, [pc, #128]	; (8013994 <tcp_send_fin+0x98>)
 8013912:	4821      	ldr	r0, [pc, #132]	; (8013998 <tcp_send_fin+0x9c>)
 8013914:	f006 fd9e 	bl	801a454 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801391c:	2b00      	cmp	r3, #0
 801391e:	d02e      	beq.n	801397e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013924:	60fb      	str	r3, [r7, #12]
 8013926:	e002      	b.n	801392e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d1f8      	bne.n	8013928 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	899b      	ldrh	r3, [r3, #12]
 801393c:	b29b      	uxth	r3, r3
 801393e:	4618      	mov	r0, r3
 8013940:	f7fa f8d6 	bl	800daf0 <lwip_htons>
 8013944:	4603      	mov	r3, r0
 8013946:	b2db      	uxtb	r3, r3
 8013948:	f003 0307 	and.w	r3, r3, #7
 801394c:	2b00      	cmp	r3, #0
 801394e:	d116      	bne.n	801397e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	68db      	ldr	r3, [r3, #12]
 8013954:	899b      	ldrh	r3, [r3, #12]
 8013956:	b29c      	uxth	r4, r3
 8013958:	2001      	movs	r0, #1
 801395a:	f7fa f8c9 	bl	800daf0 <lwip_htons>
 801395e:	4603      	mov	r3, r0
 8013960:	461a      	mov	r2, r3
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	68db      	ldr	r3, [r3, #12]
 8013966:	4322      	orrs	r2, r4
 8013968:	b292      	uxth	r2, r2
 801396a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	8b5b      	ldrh	r3, [r3, #26]
 8013970:	f043 0320 	orr.w	r3, r3, #32
 8013974:	b29a      	uxth	r2, r3
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801397a:	2300      	movs	r3, #0
 801397c:	e004      	b.n	8013988 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801397e:	2101      	movs	r1, #1
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	f000 f80b 	bl	801399c <tcp_enqueue_flags>
 8013986:	4603      	mov	r3, r0
}
 8013988:	4618      	mov	r0, r3
 801398a:	3714      	adds	r7, #20
 801398c:	46bd      	mov	sp, r7
 801398e:	bd90      	pop	{r4, r7, pc}
 8013990:	0801d290 	.word	0x0801d290
 8013994:	0801d698 	.word	0x0801d698
 8013998:	0801d2e4 	.word	0x0801d2e4

0801399c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b08a      	sub	sp, #40	; 0x28
 80139a0:	af02      	add	r7, sp, #8
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	460b      	mov	r3, r1
 80139a6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80139a8:	2300      	movs	r3, #0
 80139aa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80139ac:	2300      	movs	r3, #0
 80139ae:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80139b0:	78fb      	ldrb	r3, [r7, #3]
 80139b2:	f003 0303 	and.w	r3, r3, #3
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d106      	bne.n	80139c8 <tcp_enqueue_flags+0x2c>
 80139ba:	4b67      	ldr	r3, [pc, #412]	; (8013b58 <tcp_enqueue_flags+0x1bc>)
 80139bc:	f240 4211 	movw	r2, #1041	; 0x411
 80139c0:	4966      	ldr	r1, [pc, #408]	; (8013b5c <tcp_enqueue_flags+0x1c0>)
 80139c2:	4867      	ldr	r0, [pc, #412]	; (8013b60 <tcp_enqueue_flags+0x1c4>)
 80139c4:	f006 fd46 	bl	801a454 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d106      	bne.n	80139dc <tcp_enqueue_flags+0x40>
 80139ce:	4b62      	ldr	r3, [pc, #392]	; (8013b58 <tcp_enqueue_flags+0x1bc>)
 80139d0:	f240 4213 	movw	r2, #1043	; 0x413
 80139d4:	4963      	ldr	r1, [pc, #396]	; (8013b64 <tcp_enqueue_flags+0x1c8>)
 80139d6:	4862      	ldr	r0, [pc, #392]	; (8013b60 <tcp_enqueue_flags+0x1c4>)
 80139d8:	f006 fd3c 	bl	801a454 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80139dc:	78fb      	ldrb	r3, [r7, #3]
 80139de:	f003 0302 	and.w	r3, r3, #2
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d001      	beq.n	80139ea <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80139e6:	2301      	movs	r3, #1
 80139e8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80139ea:	7ffb      	ldrb	r3, [r7, #31]
 80139ec:	009b      	lsls	r3, r3, #2
 80139ee:	b2db      	uxtb	r3, r3
 80139f0:	f003 0304 	and.w	r3, r3, #4
 80139f4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80139f6:	7dfb      	ldrb	r3, [r7, #23]
 80139f8:	b29b      	uxth	r3, r3
 80139fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139fe:	4619      	mov	r1, r3
 8013a00:	2036      	movs	r0, #54	; 0x36
 8013a02:	f7fb f949 	bl	800ec98 <pbuf_alloc>
 8013a06:	6138      	str	r0, [r7, #16]
 8013a08:	693b      	ldr	r3, [r7, #16]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d109      	bne.n	8013a22 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	8b5b      	ldrh	r3, [r3, #26]
 8013a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a16:	b29a      	uxth	r2, r3
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8013a20:	e095      	b.n	8013b4e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	895a      	ldrh	r2, [r3, #10]
 8013a26:	7dfb      	ldrb	r3, [r7, #23]
 8013a28:	b29b      	uxth	r3, r3
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	d206      	bcs.n	8013a3c <tcp_enqueue_flags+0xa0>
 8013a2e:	4b4a      	ldr	r3, [pc, #296]	; (8013b58 <tcp_enqueue_flags+0x1bc>)
 8013a30:	f240 4239 	movw	r2, #1081	; 0x439
 8013a34:	494c      	ldr	r1, [pc, #304]	; (8013b68 <tcp_enqueue_flags+0x1cc>)
 8013a36:	484a      	ldr	r0, [pc, #296]	; (8013b60 <tcp_enqueue_flags+0x1c4>)
 8013a38:	f006 fd0c 	bl	801a454 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013a40:	78fa      	ldrb	r2, [r7, #3]
 8013a42:	7ffb      	ldrb	r3, [r7, #31]
 8013a44:	9300      	str	r3, [sp, #0]
 8013a46:	460b      	mov	r3, r1
 8013a48:	6939      	ldr	r1, [r7, #16]
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f7ff fd70 	bl	8013530 <tcp_create_segment>
 8013a50:	60f8      	str	r0, [r7, #12]
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d109      	bne.n	8013a6c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	8b5b      	ldrh	r3, [r3, #26]
 8013a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a60:	b29a      	uxth	r2, r3
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013a66:	f04f 33ff 	mov.w	r3, #4294967295
 8013a6a:	e070      	b.n	8013b4e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	68db      	ldr	r3, [r3, #12]
 8013a70:	f003 0303 	and.w	r3, r3, #3
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d006      	beq.n	8013a86 <tcp_enqueue_flags+0xea>
 8013a78:	4b37      	ldr	r3, [pc, #220]	; (8013b58 <tcp_enqueue_flags+0x1bc>)
 8013a7a:	f240 4242 	movw	r2, #1090	; 0x442
 8013a7e:	493b      	ldr	r1, [pc, #236]	; (8013b6c <tcp_enqueue_flags+0x1d0>)
 8013a80:	4837      	ldr	r0, [pc, #220]	; (8013b60 <tcp_enqueue_flags+0x1c4>)
 8013a82:	f006 fce7 	bl	801a454 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	891b      	ldrh	r3, [r3, #8]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d006      	beq.n	8013a9c <tcp_enqueue_flags+0x100>
 8013a8e:	4b32      	ldr	r3, [pc, #200]	; (8013b58 <tcp_enqueue_flags+0x1bc>)
 8013a90:	f240 4243 	movw	r2, #1091	; 0x443
 8013a94:	4936      	ldr	r1, [pc, #216]	; (8013b70 <tcp_enqueue_flags+0x1d4>)
 8013a96:	4832      	ldr	r0, [pc, #200]	; (8013b60 <tcp_enqueue_flags+0x1c4>)
 8013a98:	f006 fcdc 	bl	801a454 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d103      	bne.n	8013aac <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	68fa      	ldr	r2, [r7, #12]
 8013aa8:	66da      	str	r2, [r3, #108]	; 0x6c
 8013aaa:	e00d      	b.n	8013ac8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ab0:	61bb      	str	r3, [r7, #24]
 8013ab2:	e002      	b.n	8013aba <tcp_enqueue_flags+0x11e>
 8013ab4:	69bb      	ldr	r3, [r7, #24]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	61bb      	str	r3, [r7, #24]
 8013aba:	69bb      	ldr	r3, [r7, #24]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d1f8      	bne.n	8013ab4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013ac2:	69bb      	ldr	r3, [r7, #24]
 8013ac4:	68fa      	ldr	r2, [r7, #12]
 8013ac6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2200      	movs	r2, #0
 8013acc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013ad0:	78fb      	ldrb	r3, [r7, #3]
 8013ad2:	f003 0302 	and.w	r3, r3, #2
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d104      	bne.n	8013ae4 <tcp_enqueue_flags+0x148>
 8013ada:	78fb      	ldrb	r3, [r7, #3]
 8013adc:	f003 0301 	and.w	r3, r3, #1
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d004      	beq.n	8013aee <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013ae8:	1c5a      	adds	r2, r3, #1
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013aee:	78fb      	ldrb	r3, [r7, #3]
 8013af0:	f003 0301 	and.w	r3, r3, #1
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d006      	beq.n	8013b06 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	8b5b      	ldrh	r3, [r3, #26]
 8013afc:	f043 0320 	orr.w	r3, r3, #32
 8013b00:	b29a      	uxth	r2, r3
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	685b      	ldr	r3, [r3, #4]
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f7fb fc36 	bl	800f37c <pbuf_clen>
 8013b10:	4603      	mov	r3, r0
 8013b12:	461a      	mov	r2, r3
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b1a:	4413      	add	r3, r2
 8013b1c:	b29a      	uxth	r2, r3
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d00e      	beq.n	8013b4c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d10a      	bne.n	8013b4c <tcp_enqueue_flags+0x1b0>
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d106      	bne.n	8013b4c <tcp_enqueue_flags+0x1b0>
 8013b3e:	4b06      	ldr	r3, [pc, #24]	; (8013b58 <tcp_enqueue_flags+0x1bc>)
 8013b40:	f240 4265 	movw	r2, #1125	; 0x465
 8013b44:	490b      	ldr	r1, [pc, #44]	; (8013b74 <tcp_enqueue_flags+0x1d8>)
 8013b46:	4806      	ldr	r0, [pc, #24]	; (8013b60 <tcp_enqueue_flags+0x1c4>)
 8013b48:	f006 fc84 	bl	801a454 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013b4c:	2300      	movs	r3, #0
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3720      	adds	r7, #32
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}
 8013b56:	bf00      	nop
 8013b58:	0801d290 	.word	0x0801d290
 8013b5c:	0801d6b4 	.word	0x0801d6b4
 8013b60:	0801d2e4 	.word	0x0801d2e4
 8013b64:	0801d70c 	.word	0x0801d70c
 8013b68:	0801d72c 	.word	0x0801d72c
 8013b6c:	0801d768 	.word	0x0801d768
 8013b70:	0801d780 	.word	0x0801d780
 8013b74:	0801d7ac 	.word	0x0801d7ac

08013b78 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013b78:	b5b0      	push	{r4, r5, r7, lr}
 8013b7a:	b08a      	sub	sp, #40	; 0x28
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d106      	bne.n	8013b94 <tcp_output+0x1c>
 8013b86:	4b9e      	ldr	r3, [pc, #632]	; (8013e00 <tcp_output+0x288>)
 8013b88:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013b8c:	499d      	ldr	r1, [pc, #628]	; (8013e04 <tcp_output+0x28c>)
 8013b8e:	489e      	ldr	r0, [pc, #632]	; (8013e08 <tcp_output+0x290>)
 8013b90:	f006 fc60 	bl	801a454 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	7d1b      	ldrb	r3, [r3, #20]
 8013b98:	2b01      	cmp	r3, #1
 8013b9a:	d106      	bne.n	8013baa <tcp_output+0x32>
 8013b9c:	4b98      	ldr	r3, [pc, #608]	; (8013e00 <tcp_output+0x288>)
 8013b9e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013ba2:	499a      	ldr	r1, [pc, #616]	; (8013e0c <tcp_output+0x294>)
 8013ba4:	4898      	ldr	r0, [pc, #608]	; (8013e08 <tcp_output+0x290>)
 8013ba6:	f006 fc55 	bl	801a454 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013baa:	4b99      	ldr	r3, [pc, #612]	; (8013e10 <tcp_output+0x298>)
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	687a      	ldr	r2, [r7, #4]
 8013bb0:	429a      	cmp	r2, r3
 8013bb2:	d101      	bne.n	8013bb8 <tcp_output+0x40>
    return ERR_OK;
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	e1ce      	b.n	8013f56 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013bc4:	4293      	cmp	r3, r2
 8013bc6:	bf28      	it	cs
 8013bc8:	4613      	movcs	r3, r2
 8013bca:	b29b      	uxth	r3, r3
 8013bcc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bd2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d10b      	bne.n	8013bf2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	8b5b      	ldrh	r3, [r3, #26]
 8013bde:	f003 0302 	and.w	r3, r3, #2
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	f000 81aa 	beq.w	8013f3c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	f000 fdcb 	bl	8014784 <tcp_send_empty_ack>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	e1b1      	b.n	8013f56 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013bf2:	6879      	ldr	r1, [r7, #4]
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	3304      	adds	r3, #4
 8013bf8:	461a      	mov	r2, r3
 8013bfa:	6878      	ldr	r0, [r7, #4]
 8013bfc:	f7ff fc7c 	bl	80134f8 <tcp_route>
 8013c00:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013c02:	697b      	ldr	r3, [r7, #20]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d102      	bne.n	8013c0e <tcp_output+0x96>
    return ERR_RTE;
 8013c08:	f06f 0303 	mvn.w	r3, #3
 8013c0c:	e1a3      	b.n	8013f56 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d003      	beq.n	8013c1c <tcp_output+0xa4>
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d111      	bne.n	8013c40 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013c1c:	697b      	ldr	r3, [r7, #20]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d002      	beq.n	8013c28 <tcp_output+0xb0>
 8013c22:	697b      	ldr	r3, [r7, #20]
 8013c24:	3304      	adds	r3, #4
 8013c26:	e000      	b.n	8013c2a <tcp_output+0xb2>
 8013c28:	2300      	movs	r3, #0
 8013c2a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d102      	bne.n	8013c38 <tcp_output+0xc0>
      return ERR_RTE;
 8013c32:	f06f 0303 	mvn.w	r3, #3
 8013c36:	e18e      	b.n	8013f56 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	681a      	ldr	r2, [r3, #0]
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c42:	68db      	ldr	r3, [r3, #12]
 8013c44:	685b      	ldr	r3, [r3, #4]
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7f9 ff67 	bl	800db1a <lwip_htonl>
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c52:	1ad3      	subs	r3, r2, r3
 8013c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c56:	8912      	ldrh	r2, [r2, #8]
 8013c58:	4413      	add	r3, r2
 8013c5a:	69ba      	ldr	r2, [r7, #24]
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d227      	bcs.n	8013cb0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013c66:	461a      	mov	r2, r3
 8013c68:	69bb      	ldr	r3, [r7, #24]
 8013c6a:	4293      	cmp	r3, r2
 8013c6c:	d114      	bne.n	8013c98 <tcp_output+0x120>
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d110      	bne.n	8013c98 <tcp_output+0x120>
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d10b      	bne.n	8013c98 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2200      	movs	r2, #0
 8013c84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	2201      	movs	r2, #1
 8013c8c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2200      	movs	r2, #0
 8013c94:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	8b5b      	ldrh	r3, [r3, #26]
 8013c9c:	f003 0302 	and.w	r3, r3, #2
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	f000 814d 	beq.w	8013f40 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f000 fd6c 	bl	8014784 <tcp_send_empty_ack>
 8013cac:	4603      	mov	r3, r0
 8013cae:	e152      	b.n	8013f56 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cbc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013cbe:	6a3b      	ldr	r3, [r7, #32]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	f000 811c 	beq.w	8013efe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013cc6:	e002      	b.n	8013cce <tcp_output+0x156>
 8013cc8:	6a3b      	ldr	r3, [r7, #32]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	623b      	str	r3, [r7, #32]
 8013cce:	6a3b      	ldr	r3, [r7, #32]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d1f8      	bne.n	8013cc8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013cd6:	e112      	b.n	8013efe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cda:	68db      	ldr	r3, [r3, #12]
 8013cdc:	899b      	ldrh	r3, [r3, #12]
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7f9 ff05 	bl	800daf0 <lwip_htons>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	b2db      	uxtb	r3, r3
 8013cea:	f003 0304 	and.w	r3, r3, #4
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d006      	beq.n	8013d00 <tcp_output+0x188>
 8013cf2:	4b43      	ldr	r3, [pc, #268]	; (8013e00 <tcp_output+0x288>)
 8013cf4:	f240 5236 	movw	r2, #1334	; 0x536
 8013cf8:	4946      	ldr	r1, [pc, #280]	; (8013e14 <tcp_output+0x29c>)
 8013cfa:	4843      	ldr	r0, [pc, #268]	; (8013e08 <tcp_output+0x290>)
 8013cfc:	f006 fbaa 	bl	801a454 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d01f      	beq.n	8013d48 <tcp_output+0x1d0>
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	8b5b      	ldrh	r3, [r3, #26]
 8013d0c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d119      	bne.n	8013d48 <tcp_output+0x1d0>
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d00b      	beq.n	8013d34 <tcp_output+0x1bc>
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d110      	bne.n	8013d48 <tcp_output+0x1d0>
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d2a:	891a      	ldrh	r2, [r3, #8]
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d209      	bcs.n	8013d48 <tcp_output+0x1d0>
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d004      	beq.n	8013d48 <tcp_output+0x1d0>
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d44:	2b08      	cmp	r3, #8
 8013d46:	d901      	bls.n	8013d4c <tcp_output+0x1d4>
 8013d48:	2301      	movs	r3, #1
 8013d4a:	e000      	b.n	8013d4e <tcp_output+0x1d6>
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d106      	bne.n	8013d60 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	8b5b      	ldrh	r3, [r3, #26]
 8013d56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	f000 80e4 	beq.w	8013f28 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	7d1b      	ldrb	r3, [r3, #20]
 8013d64:	2b02      	cmp	r3, #2
 8013d66:	d00d      	beq.n	8013d84 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6a:	68db      	ldr	r3, [r3, #12]
 8013d6c:	899b      	ldrh	r3, [r3, #12]
 8013d6e:	b29c      	uxth	r4, r3
 8013d70:	2010      	movs	r0, #16
 8013d72:	f7f9 febd 	bl	800daf0 <lwip_htons>
 8013d76:	4603      	mov	r3, r0
 8013d78:	461a      	mov	r2, r3
 8013d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7c:	68db      	ldr	r3, [r3, #12]
 8013d7e:	4322      	orrs	r2, r4
 8013d80:	b292      	uxth	r2, r2
 8013d82:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013d84:	697a      	ldr	r2, [r7, #20]
 8013d86:	6879      	ldr	r1, [r7, #4]
 8013d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d8a:	f000 f909 	bl	8013fa0 <tcp_output_segment>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d009      	beq.n	8013dae <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	8b5b      	ldrh	r3, [r3, #26]
 8013d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013da2:	b29a      	uxth	r2, r3
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	835a      	strh	r2, [r3, #26]
      return err;
 8013da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dac:	e0d3      	b.n	8013f56 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db0:	681a      	ldr	r2, [r3, #0]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	7d1b      	ldrb	r3, [r3, #20]
 8013dba:	2b02      	cmp	r3, #2
 8013dbc:	d006      	beq.n	8013dcc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	8b5b      	ldrh	r3, [r3, #26]
 8013dc2:	f023 0303 	bic.w	r3, r3, #3
 8013dc6:	b29a      	uxth	r2, r3
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dce:	68db      	ldr	r3, [r3, #12]
 8013dd0:	685b      	ldr	r3, [r3, #4]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7f9 fea1 	bl	800db1a <lwip_htonl>
 8013dd8:	4604      	mov	r4, r0
 8013dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ddc:	891b      	ldrh	r3, [r3, #8]
 8013dde:	461d      	mov	r5, r3
 8013de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de2:	68db      	ldr	r3, [r3, #12]
 8013de4:	899b      	ldrh	r3, [r3, #12]
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7f9 fe81 	bl	800daf0 <lwip_htons>
 8013dee:	4603      	mov	r3, r0
 8013df0:	b2db      	uxtb	r3, r3
 8013df2:	f003 0303 	and.w	r3, r3, #3
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d00e      	beq.n	8013e18 <tcp_output+0x2a0>
 8013dfa:	2301      	movs	r3, #1
 8013dfc:	e00d      	b.n	8013e1a <tcp_output+0x2a2>
 8013dfe:	bf00      	nop
 8013e00:	0801d290 	.word	0x0801d290
 8013e04:	0801d7d4 	.word	0x0801d7d4
 8013e08:	0801d2e4 	.word	0x0801d2e4
 8013e0c:	0801d7ec 	.word	0x0801d7ec
 8013e10:	2000f3a8 	.word	0x2000f3a8
 8013e14:	0801d814 	.word	0x0801d814
 8013e18:	2300      	movs	r3, #0
 8013e1a:	442b      	add	r3, r5
 8013e1c:	4423      	add	r3, r4
 8013e1e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013e24:	68bb      	ldr	r3, [r7, #8]
 8013e26:	1ad3      	subs	r3, r2, r3
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	da02      	bge.n	8013e32 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	68ba      	ldr	r2, [r7, #8]
 8013e30:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e34:	891b      	ldrh	r3, [r3, #8]
 8013e36:	461c      	mov	r4, r3
 8013e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3a:	68db      	ldr	r3, [r3, #12]
 8013e3c:	899b      	ldrh	r3, [r3, #12]
 8013e3e:	b29b      	uxth	r3, r3
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7f9 fe55 	bl	800daf0 <lwip_htons>
 8013e46:	4603      	mov	r3, r0
 8013e48:	b2db      	uxtb	r3, r3
 8013e4a:	f003 0303 	and.w	r3, r3, #3
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d001      	beq.n	8013e56 <tcp_output+0x2de>
 8013e52:	2301      	movs	r3, #1
 8013e54:	e000      	b.n	8013e58 <tcp_output+0x2e0>
 8013e56:	2300      	movs	r3, #0
 8013e58:	4423      	add	r3, r4
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d049      	beq.n	8013ef2 <tcp_output+0x37a>
      seg->next = NULL;
 8013e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e60:	2200      	movs	r2, #0
 8013e62:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d105      	bne.n	8013e78 <tcp_output+0x300>
        pcb->unacked = seg;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e70:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e74:	623b      	str	r3, [r7, #32]
 8013e76:	e03f      	b.n	8013ef8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e7a:	68db      	ldr	r3, [r3, #12]
 8013e7c:	685b      	ldr	r3, [r3, #4]
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f7f9 fe4b 	bl	800db1a <lwip_htonl>
 8013e84:	4604      	mov	r4, r0
 8013e86:	6a3b      	ldr	r3, [r7, #32]
 8013e88:	68db      	ldr	r3, [r3, #12]
 8013e8a:	685b      	ldr	r3, [r3, #4]
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7f9 fe44 	bl	800db1a <lwip_htonl>
 8013e92:	4603      	mov	r3, r0
 8013e94:	1ae3      	subs	r3, r4, r3
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	da24      	bge.n	8013ee4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	3370      	adds	r3, #112	; 0x70
 8013e9e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013ea0:	e002      	b.n	8013ea8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013ea2:	69fb      	ldr	r3, [r7, #28]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013ea8:	69fb      	ldr	r3, [r7, #28]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d011      	beq.n	8013ed4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013eb0:	69fb      	ldr	r3, [r7, #28]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	68db      	ldr	r3, [r3, #12]
 8013eb6:	685b      	ldr	r3, [r3, #4]
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7f9 fe2e 	bl	800db1a <lwip_htonl>
 8013ebe:	4604      	mov	r4, r0
 8013ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec2:	68db      	ldr	r3, [r3, #12]
 8013ec4:	685b      	ldr	r3, [r3, #4]
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7f9 fe27 	bl	800db1a <lwip_htonl>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	dbe6      	blt.n	8013ea2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013ed4:	69fb      	ldr	r3, [r7, #28]
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eda:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013edc:	69fb      	ldr	r3, [r7, #28]
 8013ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ee0:	601a      	str	r2, [r3, #0]
 8013ee2:	e009      	b.n	8013ef8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013ee4:	6a3b      	ldr	r3, [r7, #32]
 8013ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ee8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013eea:	6a3b      	ldr	r3, [r7, #32]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	623b      	str	r3, [r7, #32]
 8013ef0:	e002      	b.n	8013ef8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013ef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ef4:	f7fc fc43 	bl	801077e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013efc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d012      	beq.n	8013f2a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f06:	68db      	ldr	r3, [r3, #12]
 8013f08:	685b      	ldr	r3, [r3, #4]
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f7f9 fe05 	bl	800db1a <lwip_htonl>
 8013f10:	4602      	mov	r2, r0
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f16:	1ad3      	subs	r3, r2, r3
 8013f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f1a:	8912      	ldrh	r2, [r2, #8]
 8013f1c:	4413      	add	r3, r2
  while (seg != NULL &&
 8013f1e:	69ba      	ldr	r2, [r7, #24]
 8013f20:	429a      	cmp	r2, r3
 8013f22:	f4bf aed9 	bcs.w	8013cd8 <tcp_output+0x160>
 8013f26:	e000      	b.n	8013f2a <tcp_output+0x3b2>
      break;
 8013f28:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d108      	bne.n	8013f44 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2200      	movs	r2, #0
 8013f36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013f3a:	e004      	b.n	8013f46 <tcp_output+0x3ce>
    goto output_done;
 8013f3c:	bf00      	nop
 8013f3e:	e002      	b.n	8013f46 <tcp_output+0x3ce>
    goto output_done;
 8013f40:	bf00      	nop
 8013f42:	e000      	b.n	8013f46 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013f44:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	8b5b      	ldrh	r3, [r3, #26]
 8013f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013f4e:	b29a      	uxth	r2, r3
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013f54:	2300      	movs	r3, #0
}
 8013f56:	4618      	mov	r0, r3
 8013f58:	3728      	adds	r7, #40	; 0x28
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8013f5e:	bf00      	nop

08013f60 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b082      	sub	sp, #8
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d106      	bne.n	8013f7c <tcp_output_segment_busy+0x1c>
 8013f6e:	4b09      	ldr	r3, [pc, #36]	; (8013f94 <tcp_output_segment_busy+0x34>)
 8013f70:	f240 529a 	movw	r2, #1434	; 0x59a
 8013f74:	4908      	ldr	r1, [pc, #32]	; (8013f98 <tcp_output_segment_busy+0x38>)
 8013f76:	4809      	ldr	r0, [pc, #36]	; (8013f9c <tcp_output_segment_busy+0x3c>)
 8013f78:	f006 fa6c 	bl	801a454 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	685b      	ldr	r3, [r3, #4]
 8013f80:	7b9b      	ldrb	r3, [r3, #14]
 8013f82:	2b01      	cmp	r3, #1
 8013f84:	d001      	beq.n	8013f8a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013f86:	2301      	movs	r3, #1
 8013f88:	e000      	b.n	8013f8c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013f8a:	2300      	movs	r3, #0
}
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	3708      	adds	r7, #8
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd80      	pop	{r7, pc}
 8013f94:	0801d290 	.word	0x0801d290
 8013f98:	0801d82c 	.word	0x0801d82c
 8013f9c:	0801d2e4 	.word	0x0801d2e4

08013fa0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013fa0:	b5b0      	push	{r4, r5, r7, lr}
 8013fa2:	b08c      	sub	sp, #48	; 0x30
 8013fa4:	af04      	add	r7, sp, #16
 8013fa6:	60f8      	str	r0, [r7, #12]
 8013fa8:	60b9      	str	r1, [r7, #8]
 8013faa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d106      	bne.n	8013fc0 <tcp_output_segment+0x20>
 8013fb2:	4b63      	ldr	r3, [pc, #396]	; (8014140 <tcp_output_segment+0x1a0>)
 8013fb4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013fb8:	4962      	ldr	r1, [pc, #392]	; (8014144 <tcp_output_segment+0x1a4>)
 8013fba:	4863      	ldr	r0, [pc, #396]	; (8014148 <tcp_output_segment+0x1a8>)
 8013fbc:	f006 fa4a 	bl	801a454 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d106      	bne.n	8013fd4 <tcp_output_segment+0x34>
 8013fc6:	4b5e      	ldr	r3, [pc, #376]	; (8014140 <tcp_output_segment+0x1a0>)
 8013fc8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013fcc:	495f      	ldr	r1, [pc, #380]	; (801414c <tcp_output_segment+0x1ac>)
 8013fce:	485e      	ldr	r0, [pc, #376]	; (8014148 <tcp_output_segment+0x1a8>)
 8013fd0:	f006 fa40 	bl	801a454 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d106      	bne.n	8013fe8 <tcp_output_segment+0x48>
 8013fda:	4b59      	ldr	r3, [pc, #356]	; (8014140 <tcp_output_segment+0x1a0>)
 8013fdc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013fe0:	495b      	ldr	r1, [pc, #364]	; (8014150 <tcp_output_segment+0x1b0>)
 8013fe2:	4859      	ldr	r0, [pc, #356]	; (8014148 <tcp_output_segment+0x1a8>)
 8013fe4:	f006 fa36 	bl	801a454 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013fe8:	68f8      	ldr	r0, [r7, #12]
 8013fea:	f7ff ffb9 	bl	8013f60 <tcp_output_segment_busy>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d001      	beq.n	8013ff8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	e09f      	b.n	8014138 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	68dc      	ldr	r4, [r3, #12]
 8014000:	4610      	mov	r0, r2
 8014002:	f7f9 fd8a 	bl	800db1a <lwip_htonl>
 8014006:	4603      	mov	r3, r0
 8014008:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	68dc      	ldr	r4, [r3, #12]
 8014012:	4610      	mov	r0, r2
 8014014:	f7f9 fd6c 	bl	800daf0 <lwip_htons>
 8014018:	4603      	mov	r3, r0
 801401a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014020:	68ba      	ldr	r2, [r7, #8]
 8014022:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014024:	441a      	add	r2, r3
 8014026:	68bb      	ldr	r3, [r7, #8]
 8014028:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	68db      	ldr	r3, [r3, #12]
 801402e:	3314      	adds	r3, #20
 8014030:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	7a9b      	ldrb	r3, [r3, #10]
 8014036:	f003 0301 	and.w	r3, r3, #1
 801403a:	2b00      	cmp	r3, #0
 801403c:	d015      	beq.n	801406a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801403e:	68bb      	ldr	r3, [r7, #8]
 8014040:	3304      	adds	r3, #4
 8014042:	461a      	mov	r2, r3
 8014044:	6879      	ldr	r1, [r7, #4]
 8014046:	f44f 7006 	mov.w	r0, #536	; 0x218
 801404a:	f7fc fe8f 	bl	8010d6c <tcp_eff_send_mss_netif>
 801404e:	4603      	mov	r3, r0
 8014050:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014052:	8b7b      	ldrh	r3, [r7, #26]
 8014054:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014058:	4618      	mov	r0, r3
 801405a:	f7f9 fd5e 	bl	800db1a <lwip_htonl>
 801405e:	4602      	mov	r2, r0
 8014060:	69fb      	ldr	r3, [r7, #28]
 8014062:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014064:	69fb      	ldr	r3, [r7, #28]
 8014066:	3304      	adds	r3, #4
 8014068:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801406a:	68bb      	ldr	r3, [r7, #8]
 801406c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014070:	2b00      	cmp	r3, #0
 8014072:	da02      	bge.n	801407a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014074:	68bb      	ldr	r3, [r7, #8]
 8014076:	2200      	movs	r2, #0
 8014078:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801407e:	2b00      	cmp	r3, #0
 8014080:	d10c      	bne.n	801409c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014082:	4b34      	ldr	r3, [pc, #208]	; (8014154 <tcp_output_segment+0x1b4>)
 8014084:	681a      	ldr	r2, [r3, #0]
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	68db      	ldr	r3, [r3, #12]
 801408e:	685b      	ldr	r3, [r3, #4]
 8014090:	4618      	mov	r0, r3
 8014092:	f7f9 fd42 	bl	800db1a <lwip_htonl>
 8014096:	4602      	mov	r2, r0
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	68da      	ldr	r2, [r3, #12]
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	685b      	ldr	r3, [r3, #4]
 80140a4:	685b      	ldr	r3, [r3, #4]
 80140a6:	1ad3      	subs	r3, r2, r3
 80140a8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	685b      	ldr	r3, [r3, #4]
 80140ae:	8959      	ldrh	r1, [r3, #10]
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	685b      	ldr	r3, [r3, #4]
 80140b4:	8b3a      	ldrh	r2, [r7, #24]
 80140b6:	1a8a      	subs	r2, r1, r2
 80140b8:	b292      	uxth	r2, r2
 80140ba:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	685b      	ldr	r3, [r3, #4]
 80140c0:	8919      	ldrh	r1, [r3, #8]
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	685b      	ldr	r3, [r3, #4]
 80140c6:	8b3a      	ldrh	r2, [r7, #24]
 80140c8:	1a8a      	subs	r2, r1, r2
 80140ca:	b292      	uxth	r2, r2
 80140cc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	685b      	ldr	r3, [r3, #4]
 80140d2:	68fa      	ldr	r2, [r7, #12]
 80140d4:	68d2      	ldr	r2, [r2, #12]
 80140d6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	68db      	ldr	r3, [r3, #12]
 80140dc:	2200      	movs	r2, #0
 80140de:	741a      	strb	r2, [r3, #16]
 80140e0:	2200      	movs	r2, #0
 80140e2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	68db      	ldr	r3, [r3, #12]
 80140e8:	f103 0214 	add.w	r2, r3, #20
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	7a9b      	ldrb	r3, [r3, #10]
 80140f0:	009b      	lsls	r3, r3, #2
 80140f2:	f003 0304 	and.w	r3, r3, #4
 80140f6:	4413      	add	r3, r2
 80140f8:	69fa      	ldr	r2, [r7, #28]
 80140fa:	429a      	cmp	r2, r3
 80140fc:	d006      	beq.n	801410c <tcp_output_segment+0x16c>
 80140fe:	4b10      	ldr	r3, [pc, #64]	; (8014140 <tcp_output_segment+0x1a0>)
 8014100:	f240 621c 	movw	r2, #1564	; 0x61c
 8014104:	4914      	ldr	r1, [pc, #80]	; (8014158 <tcp_output_segment+0x1b8>)
 8014106:	4810      	ldr	r0, [pc, #64]	; (8014148 <tcp_output_segment+0x1a8>)
 8014108:	f006 f9a4 	bl	801a454 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	6858      	ldr	r0, [r3, #4]
 8014110:	68b9      	ldr	r1, [r7, #8]
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	1d1c      	adds	r4, r3, #4
 8014116:	68bb      	ldr	r3, [r7, #8]
 8014118:	7add      	ldrb	r5, [r3, #11]
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	7a9b      	ldrb	r3, [r3, #10]
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	9202      	str	r2, [sp, #8]
 8014122:	2206      	movs	r2, #6
 8014124:	9201      	str	r2, [sp, #4]
 8014126:	9300      	str	r3, [sp, #0]
 8014128:	462b      	mov	r3, r5
 801412a:	4622      	mov	r2, r4
 801412c:	f004 fc1c 	bl	8018968 <ip4_output_if>
 8014130:	4603      	mov	r3, r0
 8014132:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014134:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014138:	4618      	mov	r0, r3
 801413a:	3720      	adds	r7, #32
 801413c:	46bd      	mov	sp, r7
 801413e:	bdb0      	pop	{r4, r5, r7, pc}
 8014140:	0801d290 	.word	0x0801d290
 8014144:	0801d854 	.word	0x0801d854
 8014148:	0801d2e4 	.word	0x0801d2e4
 801414c:	0801d874 	.word	0x0801d874
 8014150:	0801d894 	.word	0x0801d894
 8014154:	2000f398 	.word	0x2000f398
 8014158:	0801d8b8 	.word	0x0801d8b8

0801415c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801415c:	b5b0      	push	{r4, r5, r7, lr}
 801415e:	b084      	sub	sp, #16
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d106      	bne.n	8014178 <tcp_rexmit_rto_prepare+0x1c>
 801416a:	4b31      	ldr	r3, [pc, #196]	; (8014230 <tcp_rexmit_rto_prepare+0xd4>)
 801416c:	f240 6263 	movw	r2, #1635	; 0x663
 8014170:	4930      	ldr	r1, [pc, #192]	; (8014234 <tcp_rexmit_rto_prepare+0xd8>)
 8014172:	4831      	ldr	r0, [pc, #196]	; (8014238 <tcp_rexmit_rto_prepare+0xdc>)
 8014174:	f006 f96e 	bl	801a454 <iprintf>

  if (pcb->unacked == NULL) {
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801417c:	2b00      	cmp	r3, #0
 801417e:	d102      	bne.n	8014186 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014180:	f06f 0305 	mvn.w	r3, #5
 8014184:	e050      	b.n	8014228 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801418a:	60fb      	str	r3, [r7, #12]
 801418c:	e00b      	b.n	80141a6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801418e:	68f8      	ldr	r0, [r7, #12]
 8014190:	f7ff fee6 	bl	8013f60 <tcp_output_segment_busy>
 8014194:	4603      	mov	r3, r0
 8014196:	2b00      	cmp	r3, #0
 8014198:	d002      	beq.n	80141a0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801419a:	f06f 0305 	mvn.w	r3, #5
 801419e:	e043      	b.n	8014228 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	60fb      	str	r3, [r7, #12]
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d1ef      	bne.n	801418e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f7ff fed6 	bl	8013f60 <tcp_output_segment_busy>
 80141b4:	4603      	mov	r3, r0
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d002      	beq.n	80141c0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80141ba:	f06f 0305 	mvn.w	r3, #5
 80141be:	e033      	b.n	8014228 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	2200      	movs	r2, #0
 80141d4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	8b5b      	ldrh	r3, [r3, #26]
 80141da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80141de:	b29a      	uxth	r2, r3
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	68db      	ldr	r3, [r3, #12]
 80141e8:	685b      	ldr	r3, [r3, #4]
 80141ea:	4618      	mov	r0, r3
 80141ec:	f7f9 fc95 	bl	800db1a <lwip_htonl>
 80141f0:	4604      	mov	r4, r0
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	891b      	ldrh	r3, [r3, #8]
 80141f6:	461d      	mov	r5, r3
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	68db      	ldr	r3, [r3, #12]
 80141fc:	899b      	ldrh	r3, [r3, #12]
 80141fe:	b29b      	uxth	r3, r3
 8014200:	4618      	mov	r0, r3
 8014202:	f7f9 fc75 	bl	800daf0 <lwip_htons>
 8014206:	4603      	mov	r3, r0
 8014208:	b2db      	uxtb	r3, r3
 801420a:	f003 0303 	and.w	r3, r3, #3
 801420e:	2b00      	cmp	r3, #0
 8014210:	d001      	beq.n	8014216 <tcp_rexmit_rto_prepare+0xba>
 8014212:	2301      	movs	r3, #1
 8014214:	e000      	b.n	8014218 <tcp_rexmit_rto_prepare+0xbc>
 8014216:	2300      	movs	r3, #0
 8014218:	442b      	add	r3, r5
 801421a:	18e2      	adds	r2, r4, r3
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2200      	movs	r2, #0
 8014224:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014226:	2300      	movs	r3, #0
}
 8014228:	4618      	mov	r0, r3
 801422a:	3710      	adds	r7, #16
 801422c:	46bd      	mov	sp, r7
 801422e:	bdb0      	pop	{r4, r5, r7, pc}
 8014230:	0801d290 	.word	0x0801d290
 8014234:	0801d8cc 	.word	0x0801d8cc
 8014238:	0801d2e4 	.word	0x0801d2e4

0801423c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b082      	sub	sp, #8
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d106      	bne.n	8014258 <tcp_rexmit_rto_commit+0x1c>
 801424a:	4b0d      	ldr	r3, [pc, #52]	; (8014280 <tcp_rexmit_rto_commit+0x44>)
 801424c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014250:	490c      	ldr	r1, [pc, #48]	; (8014284 <tcp_rexmit_rto_commit+0x48>)
 8014252:	480d      	ldr	r0, [pc, #52]	; (8014288 <tcp_rexmit_rto_commit+0x4c>)
 8014254:	f006 f8fe 	bl	801a454 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801425e:	2bff      	cmp	r3, #255	; 0xff
 8014260:	d007      	beq.n	8014272 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014268:	3301      	adds	r3, #1
 801426a:	b2da      	uxtb	r2, r3
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f7ff fc80 	bl	8013b78 <tcp_output>
}
 8014278:	bf00      	nop
 801427a:	3708      	adds	r7, #8
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}
 8014280:	0801d290 	.word	0x0801d290
 8014284:	0801d8f0 	.word	0x0801d8f0
 8014288:	0801d2e4 	.word	0x0801d2e4

0801428c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d106      	bne.n	80142a8 <tcp_rexmit_rto+0x1c>
 801429a:	4b0a      	ldr	r3, [pc, #40]	; (80142c4 <tcp_rexmit_rto+0x38>)
 801429c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80142a0:	4909      	ldr	r1, [pc, #36]	; (80142c8 <tcp_rexmit_rto+0x3c>)
 80142a2:	480a      	ldr	r0, [pc, #40]	; (80142cc <tcp_rexmit_rto+0x40>)
 80142a4:	f006 f8d6 	bl	801a454 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f7ff ff57 	bl	801415c <tcp_rexmit_rto_prepare>
 80142ae:	4603      	mov	r3, r0
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d102      	bne.n	80142ba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f7ff ffc1 	bl	801423c <tcp_rexmit_rto_commit>
  }
}
 80142ba:	bf00      	nop
 80142bc:	3708      	adds	r7, #8
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	bf00      	nop
 80142c4:	0801d290 	.word	0x0801d290
 80142c8:	0801d914 	.word	0x0801d914
 80142cc:	0801d2e4 	.word	0x0801d2e4

080142d0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80142d0:	b590      	push	{r4, r7, lr}
 80142d2:	b085      	sub	sp, #20
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d106      	bne.n	80142ec <tcp_rexmit+0x1c>
 80142de:	4b2f      	ldr	r3, [pc, #188]	; (801439c <tcp_rexmit+0xcc>)
 80142e0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80142e4:	492e      	ldr	r1, [pc, #184]	; (80143a0 <tcp_rexmit+0xd0>)
 80142e6:	482f      	ldr	r0, [pc, #188]	; (80143a4 <tcp_rexmit+0xd4>)
 80142e8:	f006 f8b4 	bl	801a454 <iprintf>

  if (pcb->unacked == NULL) {
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d102      	bne.n	80142fa <tcp_rexmit+0x2a>
    return ERR_VAL;
 80142f4:	f06f 0305 	mvn.w	r3, #5
 80142f8:	e04c      	b.n	8014394 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142fe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014300:	68b8      	ldr	r0, [r7, #8]
 8014302:	f7ff fe2d 	bl	8013f60 <tcp_output_segment_busy>
 8014306:	4603      	mov	r3, r0
 8014308:	2b00      	cmp	r3, #0
 801430a:	d002      	beq.n	8014312 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801430c:	f06f 0305 	mvn.w	r3, #5
 8014310:	e040      	b.n	8014394 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	681a      	ldr	r2, [r3, #0]
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	336c      	adds	r3, #108	; 0x6c
 801431e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014320:	e002      	b.n	8014328 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d011      	beq.n	8014354 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	68db      	ldr	r3, [r3, #12]
 8014336:	685b      	ldr	r3, [r3, #4]
 8014338:	4618      	mov	r0, r3
 801433a:	f7f9 fbee 	bl	800db1a <lwip_htonl>
 801433e:	4604      	mov	r4, r0
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	68db      	ldr	r3, [r3, #12]
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	4618      	mov	r0, r3
 8014348:	f7f9 fbe7 	bl	800db1a <lwip_htonl>
 801434c:	4603      	mov	r3, r0
 801434e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014350:	2b00      	cmp	r3, #0
 8014352:	dbe6      	blt.n	8014322 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	681a      	ldr	r2, [r3, #0]
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	68ba      	ldr	r2, [r7, #8]
 8014360:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014362:	68bb      	ldr	r3, [r7, #8]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d103      	bne.n	8014372 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	2200      	movs	r2, #0
 801436e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014378:	2bff      	cmp	r3, #255	; 0xff
 801437a:	d007      	beq.n	801438c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014382:	3301      	adds	r3, #1
 8014384:	b2da      	uxtb	r2, r3
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2200      	movs	r2, #0
 8014390:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014392:	2300      	movs	r3, #0
}
 8014394:	4618      	mov	r0, r3
 8014396:	3714      	adds	r7, #20
 8014398:	46bd      	mov	sp, r7
 801439a:	bd90      	pop	{r4, r7, pc}
 801439c:	0801d290 	.word	0x0801d290
 80143a0:	0801d930 	.word	0x0801d930
 80143a4:	0801d2e4 	.word	0x0801d2e4

080143a8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d106      	bne.n	80143c4 <tcp_rexmit_fast+0x1c>
 80143b6:	4b2a      	ldr	r3, [pc, #168]	; (8014460 <tcp_rexmit_fast+0xb8>)
 80143b8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80143bc:	4929      	ldr	r1, [pc, #164]	; (8014464 <tcp_rexmit_fast+0xbc>)
 80143be:	482a      	ldr	r0, [pc, #168]	; (8014468 <tcp_rexmit_fast+0xc0>)
 80143c0:	f006 f848 	bl	801a454 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d044      	beq.n	8014456 <tcp_rexmit_fast+0xae>
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	8b5b      	ldrh	r3, [r3, #26]
 80143d0:	f003 0304 	and.w	r3, r3, #4
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d13e      	bne.n	8014456 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f7ff ff79 	bl	80142d0 <tcp_rexmit>
 80143de:	4603      	mov	r3, r0
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d138      	bne.n	8014456 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80143f0:	4293      	cmp	r3, r2
 80143f2:	bf28      	it	cs
 80143f4:	4613      	movcs	r3, r2
 80143f6:	b29b      	uxth	r3, r3
 80143f8:	0fda      	lsrs	r2, r3, #31
 80143fa:	4413      	add	r3, r2
 80143fc:	105b      	asrs	r3, r3, #1
 80143fe:	b29a      	uxth	r2, r3
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801440c:	461a      	mov	r2, r3
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014412:	005b      	lsls	r3, r3, #1
 8014414:	429a      	cmp	r2, r3
 8014416:	d206      	bcs.n	8014426 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801441c:	005b      	lsls	r3, r3, #1
 801441e:	b29a      	uxth	r2, r3
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014430:	4619      	mov	r1, r3
 8014432:	0049      	lsls	r1, r1, #1
 8014434:	440b      	add	r3, r1
 8014436:	b29b      	uxth	r3, r3
 8014438:	4413      	add	r3, r2
 801443a:	b29a      	uxth	r2, r3
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	8b5b      	ldrh	r3, [r3, #26]
 8014446:	f043 0304 	orr.w	r3, r3, #4
 801444a:	b29a      	uxth	r2, r3
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	2200      	movs	r2, #0
 8014454:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014456:	bf00      	nop
 8014458:	3708      	adds	r7, #8
 801445a:	46bd      	mov	sp, r7
 801445c:	bd80      	pop	{r7, pc}
 801445e:	bf00      	nop
 8014460:	0801d290 	.word	0x0801d290
 8014464:	0801d948 	.word	0x0801d948
 8014468:	0801d2e4 	.word	0x0801d2e4

0801446c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b086      	sub	sp, #24
 8014470:	af00      	add	r7, sp, #0
 8014472:	60f8      	str	r0, [r7, #12]
 8014474:	607b      	str	r3, [r7, #4]
 8014476:	460b      	mov	r3, r1
 8014478:	817b      	strh	r3, [r7, #10]
 801447a:	4613      	mov	r3, r2
 801447c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801447e:	897a      	ldrh	r2, [r7, #10]
 8014480:	893b      	ldrh	r3, [r7, #8]
 8014482:	4413      	add	r3, r2
 8014484:	b29b      	uxth	r3, r3
 8014486:	3314      	adds	r3, #20
 8014488:	b29b      	uxth	r3, r3
 801448a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801448e:	4619      	mov	r1, r3
 8014490:	2022      	movs	r0, #34	; 0x22
 8014492:	f7fa fc01 	bl	800ec98 <pbuf_alloc>
 8014496:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014498:	697b      	ldr	r3, [r7, #20]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d04d      	beq.n	801453a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801449e:	897b      	ldrh	r3, [r7, #10]
 80144a0:	3313      	adds	r3, #19
 80144a2:	697a      	ldr	r2, [r7, #20]
 80144a4:	8952      	ldrh	r2, [r2, #10]
 80144a6:	4293      	cmp	r3, r2
 80144a8:	db06      	blt.n	80144b8 <tcp_output_alloc_header_common+0x4c>
 80144aa:	4b26      	ldr	r3, [pc, #152]	; (8014544 <tcp_output_alloc_header_common+0xd8>)
 80144ac:	f240 7223 	movw	r2, #1827	; 0x723
 80144b0:	4925      	ldr	r1, [pc, #148]	; (8014548 <tcp_output_alloc_header_common+0xdc>)
 80144b2:	4826      	ldr	r0, [pc, #152]	; (801454c <tcp_output_alloc_header_common+0xe0>)
 80144b4:	f005 ffce 	bl	801a454 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80144be:	8c3b      	ldrh	r3, [r7, #32]
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7f9 fb15 	bl	800daf0 <lwip_htons>
 80144c6:	4603      	mov	r3, r0
 80144c8:	461a      	mov	r2, r3
 80144ca:	693b      	ldr	r3, [r7, #16]
 80144cc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80144ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7f9 fb0d 	bl	800daf0 <lwip_htons>
 80144d6:	4603      	mov	r3, r0
 80144d8:	461a      	mov	r2, r3
 80144da:	693b      	ldr	r3, [r7, #16]
 80144dc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	687a      	ldr	r2, [r7, #4]
 80144e2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80144e4:	68f8      	ldr	r0, [r7, #12]
 80144e6:	f7f9 fb18 	bl	800db1a <lwip_htonl>
 80144ea:	4602      	mov	r2, r0
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80144f0:	897b      	ldrh	r3, [r7, #10]
 80144f2:	089b      	lsrs	r3, r3, #2
 80144f4:	b29b      	uxth	r3, r3
 80144f6:	3305      	adds	r3, #5
 80144f8:	b29b      	uxth	r3, r3
 80144fa:	031b      	lsls	r3, r3, #12
 80144fc:	b29a      	uxth	r2, r3
 80144fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014502:	b29b      	uxth	r3, r3
 8014504:	4313      	orrs	r3, r2
 8014506:	b29b      	uxth	r3, r3
 8014508:	4618      	mov	r0, r3
 801450a:	f7f9 faf1 	bl	800daf0 <lwip_htons>
 801450e:	4603      	mov	r3, r0
 8014510:	461a      	mov	r2, r3
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014516:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014518:	4618      	mov	r0, r3
 801451a:	f7f9 fae9 	bl	800daf0 <lwip_htons>
 801451e:	4603      	mov	r3, r0
 8014520:	461a      	mov	r2, r3
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	2200      	movs	r2, #0
 801452a:	741a      	strb	r2, [r3, #16]
 801452c:	2200      	movs	r2, #0
 801452e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014530:	693b      	ldr	r3, [r7, #16]
 8014532:	2200      	movs	r2, #0
 8014534:	749a      	strb	r2, [r3, #18]
 8014536:	2200      	movs	r2, #0
 8014538:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801453a:	697b      	ldr	r3, [r7, #20]
}
 801453c:	4618      	mov	r0, r3
 801453e:	3718      	adds	r7, #24
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}
 8014544:	0801d290 	.word	0x0801d290
 8014548:	0801d968 	.word	0x0801d968
 801454c:	0801d2e4 	.word	0x0801d2e4

08014550 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014550:	b5b0      	push	{r4, r5, r7, lr}
 8014552:	b08a      	sub	sp, #40	; 0x28
 8014554:	af04      	add	r7, sp, #16
 8014556:	60f8      	str	r0, [r7, #12]
 8014558:	607b      	str	r3, [r7, #4]
 801455a:	460b      	mov	r3, r1
 801455c:	817b      	strh	r3, [r7, #10]
 801455e:	4613      	mov	r3, r2
 8014560:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d106      	bne.n	8014576 <tcp_output_alloc_header+0x26>
 8014568:	4b15      	ldr	r3, [pc, #84]	; (80145c0 <tcp_output_alloc_header+0x70>)
 801456a:	f240 7242 	movw	r2, #1858	; 0x742
 801456e:	4915      	ldr	r1, [pc, #84]	; (80145c4 <tcp_output_alloc_header+0x74>)
 8014570:	4815      	ldr	r0, [pc, #84]	; (80145c8 <tcp_output_alloc_header+0x78>)
 8014572:	f005 ff6f 	bl	801a454 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	8adb      	ldrh	r3, [r3, #22]
 801457e:	68fa      	ldr	r2, [r7, #12]
 8014580:	8b12      	ldrh	r2, [r2, #24]
 8014582:	68f9      	ldr	r1, [r7, #12]
 8014584:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014586:	893d      	ldrh	r5, [r7, #8]
 8014588:	897c      	ldrh	r4, [r7, #10]
 801458a:	9103      	str	r1, [sp, #12]
 801458c:	2110      	movs	r1, #16
 801458e:	9102      	str	r1, [sp, #8]
 8014590:	9201      	str	r2, [sp, #4]
 8014592:	9300      	str	r3, [sp, #0]
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	462a      	mov	r2, r5
 8014598:	4621      	mov	r1, r4
 801459a:	f7ff ff67 	bl	801446c <tcp_output_alloc_header_common>
 801459e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80145a0:	697b      	ldr	r3, [r7, #20]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d006      	beq.n	80145b4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145aa:	68fa      	ldr	r2, [r7, #12]
 80145ac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80145ae:	441a      	add	r2, r3
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80145b4:	697b      	ldr	r3, [r7, #20]
}
 80145b6:	4618      	mov	r0, r3
 80145b8:	3718      	adds	r7, #24
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bdb0      	pop	{r4, r5, r7, pc}
 80145be:	bf00      	nop
 80145c0:	0801d290 	.word	0x0801d290
 80145c4:	0801d998 	.word	0x0801d998
 80145c8:	0801d2e4 	.word	0x0801d2e4

080145cc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b088      	sub	sp, #32
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	60b9      	str	r1, [r7, #8]
 80145d6:	4611      	mov	r1, r2
 80145d8:	461a      	mov	r2, r3
 80145da:	460b      	mov	r3, r1
 80145dc:	71fb      	strb	r3, [r7, #7]
 80145de:	4613      	mov	r3, r2
 80145e0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80145e2:	2300      	movs	r3, #0
 80145e4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80145e6:	68bb      	ldr	r3, [r7, #8]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d106      	bne.n	80145fa <tcp_output_fill_options+0x2e>
 80145ec:	4b13      	ldr	r3, [pc, #76]	; (801463c <tcp_output_fill_options+0x70>)
 80145ee:	f240 7256 	movw	r2, #1878	; 0x756
 80145f2:	4913      	ldr	r1, [pc, #76]	; (8014640 <tcp_output_fill_options+0x74>)
 80145f4:	4813      	ldr	r0, [pc, #76]	; (8014644 <tcp_output_fill_options+0x78>)
 80145f6:	f005 ff2d 	bl	801a454 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80145fa:	68bb      	ldr	r3, [r7, #8]
 80145fc:	685b      	ldr	r3, [r3, #4]
 80145fe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014600:	69bb      	ldr	r3, [r7, #24]
 8014602:	3314      	adds	r3, #20
 8014604:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014606:	69bb      	ldr	r3, [r7, #24]
 8014608:	f103 0214 	add.w	r2, r3, #20
 801460c:	8bfb      	ldrh	r3, [r7, #30]
 801460e:	009b      	lsls	r3, r3, #2
 8014610:	4619      	mov	r1, r3
 8014612:	79fb      	ldrb	r3, [r7, #7]
 8014614:	009b      	lsls	r3, r3, #2
 8014616:	f003 0304 	and.w	r3, r3, #4
 801461a:	440b      	add	r3, r1
 801461c:	4413      	add	r3, r2
 801461e:	697a      	ldr	r2, [r7, #20]
 8014620:	429a      	cmp	r2, r3
 8014622:	d006      	beq.n	8014632 <tcp_output_fill_options+0x66>
 8014624:	4b05      	ldr	r3, [pc, #20]	; (801463c <tcp_output_fill_options+0x70>)
 8014626:	f240 7275 	movw	r2, #1909	; 0x775
 801462a:	4907      	ldr	r1, [pc, #28]	; (8014648 <tcp_output_fill_options+0x7c>)
 801462c:	4805      	ldr	r0, [pc, #20]	; (8014644 <tcp_output_fill_options+0x78>)
 801462e:	f005 ff11 	bl	801a454 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014632:	bf00      	nop
 8014634:	3720      	adds	r7, #32
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}
 801463a:	bf00      	nop
 801463c:	0801d290 	.word	0x0801d290
 8014640:	0801d9c0 	.word	0x0801d9c0
 8014644:	0801d2e4 	.word	0x0801d2e4
 8014648:	0801d8b8 	.word	0x0801d8b8

0801464c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b08a      	sub	sp, #40	; 0x28
 8014650:	af04      	add	r7, sp, #16
 8014652:	60f8      	str	r0, [r7, #12]
 8014654:	60b9      	str	r1, [r7, #8]
 8014656:	607a      	str	r2, [r7, #4]
 8014658:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d106      	bne.n	801466e <tcp_output_control_segment+0x22>
 8014660:	4b1c      	ldr	r3, [pc, #112]	; (80146d4 <tcp_output_control_segment+0x88>)
 8014662:	f240 7287 	movw	r2, #1927	; 0x787
 8014666:	491c      	ldr	r1, [pc, #112]	; (80146d8 <tcp_output_control_segment+0x8c>)
 8014668:	481c      	ldr	r0, [pc, #112]	; (80146dc <tcp_output_control_segment+0x90>)
 801466a:	f005 fef3 	bl	801a454 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801466e:	683a      	ldr	r2, [r7, #0]
 8014670:	6879      	ldr	r1, [r7, #4]
 8014672:	68f8      	ldr	r0, [r7, #12]
 8014674:	f7fe ff40 	bl	80134f8 <tcp_route>
 8014678:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801467a:	693b      	ldr	r3, [r7, #16]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d102      	bne.n	8014686 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014680:	23fc      	movs	r3, #252	; 0xfc
 8014682:	75fb      	strb	r3, [r7, #23]
 8014684:	e01c      	b.n	80146c0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d006      	beq.n	801469a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	7adb      	ldrb	r3, [r3, #11]
 8014690:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	7a9b      	ldrb	r3, [r3, #10]
 8014696:	757b      	strb	r3, [r7, #21]
 8014698:	e003      	b.n	80146a2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801469a:	23ff      	movs	r3, #255	; 0xff
 801469c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801469e:	2300      	movs	r3, #0
 80146a0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80146a2:	7dba      	ldrb	r2, [r7, #22]
 80146a4:	693b      	ldr	r3, [r7, #16]
 80146a6:	9302      	str	r3, [sp, #8]
 80146a8:	2306      	movs	r3, #6
 80146aa:	9301      	str	r3, [sp, #4]
 80146ac:	7d7b      	ldrb	r3, [r7, #21]
 80146ae:	9300      	str	r3, [sp, #0]
 80146b0:	4613      	mov	r3, r2
 80146b2:	683a      	ldr	r2, [r7, #0]
 80146b4:	6879      	ldr	r1, [r7, #4]
 80146b6:	68b8      	ldr	r0, [r7, #8]
 80146b8:	f004 f956 	bl	8018968 <ip4_output_if>
 80146bc:	4603      	mov	r3, r0
 80146be:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80146c0:	68b8      	ldr	r0, [r7, #8]
 80146c2:	f7fa fdcd 	bl	800f260 <pbuf_free>
  return err;
 80146c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80146ca:	4618      	mov	r0, r3
 80146cc:	3718      	adds	r7, #24
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bd80      	pop	{r7, pc}
 80146d2:	bf00      	nop
 80146d4:	0801d290 	.word	0x0801d290
 80146d8:	0801d9e8 	.word	0x0801d9e8
 80146dc:	0801d2e4 	.word	0x0801d2e4

080146e0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80146e0:	b590      	push	{r4, r7, lr}
 80146e2:	b08b      	sub	sp, #44	; 0x2c
 80146e4:	af04      	add	r7, sp, #16
 80146e6:	60f8      	str	r0, [r7, #12]
 80146e8:	60b9      	str	r1, [r7, #8]
 80146ea:	607a      	str	r2, [r7, #4]
 80146ec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80146ee:	683b      	ldr	r3, [r7, #0]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d106      	bne.n	8014702 <tcp_rst+0x22>
 80146f4:	4b1f      	ldr	r3, [pc, #124]	; (8014774 <tcp_rst+0x94>)
 80146f6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80146fa:	491f      	ldr	r1, [pc, #124]	; (8014778 <tcp_rst+0x98>)
 80146fc:	481f      	ldr	r0, [pc, #124]	; (801477c <tcp_rst+0x9c>)
 80146fe:	f005 fea9 	bl	801a454 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014704:	2b00      	cmp	r3, #0
 8014706:	d106      	bne.n	8014716 <tcp_rst+0x36>
 8014708:	4b1a      	ldr	r3, [pc, #104]	; (8014774 <tcp_rst+0x94>)
 801470a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801470e:	491c      	ldr	r1, [pc, #112]	; (8014780 <tcp_rst+0xa0>)
 8014710:	481a      	ldr	r0, [pc, #104]	; (801477c <tcp_rst+0x9c>)
 8014712:	f005 fe9f 	bl	801a454 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014716:	2300      	movs	r3, #0
 8014718:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801471a:	f246 0308 	movw	r3, #24584	; 0x6008
 801471e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014720:	7dfb      	ldrb	r3, [r7, #23]
 8014722:	b29c      	uxth	r4, r3
 8014724:	68b8      	ldr	r0, [r7, #8]
 8014726:	f7f9 f9f8 	bl	800db1a <lwip_htonl>
 801472a:	4602      	mov	r2, r0
 801472c:	8abb      	ldrh	r3, [r7, #20]
 801472e:	9303      	str	r3, [sp, #12]
 8014730:	2314      	movs	r3, #20
 8014732:	9302      	str	r3, [sp, #8]
 8014734:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014736:	9301      	str	r3, [sp, #4]
 8014738:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801473a:	9300      	str	r3, [sp, #0]
 801473c:	4613      	mov	r3, r2
 801473e:	2200      	movs	r2, #0
 8014740:	4621      	mov	r1, r4
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f7ff fe92 	bl	801446c <tcp_output_alloc_header_common>
 8014748:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801474a:	693b      	ldr	r3, [r7, #16]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d00c      	beq.n	801476a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014750:	7dfb      	ldrb	r3, [r7, #23]
 8014752:	2200      	movs	r2, #0
 8014754:	6939      	ldr	r1, [r7, #16]
 8014756:	68f8      	ldr	r0, [r7, #12]
 8014758:	f7ff ff38 	bl	80145cc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801475e:	683a      	ldr	r2, [r7, #0]
 8014760:	6939      	ldr	r1, [r7, #16]
 8014762:	68f8      	ldr	r0, [r7, #12]
 8014764:	f7ff ff72 	bl	801464c <tcp_output_control_segment>
 8014768:	e000      	b.n	801476c <tcp_rst+0x8c>
    return;
 801476a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801476c:	371c      	adds	r7, #28
 801476e:	46bd      	mov	sp, r7
 8014770:	bd90      	pop	{r4, r7, pc}
 8014772:	bf00      	nop
 8014774:	0801d290 	.word	0x0801d290
 8014778:	0801da14 	.word	0x0801da14
 801477c:	0801d2e4 	.word	0x0801d2e4
 8014780:	0801da30 	.word	0x0801da30

08014784 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014784:	b590      	push	{r4, r7, lr}
 8014786:	b087      	sub	sp, #28
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801478c:	2300      	movs	r3, #0
 801478e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014790:	2300      	movs	r3, #0
 8014792:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d106      	bne.n	80147a8 <tcp_send_empty_ack+0x24>
 801479a:	4b28      	ldr	r3, [pc, #160]	; (801483c <tcp_send_empty_ack+0xb8>)
 801479c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80147a0:	4927      	ldr	r1, [pc, #156]	; (8014840 <tcp_send_empty_ack+0xbc>)
 80147a2:	4828      	ldr	r0, [pc, #160]	; (8014844 <tcp_send_empty_ack+0xc0>)
 80147a4:	f005 fe56 	bl	801a454 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80147a8:	7dfb      	ldrb	r3, [r7, #23]
 80147aa:	009b      	lsls	r3, r3, #2
 80147ac:	b2db      	uxtb	r3, r3
 80147ae:	f003 0304 	and.w	r3, r3, #4
 80147b2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80147b4:	7d7b      	ldrb	r3, [r7, #21]
 80147b6:	b29c      	uxth	r4, r3
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147bc:	4618      	mov	r0, r3
 80147be:	f7f9 f9ac 	bl	800db1a <lwip_htonl>
 80147c2:	4603      	mov	r3, r0
 80147c4:	2200      	movs	r2, #0
 80147c6:	4621      	mov	r1, r4
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f7ff fec1 	bl	8014550 <tcp_output_alloc_header>
 80147ce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80147d0:	693b      	ldr	r3, [r7, #16]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d109      	bne.n	80147ea <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	8b5b      	ldrh	r3, [r3, #26]
 80147da:	f043 0303 	orr.w	r3, r3, #3
 80147de:	b29a      	uxth	r2, r3
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80147e4:	f06f 0301 	mvn.w	r3, #1
 80147e8:	e023      	b.n	8014832 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80147ea:	7dbb      	ldrb	r3, [r7, #22]
 80147ec:	7dfa      	ldrb	r2, [r7, #23]
 80147ee:	6939      	ldr	r1, [r7, #16]
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f7ff feeb 	bl	80145cc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80147f6:	687a      	ldr	r2, [r7, #4]
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	3304      	adds	r3, #4
 80147fc:	6939      	ldr	r1, [r7, #16]
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f7ff ff24 	bl	801464c <tcp_output_control_segment>
 8014804:	4603      	mov	r3, r0
 8014806:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d007      	beq.n	8014820 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	8b5b      	ldrh	r3, [r3, #26]
 8014814:	f043 0303 	orr.w	r3, r3, #3
 8014818:	b29a      	uxth	r2, r3
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	835a      	strh	r2, [r3, #26]
 801481e:	e006      	b.n	801482e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	8b5b      	ldrh	r3, [r3, #26]
 8014824:	f023 0303 	bic.w	r3, r3, #3
 8014828:	b29a      	uxth	r2, r3
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801482e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014832:	4618      	mov	r0, r3
 8014834:	371c      	adds	r7, #28
 8014836:	46bd      	mov	sp, r7
 8014838:	bd90      	pop	{r4, r7, pc}
 801483a:	bf00      	nop
 801483c:	0801d290 	.word	0x0801d290
 8014840:	0801da4c 	.word	0x0801da4c
 8014844:	0801d2e4 	.word	0x0801d2e4

08014848 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014848:	b590      	push	{r4, r7, lr}
 801484a:	b087      	sub	sp, #28
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014850:	2300      	movs	r3, #0
 8014852:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d106      	bne.n	8014868 <tcp_keepalive+0x20>
 801485a:	4b18      	ldr	r3, [pc, #96]	; (80148bc <tcp_keepalive+0x74>)
 801485c:	f640 0224 	movw	r2, #2084	; 0x824
 8014860:	4917      	ldr	r1, [pc, #92]	; (80148c0 <tcp_keepalive+0x78>)
 8014862:	4818      	ldr	r0, [pc, #96]	; (80148c4 <tcp_keepalive+0x7c>)
 8014864:	f005 fdf6 	bl	801a454 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014868:	7dfb      	ldrb	r3, [r7, #23]
 801486a:	b29c      	uxth	r4, r3
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014870:	3b01      	subs	r3, #1
 8014872:	4618      	mov	r0, r3
 8014874:	f7f9 f951 	bl	800db1a <lwip_htonl>
 8014878:	4603      	mov	r3, r0
 801487a:	2200      	movs	r2, #0
 801487c:	4621      	mov	r1, r4
 801487e:	6878      	ldr	r0, [r7, #4]
 8014880:	f7ff fe66 	bl	8014550 <tcp_output_alloc_header>
 8014884:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d102      	bne.n	8014892 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801488c:	f04f 33ff 	mov.w	r3, #4294967295
 8014890:	e010      	b.n	80148b4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014892:	7dfb      	ldrb	r3, [r7, #23]
 8014894:	2200      	movs	r2, #0
 8014896:	6939      	ldr	r1, [r7, #16]
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f7ff fe97 	bl	80145cc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801489e:	687a      	ldr	r2, [r7, #4]
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	3304      	adds	r3, #4
 80148a4:	6939      	ldr	r1, [r7, #16]
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f7ff fed0 	bl	801464c <tcp_output_control_segment>
 80148ac:	4603      	mov	r3, r0
 80148ae:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80148b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80148b4:	4618      	mov	r0, r3
 80148b6:	371c      	adds	r7, #28
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd90      	pop	{r4, r7, pc}
 80148bc:	0801d290 	.word	0x0801d290
 80148c0:	0801da6c 	.word	0x0801da6c
 80148c4:	0801d2e4 	.word	0x0801d2e4

080148c8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80148c8:	b590      	push	{r4, r7, lr}
 80148ca:	b08b      	sub	sp, #44	; 0x2c
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80148d0:	2300      	movs	r3, #0
 80148d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d106      	bne.n	80148ea <tcp_zero_window_probe+0x22>
 80148dc:	4b4c      	ldr	r3, [pc, #304]	; (8014a10 <tcp_zero_window_probe+0x148>)
 80148de:	f640 024f 	movw	r2, #2127	; 0x84f
 80148e2:	494c      	ldr	r1, [pc, #304]	; (8014a14 <tcp_zero_window_probe+0x14c>)
 80148e4:	484c      	ldr	r0, [pc, #304]	; (8014a18 <tcp_zero_window_probe+0x150>)
 80148e6:	f005 fdb5 	bl	801a454 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148ee:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80148f0:	6a3b      	ldr	r3, [r7, #32]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d101      	bne.n	80148fa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80148f6:	2300      	movs	r3, #0
 80148f8:	e086      	b.n	8014a08 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014900:	2bff      	cmp	r3, #255	; 0xff
 8014902:	d007      	beq.n	8014914 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801490a:	3301      	adds	r3, #1
 801490c:	b2da      	uxtb	r2, r3
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014914:	6a3b      	ldr	r3, [r7, #32]
 8014916:	68db      	ldr	r3, [r3, #12]
 8014918:	899b      	ldrh	r3, [r3, #12]
 801491a:	b29b      	uxth	r3, r3
 801491c:	4618      	mov	r0, r3
 801491e:	f7f9 f8e7 	bl	800daf0 <lwip_htons>
 8014922:	4603      	mov	r3, r0
 8014924:	b2db      	uxtb	r3, r3
 8014926:	f003 0301 	and.w	r3, r3, #1
 801492a:	2b00      	cmp	r3, #0
 801492c:	d005      	beq.n	801493a <tcp_zero_window_probe+0x72>
 801492e:	6a3b      	ldr	r3, [r7, #32]
 8014930:	891b      	ldrh	r3, [r3, #8]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d101      	bne.n	801493a <tcp_zero_window_probe+0x72>
 8014936:	2301      	movs	r3, #1
 8014938:	e000      	b.n	801493c <tcp_zero_window_probe+0x74>
 801493a:	2300      	movs	r3, #0
 801493c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801493e:	7ffb      	ldrb	r3, [r7, #31]
 8014940:	2b00      	cmp	r3, #0
 8014942:	bf0c      	ite	eq
 8014944:	2301      	moveq	r3, #1
 8014946:	2300      	movne	r3, #0
 8014948:	b2db      	uxtb	r3, r3
 801494a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801494c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014950:	b299      	uxth	r1, r3
 8014952:	6a3b      	ldr	r3, [r7, #32]
 8014954:	68db      	ldr	r3, [r3, #12]
 8014956:	685b      	ldr	r3, [r3, #4]
 8014958:	8bba      	ldrh	r2, [r7, #28]
 801495a:	6878      	ldr	r0, [r7, #4]
 801495c:	f7ff fdf8 	bl	8014550 <tcp_output_alloc_header>
 8014960:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014962:	69bb      	ldr	r3, [r7, #24]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d102      	bne.n	801496e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014968:	f04f 33ff 	mov.w	r3, #4294967295
 801496c:	e04c      	b.n	8014a08 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801496e:	69bb      	ldr	r3, [r7, #24]
 8014970:	685b      	ldr	r3, [r3, #4]
 8014972:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014974:	7ffb      	ldrb	r3, [r7, #31]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d011      	beq.n	801499e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801497a:	697b      	ldr	r3, [r7, #20]
 801497c:	899b      	ldrh	r3, [r3, #12]
 801497e:	b29b      	uxth	r3, r3
 8014980:	b21b      	sxth	r3, r3
 8014982:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014986:	b21c      	sxth	r4, r3
 8014988:	2011      	movs	r0, #17
 801498a:	f7f9 f8b1 	bl	800daf0 <lwip_htons>
 801498e:	4603      	mov	r3, r0
 8014990:	b21b      	sxth	r3, r3
 8014992:	4323      	orrs	r3, r4
 8014994:	b21b      	sxth	r3, r3
 8014996:	b29a      	uxth	r2, r3
 8014998:	697b      	ldr	r3, [r7, #20]
 801499a:	819a      	strh	r2, [r3, #12]
 801499c:	e010      	b.n	80149c0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801499e:	69bb      	ldr	r3, [r7, #24]
 80149a0:	685b      	ldr	r3, [r3, #4]
 80149a2:	3314      	adds	r3, #20
 80149a4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80149a6:	6a3b      	ldr	r3, [r7, #32]
 80149a8:	6858      	ldr	r0, [r3, #4]
 80149aa:	6a3b      	ldr	r3, [r7, #32]
 80149ac:	685b      	ldr	r3, [r3, #4]
 80149ae:	891a      	ldrh	r2, [r3, #8]
 80149b0:	6a3b      	ldr	r3, [r7, #32]
 80149b2:	891b      	ldrh	r3, [r3, #8]
 80149b4:	1ad3      	subs	r3, r2, r3
 80149b6:	b29b      	uxth	r3, r3
 80149b8:	2201      	movs	r2, #1
 80149ba:	6939      	ldr	r1, [r7, #16]
 80149bc:	f7fa fe56 	bl	800f66c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80149c0:	6a3b      	ldr	r3, [r7, #32]
 80149c2:	68db      	ldr	r3, [r3, #12]
 80149c4:	685b      	ldr	r3, [r3, #4]
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7f9 f8a7 	bl	800db1a <lwip_htonl>
 80149cc:	4603      	mov	r3, r0
 80149ce:	3301      	adds	r3, #1
 80149d0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	1ad3      	subs	r3, r2, r3
 80149da:	2b00      	cmp	r3, #0
 80149dc:	da02      	bge.n	80149e4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	68fa      	ldr	r2, [r7, #12]
 80149e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80149e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149e8:	2200      	movs	r2, #0
 80149ea:	69b9      	ldr	r1, [r7, #24]
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f7ff fded 	bl	80145cc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80149f2:	687a      	ldr	r2, [r7, #4]
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	3304      	adds	r3, #4
 80149f8:	69b9      	ldr	r1, [r7, #24]
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f7ff fe26 	bl	801464c <tcp_output_control_segment>
 8014a00:	4603      	mov	r3, r0
 8014a02:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014a04:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	372c      	adds	r7, #44	; 0x2c
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd90      	pop	{r4, r7, pc}
 8014a10:	0801d290 	.word	0x0801d290
 8014a14:	0801da88 	.word	0x0801da88
 8014a18:	0801d2e4 	.word	0x0801d2e4

08014a1c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014a24:	f7fa ff10 	bl	800f848 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014a28:	4b0a      	ldr	r3, [pc, #40]	; (8014a54 <tcpip_tcp_timer+0x38>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d103      	bne.n	8014a38 <tcpip_tcp_timer+0x1c>
 8014a30:	4b09      	ldr	r3, [pc, #36]	; (8014a58 <tcpip_tcp_timer+0x3c>)
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d005      	beq.n	8014a44 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014a38:	2200      	movs	r2, #0
 8014a3a:	4908      	ldr	r1, [pc, #32]	; (8014a5c <tcpip_tcp_timer+0x40>)
 8014a3c:	20fa      	movs	r0, #250	; 0xfa
 8014a3e:	f000 f8f3 	bl	8014c28 <sys_timeout>
 8014a42:	e003      	b.n	8014a4c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014a44:	4b06      	ldr	r3, [pc, #24]	; (8014a60 <tcpip_tcp_timer+0x44>)
 8014a46:	2200      	movs	r2, #0
 8014a48:	601a      	str	r2, [r3, #0]
  }
}
 8014a4a:	bf00      	nop
 8014a4c:	bf00      	nop
 8014a4e:	3708      	adds	r7, #8
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}
 8014a54:	2000f394 	.word	0x2000f394
 8014a58:	2000f3a4 	.word	0x2000f3a4
 8014a5c:	08014a1d 	.word	0x08014a1d
 8014a60:	20008510 	.word	0x20008510

08014a64 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014a68:	4b0a      	ldr	r3, [pc, #40]	; (8014a94 <tcp_timer_needed+0x30>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d10f      	bne.n	8014a90 <tcp_timer_needed+0x2c>
 8014a70:	4b09      	ldr	r3, [pc, #36]	; (8014a98 <tcp_timer_needed+0x34>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d103      	bne.n	8014a80 <tcp_timer_needed+0x1c>
 8014a78:	4b08      	ldr	r3, [pc, #32]	; (8014a9c <tcp_timer_needed+0x38>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d007      	beq.n	8014a90 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014a80:	4b04      	ldr	r3, [pc, #16]	; (8014a94 <tcp_timer_needed+0x30>)
 8014a82:	2201      	movs	r2, #1
 8014a84:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014a86:	2200      	movs	r2, #0
 8014a88:	4905      	ldr	r1, [pc, #20]	; (8014aa0 <tcp_timer_needed+0x3c>)
 8014a8a:	20fa      	movs	r0, #250	; 0xfa
 8014a8c:	f000 f8cc 	bl	8014c28 <sys_timeout>
  }
}
 8014a90:	bf00      	nop
 8014a92:	bd80      	pop	{r7, pc}
 8014a94:	20008510 	.word	0x20008510
 8014a98:	2000f394 	.word	0x2000f394
 8014a9c:	2000f3a4 	.word	0x2000f3a4
 8014aa0:	08014a1d 	.word	0x08014a1d

08014aa4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b086      	sub	sp, #24
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	60f8      	str	r0, [r7, #12]
 8014aac:	60b9      	str	r1, [r7, #8]
 8014aae:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014ab0:	200a      	movs	r0, #10
 8014ab2:	f7f9 fcd3 	bl	800e45c <memp_malloc>
 8014ab6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014ab8:	693b      	ldr	r3, [r7, #16]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d109      	bne.n	8014ad2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014abe:	693b      	ldr	r3, [r7, #16]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d151      	bne.n	8014b68 <sys_timeout_abs+0xc4>
 8014ac4:	4b2a      	ldr	r3, [pc, #168]	; (8014b70 <sys_timeout_abs+0xcc>)
 8014ac6:	22be      	movs	r2, #190	; 0xbe
 8014ac8:	492a      	ldr	r1, [pc, #168]	; (8014b74 <sys_timeout_abs+0xd0>)
 8014aca:	482b      	ldr	r0, [pc, #172]	; (8014b78 <sys_timeout_abs+0xd4>)
 8014acc:	f005 fcc2 	bl	801a454 <iprintf>
    return;
 8014ad0:	e04a      	b.n	8014b68 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014ad2:	693b      	ldr	r3, [r7, #16]
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014ad8:	693b      	ldr	r3, [r7, #16]
 8014ada:	68ba      	ldr	r2, [r7, #8]
 8014adc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014ade:	693b      	ldr	r3, [r7, #16]
 8014ae0:	687a      	ldr	r2, [r7, #4]
 8014ae2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014ae4:	693b      	ldr	r3, [r7, #16]
 8014ae6:	68fa      	ldr	r2, [r7, #12]
 8014ae8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014aea:	4b24      	ldr	r3, [pc, #144]	; (8014b7c <sys_timeout_abs+0xd8>)
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d103      	bne.n	8014afa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014af2:	4a22      	ldr	r2, [pc, #136]	; (8014b7c <sys_timeout_abs+0xd8>)
 8014af4:	693b      	ldr	r3, [r7, #16]
 8014af6:	6013      	str	r3, [r2, #0]
    return;
 8014af8:	e037      	b.n	8014b6a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014afa:	693b      	ldr	r3, [r7, #16]
 8014afc:	685a      	ldr	r2, [r3, #4]
 8014afe:	4b1f      	ldr	r3, [pc, #124]	; (8014b7c <sys_timeout_abs+0xd8>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	685b      	ldr	r3, [r3, #4]
 8014b04:	1ad3      	subs	r3, r2, r3
 8014b06:	0fdb      	lsrs	r3, r3, #31
 8014b08:	f003 0301 	and.w	r3, r3, #1
 8014b0c:	b2db      	uxtb	r3, r3
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d007      	beq.n	8014b22 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014b12:	4b1a      	ldr	r3, [pc, #104]	; (8014b7c <sys_timeout_abs+0xd8>)
 8014b14:	681a      	ldr	r2, [r3, #0]
 8014b16:	693b      	ldr	r3, [r7, #16]
 8014b18:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014b1a:	4a18      	ldr	r2, [pc, #96]	; (8014b7c <sys_timeout_abs+0xd8>)
 8014b1c:	693b      	ldr	r3, [r7, #16]
 8014b1e:	6013      	str	r3, [r2, #0]
 8014b20:	e023      	b.n	8014b6a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014b22:	4b16      	ldr	r3, [pc, #88]	; (8014b7c <sys_timeout_abs+0xd8>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	617b      	str	r3, [r7, #20]
 8014b28:	e01a      	b.n	8014b60 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d00b      	beq.n	8014b4a <sys_timeout_abs+0xa6>
 8014b32:	693b      	ldr	r3, [r7, #16]
 8014b34:	685a      	ldr	r2, [r3, #4]
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	685b      	ldr	r3, [r3, #4]
 8014b3c:	1ad3      	subs	r3, r2, r3
 8014b3e:	0fdb      	lsrs	r3, r3, #31
 8014b40:	f003 0301 	and.w	r3, r3, #1
 8014b44:	b2db      	uxtb	r3, r3
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d007      	beq.n	8014b5a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014b4a:	697b      	ldr	r3, [r7, #20]
 8014b4c:	681a      	ldr	r2, [r3, #0]
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	693a      	ldr	r2, [r7, #16]
 8014b56:	601a      	str	r2, [r3, #0]
        break;
 8014b58:	e007      	b.n	8014b6a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014b5a:	697b      	ldr	r3, [r7, #20]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	617b      	str	r3, [r7, #20]
 8014b60:	697b      	ldr	r3, [r7, #20]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d1e1      	bne.n	8014b2a <sys_timeout_abs+0x86>
 8014b66:	e000      	b.n	8014b6a <sys_timeout_abs+0xc6>
    return;
 8014b68:	bf00      	nop
      }
    }
  }
}
 8014b6a:	3718      	adds	r7, #24
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	bd80      	pop	{r7, pc}
 8014b70:	0801daac 	.word	0x0801daac
 8014b74:	0801dae0 	.word	0x0801dae0
 8014b78:	0801db20 	.word	0x0801db20
 8014b7c:	20008508 	.word	0x20008508

08014b80 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b086      	sub	sp, #24
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	685b      	ldr	r3, [r3, #4]
 8014b90:	4798      	blx	r3

  now = sys_now();
 8014b92:	f7f2 f8d7 	bl	8006d44 <sys_now>
 8014b96:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014b98:	697b      	ldr	r3, [r7, #20]
 8014b9a:	681a      	ldr	r2, [r3, #0]
 8014b9c:	4b0f      	ldr	r3, [pc, #60]	; (8014bdc <lwip_cyclic_timer+0x5c>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	4413      	add	r3, r2
 8014ba2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014ba4:	68fa      	ldr	r2, [r7, #12]
 8014ba6:	693b      	ldr	r3, [r7, #16]
 8014ba8:	1ad3      	subs	r3, r2, r3
 8014baa:	0fdb      	lsrs	r3, r3, #31
 8014bac:	f003 0301 	and.w	r3, r3, #1
 8014bb0:	b2db      	uxtb	r3, r3
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d009      	beq.n	8014bca <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	681a      	ldr	r2, [r3, #0]
 8014bba:	693b      	ldr	r3, [r7, #16]
 8014bbc:	4413      	add	r3, r2
 8014bbe:	687a      	ldr	r2, [r7, #4]
 8014bc0:	4907      	ldr	r1, [pc, #28]	; (8014be0 <lwip_cyclic_timer+0x60>)
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7ff ff6e 	bl	8014aa4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014bc8:	e004      	b.n	8014bd4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014bca:	687a      	ldr	r2, [r7, #4]
 8014bcc:	4904      	ldr	r1, [pc, #16]	; (8014be0 <lwip_cyclic_timer+0x60>)
 8014bce:	68f8      	ldr	r0, [r7, #12]
 8014bd0:	f7ff ff68 	bl	8014aa4 <sys_timeout_abs>
}
 8014bd4:	bf00      	nop
 8014bd6:	3718      	adds	r7, #24
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bd80      	pop	{r7, pc}
 8014bdc:	2000850c 	.word	0x2000850c
 8014be0:	08014b81 	.word	0x08014b81

08014be4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b082      	sub	sp, #8
 8014be8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014bea:	2301      	movs	r3, #1
 8014bec:	607b      	str	r3, [r7, #4]
 8014bee:	e00e      	b.n	8014c0e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014bf0:	4a0b      	ldr	r2, [pc, #44]	; (8014c20 <sys_timeouts_init+0x3c>)
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	00db      	lsls	r3, r3, #3
 8014bfc:	4a08      	ldr	r2, [pc, #32]	; (8014c20 <sys_timeouts_init+0x3c>)
 8014bfe:	4413      	add	r3, r2
 8014c00:	461a      	mov	r2, r3
 8014c02:	4908      	ldr	r1, [pc, #32]	; (8014c24 <sys_timeouts_init+0x40>)
 8014c04:	f000 f810 	bl	8014c28 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	3301      	adds	r3, #1
 8014c0c:	607b      	str	r3, [r7, #4]
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	2b04      	cmp	r3, #4
 8014c12:	d9ed      	bls.n	8014bf0 <sys_timeouts_init+0xc>
  }
}
 8014c14:	bf00      	nop
 8014c16:	bf00      	nop
 8014c18:	3708      	adds	r7, #8
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}
 8014c1e:	bf00      	nop
 8014c20:	0801ea80 	.word	0x0801ea80
 8014c24:	08014b81 	.word	0x08014b81

08014c28 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b086      	sub	sp, #24
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	60f8      	str	r0, [r7, #12]
 8014c30:	60b9      	str	r1, [r7, #8]
 8014c32:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014c3a:	d306      	bcc.n	8014c4a <sys_timeout+0x22>
 8014c3c:	4b0a      	ldr	r3, [pc, #40]	; (8014c68 <sys_timeout+0x40>)
 8014c3e:	f240 1229 	movw	r2, #297	; 0x129
 8014c42:	490a      	ldr	r1, [pc, #40]	; (8014c6c <sys_timeout+0x44>)
 8014c44:	480a      	ldr	r0, [pc, #40]	; (8014c70 <sys_timeout+0x48>)
 8014c46:	f005 fc05 	bl	801a454 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014c4a:	f7f2 f87b 	bl	8006d44 <sys_now>
 8014c4e:	4602      	mov	r2, r0
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	4413      	add	r3, r2
 8014c54:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014c56:	687a      	ldr	r2, [r7, #4]
 8014c58:	68b9      	ldr	r1, [r7, #8]
 8014c5a:	6978      	ldr	r0, [r7, #20]
 8014c5c:	f7ff ff22 	bl	8014aa4 <sys_timeout_abs>
#endif
}
 8014c60:	bf00      	nop
 8014c62:	3718      	adds	r7, #24
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}
 8014c68:	0801daac 	.word	0x0801daac
 8014c6c:	0801db48 	.word	0x0801db48
 8014c70:	0801db20 	.word	0x0801db20

08014c74 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b084      	sub	sp, #16
 8014c78:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014c7a:	f7f2 f863 	bl	8006d44 <sys_now>
 8014c7e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014c80:	4b17      	ldr	r3, [pc, #92]	; (8014ce0 <sys_check_timeouts+0x6c>)
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014c86:	68bb      	ldr	r3, [r7, #8]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d022      	beq.n	8014cd2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014c8c:	68bb      	ldr	r3, [r7, #8]
 8014c8e:	685b      	ldr	r3, [r3, #4]
 8014c90:	68fa      	ldr	r2, [r7, #12]
 8014c92:	1ad3      	subs	r3, r2, r3
 8014c94:	0fdb      	lsrs	r3, r3, #31
 8014c96:	f003 0301 	and.w	r3, r3, #1
 8014c9a:	b2db      	uxtb	r3, r3
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d11a      	bne.n	8014cd6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014ca0:	68bb      	ldr	r3, [r7, #8]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	4a0e      	ldr	r2, [pc, #56]	; (8014ce0 <sys_check_timeouts+0x6c>)
 8014ca6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	689b      	ldr	r3, [r3, #8]
 8014cac:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	68db      	ldr	r3, [r3, #12]
 8014cb2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	685b      	ldr	r3, [r3, #4]
 8014cb8:	4a0a      	ldr	r2, [pc, #40]	; (8014ce4 <sys_check_timeouts+0x70>)
 8014cba:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014cbc:	68b9      	ldr	r1, [r7, #8]
 8014cbe:	200a      	movs	r0, #10
 8014cc0:	f7f9 fc1e 	bl	800e500 <memp_free>
    if (handler != NULL) {
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d0da      	beq.n	8014c80 <sys_check_timeouts+0xc>
      handler(arg);
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	6838      	ldr	r0, [r7, #0]
 8014cce:	4798      	blx	r3
  do {
 8014cd0:	e7d6      	b.n	8014c80 <sys_check_timeouts+0xc>
      return;
 8014cd2:	bf00      	nop
 8014cd4:	e000      	b.n	8014cd8 <sys_check_timeouts+0x64>
      return;
 8014cd6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014cd8:	3710      	adds	r7, #16
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}
 8014cde:	bf00      	nop
 8014ce0:	20008508 	.word	0x20008508
 8014ce4:	2000850c 	.word	0x2000850c

08014ce8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b082      	sub	sp, #8
 8014cec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014cee:	4b16      	ldr	r3, [pc, #88]	; (8014d48 <sys_timeouts_sleeptime+0x60>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d102      	bne.n	8014cfc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8014cfa:	e020      	b.n	8014d3e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014cfc:	f7f2 f822 	bl	8006d44 <sys_now>
 8014d00:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014d02:	4b11      	ldr	r3, [pc, #68]	; (8014d48 <sys_timeouts_sleeptime+0x60>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	685a      	ldr	r2, [r3, #4]
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	1ad3      	subs	r3, r2, r3
 8014d0c:	0fdb      	lsrs	r3, r3, #31
 8014d0e:	f003 0301 	and.w	r3, r3, #1
 8014d12:	b2db      	uxtb	r3, r3
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d001      	beq.n	8014d1c <sys_timeouts_sleeptime+0x34>
    return 0;
 8014d18:	2300      	movs	r3, #0
 8014d1a:	e010      	b.n	8014d3e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014d1c:	4b0a      	ldr	r3, [pc, #40]	; (8014d48 <sys_timeouts_sleeptime+0x60>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	685a      	ldr	r2, [r3, #4]
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	1ad3      	subs	r3, r2, r3
 8014d26:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	da06      	bge.n	8014d3c <sys_timeouts_sleeptime+0x54>
 8014d2e:	4b07      	ldr	r3, [pc, #28]	; (8014d4c <sys_timeouts_sleeptime+0x64>)
 8014d30:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014d34:	4906      	ldr	r1, [pc, #24]	; (8014d50 <sys_timeouts_sleeptime+0x68>)
 8014d36:	4807      	ldr	r0, [pc, #28]	; (8014d54 <sys_timeouts_sleeptime+0x6c>)
 8014d38:	f005 fb8c 	bl	801a454 <iprintf>
    return ret;
 8014d3c:	683b      	ldr	r3, [r7, #0]
  }
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3708      	adds	r7, #8
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
 8014d46:	bf00      	nop
 8014d48:	20008508 	.word	0x20008508
 8014d4c:	0801daac 	.word	0x0801daac
 8014d50:	0801db80 	.word	0x0801db80
 8014d54:	0801db20 	.word	0x0801db20

08014d58 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014d5c:	f005 fba8 	bl	801a4b0 <rand>
 8014d60:	4603      	mov	r3, r0
 8014d62:	b29b      	uxth	r3, r3
 8014d64:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014d68:	b29b      	uxth	r3, r3
 8014d6a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014d6e:	b29a      	uxth	r2, r3
 8014d70:	4b01      	ldr	r3, [pc, #4]	; (8014d78 <udp_init+0x20>)
 8014d72:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014d74:	bf00      	nop
 8014d76:	bd80      	pop	{r7, pc}
 8014d78:	20000038 	.word	0x20000038

08014d7c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014d7c:	b480      	push	{r7}
 8014d7e:	b083      	sub	sp, #12
 8014d80:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014d82:	2300      	movs	r3, #0
 8014d84:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014d86:	4b17      	ldr	r3, [pc, #92]	; (8014de4 <udp_new_port+0x68>)
 8014d88:	881b      	ldrh	r3, [r3, #0]
 8014d8a:	1c5a      	adds	r2, r3, #1
 8014d8c:	b291      	uxth	r1, r2
 8014d8e:	4a15      	ldr	r2, [pc, #84]	; (8014de4 <udp_new_port+0x68>)
 8014d90:	8011      	strh	r1, [r2, #0]
 8014d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d96:	4293      	cmp	r3, r2
 8014d98:	d103      	bne.n	8014da2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014d9a:	4b12      	ldr	r3, [pc, #72]	; (8014de4 <udp_new_port+0x68>)
 8014d9c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014da0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014da2:	4b11      	ldr	r3, [pc, #68]	; (8014de8 <udp_new_port+0x6c>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	603b      	str	r3, [r7, #0]
 8014da8:	e011      	b.n	8014dce <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	8a5a      	ldrh	r2, [r3, #18]
 8014dae:	4b0d      	ldr	r3, [pc, #52]	; (8014de4 <udp_new_port+0x68>)
 8014db0:	881b      	ldrh	r3, [r3, #0]
 8014db2:	429a      	cmp	r2, r3
 8014db4:	d108      	bne.n	8014dc8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014db6:	88fb      	ldrh	r3, [r7, #6]
 8014db8:	3301      	adds	r3, #1
 8014dba:	80fb      	strh	r3, [r7, #6]
 8014dbc:	88fb      	ldrh	r3, [r7, #6]
 8014dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014dc2:	d3e0      	bcc.n	8014d86 <udp_new_port+0xa>
        return 0;
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	e007      	b.n	8014dd8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014dc8:	683b      	ldr	r3, [r7, #0]
 8014dca:	68db      	ldr	r3, [r3, #12]
 8014dcc:	603b      	str	r3, [r7, #0]
 8014dce:	683b      	ldr	r3, [r7, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d1ea      	bne.n	8014daa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014dd4:	4b03      	ldr	r3, [pc, #12]	; (8014de4 <udp_new_port+0x68>)
 8014dd6:	881b      	ldrh	r3, [r3, #0]
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	370c      	adds	r7, #12
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de2:	4770      	bx	lr
 8014de4:	20000038 	.word	0x20000038
 8014de8:	2000f3ac 	.word	0x2000f3ac

08014dec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b084      	sub	sp, #16
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	60f8      	str	r0, [r7, #12]
 8014df4:	60b9      	str	r1, [r7, #8]
 8014df6:	4613      	mov	r3, r2
 8014df8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d105      	bne.n	8014e0c <udp_input_local_match+0x20>
 8014e00:	4b27      	ldr	r3, [pc, #156]	; (8014ea0 <udp_input_local_match+0xb4>)
 8014e02:	2287      	movs	r2, #135	; 0x87
 8014e04:	4927      	ldr	r1, [pc, #156]	; (8014ea4 <udp_input_local_match+0xb8>)
 8014e06:	4828      	ldr	r0, [pc, #160]	; (8014ea8 <udp_input_local_match+0xbc>)
 8014e08:	f005 fb24 	bl	801a454 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d105      	bne.n	8014e1e <udp_input_local_match+0x32>
 8014e12:	4b23      	ldr	r3, [pc, #140]	; (8014ea0 <udp_input_local_match+0xb4>)
 8014e14:	2288      	movs	r2, #136	; 0x88
 8014e16:	4925      	ldr	r1, [pc, #148]	; (8014eac <udp_input_local_match+0xc0>)
 8014e18:	4823      	ldr	r0, [pc, #140]	; (8014ea8 <udp_input_local_match+0xbc>)
 8014e1a:	f005 fb1b 	bl	801a454 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	7a1b      	ldrb	r3, [r3, #8]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d00b      	beq.n	8014e3e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	7a1a      	ldrb	r2, [r3, #8]
 8014e2a:	4b21      	ldr	r3, [pc, #132]	; (8014eb0 <udp_input_local_match+0xc4>)
 8014e2c:	685b      	ldr	r3, [r3, #4]
 8014e2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014e32:	3301      	adds	r3, #1
 8014e34:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014e36:	429a      	cmp	r2, r3
 8014e38:	d001      	beq.n	8014e3e <udp_input_local_match+0x52>
    return 0;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	e02b      	b.n	8014e96 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014e3e:	79fb      	ldrb	r3, [r7, #7]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d018      	beq.n	8014e76 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d013      	beq.n	8014e72 <udp_input_local_match+0x86>
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d00f      	beq.n	8014e72 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014e52:	4b17      	ldr	r3, [pc, #92]	; (8014eb0 <udp_input_local_match+0xc4>)
 8014e54:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e5a:	d00a      	beq.n	8014e72 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	681a      	ldr	r2, [r3, #0]
 8014e60:	4b13      	ldr	r3, [pc, #76]	; (8014eb0 <udp_input_local_match+0xc4>)
 8014e62:	695b      	ldr	r3, [r3, #20]
 8014e64:	405a      	eors	r2, r3
 8014e66:	68bb      	ldr	r3, [r7, #8]
 8014e68:	3308      	adds	r3, #8
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d110      	bne.n	8014e94 <udp_input_local_match+0xa8>
          return 1;
 8014e72:	2301      	movs	r3, #1
 8014e74:	e00f      	b.n	8014e96 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d009      	beq.n	8014e90 <udp_input_local_match+0xa4>
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d005      	beq.n	8014e90 <udp_input_local_match+0xa4>
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	681a      	ldr	r2, [r3, #0]
 8014e88:	4b09      	ldr	r3, [pc, #36]	; (8014eb0 <udp_input_local_match+0xc4>)
 8014e8a:	695b      	ldr	r3, [r3, #20]
 8014e8c:	429a      	cmp	r2, r3
 8014e8e:	d101      	bne.n	8014e94 <udp_input_local_match+0xa8>
        return 1;
 8014e90:	2301      	movs	r3, #1
 8014e92:	e000      	b.n	8014e96 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014e94:	2300      	movs	r3, #0
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3710      	adds	r7, #16
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	0801db94 	.word	0x0801db94
 8014ea4:	0801dbc4 	.word	0x0801dbc4
 8014ea8:	0801dbe8 	.word	0x0801dbe8
 8014eac:	0801dc10 	.word	0x0801dc10
 8014eb0:	2000bc60 	.word	0x2000bc60

08014eb4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014eb4:	b590      	push	{r4, r7, lr}
 8014eb6:	b08d      	sub	sp, #52	; 0x34
 8014eb8:	af02      	add	r7, sp, #8
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d105      	bne.n	8014ed4 <udp_input+0x20>
 8014ec8:	4b7c      	ldr	r3, [pc, #496]	; (80150bc <udp_input+0x208>)
 8014eca:	22cf      	movs	r2, #207	; 0xcf
 8014ecc:	497c      	ldr	r1, [pc, #496]	; (80150c0 <udp_input+0x20c>)
 8014ece:	487d      	ldr	r0, [pc, #500]	; (80150c4 <udp_input+0x210>)
 8014ed0:	f005 fac0 	bl	801a454 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014ed4:	683b      	ldr	r3, [r7, #0]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d105      	bne.n	8014ee6 <udp_input+0x32>
 8014eda:	4b78      	ldr	r3, [pc, #480]	; (80150bc <udp_input+0x208>)
 8014edc:	22d0      	movs	r2, #208	; 0xd0
 8014ede:	497a      	ldr	r1, [pc, #488]	; (80150c8 <udp_input+0x214>)
 8014ee0:	4878      	ldr	r0, [pc, #480]	; (80150c4 <udp_input+0x210>)
 8014ee2:	f005 fab7 	bl	801a454 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	895b      	ldrh	r3, [r3, #10]
 8014eea:	2b07      	cmp	r3, #7
 8014eec:	d803      	bhi.n	8014ef6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014eee:	6878      	ldr	r0, [r7, #4]
 8014ef0:	f7fa f9b6 	bl	800f260 <pbuf_free>
    goto end;
 8014ef4:	e0de      	b.n	80150b4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	685b      	ldr	r3, [r3, #4]
 8014efa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014efc:	4b73      	ldr	r3, [pc, #460]	; (80150cc <udp_input+0x218>)
 8014efe:	695b      	ldr	r3, [r3, #20]
 8014f00:	4a72      	ldr	r2, [pc, #456]	; (80150cc <udp_input+0x218>)
 8014f02:	6812      	ldr	r2, [r2, #0]
 8014f04:	4611      	mov	r1, r2
 8014f06:	4618      	mov	r0, r3
 8014f08:	f003 fe06 	bl	8018b18 <ip4_addr_isbroadcast_u32>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014f10:	697b      	ldr	r3, [r7, #20]
 8014f12:	881b      	ldrh	r3, [r3, #0]
 8014f14:	b29b      	uxth	r3, r3
 8014f16:	4618      	mov	r0, r3
 8014f18:	f7f8 fdea 	bl	800daf0 <lwip_htons>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	885b      	ldrh	r3, [r3, #2]
 8014f24:	b29b      	uxth	r3, r3
 8014f26:	4618      	mov	r0, r3
 8014f28:	f7f8 fde2 	bl	800daf0 <lwip_htons>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014f30:	2300      	movs	r3, #0
 8014f32:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014f34:	2300      	movs	r3, #0
 8014f36:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014f3c:	4b64      	ldr	r3, [pc, #400]	; (80150d0 <udp_input+0x21c>)
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	627b      	str	r3, [r7, #36]	; 0x24
 8014f42:	e054      	b.n	8014fee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f46:	8a5b      	ldrh	r3, [r3, #18]
 8014f48:	89fa      	ldrh	r2, [r7, #14]
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d14a      	bne.n	8014fe4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014f4e:	7cfb      	ldrb	r3, [r7, #19]
 8014f50:	461a      	mov	r2, r3
 8014f52:	6839      	ldr	r1, [r7, #0]
 8014f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f56:	f7ff ff49 	bl	8014dec <udp_input_local_match>
 8014f5a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d041      	beq.n	8014fe4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f62:	7c1b      	ldrb	r3, [r3, #16]
 8014f64:	f003 0304 	and.w	r3, r3, #4
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d11d      	bne.n	8014fa8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014f6c:	69fb      	ldr	r3, [r7, #28]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d102      	bne.n	8014f78 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f74:	61fb      	str	r3, [r7, #28]
 8014f76:	e017      	b.n	8014fa8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014f78:	7cfb      	ldrb	r3, [r7, #19]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d014      	beq.n	8014fa8 <udp_input+0xf4>
 8014f7e:	4b53      	ldr	r3, [pc, #332]	; (80150cc <udp_input+0x218>)
 8014f80:	695b      	ldr	r3, [r3, #20]
 8014f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f86:	d10f      	bne.n	8014fa8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014f88:	69fb      	ldr	r3, [r7, #28]
 8014f8a:	681a      	ldr	r2, [r3, #0]
 8014f8c:	683b      	ldr	r3, [r7, #0]
 8014f8e:	3304      	adds	r3, #4
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	429a      	cmp	r2, r3
 8014f94:	d008      	beq.n	8014fa8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f98:	681a      	ldr	r2, [r3, #0]
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	3304      	adds	r3, #4
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	d101      	bne.n	8014fa8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014faa:	8a9b      	ldrh	r3, [r3, #20]
 8014fac:	8a3a      	ldrh	r2, [r7, #16]
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	d118      	bne.n	8014fe4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d005      	beq.n	8014fc6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fbc:	685a      	ldr	r2, [r3, #4]
 8014fbe:	4b43      	ldr	r3, [pc, #268]	; (80150cc <udp_input+0x218>)
 8014fc0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	d10e      	bne.n	8014fe4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014fc6:	6a3b      	ldr	r3, [r7, #32]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d014      	beq.n	8014ff6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fce:	68da      	ldr	r2, [r3, #12]
 8014fd0:	6a3b      	ldr	r3, [r7, #32]
 8014fd2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014fd4:	4b3e      	ldr	r3, [pc, #248]	; (80150d0 <udp_input+0x21c>)
 8014fd6:	681a      	ldr	r2, [r3, #0]
 8014fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fda:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014fdc:	4a3c      	ldr	r2, [pc, #240]	; (80150d0 <udp_input+0x21c>)
 8014fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014fe2:	e008      	b.n	8014ff6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fea:	68db      	ldr	r3, [r3, #12]
 8014fec:	627b      	str	r3, [r7, #36]	; 0x24
 8014fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d1a7      	bne.n	8014f44 <udp_input+0x90>
 8014ff4:	e000      	b.n	8014ff8 <udp_input+0x144>
        break;
 8014ff6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d101      	bne.n	8015002 <udp_input+0x14e>
    pcb = uncon_pcb;
 8014ffe:	69fb      	ldr	r3, [r7, #28]
 8015000:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015004:	2b00      	cmp	r3, #0
 8015006:	d002      	beq.n	801500e <udp_input+0x15a>
    for_us = 1;
 8015008:	2301      	movs	r3, #1
 801500a:	76fb      	strb	r3, [r7, #27]
 801500c:	e00a      	b.n	8015024 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	3304      	adds	r3, #4
 8015012:	681a      	ldr	r2, [r3, #0]
 8015014:	4b2d      	ldr	r3, [pc, #180]	; (80150cc <udp_input+0x218>)
 8015016:	695b      	ldr	r3, [r3, #20]
 8015018:	429a      	cmp	r2, r3
 801501a:	bf0c      	ite	eq
 801501c:	2301      	moveq	r3, #1
 801501e:	2300      	movne	r3, #0
 8015020:	b2db      	uxtb	r3, r3
 8015022:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015024:	7efb      	ldrb	r3, [r7, #27]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d041      	beq.n	80150ae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801502a:	2108      	movs	r1, #8
 801502c:	6878      	ldr	r0, [r7, #4]
 801502e:	f7fa f891 	bl	800f154 <pbuf_remove_header>
 8015032:	4603      	mov	r3, r0
 8015034:	2b00      	cmp	r3, #0
 8015036:	d00a      	beq.n	801504e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015038:	4b20      	ldr	r3, [pc, #128]	; (80150bc <udp_input+0x208>)
 801503a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801503e:	4925      	ldr	r1, [pc, #148]	; (80150d4 <udp_input+0x220>)
 8015040:	4820      	ldr	r0, [pc, #128]	; (80150c4 <udp_input+0x210>)
 8015042:	f005 fa07 	bl	801a454 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f7fa f90a 	bl	800f260 <pbuf_free>
      goto end;
 801504c:	e032      	b.n	80150b4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015050:	2b00      	cmp	r3, #0
 8015052:	d012      	beq.n	801507a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015056:	699b      	ldr	r3, [r3, #24]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d00a      	beq.n	8015072 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801505e:	699c      	ldr	r4, [r3, #24]
 8015060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015062:	69d8      	ldr	r0, [r3, #28]
 8015064:	8a3b      	ldrh	r3, [r7, #16]
 8015066:	9300      	str	r3, [sp, #0]
 8015068:	4b1b      	ldr	r3, [pc, #108]	; (80150d8 <udp_input+0x224>)
 801506a:	687a      	ldr	r2, [r7, #4]
 801506c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801506e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015070:	e021      	b.n	80150b6 <udp_input+0x202>
        pbuf_free(p);
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f7fa f8f4 	bl	800f260 <pbuf_free>
        goto end;
 8015078:	e01c      	b.n	80150b4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801507a:	7cfb      	ldrb	r3, [r7, #19]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d112      	bne.n	80150a6 <udp_input+0x1f2>
 8015080:	4b12      	ldr	r3, [pc, #72]	; (80150cc <udp_input+0x218>)
 8015082:	695b      	ldr	r3, [r3, #20]
 8015084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015088:	2be0      	cmp	r3, #224	; 0xe0
 801508a:	d00c      	beq.n	80150a6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801508c:	4b0f      	ldr	r3, [pc, #60]	; (80150cc <udp_input+0x218>)
 801508e:	899b      	ldrh	r3, [r3, #12]
 8015090:	3308      	adds	r3, #8
 8015092:	b29b      	uxth	r3, r3
 8015094:	b21b      	sxth	r3, r3
 8015096:	4619      	mov	r1, r3
 8015098:	6878      	ldr	r0, [r7, #4]
 801509a:	f7fa f8ce 	bl	800f23a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801509e:	2103      	movs	r1, #3
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	f003 f9fb 	bl	801849c <icmp_dest_unreach>
      pbuf_free(p);
 80150a6:	6878      	ldr	r0, [r7, #4]
 80150a8:	f7fa f8da 	bl	800f260 <pbuf_free>
  return;
 80150ac:	e003      	b.n	80150b6 <udp_input+0x202>
    pbuf_free(p);
 80150ae:	6878      	ldr	r0, [r7, #4]
 80150b0:	f7fa f8d6 	bl	800f260 <pbuf_free>
  return;
 80150b4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80150b6:	372c      	adds	r7, #44	; 0x2c
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd90      	pop	{r4, r7, pc}
 80150bc:	0801db94 	.word	0x0801db94
 80150c0:	0801dc38 	.word	0x0801dc38
 80150c4:	0801dbe8 	.word	0x0801dbe8
 80150c8:	0801dc50 	.word	0x0801dc50
 80150cc:	2000bc60 	.word	0x2000bc60
 80150d0:	2000f3ac 	.word	0x2000f3ac
 80150d4:	0801dc6c 	.word	0x0801dc6c
 80150d8:	2000bc70 	.word	0x2000bc70

080150dc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b088      	sub	sp, #32
 80150e0:	af02      	add	r7, sp, #8
 80150e2:	60f8      	str	r0, [r7, #12]
 80150e4:	60b9      	str	r1, [r7, #8]
 80150e6:	607a      	str	r2, [r7, #4]
 80150e8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d109      	bne.n	8015104 <udp_sendto_if+0x28>
 80150f0:	4b2e      	ldr	r3, [pc, #184]	; (80151ac <udp_sendto_if+0xd0>)
 80150f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80150f6:	492e      	ldr	r1, [pc, #184]	; (80151b0 <udp_sendto_if+0xd4>)
 80150f8:	482e      	ldr	r0, [pc, #184]	; (80151b4 <udp_sendto_if+0xd8>)
 80150fa:	f005 f9ab 	bl	801a454 <iprintf>
 80150fe:	f06f 030f 	mvn.w	r3, #15
 8015102:	e04f      	b.n	80151a4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d109      	bne.n	801511e <udp_sendto_if+0x42>
 801510a:	4b28      	ldr	r3, [pc, #160]	; (80151ac <udp_sendto_if+0xd0>)
 801510c:	f240 2281 	movw	r2, #641	; 0x281
 8015110:	4929      	ldr	r1, [pc, #164]	; (80151b8 <udp_sendto_if+0xdc>)
 8015112:	4828      	ldr	r0, [pc, #160]	; (80151b4 <udp_sendto_if+0xd8>)
 8015114:	f005 f99e 	bl	801a454 <iprintf>
 8015118:	f06f 030f 	mvn.w	r3, #15
 801511c:	e042      	b.n	80151a4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	2b00      	cmp	r3, #0
 8015122:	d109      	bne.n	8015138 <udp_sendto_if+0x5c>
 8015124:	4b21      	ldr	r3, [pc, #132]	; (80151ac <udp_sendto_if+0xd0>)
 8015126:	f240 2282 	movw	r2, #642	; 0x282
 801512a:	4924      	ldr	r1, [pc, #144]	; (80151bc <udp_sendto_if+0xe0>)
 801512c:	4821      	ldr	r0, [pc, #132]	; (80151b4 <udp_sendto_if+0xd8>)
 801512e:	f005 f991 	bl	801a454 <iprintf>
 8015132:	f06f 030f 	mvn.w	r3, #15
 8015136:	e035      	b.n	80151a4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015138:	6a3b      	ldr	r3, [r7, #32]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d109      	bne.n	8015152 <udp_sendto_if+0x76>
 801513e:	4b1b      	ldr	r3, [pc, #108]	; (80151ac <udp_sendto_if+0xd0>)
 8015140:	f240 2283 	movw	r2, #643	; 0x283
 8015144:	491e      	ldr	r1, [pc, #120]	; (80151c0 <udp_sendto_if+0xe4>)
 8015146:	481b      	ldr	r0, [pc, #108]	; (80151b4 <udp_sendto_if+0xd8>)
 8015148:	f005 f984 	bl	801a454 <iprintf>
 801514c:	f06f 030f 	mvn.w	r3, #15
 8015150:	e028      	b.n	80151a4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d009      	beq.n	801516c <udp_sendto_if+0x90>
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d005      	beq.n	801516c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015168:	2be0      	cmp	r3, #224	; 0xe0
 801516a:	d103      	bne.n	8015174 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801516c:	6a3b      	ldr	r3, [r7, #32]
 801516e:	3304      	adds	r3, #4
 8015170:	617b      	str	r3, [r7, #20]
 8015172:	e00b      	b.n	801518c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	681a      	ldr	r2, [r3, #0]
 8015178:	6a3b      	ldr	r3, [r7, #32]
 801517a:	3304      	adds	r3, #4
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	429a      	cmp	r2, r3
 8015180:	d002      	beq.n	8015188 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015182:	f06f 0303 	mvn.w	r3, #3
 8015186:	e00d      	b.n	80151a4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801518c:	887a      	ldrh	r2, [r7, #2]
 801518e:	697b      	ldr	r3, [r7, #20]
 8015190:	9301      	str	r3, [sp, #4]
 8015192:	6a3b      	ldr	r3, [r7, #32]
 8015194:	9300      	str	r3, [sp, #0]
 8015196:	4613      	mov	r3, r2
 8015198:	687a      	ldr	r2, [r7, #4]
 801519a:	68b9      	ldr	r1, [r7, #8]
 801519c:	68f8      	ldr	r0, [r7, #12]
 801519e:	f000 f811 	bl	80151c4 <udp_sendto_if_src>
 80151a2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3718      	adds	r7, #24
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	0801db94 	.word	0x0801db94
 80151b0:	0801dd08 	.word	0x0801dd08
 80151b4:	0801dbe8 	.word	0x0801dbe8
 80151b8:	0801dd24 	.word	0x0801dd24
 80151bc:	0801dd40 	.word	0x0801dd40
 80151c0:	0801dd60 	.word	0x0801dd60

080151c4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b08c      	sub	sp, #48	; 0x30
 80151c8:	af04      	add	r7, sp, #16
 80151ca:	60f8      	str	r0, [r7, #12]
 80151cc:	60b9      	str	r1, [r7, #8]
 80151ce:	607a      	str	r2, [r7, #4]
 80151d0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d109      	bne.n	80151ec <udp_sendto_if_src+0x28>
 80151d8:	4b65      	ldr	r3, [pc, #404]	; (8015370 <udp_sendto_if_src+0x1ac>)
 80151da:	f240 22d1 	movw	r2, #721	; 0x2d1
 80151de:	4965      	ldr	r1, [pc, #404]	; (8015374 <udp_sendto_if_src+0x1b0>)
 80151e0:	4865      	ldr	r0, [pc, #404]	; (8015378 <udp_sendto_if_src+0x1b4>)
 80151e2:	f005 f937 	bl	801a454 <iprintf>
 80151e6:	f06f 030f 	mvn.w	r3, #15
 80151ea:	e0bc      	b.n	8015366 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80151ec:	68bb      	ldr	r3, [r7, #8]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d109      	bne.n	8015206 <udp_sendto_if_src+0x42>
 80151f2:	4b5f      	ldr	r3, [pc, #380]	; (8015370 <udp_sendto_if_src+0x1ac>)
 80151f4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80151f8:	4960      	ldr	r1, [pc, #384]	; (801537c <udp_sendto_if_src+0x1b8>)
 80151fa:	485f      	ldr	r0, [pc, #380]	; (8015378 <udp_sendto_if_src+0x1b4>)
 80151fc:	f005 f92a 	bl	801a454 <iprintf>
 8015200:	f06f 030f 	mvn.w	r3, #15
 8015204:	e0af      	b.n	8015366 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d109      	bne.n	8015220 <udp_sendto_if_src+0x5c>
 801520c:	4b58      	ldr	r3, [pc, #352]	; (8015370 <udp_sendto_if_src+0x1ac>)
 801520e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015212:	495b      	ldr	r1, [pc, #364]	; (8015380 <udp_sendto_if_src+0x1bc>)
 8015214:	4858      	ldr	r0, [pc, #352]	; (8015378 <udp_sendto_if_src+0x1b4>)
 8015216:	f005 f91d 	bl	801a454 <iprintf>
 801521a:	f06f 030f 	mvn.w	r3, #15
 801521e:	e0a2      	b.n	8015366 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015222:	2b00      	cmp	r3, #0
 8015224:	d109      	bne.n	801523a <udp_sendto_if_src+0x76>
 8015226:	4b52      	ldr	r3, [pc, #328]	; (8015370 <udp_sendto_if_src+0x1ac>)
 8015228:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801522c:	4955      	ldr	r1, [pc, #340]	; (8015384 <udp_sendto_if_src+0x1c0>)
 801522e:	4852      	ldr	r0, [pc, #328]	; (8015378 <udp_sendto_if_src+0x1b4>)
 8015230:	f005 f910 	bl	801a454 <iprintf>
 8015234:	f06f 030f 	mvn.w	r3, #15
 8015238:	e095      	b.n	8015366 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801523c:	2b00      	cmp	r3, #0
 801523e:	d109      	bne.n	8015254 <udp_sendto_if_src+0x90>
 8015240:	4b4b      	ldr	r3, [pc, #300]	; (8015370 <udp_sendto_if_src+0x1ac>)
 8015242:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015246:	4950      	ldr	r1, [pc, #320]	; (8015388 <udp_sendto_if_src+0x1c4>)
 8015248:	484b      	ldr	r0, [pc, #300]	; (8015378 <udp_sendto_if_src+0x1b4>)
 801524a:	f005 f903 	bl	801a454 <iprintf>
 801524e:	f06f 030f 	mvn.w	r3, #15
 8015252:	e088      	b.n	8015366 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	8a5b      	ldrh	r3, [r3, #18]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d10f      	bne.n	801527c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801525c:	68f9      	ldr	r1, [r7, #12]
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	8a5b      	ldrh	r3, [r3, #18]
 8015262:	461a      	mov	r2, r3
 8015264:	68f8      	ldr	r0, [r7, #12]
 8015266:	f000 f893 	bl	8015390 <udp_bind>
 801526a:	4603      	mov	r3, r0
 801526c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801526e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d002      	beq.n	801527c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015276:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801527a:	e074      	b.n	8015366 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801527c:	68bb      	ldr	r3, [r7, #8]
 801527e:	891b      	ldrh	r3, [r3, #8]
 8015280:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015284:	4293      	cmp	r3, r2
 8015286:	d902      	bls.n	801528e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015288:	f04f 33ff 	mov.w	r3, #4294967295
 801528c:	e06b      	b.n	8015366 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801528e:	2108      	movs	r1, #8
 8015290:	68b8      	ldr	r0, [r7, #8]
 8015292:	f7f9 ff4f 	bl	800f134 <pbuf_add_header>
 8015296:	4603      	mov	r3, r0
 8015298:	2b00      	cmp	r3, #0
 801529a:	d015      	beq.n	80152c8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801529c:	f44f 7220 	mov.w	r2, #640	; 0x280
 80152a0:	2108      	movs	r1, #8
 80152a2:	2022      	movs	r0, #34	; 0x22
 80152a4:	f7f9 fcf8 	bl	800ec98 <pbuf_alloc>
 80152a8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80152aa:	69fb      	ldr	r3, [r7, #28]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d102      	bne.n	80152b6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80152b0:	f04f 33ff 	mov.w	r3, #4294967295
 80152b4:	e057      	b.n	8015366 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80152b6:	68bb      	ldr	r3, [r7, #8]
 80152b8:	891b      	ldrh	r3, [r3, #8]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d006      	beq.n	80152cc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80152be:	68b9      	ldr	r1, [r7, #8]
 80152c0:	69f8      	ldr	r0, [r7, #28]
 80152c2:	f7fa f8f1 	bl	800f4a8 <pbuf_chain>
 80152c6:	e001      	b.n	80152cc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80152c8:	68bb      	ldr	r3, [r7, #8]
 80152ca:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80152cc:	69fb      	ldr	r3, [r7, #28]
 80152ce:	895b      	ldrh	r3, [r3, #10]
 80152d0:	2b07      	cmp	r3, #7
 80152d2:	d806      	bhi.n	80152e2 <udp_sendto_if_src+0x11e>
 80152d4:	4b26      	ldr	r3, [pc, #152]	; (8015370 <udp_sendto_if_src+0x1ac>)
 80152d6:	f240 320d 	movw	r2, #781	; 0x30d
 80152da:	492c      	ldr	r1, [pc, #176]	; (801538c <udp_sendto_if_src+0x1c8>)
 80152dc:	4826      	ldr	r0, [pc, #152]	; (8015378 <udp_sendto_if_src+0x1b4>)
 80152de:	f005 f8b9 	bl	801a454 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80152e2:	69fb      	ldr	r3, [r7, #28]
 80152e4:	685b      	ldr	r3, [r3, #4]
 80152e6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	8a5b      	ldrh	r3, [r3, #18]
 80152ec:	4618      	mov	r0, r3
 80152ee:	f7f8 fbff 	bl	800daf0 <lwip_htons>
 80152f2:	4603      	mov	r3, r0
 80152f4:	461a      	mov	r2, r3
 80152f6:	697b      	ldr	r3, [r7, #20]
 80152f8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80152fa:	887b      	ldrh	r3, [r7, #2]
 80152fc:	4618      	mov	r0, r3
 80152fe:	f7f8 fbf7 	bl	800daf0 <lwip_htons>
 8015302:	4603      	mov	r3, r0
 8015304:	461a      	mov	r2, r3
 8015306:	697b      	ldr	r3, [r7, #20]
 8015308:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801530a:	697b      	ldr	r3, [r7, #20]
 801530c:	2200      	movs	r2, #0
 801530e:	719a      	strb	r2, [r3, #6]
 8015310:	2200      	movs	r2, #0
 8015312:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015314:	69fb      	ldr	r3, [r7, #28]
 8015316:	891b      	ldrh	r3, [r3, #8]
 8015318:	4618      	mov	r0, r3
 801531a:	f7f8 fbe9 	bl	800daf0 <lwip_htons>
 801531e:	4603      	mov	r3, r0
 8015320:	461a      	mov	r2, r3
 8015322:	697b      	ldr	r3, [r7, #20]
 8015324:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015326:	2311      	movs	r3, #17
 8015328:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	7adb      	ldrb	r3, [r3, #11]
 801532e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	7a9b      	ldrb	r3, [r3, #10]
 8015334:	7cb9      	ldrb	r1, [r7, #18]
 8015336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015338:	9202      	str	r2, [sp, #8]
 801533a:	7cfa      	ldrb	r2, [r7, #19]
 801533c:	9201      	str	r2, [sp, #4]
 801533e:	9300      	str	r3, [sp, #0]
 8015340:	460b      	mov	r3, r1
 8015342:	687a      	ldr	r2, [r7, #4]
 8015344:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015346:	69f8      	ldr	r0, [r7, #28]
 8015348:	f003 fb38 	bl	80189bc <ip4_output_if_src>
 801534c:	4603      	mov	r3, r0
 801534e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015350:	69fa      	ldr	r2, [r7, #28]
 8015352:	68bb      	ldr	r3, [r7, #8]
 8015354:	429a      	cmp	r2, r3
 8015356:	d004      	beq.n	8015362 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015358:	69f8      	ldr	r0, [r7, #28]
 801535a:	f7f9 ff81 	bl	800f260 <pbuf_free>
    q = NULL;
 801535e:	2300      	movs	r3, #0
 8015360:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015362:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015366:	4618      	mov	r0, r3
 8015368:	3720      	adds	r7, #32
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}
 801536e:	bf00      	nop
 8015370:	0801db94 	.word	0x0801db94
 8015374:	0801dd80 	.word	0x0801dd80
 8015378:	0801dbe8 	.word	0x0801dbe8
 801537c:	0801dda0 	.word	0x0801dda0
 8015380:	0801ddc0 	.word	0x0801ddc0
 8015384:	0801dde4 	.word	0x0801dde4
 8015388:	0801de08 	.word	0x0801de08
 801538c:	0801de2c 	.word	0x0801de2c

08015390 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b086      	sub	sp, #24
 8015394:	af00      	add	r7, sp, #0
 8015396:	60f8      	str	r0, [r7, #12]
 8015398:	60b9      	str	r1, [r7, #8]
 801539a:	4613      	mov	r3, r2
 801539c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801539e:	68bb      	ldr	r3, [r7, #8]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d101      	bne.n	80153a8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80153a4:	4b39      	ldr	r3, [pc, #228]	; (801548c <udp_bind+0xfc>)
 80153a6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d109      	bne.n	80153c2 <udp_bind+0x32>
 80153ae:	4b38      	ldr	r3, [pc, #224]	; (8015490 <udp_bind+0x100>)
 80153b0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80153b4:	4937      	ldr	r1, [pc, #220]	; (8015494 <udp_bind+0x104>)
 80153b6:	4838      	ldr	r0, [pc, #224]	; (8015498 <udp_bind+0x108>)
 80153b8:	f005 f84c 	bl	801a454 <iprintf>
 80153bc:	f06f 030f 	mvn.w	r3, #15
 80153c0:	e060      	b.n	8015484 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80153c2:	2300      	movs	r3, #0
 80153c4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80153c6:	4b35      	ldr	r3, [pc, #212]	; (801549c <udp_bind+0x10c>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	617b      	str	r3, [r7, #20]
 80153cc:	e009      	b.n	80153e2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80153ce:	68fa      	ldr	r2, [r7, #12]
 80153d0:	697b      	ldr	r3, [r7, #20]
 80153d2:	429a      	cmp	r2, r3
 80153d4:	d102      	bne.n	80153dc <udp_bind+0x4c>
      rebind = 1;
 80153d6:	2301      	movs	r3, #1
 80153d8:	74fb      	strb	r3, [r7, #19]
      break;
 80153da:	e005      	b.n	80153e8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	68db      	ldr	r3, [r3, #12]
 80153e0:	617b      	str	r3, [r7, #20]
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d1f2      	bne.n	80153ce <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80153e8:	88fb      	ldrh	r3, [r7, #6]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d109      	bne.n	8015402 <udp_bind+0x72>
    port = udp_new_port();
 80153ee:	f7ff fcc5 	bl	8014d7c <udp_new_port>
 80153f2:	4603      	mov	r3, r0
 80153f4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80153f6:	88fb      	ldrh	r3, [r7, #6]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d12c      	bne.n	8015456 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80153fc:	f06f 0307 	mvn.w	r3, #7
 8015400:	e040      	b.n	8015484 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015402:	4b26      	ldr	r3, [pc, #152]	; (801549c <udp_bind+0x10c>)
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	617b      	str	r3, [r7, #20]
 8015408:	e022      	b.n	8015450 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801540a:	68fa      	ldr	r2, [r7, #12]
 801540c:	697b      	ldr	r3, [r7, #20]
 801540e:	429a      	cmp	r2, r3
 8015410:	d01b      	beq.n	801544a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015412:	697b      	ldr	r3, [r7, #20]
 8015414:	8a5b      	ldrh	r3, [r3, #18]
 8015416:	88fa      	ldrh	r2, [r7, #6]
 8015418:	429a      	cmp	r2, r3
 801541a:	d116      	bne.n	801544a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801541c:	697b      	ldr	r3, [r7, #20]
 801541e:	681a      	ldr	r2, [r3, #0]
 8015420:	68bb      	ldr	r3, [r7, #8]
 8015422:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015424:	429a      	cmp	r2, r3
 8015426:	d00d      	beq.n	8015444 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d00a      	beq.n	8015444 <udp_bind+0xb4>
 801542e:	68bb      	ldr	r3, [r7, #8]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d006      	beq.n	8015444 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015436:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015438:	2b00      	cmp	r3, #0
 801543a:	d003      	beq.n	8015444 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d102      	bne.n	801544a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015444:	f06f 0307 	mvn.w	r3, #7
 8015448:	e01c      	b.n	8015484 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801544a:	697b      	ldr	r3, [r7, #20]
 801544c:	68db      	ldr	r3, [r3, #12]
 801544e:	617b      	str	r3, [r7, #20]
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d1d9      	bne.n	801540a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015456:	68bb      	ldr	r3, [r7, #8]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d002      	beq.n	8015462 <udp_bind+0xd2>
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	e000      	b.n	8015464 <udp_bind+0xd4>
 8015462:	2300      	movs	r3, #0
 8015464:	68fa      	ldr	r2, [r7, #12]
 8015466:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	88fa      	ldrh	r2, [r7, #6]
 801546c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801546e:	7cfb      	ldrb	r3, [r7, #19]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d106      	bne.n	8015482 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015474:	4b09      	ldr	r3, [pc, #36]	; (801549c <udp_bind+0x10c>)
 8015476:	681a      	ldr	r2, [r3, #0]
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801547c:	4a07      	ldr	r2, [pc, #28]	; (801549c <udp_bind+0x10c>)
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015482:	2300      	movs	r3, #0
}
 8015484:	4618      	mov	r0, r3
 8015486:	3718      	adds	r7, #24
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}
 801548c:	0801eaa8 	.word	0x0801eaa8
 8015490:	0801db94 	.word	0x0801db94
 8015494:	0801de5c 	.word	0x0801de5c
 8015498:	0801dbe8 	.word	0x0801dbe8
 801549c:	2000f3ac 	.word	0x2000f3ac

080154a0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b086      	sub	sp, #24
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	60f8      	str	r0, [r7, #12]
 80154a8:	60b9      	str	r1, [r7, #8]
 80154aa:	4613      	mov	r3, r2
 80154ac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d109      	bne.n	80154c8 <udp_connect+0x28>
 80154b4:	4b2c      	ldr	r3, [pc, #176]	; (8015568 <udp_connect+0xc8>)
 80154b6:	f240 4235 	movw	r2, #1077	; 0x435
 80154ba:	492c      	ldr	r1, [pc, #176]	; (801556c <udp_connect+0xcc>)
 80154bc:	482c      	ldr	r0, [pc, #176]	; (8015570 <udp_connect+0xd0>)
 80154be:	f004 ffc9 	bl	801a454 <iprintf>
 80154c2:	f06f 030f 	mvn.w	r3, #15
 80154c6:	e04b      	b.n	8015560 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80154c8:	68bb      	ldr	r3, [r7, #8]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d109      	bne.n	80154e2 <udp_connect+0x42>
 80154ce:	4b26      	ldr	r3, [pc, #152]	; (8015568 <udp_connect+0xc8>)
 80154d0:	f240 4236 	movw	r2, #1078	; 0x436
 80154d4:	4927      	ldr	r1, [pc, #156]	; (8015574 <udp_connect+0xd4>)
 80154d6:	4826      	ldr	r0, [pc, #152]	; (8015570 <udp_connect+0xd0>)
 80154d8:	f004 ffbc 	bl	801a454 <iprintf>
 80154dc:	f06f 030f 	mvn.w	r3, #15
 80154e0:	e03e      	b.n	8015560 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	8a5b      	ldrh	r3, [r3, #18]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d10f      	bne.n	801550a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80154ea:	68f9      	ldr	r1, [r7, #12]
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	8a5b      	ldrh	r3, [r3, #18]
 80154f0:	461a      	mov	r2, r3
 80154f2:	68f8      	ldr	r0, [r7, #12]
 80154f4:	f7ff ff4c 	bl	8015390 <udp_bind>
 80154f8:	4603      	mov	r3, r0
 80154fa:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80154fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d002      	beq.n	801550a <udp_connect+0x6a>
      return err;
 8015504:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015508:	e02a      	b.n	8015560 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801550a:	68bb      	ldr	r3, [r7, #8]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d002      	beq.n	8015516 <udp_connect+0x76>
 8015510:	68bb      	ldr	r3, [r7, #8]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	e000      	b.n	8015518 <udp_connect+0x78>
 8015516:	2300      	movs	r3, #0
 8015518:	68fa      	ldr	r2, [r7, #12]
 801551a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	88fa      	ldrh	r2, [r7, #6]
 8015520:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	7c1b      	ldrb	r3, [r3, #16]
 8015526:	f043 0304 	orr.w	r3, r3, #4
 801552a:	b2da      	uxtb	r2, r3
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015530:	4b11      	ldr	r3, [pc, #68]	; (8015578 <udp_connect+0xd8>)
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	617b      	str	r3, [r7, #20]
 8015536:	e008      	b.n	801554a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015538:	68fa      	ldr	r2, [r7, #12]
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	429a      	cmp	r2, r3
 801553e:	d101      	bne.n	8015544 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015540:	2300      	movs	r3, #0
 8015542:	e00d      	b.n	8015560 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	68db      	ldr	r3, [r3, #12]
 8015548:	617b      	str	r3, [r7, #20]
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d1f3      	bne.n	8015538 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015550:	4b09      	ldr	r3, [pc, #36]	; (8015578 <udp_connect+0xd8>)
 8015552:	681a      	ldr	r2, [r3, #0]
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015558:	4a07      	ldr	r2, [pc, #28]	; (8015578 <udp_connect+0xd8>)
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801555e:	2300      	movs	r3, #0
}
 8015560:	4618      	mov	r0, r3
 8015562:	3718      	adds	r7, #24
 8015564:	46bd      	mov	sp, r7
 8015566:	bd80      	pop	{r7, pc}
 8015568:	0801db94 	.word	0x0801db94
 801556c:	0801de74 	.word	0x0801de74
 8015570:	0801dbe8 	.word	0x0801dbe8
 8015574:	0801de90 	.word	0x0801de90
 8015578:	2000f3ac 	.word	0x2000f3ac

0801557c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b084      	sub	sp, #16
 8015580:	af00      	add	r7, sp, #0
 8015582:	60f8      	str	r0, [r7, #12]
 8015584:	60b9      	str	r1, [r7, #8]
 8015586:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d107      	bne.n	801559e <udp_recv+0x22>
 801558e:	4b08      	ldr	r3, [pc, #32]	; (80155b0 <udp_recv+0x34>)
 8015590:	f240 428a 	movw	r2, #1162	; 0x48a
 8015594:	4907      	ldr	r1, [pc, #28]	; (80155b4 <udp_recv+0x38>)
 8015596:	4808      	ldr	r0, [pc, #32]	; (80155b8 <udp_recv+0x3c>)
 8015598:	f004 ff5c 	bl	801a454 <iprintf>
 801559c:	e005      	b.n	80155aa <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	68ba      	ldr	r2, [r7, #8]
 80155a2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	687a      	ldr	r2, [r7, #4]
 80155a8:	61da      	str	r2, [r3, #28]
}
 80155aa:	3710      	adds	r7, #16
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}
 80155b0:	0801db94 	.word	0x0801db94
 80155b4:	0801dec8 	.word	0x0801dec8
 80155b8:	0801dbe8 	.word	0x0801dbe8

080155bc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b084      	sub	sp, #16
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d107      	bne.n	80155da <udp_remove+0x1e>
 80155ca:	4b19      	ldr	r3, [pc, #100]	; (8015630 <udp_remove+0x74>)
 80155cc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80155d0:	4918      	ldr	r1, [pc, #96]	; (8015634 <udp_remove+0x78>)
 80155d2:	4819      	ldr	r0, [pc, #100]	; (8015638 <udp_remove+0x7c>)
 80155d4:	f004 ff3e 	bl	801a454 <iprintf>
 80155d8:	e026      	b.n	8015628 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80155da:	4b18      	ldr	r3, [pc, #96]	; (801563c <udp_remove+0x80>)
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d105      	bne.n	80155f0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80155e4:	4b15      	ldr	r3, [pc, #84]	; (801563c <udp_remove+0x80>)
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	68db      	ldr	r3, [r3, #12]
 80155ea:	4a14      	ldr	r2, [pc, #80]	; (801563c <udp_remove+0x80>)
 80155ec:	6013      	str	r3, [r2, #0]
 80155ee:	e017      	b.n	8015620 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80155f0:	4b12      	ldr	r3, [pc, #72]	; (801563c <udp_remove+0x80>)
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	60fb      	str	r3, [r7, #12]
 80155f6:	e010      	b.n	801561a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	68db      	ldr	r3, [r3, #12]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d009      	beq.n	8015614 <udp_remove+0x58>
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	68db      	ldr	r3, [r3, #12]
 8015604:	687a      	ldr	r2, [r7, #4]
 8015606:	429a      	cmp	r2, r3
 8015608:	d104      	bne.n	8015614 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	68da      	ldr	r2, [r3, #12]
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	60da      	str	r2, [r3, #12]
        break;
 8015612:	e005      	b.n	8015620 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	68db      	ldr	r3, [r3, #12]
 8015618:	60fb      	str	r3, [r7, #12]
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d1eb      	bne.n	80155f8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015620:	6879      	ldr	r1, [r7, #4]
 8015622:	2000      	movs	r0, #0
 8015624:	f7f8 ff6c 	bl	800e500 <memp_free>
}
 8015628:	3710      	adds	r7, #16
 801562a:	46bd      	mov	sp, r7
 801562c:	bd80      	pop	{r7, pc}
 801562e:	bf00      	nop
 8015630:	0801db94 	.word	0x0801db94
 8015634:	0801dee0 	.word	0x0801dee0
 8015638:	0801dbe8 	.word	0x0801dbe8
 801563c:	2000f3ac 	.word	0x2000f3ac

08015640 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b082      	sub	sp, #8
 8015644:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015646:	2000      	movs	r0, #0
 8015648:	f7f8 ff08 	bl	800e45c <memp_malloc>
 801564c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d007      	beq.n	8015664 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015654:	2220      	movs	r2, #32
 8015656:	2100      	movs	r1, #0
 8015658:	6878      	ldr	r0, [r7, #4]
 801565a:	f004 fe49 	bl	801a2f0 <memset>
    pcb->ttl = UDP_TTL;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	22ff      	movs	r2, #255	; 0xff
 8015662:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015664:	687b      	ldr	r3, [r7, #4]
}
 8015666:	4618      	mov	r0, r3
 8015668:	3708      	adds	r7, #8
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}
	...

08015670 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015670:	b480      	push	{r7}
 8015672:	b085      	sub	sp, #20
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
 8015678:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d01e      	beq.n	80156be <udp_netif_ip_addr_changed+0x4e>
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d01a      	beq.n	80156be <udp_netif_ip_addr_changed+0x4e>
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d017      	beq.n	80156be <udp_netif_ip_addr_changed+0x4e>
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d013      	beq.n	80156be <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015696:	4b0d      	ldr	r3, [pc, #52]	; (80156cc <udp_netif_ip_addr_changed+0x5c>)
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	60fb      	str	r3, [r7, #12]
 801569c:	e00c      	b.n	80156b8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	681a      	ldr	r2, [r3, #0]
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d103      	bne.n	80156b2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	681a      	ldr	r2, [r3, #0]
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	68db      	ldr	r3, [r3, #12]
 80156b6:	60fb      	str	r3, [r7, #12]
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d1ef      	bne.n	801569e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80156be:	bf00      	nop
 80156c0:	3714      	adds	r7, #20
 80156c2:	46bd      	mov	sp, r7
 80156c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c8:	4770      	bx	lr
 80156ca:	bf00      	nop
 80156cc:	2000f3ac 	.word	0x2000f3ac

080156d0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80156d4:	4b20      	ldr	r3, [pc, #128]	; (8015758 <dhcp_inc_pcb_refcount+0x88>)
 80156d6:	781b      	ldrb	r3, [r3, #0]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d133      	bne.n	8015744 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80156dc:	4b1f      	ldr	r3, [pc, #124]	; (801575c <dhcp_inc_pcb_refcount+0x8c>)
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d005      	beq.n	80156f0 <dhcp_inc_pcb_refcount+0x20>
 80156e4:	4b1e      	ldr	r3, [pc, #120]	; (8015760 <dhcp_inc_pcb_refcount+0x90>)
 80156e6:	22e5      	movs	r2, #229	; 0xe5
 80156e8:	491e      	ldr	r1, [pc, #120]	; (8015764 <dhcp_inc_pcb_refcount+0x94>)
 80156ea:	481f      	ldr	r0, [pc, #124]	; (8015768 <dhcp_inc_pcb_refcount+0x98>)
 80156ec:	f004 feb2 	bl	801a454 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80156f0:	f7ff ffa6 	bl	8015640 <udp_new>
 80156f4:	4603      	mov	r3, r0
 80156f6:	4a19      	ldr	r2, [pc, #100]	; (801575c <dhcp_inc_pcb_refcount+0x8c>)
 80156f8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80156fa:	4b18      	ldr	r3, [pc, #96]	; (801575c <dhcp_inc_pcb_refcount+0x8c>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d102      	bne.n	8015708 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015702:	f04f 33ff 	mov.w	r3, #4294967295
 8015706:	e024      	b.n	8015752 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015708:	4b14      	ldr	r3, [pc, #80]	; (801575c <dhcp_inc_pcb_refcount+0x8c>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	7a5a      	ldrb	r2, [r3, #9]
 801570e:	4b13      	ldr	r3, [pc, #76]	; (801575c <dhcp_inc_pcb_refcount+0x8c>)
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	f042 0220 	orr.w	r2, r2, #32
 8015716:	b2d2      	uxtb	r2, r2
 8015718:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801571a:	4b10      	ldr	r3, [pc, #64]	; (801575c <dhcp_inc_pcb_refcount+0x8c>)
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	2244      	movs	r2, #68	; 0x44
 8015720:	4912      	ldr	r1, [pc, #72]	; (801576c <dhcp_inc_pcb_refcount+0x9c>)
 8015722:	4618      	mov	r0, r3
 8015724:	f7ff fe34 	bl	8015390 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8015728:	4b0c      	ldr	r3, [pc, #48]	; (801575c <dhcp_inc_pcb_refcount+0x8c>)
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	2243      	movs	r2, #67	; 0x43
 801572e:	490f      	ldr	r1, [pc, #60]	; (801576c <dhcp_inc_pcb_refcount+0x9c>)
 8015730:	4618      	mov	r0, r3
 8015732:	f7ff feb5 	bl	80154a0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8015736:	4b09      	ldr	r3, [pc, #36]	; (801575c <dhcp_inc_pcb_refcount+0x8c>)
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	2200      	movs	r2, #0
 801573c:	490c      	ldr	r1, [pc, #48]	; (8015770 <dhcp_inc_pcb_refcount+0xa0>)
 801573e:	4618      	mov	r0, r3
 8015740:	f7ff ff1c 	bl	801557c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015744:	4b04      	ldr	r3, [pc, #16]	; (8015758 <dhcp_inc_pcb_refcount+0x88>)
 8015746:	781b      	ldrb	r3, [r3, #0]
 8015748:	3301      	adds	r3, #1
 801574a:	b2da      	uxtb	r2, r3
 801574c:	4b02      	ldr	r3, [pc, #8]	; (8015758 <dhcp_inc_pcb_refcount+0x88>)
 801574e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8015750:	2300      	movs	r3, #0
}
 8015752:	4618      	mov	r0, r3
 8015754:	bd80      	pop	{r7, pc}
 8015756:	bf00      	nop
 8015758:	20008518 	.word	0x20008518
 801575c:	20008514 	.word	0x20008514
 8015760:	0801def8 	.word	0x0801def8
 8015764:	0801df30 	.word	0x0801df30
 8015768:	0801df58 	.word	0x0801df58
 801576c:	0801eaa8 	.word	0x0801eaa8
 8015770:	08017005 	.word	0x08017005

08015774 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015778:	4b0e      	ldr	r3, [pc, #56]	; (80157b4 <dhcp_dec_pcb_refcount+0x40>)
 801577a:	781b      	ldrb	r3, [r3, #0]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d105      	bne.n	801578c <dhcp_dec_pcb_refcount+0x18>
 8015780:	4b0d      	ldr	r3, [pc, #52]	; (80157b8 <dhcp_dec_pcb_refcount+0x44>)
 8015782:	22ff      	movs	r2, #255	; 0xff
 8015784:	490d      	ldr	r1, [pc, #52]	; (80157bc <dhcp_dec_pcb_refcount+0x48>)
 8015786:	480e      	ldr	r0, [pc, #56]	; (80157c0 <dhcp_dec_pcb_refcount+0x4c>)
 8015788:	f004 fe64 	bl	801a454 <iprintf>
  dhcp_pcb_refcount--;
 801578c:	4b09      	ldr	r3, [pc, #36]	; (80157b4 <dhcp_dec_pcb_refcount+0x40>)
 801578e:	781b      	ldrb	r3, [r3, #0]
 8015790:	3b01      	subs	r3, #1
 8015792:	b2da      	uxtb	r2, r3
 8015794:	4b07      	ldr	r3, [pc, #28]	; (80157b4 <dhcp_dec_pcb_refcount+0x40>)
 8015796:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8015798:	4b06      	ldr	r3, [pc, #24]	; (80157b4 <dhcp_dec_pcb_refcount+0x40>)
 801579a:	781b      	ldrb	r3, [r3, #0]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d107      	bne.n	80157b0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80157a0:	4b08      	ldr	r3, [pc, #32]	; (80157c4 <dhcp_dec_pcb_refcount+0x50>)
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7ff ff09 	bl	80155bc <udp_remove>
    dhcp_pcb = NULL;
 80157aa:	4b06      	ldr	r3, [pc, #24]	; (80157c4 <dhcp_dec_pcb_refcount+0x50>)
 80157ac:	2200      	movs	r2, #0
 80157ae:	601a      	str	r2, [r3, #0]
  }
}
 80157b0:	bf00      	nop
 80157b2:	bd80      	pop	{r7, pc}
 80157b4:	20008518 	.word	0x20008518
 80157b8:	0801def8 	.word	0x0801def8
 80157bc:	0801df80 	.word	0x0801df80
 80157c0:	0801df58 	.word	0x0801df58
 80157c4:	20008514 	.word	0x20008514

080157c8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b084      	sub	sp, #16
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157d4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80157d6:	210c      	movs	r1, #12
 80157d8:	68f8      	ldr	r0, [r7, #12]
 80157da:	f001 f855 	bl	8016888 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80157de:	4b06      	ldr	r3, [pc, #24]	; (80157f8 <dhcp_handle_nak+0x30>)
 80157e0:	4a05      	ldr	r2, [pc, #20]	; (80157f8 <dhcp_handle_nak+0x30>)
 80157e2:	4905      	ldr	r1, [pc, #20]	; (80157f8 <dhcp_handle_nak+0x30>)
 80157e4:	6878      	ldr	r0, [r7, #4]
 80157e6:	f7f9 f82d 	bl	800e844 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f000 fc48 	bl	8016080 <dhcp_discover>
}
 80157f0:	bf00      	nop
 80157f2:	3710      	adds	r7, #16
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd80      	pop	{r7, pc}
 80157f8:	0801eaa8 	.word	0x0801eaa8

080157fc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015808:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801580a:	2108      	movs	r1, #8
 801580c:	68f8      	ldr	r0, [r7, #12]
 801580e:	f001 f83b 	bl	8016888 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	331c      	adds	r3, #28
 8015816:	2200      	movs	r2, #0
 8015818:	4619      	mov	r1, r3
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f002 fb3c 	bl	8017e98 <etharp_query>
 8015820:	4603      	mov	r3, r0
 8015822:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	799b      	ldrb	r3, [r3, #6]
 8015828:	2bff      	cmp	r3, #255	; 0xff
 801582a:	d005      	beq.n	8015838 <dhcp_check+0x3c>
    dhcp->tries++;
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	799b      	ldrb	r3, [r3, #6]
 8015830:	3301      	adds	r3, #1
 8015832:	b2da      	uxtb	r2, r3
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015838:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801583c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801583e:	893b      	ldrh	r3, [r7, #8]
 8015840:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015844:	4a06      	ldr	r2, [pc, #24]	; (8015860 <dhcp_check+0x64>)
 8015846:	fb82 1203 	smull	r1, r2, r2, r3
 801584a:	1152      	asrs	r2, r2, #5
 801584c:	17db      	asrs	r3, r3, #31
 801584e:	1ad3      	subs	r3, r2, r3
 8015850:	b29a      	uxth	r2, r3
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8015856:	bf00      	nop
 8015858:	3710      	adds	r7, #16
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	10624dd3 	.word	0x10624dd3

08015864 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b084      	sub	sp, #16
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
 801586c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015872:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015874:	4b0c      	ldr	r3, [pc, #48]	; (80158a8 <dhcp_handle_offer+0x44>)
 8015876:	789b      	ldrb	r3, [r3, #2]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d011      	beq.n	80158a0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	2200      	movs	r2, #0
 8015880:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8015882:	4b0a      	ldr	r3, [pc, #40]	; (80158ac <dhcp_handle_offer+0x48>)
 8015884:	689b      	ldr	r3, [r3, #8]
 8015886:	4618      	mov	r0, r3
 8015888:	f7f8 f947 	bl	800db1a <lwip_htonl>
 801588c:	4602      	mov	r2, r0
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	691a      	ldr	r2, [r3, #16]
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	f000 f808 	bl	80158b0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80158a0:	bf00      	nop
 80158a2:	3710      	adds	r7, #16
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}
 80158a8:	2000f3b0 	.word	0x2000f3b0
 80158ac:	2000f3b8 	.word	0x2000f3b8

080158b0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80158b0:	b5b0      	push	{r4, r5, r7, lr}
 80158b2:	b08a      	sub	sp, #40	; 0x28
 80158b4:	af02      	add	r7, sp, #8
 80158b6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d109      	bne.n	80158d2 <dhcp_select+0x22>
 80158be:	4b71      	ldr	r3, [pc, #452]	; (8015a84 <dhcp_select+0x1d4>)
 80158c0:	f240 1277 	movw	r2, #375	; 0x177
 80158c4:	4970      	ldr	r1, [pc, #448]	; (8015a88 <dhcp_select+0x1d8>)
 80158c6:	4871      	ldr	r0, [pc, #452]	; (8015a8c <dhcp_select+0x1dc>)
 80158c8:	f004 fdc4 	bl	801a454 <iprintf>
 80158cc:	f06f 030f 	mvn.w	r3, #15
 80158d0:	e0d3      	b.n	8015a7a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158d6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80158d8:	69bb      	ldr	r3, [r7, #24]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d109      	bne.n	80158f2 <dhcp_select+0x42>
 80158de:	4b69      	ldr	r3, [pc, #420]	; (8015a84 <dhcp_select+0x1d4>)
 80158e0:	f240 1279 	movw	r2, #377	; 0x179
 80158e4:	496a      	ldr	r1, [pc, #424]	; (8015a90 <dhcp_select+0x1e0>)
 80158e6:	4869      	ldr	r0, [pc, #420]	; (8015a8c <dhcp_select+0x1dc>)
 80158e8:	f004 fdb4 	bl	801a454 <iprintf>
 80158ec:	f06f 0305 	mvn.w	r3, #5
 80158f0:	e0c3      	b.n	8015a7a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80158f2:	2101      	movs	r1, #1
 80158f4:	69b8      	ldr	r0, [r7, #24]
 80158f6:	f000 ffc7 	bl	8016888 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80158fa:	f107 030c 	add.w	r3, r7, #12
 80158fe:	2203      	movs	r2, #3
 8015900:	69b9      	ldr	r1, [r7, #24]
 8015902:	6878      	ldr	r0, [r7, #4]
 8015904:	f001 fc4c 	bl	80171a0 <dhcp_create_msg>
 8015908:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801590a:	697b      	ldr	r3, [r7, #20]
 801590c:	2b00      	cmp	r3, #0
 801590e:	f000 8085 	beq.w	8015a1c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015912:	697b      	ldr	r3, [r7, #20]
 8015914:	685b      	ldr	r3, [r3, #4]
 8015916:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015918:	89b8      	ldrh	r0, [r7, #12]
 801591a:	693b      	ldr	r3, [r7, #16]
 801591c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015920:	2302      	movs	r3, #2
 8015922:	2239      	movs	r2, #57	; 0x39
 8015924:	f000 ffca 	bl	80168bc <dhcp_option>
 8015928:	4603      	mov	r3, r0
 801592a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801592c:	89b8      	ldrh	r0, [r7, #12]
 801592e:	693b      	ldr	r3, [r7, #16]
 8015930:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015938:	461a      	mov	r2, r3
 801593a:	f001 f819 	bl	8016970 <dhcp_option_short>
 801593e:	4603      	mov	r3, r0
 8015940:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015942:	89b8      	ldrh	r0, [r7, #12]
 8015944:	693b      	ldr	r3, [r7, #16]
 8015946:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801594a:	2304      	movs	r3, #4
 801594c:	2232      	movs	r2, #50	; 0x32
 801594e:	f000 ffb5 	bl	80168bc <dhcp_option>
 8015952:	4603      	mov	r3, r0
 8015954:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015956:	89bc      	ldrh	r4, [r7, #12]
 8015958:	693b      	ldr	r3, [r7, #16]
 801595a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801595e:	69bb      	ldr	r3, [r7, #24]
 8015960:	69db      	ldr	r3, [r3, #28]
 8015962:	4618      	mov	r0, r3
 8015964:	f7f8 f8d9 	bl	800db1a <lwip_htonl>
 8015968:	4603      	mov	r3, r0
 801596a:	461a      	mov	r2, r3
 801596c:	4629      	mov	r1, r5
 801596e:	4620      	mov	r0, r4
 8015970:	f001 f830 	bl	80169d4 <dhcp_option_long>
 8015974:	4603      	mov	r3, r0
 8015976:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015978:	89b8      	ldrh	r0, [r7, #12]
 801597a:	693b      	ldr	r3, [r7, #16]
 801597c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015980:	2304      	movs	r3, #4
 8015982:	2236      	movs	r2, #54	; 0x36
 8015984:	f000 ff9a 	bl	80168bc <dhcp_option>
 8015988:	4603      	mov	r3, r0
 801598a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801598c:	89bc      	ldrh	r4, [r7, #12]
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015994:	69bb      	ldr	r3, [r7, #24]
 8015996:	699b      	ldr	r3, [r3, #24]
 8015998:	4618      	mov	r0, r3
 801599a:	f7f8 f8be 	bl	800db1a <lwip_htonl>
 801599e:	4603      	mov	r3, r0
 80159a0:	461a      	mov	r2, r3
 80159a2:	4629      	mov	r1, r5
 80159a4:	4620      	mov	r0, r4
 80159a6:	f001 f815 	bl	80169d4 <dhcp_option_long>
 80159aa:	4603      	mov	r3, r0
 80159ac:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80159ae:	89b8      	ldrh	r0, [r7, #12]
 80159b0:	693b      	ldr	r3, [r7, #16]
 80159b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80159b6:	2303      	movs	r3, #3
 80159b8:	2237      	movs	r2, #55	; 0x37
 80159ba:	f000 ff7f 	bl	80168bc <dhcp_option>
 80159be:	4603      	mov	r3, r0
 80159c0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80159c2:	2300      	movs	r3, #0
 80159c4:	77bb      	strb	r3, [r7, #30]
 80159c6:	e00e      	b.n	80159e6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80159c8:	89b8      	ldrh	r0, [r7, #12]
 80159ca:	693b      	ldr	r3, [r7, #16]
 80159cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80159d0:	7fbb      	ldrb	r3, [r7, #30]
 80159d2:	4a30      	ldr	r2, [pc, #192]	; (8015a94 <dhcp_select+0x1e4>)
 80159d4:	5cd3      	ldrb	r3, [r2, r3]
 80159d6:	461a      	mov	r2, r3
 80159d8:	f000 ffa4 	bl	8016924 <dhcp_option_byte>
 80159dc:	4603      	mov	r3, r0
 80159de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80159e0:	7fbb      	ldrb	r3, [r7, #30]
 80159e2:	3301      	adds	r3, #1
 80159e4:	77bb      	strb	r3, [r7, #30]
 80159e6:	7fbb      	ldrb	r3, [r7, #30]
 80159e8:	2b02      	cmp	r3, #2
 80159ea:	d9ed      	bls.n	80159c8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80159ec:	89b8      	ldrh	r0, [r7, #12]
 80159ee:	693b      	ldr	r3, [r7, #16]
 80159f0:	33f0      	adds	r3, #240	; 0xf0
 80159f2:	697a      	ldr	r2, [r7, #20]
 80159f4:	4619      	mov	r1, r3
 80159f6:	f001 fca9 	bl	801734c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80159fa:	4b27      	ldr	r3, [pc, #156]	; (8015a98 <dhcp_select+0x1e8>)
 80159fc:	6818      	ldr	r0, [r3, #0]
 80159fe:	4b27      	ldr	r3, [pc, #156]	; (8015a9c <dhcp_select+0x1ec>)
 8015a00:	9301      	str	r3, [sp, #4]
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	9300      	str	r3, [sp, #0]
 8015a06:	2343      	movs	r3, #67	; 0x43
 8015a08:	4a25      	ldr	r2, [pc, #148]	; (8015aa0 <dhcp_select+0x1f0>)
 8015a0a:	6979      	ldr	r1, [r7, #20]
 8015a0c:	f7ff fbda 	bl	80151c4 <udp_sendto_if_src>
 8015a10:	4603      	mov	r3, r0
 8015a12:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015a14:	6978      	ldr	r0, [r7, #20]
 8015a16:	f7f9 fc23 	bl	800f260 <pbuf_free>
 8015a1a:	e001      	b.n	8015a20 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015a1c:	23ff      	movs	r3, #255	; 0xff
 8015a1e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015a20:	69bb      	ldr	r3, [r7, #24]
 8015a22:	799b      	ldrb	r3, [r3, #6]
 8015a24:	2bff      	cmp	r3, #255	; 0xff
 8015a26:	d005      	beq.n	8015a34 <dhcp_select+0x184>
    dhcp->tries++;
 8015a28:	69bb      	ldr	r3, [r7, #24]
 8015a2a:	799b      	ldrb	r3, [r3, #6]
 8015a2c:	3301      	adds	r3, #1
 8015a2e:	b2da      	uxtb	r2, r3
 8015a30:	69bb      	ldr	r3, [r7, #24]
 8015a32:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015a34:	69bb      	ldr	r3, [r7, #24]
 8015a36:	799b      	ldrb	r3, [r3, #6]
 8015a38:	2b05      	cmp	r3, #5
 8015a3a:	d80d      	bhi.n	8015a58 <dhcp_select+0x1a8>
 8015a3c:	69bb      	ldr	r3, [r7, #24]
 8015a3e:	799b      	ldrb	r3, [r3, #6]
 8015a40:	461a      	mov	r2, r3
 8015a42:	2301      	movs	r3, #1
 8015a44:	4093      	lsls	r3, r2
 8015a46:	b29b      	uxth	r3, r3
 8015a48:	461a      	mov	r2, r3
 8015a4a:	0152      	lsls	r2, r2, #5
 8015a4c:	1ad2      	subs	r2, r2, r3
 8015a4e:	0092      	lsls	r2, r2, #2
 8015a50:	4413      	add	r3, r2
 8015a52:	00db      	lsls	r3, r3, #3
 8015a54:	b29b      	uxth	r3, r3
 8015a56:	e001      	b.n	8015a5c <dhcp_select+0x1ac>
 8015a58:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015a5c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015a5e:	89fb      	ldrh	r3, [r7, #14]
 8015a60:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015a64:	4a0f      	ldr	r2, [pc, #60]	; (8015aa4 <dhcp_select+0x1f4>)
 8015a66:	fb82 1203 	smull	r1, r2, r2, r3
 8015a6a:	1152      	asrs	r2, r2, #5
 8015a6c:	17db      	asrs	r3, r3, #31
 8015a6e:	1ad3      	subs	r3, r2, r3
 8015a70:	b29a      	uxth	r2, r3
 8015a72:	69bb      	ldr	r3, [r7, #24]
 8015a74:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015a76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	3720      	adds	r7, #32
 8015a7e:	46bd      	mov	sp, r7
 8015a80:	bdb0      	pop	{r4, r5, r7, pc}
 8015a82:	bf00      	nop
 8015a84:	0801def8 	.word	0x0801def8
 8015a88:	0801dfa4 	.word	0x0801dfa4
 8015a8c:	0801df58 	.word	0x0801df58
 8015a90:	0801dfc0 	.word	0x0801dfc0
 8015a94:	2000003c 	.word	0x2000003c
 8015a98:	20008514 	.word	0x20008514
 8015a9c:	0801eaa8 	.word	0x0801eaa8
 8015aa0:	0801eaac 	.word	0x0801eaac
 8015aa4:	10624dd3 	.word	0x10624dd3

08015aa8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b082      	sub	sp, #8
 8015aac:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8015aae:	4b27      	ldr	r3, [pc, #156]	; (8015b4c <dhcp_coarse_tmr+0xa4>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	607b      	str	r3, [r7, #4]
 8015ab4:	e042      	b.n	8015b3c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aba:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015abc:	683b      	ldr	r3, [r7, #0]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d039      	beq.n	8015b36 <dhcp_coarse_tmr+0x8e>
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	795b      	ldrb	r3, [r3, #5]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d035      	beq.n	8015b36 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	8a9b      	ldrh	r3, [r3, #20]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d012      	beq.n	8015af8 <dhcp_coarse_tmr+0x50>
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	8a5b      	ldrh	r3, [r3, #18]
 8015ad6:	3301      	adds	r3, #1
 8015ad8:	b29a      	uxth	r2, r3
 8015ada:	683b      	ldr	r3, [r7, #0]
 8015adc:	825a      	strh	r2, [r3, #18]
 8015ade:	683b      	ldr	r3, [r7, #0]
 8015ae0:	8a5a      	ldrh	r2, [r3, #18]
 8015ae2:	683b      	ldr	r3, [r7, #0]
 8015ae4:	8a9b      	ldrh	r3, [r3, #20]
 8015ae6:	429a      	cmp	r2, r3
 8015ae8:	d106      	bne.n	8015af8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8015aea:	6878      	ldr	r0, [r7, #4]
 8015aec:	f000 fe32 	bl	8016754 <dhcp_release_and_stop>
        dhcp_start(netif);
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f000 f969 	bl	8015dc8 <dhcp_start>
 8015af6:	e01e      	b.n	8015b36 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015af8:	683b      	ldr	r3, [r7, #0]
 8015afa:	8a1b      	ldrh	r3, [r3, #16]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d00b      	beq.n	8015b18 <dhcp_coarse_tmr+0x70>
 8015b00:	683b      	ldr	r3, [r7, #0]
 8015b02:	8a1b      	ldrh	r3, [r3, #16]
 8015b04:	1e5a      	subs	r2, r3, #1
 8015b06:	b291      	uxth	r1, r2
 8015b08:	683a      	ldr	r2, [r7, #0]
 8015b0a:	8211      	strh	r1, [r2, #16]
 8015b0c:	2b01      	cmp	r3, #1
 8015b0e:	d103      	bne.n	8015b18 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	f000 f8c6 	bl	8015ca2 <dhcp_t2_timeout>
 8015b16:	e00e      	b.n	8015b36 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015b18:	683b      	ldr	r3, [r7, #0]
 8015b1a:	89db      	ldrh	r3, [r3, #14]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d00a      	beq.n	8015b36 <dhcp_coarse_tmr+0x8e>
 8015b20:	683b      	ldr	r3, [r7, #0]
 8015b22:	89db      	ldrh	r3, [r3, #14]
 8015b24:	1e5a      	subs	r2, r3, #1
 8015b26:	b291      	uxth	r1, r2
 8015b28:	683a      	ldr	r2, [r7, #0]
 8015b2a:	81d1      	strh	r1, [r2, #14]
 8015b2c:	2b01      	cmp	r3, #1
 8015b2e:	d102      	bne.n	8015b36 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8015b30:	6878      	ldr	r0, [r7, #4]
 8015b32:	f000 f888 	bl	8015c46 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	607b      	str	r3, [r7, #4]
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d1b9      	bne.n	8015ab6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8015b42:	bf00      	nop
 8015b44:	bf00      	nop
 8015b46:	3708      	adds	r7, #8
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}
 8015b4c:	2000f384 	.word	0x2000f384

08015b50 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b082      	sub	sp, #8
 8015b54:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8015b56:	4b16      	ldr	r3, [pc, #88]	; (8015bb0 <dhcp_fine_tmr+0x60>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	607b      	str	r3, [r7, #4]
 8015b5c:	e020      	b.n	8015ba0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b62:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d017      	beq.n	8015b9a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8015b6a:	683b      	ldr	r3, [r7, #0]
 8015b6c:	891b      	ldrh	r3, [r3, #8]
 8015b6e:	2b01      	cmp	r3, #1
 8015b70:	d906      	bls.n	8015b80 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8015b72:	683b      	ldr	r3, [r7, #0]
 8015b74:	891b      	ldrh	r3, [r3, #8]
 8015b76:	3b01      	subs	r3, #1
 8015b78:	b29a      	uxth	r2, r3
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	811a      	strh	r2, [r3, #8]
 8015b7e:	e00c      	b.n	8015b9a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	891b      	ldrh	r3, [r3, #8]
 8015b84:	2b01      	cmp	r3, #1
 8015b86:	d108      	bne.n	8015b9a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8015b88:	683b      	ldr	r3, [r7, #0]
 8015b8a:	891b      	ldrh	r3, [r3, #8]
 8015b8c:	3b01      	subs	r3, #1
 8015b8e:	b29a      	uxth	r2, r3
 8015b90:	683b      	ldr	r3, [r7, #0]
 8015b92:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015b94:	6878      	ldr	r0, [r7, #4]
 8015b96:	f000 f80d 	bl	8015bb4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	607b      	str	r3, [r7, #4]
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d1db      	bne.n	8015b5e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8015ba6:	bf00      	nop
 8015ba8:	bf00      	nop
 8015baa:	3708      	adds	r7, #8
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd80      	pop	{r7, pc}
 8015bb0:	2000f384 	.word	0x2000f384

08015bb4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b084      	sub	sp, #16
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bc0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	795b      	ldrb	r3, [r3, #5]
 8015bc6:	2b0c      	cmp	r3, #12
 8015bc8:	d003      	beq.n	8015bd2 <dhcp_timeout+0x1e>
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	795b      	ldrb	r3, [r3, #5]
 8015bce:	2b06      	cmp	r3, #6
 8015bd0:	d103      	bne.n	8015bda <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8015bd2:	6878      	ldr	r0, [r7, #4]
 8015bd4:	f000 fa54 	bl	8016080 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8015bd8:	e031      	b.n	8015c3e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	795b      	ldrb	r3, [r3, #5]
 8015bde:	2b01      	cmp	r3, #1
 8015be0:	d10e      	bne.n	8015c00 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	799b      	ldrb	r3, [r3, #6]
 8015be6:	2b05      	cmp	r3, #5
 8015be8:	d803      	bhi.n	8015bf2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f7ff fe60 	bl	80158b0 <dhcp_select>
}
 8015bf0:	e025      	b.n	8015c3e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8015bf2:	6878      	ldr	r0, [r7, #4]
 8015bf4:	f000 fdae 	bl	8016754 <dhcp_release_and_stop>
      dhcp_start(netif);
 8015bf8:	6878      	ldr	r0, [r7, #4]
 8015bfa:	f000 f8e5 	bl	8015dc8 <dhcp_start>
}
 8015bfe:	e01e      	b.n	8015c3e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	795b      	ldrb	r3, [r3, #5]
 8015c04:	2b08      	cmp	r3, #8
 8015c06:	d10b      	bne.n	8015c20 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	799b      	ldrb	r3, [r3, #6]
 8015c0c:	2b01      	cmp	r3, #1
 8015c0e:	d803      	bhi.n	8015c18 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f7ff fdf3 	bl	80157fc <dhcp_check>
}
 8015c16:	e012      	b.n	8015c3e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8015c18:	6878      	ldr	r0, [r7, #4]
 8015c1a:	f000 fad3 	bl	80161c4 <dhcp_bind>
}
 8015c1e:	e00e      	b.n	8015c3e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	795b      	ldrb	r3, [r3, #5]
 8015c24:	2b03      	cmp	r3, #3
 8015c26:	d10a      	bne.n	8015c3e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	799b      	ldrb	r3, [r3, #6]
 8015c2c:	2b01      	cmp	r3, #1
 8015c2e:	d803      	bhi.n	8015c38 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f000 fcd9 	bl	80165e8 <dhcp_reboot>
}
 8015c36:	e002      	b.n	8015c3e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015c38:	6878      	ldr	r0, [r7, #4]
 8015c3a:	f000 fa21 	bl	8016080 <dhcp_discover>
}
 8015c3e:	bf00      	nop
 8015c40:	3710      	adds	r7, #16
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}

08015c46 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8015c46:	b580      	push	{r7, lr}
 8015c48:	b084      	sub	sp, #16
 8015c4a:	af00      	add	r7, sp, #0
 8015c4c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c52:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	795b      	ldrb	r3, [r3, #5]
 8015c58:	2b01      	cmp	r3, #1
 8015c5a:	d007      	beq.n	8015c6c <dhcp_t1_timeout+0x26>
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	795b      	ldrb	r3, [r3, #5]
 8015c60:	2b0a      	cmp	r3, #10
 8015c62:	d003      	beq.n	8015c6c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015c68:	2b05      	cmp	r3, #5
 8015c6a:	d116      	bne.n	8015c9a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8015c6c:	6878      	ldr	r0, [r7, #4]
 8015c6e:	f000 fb83 	bl	8016378 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	899b      	ldrh	r3, [r3, #12]
 8015c76:	461a      	mov	r2, r3
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	8a5b      	ldrh	r3, [r3, #18]
 8015c7c:	1ad3      	subs	r3, r2, r3
 8015c7e:	2b01      	cmp	r3, #1
 8015c80:	dd0b      	ble.n	8015c9a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	899b      	ldrh	r3, [r3, #12]
 8015c86:	461a      	mov	r2, r3
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	8a5b      	ldrh	r3, [r3, #18]
 8015c8c:	1ad3      	subs	r3, r2, r3
 8015c8e:	0fda      	lsrs	r2, r3, #31
 8015c90:	4413      	add	r3, r2
 8015c92:	105b      	asrs	r3, r3, #1
 8015c94:	b29a      	uxth	r2, r3
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8015c9a:	bf00      	nop
 8015c9c:	3710      	adds	r7, #16
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}

08015ca2 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8015ca2:	b580      	push	{r7, lr}
 8015ca4:	b084      	sub	sp, #16
 8015ca6:	af00      	add	r7, sp, #0
 8015ca8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	795b      	ldrb	r3, [r3, #5]
 8015cb4:	2b01      	cmp	r3, #1
 8015cb6:	d00b      	beq.n	8015cd0 <dhcp_t2_timeout+0x2e>
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	795b      	ldrb	r3, [r3, #5]
 8015cbc:	2b0a      	cmp	r3, #10
 8015cbe:	d007      	beq.n	8015cd0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015cc4:	2b05      	cmp	r3, #5
 8015cc6:	d003      	beq.n	8015cd0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	795b      	ldrb	r3, [r3, #5]
 8015ccc:	2b04      	cmp	r3, #4
 8015cce:	d116      	bne.n	8015cfe <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8015cd0:	6878      	ldr	r0, [r7, #4]
 8015cd2:	f000 fbed 	bl	80164b0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	8a9b      	ldrh	r3, [r3, #20]
 8015cda:	461a      	mov	r2, r3
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	8a5b      	ldrh	r3, [r3, #18]
 8015ce0:	1ad3      	subs	r3, r2, r3
 8015ce2:	2b01      	cmp	r3, #1
 8015ce4:	dd0b      	ble.n	8015cfe <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	8a9b      	ldrh	r3, [r3, #20]
 8015cea:	461a      	mov	r2, r3
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	8a5b      	ldrh	r3, [r3, #18]
 8015cf0:	1ad3      	subs	r3, r2, r3
 8015cf2:	0fda      	lsrs	r2, r3, #31
 8015cf4:	4413      	add	r3, r2
 8015cf6:	105b      	asrs	r3, r3, #1
 8015cf8:	b29a      	uxth	r2, r3
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8015cfe:	bf00      	nop
 8015d00:	3710      	adds	r7, #16
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bd80      	pop	{r7, pc}
	...

08015d08 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b084      	sub	sp, #16
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
 8015d10:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d16:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	2200      	movs	r2, #0
 8015d22:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015d24:	4b26      	ldr	r3, [pc, #152]	; (8015dc0 <dhcp_handle_ack+0xb8>)
 8015d26:	78db      	ldrb	r3, [r3, #3]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d003      	beq.n	8015d34 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8015d2c:	4b25      	ldr	r3, [pc, #148]	; (8015dc4 <dhcp_handle_ack+0xbc>)
 8015d2e:	68da      	ldr	r2, [r3, #12]
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015d34:	4b22      	ldr	r3, [pc, #136]	; (8015dc0 <dhcp_handle_ack+0xb8>)
 8015d36:	791b      	ldrb	r3, [r3, #4]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d004      	beq.n	8015d46 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8015d3c:	4b21      	ldr	r3, [pc, #132]	; (8015dc4 <dhcp_handle_ack+0xbc>)
 8015d3e:	691a      	ldr	r2, [r3, #16]
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	62da      	str	r2, [r3, #44]	; 0x2c
 8015d44:	e004      	b.n	8015d50 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d4a:	085a      	lsrs	r2, r3, #1
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8015d50:	4b1b      	ldr	r3, [pc, #108]	; (8015dc0 <dhcp_handle_ack+0xb8>)
 8015d52:	795b      	ldrb	r3, [r3, #5]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d004      	beq.n	8015d62 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8015d58:	4b1a      	ldr	r3, [pc, #104]	; (8015dc4 <dhcp_handle_ack+0xbc>)
 8015d5a:	695a      	ldr	r2, [r3, #20]
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	631a      	str	r2, [r3, #48]	; 0x30
 8015d60:	e007      	b.n	8015d72 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015d66:	4613      	mov	r3, r2
 8015d68:	00db      	lsls	r3, r3, #3
 8015d6a:	1a9b      	subs	r3, r3, r2
 8015d6c:	08da      	lsrs	r2, r3, #3
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015d72:	683b      	ldr	r3, [r7, #0]
 8015d74:	691a      	ldr	r2, [r3, #16]
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8015d7a:	4b11      	ldr	r3, [pc, #68]	; (8015dc0 <dhcp_handle_ack+0xb8>)
 8015d7c:	799b      	ldrb	r3, [r3, #6]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d00b      	beq.n	8015d9a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8015d82:	4b10      	ldr	r3, [pc, #64]	; (8015dc4 <dhcp_handle_ack+0xbc>)
 8015d84:	699b      	ldr	r3, [r3, #24]
 8015d86:	4618      	mov	r0, r3
 8015d88:	f7f7 fec7 	bl	800db1a <lwip_htonl>
 8015d8c:	4602      	mov	r2, r0
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	2201      	movs	r2, #1
 8015d96:	71da      	strb	r2, [r3, #7]
 8015d98:	e002      	b.n	8015da0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8015da0:	4b07      	ldr	r3, [pc, #28]	; (8015dc0 <dhcp_handle_ack+0xb8>)
 8015da2:	79db      	ldrb	r3, [r3, #7]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d007      	beq.n	8015db8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8015da8:	4b06      	ldr	r3, [pc, #24]	; (8015dc4 <dhcp_handle_ack+0xbc>)
 8015daa:	69db      	ldr	r3, [r3, #28]
 8015dac:	4618      	mov	r0, r3
 8015dae:	f7f7 feb4 	bl	800db1a <lwip_htonl>
 8015db2:	4602      	mov	r2, r0
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8015db8:	bf00      	nop
 8015dba:	3710      	adds	r7, #16
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd80      	pop	{r7, pc}
 8015dc0:	2000f3b0 	.word	0x2000f3b0
 8015dc4:	2000f3b8 	.word	0x2000f3b8

08015dc8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b084      	sub	sp, #16
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d109      	bne.n	8015dea <dhcp_start+0x22>
 8015dd6:	4b37      	ldr	r3, [pc, #220]	; (8015eb4 <dhcp_start+0xec>)
 8015dd8:	f240 22e7 	movw	r2, #743	; 0x2e7
 8015ddc:	4936      	ldr	r1, [pc, #216]	; (8015eb8 <dhcp_start+0xf0>)
 8015dde:	4837      	ldr	r0, [pc, #220]	; (8015ebc <dhcp_start+0xf4>)
 8015de0:	f004 fb38 	bl	801a454 <iprintf>
 8015de4:	f06f 030f 	mvn.w	r3, #15
 8015de8:	e060      	b.n	8015eac <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015df0:	f003 0301 	and.w	r3, r3, #1
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d109      	bne.n	8015e0c <dhcp_start+0x44>
 8015df8:	4b2e      	ldr	r3, [pc, #184]	; (8015eb4 <dhcp_start+0xec>)
 8015dfa:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8015dfe:	4930      	ldr	r1, [pc, #192]	; (8015ec0 <dhcp_start+0xf8>)
 8015e00:	482e      	ldr	r0, [pc, #184]	; (8015ebc <dhcp_start+0xf4>)
 8015e02:	f004 fb27 	bl	801a454 <iprintf>
 8015e06:	f06f 030f 	mvn.w	r3, #15
 8015e0a:	e04f      	b.n	8015eac <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e10:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e16:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8015e1a:	d202      	bcs.n	8015e22 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8015e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8015e20:	e044      	b.n	8015eac <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d10d      	bne.n	8015e44 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8015e28:	2034      	movs	r0, #52	; 0x34
 8015e2a:	f7f8 f995 	bl	800e158 <mem_malloc>
 8015e2e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d102      	bne.n	8015e3c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8015e36:	f04f 33ff 	mov.w	r3, #4294967295
 8015e3a:	e037      	b.n	8015eac <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	68fa      	ldr	r2, [r7, #12]
 8015e40:	625a      	str	r2, [r3, #36]	; 0x24
 8015e42:	e005      	b.n	8015e50 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	791b      	ldrb	r3, [r3, #4]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d001      	beq.n	8015e50 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015e4c:	f7ff fc92 	bl	8015774 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8015e50:	2234      	movs	r2, #52	; 0x34
 8015e52:	2100      	movs	r1, #0
 8015e54:	68f8      	ldr	r0, [r7, #12]
 8015e56:	f004 fa4b 	bl	801a2f0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8015e5a:	f7ff fc39 	bl	80156d0 <dhcp_inc_pcb_refcount>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d002      	beq.n	8015e6a <dhcp_start+0xa2>
    return ERR_MEM;
 8015e64:	f04f 33ff 	mov.w	r3, #4294967295
 8015e68:	e020      	b.n	8015eac <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	2201      	movs	r2, #1
 8015e6e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015e76:	f003 0304 	and.w	r3, r3, #4
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d105      	bne.n	8015e8a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8015e7e:	2102      	movs	r1, #2
 8015e80:	68f8      	ldr	r0, [r7, #12]
 8015e82:	f000 fd01 	bl	8016888 <dhcp_set_state>
    return ERR_OK;
 8015e86:	2300      	movs	r3, #0
 8015e88:	e010      	b.n	8015eac <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8015e8a:	6878      	ldr	r0, [r7, #4]
 8015e8c:	f000 f8f8 	bl	8016080 <dhcp_discover>
 8015e90:	4603      	mov	r3, r0
 8015e92:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8015e94:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d005      	beq.n	8015ea8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8015e9c:	6878      	ldr	r0, [r7, #4]
 8015e9e:	f000 fc59 	bl	8016754 <dhcp_release_and_stop>
    return ERR_MEM;
 8015ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8015ea6:	e001      	b.n	8015eac <dhcp_start+0xe4>
  }
  return result;
 8015ea8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015eac:	4618      	mov	r0, r3
 8015eae:	3710      	adds	r7, #16
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bd80      	pop	{r7, pc}
 8015eb4:	0801def8 	.word	0x0801def8
 8015eb8:	0801dfdc 	.word	0x0801dfdc
 8015ebc:	0801df58 	.word	0x0801df58
 8015ec0:	0801e020 	.word	0x0801e020

08015ec4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b084      	sub	sp, #16
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ed0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d025      	beq.n	8015f24 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	795b      	ldrb	r3, [r3, #5]
 8015edc:	2b0a      	cmp	r3, #10
 8015ede:	d008      	beq.n	8015ef2 <dhcp_network_changed+0x2e>
 8015ee0:	2b0a      	cmp	r3, #10
 8015ee2:	dc0d      	bgt.n	8015f00 <dhcp_network_changed+0x3c>
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d01f      	beq.n	8015f28 <dhcp_network_changed+0x64>
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	db09      	blt.n	8015f00 <dhcp_network_changed+0x3c>
 8015eec:	3b03      	subs	r3, #3
 8015eee:	2b02      	cmp	r3, #2
 8015ef0:	d806      	bhi.n	8015f00 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	2200      	movs	r2, #0
 8015ef6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f000 fb75 	bl	80165e8 <dhcp_reboot>
      break;
 8015efe:	e014      	b.n	8015f2a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	795b      	ldrb	r3, [r3, #5]
 8015f04:	2b0c      	cmp	r3, #12
 8015f06:	d906      	bls.n	8015f16 <dhcp_network_changed+0x52>
 8015f08:	4b09      	ldr	r3, [pc, #36]	; (8015f30 <dhcp_network_changed+0x6c>)
 8015f0a:	f240 326d 	movw	r2, #877	; 0x36d
 8015f0e:	4909      	ldr	r1, [pc, #36]	; (8015f34 <dhcp_network_changed+0x70>)
 8015f10:	4809      	ldr	r0, [pc, #36]	; (8015f38 <dhcp_network_changed+0x74>)
 8015f12:	f004 fa9f 	bl	801a454 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	2200      	movs	r2, #0
 8015f1a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f000 f8af 	bl	8016080 <dhcp_discover>
      break;
 8015f22:	e002      	b.n	8015f2a <dhcp_network_changed+0x66>
    return;
 8015f24:	bf00      	nop
 8015f26:	e000      	b.n	8015f2a <dhcp_network_changed+0x66>
      break;
 8015f28:	bf00      	nop
  }
}
 8015f2a:	3710      	adds	r7, #16
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}
 8015f30:	0801def8 	.word	0x0801def8
 8015f34:	0801e044 	.word	0x0801e044
 8015f38:	0801df58 	.word	0x0801df58

08015f3c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b084      	sub	sp, #16
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
 8015f44:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d107      	bne.n	8015f5c <dhcp_arp_reply+0x20>
 8015f4c:	4b0e      	ldr	r3, [pc, #56]	; (8015f88 <dhcp_arp_reply+0x4c>)
 8015f4e:	f240 328b 	movw	r2, #907	; 0x38b
 8015f52:	490e      	ldr	r1, [pc, #56]	; (8015f8c <dhcp_arp_reply+0x50>)
 8015f54:	480e      	ldr	r0, [pc, #56]	; (8015f90 <dhcp_arp_reply+0x54>)
 8015f56:	f004 fa7d 	bl	801a454 <iprintf>
 8015f5a:	e012      	b.n	8015f82 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f60:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d00c      	beq.n	8015f82 <dhcp_arp_reply+0x46>
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	795b      	ldrb	r3, [r3, #5]
 8015f6c:	2b08      	cmp	r3, #8
 8015f6e:	d108      	bne.n	8015f82 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015f70:	683b      	ldr	r3, [r7, #0]
 8015f72:	681a      	ldr	r2, [r3, #0]
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	69db      	ldr	r3, [r3, #28]
 8015f78:	429a      	cmp	r2, r3
 8015f7a:	d102      	bne.n	8015f82 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	f000 f809 	bl	8015f94 <dhcp_decline>
    }
  }
}
 8015f82:	3710      	adds	r7, #16
 8015f84:	46bd      	mov	sp, r7
 8015f86:	bd80      	pop	{r7, pc}
 8015f88:	0801def8 	.word	0x0801def8
 8015f8c:	0801dfdc 	.word	0x0801dfdc
 8015f90:	0801df58 	.word	0x0801df58

08015f94 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015f94:	b5b0      	push	{r4, r5, r7, lr}
 8015f96:	b08a      	sub	sp, #40	; 0x28
 8015f98:	af02      	add	r7, sp, #8
 8015f9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fa0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015fa2:	210c      	movs	r1, #12
 8015fa4:	69b8      	ldr	r0, [r7, #24]
 8015fa6:	f000 fc6f 	bl	8016888 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8015faa:	f107 030c 	add.w	r3, r7, #12
 8015fae:	2204      	movs	r2, #4
 8015fb0:	69b9      	ldr	r1, [r7, #24]
 8015fb2:	6878      	ldr	r0, [r7, #4]
 8015fb4:	f001 f8f4 	bl	80171a0 <dhcp_create_msg>
 8015fb8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015fba:	697b      	ldr	r3, [r7, #20]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d035      	beq.n	801602c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	685b      	ldr	r3, [r3, #4]
 8015fc4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015fc6:	89b8      	ldrh	r0, [r7, #12]
 8015fc8:	693b      	ldr	r3, [r7, #16]
 8015fca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015fce:	2304      	movs	r3, #4
 8015fd0:	2232      	movs	r2, #50	; 0x32
 8015fd2:	f000 fc73 	bl	80168bc <dhcp_option>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015fda:	89bc      	ldrh	r4, [r7, #12]
 8015fdc:	693b      	ldr	r3, [r7, #16]
 8015fde:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015fe2:	69bb      	ldr	r3, [r7, #24]
 8015fe4:	69db      	ldr	r3, [r3, #28]
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f7f7 fd97 	bl	800db1a <lwip_htonl>
 8015fec:	4603      	mov	r3, r0
 8015fee:	461a      	mov	r2, r3
 8015ff0:	4629      	mov	r1, r5
 8015ff2:	4620      	mov	r0, r4
 8015ff4:	f000 fcee 	bl	80169d4 <dhcp_option_long>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015ffc:	89b8      	ldrh	r0, [r7, #12]
 8015ffe:	693b      	ldr	r3, [r7, #16]
 8016000:	33f0      	adds	r3, #240	; 0xf0
 8016002:	697a      	ldr	r2, [r7, #20]
 8016004:	4619      	mov	r1, r3
 8016006:	f001 f9a1 	bl	801734c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801600a:	4b19      	ldr	r3, [pc, #100]	; (8016070 <dhcp_decline+0xdc>)
 801600c:	6818      	ldr	r0, [r3, #0]
 801600e:	4b19      	ldr	r3, [pc, #100]	; (8016074 <dhcp_decline+0xe0>)
 8016010:	9301      	str	r3, [sp, #4]
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	9300      	str	r3, [sp, #0]
 8016016:	2343      	movs	r3, #67	; 0x43
 8016018:	4a17      	ldr	r2, [pc, #92]	; (8016078 <dhcp_decline+0xe4>)
 801601a:	6979      	ldr	r1, [r7, #20]
 801601c:	f7ff f8d2 	bl	80151c4 <udp_sendto_if_src>
 8016020:	4603      	mov	r3, r0
 8016022:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016024:	6978      	ldr	r0, [r7, #20]
 8016026:	f7f9 f91b 	bl	800f260 <pbuf_free>
 801602a:	e001      	b.n	8016030 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801602c:	23ff      	movs	r3, #255	; 0xff
 801602e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016030:	69bb      	ldr	r3, [r7, #24]
 8016032:	799b      	ldrb	r3, [r3, #6]
 8016034:	2bff      	cmp	r3, #255	; 0xff
 8016036:	d005      	beq.n	8016044 <dhcp_decline+0xb0>
    dhcp->tries++;
 8016038:	69bb      	ldr	r3, [r7, #24]
 801603a:	799b      	ldrb	r3, [r3, #6]
 801603c:	3301      	adds	r3, #1
 801603e:	b2da      	uxtb	r2, r3
 8016040:	69bb      	ldr	r3, [r7, #24]
 8016042:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016044:	f242 7310 	movw	r3, #10000	; 0x2710
 8016048:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801604a:	89fb      	ldrh	r3, [r7, #14]
 801604c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016050:	4a0a      	ldr	r2, [pc, #40]	; (801607c <dhcp_decline+0xe8>)
 8016052:	fb82 1203 	smull	r1, r2, r2, r3
 8016056:	1152      	asrs	r2, r2, #5
 8016058:	17db      	asrs	r3, r3, #31
 801605a:	1ad3      	subs	r3, r2, r3
 801605c:	b29a      	uxth	r2, r3
 801605e:	69bb      	ldr	r3, [r7, #24]
 8016060:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016062:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016066:	4618      	mov	r0, r3
 8016068:	3720      	adds	r7, #32
 801606a:	46bd      	mov	sp, r7
 801606c:	bdb0      	pop	{r4, r5, r7, pc}
 801606e:	bf00      	nop
 8016070:	20008514 	.word	0x20008514
 8016074:	0801eaa8 	.word	0x0801eaa8
 8016078:	0801eaac 	.word	0x0801eaac
 801607c:	10624dd3 	.word	0x10624dd3

08016080 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b08a      	sub	sp, #40	; 0x28
 8016084:	af02      	add	r7, sp, #8
 8016086:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801608c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801608e:	2300      	movs	r3, #0
 8016090:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8016092:	69bb      	ldr	r3, [r7, #24]
 8016094:	2200      	movs	r2, #0
 8016096:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8016098:	2106      	movs	r1, #6
 801609a:	69b8      	ldr	r0, [r7, #24]
 801609c:	f000 fbf4 	bl	8016888 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80160a0:	f107 0308 	add.w	r3, r7, #8
 80160a4:	2201      	movs	r2, #1
 80160a6:	69b9      	ldr	r1, [r7, #24]
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f001 f879 	bl	80171a0 <dhcp_create_msg>
 80160ae:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80160b0:	693b      	ldr	r3, [r7, #16]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d04b      	beq.n	801614e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80160b6:	693b      	ldr	r3, [r7, #16]
 80160b8:	685b      	ldr	r3, [r3, #4]
 80160ba:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80160bc:	8938      	ldrh	r0, [r7, #8]
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80160c4:	2302      	movs	r3, #2
 80160c6:	2239      	movs	r2, #57	; 0x39
 80160c8:	f000 fbf8 	bl	80168bc <dhcp_option>
 80160cc:	4603      	mov	r3, r0
 80160ce:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80160d0:	8938      	ldrh	r0, [r7, #8]
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80160dc:	461a      	mov	r2, r3
 80160de:	f000 fc47 	bl	8016970 <dhcp_option_short>
 80160e2:	4603      	mov	r3, r0
 80160e4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80160e6:	8938      	ldrh	r0, [r7, #8]
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80160ee:	2303      	movs	r3, #3
 80160f0:	2237      	movs	r2, #55	; 0x37
 80160f2:	f000 fbe3 	bl	80168bc <dhcp_option>
 80160f6:	4603      	mov	r3, r0
 80160f8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80160fa:	2300      	movs	r3, #0
 80160fc:	77fb      	strb	r3, [r7, #31]
 80160fe:	e00e      	b.n	801611e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016100:	8938      	ldrh	r0, [r7, #8]
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016108:	7ffb      	ldrb	r3, [r7, #31]
 801610a:	4a29      	ldr	r2, [pc, #164]	; (80161b0 <dhcp_discover+0x130>)
 801610c:	5cd3      	ldrb	r3, [r2, r3]
 801610e:	461a      	mov	r2, r3
 8016110:	f000 fc08 	bl	8016924 <dhcp_option_byte>
 8016114:	4603      	mov	r3, r0
 8016116:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016118:	7ffb      	ldrb	r3, [r7, #31]
 801611a:	3301      	adds	r3, #1
 801611c:	77fb      	strb	r3, [r7, #31]
 801611e:	7ffb      	ldrb	r3, [r7, #31]
 8016120:	2b02      	cmp	r3, #2
 8016122:	d9ed      	bls.n	8016100 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016124:	8938      	ldrh	r0, [r7, #8]
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	33f0      	adds	r3, #240	; 0xf0
 801612a:	693a      	ldr	r2, [r7, #16]
 801612c:	4619      	mov	r1, r3
 801612e:	f001 f90d 	bl	801734c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016132:	4b20      	ldr	r3, [pc, #128]	; (80161b4 <dhcp_discover+0x134>)
 8016134:	6818      	ldr	r0, [r3, #0]
 8016136:	4b20      	ldr	r3, [pc, #128]	; (80161b8 <dhcp_discover+0x138>)
 8016138:	9301      	str	r3, [sp, #4]
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	9300      	str	r3, [sp, #0]
 801613e:	2343      	movs	r3, #67	; 0x43
 8016140:	4a1e      	ldr	r2, [pc, #120]	; (80161bc <dhcp_discover+0x13c>)
 8016142:	6939      	ldr	r1, [r7, #16]
 8016144:	f7ff f83e 	bl	80151c4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8016148:	6938      	ldr	r0, [r7, #16]
 801614a:	f7f9 f889 	bl	800f260 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801614e:	69bb      	ldr	r3, [r7, #24]
 8016150:	799b      	ldrb	r3, [r3, #6]
 8016152:	2bff      	cmp	r3, #255	; 0xff
 8016154:	d005      	beq.n	8016162 <dhcp_discover+0xe2>
    dhcp->tries++;
 8016156:	69bb      	ldr	r3, [r7, #24]
 8016158:	799b      	ldrb	r3, [r3, #6]
 801615a:	3301      	adds	r3, #1
 801615c:	b2da      	uxtb	r2, r3
 801615e:	69bb      	ldr	r3, [r7, #24]
 8016160:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016162:	69bb      	ldr	r3, [r7, #24]
 8016164:	799b      	ldrb	r3, [r3, #6]
 8016166:	2b05      	cmp	r3, #5
 8016168:	d80d      	bhi.n	8016186 <dhcp_discover+0x106>
 801616a:	69bb      	ldr	r3, [r7, #24]
 801616c:	799b      	ldrb	r3, [r3, #6]
 801616e:	461a      	mov	r2, r3
 8016170:	2301      	movs	r3, #1
 8016172:	4093      	lsls	r3, r2
 8016174:	b29b      	uxth	r3, r3
 8016176:	461a      	mov	r2, r3
 8016178:	0152      	lsls	r2, r2, #5
 801617a:	1ad2      	subs	r2, r2, r3
 801617c:	0092      	lsls	r2, r2, #2
 801617e:	4413      	add	r3, r2
 8016180:	00db      	lsls	r3, r3, #3
 8016182:	b29b      	uxth	r3, r3
 8016184:	e001      	b.n	801618a <dhcp_discover+0x10a>
 8016186:	f64e 2360 	movw	r3, #60000	; 0xea60
 801618a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801618c:	897b      	ldrh	r3, [r7, #10]
 801618e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016192:	4a0b      	ldr	r2, [pc, #44]	; (80161c0 <dhcp_discover+0x140>)
 8016194:	fb82 1203 	smull	r1, r2, r2, r3
 8016198:	1152      	asrs	r2, r2, #5
 801619a:	17db      	asrs	r3, r3, #31
 801619c:	1ad3      	subs	r3, r2, r3
 801619e:	b29a      	uxth	r2, r3
 80161a0:	69bb      	ldr	r3, [r7, #24]
 80161a2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80161a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80161a8:	4618      	mov	r0, r3
 80161aa:	3720      	adds	r7, #32
 80161ac:	46bd      	mov	sp, r7
 80161ae:	bd80      	pop	{r7, pc}
 80161b0:	2000003c 	.word	0x2000003c
 80161b4:	20008514 	.word	0x20008514
 80161b8:	0801eaa8 	.word	0x0801eaa8
 80161bc:	0801eaac 	.word	0x0801eaac
 80161c0:	10624dd3 	.word	0x10624dd3

080161c4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b088      	sub	sp, #32
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d107      	bne.n	80161e2 <dhcp_bind+0x1e>
 80161d2:	4b64      	ldr	r3, [pc, #400]	; (8016364 <dhcp_bind+0x1a0>)
 80161d4:	f240 4215 	movw	r2, #1045	; 0x415
 80161d8:	4963      	ldr	r1, [pc, #396]	; (8016368 <dhcp_bind+0x1a4>)
 80161da:	4864      	ldr	r0, [pc, #400]	; (801636c <dhcp_bind+0x1a8>)
 80161dc:	f004 f93a 	bl	801a454 <iprintf>
 80161e0:	e0bc      	b.n	801635c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161e6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80161e8:	69bb      	ldr	r3, [r7, #24]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d107      	bne.n	80161fe <dhcp_bind+0x3a>
 80161ee:	4b5d      	ldr	r3, [pc, #372]	; (8016364 <dhcp_bind+0x1a0>)
 80161f0:	f240 4217 	movw	r2, #1047	; 0x417
 80161f4:	495e      	ldr	r1, [pc, #376]	; (8016370 <dhcp_bind+0x1ac>)
 80161f6:	485d      	ldr	r0, [pc, #372]	; (801636c <dhcp_bind+0x1a8>)
 80161f8:	f004 f92c 	bl	801a454 <iprintf>
 80161fc:	e0ae      	b.n	801635c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80161fe:	69bb      	ldr	r3, [r7, #24]
 8016200:	2200      	movs	r2, #0
 8016202:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8016204:	69bb      	ldr	r3, [r7, #24]
 8016206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801620c:	d019      	beq.n	8016242 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801620e:	69bb      	ldr	r3, [r7, #24]
 8016210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016212:	331e      	adds	r3, #30
 8016214:	4a57      	ldr	r2, [pc, #348]	; (8016374 <dhcp_bind+0x1b0>)
 8016216:	fba2 2303 	umull	r2, r3, r2, r3
 801621a:	095b      	lsrs	r3, r3, #5
 801621c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801621e:	69fb      	ldr	r3, [r7, #28]
 8016220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016224:	d302      	bcc.n	801622c <dhcp_bind+0x68>
      timeout = 0xffff;
 8016226:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801622a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801622c:	69fb      	ldr	r3, [r7, #28]
 801622e:	b29a      	uxth	r2, r3
 8016230:	69bb      	ldr	r3, [r7, #24]
 8016232:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8016234:	69bb      	ldr	r3, [r7, #24]
 8016236:	8a9b      	ldrh	r3, [r3, #20]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d102      	bne.n	8016242 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801623c:	69bb      	ldr	r3, [r7, #24]
 801623e:	2201      	movs	r2, #1
 8016240:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8016242:	69bb      	ldr	r3, [r7, #24]
 8016244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801624a:	d01d      	beq.n	8016288 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801624c:	69bb      	ldr	r3, [r7, #24]
 801624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016250:	331e      	adds	r3, #30
 8016252:	4a48      	ldr	r2, [pc, #288]	; (8016374 <dhcp_bind+0x1b0>)
 8016254:	fba2 2303 	umull	r2, r3, r2, r3
 8016258:	095b      	lsrs	r3, r3, #5
 801625a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801625c:	69fb      	ldr	r3, [r7, #28]
 801625e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016262:	d302      	bcc.n	801626a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8016264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016268:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801626a:	69fb      	ldr	r3, [r7, #28]
 801626c:	b29a      	uxth	r2, r3
 801626e:	69bb      	ldr	r3, [r7, #24]
 8016270:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016272:	69bb      	ldr	r3, [r7, #24]
 8016274:	895b      	ldrh	r3, [r3, #10]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d102      	bne.n	8016280 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801627a:	69bb      	ldr	r3, [r7, #24]
 801627c:	2201      	movs	r2, #1
 801627e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8016280:	69bb      	ldr	r3, [r7, #24]
 8016282:	895a      	ldrh	r2, [r3, #10]
 8016284:	69bb      	ldr	r3, [r7, #24]
 8016286:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8016288:	69bb      	ldr	r3, [r7, #24]
 801628a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016290:	d01d      	beq.n	80162ce <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016292:	69bb      	ldr	r3, [r7, #24]
 8016294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016296:	331e      	adds	r3, #30
 8016298:	4a36      	ldr	r2, [pc, #216]	; (8016374 <dhcp_bind+0x1b0>)
 801629a:	fba2 2303 	umull	r2, r3, r2, r3
 801629e:	095b      	lsrs	r3, r3, #5
 80162a0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80162a2:	69fb      	ldr	r3, [r7, #28]
 80162a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80162a8:	d302      	bcc.n	80162b0 <dhcp_bind+0xec>
      timeout = 0xffff;
 80162aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162ae:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80162b0:	69fb      	ldr	r3, [r7, #28]
 80162b2:	b29a      	uxth	r2, r3
 80162b4:	69bb      	ldr	r3, [r7, #24]
 80162b6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80162b8:	69bb      	ldr	r3, [r7, #24]
 80162ba:	899b      	ldrh	r3, [r3, #12]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d102      	bne.n	80162c6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80162c0:	69bb      	ldr	r3, [r7, #24]
 80162c2:	2201      	movs	r2, #1
 80162c4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80162c6:	69bb      	ldr	r3, [r7, #24]
 80162c8:	899a      	ldrh	r2, [r3, #12]
 80162ca:	69bb      	ldr	r3, [r7, #24]
 80162cc:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80162ce:	69bb      	ldr	r3, [r7, #24]
 80162d0:	895a      	ldrh	r2, [r3, #10]
 80162d2:	69bb      	ldr	r3, [r7, #24]
 80162d4:	899b      	ldrh	r3, [r3, #12]
 80162d6:	429a      	cmp	r2, r3
 80162d8:	d306      	bcc.n	80162e8 <dhcp_bind+0x124>
 80162da:	69bb      	ldr	r3, [r7, #24]
 80162dc:	899b      	ldrh	r3, [r3, #12]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d002      	beq.n	80162e8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80162e2:	69bb      	ldr	r3, [r7, #24]
 80162e4:	2200      	movs	r2, #0
 80162e6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80162e8:	69bb      	ldr	r3, [r7, #24]
 80162ea:	79db      	ldrb	r3, [r3, #7]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d003      	beq.n	80162f8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80162f0:	69bb      	ldr	r3, [r7, #24]
 80162f2:	6a1b      	ldr	r3, [r3, #32]
 80162f4:	613b      	str	r3, [r7, #16]
 80162f6:	e014      	b.n	8016322 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80162f8:	69bb      	ldr	r3, [r7, #24]
 80162fa:	331c      	adds	r3, #28
 80162fc:	781b      	ldrb	r3, [r3, #0]
 80162fe:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8016300:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016304:	2b00      	cmp	r3, #0
 8016306:	db02      	blt.n	801630e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8016308:	23ff      	movs	r3, #255	; 0xff
 801630a:	613b      	str	r3, [r7, #16]
 801630c:	e009      	b.n	8016322 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801630e:	7dfb      	ldrb	r3, [r7, #23]
 8016310:	2bbf      	cmp	r3, #191	; 0xbf
 8016312:	d903      	bls.n	801631c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8016314:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8016318:	613b      	str	r3, [r7, #16]
 801631a:	e002      	b.n	8016322 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801631c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016320:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8016322:	69bb      	ldr	r3, [r7, #24]
 8016324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016326:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d108      	bne.n	8016340 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801632e:	69bb      	ldr	r3, [r7, #24]
 8016330:	69da      	ldr	r2, [r3, #28]
 8016332:	693b      	ldr	r3, [r7, #16]
 8016334:	4013      	ands	r3, r2
 8016336:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801633e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8016340:	210a      	movs	r1, #10
 8016342:	69b8      	ldr	r0, [r7, #24]
 8016344:	f000 faa0 	bl	8016888 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8016348:	69bb      	ldr	r3, [r7, #24]
 801634a:	f103 011c 	add.w	r1, r3, #28
 801634e:	f107 030c 	add.w	r3, r7, #12
 8016352:	f107 0210 	add.w	r2, r7, #16
 8016356:	6878      	ldr	r0, [r7, #4]
 8016358:	f7f8 fa74 	bl	800e844 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801635c:	3720      	adds	r7, #32
 801635e:	46bd      	mov	sp, r7
 8016360:	bd80      	pop	{r7, pc}
 8016362:	bf00      	nop
 8016364:	0801def8 	.word	0x0801def8
 8016368:	0801e058 	.word	0x0801e058
 801636c:	0801df58 	.word	0x0801df58
 8016370:	0801e074 	.word	0x0801e074
 8016374:	88888889 	.word	0x88888889

08016378 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8016378:	b580      	push	{r7, lr}
 801637a:	b08a      	sub	sp, #40	; 0x28
 801637c:	af02      	add	r7, sp, #8
 801637e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016384:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8016386:	2105      	movs	r1, #5
 8016388:	69b8      	ldr	r0, [r7, #24]
 801638a:	f000 fa7d 	bl	8016888 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801638e:	f107 030c 	add.w	r3, r7, #12
 8016392:	2203      	movs	r2, #3
 8016394:	69b9      	ldr	r1, [r7, #24]
 8016396:	6878      	ldr	r0, [r7, #4]
 8016398:	f000 ff02 	bl	80171a0 <dhcp_create_msg>
 801639c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801639e:	697b      	ldr	r3, [r7, #20]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d04e      	beq.n	8016442 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80163a4:	697b      	ldr	r3, [r7, #20]
 80163a6:	685b      	ldr	r3, [r3, #4]
 80163a8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80163aa:	89b8      	ldrh	r0, [r7, #12]
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80163b2:	2302      	movs	r3, #2
 80163b4:	2239      	movs	r2, #57	; 0x39
 80163b6:	f000 fa81 	bl	80168bc <dhcp_option>
 80163ba:	4603      	mov	r3, r0
 80163bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80163be:	89b8      	ldrh	r0, [r7, #12]
 80163c0:	693b      	ldr	r3, [r7, #16]
 80163c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80163ca:	461a      	mov	r2, r3
 80163cc:	f000 fad0 	bl	8016970 <dhcp_option_short>
 80163d0:	4603      	mov	r3, r0
 80163d2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80163d4:	89b8      	ldrh	r0, [r7, #12]
 80163d6:	693b      	ldr	r3, [r7, #16]
 80163d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80163dc:	2303      	movs	r3, #3
 80163de:	2237      	movs	r2, #55	; 0x37
 80163e0:	f000 fa6c 	bl	80168bc <dhcp_option>
 80163e4:	4603      	mov	r3, r0
 80163e6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80163e8:	2300      	movs	r3, #0
 80163ea:	77bb      	strb	r3, [r7, #30]
 80163ec:	e00e      	b.n	801640c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80163ee:	89b8      	ldrh	r0, [r7, #12]
 80163f0:	693b      	ldr	r3, [r7, #16]
 80163f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80163f6:	7fbb      	ldrb	r3, [r7, #30]
 80163f8:	4a2a      	ldr	r2, [pc, #168]	; (80164a4 <dhcp_renew+0x12c>)
 80163fa:	5cd3      	ldrb	r3, [r2, r3]
 80163fc:	461a      	mov	r2, r3
 80163fe:	f000 fa91 	bl	8016924 <dhcp_option_byte>
 8016402:	4603      	mov	r3, r0
 8016404:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016406:	7fbb      	ldrb	r3, [r7, #30]
 8016408:	3301      	adds	r3, #1
 801640a:	77bb      	strb	r3, [r7, #30]
 801640c:	7fbb      	ldrb	r3, [r7, #30]
 801640e:	2b02      	cmp	r3, #2
 8016410:	d9ed      	bls.n	80163ee <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016412:	89b8      	ldrh	r0, [r7, #12]
 8016414:	693b      	ldr	r3, [r7, #16]
 8016416:	33f0      	adds	r3, #240	; 0xf0
 8016418:	697a      	ldr	r2, [r7, #20]
 801641a:	4619      	mov	r1, r3
 801641c:	f000 ff96 	bl	801734c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016420:	4b21      	ldr	r3, [pc, #132]	; (80164a8 <dhcp_renew+0x130>)
 8016422:	6818      	ldr	r0, [r3, #0]
 8016424:	69bb      	ldr	r3, [r7, #24]
 8016426:	f103 0218 	add.w	r2, r3, #24
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	9300      	str	r3, [sp, #0]
 801642e:	2343      	movs	r3, #67	; 0x43
 8016430:	6979      	ldr	r1, [r7, #20]
 8016432:	f7fe fe53 	bl	80150dc <udp_sendto_if>
 8016436:	4603      	mov	r3, r0
 8016438:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801643a:	6978      	ldr	r0, [r7, #20]
 801643c:	f7f8 ff10 	bl	800f260 <pbuf_free>
 8016440:	e001      	b.n	8016446 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016442:	23ff      	movs	r3, #255	; 0xff
 8016444:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016446:	69bb      	ldr	r3, [r7, #24]
 8016448:	799b      	ldrb	r3, [r3, #6]
 801644a:	2bff      	cmp	r3, #255	; 0xff
 801644c:	d005      	beq.n	801645a <dhcp_renew+0xe2>
    dhcp->tries++;
 801644e:	69bb      	ldr	r3, [r7, #24]
 8016450:	799b      	ldrb	r3, [r3, #6]
 8016452:	3301      	adds	r3, #1
 8016454:	b2da      	uxtb	r2, r3
 8016456:	69bb      	ldr	r3, [r7, #24]
 8016458:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801645a:	69bb      	ldr	r3, [r7, #24]
 801645c:	799b      	ldrb	r3, [r3, #6]
 801645e:	2b09      	cmp	r3, #9
 8016460:	d80a      	bhi.n	8016478 <dhcp_renew+0x100>
 8016462:	69bb      	ldr	r3, [r7, #24]
 8016464:	799b      	ldrb	r3, [r3, #6]
 8016466:	b29b      	uxth	r3, r3
 8016468:	461a      	mov	r2, r3
 801646a:	0152      	lsls	r2, r2, #5
 801646c:	1ad2      	subs	r2, r2, r3
 801646e:	0092      	lsls	r2, r2, #2
 8016470:	4413      	add	r3, r2
 8016472:	011b      	lsls	r3, r3, #4
 8016474:	b29b      	uxth	r3, r3
 8016476:	e001      	b.n	801647c <dhcp_renew+0x104>
 8016478:	f644 6320 	movw	r3, #20000	; 0x4e20
 801647c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801647e:	89fb      	ldrh	r3, [r7, #14]
 8016480:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016484:	4a09      	ldr	r2, [pc, #36]	; (80164ac <dhcp_renew+0x134>)
 8016486:	fb82 1203 	smull	r1, r2, r2, r3
 801648a:	1152      	asrs	r2, r2, #5
 801648c:	17db      	asrs	r3, r3, #31
 801648e:	1ad3      	subs	r3, r2, r3
 8016490:	b29a      	uxth	r2, r3
 8016492:	69bb      	ldr	r3, [r7, #24]
 8016494:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016496:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801649a:	4618      	mov	r0, r3
 801649c:	3720      	adds	r7, #32
 801649e:	46bd      	mov	sp, r7
 80164a0:	bd80      	pop	{r7, pc}
 80164a2:	bf00      	nop
 80164a4:	2000003c 	.word	0x2000003c
 80164a8:	20008514 	.word	0x20008514
 80164ac:	10624dd3 	.word	0x10624dd3

080164b0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b08a      	sub	sp, #40	; 0x28
 80164b4:	af02      	add	r7, sp, #8
 80164b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164bc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80164be:	2104      	movs	r1, #4
 80164c0:	69b8      	ldr	r0, [r7, #24]
 80164c2:	f000 f9e1 	bl	8016888 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80164c6:	f107 030c 	add.w	r3, r7, #12
 80164ca:	2203      	movs	r2, #3
 80164cc:	69b9      	ldr	r1, [r7, #24]
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f000 fe66 	bl	80171a0 <dhcp_create_msg>
 80164d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80164d6:	697b      	ldr	r3, [r7, #20]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d04c      	beq.n	8016576 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80164dc:	697b      	ldr	r3, [r7, #20]
 80164de:	685b      	ldr	r3, [r3, #4]
 80164e0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80164e2:	89b8      	ldrh	r0, [r7, #12]
 80164e4:	693b      	ldr	r3, [r7, #16]
 80164e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80164ea:	2302      	movs	r3, #2
 80164ec:	2239      	movs	r2, #57	; 0x39
 80164ee:	f000 f9e5 	bl	80168bc <dhcp_option>
 80164f2:	4603      	mov	r3, r0
 80164f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80164f6:	89b8      	ldrh	r0, [r7, #12]
 80164f8:	693b      	ldr	r3, [r7, #16]
 80164fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016502:	461a      	mov	r2, r3
 8016504:	f000 fa34 	bl	8016970 <dhcp_option_short>
 8016508:	4603      	mov	r3, r0
 801650a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801650c:	89b8      	ldrh	r0, [r7, #12]
 801650e:	693b      	ldr	r3, [r7, #16]
 8016510:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016514:	2303      	movs	r3, #3
 8016516:	2237      	movs	r2, #55	; 0x37
 8016518:	f000 f9d0 	bl	80168bc <dhcp_option>
 801651c:	4603      	mov	r3, r0
 801651e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016520:	2300      	movs	r3, #0
 8016522:	77bb      	strb	r3, [r7, #30]
 8016524:	e00e      	b.n	8016544 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016526:	89b8      	ldrh	r0, [r7, #12]
 8016528:	693b      	ldr	r3, [r7, #16]
 801652a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801652e:	7fbb      	ldrb	r3, [r7, #30]
 8016530:	4a29      	ldr	r2, [pc, #164]	; (80165d8 <dhcp_rebind+0x128>)
 8016532:	5cd3      	ldrb	r3, [r2, r3]
 8016534:	461a      	mov	r2, r3
 8016536:	f000 f9f5 	bl	8016924 <dhcp_option_byte>
 801653a:	4603      	mov	r3, r0
 801653c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801653e:	7fbb      	ldrb	r3, [r7, #30]
 8016540:	3301      	adds	r3, #1
 8016542:	77bb      	strb	r3, [r7, #30]
 8016544:	7fbb      	ldrb	r3, [r7, #30]
 8016546:	2b02      	cmp	r3, #2
 8016548:	d9ed      	bls.n	8016526 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801654a:	89b8      	ldrh	r0, [r7, #12]
 801654c:	693b      	ldr	r3, [r7, #16]
 801654e:	33f0      	adds	r3, #240	; 0xf0
 8016550:	697a      	ldr	r2, [r7, #20]
 8016552:	4619      	mov	r1, r3
 8016554:	f000 fefa 	bl	801734c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016558:	4b20      	ldr	r3, [pc, #128]	; (80165dc <dhcp_rebind+0x12c>)
 801655a:	6818      	ldr	r0, [r3, #0]
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	9300      	str	r3, [sp, #0]
 8016560:	2343      	movs	r3, #67	; 0x43
 8016562:	4a1f      	ldr	r2, [pc, #124]	; (80165e0 <dhcp_rebind+0x130>)
 8016564:	6979      	ldr	r1, [r7, #20]
 8016566:	f7fe fdb9 	bl	80150dc <udp_sendto_if>
 801656a:	4603      	mov	r3, r0
 801656c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801656e:	6978      	ldr	r0, [r7, #20]
 8016570:	f7f8 fe76 	bl	800f260 <pbuf_free>
 8016574:	e001      	b.n	801657a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016576:	23ff      	movs	r3, #255	; 0xff
 8016578:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801657a:	69bb      	ldr	r3, [r7, #24]
 801657c:	799b      	ldrb	r3, [r3, #6]
 801657e:	2bff      	cmp	r3, #255	; 0xff
 8016580:	d005      	beq.n	801658e <dhcp_rebind+0xde>
    dhcp->tries++;
 8016582:	69bb      	ldr	r3, [r7, #24]
 8016584:	799b      	ldrb	r3, [r3, #6]
 8016586:	3301      	adds	r3, #1
 8016588:	b2da      	uxtb	r2, r3
 801658a:	69bb      	ldr	r3, [r7, #24]
 801658c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801658e:	69bb      	ldr	r3, [r7, #24]
 8016590:	799b      	ldrb	r3, [r3, #6]
 8016592:	2b09      	cmp	r3, #9
 8016594:	d80a      	bhi.n	80165ac <dhcp_rebind+0xfc>
 8016596:	69bb      	ldr	r3, [r7, #24]
 8016598:	799b      	ldrb	r3, [r3, #6]
 801659a:	b29b      	uxth	r3, r3
 801659c:	461a      	mov	r2, r3
 801659e:	0152      	lsls	r2, r2, #5
 80165a0:	1ad2      	subs	r2, r2, r3
 80165a2:	0092      	lsls	r2, r2, #2
 80165a4:	4413      	add	r3, r2
 80165a6:	00db      	lsls	r3, r3, #3
 80165a8:	b29b      	uxth	r3, r3
 80165aa:	e001      	b.n	80165b0 <dhcp_rebind+0x100>
 80165ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80165b0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80165b2:	89fb      	ldrh	r3, [r7, #14]
 80165b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80165b8:	4a0a      	ldr	r2, [pc, #40]	; (80165e4 <dhcp_rebind+0x134>)
 80165ba:	fb82 1203 	smull	r1, r2, r2, r3
 80165be:	1152      	asrs	r2, r2, #5
 80165c0:	17db      	asrs	r3, r3, #31
 80165c2:	1ad3      	subs	r3, r2, r3
 80165c4:	b29a      	uxth	r2, r3
 80165c6:	69bb      	ldr	r3, [r7, #24]
 80165c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80165ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80165ce:	4618      	mov	r0, r3
 80165d0:	3720      	adds	r7, #32
 80165d2:	46bd      	mov	sp, r7
 80165d4:	bd80      	pop	{r7, pc}
 80165d6:	bf00      	nop
 80165d8:	2000003c 	.word	0x2000003c
 80165dc:	20008514 	.word	0x20008514
 80165e0:	0801eaac 	.word	0x0801eaac
 80165e4:	10624dd3 	.word	0x10624dd3

080165e8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80165e8:	b5b0      	push	{r4, r5, r7, lr}
 80165ea:	b08a      	sub	sp, #40	; 0x28
 80165ec:	af02      	add	r7, sp, #8
 80165ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165f4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80165f6:	2103      	movs	r1, #3
 80165f8:	69b8      	ldr	r0, [r7, #24]
 80165fa:	f000 f945 	bl	8016888 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80165fe:	f107 030c 	add.w	r3, r7, #12
 8016602:	2203      	movs	r2, #3
 8016604:	69b9      	ldr	r1, [r7, #24]
 8016606:	6878      	ldr	r0, [r7, #4]
 8016608:	f000 fdca 	bl	80171a0 <dhcp_create_msg>
 801660c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801660e:	697b      	ldr	r3, [r7, #20]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d066      	beq.n	80166e2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016614:	697b      	ldr	r3, [r7, #20]
 8016616:	685b      	ldr	r3, [r3, #4]
 8016618:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801661a:	89b8      	ldrh	r0, [r7, #12]
 801661c:	693b      	ldr	r3, [r7, #16]
 801661e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016622:	2302      	movs	r3, #2
 8016624:	2239      	movs	r2, #57	; 0x39
 8016626:	f000 f949 	bl	80168bc <dhcp_option>
 801662a:	4603      	mov	r3, r0
 801662c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801662e:	89b8      	ldrh	r0, [r7, #12]
 8016630:	693b      	ldr	r3, [r7, #16]
 8016632:	33f0      	adds	r3, #240	; 0xf0
 8016634:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016638:	4619      	mov	r1, r3
 801663a:	f000 f999 	bl	8016970 <dhcp_option_short>
 801663e:	4603      	mov	r3, r0
 8016640:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016642:	89b8      	ldrh	r0, [r7, #12]
 8016644:	693b      	ldr	r3, [r7, #16]
 8016646:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801664a:	2304      	movs	r3, #4
 801664c:	2232      	movs	r2, #50	; 0x32
 801664e:	f000 f935 	bl	80168bc <dhcp_option>
 8016652:	4603      	mov	r3, r0
 8016654:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016656:	89bc      	ldrh	r4, [r7, #12]
 8016658:	693b      	ldr	r3, [r7, #16]
 801665a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801665e:	69bb      	ldr	r3, [r7, #24]
 8016660:	69db      	ldr	r3, [r3, #28]
 8016662:	4618      	mov	r0, r3
 8016664:	f7f7 fa59 	bl	800db1a <lwip_htonl>
 8016668:	4603      	mov	r3, r0
 801666a:	461a      	mov	r2, r3
 801666c:	4629      	mov	r1, r5
 801666e:	4620      	mov	r0, r4
 8016670:	f000 f9b0 	bl	80169d4 <dhcp_option_long>
 8016674:	4603      	mov	r3, r0
 8016676:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016678:	89b8      	ldrh	r0, [r7, #12]
 801667a:	693b      	ldr	r3, [r7, #16]
 801667c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016680:	2303      	movs	r3, #3
 8016682:	2237      	movs	r2, #55	; 0x37
 8016684:	f000 f91a 	bl	80168bc <dhcp_option>
 8016688:	4603      	mov	r3, r0
 801668a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801668c:	2300      	movs	r3, #0
 801668e:	77bb      	strb	r3, [r7, #30]
 8016690:	e00e      	b.n	80166b0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016692:	89b8      	ldrh	r0, [r7, #12]
 8016694:	693b      	ldr	r3, [r7, #16]
 8016696:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801669a:	7fbb      	ldrb	r3, [r7, #30]
 801669c:	4a29      	ldr	r2, [pc, #164]	; (8016744 <dhcp_reboot+0x15c>)
 801669e:	5cd3      	ldrb	r3, [r2, r3]
 80166a0:	461a      	mov	r2, r3
 80166a2:	f000 f93f 	bl	8016924 <dhcp_option_byte>
 80166a6:	4603      	mov	r3, r0
 80166a8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80166aa:	7fbb      	ldrb	r3, [r7, #30]
 80166ac:	3301      	adds	r3, #1
 80166ae:	77bb      	strb	r3, [r7, #30]
 80166b0:	7fbb      	ldrb	r3, [r7, #30]
 80166b2:	2b02      	cmp	r3, #2
 80166b4:	d9ed      	bls.n	8016692 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80166b6:	89b8      	ldrh	r0, [r7, #12]
 80166b8:	693b      	ldr	r3, [r7, #16]
 80166ba:	33f0      	adds	r3, #240	; 0xf0
 80166bc:	697a      	ldr	r2, [r7, #20]
 80166be:	4619      	mov	r1, r3
 80166c0:	f000 fe44 	bl	801734c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80166c4:	4b20      	ldr	r3, [pc, #128]	; (8016748 <dhcp_reboot+0x160>)
 80166c6:	6818      	ldr	r0, [r3, #0]
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	9300      	str	r3, [sp, #0]
 80166cc:	2343      	movs	r3, #67	; 0x43
 80166ce:	4a1f      	ldr	r2, [pc, #124]	; (801674c <dhcp_reboot+0x164>)
 80166d0:	6979      	ldr	r1, [r7, #20]
 80166d2:	f7fe fd03 	bl	80150dc <udp_sendto_if>
 80166d6:	4603      	mov	r3, r0
 80166d8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80166da:	6978      	ldr	r0, [r7, #20]
 80166dc:	f7f8 fdc0 	bl	800f260 <pbuf_free>
 80166e0:	e001      	b.n	80166e6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80166e2:	23ff      	movs	r3, #255	; 0xff
 80166e4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80166e6:	69bb      	ldr	r3, [r7, #24]
 80166e8:	799b      	ldrb	r3, [r3, #6]
 80166ea:	2bff      	cmp	r3, #255	; 0xff
 80166ec:	d005      	beq.n	80166fa <dhcp_reboot+0x112>
    dhcp->tries++;
 80166ee:	69bb      	ldr	r3, [r7, #24]
 80166f0:	799b      	ldrb	r3, [r3, #6]
 80166f2:	3301      	adds	r3, #1
 80166f4:	b2da      	uxtb	r2, r3
 80166f6:	69bb      	ldr	r3, [r7, #24]
 80166f8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80166fa:	69bb      	ldr	r3, [r7, #24]
 80166fc:	799b      	ldrb	r3, [r3, #6]
 80166fe:	2b09      	cmp	r3, #9
 8016700:	d80a      	bhi.n	8016718 <dhcp_reboot+0x130>
 8016702:	69bb      	ldr	r3, [r7, #24]
 8016704:	799b      	ldrb	r3, [r3, #6]
 8016706:	b29b      	uxth	r3, r3
 8016708:	461a      	mov	r2, r3
 801670a:	0152      	lsls	r2, r2, #5
 801670c:	1ad2      	subs	r2, r2, r3
 801670e:	0092      	lsls	r2, r2, #2
 8016710:	4413      	add	r3, r2
 8016712:	00db      	lsls	r3, r3, #3
 8016714:	b29b      	uxth	r3, r3
 8016716:	e001      	b.n	801671c <dhcp_reboot+0x134>
 8016718:	f242 7310 	movw	r3, #10000	; 0x2710
 801671c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801671e:	89fb      	ldrh	r3, [r7, #14]
 8016720:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016724:	4a0a      	ldr	r2, [pc, #40]	; (8016750 <dhcp_reboot+0x168>)
 8016726:	fb82 1203 	smull	r1, r2, r2, r3
 801672a:	1152      	asrs	r2, r2, #5
 801672c:	17db      	asrs	r3, r3, #31
 801672e:	1ad3      	subs	r3, r2, r3
 8016730:	b29a      	uxth	r2, r3
 8016732:	69bb      	ldr	r3, [r7, #24]
 8016734:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016736:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801673a:	4618      	mov	r0, r3
 801673c:	3720      	adds	r7, #32
 801673e:	46bd      	mov	sp, r7
 8016740:	bdb0      	pop	{r4, r5, r7, pc}
 8016742:	bf00      	nop
 8016744:	2000003c 	.word	0x2000003c
 8016748:	20008514 	.word	0x20008514
 801674c:	0801eaac 	.word	0x0801eaac
 8016750:	10624dd3 	.word	0x10624dd3

08016754 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8016754:	b5b0      	push	{r4, r5, r7, lr}
 8016756:	b08a      	sub	sp, #40	; 0x28
 8016758:	af02      	add	r7, sp, #8
 801675a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016760:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8016762:	69fb      	ldr	r3, [r7, #28]
 8016764:	2b00      	cmp	r3, #0
 8016766:	f000 8084 	beq.w	8016872 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801676a:	69fb      	ldr	r3, [r7, #28]
 801676c:	795b      	ldrb	r3, [r3, #5]
 801676e:	2b00      	cmp	r3, #0
 8016770:	f000 8081 	beq.w	8016876 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016774:	69fb      	ldr	r3, [r7, #28]
 8016776:	699b      	ldr	r3, [r3, #24]
 8016778:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801677a:	69fb      	ldr	r3, [r7, #28]
 801677c:	2200      	movs	r2, #0
 801677e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8016780:	69fb      	ldr	r3, [r7, #28]
 8016782:	2200      	movs	r2, #0
 8016784:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016786:	69fb      	ldr	r3, [r7, #28]
 8016788:	2200      	movs	r2, #0
 801678a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801678c:	69fb      	ldr	r3, [r7, #28]
 801678e:	2200      	movs	r2, #0
 8016790:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8016792:	69fb      	ldr	r3, [r7, #28]
 8016794:	2200      	movs	r2, #0
 8016796:	631a      	str	r2, [r3, #48]	; 0x30
 8016798:	69fb      	ldr	r3, [r7, #28]
 801679a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801679c:	69fb      	ldr	r3, [r7, #28]
 801679e:	62da      	str	r2, [r3, #44]	; 0x2c
 80167a0:	69fb      	ldr	r3, [r7, #28]
 80167a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167a4:	69fb      	ldr	r3, [r7, #28]
 80167a6:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80167a8:	69fb      	ldr	r3, [r7, #28]
 80167aa:	2200      	movs	r2, #0
 80167ac:	829a      	strh	r2, [r3, #20]
 80167ae:	69fb      	ldr	r3, [r7, #28]
 80167b0:	8a9a      	ldrh	r2, [r3, #20]
 80167b2:	69fb      	ldr	r3, [r7, #28]
 80167b4:	825a      	strh	r2, [r3, #18]
 80167b6:	69fb      	ldr	r3, [r7, #28]
 80167b8:	8a5a      	ldrh	r2, [r3, #18]
 80167ba:	69fb      	ldr	r3, [r7, #28]
 80167bc:	821a      	strh	r2, [r3, #16]
 80167be:	69fb      	ldr	r3, [r7, #28]
 80167c0:	8a1a      	ldrh	r2, [r3, #16]
 80167c2:	69fb      	ldr	r3, [r7, #28]
 80167c4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80167c6:	6878      	ldr	r0, [r7, #4]
 80167c8:	f000 fdee 	bl	80173a8 <dhcp_supplied_address>
 80167cc:	4603      	mov	r3, r0
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d03b      	beq.n	801684a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80167d2:	f107 030e 	add.w	r3, r7, #14
 80167d6:	2207      	movs	r2, #7
 80167d8:	69f9      	ldr	r1, [r7, #28]
 80167da:	6878      	ldr	r0, [r7, #4]
 80167dc:	f000 fce0 	bl	80171a0 <dhcp_create_msg>
 80167e0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80167e2:	69bb      	ldr	r3, [r7, #24]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d030      	beq.n	801684a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80167e8:	69bb      	ldr	r3, [r7, #24]
 80167ea:	685b      	ldr	r3, [r3, #4]
 80167ec:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80167ee:	89f8      	ldrh	r0, [r7, #14]
 80167f0:	697b      	ldr	r3, [r7, #20]
 80167f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167f6:	2304      	movs	r3, #4
 80167f8:	2236      	movs	r2, #54	; 0x36
 80167fa:	f000 f85f 	bl	80168bc <dhcp_option>
 80167fe:	4603      	mov	r3, r0
 8016800:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8016802:	89fc      	ldrh	r4, [r7, #14]
 8016804:	697b      	ldr	r3, [r7, #20]
 8016806:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	4618      	mov	r0, r3
 801680e:	f7f7 f984 	bl	800db1a <lwip_htonl>
 8016812:	4603      	mov	r3, r0
 8016814:	461a      	mov	r2, r3
 8016816:	4629      	mov	r1, r5
 8016818:	4620      	mov	r0, r4
 801681a:	f000 f8db 	bl	80169d4 <dhcp_option_long>
 801681e:	4603      	mov	r3, r0
 8016820:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016822:	89f8      	ldrh	r0, [r7, #14]
 8016824:	697b      	ldr	r3, [r7, #20]
 8016826:	33f0      	adds	r3, #240	; 0xf0
 8016828:	69ba      	ldr	r2, [r7, #24]
 801682a:	4619      	mov	r1, r3
 801682c:	f000 fd8e 	bl	801734c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016830:	4b13      	ldr	r3, [pc, #76]	; (8016880 <dhcp_release_and_stop+0x12c>)
 8016832:	6818      	ldr	r0, [r3, #0]
 8016834:	f107 0210 	add.w	r2, r7, #16
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	9300      	str	r3, [sp, #0]
 801683c:	2343      	movs	r3, #67	; 0x43
 801683e:	69b9      	ldr	r1, [r7, #24]
 8016840:	f7fe fc4c 	bl	80150dc <udp_sendto_if>
      pbuf_free(p_out);
 8016844:	69b8      	ldr	r0, [r7, #24]
 8016846:	f7f8 fd0b 	bl	800f260 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801684a:	4b0e      	ldr	r3, [pc, #56]	; (8016884 <dhcp_release_and_stop+0x130>)
 801684c:	4a0d      	ldr	r2, [pc, #52]	; (8016884 <dhcp_release_and_stop+0x130>)
 801684e:	490d      	ldr	r1, [pc, #52]	; (8016884 <dhcp_release_and_stop+0x130>)
 8016850:	6878      	ldr	r0, [r7, #4]
 8016852:	f7f7 fff7 	bl	800e844 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8016856:	2100      	movs	r1, #0
 8016858:	69f8      	ldr	r0, [r7, #28]
 801685a:	f000 f815 	bl	8016888 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801685e:	69fb      	ldr	r3, [r7, #28]
 8016860:	791b      	ldrb	r3, [r3, #4]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d008      	beq.n	8016878 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016866:	f7fe ff85 	bl	8015774 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801686a:	69fb      	ldr	r3, [r7, #28]
 801686c:	2200      	movs	r2, #0
 801686e:	711a      	strb	r2, [r3, #4]
 8016870:	e002      	b.n	8016878 <dhcp_release_and_stop+0x124>
    return;
 8016872:	bf00      	nop
 8016874:	e000      	b.n	8016878 <dhcp_release_and_stop+0x124>
    return;
 8016876:	bf00      	nop
  }
}
 8016878:	3720      	adds	r7, #32
 801687a:	46bd      	mov	sp, r7
 801687c:	bdb0      	pop	{r4, r5, r7, pc}
 801687e:	bf00      	nop
 8016880:	20008514 	.word	0x20008514
 8016884:	0801eaa8 	.word	0x0801eaa8

08016888 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016888:	b480      	push	{r7}
 801688a:	b083      	sub	sp, #12
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
 8016890:	460b      	mov	r3, r1
 8016892:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	795b      	ldrb	r3, [r3, #5]
 8016898:	78fa      	ldrb	r2, [r7, #3]
 801689a:	429a      	cmp	r2, r3
 801689c:	d008      	beq.n	80168b0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	78fa      	ldrb	r2, [r7, #3]
 80168a2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2200      	movs	r2, #0
 80168a8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	2200      	movs	r2, #0
 80168ae:	811a      	strh	r2, [r3, #8]
  }
}
 80168b0:	bf00      	nop
 80168b2:	370c      	adds	r7, #12
 80168b4:	46bd      	mov	sp, r7
 80168b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ba:	4770      	bx	lr

080168bc <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b082      	sub	sp, #8
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	6039      	str	r1, [r7, #0]
 80168c4:	4611      	mov	r1, r2
 80168c6:	461a      	mov	r2, r3
 80168c8:	4603      	mov	r3, r0
 80168ca:	80fb      	strh	r3, [r7, #6]
 80168cc:	460b      	mov	r3, r1
 80168ce:	717b      	strb	r3, [r7, #5]
 80168d0:	4613      	mov	r3, r2
 80168d2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80168d4:	88fa      	ldrh	r2, [r7, #6]
 80168d6:	793b      	ldrb	r3, [r7, #4]
 80168d8:	4413      	add	r3, r2
 80168da:	3302      	adds	r3, #2
 80168dc:	2b44      	cmp	r3, #68	; 0x44
 80168de:	d906      	bls.n	80168ee <dhcp_option+0x32>
 80168e0:	4b0d      	ldr	r3, [pc, #52]	; (8016918 <dhcp_option+0x5c>)
 80168e2:	f240 529a 	movw	r2, #1434	; 0x59a
 80168e6:	490d      	ldr	r1, [pc, #52]	; (801691c <dhcp_option+0x60>)
 80168e8:	480d      	ldr	r0, [pc, #52]	; (8016920 <dhcp_option+0x64>)
 80168ea:	f003 fdb3 	bl	801a454 <iprintf>
  options[options_out_len++] = option_type;
 80168ee:	88fb      	ldrh	r3, [r7, #6]
 80168f0:	1c5a      	adds	r2, r3, #1
 80168f2:	80fa      	strh	r2, [r7, #6]
 80168f4:	461a      	mov	r2, r3
 80168f6:	683b      	ldr	r3, [r7, #0]
 80168f8:	4413      	add	r3, r2
 80168fa:	797a      	ldrb	r2, [r7, #5]
 80168fc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80168fe:	88fb      	ldrh	r3, [r7, #6]
 8016900:	1c5a      	adds	r2, r3, #1
 8016902:	80fa      	strh	r2, [r7, #6]
 8016904:	461a      	mov	r2, r3
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	4413      	add	r3, r2
 801690a:	793a      	ldrb	r2, [r7, #4]
 801690c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801690e:	88fb      	ldrh	r3, [r7, #6]
}
 8016910:	4618      	mov	r0, r3
 8016912:	3708      	adds	r7, #8
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}
 8016918:	0801def8 	.word	0x0801def8
 801691c:	0801e08c 	.word	0x0801e08c
 8016920:	0801df58 	.word	0x0801df58

08016924 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b082      	sub	sp, #8
 8016928:	af00      	add	r7, sp, #0
 801692a:	4603      	mov	r3, r0
 801692c:	6039      	str	r1, [r7, #0]
 801692e:	80fb      	strh	r3, [r7, #6]
 8016930:	4613      	mov	r3, r2
 8016932:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016934:	88fb      	ldrh	r3, [r7, #6]
 8016936:	2b43      	cmp	r3, #67	; 0x43
 8016938:	d906      	bls.n	8016948 <dhcp_option_byte+0x24>
 801693a:	4b0a      	ldr	r3, [pc, #40]	; (8016964 <dhcp_option_byte+0x40>)
 801693c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8016940:	4909      	ldr	r1, [pc, #36]	; (8016968 <dhcp_option_byte+0x44>)
 8016942:	480a      	ldr	r0, [pc, #40]	; (801696c <dhcp_option_byte+0x48>)
 8016944:	f003 fd86 	bl	801a454 <iprintf>
  options[options_out_len++] = value;
 8016948:	88fb      	ldrh	r3, [r7, #6]
 801694a:	1c5a      	adds	r2, r3, #1
 801694c:	80fa      	strh	r2, [r7, #6]
 801694e:	461a      	mov	r2, r3
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	4413      	add	r3, r2
 8016954:	797a      	ldrb	r2, [r7, #5]
 8016956:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016958:	88fb      	ldrh	r3, [r7, #6]
}
 801695a:	4618      	mov	r0, r3
 801695c:	3708      	adds	r7, #8
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}
 8016962:	bf00      	nop
 8016964:	0801def8 	.word	0x0801def8
 8016968:	0801e0d0 	.word	0x0801e0d0
 801696c:	0801df58 	.word	0x0801df58

08016970 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
 8016976:	4603      	mov	r3, r0
 8016978:	6039      	str	r1, [r7, #0]
 801697a:	80fb      	strh	r3, [r7, #6]
 801697c:	4613      	mov	r3, r2
 801697e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016980:	88fb      	ldrh	r3, [r7, #6]
 8016982:	3302      	adds	r3, #2
 8016984:	2b44      	cmp	r3, #68	; 0x44
 8016986:	d906      	bls.n	8016996 <dhcp_option_short+0x26>
 8016988:	4b0f      	ldr	r3, [pc, #60]	; (80169c8 <dhcp_option_short+0x58>)
 801698a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801698e:	490f      	ldr	r1, [pc, #60]	; (80169cc <dhcp_option_short+0x5c>)
 8016990:	480f      	ldr	r0, [pc, #60]	; (80169d0 <dhcp_option_short+0x60>)
 8016992:	f003 fd5f 	bl	801a454 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016996:	88bb      	ldrh	r3, [r7, #4]
 8016998:	0a1b      	lsrs	r3, r3, #8
 801699a:	b29a      	uxth	r2, r3
 801699c:	88fb      	ldrh	r3, [r7, #6]
 801699e:	1c59      	adds	r1, r3, #1
 80169a0:	80f9      	strh	r1, [r7, #6]
 80169a2:	4619      	mov	r1, r3
 80169a4:	683b      	ldr	r3, [r7, #0]
 80169a6:	440b      	add	r3, r1
 80169a8:	b2d2      	uxtb	r2, r2
 80169aa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80169ac:	88fb      	ldrh	r3, [r7, #6]
 80169ae:	1c5a      	adds	r2, r3, #1
 80169b0:	80fa      	strh	r2, [r7, #6]
 80169b2:	461a      	mov	r2, r3
 80169b4:	683b      	ldr	r3, [r7, #0]
 80169b6:	4413      	add	r3, r2
 80169b8:	88ba      	ldrh	r2, [r7, #4]
 80169ba:	b2d2      	uxtb	r2, r2
 80169bc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80169be:	88fb      	ldrh	r3, [r7, #6]
}
 80169c0:	4618      	mov	r0, r3
 80169c2:	3708      	adds	r7, #8
 80169c4:	46bd      	mov	sp, r7
 80169c6:	bd80      	pop	{r7, pc}
 80169c8:	0801def8 	.word	0x0801def8
 80169cc:	0801e108 	.word	0x0801e108
 80169d0:	0801df58 	.word	0x0801df58

080169d4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b084      	sub	sp, #16
 80169d8:	af00      	add	r7, sp, #0
 80169da:	4603      	mov	r3, r0
 80169dc:	60b9      	str	r1, [r7, #8]
 80169de:	607a      	str	r2, [r7, #4]
 80169e0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80169e2:	89fb      	ldrh	r3, [r7, #14]
 80169e4:	3304      	adds	r3, #4
 80169e6:	2b44      	cmp	r3, #68	; 0x44
 80169e8:	d906      	bls.n	80169f8 <dhcp_option_long+0x24>
 80169ea:	4b19      	ldr	r3, [pc, #100]	; (8016a50 <dhcp_option_long+0x7c>)
 80169ec:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80169f0:	4918      	ldr	r1, [pc, #96]	; (8016a54 <dhcp_option_long+0x80>)
 80169f2:	4819      	ldr	r0, [pc, #100]	; (8016a58 <dhcp_option_long+0x84>)
 80169f4:	f003 fd2e 	bl	801a454 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	0e1a      	lsrs	r2, r3, #24
 80169fc:	89fb      	ldrh	r3, [r7, #14]
 80169fe:	1c59      	adds	r1, r3, #1
 8016a00:	81f9      	strh	r1, [r7, #14]
 8016a02:	4619      	mov	r1, r3
 8016a04:	68bb      	ldr	r3, [r7, #8]
 8016a06:	440b      	add	r3, r1
 8016a08:	b2d2      	uxtb	r2, r2
 8016a0a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	0c1a      	lsrs	r2, r3, #16
 8016a10:	89fb      	ldrh	r3, [r7, #14]
 8016a12:	1c59      	adds	r1, r3, #1
 8016a14:	81f9      	strh	r1, [r7, #14]
 8016a16:	4619      	mov	r1, r3
 8016a18:	68bb      	ldr	r3, [r7, #8]
 8016a1a:	440b      	add	r3, r1
 8016a1c:	b2d2      	uxtb	r2, r2
 8016a1e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	0a1a      	lsrs	r2, r3, #8
 8016a24:	89fb      	ldrh	r3, [r7, #14]
 8016a26:	1c59      	adds	r1, r3, #1
 8016a28:	81f9      	strh	r1, [r7, #14]
 8016a2a:	4619      	mov	r1, r3
 8016a2c:	68bb      	ldr	r3, [r7, #8]
 8016a2e:	440b      	add	r3, r1
 8016a30:	b2d2      	uxtb	r2, r2
 8016a32:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016a34:	89fb      	ldrh	r3, [r7, #14]
 8016a36:	1c5a      	adds	r2, r3, #1
 8016a38:	81fa      	strh	r2, [r7, #14]
 8016a3a:	461a      	mov	r2, r3
 8016a3c:	68bb      	ldr	r3, [r7, #8]
 8016a3e:	4413      	add	r3, r2
 8016a40:	687a      	ldr	r2, [r7, #4]
 8016a42:	b2d2      	uxtb	r2, r2
 8016a44:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016a46:	89fb      	ldrh	r3, [r7, #14]
}
 8016a48:	4618      	mov	r0, r3
 8016a4a:	3710      	adds	r7, #16
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}
 8016a50:	0801def8 	.word	0x0801def8
 8016a54:	0801e144 	.word	0x0801e144
 8016a58:	0801df58 	.word	0x0801df58

08016a5c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b090      	sub	sp, #64	; 0x40
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
 8016a64:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8016a66:	2300      	movs	r3, #0
 8016a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8016a6e:	2208      	movs	r2, #8
 8016a70:	2100      	movs	r1, #0
 8016a72:	48be      	ldr	r0, [pc, #760]	; (8016d6c <dhcp_parse_reply+0x310>)
 8016a74:	f003 fc3c 	bl	801a2f0 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	895b      	ldrh	r3, [r3, #10]
 8016a7c:	2b2b      	cmp	r3, #43	; 0x2b
 8016a7e:	d802      	bhi.n	8016a86 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8016a80:	f06f 0301 	mvn.w	r3, #1
 8016a84:	e2a8      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	685b      	ldr	r3, [r3, #4]
 8016a8a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016a8c:	23f0      	movs	r3, #240	; 0xf0
 8016a8e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	891b      	ldrh	r3, [r3, #8]
 8016a94:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8016a9a:	e00c      	b.n	8016ab6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8016a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a9e:	895b      	ldrh	r3, [r3, #10]
 8016aa0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016aa2:	1ad3      	subs	r3, r2, r3
 8016aa4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8016aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aa8:	895b      	ldrh	r3, [r3, #10]
 8016aaa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8016aac:	1ad3      	subs	r3, r2, r3
 8016aae:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8016ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8016ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d004      	beq.n	8016ac6 <dhcp_parse_reply+0x6a>
 8016abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016abe:	895b      	ldrh	r3, [r3, #10]
 8016ac0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016ac2:	429a      	cmp	r2, r3
 8016ac4:	d2ea      	bcs.n	8016a9c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8016ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d102      	bne.n	8016ad2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8016acc:	f06f 0301 	mvn.w	r3, #1
 8016ad0:	e282      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8016ad2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016ad4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8016ad6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016ad8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8016ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016adc:	685b      	ldr	r3, [r3, #4]
 8016ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016ae0:	e23a      	b.n	8016f58 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8016ae2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016ae4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016ae6:	4413      	add	r3, r2
 8016ae8:	781b      	ldrb	r3, [r3, #0]
 8016aea:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8016aec:	2300      	movs	r3, #0
 8016aee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8016af2:	f04f 33ff 	mov.w	r3, #4294967295
 8016af6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8016af8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016afa:	3302      	adds	r3, #2
 8016afc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8016afe:	8bfa      	ldrh	r2, [r7, #30]
 8016b00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016b02:	429a      	cmp	r2, r3
 8016b04:	d202      	bcs.n	8016b0c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8016b06:	f06f 0301 	mvn.w	r3, #1
 8016b0a:	e265      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8016b0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016b0e:	3301      	adds	r3, #1
 8016b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b12:	8952      	ldrh	r2, [r2, #10]
 8016b14:	4293      	cmp	r3, r2
 8016b16:	da07      	bge.n	8016b28 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8016b18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016b1a:	3301      	adds	r3, #1
 8016b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016b1e:	4413      	add	r3, r2
 8016b20:	781b      	ldrb	r3, [r3, #0]
 8016b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b26:	e00b      	b.n	8016b40 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8016b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d004      	beq.n	8016b3a <dhcp_parse_reply+0xde>
 8016b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	685b      	ldr	r3, [r3, #4]
 8016b36:	781b      	ldrb	r3, [r3, #0]
 8016b38:	e000      	b.n	8016b3c <dhcp_parse_reply+0xe0>
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8016b48:	7dfb      	ldrb	r3, [r7, #23]
 8016b4a:	2b3b      	cmp	r3, #59	; 0x3b
 8016b4c:	f200 812d 	bhi.w	8016daa <dhcp_parse_reply+0x34e>
 8016b50:	a201      	add	r2, pc, #4	; (adr r2, 8016b58 <dhcp_parse_reply+0xfc>)
 8016b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b56:	bf00      	nop
 8016b58:	08016c49 	.word	0x08016c49
 8016b5c:	08016c59 	.word	0x08016c59
 8016b60:	08016dab 	.word	0x08016dab
 8016b64:	08016c7b 	.word	0x08016c7b
 8016b68:	08016dab 	.word	0x08016dab
 8016b6c:	08016dab 	.word	0x08016dab
 8016b70:	08016dab 	.word	0x08016dab
 8016b74:	08016dab 	.word	0x08016dab
 8016b78:	08016dab 	.word	0x08016dab
 8016b7c:	08016dab 	.word	0x08016dab
 8016b80:	08016dab 	.word	0x08016dab
 8016b84:	08016dab 	.word	0x08016dab
 8016b88:	08016dab 	.word	0x08016dab
 8016b8c:	08016dab 	.word	0x08016dab
 8016b90:	08016dab 	.word	0x08016dab
 8016b94:	08016dab 	.word	0x08016dab
 8016b98:	08016dab 	.word	0x08016dab
 8016b9c:	08016dab 	.word	0x08016dab
 8016ba0:	08016dab 	.word	0x08016dab
 8016ba4:	08016dab 	.word	0x08016dab
 8016ba8:	08016dab 	.word	0x08016dab
 8016bac:	08016dab 	.word	0x08016dab
 8016bb0:	08016dab 	.word	0x08016dab
 8016bb4:	08016dab 	.word	0x08016dab
 8016bb8:	08016dab 	.word	0x08016dab
 8016bbc:	08016dab 	.word	0x08016dab
 8016bc0:	08016dab 	.word	0x08016dab
 8016bc4:	08016dab 	.word	0x08016dab
 8016bc8:	08016dab 	.word	0x08016dab
 8016bcc:	08016dab 	.word	0x08016dab
 8016bd0:	08016dab 	.word	0x08016dab
 8016bd4:	08016dab 	.word	0x08016dab
 8016bd8:	08016dab 	.word	0x08016dab
 8016bdc:	08016dab 	.word	0x08016dab
 8016be0:	08016dab 	.word	0x08016dab
 8016be4:	08016dab 	.word	0x08016dab
 8016be8:	08016dab 	.word	0x08016dab
 8016bec:	08016dab 	.word	0x08016dab
 8016bf0:	08016dab 	.word	0x08016dab
 8016bf4:	08016dab 	.word	0x08016dab
 8016bf8:	08016dab 	.word	0x08016dab
 8016bfc:	08016dab 	.word	0x08016dab
 8016c00:	08016dab 	.word	0x08016dab
 8016c04:	08016dab 	.word	0x08016dab
 8016c08:	08016dab 	.word	0x08016dab
 8016c0c:	08016dab 	.word	0x08016dab
 8016c10:	08016dab 	.word	0x08016dab
 8016c14:	08016dab 	.word	0x08016dab
 8016c18:	08016dab 	.word	0x08016dab
 8016c1c:	08016dab 	.word	0x08016dab
 8016c20:	08016dab 	.word	0x08016dab
 8016c24:	08016ca7 	.word	0x08016ca7
 8016c28:	08016cc9 	.word	0x08016cc9
 8016c2c:	08016d05 	.word	0x08016d05
 8016c30:	08016d27 	.word	0x08016d27
 8016c34:	08016dab 	.word	0x08016dab
 8016c38:	08016dab 	.word	0x08016dab
 8016c3c:	08016dab 	.word	0x08016dab
 8016c40:	08016d49 	.word	0x08016d49
 8016c44:	08016d89 	.word	0x08016d89
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8016c48:	2300      	movs	r3, #0
 8016c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8016c56:	e0ac      	b.n	8016db2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c5c:	2b04      	cmp	r3, #4
 8016c5e:	d009      	beq.n	8016c74 <dhcp_parse_reply+0x218>
 8016c60:	4b43      	ldr	r3, [pc, #268]	; (8016d70 <dhcp_parse_reply+0x314>)
 8016c62:	f240 622e 	movw	r2, #1582	; 0x62e
 8016c66:	4943      	ldr	r1, [pc, #268]	; (8016d74 <dhcp_parse_reply+0x318>)
 8016c68:	4843      	ldr	r0, [pc, #268]	; (8016d78 <dhcp_parse_reply+0x31c>)
 8016c6a:	f003 fbf3 	bl	801a454 <iprintf>
 8016c6e:	f06f 0305 	mvn.w	r3, #5
 8016c72:	e1b1      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8016c74:	2306      	movs	r3, #6
 8016c76:	623b      	str	r3, [r7, #32]
        break;
 8016c78:	e09b      	b.n	8016db2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8016c7a:	2304      	movs	r3, #4
 8016c7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016c80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016c84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c88:	429a      	cmp	r2, r3
 8016c8a:	d209      	bcs.n	8016ca0 <dhcp_parse_reply+0x244>
 8016c8c:	4b38      	ldr	r3, [pc, #224]	; (8016d70 <dhcp_parse_reply+0x314>)
 8016c8e:	f240 6233 	movw	r2, #1587	; 0x633
 8016c92:	493a      	ldr	r1, [pc, #232]	; (8016d7c <dhcp_parse_reply+0x320>)
 8016c94:	4838      	ldr	r0, [pc, #224]	; (8016d78 <dhcp_parse_reply+0x31c>)
 8016c96:	f003 fbdd 	bl	801a454 <iprintf>
 8016c9a:	f06f 0305 	mvn.w	r3, #5
 8016c9e:	e19b      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8016ca0:	2307      	movs	r3, #7
 8016ca2:	623b      	str	r3, [r7, #32]
        break;
 8016ca4:	e085      	b.n	8016db2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016caa:	2b04      	cmp	r3, #4
 8016cac:	d009      	beq.n	8016cc2 <dhcp_parse_reply+0x266>
 8016cae:	4b30      	ldr	r3, [pc, #192]	; (8016d70 <dhcp_parse_reply+0x314>)
 8016cb0:	f240 6241 	movw	r2, #1601	; 0x641
 8016cb4:	492f      	ldr	r1, [pc, #188]	; (8016d74 <dhcp_parse_reply+0x318>)
 8016cb6:	4830      	ldr	r0, [pc, #192]	; (8016d78 <dhcp_parse_reply+0x31c>)
 8016cb8:	f003 fbcc 	bl	801a454 <iprintf>
 8016cbc:	f06f 0305 	mvn.w	r3, #5
 8016cc0:	e18a      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8016cc2:	2303      	movs	r3, #3
 8016cc4:	623b      	str	r3, [r7, #32]
        break;
 8016cc6:	e074      	b.n	8016db2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ccc:	2b01      	cmp	r3, #1
 8016cce:	d009      	beq.n	8016ce4 <dhcp_parse_reply+0x288>
 8016cd0:	4b27      	ldr	r3, [pc, #156]	; (8016d70 <dhcp_parse_reply+0x314>)
 8016cd2:	f240 624f 	movw	r2, #1615	; 0x64f
 8016cd6:	492a      	ldr	r1, [pc, #168]	; (8016d80 <dhcp_parse_reply+0x324>)
 8016cd8:	4827      	ldr	r0, [pc, #156]	; (8016d78 <dhcp_parse_reply+0x31c>)
 8016cda:	f003 fbbb 	bl	801a454 <iprintf>
 8016cde:	f06f 0305 	mvn.w	r3, #5
 8016ce2:	e179      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8016ce4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016ce6:	2bf0      	cmp	r3, #240	; 0xf0
 8016ce8:	d009      	beq.n	8016cfe <dhcp_parse_reply+0x2a2>
 8016cea:	4b21      	ldr	r3, [pc, #132]	; (8016d70 <dhcp_parse_reply+0x314>)
 8016cec:	f240 6251 	movw	r2, #1617	; 0x651
 8016cf0:	4924      	ldr	r1, [pc, #144]	; (8016d84 <dhcp_parse_reply+0x328>)
 8016cf2:	4821      	ldr	r0, [pc, #132]	; (8016d78 <dhcp_parse_reply+0x31c>)
 8016cf4:	f003 fbae 	bl	801a454 <iprintf>
 8016cf8:	f06f 0305 	mvn.w	r3, #5
 8016cfc:	e16c      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8016cfe:	2300      	movs	r3, #0
 8016d00:	623b      	str	r3, [r7, #32]
        break;
 8016d02:	e056      	b.n	8016db2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d08:	2b01      	cmp	r3, #1
 8016d0a:	d009      	beq.n	8016d20 <dhcp_parse_reply+0x2c4>
 8016d0c:	4b18      	ldr	r3, [pc, #96]	; (8016d70 <dhcp_parse_reply+0x314>)
 8016d0e:	f240 6255 	movw	r2, #1621	; 0x655
 8016d12:	491b      	ldr	r1, [pc, #108]	; (8016d80 <dhcp_parse_reply+0x324>)
 8016d14:	4818      	ldr	r0, [pc, #96]	; (8016d78 <dhcp_parse_reply+0x31c>)
 8016d16:	f003 fb9d 	bl	801a454 <iprintf>
 8016d1a:	f06f 0305 	mvn.w	r3, #5
 8016d1e:	e15b      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8016d20:	2301      	movs	r3, #1
 8016d22:	623b      	str	r3, [r7, #32]
        break;
 8016d24:	e045      	b.n	8016db2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d2a:	2b04      	cmp	r3, #4
 8016d2c:	d009      	beq.n	8016d42 <dhcp_parse_reply+0x2e6>
 8016d2e:	4b10      	ldr	r3, [pc, #64]	; (8016d70 <dhcp_parse_reply+0x314>)
 8016d30:	f240 6259 	movw	r2, #1625	; 0x659
 8016d34:	490f      	ldr	r1, [pc, #60]	; (8016d74 <dhcp_parse_reply+0x318>)
 8016d36:	4810      	ldr	r0, [pc, #64]	; (8016d78 <dhcp_parse_reply+0x31c>)
 8016d38:	f003 fb8c 	bl	801a454 <iprintf>
 8016d3c:	f06f 0305 	mvn.w	r3, #5
 8016d40:	e14a      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8016d42:	2302      	movs	r3, #2
 8016d44:	623b      	str	r3, [r7, #32]
        break;
 8016d46:	e034      	b.n	8016db2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d4c:	2b04      	cmp	r3, #4
 8016d4e:	d009      	beq.n	8016d64 <dhcp_parse_reply+0x308>
 8016d50:	4b07      	ldr	r3, [pc, #28]	; (8016d70 <dhcp_parse_reply+0x314>)
 8016d52:	f240 625d 	movw	r2, #1629	; 0x65d
 8016d56:	4907      	ldr	r1, [pc, #28]	; (8016d74 <dhcp_parse_reply+0x318>)
 8016d58:	4807      	ldr	r0, [pc, #28]	; (8016d78 <dhcp_parse_reply+0x31c>)
 8016d5a:	f003 fb7b 	bl	801a454 <iprintf>
 8016d5e:	f06f 0305 	mvn.w	r3, #5
 8016d62:	e139      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016d64:	2304      	movs	r3, #4
 8016d66:	623b      	str	r3, [r7, #32]
        break;
 8016d68:	e023      	b.n	8016db2 <dhcp_parse_reply+0x356>
 8016d6a:	bf00      	nop
 8016d6c:	2000f3b0 	.word	0x2000f3b0
 8016d70:	0801def8 	.word	0x0801def8
 8016d74:	0801e180 	.word	0x0801e180
 8016d78:	0801df58 	.word	0x0801df58
 8016d7c:	0801e18c 	.word	0x0801e18c
 8016d80:	0801e1a0 	.word	0x0801e1a0
 8016d84:	0801e1ac 	.word	0x0801e1ac
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d8c:	2b04      	cmp	r3, #4
 8016d8e:	d009      	beq.n	8016da4 <dhcp_parse_reply+0x348>
 8016d90:	4b93      	ldr	r3, [pc, #588]	; (8016fe0 <dhcp_parse_reply+0x584>)
 8016d92:	f240 6261 	movw	r2, #1633	; 0x661
 8016d96:	4993      	ldr	r1, [pc, #588]	; (8016fe4 <dhcp_parse_reply+0x588>)
 8016d98:	4893      	ldr	r0, [pc, #588]	; (8016fe8 <dhcp_parse_reply+0x58c>)
 8016d9a:	f003 fb5b 	bl	801a454 <iprintf>
 8016d9e:	f06f 0305 	mvn.w	r3, #5
 8016da2:	e119      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8016da4:	2305      	movs	r3, #5
 8016da6:	623b      	str	r3, [r7, #32]
        break;
 8016da8:	e003      	b.n	8016db2 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8016daa:	2300      	movs	r3, #0
 8016dac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8016db0:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8016db2:	7dfb      	ldrb	r3, [r7, #23]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d103      	bne.n	8016dc0 <dhcp_parse_reply+0x364>
      offset++;
 8016db8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016dba:	3301      	adds	r3, #1
 8016dbc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8016dbe:	e0a1      	b.n	8016f04 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8016dc0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dc6:	4413      	add	r3, r2
 8016dc8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8016dcc:	4293      	cmp	r3, r2
 8016dce:	dd02      	ble.n	8016dd6 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8016dd0:	f06f 0301 	mvn.w	r3, #1
 8016dd4:	e100      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8016dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dda:	b29a      	uxth	r2, r3
 8016ddc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016dde:	4413      	add	r3, r2
 8016de0:	b29b      	uxth	r3, r3
 8016de2:	3302      	adds	r3, #2
 8016de4:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8016de6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	f000 808a 	beq.w	8016f04 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8016df0:	2300      	movs	r3, #0
 8016df2:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8016df4:	6a3b      	ldr	r3, [r7, #32]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	db02      	blt.n	8016e00 <dhcp_parse_reply+0x3a4>
 8016dfa:	6a3b      	ldr	r3, [r7, #32]
 8016dfc:	2b07      	cmp	r3, #7
 8016dfe:	dd06      	ble.n	8016e0e <dhcp_parse_reply+0x3b2>
 8016e00:	4b77      	ldr	r3, [pc, #476]	; (8016fe0 <dhcp_parse_reply+0x584>)
 8016e02:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8016e06:	4979      	ldr	r1, [pc, #484]	; (8016fec <dhcp_parse_reply+0x590>)
 8016e08:	4877      	ldr	r0, [pc, #476]	; (8016fe8 <dhcp_parse_reply+0x58c>)
 8016e0a:	f003 fb23 	bl	801a454 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8016e0e:	4a78      	ldr	r2, [pc, #480]	; (8016ff0 <dhcp_parse_reply+0x594>)
 8016e10:	6a3b      	ldr	r3, [r7, #32]
 8016e12:	4413      	add	r3, r2
 8016e14:	781b      	ldrb	r3, [r3, #0]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d174      	bne.n	8016f04 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8016e1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e1e:	2b04      	cmp	r3, #4
 8016e20:	bf28      	it	cs
 8016e22:	2304      	movcs	r3, #4
 8016e24:	b2db      	uxtb	r3, r3
 8016e26:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8016e28:	8bfb      	ldrh	r3, [r7, #30]
 8016e2a:	8aba      	ldrh	r2, [r7, #20]
 8016e2c:	f107 0108 	add.w	r1, r7, #8
 8016e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e32:	f7f8 fc1b 	bl	800f66c <pbuf_copy_partial>
 8016e36:	4603      	mov	r3, r0
 8016e38:	461a      	mov	r2, r3
 8016e3a:	8abb      	ldrh	r3, [r7, #20]
 8016e3c:	4293      	cmp	r3, r2
 8016e3e:	d002      	beq.n	8016e46 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8016e40:	f06f 0301 	mvn.w	r3, #1
 8016e44:	e0c8      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8016e46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e4a:	2b04      	cmp	r3, #4
 8016e4c:	d933      	bls.n	8016eb6 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8016e4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e52:	f003 0303 	and.w	r3, r3, #3
 8016e56:	b2db      	uxtb	r3, r3
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d009      	beq.n	8016e70 <dhcp_parse_reply+0x414>
 8016e5c:	4b60      	ldr	r3, [pc, #384]	; (8016fe0 <dhcp_parse_reply+0x584>)
 8016e5e:	f240 6281 	movw	r2, #1665	; 0x681
 8016e62:	4964      	ldr	r1, [pc, #400]	; (8016ff4 <dhcp_parse_reply+0x598>)
 8016e64:	4860      	ldr	r0, [pc, #384]	; (8016fe8 <dhcp_parse_reply+0x58c>)
 8016e66:	f003 faf5 	bl	801a454 <iprintf>
 8016e6a:	f06f 0305 	mvn.w	r3, #5
 8016e6e:	e0b3      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8016e70:	4a5f      	ldr	r2, [pc, #380]	; (8016ff0 <dhcp_parse_reply+0x594>)
 8016e72:	6a3b      	ldr	r3, [r7, #32]
 8016e74:	4413      	add	r3, r2
 8016e76:	2201      	movs	r2, #1
 8016e78:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8016e7a:	68bb      	ldr	r3, [r7, #8]
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f7f6 fe4c 	bl	800db1a <lwip_htonl>
 8016e82:	4602      	mov	r2, r0
 8016e84:	495c      	ldr	r1, [pc, #368]	; (8016ff8 <dhcp_parse_reply+0x59c>)
 8016e86:	6a3b      	ldr	r3, [r7, #32]
 8016e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8016e8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e90:	3b04      	subs	r3, #4
 8016e92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8016e96:	8bfb      	ldrh	r3, [r7, #30]
 8016e98:	3304      	adds	r3, #4
 8016e9a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8016e9c:	8a7a      	ldrh	r2, [r7, #18]
 8016e9e:	8bfb      	ldrh	r3, [r7, #30]
 8016ea0:	429a      	cmp	r2, r3
 8016ea2:	d202      	bcs.n	8016eaa <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8016ea4:	f06f 0301 	mvn.w	r3, #1
 8016ea8:	e096      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8016eaa:	8a7b      	ldrh	r3, [r7, #18]
 8016eac:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8016eae:	6a3b      	ldr	r3, [r7, #32]
 8016eb0:	3301      	adds	r3, #1
 8016eb2:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8016eb4:	e79e      	b.n	8016df4 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8016eb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016eba:	2b04      	cmp	r3, #4
 8016ebc:	d106      	bne.n	8016ecc <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	f7f6 fe2a 	bl	800db1a <lwip_htonl>
 8016ec6:	4603      	mov	r3, r0
 8016ec8:	60bb      	str	r3, [r7, #8]
 8016eca:	e011      	b.n	8016ef0 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8016ecc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ed0:	2b01      	cmp	r3, #1
 8016ed2:	d009      	beq.n	8016ee8 <dhcp_parse_reply+0x48c>
 8016ed4:	4b42      	ldr	r3, [pc, #264]	; (8016fe0 <dhcp_parse_reply+0x584>)
 8016ed6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8016eda:	4948      	ldr	r1, [pc, #288]	; (8016ffc <dhcp_parse_reply+0x5a0>)
 8016edc:	4842      	ldr	r0, [pc, #264]	; (8016fe8 <dhcp_parse_reply+0x58c>)
 8016ede:	f003 fab9 	bl	801a454 <iprintf>
 8016ee2:	f06f 0305 	mvn.w	r3, #5
 8016ee6:	e077      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8016ee8:	f107 0308 	add.w	r3, r7, #8
 8016eec:	781b      	ldrb	r3, [r3, #0]
 8016eee:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8016ef0:	4a3f      	ldr	r2, [pc, #252]	; (8016ff0 <dhcp_parse_reply+0x594>)
 8016ef2:	6a3b      	ldr	r3, [r7, #32]
 8016ef4:	4413      	add	r3, r2
 8016ef6:	2201      	movs	r2, #1
 8016ef8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8016efa:	68ba      	ldr	r2, [r7, #8]
 8016efc:	493e      	ldr	r1, [pc, #248]	; (8016ff8 <dhcp_parse_reply+0x59c>)
 8016efe:	6a3b      	ldr	r3, [r7, #32]
 8016f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8016f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f06:	895b      	ldrh	r3, [r3, #10]
 8016f08:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016f0a:	429a      	cmp	r2, r3
 8016f0c:	d324      	bcc.n	8016f58 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8016f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f10:	895b      	ldrh	r3, [r3, #10]
 8016f12:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016f14:	1ad3      	subs	r3, r2, r3
 8016f16:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8016f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f1a:	895b      	ldrh	r3, [r3, #10]
 8016f1c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016f1e:	1ad3      	subs	r3, r2, r3
 8016f20:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8016f22:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016f24:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016f26:	429a      	cmp	r2, r3
 8016f28:	d213      	bcs.n	8016f52 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8016f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8016f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d109      	bne.n	8016f4a <dhcp_parse_reply+0x4ee>
 8016f36:	4b2a      	ldr	r3, [pc, #168]	; (8016fe0 <dhcp_parse_reply+0x584>)
 8016f38:	f240 629d 	movw	r2, #1693	; 0x69d
 8016f3c:	4930      	ldr	r1, [pc, #192]	; (8017000 <dhcp_parse_reply+0x5a4>)
 8016f3e:	482a      	ldr	r0, [pc, #168]	; (8016fe8 <dhcp_parse_reply+0x58c>)
 8016f40:	f003 fa88 	bl	801a454 <iprintf>
 8016f44:	f06f 0305 	mvn.w	r3, #5
 8016f48:	e046      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8016f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f4c:	685b      	ldr	r3, [r3, #4]
 8016f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016f50:	e002      	b.n	8016f58 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8016f52:	f06f 0301 	mvn.w	r3, #1
 8016f56:	e03f      	b.n	8016fd8 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d00a      	beq.n	8016f74 <dhcp_parse_reply+0x518>
 8016f5e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016f60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016f62:	429a      	cmp	r2, r3
 8016f64:	d206      	bcs.n	8016f74 <dhcp_parse_reply+0x518>
 8016f66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016f68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016f6a:	4413      	add	r3, r2
 8016f6c:	781b      	ldrb	r3, [r3, #0]
 8016f6e:	2bff      	cmp	r3, #255	; 0xff
 8016f70:	f47f adb7 	bne.w	8016ae2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016f74:	4b1e      	ldr	r3, [pc, #120]	; (8016ff0 <dhcp_parse_reply+0x594>)
 8016f76:	781b      	ldrb	r3, [r3, #0]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d018      	beq.n	8016fae <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016f7c:	4b1e      	ldr	r3, [pc, #120]	; (8016ff8 <dhcp_parse_reply+0x59c>)
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016f82:	4b1b      	ldr	r3, [pc, #108]	; (8016ff0 <dhcp_parse_reply+0x594>)
 8016f84:	2200      	movs	r2, #0
 8016f86:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	2b01      	cmp	r3, #1
 8016f8c:	d102      	bne.n	8016f94 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8016f8e:	2301      	movs	r3, #1
 8016f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016f92:	e00c      	b.n	8016fae <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	2b02      	cmp	r3, #2
 8016f98:	d102      	bne.n	8016fa0 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8016f9a:	2301      	movs	r3, #1
 8016f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8016f9e:	e006      	b.n	8016fae <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	2b03      	cmp	r3, #3
 8016fa4:	d103      	bne.n	8016fae <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8016fa6:	2301      	movs	r3, #1
 8016fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8016faa:	2301      	movs	r3, #1
 8016fac:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8016fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d006      	beq.n	8016fc2 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8016fb8:	236c      	movs	r3, #108	; 0x6c
 8016fba:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8016fbc:	23ec      	movs	r3, #236	; 0xec
 8016fbe:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8016fc0:	e569      	b.n	8016a96 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8016fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d006      	beq.n	8016fd6 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8016fc8:	2300      	movs	r3, #0
 8016fca:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8016fcc:	232c      	movs	r3, #44	; 0x2c
 8016fce:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8016fd0:	236c      	movs	r3, #108	; 0x6c
 8016fd2:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8016fd4:	e55f      	b.n	8016a96 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8016fd6:	2300      	movs	r3, #0
}
 8016fd8:	4618      	mov	r0, r3
 8016fda:	3740      	adds	r7, #64	; 0x40
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	bd80      	pop	{r7, pc}
 8016fe0:	0801def8 	.word	0x0801def8
 8016fe4:	0801e180 	.word	0x0801e180
 8016fe8:	0801df58 	.word	0x0801df58
 8016fec:	0801e1c4 	.word	0x0801e1c4
 8016ff0:	2000f3b0 	.word	0x2000f3b0
 8016ff4:	0801e1d8 	.word	0x0801e1d8
 8016ff8:	2000f3b8 	.word	0x2000f3b8
 8016ffc:	0801e1f0 	.word	0x0801e1f0
 8017000:	0801e204 	.word	0x0801e204

08017004 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b08a      	sub	sp, #40	; 0x28
 8017008:	af00      	add	r7, sp, #0
 801700a:	60f8      	str	r0, [r7, #12]
 801700c:	60b9      	str	r1, [r7, #8]
 801700e:	607a      	str	r2, [r7, #4]
 8017010:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8017012:	4b60      	ldr	r3, [pc, #384]	; (8017194 <dhcp_recv+0x190>)
 8017014:	685b      	ldr	r3, [r3, #4]
 8017016:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017018:	6a3b      	ldr	r3, [r7, #32]
 801701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801701c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	685b      	ldr	r3, [r3, #4]
 8017022:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8017024:	69fb      	ldr	r3, [r7, #28]
 8017026:	2b00      	cmp	r3, #0
 8017028:	f000 809d 	beq.w	8017166 <dhcp_recv+0x162>
 801702c:	69fb      	ldr	r3, [r7, #28]
 801702e:	791b      	ldrb	r3, [r3, #4]
 8017030:	2b00      	cmp	r3, #0
 8017032:	f000 8098 	beq.w	8017166 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	895b      	ldrh	r3, [r3, #10]
 801703a:	2b2b      	cmp	r3, #43	; 0x2b
 801703c:	f240 8095 	bls.w	801716a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8017040:	69bb      	ldr	r3, [r7, #24]
 8017042:	781b      	ldrb	r3, [r3, #0]
 8017044:	2b02      	cmp	r3, #2
 8017046:	f040 8092 	bne.w	801716e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801704a:	2300      	movs	r3, #0
 801704c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017050:	e012      	b.n	8017078 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8017052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017056:	6a3a      	ldr	r2, [r7, #32]
 8017058:	4413      	add	r3, r2
 801705a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801705e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017062:	69b9      	ldr	r1, [r7, #24]
 8017064:	440b      	add	r3, r1
 8017066:	7f1b      	ldrb	r3, [r3, #28]
 8017068:	429a      	cmp	r2, r3
 801706a:	f040 8082 	bne.w	8017172 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801706e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017072:	3301      	adds	r3, #1
 8017074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017078:	6a3b      	ldr	r3, [r7, #32]
 801707a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801707e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017082:	429a      	cmp	r2, r3
 8017084:	d203      	bcs.n	801708e <dhcp_recv+0x8a>
 8017086:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801708a:	2b05      	cmp	r3, #5
 801708c:	d9e1      	bls.n	8017052 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801708e:	69bb      	ldr	r3, [r7, #24]
 8017090:	685b      	ldr	r3, [r3, #4]
 8017092:	4618      	mov	r0, r3
 8017094:	f7f6 fd41 	bl	800db1a <lwip_htonl>
 8017098:	4602      	mov	r2, r0
 801709a:	69fb      	ldr	r3, [r7, #28]
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	429a      	cmp	r2, r3
 80170a0:	d169      	bne.n	8017176 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80170a2:	69f9      	ldr	r1, [r7, #28]
 80170a4:	6878      	ldr	r0, [r7, #4]
 80170a6:	f7ff fcd9 	bl	8016a5c <dhcp_parse_reply>
 80170aa:	4603      	mov	r3, r0
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d164      	bne.n	801717a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80170b0:	4b39      	ldr	r3, [pc, #228]	; (8017198 <dhcp_recv+0x194>)
 80170b2:	785b      	ldrb	r3, [r3, #1]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d062      	beq.n	801717e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	685b      	ldr	r3, [r3, #4]
 80170bc:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80170be:	4b37      	ldr	r3, [pc, #220]	; (801719c <dhcp_recv+0x198>)
 80170c0:	685b      	ldr	r3, [r3, #4]
 80170c2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80170c4:	7cfb      	ldrb	r3, [r7, #19]
 80170c6:	2b05      	cmp	r3, #5
 80170c8:	d12a      	bne.n	8017120 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80170ca:	69fb      	ldr	r3, [r7, #28]
 80170cc:	795b      	ldrb	r3, [r3, #5]
 80170ce:	2b01      	cmp	r3, #1
 80170d0:	d112      	bne.n	80170f8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80170d2:	6979      	ldr	r1, [r7, #20]
 80170d4:	6a38      	ldr	r0, [r7, #32]
 80170d6:	f7fe fe17 	bl	8015d08 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80170da:	6a3b      	ldr	r3, [r7, #32]
 80170dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80170e0:	f003 0308 	and.w	r3, r3, #8
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d003      	beq.n	80170f0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80170e8:	6a38      	ldr	r0, [r7, #32]
 80170ea:	f7fe fb87 	bl	80157fc <dhcp_check>
 80170ee:	e049      	b.n	8017184 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80170f0:	6a38      	ldr	r0, [r7, #32]
 80170f2:	f7ff f867 	bl	80161c4 <dhcp_bind>
 80170f6:	e045      	b.n	8017184 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80170f8:	69fb      	ldr	r3, [r7, #28]
 80170fa:	795b      	ldrb	r3, [r3, #5]
 80170fc:	2b03      	cmp	r3, #3
 80170fe:	d007      	beq.n	8017110 <dhcp_recv+0x10c>
 8017100:	69fb      	ldr	r3, [r7, #28]
 8017102:	795b      	ldrb	r3, [r3, #5]
 8017104:	2b04      	cmp	r3, #4
 8017106:	d003      	beq.n	8017110 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8017108:	69fb      	ldr	r3, [r7, #28]
 801710a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801710c:	2b05      	cmp	r3, #5
 801710e:	d139      	bne.n	8017184 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8017110:	6979      	ldr	r1, [r7, #20]
 8017112:	6a38      	ldr	r0, [r7, #32]
 8017114:	f7fe fdf8 	bl	8015d08 <dhcp_handle_ack>
      dhcp_bind(netif);
 8017118:	6a38      	ldr	r0, [r7, #32]
 801711a:	f7ff f853 	bl	80161c4 <dhcp_bind>
 801711e:	e031      	b.n	8017184 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017120:	7cfb      	ldrb	r3, [r7, #19]
 8017122:	2b06      	cmp	r3, #6
 8017124:	d113      	bne.n	801714e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017126:	69fb      	ldr	r3, [r7, #28]
 8017128:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801712a:	2b03      	cmp	r3, #3
 801712c:	d00b      	beq.n	8017146 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801712e:	69fb      	ldr	r3, [r7, #28]
 8017130:	795b      	ldrb	r3, [r3, #5]
 8017132:	2b01      	cmp	r3, #1
 8017134:	d007      	beq.n	8017146 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017136:	69fb      	ldr	r3, [r7, #28]
 8017138:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801713a:	2b04      	cmp	r3, #4
 801713c:	d003      	beq.n	8017146 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801713e:	69fb      	ldr	r3, [r7, #28]
 8017140:	795b      	ldrb	r3, [r3, #5]
 8017142:	2b05      	cmp	r3, #5
 8017144:	d103      	bne.n	801714e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8017146:	6a38      	ldr	r0, [r7, #32]
 8017148:	f7fe fb3e 	bl	80157c8 <dhcp_handle_nak>
 801714c:	e01a      	b.n	8017184 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801714e:	7cfb      	ldrb	r3, [r7, #19]
 8017150:	2b02      	cmp	r3, #2
 8017152:	d116      	bne.n	8017182 <dhcp_recv+0x17e>
 8017154:	69fb      	ldr	r3, [r7, #28]
 8017156:	795b      	ldrb	r3, [r3, #5]
 8017158:	2b06      	cmp	r3, #6
 801715a:	d112      	bne.n	8017182 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801715c:	6979      	ldr	r1, [r7, #20]
 801715e:	6a38      	ldr	r0, [r7, #32]
 8017160:	f7fe fb80 	bl	8015864 <dhcp_handle_offer>
 8017164:	e00e      	b.n	8017184 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017166:	bf00      	nop
 8017168:	e00c      	b.n	8017184 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801716a:	bf00      	nop
 801716c:	e00a      	b.n	8017184 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801716e:	bf00      	nop
 8017170:	e008      	b.n	8017184 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8017172:	bf00      	nop
 8017174:	e006      	b.n	8017184 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017176:	bf00      	nop
 8017178:	e004      	b.n	8017184 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801717a:	bf00      	nop
 801717c:	e002      	b.n	8017184 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801717e:	bf00      	nop
 8017180:	e000      	b.n	8017184 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8017182:	bf00      	nop
  pbuf_free(p);
 8017184:	6878      	ldr	r0, [r7, #4]
 8017186:	f7f8 f86b 	bl	800f260 <pbuf_free>
}
 801718a:	bf00      	nop
 801718c:	3728      	adds	r7, #40	; 0x28
 801718e:	46bd      	mov	sp, r7
 8017190:	bd80      	pop	{r7, pc}
 8017192:	bf00      	nop
 8017194:	2000bc60 	.word	0x2000bc60
 8017198:	2000f3b0 	.word	0x2000f3b0
 801719c:	2000f3b8 	.word	0x2000f3b8

080171a0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b088      	sub	sp, #32
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	60f8      	str	r0, [r7, #12]
 80171a8:	60b9      	str	r1, [r7, #8]
 80171aa:	603b      	str	r3, [r7, #0]
 80171ac:	4613      	mov	r3, r2
 80171ae:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d108      	bne.n	80171c8 <dhcp_create_msg+0x28>
 80171b6:	4b5f      	ldr	r3, [pc, #380]	; (8017334 <dhcp_create_msg+0x194>)
 80171b8:	f240 7269 	movw	r2, #1897	; 0x769
 80171bc:	495e      	ldr	r1, [pc, #376]	; (8017338 <dhcp_create_msg+0x198>)
 80171be:	485f      	ldr	r0, [pc, #380]	; (801733c <dhcp_create_msg+0x19c>)
 80171c0:	f003 f948 	bl	801a454 <iprintf>
 80171c4:	2300      	movs	r3, #0
 80171c6:	e0b1      	b.n	801732c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80171c8:	68bb      	ldr	r3, [r7, #8]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d108      	bne.n	80171e0 <dhcp_create_msg+0x40>
 80171ce:	4b59      	ldr	r3, [pc, #356]	; (8017334 <dhcp_create_msg+0x194>)
 80171d0:	f240 726a 	movw	r2, #1898	; 0x76a
 80171d4:	495a      	ldr	r1, [pc, #360]	; (8017340 <dhcp_create_msg+0x1a0>)
 80171d6:	4859      	ldr	r0, [pc, #356]	; (801733c <dhcp_create_msg+0x19c>)
 80171d8:	f003 f93c 	bl	801a454 <iprintf>
 80171dc:	2300      	movs	r3, #0
 80171de:	e0a5      	b.n	801732c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80171e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80171e4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80171e8:	2036      	movs	r0, #54	; 0x36
 80171ea:	f7f7 fd55 	bl	800ec98 <pbuf_alloc>
 80171ee:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80171f0:	69bb      	ldr	r3, [r7, #24]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d101      	bne.n	80171fa <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80171f6:	2300      	movs	r3, #0
 80171f8:	e098      	b.n	801732c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80171fa:	69bb      	ldr	r3, [r7, #24]
 80171fc:	895b      	ldrh	r3, [r3, #10]
 80171fe:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8017202:	d206      	bcs.n	8017212 <dhcp_create_msg+0x72>
 8017204:	4b4b      	ldr	r3, [pc, #300]	; (8017334 <dhcp_create_msg+0x194>)
 8017206:	f240 7271 	movw	r2, #1905	; 0x771
 801720a:	494e      	ldr	r1, [pc, #312]	; (8017344 <dhcp_create_msg+0x1a4>)
 801720c:	484b      	ldr	r0, [pc, #300]	; (801733c <dhcp_create_msg+0x19c>)
 801720e:	f003 f921 	bl	801a454 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017212:	79fb      	ldrb	r3, [r7, #7]
 8017214:	2b03      	cmp	r3, #3
 8017216:	d103      	bne.n	8017220 <dhcp_create_msg+0x80>
 8017218:	68bb      	ldr	r3, [r7, #8]
 801721a:	795b      	ldrb	r3, [r3, #5]
 801721c:	2b03      	cmp	r3, #3
 801721e:	d10d      	bne.n	801723c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	799b      	ldrb	r3, [r3, #6]
 8017224:	2b00      	cmp	r3, #0
 8017226:	d105      	bne.n	8017234 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8017228:	f003 f942 	bl	801a4b0 <rand>
 801722c:	4603      	mov	r3, r0
 801722e:	461a      	mov	r2, r3
 8017230:	4b45      	ldr	r3, [pc, #276]	; (8017348 <dhcp_create_msg+0x1a8>)
 8017232:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017234:	4b44      	ldr	r3, [pc, #272]	; (8017348 <dhcp_create_msg+0x1a8>)
 8017236:	681a      	ldr	r2, [r3, #0]
 8017238:	68bb      	ldr	r3, [r7, #8]
 801723a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801723c:	69bb      	ldr	r3, [r7, #24]
 801723e:	685b      	ldr	r3, [r3, #4]
 8017240:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017242:	f44f 729a 	mov.w	r2, #308	; 0x134
 8017246:	2100      	movs	r1, #0
 8017248:	6978      	ldr	r0, [r7, #20]
 801724a:	f003 f851 	bl	801a2f0 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801724e:	697b      	ldr	r3, [r7, #20]
 8017250:	2201      	movs	r2, #1
 8017252:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017254:	697b      	ldr	r3, [r7, #20]
 8017256:	2201      	movs	r2, #1
 8017258:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017260:	697b      	ldr	r3, [r7, #20]
 8017262:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017264:	68bb      	ldr	r3, [r7, #8]
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	4618      	mov	r0, r3
 801726a:	f7f6 fc56 	bl	800db1a <lwip_htonl>
 801726e:	4602      	mov	r2, r0
 8017270:	697b      	ldr	r3, [r7, #20]
 8017272:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017274:	79fb      	ldrb	r3, [r7, #7]
 8017276:	2b08      	cmp	r3, #8
 8017278:	d010      	beq.n	801729c <dhcp_create_msg+0xfc>
 801727a:	79fb      	ldrb	r3, [r7, #7]
 801727c:	2b04      	cmp	r3, #4
 801727e:	d00d      	beq.n	801729c <dhcp_create_msg+0xfc>
 8017280:	79fb      	ldrb	r3, [r7, #7]
 8017282:	2b07      	cmp	r3, #7
 8017284:	d00a      	beq.n	801729c <dhcp_create_msg+0xfc>
 8017286:	79fb      	ldrb	r3, [r7, #7]
 8017288:	2b03      	cmp	r3, #3
 801728a:	d10c      	bne.n	80172a6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801728c:	68bb      	ldr	r3, [r7, #8]
 801728e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8017290:	2b05      	cmp	r3, #5
 8017292:	d003      	beq.n	801729c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017294:	68bb      	ldr	r3, [r7, #8]
 8017296:	795b      	ldrb	r3, [r3, #5]
 8017298:	2b04      	cmp	r3, #4
 801729a:	d104      	bne.n	80172a6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	3304      	adds	r3, #4
 80172a0:	681a      	ldr	r2, [r3, #0]
 80172a2:	697b      	ldr	r3, [r7, #20]
 80172a4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80172a6:	2300      	movs	r3, #0
 80172a8:	83fb      	strh	r3, [r7, #30]
 80172aa:	e00c      	b.n	80172c6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80172ac:	8bfa      	ldrh	r2, [r7, #30]
 80172ae:	8bfb      	ldrh	r3, [r7, #30]
 80172b0:	68f9      	ldr	r1, [r7, #12]
 80172b2:	440a      	add	r2, r1
 80172b4:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80172b8:	697a      	ldr	r2, [r7, #20]
 80172ba:	4413      	add	r3, r2
 80172bc:	460a      	mov	r2, r1
 80172be:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80172c0:	8bfb      	ldrh	r3, [r7, #30]
 80172c2:	3301      	adds	r3, #1
 80172c4:	83fb      	strh	r3, [r7, #30]
 80172c6:	8bfb      	ldrh	r3, [r7, #30]
 80172c8:	2b05      	cmp	r3, #5
 80172ca:	d9ef      	bls.n	80172ac <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80172cc:	697b      	ldr	r3, [r7, #20]
 80172ce:	2200      	movs	r2, #0
 80172d0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80172d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80172d8:	2200      	movs	r2, #0
 80172da:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80172de:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80172e2:	2200      	movs	r2, #0
 80172e4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80172e8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80172ec:	2200      	movs	r2, #0
 80172ee:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80172f2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80172f6:	697b      	ldr	r3, [r7, #20]
 80172f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80172fc:	2301      	movs	r3, #1
 80172fe:	2235      	movs	r2, #53	; 0x35
 8017300:	2000      	movs	r0, #0
 8017302:	f7ff fadb 	bl	80168bc <dhcp_option>
 8017306:	4603      	mov	r3, r0
 8017308:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801730a:	697b      	ldr	r3, [r7, #20]
 801730c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017310:	79fa      	ldrb	r2, [r7, #7]
 8017312:	8a7b      	ldrh	r3, [r7, #18]
 8017314:	4618      	mov	r0, r3
 8017316:	f7ff fb05 	bl	8016924 <dhcp_option_byte>
 801731a:	4603      	mov	r3, r0
 801731c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d002      	beq.n	801732a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8017324:	683b      	ldr	r3, [r7, #0]
 8017326:	8a7a      	ldrh	r2, [r7, #18]
 8017328:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801732a:	69bb      	ldr	r3, [r7, #24]
}
 801732c:	4618      	mov	r0, r3
 801732e:	3720      	adds	r7, #32
 8017330:	46bd      	mov	sp, r7
 8017332:	bd80      	pop	{r7, pc}
 8017334:	0801def8 	.word	0x0801def8
 8017338:	0801e218 	.word	0x0801e218
 801733c:	0801df58 	.word	0x0801df58
 8017340:	0801e238 	.word	0x0801e238
 8017344:	0801e258 	.word	0x0801e258
 8017348:	2000851c 	.word	0x2000851c

0801734c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b084      	sub	sp, #16
 8017350:	af00      	add	r7, sp, #0
 8017352:	4603      	mov	r3, r0
 8017354:	60b9      	str	r1, [r7, #8]
 8017356:	607a      	str	r2, [r7, #4]
 8017358:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801735a:	89fb      	ldrh	r3, [r7, #14]
 801735c:	1c5a      	adds	r2, r3, #1
 801735e:	81fa      	strh	r2, [r7, #14]
 8017360:	461a      	mov	r2, r3
 8017362:	68bb      	ldr	r3, [r7, #8]
 8017364:	4413      	add	r3, r2
 8017366:	22ff      	movs	r2, #255	; 0xff
 8017368:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801736a:	e007      	b.n	801737c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801736c:	89fb      	ldrh	r3, [r7, #14]
 801736e:	1c5a      	adds	r2, r3, #1
 8017370:	81fa      	strh	r2, [r7, #14]
 8017372:	461a      	mov	r2, r3
 8017374:	68bb      	ldr	r3, [r7, #8]
 8017376:	4413      	add	r3, r2
 8017378:	2200      	movs	r2, #0
 801737a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801737c:	89fb      	ldrh	r3, [r7, #14]
 801737e:	2b43      	cmp	r3, #67	; 0x43
 8017380:	d904      	bls.n	801738c <dhcp_option_trailer+0x40>
 8017382:	89fb      	ldrh	r3, [r7, #14]
 8017384:	f003 0303 	and.w	r3, r3, #3
 8017388:	2b00      	cmp	r3, #0
 801738a:	d002      	beq.n	8017392 <dhcp_option_trailer+0x46>
 801738c:	89fb      	ldrh	r3, [r7, #14]
 801738e:	2b43      	cmp	r3, #67	; 0x43
 8017390:	d9ec      	bls.n	801736c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8017392:	89fb      	ldrh	r3, [r7, #14]
 8017394:	33f0      	adds	r3, #240	; 0xf0
 8017396:	b29b      	uxth	r3, r3
 8017398:	4619      	mov	r1, r3
 801739a:	6878      	ldr	r0, [r7, #4]
 801739c:	f7f7 fdda 	bl	800ef54 <pbuf_realloc>
}
 80173a0:	bf00      	nop
 80173a2:	3710      	adds	r7, #16
 80173a4:	46bd      	mov	sp, r7
 80173a6:	bd80      	pop	{r7, pc}

080173a8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80173a8:	b480      	push	{r7}
 80173aa:	b085      	sub	sp, #20
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d017      	beq.n	80173e6 <dhcp_supplied_address+0x3e>
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d013      	beq.n	80173e6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173c2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	795b      	ldrb	r3, [r3, #5]
 80173c8:	2b0a      	cmp	r3, #10
 80173ca:	d007      	beq.n	80173dc <dhcp_supplied_address+0x34>
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	795b      	ldrb	r3, [r3, #5]
 80173d0:	2b05      	cmp	r3, #5
 80173d2:	d003      	beq.n	80173dc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80173d8:	2b04      	cmp	r3, #4
 80173da:	d101      	bne.n	80173e0 <dhcp_supplied_address+0x38>
 80173dc:	2301      	movs	r3, #1
 80173de:	e000      	b.n	80173e2 <dhcp_supplied_address+0x3a>
 80173e0:	2300      	movs	r3, #0
 80173e2:	b2db      	uxtb	r3, r3
 80173e4:	e000      	b.n	80173e8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80173e6:	2300      	movs	r3, #0
}
 80173e8:	4618      	mov	r0, r3
 80173ea:	3714      	adds	r7, #20
 80173ec:	46bd      	mov	sp, r7
 80173ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f2:	4770      	bx	lr

080173f4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	b082      	sub	sp, #8
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80173fc:	4915      	ldr	r1, [pc, #84]	; (8017454 <etharp_free_entry+0x60>)
 80173fe:	687a      	ldr	r2, [r7, #4]
 8017400:	4613      	mov	r3, r2
 8017402:	005b      	lsls	r3, r3, #1
 8017404:	4413      	add	r3, r2
 8017406:	00db      	lsls	r3, r3, #3
 8017408:	440b      	add	r3, r1
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d013      	beq.n	8017438 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017410:	4910      	ldr	r1, [pc, #64]	; (8017454 <etharp_free_entry+0x60>)
 8017412:	687a      	ldr	r2, [r7, #4]
 8017414:	4613      	mov	r3, r2
 8017416:	005b      	lsls	r3, r3, #1
 8017418:	4413      	add	r3, r2
 801741a:	00db      	lsls	r3, r3, #3
 801741c:	440b      	add	r3, r1
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	4618      	mov	r0, r3
 8017422:	f7f7 ff1d 	bl	800f260 <pbuf_free>
    arp_table[i].q = NULL;
 8017426:	490b      	ldr	r1, [pc, #44]	; (8017454 <etharp_free_entry+0x60>)
 8017428:	687a      	ldr	r2, [r7, #4]
 801742a:	4613      	mov	r3, r2
 801742c:	005b      	lsls	r3, r3, #1
 801742e:	4413      	add	r3, r2
 8017430:	00db      	lsls	r3, r3, #3
 8017432:	440b      	add	r3, r1
 8017434:	2200      	movs	r2, #0
 8017436:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017438:	4906      	ldr	r1, [pc, #24]	; (8017454 <etharp_free_entry+0x60>)
 801743a:	687a      	ldr	r2, [r7, #4]
 801743c:	4613      	mov	r3, r2
 801743e:	005b      	lsls	r3, r3, #1
 8017440:	4413      	add	r3, r2
 8017442:	00db      	lsls	r3, r3, #3
 8017444:	440b      	add	r3, r1
 8017446:	3314      	adds	r3, #20
 8017448:	2200      	movs	r2, #0
 801744a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801744c:	bf00      	nop
 801744e:	3708      	adds	r7, #8
 8017450:	46bd      	mov	sp, r7
 8017452:	bd80      	pop	{r7, pc}
 8017454:	20008520 	.word	0x20008520

08017458 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b082      	sub	sp, #8
 801745c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801745e:	2300      	movs	r3, #0
 8017460:	607b      	str	r3, [r7, #4]
 8017462:	e096      	b.n	8017592 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017464:	494f      	ldr	r1, [pc, #316]	; (80175a4 <etharp_tmr+0x14c>)
 8017466:	687a      	ldr	r2, [r7, #4]
 8017468:	4613      	mov	r3, r2
 801746a:	005b      	lsls	r3, r3, #1
 801746c:	4413      	add	r3, r2
 801746e:	00db      	lsls	r3, r3, #3
 8017470:	440b      	add	r3, r1
 8017472:	3314      	adds	r3, #20
 8017474:	781b      	ldrb	r3, [r3, #0]
 8017476:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017478:	78fb      	ldrb	r3, [r7, #3]
 801747a:	2b00      	cmp	r3, #0
 801747c:	f000 8086 	beq.w	801758c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017480:	4948      	ldr	r1, [pc, #288]	; (80175a4 <etharp_tmr+0x14c>)
 8017482:	687a      	ldr	r2, [r7, #4]
 8017484:	4613      	mov	r3, r2
 8017486:	005b      	lsls	r3, r3, #1
 8017488:	4413      	add	r3, r2
 801748a:	00db      	lsls	r3, r3, #3
 801748c:	440b      	add	r3, r1
 801748e:	3312      	adds	r3, #18
 8017490:	881b      	ldrh	r3, [r3, #0]
 8017492:	3301      	adds	r3, #1
 8017494:	b298      	uxth	r0, r3
 8017496:	4943      	ldr	r1, [pc, #268]	; (80175a4 <etharp_tmr+0x14c>)
 8017498:	687a      	ldr	r2, [r7, #4]
 801749a:	4613      	mov	r3, r2
 801749c:	005b      	lsls	r3, r3, #1
 801749e:	4413      	add	r3, r2
 80174a0:	00db      	lsls	r3, r3, #3
 80174a2:	440b      	add	r3, r1
 80174a4:	3312      	adds	r3, #18
 80174a6:	4602      	mov	r2, r0
 80174a8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80174aa:	493e      	ldr	r1, [pc, #248]	; (80175a4 <etharp_tmr+0x14c>)
 80174ac:	687a      	ldr	r2, [r7, #4]
 80174ae:	4613      	mov	r3, r2
 80174b0:	005b      	lsls	r3, r3, #1
 80174b2:	4413      	add	r3, r2
 80174b4:	00db      	lsls	r3, r3, #3
 80174b6:	440b      	add	r3, r1
 80174b8:	3312      	adds	r3, #18
 80174ba:	881b      	ldrh	r3, [r3, #0]
 80174bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80174c0:	d215      	bcs.n	80174ee <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80174c2:	4938      	ldr	r1, [pc, #224]	; (80175a4 <etharp_tmr+0x14c>)
 80174c4:	687a      	ldr	r2, [r7, #4]
 80174c6:	4613      	mov	r3, r2
 80174c8:	005b      	lsls	r3, r3, #1
 80174ca:	4413      	add	r3, r2
 80174cc:	00db      	lsls	r3, r3, #3
 80174ce:	440b      	add	r3, r1
 80174d0:	3314      	adds	r3, #20
 80174d2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80174d4:	2b01      	cmp	r3, #1
 80174d6:	d10e      	bne.n	80174f6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80174d8:	4932      	ldr	r1, [pc, #200]	; (80175a4 <etharp_tmr+0x14c>)
 80174da:	687a      	ldr	r2, [r7, #4]
 80174dc:	4613      	mov	r3, r2
 80174de:	005b      	lsls	r3, r3, #1
 80174e0:	4413      	add	r3, r2
 80174e2:	00db      	lsls	r3, r3, #3
 80174e4:	440b      	add	r3, r1
 80174e6:	3312      	adds	r3, #18
 80174e8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80174ea:	2b04      	cmp	r3, #4
 80174ec:	d903      	bls.n	80174f6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	f7ff ff80 	bl	80173f4 <etharp_free_entry>
 80174f4:	e04a      	b.n	801758c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80174f6:	492b      	ldr	r1, [pc, #172]	; (80175a4 <etharp_tmr+0x14c>)
 80174f8:	687a      	ldr	r2, [r7, #4]
 80174fa:	4613      	mov	r3, r2
 80174fc:	005b      	lsls	r3, r3, #1
 80174fe:	4413      	add	r3, r2
 8017500:	00db      	lsls	r3, r3, #3
 8017502:	440b      	add	r3, r1
 8017504:	3314      	adds	r3, #20
 8017506:	781b      	ldrb	r3, [r3, #0]
 8017508:	2b03      	cmp	r3, #3
 801750a:	d10a      	bne.n	8017522 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801750c:	4925      	ldr	r1, [pc, #148]	; (80175a4 <etharp_tmr+0x14c>)
 801750e:	687a      	ldr	r2, [r7, #4]
 8017510:	4613      	mov	r3, r2
 8017512:	005b      	lsls	r3, r3, #1
 8017514:	4413      	add	r3, r2
 8017516:	00db      	lsls	r3, r3, #3
 8017518:	440b      	add	r3, r1
 801751a:	3314      	adds	r3, #20
 801751c:	2204      	movs	r2, #4
 801751e:	701a      	strb	r2, [r3, #0]
 8017520:	e034      	b.n	801758c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017522:	4920      	ldr	r1, [pc, #128]	; (80175a4 <etharp_tmr+0x14c>)
 8017524:	687a      	ldr	r2, [r7, #4]
 8017526:	4613      	mov	r3, r2
 8017528:	005b      	lsls	r3, r3, #1
 801752a:	4413      	add	r3, r2
 801752c:	00db      	lsls	r3, r3, #3
 801752e:	440b      	add	r3, r1
 8017530:	3314      	adds	r3, #20
 8017532:	781b      	ldrb	r3, [r3, #0]
 8017534:	2b04      	cmp	r3, #4
 8017536:	d10a      	bne.n	801754e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017538:	491a      	ldr	r1, [pc, #104]	; (80175a4 <etharp_tmr+0x14c>)
 801753a:	687a      	ldr	r2, [r7, #4]
 801753c:	4613      	mov	r3, r2
 801753e:	005b      	lsls	r3, r3, #1
 8017540:	4413      	add	r3, r2
 8017542:	00db      	lsls	r3, r3, #3
 8017544:	440b      	add	r3, r1
 8017546:	3314      	adds	r3, #20
 8017548:	2202      	movs	r2, #2
 801754a:	701a      	strb	r2, [r3, #0]
 801754c:	e01e      	b.n	801758c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801754e:	4915      	ldr	r1, [pc, #84]	; (80175a4 <etharp_tmr+0x14c>)
 8017550:	687a      	ldr	r2, [r7, #4]
 8017552:	4613      	mov	r3, r2
 8017554:	005b      	lsls	r3, r3, #1
 8017556:	4413      	add	r3, r2
 8017558:	00db      	lsls	r3, r3, #3
 801755a:	440b      	add	r3, r1
 801755c:	3314      	adds	r3, #20
 801755e:	781b      	ldrb	r3, [r3, #0]
 8017560:	2b01      	cmp	r3, #1
 8017562:	d113      	bne.n	801758c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017564:	490f      	ldr	r1, [pc, #60]	; (80175a4 <etharp_tmr+0x14c>)
 8017566:	687a      	ldr	r2, [r7, #4]
 8017568:	4613      	mov	r3, r2
 801756a:	005b      	lsls	r3, r3, #1
 801756c:	4413      	add	r3, r2
 801756e:	00db      	lsls	r3, r3, #3
 8017570:	440b      	add	r3, r1
 8017572:	3308      	adds	r3, #8
 8017574:	6818      	ldr	r0, [r3, #0]
 8017576:	687a      	ldr	r2, [r7, #4]
 8017578:	4613      	mov	r3, r2
 801757a:	005b      	lsls	r3, r3, #1
 801757c:	4413      	add	r3, r2
 801757e:	00db      	lsls	r3, r3, #3
 8017580:	4a08      	ldr	r2, [pc, #32]	; (80175a4 <etharp_tmr+0x14c>)
 8017582:	4413      	add	r3, r2
 8017584:	3304      	adds	r3, #4
 8017586:	4619      	mov	r1, r3
 8017588:	f000 fe72 	bl	8018270 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	3301      	adds	r3, #1
 8017590:	607b      	str	r3, [r7, #4]
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	2b09      	cmp	r3, #9
 8017596:	f77f af65 	ble.w	8017464 <etharp_tmr+0xc>
      }
    }
  }
}
 801759a:	bf00      	nop
 801759c:	bf00      	nop
 801759e:	3708      	adds	r7, #8
 80175a0:	46bd      	mov	sp, r7
 80175a2:	bd80      	pop	{r7, pc}
 80175a4:	20008520 	.word	0x20008520

080175a8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b08a      	sub	sp, #40	; 0x28
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	60f8      	str	r0, [r7, #12]
 80175b0:	460b      	mov	r3, r1
 80175b2:	607a      	str	r2, [r7, #4]
 80175b4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80175b6:	230a      	movs	r3, #10
 80175b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80175ba:	230a      	movs	r3, #10
 80175bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80175be:	230a      	movs	r3, #10
 80175c0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80175c2:	2300      	movs	r3, #0
 80175c4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80175c6:	230a      	movs	r3, #10
 80175c8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80175ca:	2300      	movs	r3, #0
 80175cc:	83bb      	strh	r3, [r7, #28]
 80175ce:	2300      	movs	r3, #0
 80175d0:	837b      	strh	r3, [r7, #26]
 80175d2:	2300      	movs	r3, #0
 80175d4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80175d6:	2300      	movs	r3, #0
 80175d8:	843b      	strh	r3, [r7, #32]
 80175da:	e0ae      	b.n	801773a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80175dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80175e0:	49a6      	ldr	r1, [pc, #664]	; (801787c <etharp_find_entry+0x2d4>)
 80175e2:	4613      	mov	r3, r2
 80175e4:	005b      	lsls	r3, r3, #1
 80175e6:	4413      	add	r3, r2
 80175e8:	00db      	lsls	r3, r3, #3
 80175ea:	440b      	add	r3, r1
 80175ec:	3314      	adds	r3, #20
 80175ee:	781b      	ldrb	r3, [r3, #0]
 80175f0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80175f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80175f6:	2b0a      	cmp	r3, #10
 80175f8:	d105      	bne.n	8017606 <etharp_find_entry+0x5e>
 80175fa:	7dfb      	ldrb	r3, [r7, #23]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d102      	bne.n	8017606 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017600:	8c3b      	ldrh	r3, [r7, #32]
 8017602:	847b      	strh	r3, [r7, #34]	; 0x22
 8017604:	e095      	b.n	8017732 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017606:	7dfb      	ldrb	r3, [r7, #23]
 8017608:	2b00      	cmp	r3, #0
 801760a:	f000 8092 	beq.w	8017732 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801760e:	7dfb      	ldrb	r3, [r7, #23]
 8017610:	2b01      	cmp	r3, #1
 8017612:	d009      	beq.n	8017628 <etharp_find_entry+0x80>
 8017614:	7dfb      	ldrb	r3, [r7, #23]
 8017616:	2b01      	cmp	r3, #1
 8017618:	d806      	bhi.n	8017628 <etharp_find_entry+0x80>
 801761a:	4b99      	ldr	r3, [pc, #612]	; (8017880 <etharp_find_entry+0x2d8>)
 801761c:	f240 1223 	movw	r2, #291	; 0x123
 8017620:	4998      	ldr	r1, [pc, #608]	; (8017884 <etharp_find_entry+0x2dc>)
 8017622:	4899      	ldr	r0, [pc, #612]	; (8017888 <etharp_find_entry+0x2e0>)
 8017624:	f002 ff16 	bl	801a454 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	2b00      	cmp	r3, #0
 801762c:	d020      	beq.n	8017670 <etharp_find_entry+0xc8>
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	6819      	ldr	r1, [r3, #0]
 8017632:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017636:	4891      	ldr	r0, [pc, #580]	; (801787c <etharp_find_entry+0x2d4>)
 8017638:	4613      	mov	r3, r2
 801763a:	005b      	lsls	r3, r3, #1
 801763c:	4413      	add	r3, r2
 801763e:	00db      	lsls	r3, r3, #3
 8017640:	4403      	add	r3, r0
 8017642:	3304      	adds	r3, #4
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	4299      	cmp	r1, r3
 8017648:	d112      	bne.n	8017670 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d00c      	beq.n	801766a <etharp_find_entry+0xc2>
 8017650:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017654:	4989      	ldr	r1, [pc, #548]	; (801787c <etharp_find_entry+0x2d4>)
 8017656:	4613      	mov	r3, r2
 8017658:	005b      	lsls	r3, r3, #1
 801765a:	4413      	add	r3, r2
 801765c:	00db      	lsls	r3, r3, #3
 801765e:	440b      	add	r3, r1
 8017660:	3308      	adds	r3, #8
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	687a      	ldr	r2, [r7, #4]
 8017666:	429a      	cmp	r2, r3
 8017668:	d102      	bne.n	8017670 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801766a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801766e:	e100      	b.n	8017872 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017670:	7dfb      	ldrb	r3, [r7, #23]
 8017672:	2b01      	cmp	r3, #1
 8017674:	d140      	bne.n	80176f8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017676:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801767a:	4980      	ldr	r1, [pc, #512]	; (801787c <etharp_find_entry+0x2d4>)
 801767c:	4613      	mov	r3, r2
 801767e:	005b      	lsls	r3, r3, #1
 8017680:	4413      	add	r3, r2
 8017682:	00db      	lsls	r3, r3, #3
 8017684:	440b      	add	r3, r1
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d01a      	beq.n	80176c2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801768c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017690:	497a      	ldr	r1, [pc, #488]	; (801787c <etharp_find_entry+0x2d4>)
 8017692:	4613      	mov	r3, r2
 8017694:	005b      	lsls	r3, r3, #1
 8017696:	4413      	add	r3, r2
 8017698:	00db      	lsls	r3, r3, #3
 801769a:	440b      	add	r3, r1
 801769c:	3312      	adds	r3, #18
 801769e:	881b      	ldrh	r3, [r3, #0]
 80176a0:	8bba      	ldrh	r2, [r7, #28]
 80176a2:	429a      	cmp	r2, r3
 80176a4:	d845      	bhi.n	8017732 <etharp_find_entry+0x18a>
            old_queue = i;
 80176a6:	8c3b      	ldrh	r3, [r7, #32]
 80176a8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80176aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80176ae:	4973      	ldr	r1, [pc, #460]	; (801787c <etharp_find_entry+0x2d4>)
 80176b0:	4613      	mov	r3, r2
 80176b2:	005b      	lsls	r3, r3, #1
 80176b4:	4413      	add	r3, r2
 80176b6:	00db      	lsls	r3, r3, #3
 80176b8:	440b      	add	r3, r1
 80176ba:	3312      	adds	r3, #18
 80176bc:	881b      	ldrh	r3, [r3, #0]
 80176be:	83bb      	strh	r3, [r7, #28]
 80176c0:	e037      	b.n	8017732 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80176c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80176c6:	496d      	ldr	r1, [pc, #436]	; (801787c <etharp_find_entry+0x2d4>)
 80176c8:	4613      	mov	r3, r2
 80176ca:	005b      	lsls	r3, r3, #1
 80176cc:	4413      	add	r3, r2
 80176ce:	00db      	lsls	r3, r3, #3
 80176d0:	440b      	add	r3, r1
 80176d2:	3312      	adds	r3, #18
 80176d4:	881b      	ldrh	r3, [r3, #0]
 80176d6:	8b7a      	ldrh	r2, [r7, #26]
 80176d8:	429a      	cmp	r2, r3
 80176da:	d82a      	bhi.n	8017732 <etharp_find_entry+0x18a>
            old_pending = i;
 80176dc:	8c3b      	ldrh	r3, [r7, #32]
 80176de:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80176e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80176e4:	4965      	ldr	r1, [pc, #404]	; (801787c <etharp_find_entry+0x2d4>)
 80176e6:	4613      	mov	r3, r2
 80176e8:	005b      	lsls	r3, r3, #1
 80176ea:	4413      	add	r3, r2
 80176ec:	00db      	lsls	r3, r3, #3
 80176ee:	440b      	add	r3, r1
 80176f0:	3312      	adds	r3, #18
 80176f2:	881b      	ldrh	r3, [r3, #0]
 80176f4:	837b      	strh	r3, [r7, #26]
 80176f6:	e01c      	b.n	8017732 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80176f8:	7dfb      	ldrb	r3, [r7, #23]
 80176fa:	2b01      	cmp	r3, #1
 80176fc:	d919      	bls.n	8017732 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80176fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017702:	495e      	ldr	r1, [pc, #376]	; (801787c <etharp_find_entry+0x2d4>)
 8017704:	4613      	mov	r3, r2
 8017706:	005b      	lsls	r3, r3, #1
 8017708:	4413      	add	r3, r2
 801770a:	00db      	lsls	r3, r3, #3
 801770c:	440b      	add	r3, r1
 801770e:	3312      	adds	r3, #18
 8017710:	881b      	ldrh	r3, [r3, #0]
 8017712:	8b3a      	ldrh	r2, [r7, #24]
 8017714:	429a      	cmp	r2, r3
 8017716:	d80c      	bhi.n	8017732 <etharp_find_entry+0x18a>
            old_stable = i;
 8017718:	8c3b      	ldrh	r3, [r7, #32]
 801771a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801771c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017720:	4956      	ldr	r1, [pc, #344]	; (801787c <etharp_find_entry+0x2d4>)
 8017722:	4613      	mov	r3, r2
 8017724:	005b      	lsls	r3, r3, #1
 8017726:	4413      	add	r3, r2
 8017728:	00db      	lsls	r3, r3, #3
 801772a:	440b      	add	r3, r1
 801772c:	3312      	adds	r3, #18
 801772e:	881b      	ldrh	r3, [r3, #0]
 8017730:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017732:	8c3b      	ldrh	r3, [r7, #32]
 8017734:	3301      	adds	r3, #1
 8017736:	b29b      	uxth	r3, r3
 8017738:	843b      	strh	r3, [r7, #32]
 801773a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801773e:	2b09      	cmp	r3, #9
 8017740:	f77f af4c 	ble.w	80175dc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017744:	7afb      	ldrb	r3, [r7, #11]
 8017746:	f003 0302 	and.w	r3, r3, #2
 801774a:	2b00      	cmp	r3, #0
 801774c:	d108      	bne.n	8017760 <etharp_find_entry+0x1b8>
 801774e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017752:	2b0a      	cmp	r3, #10
 8017754:	d107      	bne.n	8017766 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017756:	7afb      	ldrb	r3, [r7, #11]
 8017758:	f003 0301 	and.w	r3, r3, #1
 801775c:	2b00      	cmp	r3, #0
 801775e:	d102      	bne.n	8017766 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017760:	f04f 33ff 	mov.w	r3, #4294967295
 8017764:	e085      	b.n	8017872 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017766:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801776a:	2b09      	cmp	r3, #9
 801776c:	dc02      	bgt.n	8017774 <etharp_find_entry+0x1cc>
    i = empty;
 801776e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017770:	843b      	strh	r3, [r7, #32]
 8017772:	e039      	b.n	80177e8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017774:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017778:	2b09      	cmp	r3, #9
 801777a:	dc14      	bgt.n	80177a6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801777c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801777e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017780:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017784:	493d      	ldr	r1, [pc, #244]	; (801787c <etharp_find_entry+0x2d4>)
 8017786:	4613      	mov	r3, r2
 8017788:	005b      	lsls	r3, r3, #1
 801778a:	4413      	add	r3, r2
 801778c:	00db      	lsls	r3, r3, #3
 801778e:	440b      	add	r3, r1
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d018      	beq.n	80177c8 <etharp_find_entry+0x220>
 8017796:	4b3a      	ldr	r3, [pc, #232]	; (8017880 <etharp_find_entry+0x2d8>)
 8017798:	f240 126d 	movw	r2, #365	; 0x16d
 801779c:	493b      	ldr	r1, [pc, #236]	; (801788c <etharp_find_entry+0x2e4>)
 801779e:	483a      	ldr	r0, [pc, #232]	; (8017888 <etharp_find_entry+0x2e0>)
 80177a0:	f002 fe58 	bl	801a454 <iprintf>
 80177a4:	e010      	b.n	80177c8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80177a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80177aa:	2b09      	cmp	r3, #9
 80177ac:	dc02      	bgt.n	80177b4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80177ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80177b0:	843b      	strh	r3, [r7, #32]
 80177b2:	e009      	b.n	80177c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80177b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80177b8:	2b09      	cmp	r3, #9
 80177ba:	dc02      	bgt.n	80177c2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80177bc:	8bfb      	ldrh	r3, [r7, #30]
 80177be:	843b      	strh	r3, [r7, #32]
 80177c0:	e002      	b.n	80177c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80177c2:	f04f 33ff 	mov.w	r3, #4294967295
 80177c6:	e054      	b.n	8017872 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80177c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80177cc:	2b09      	cmp	r3, #9
 80177ce:	dd06      	ble.n	80177de <etharp_find_entry+0x236>
 80177d0:	4b2b      	ldr	r3, [pc, #172]	; (8017880 <etharp_find_entry+0x2d8>)
 80177d2:	f240 127f 	movw	r2, #383	; 0x17f
 80177d6:	492e      	ldr	r1, [pc, #184]	; (8017890 <etharp_find_entry+0x2e8>)
 80177d8:	482b      	ldr	r0, [pc, #172]	; (8017888 <etharp_find_entry+0x2e0>)
 80177da:	f002 fe3b 	bl	801a454 <iprintf>
    etharp_free_entry(i);
 80177de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80177e2:	4618      	mov	r0, r3
 80177e4:	f7ff fe06 	bl	80173f4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80177e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80177ec:	2b09      	cmp	r3, #9
 80177ee:	dd06      	ble.n	80177fe <etharp_find_entry+0x256>
 80177f0:	4b23      	ldr	r3, [pc, #140]	; (8017880 <etharp_find_entry+0x2d8>)
 80177f2:	f240 1283 	movw	r2, #387	; 0x183
 80177f6:	4926      	ldr	r1, [pc, #152]	; (8017890 <etharp_find_entry+0x2e8>)
 80177f8:	4823      	ldr	r0, [pc, #140]	; (8017888 <etharp_find_entry+0x2e0>)
 80177fa:	f002 fe2b 	bl	801a454 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80177fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017802:	491e      	ldr	r1, [pc, #120]	; (801787c <etharp_find_entry+0x2d4>)
 8017804:	4613      	mov	r3, r2
 8017806:	005b      	lsls	r3, r3, #1
 8017808:	4413      	add	r3, r2
 801780a:	00db      	lsls	r3, r3, #3
 801780c:	440b      	add	r3, r1
 801780e:	3314      	adds	r3, #20
 8017810:	781b      	ldrb	r3, [r3, #0]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d006      	beq.n	8017824 <etharp_find_entry+0x27c>
 8017816:	4b1a      	ldr	r3, [pc, #104]	; (8017880 <etharp_find_entry+0x2d8>)
 8017818:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801781c:	491d      	ldr	r1, [pc, #116]	; (8017894 <etharp_find_entry+0x2ec>)
 801781e:	481a      	ldr	r0, [pc, #104]	; (8017888 <etharp_find_entry+0x2e0>)
 8017820:	f002 fe18 	bl	801a454 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	2b00      	cmp	r3, #0
 8017828:	d00b      	beq.n	8017842 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801782a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	6819      	ldr	r1, [r3, #0]
 8017832:	4812      	ldr	r0, [pc, #72]	; (801787c <etharp_find_entry+0x2d4>)
 8017834:	4613      	mov	r3, r2
 8017836:	005b      	lsls	r3, r3, #1
 8017838:	4413      	add	r3, r2
 801783a:	00db      	lsls	r3, r3, #3
 801783c:	4403      	add	r3, r0
 801783e:	3304      	adds	r3, #4
 8017840:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017842:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017846:	490d      	ldr	r1, [pc, #52]	; (801787c <etharp_find_entry+0x2d4>)
 8017848:	4613      	mov	r3, r2
 801784a:	005b      	lsls	r3, r3, #1
 801784c:	4413      	add	r3, r2
 801784e:	00db      	lsls	r3, r3, #3
 8017850:	440b      	add	r3, r1
 8017852:	3312      	adds	r3, #18
 8017854:	2200      	movs	r2, #0
 8017856:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017858:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801785c:	4907      	ldr	r1, [pc, #28]	; (801787c <etharp_find_entry+0x2d4>)
 801785e:	4613      	mov	r3, r2
 8017860:	005b      	lsls	r3, r3, #1
 8017862:	4413      	add	r3, r2
 8017864:	00db      	lsls	r3, r3, #3
 8017866:	440b      	add	r3, r1
 8017868:	3308      	adds	r3, #8
 801786a:	687a      	ldr	r2, [r7, #4]
 801786c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801786e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017872:	4618      	mov	r0, r3
 8017874:	3728      	adds	r7, #40	; 0x28
 8017876:	46bd      	mov	sp, r7
 8017878:	bd80      	pop	{r7, pc}
 801787a:	bf00      	nop
 801787c:	20008520 	.word	0x20008520
 8017880:	0801e298 	.word	0x0801e298
 8017884:	0801e2d0 	.word	0x0801e2d0
 8017888:	0801e310 	.word	0x0801e310
 801788c:	0801e338 	.word	0x0801e338
 8017890:	0801e350 	.word	0x0801e350
 8017894:	0801e364 	.word	0x0801e364

08017898 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b088      	sub	sp, #32
 801789c:	af02      	add	r7, sp, #8
 801789e:	60f8      	str	r0, [r7, #12]
 80178a0:	60b9      	str	r1, [r7, #8]
 80178a2:	607a      	str	r2, [r7, #4]
 80178a4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80178ac:	2b06      	cmp	r3, #6
 80178ae:	d006      	beq.n	80178be <etharp_update_arp_entry+0x26>
 80178b0:	4b48      	ldr	r3, [pc, #288]	; (80179d4 <etharp_update_arp_entry+0x13c>)
 80178b2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80178b6:	4948      	ldr	r1, [pc, #288]	; (80179d8 <etharp_update_arp_entry+0x140>)
 80178b8:	4848      	ldr	r0, [pc, #288]	; (80179dc <etharp_update_arp_entry+0x144>)
 80178ba:	f002 fdcb 	bl	801a454 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80178be:	68bb      	ldr	r3, [r7, #8]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d012      	beq.n	80178ea <etharp_update_arp_entry+0x52>
 80178c4:	68bb      	ldr	r3, [r7, #8]
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d00e      	beq.n	80178ea <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80178cc:	68bb      	ldr	r3, [r7, #8]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	68f9      	ldr	r1, [r7, #12]
 80178d2:	4618      	mov	r0, r3
 80178d4:	f001 f920 	bl	8018b18 <ip4_addr_isbroadcast_u32>
 80178d8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d105      	bne.n	80178ea <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80178de:	68bb      	ldr	r3, [r7, #8]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80178e6:	2be0      	cmp	r3, #224	; 0xe0
 80178e8:	d102      	bne.n	80178f0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80178ea:	f06f 030f 	mvn.w	r3, #15
 80178ee:	e06c      	b.n	80179ca <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80178f0:	78fb      	ldrb	r3, [r7, #3]
 80178f2:	68fa      	ldr	r2, [r7, #12]
 80178f4:	4619      	mov	r1, r3
 80178f6:	68b8      	ldr	r0, [r7, #8]
 80178f8:	f7ff fe56 	bl	80175a8 <etharp_find_entry>
 80178fc:	4603      	mov	r3, r0
 80178fe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017900:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017904:	2b00      	cmp	r3, #0
 8017906:	da02      	bge.n	801790e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017908:	8afb      	ldrh	r3, [r7, #22]
 801790a:	b25b      	sxtb	r3, r3
 801790c:	e05d      	b.n	80179ca <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801790e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017912:	4933      	ldr	r1, [pc, #204]	; (80179e0 <etharp_update_arp_entry+0x148>)
 8017914:	4613      	mov	r3, r2
 8017916:	005b      	lsls	r3, r3, #1
 8017918:	4413      	add	r3, r2
 801791a:	00db      	lsls	r3, r3, #3
 801791c:	440b      	add	r3, r1
 801791e:	3314      	adds	r3, #20
 8017920:	2202      	movs	r2, #2
 8017922:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017924:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017928:	492d      	ldr	r1, [pc, #180]	; (80179e0 <etharp_update_arp_entry+0x148>)
 801792a:	4613      	mov	r3, r2
 801792c:	005b      	lsls	r3, r3, #1
 801792e:	4413      	add	r3, r2
 8017930:	00db      	lsls	r3, r3, #3
 8017932:	440b      	add	r3, r1
 8017934:	3308      	adds	r3, #8
 8017936:	68fa      	ldr	r2, [r7, #12]
 8017938:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801793a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801793e:	4613      	mov	r3, r2
 8017940:	005b      	lsls	r3, r3, #1
 8017942:	4413      	add	r3, r2
 8017944:	00db      	lsls	r3, r3, #3
 8017946:	3308      	adds	r3, #8
 8017948:	4a25      	ldr	r2, [pc, #148]	; (80179e0 <etharp_update_arp_entry+0x148>)
 801794a:	4413      	add	r3, r2
 801794c:	3304      	adds	r3, #4
 801794e:	2206      	movs	r2, #6
 8017950:	6879      	ldr	r1, [r7, #4]
 8017952:	4618      	mov	r0, r3
 8017954:	f002 fcbe 	bl	801a2d4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017958:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801795c:	4920      	ldr	r1, [pc, #128]	; (80179e0 <etharp_update_arp_entry+0x148>)
 801795e:	4613      	mov	r3, r2
 8017960:	005b      	lsls	r3, r3, #1
 8017962:	4413      	add	r3, r2
 8017964:	00db      	lsls	r3, r3, #3
 8017966:	440b      	add	r3, r1
 8017968:	3312      	adds	r3, #18
 801796a:	2200      	movs	r2, #0
 801796c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801796e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017972:	491b      	ldr	r1, [pc, #108]	; (80179e0 <etharp_update_arp_entry+0x148>)
 8017974:	4613      	mov	r3, r2
 8017976:	005b      	lsls	r3, r3, #1
 8017978:	4413      	add	r3, r2
 801797a:	00db      	lsls	r3, r3, #3
 801797c:	440b      	add	r3, r1
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d021      	beq.n	80179c8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017984:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017988:	4915      	ldr	r1, [pc, #84]	; (80179e0 <etharp_update_arp_entry+0x148>)
 801798a:	4613      	mov	r3, r2
 801798c:	005b      	lsls	r3, r3, #1
 801798e:	4413      	add	r3, r2
 8017990:	00db      	lsls	r3, r3, #3
 8017992:	440b      	add	r3, r1
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017998:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801799c:	4910      	ldr	r1, [pc, #64]	; (80179e0 <etharp_update_arp_entry+0x148>)
 801799e:	4613      	mov	r3, r2
 80179a0:	005b      	lsls	r3, r3, #1
 80179a2:	4413      	add	r3, r2
 80179a4:	00db      	lsls	r3, r3, #3
 80179a6:	440b      	add	r3, r1
 80179a8:	2200      	movs	r2, #0
 80179aa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80179b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80179b6:	9300      	str	r3, [sp, #0]
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	6939      	ldr	r1, [r7, #16]
 80179bc:	68f8      	ldr	r0, [r7, #12]
 80179be:	f001 ffb3 	bl	8019928 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80179c2:	6938      	ldr	r0, [r7, #16]
 80179c4:	f7f7 fc4c 	bl	800f260 <pbuf_free>
  }
  return ERR_OK;
 80179c8:	2300      	movs	r3, #0
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	3718      	adds	r7, #24
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}
 80179d2:	bf00      	nop
 80179d4:	0801e298 	.word	0x0801e298
 80179d8:	0801e390 	.word	0x0801e390
 80179dc:	0801e310 	.word	0x0801e310
 80179e0:	20008520 	.word	0x20008520

080179e4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b084      	sub	sp, #16
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80179ec:	2300      	movs	r3, #0
 80179ee:	60fb      	str	r3, [r7, #12]
 80179f0:	e01e      	b.n	8017a30 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80179f2:	4913      	ldr	r1, [pc, #76]	; (8017a40 <etharp_cleanup_netif+0x5c>)
 80179f4:	68fa      	ldr	r2, [r7, #12]
 80179f6:	4613      	mov	r3, r2
 80179f8:	005b      	lsls	r3, r3, #1
 80179fa:	4413      	add	r3, r2
 80179fc:	00db      	lsls	r3, r3, #3
 80179fe:	440b      	add	r3, r1
 8017a00:	3314      	adds	r3, #20
 8017a02:	781b      	ldrb	r3, [r3, #0]
 8017a04:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017a06:	7afb      	ldrb	r3, [r7, #11]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d00e      	beq.n	8017a2a <etharp_cleanup_netif+0x46>
 8017a0c:	490c      	ldr	r1, [pc, #48]	; (8017a40 <etharp_cleanup_netif+0x5c>)
 8017a0e:	68fa      	ldr	r2, [r7, #12]
 8017a10:	4613      	mov	r3, r2
 8017a12:	005b      	lsls	r3, r3, #1
 8017a14:	4413      	add	r3, r2
 8017a16:	00db      	lsls	r3, r3, #3
 8017a18:	440b      	add	r3, r1
 8017a1a:	3308      	adds	r3, #8
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	687a      	ldr	r2, [r7, #4]
 8017a20:	429a      	cmp	r2, r3
 8017a22:	d102      	bne.n	8017a2a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017a24:	68f8      	ldr	r0, [r7, #12]
 8017a26:	f7ff fce5 	bl	80173f4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	3301      	adds	r3, #1
 8017a2e:	60fb      	str	r3, [r7, #12]
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	2b09      	cmp	r3, #9
 8017a34:	dddd      	ble.n	80179f2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017a36:	bf00      	nop
 8017a38:	bf00      	nop
 8017a3a:	3710      	adds	r7, #16
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}
 8017a40:	20008520 	.word	0x20008520

08017a44 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017a44:	b5b0      	push	{r4, r5, r7, lr}
 8017a46:	b08a      	sub	sp, #40	; 0x28
 8017a48:	af04      	add	r7, sp, #16
 8017a4a:	6078      	str	r0, [r7, #4]
 8017a4c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017a4e:	683b      	ldr	r3, [r7, #0]
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d107      	bne.n	8017a64 <etharp_input+0x20>
 8017a54:	4b3f      	ldr	r3, [pc, #252]	; (8017b54 <etharp_input+0x110>)
 8017a56:	f240 228a 	movw	r2, #650	; 0x28a
 8017a5a:	493f      	ldr	r1, [pc, #252]	; (8017b58 <etharp_input+0x114>)
 8017a5c:	483f      	ldr	r0, [pc, #252]	; (8017b5c <etharp_input+0x118>)
 8017a5e:	f002 fcf9 	bl	801a454 <iprintf>
 8017a62:	e074      	b.n	8017b4e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	685b      	ldr	r3, [r3, #4]
 8017a68:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017a6a:	693b      	ldr	r3, [r7, #16]
 8017a6c:	881b      	ldrh	r3, [r3, #0]
 8017a6e:	b29b      	uxth	r3, r3
 8017a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017a74:	d10c      	bne.n	8017a90 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017a76:	693b      	ldr	r3, [r7, #16]
 8017a78:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017a7a:	2b06      	cmp	r3, #6
 8017a7c:	d108      	bne.n	8017a90 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017a7e:	693b      	ldr	r3, [r7, #16]
 8017a80:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017a82:	2b04      	cmp	r3, #4
 8017a84:	d104      	bne.n	8017a90 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017a86:	693b      	ldr	r3, [r7, #16]
 8017a88:	885b      	ldrh	r3, [r3, #2]
 8017a8a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017a8c:	2b08      	cmp	r3, #8
 8017a8e:	d003      	beq.n	8017a98 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017a90:	6878      	ldr	r0, [r7, #4]
 8017a92:	f7f7 fbe5 	bl	800f260 <pbuf_free>
    return;
 8017a96:	e05a      	b.n	8017b4e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017a98:	693b      	ldr	r3, [r7, #16]
 8017a9a:	330e      	adds	r3, #14
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017aa0:	693b      	ldr	r3, [r7, #16]
 8017aa2:	3318      	adds	r3, #24
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017aa8:	683b      	ldr	r3, [r7, #0]
 8017aaa:	3304      	adds	r3, #4
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d102      	bne.n	8017ab8 <etharp_input+0x74>
    for_us = 0;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	75fb      	strb	r3, [r7, #23]
 8017ab6:	e009      	b.n	8017acc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017ab8:	68ba      	ldr	r2, [r7, #8]
 8017aba:	683b      	ldr	r3, [r7, #0]
 8017abc:	3304      	adds	r3, #4
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	429a      	cmp	r2, r3
 8017ac2:	bf0c      	ite	eq
 8017ac4:	2301      	moveq	r3, #1
 8017ac6:	2300      	movne	r3, #0
 8017ac8:	b2db      	uxtb	r3, r3
 8017aca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017acc:	693b      	ldr	r3, [r7, #16]
 8017ace:	f103 0208 	add.w	r2, r3, #8
 8017ad2:	7dfb      	ldrb	r3, [r7, #23]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d001      	beq.n	8017adc <etharp_input+0x98>
 8017ad8:	2301      	movs	r3, #1
 8017ada:	e000      	b.n	8017ade <etharp_input+0x9a>
 8017adc:	2302      	movs	r3, #2
 8017ade:	f107 010c 	add.w	r1, r7, #12
 8017ae2:	6838      	ldr	r0, [r7, #0]
 8017ae4:	f7ff fed8 	bl	8017898 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017ae8:	693b      	ldr	r3, [r7, #16]
 8017aea:	88db      	ldrh	r3, [r3, #6]
 8017aec:	b29b      	uxth	r3, r3
 8017aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017af2:	d003      	beq.n	8017afc <etharp_input+0xb8>
 8017af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017af8:	d01e      	beq.n	8017b38 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017afa:	e025      	b.n	8017b48 <etharp_input+0x104>
      if (for_us) {
 8017afc:	7dfb      	ldrb	r3, [r7, #23]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d021      	beq.n	8017b46 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017b02:	683b      	ldr	r3, [r7, #0]
 8017b04:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017b08:	693b      	ldr	r3, [r7, #16]
 8017b0a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017b0e:	683b      	ldr	r3, [r7, #0]
 8017b10:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8017b14:	683b      	ldr	r3, [r7, #0]
 8017b16:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017b18:	693a      	ldr	r2, [r7, #16]
 8017b1a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017b1c:	2102      	movs	r1, #2
 8017b1e:	9103      	str	r1, [sp, #12]
 8017b20:	f107 010c 	add.w	r1, r7, #12
 8017b24:	9102      	str	r1, [sp, #8]
 8017b26:	9201      	str	r2, [sp, #4]
 8017b28:	9300      	str	r3, [sp, #0]
 8017b2a:	462b      	mov	r3, r5
 8017b2c:	4622      	mov	r2, r4
 8017b2e:	4601      	mov	r1, r0
 8017b30:	6838      	ldr	r0, [r7, #0]
 8017b32:	f000 faef 	bl	8018114 <etharp_raw>
      break;
 8017b36:	e006      	b.n	8017b46 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8017b38:	f107 030c 	add.w	r3, r7, #12
 8017b3c:	4619      	mov	r1, r3
 8017b3e:	6838      	ldr	r0, [r7, #0]
 8017b40:	f7fe f9fc 	bl	8015f3c <dhcp_arp_reply>
      break;
 8017b44:	e000      	b.n	8017b48 <etharp_input+0x104>
      break;
 8017b46:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017b48:	6878      	ldr	r0, [r7, #4]
 8017b4a:	f7f7 fb89 	bl	800f260 <pbuf_free>
}
 8017b4e:	3718      	adds	r7, #24
 8017b50:	46bd      	mov	sp, r7
 8017b52:	bdb0      	pop	{r4, r5, r7, pc}
 8017b54:	0801e298 	.word	0x0801e298
 8017b58:	0801e3e8 	.word	0x0801e3e8
 8017b5c:	0801e310 	.word	0x0801e310

08017b60 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b086      	sub	sp, #24
 8017b64:	af02      	add	r7, sp, #8
 8017b66:	60f8      	str	r0, [r7, #12]
 8017b68:	60b9      	str	r1, [r7, #8]
 8017b6a:	4613      	mov	r3, r2
 8017b6c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017b6e:	79fa      	ldrb	r2, [r7, #7]
 8017b70:	4944      	ldr	r1, [pc, #272]	; (8017c84 <etharp_output_to_arp_index+0x124>)
 8017b72:	4613      	mov	r3, r2
 8017b74:	005b      	lsls	r3, r3, #1
 8017b76:	4413      	add	r3, r2
 8017b78:	00db      	lsls	r3, r3, #3
 8017b7a:	440b      	add	r3, r1
 8017b7c:	3314      	adds	r3, #20
 8017b7e:	781b      	ldrb	r3, [r3, #0]
 8017b80:	2b01      	cmp	r3, #1
 8017b82:	d806      	bhi.n	8017b92 <etharp_output_to_arp_index+0x32>
 8017b84:	4b40      	ldr	r3, [pc, #256]	; (8017c88 <etharp_output_to_arp_index+0x128>)
 8017b86:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017b8a:	4940      	ldr	r1, [pc, #256]	; (8017c8c <etharp_output_to_arp_index+0x12c>)
 8017b8c:	4840      	ldr	r0, [pc, #256]	; (8017c90 <etharp_output_to_arp_index+0x130>)
 8017b8e:	f002 fc61 	bl	801a454 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017b92:	79fa      	ldrb	r2, [r7, #7]
 8017b94:	493b      	ldr	r1, [pc, #236]	; (8017c84 <etharp_output_to_arp_index+0x124>)
 8017b96:	4613      	mov	r3, r2
 8017b98:	005b      	lsls	r3, r3, #1
 8017b9a:	4413      	add	r3, r2
 8017b9c:	00db      	lsls	r3, r3, #3
 8017b9e:	440b      	add	r3, r1
 8017ba0:	3314      	adds	r3, #20
 8017ba2:	781b      	ldrb	r3, [r3, #0]
 8017ba4:	2b02      	cmp	r3, #2
 8017ba6:	d153      	bne.n	8017c50 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017ba8:	79fa      	ldrb	r2, [r7, #7]
 8017baa:	4936      	ldr	r1, [pc, #216]	; (8017c84 <etharp_output_to_arp_index+0x124>)
 8017bac:	4613      	mov	r3, r2
 8017bae:	005b      	lsls	r3, r3, #1
 8017bb0:	4413      	add	r3, r2
 8017bb2:	00db      	lsls	r3, r3, #3
 8017bb4:	440b      	add	r3, r1
 8017bb6:	3312      	adds	r3, #18
 8017bb8:	881b      	ldrh	r3, [r3, #0]
 8017bba:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017bbe:	d919      	bls.n	8017bf4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017bc0:	79fa      	ldrb	r2, [r7, #7]
 8017bc2:	4613      	mov	r3, r2
 8017bc4:	005b      	lsls	r3, r3, #1
 8017bc6:	4413      	add	r3, r2
 8017bc8:	00db      	lsls	r3, r3, #3
 8017bca:	4a2e      	ldr	r2, [pc, #184]	; (8017c84 <etharp_output_to_arp_index+0x124>)
 8017bcc:	4413      	add	r3, r2
 8017bce:	3304      	adds	r3, #4
 8017bd0:	4619      	mov	r1, r3
 8017bd2:	68f8      	ldr	r0, [r7, #12]
 8017bd4:	f000 fb4c 	bl	8018270 <etharp_request>
 8017bd8:	4603      	mov	r3, r0
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d138      	bne.n	8017c50 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017bde:	79fa      	ldrb	r2, [r7, #7]
 8017be0:	4928      	ldr	r1, [pc, #160]	; (8017c84 <etharp_output_to_arp_index+0x124>)
 8017be2:	4613      	mov	r3, r2
 8017be4:	005b      	lsls	r3, r3, #1
 8017be6:	4413      	add	r3, r2
 8017be8:	00db      	lsls	r3, r3, #3
 8017bea:	440b      	add	r3, r1
 8017bec:	3314      	adds	r3, #20
 8017bee:	2203      	movs	r2, #3
 8017bf0:	701a      	strb	r2, [r3, #0]
 8017bf2:	e02d      	b.n	8017c50 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017bf4:	79fa      	ldrb	r2, [r7, #7]
 8017bf6:	4923      	ldr	r1, [pc, #140]	; (8017c84 <etharp_output_to_arp_index+0x124>)
 8017bf8:	4613      	mov	r3, r2
 8017bfa:	005b      	lsls	r3, r3, #1
 8017bfc:	4413      	add	r3, r2
 8017bfe:	00db      	lsls	r3, r3, #3
 8017c00:	440b      	add	r3, r1
 8017c02:	3312      	adds	r3, #18
 8017c04:	881b      	ldrh	r3, [r3, #0]
 8017c06:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017c0a:	d321      	bcc.n	8017c50 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017c0c:	79fa      	ldrb	r2, [r7, #7]
 8017c0e:	4613      	mov	r3, r2
 8017c10:	005b      	lsls	r3, r3, #1
 8017c12:	4413      	add	r3, r2
 8017c14:	00db      	lsls	r3, r3, #3
 8017c16:	4a1b      	ldr	r2, [pc, #108]	; (8017c84 <etharp_output_to_arp_index+0x124>)
 8017c18:	4413      	add	r3, r2
 8017c1a:	1d19      	adds	r1, r3, #4
 8017c1c:	79fa      	ldrb	r2, [r7, #7]
 8017c1e:	4613      	mov	r3, r2
 8017c20:	005b      	lsls	r3, r3, #1
 8017c22:	4413      	add	r3, r2
 8017c24:	00db      	lsls	r3, r3, #3
 8017c26:	3308      	adds	r3, #8
 8017c28:	4a16      	ldr	r2, [pc, #88]	; (8017c84 <etharp_output_to_arp_index+0x124>)
 8017c2a:	4413      	add	r3, r2
 8017c2c:	3304      	adds	r3, #4
 8017c2e:	461a      	mov	r2, r3
 8017c30:	68f8      	ldr	r0, [r7, #12]
 8017c32:	f000 fafb 	bl	801822c <etharp_request_dst>
 8017c36:	4603      	mov	r3, r0
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d109      	bne.n	8017c50 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017c3c:	79fa      	ldrb	r2, [r7, #7]
 8017c3e:	4911      	ldr	r1, [pc, #68]	; (8017c84 <etharp_output_to_arp_index+0x124>)
 8017c40:	4613      	mov	r3, r2
 8017c42:	005b      	lsls	r3, r3, #1
 8017c44:	4413      	add	r3, r2
 8017c46:	00db      	lsls	r3, r3, #3
 8017c48:	440b      	add	r3, r1
 8017c4a:	3314      	adds	r3, #20
 8017c4c:	2203      	movs	r2, #3
 8017c4e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8017c56:	79fa      	ldrb	r2, [r7, #7]
 8017c58:	4613      	mov	r3, r2
 8017c5a:	005b      	lsls	r3, r3, #1
 8017c5c:	4413      	add	r3, r2
 8017c5e:	00db      	lsls	r3, r3, #3
 8017c60:	3308      	adds	r3, #8
 8017c62:	4a08      	ldr	r2, [pc, #32]	; (8017c84 <etharp_output_to_arp_index+0x124>)
 8017c64:	4413      	add	r3, r2
 8017c66:	3304      	adds	r3, #4
 8017c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017c6c:	9200      	str	r2, [sp, #0]
 8017c6e:	460a      	mov	r2, r1
 8017c70:	68b9      	ldr	r1, [r7, #8]
 8017c72:	68f8      	ldr	r0, [r7, #12]
 8017c74:	f001 fe58 	bl	8019928 <ethernet_output>
 8017c78:	4603      	mov	r3, r0
}
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	3710      	adds	r7, #16
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	bd80      	pop	{r7, pc}
 8017c82:	bf00      	nop
 8017c84:	20008520 	.word	0x20008520
 8017c88:	0801e298 	.word	0x0801e298
 8017c8c:	0801e408 	.word	0x0801e408
 8017c90:	0801e310 	.word	0x0801e310

08017c94 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b08a      	sub	sp, #40	; 0x28
 8017c98:	af02      	add	r7, sp, #8
 8017c9a:	60f8      	str	r0, [r7, #12]
 8017c9c:	60b9      	str	r1, [r7, #8]
 8017c9e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d106      	bne.n	8017cb8 <etharp_output+0x24>
 8017caa:	4b73      	ldr	r3, [pc, #460]	; (8017e78 <etharp_output+0x1e4>)
 8017cac:	f240 321e 	movw	r2, #798	; 0x31e
 8017cb0:	4972      	ldr	r1, [pc, #456]	; (8017e7c <etharp_output+0x1e8>)
 8017cb2:	4873      	ldr	r0, [pc, #460]	; (8017e80 <etharp_output+0x1ec>)
 8017cb4:	f002 fbce 	bl	801a454 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017cb8:	68bb      	ldr	r3, [r7, #8]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d106      	bne.n	8017ccc <etharp_output+0x38>
 8017cbe:	4b6e      	ldr	r3, [pc, #440]	; (8017e78 <etharp_output+0x1e4>)
 8017cc0:	f240 321f 	movw	r2, #799	; 0x31f
 8017cc4:	496f      	ldr	r1, [pc, #444]	; (8017e84 <etharp_output+0x1f0>)
 8017cc6:	486e      	ldr	r0, [pc, #440]	; (8017e80 <etharp_output+0x1ec>)
 8017cc8:	f002 fbc4 	bl	801a454 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d106      	bne.n	8017ce0 <etharp_output+0x4c>
 8017cd2:	4b69      	ldr	r3, [pc, #420]	; (8017e78 <etharp_output+0x1e4>)
 8017cd4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017cd8:	496b      	ldr	r1, [pc, #428]	; (8017e88 <etharp_output+0x1f4>)
 8017cda:	4869      	ldr	r0, [pc, #420]	; (8017e80 <etharp_output+0x1ec>)
 8017cdc:	f002 fbba 	bl	801a454 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	68f9      	ldr	r1, [r7, #12]
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	f000 ff16 	bl	8018b18 <ip4_addr_isbroadcast_u32>
 8017cec:	4603      	mov	r3, r0
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d002      	beq.n	8017cf8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017cf2:	4b66      	ldr	r3, [pc, #408]	; (8017e8c <etharp_output+0x1f8>)
 8017cf4:	61fb      	str	r3, [r7, #28]
 8017cf6:	e0af      	b.n	8017e58 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017d00:	2be0      	cmp	r3, #224	; 0xe0
 8017d02:	d118      	bne.n	8017d36 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017d04:	2301      	movs	r3, #1
 8017d06:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017d08:	2300      	movs	r3, #0
 8017d0a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017d0c:	235e      	movs	r3, #94	; 0x5e
 8017d0e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	3301      	adds	r3, #1
 8017d14:	781b      	ldrb	r3, [r3, #0]
 8017d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017d1a:	b2db      	uxtb	r3, r3
 8017d1c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	3302      	adds	r3, #2
 8017d22:	781b      	ldrb	r3, [r3, #0]
 8017d24:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	3303      	adds	r3, #3
 8017d2a:	781b      	ldrb	r3, [r3, #0]
 8017d2c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017d2e:	f107 0310 	add.w	r3, r7, #16
 8017d32:	61fb      	str	r3, [r7, #28]
 8017d34:	e090      	b.n	8017e58 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	681a      	ldr	r2, [r3, #0]
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	3304      	adds	r3, #4
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	405a      	eors	r2, r3
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	3308      	adds	r3, #8
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	4013      	ands	r3, r2
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d012      	beq.n	8017d74 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017d54:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017d58:	4293      	cmp	r3, r2
 8017d5a:	d00b      	beq.n	8017d74 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	330c      	adds	r3, #12
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d003      	beq.n	8017d6e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	330c      	adds	r3, #12
 8017d6a:	61bb      	str	r3, [r7, #24]
 8017d6c:	e002      	b.n	8017d74 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017d6e:	f06f 0303 	mvn.w	r3, #3
 8017d72:	e07d      	b.n	8017e70 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017d74:	4b46      	ldr	r3, [pc, #280]	; (8017e90 <etharp_output+0x1fc>)
 8017d76:	781b      	ldrb	r3, [r3, #0]
 8017d78:	4619      	mov	r1, r3
 8017d7a:	4a46      	ldr	r2, [pc, #280]	; (8017e94 <etharp_output+0x200>)
 8017d7c:	460b      	mov	r3, r1
 8017d7e:	005b      	lsls	r3, r3, #1
 8017d80:	440b      	add	r3, r1
 8017d82:	00db      	lsls	r3, r3, #3
 8017d84:	4413      	add	r3, r2
 8017d86:	3314      	adds	r3, #20
 8017d88:	781b      	ldrb	r3, [r3, #0]
 8017d8a:	2b01      	cmp	r3, #1
 8017d8c:	d925      	bls.n	8017dda <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017d8e:	4b40      	ldr	r3, [pc, #256]	; (8017e90 <etharp_output+0x1fc>)
 8017d90:	781b      	ldrb	r3, [r3, #0]
 8017d92:	4619      	mov	r1, r3
 8017d94:	4a3f      	ldr	r2, [pc, #252]	; (8017e94 <etharp_output+0x200>)
 8017d96:	460b      	mov	r3, r1
 8017d98:	005b      	lsls	r3, r3, #1
 8017d9a:	440b      	add	r3, r1
 8017d9c:	00db      	lsls	r3, r3, #3
 8017d9e:	4413      	add	r3, r2
 8017da0:	3308      	adds	r3, #8
 8017da2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017da4:	68fa      	ldr	r2, [r7, #12]
 8017da6:	429a      	cmp	r2, r3
 8017da8:	d117      	bne.n	8017dda <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017daa:	69bb      	ldr	r3, [r7, #24]
 8017dac:	681a      	ldr	r2, [r3, #0]
 8017dae:	4b38      	ldr	r3, [pc, #224]	; (8017e90 <etharp_output+0x1fc>)
 8017db0:	781b      	ldrb	r3, [r3, #0]
 8017db2:	4618      	mov	r0, r3
 8017db4:	4937      	ldr	r1, [pc, #220]	; (8017e94 <etharp_output+0x200>)
 8017db6:	4603      	mov	r3, r0
 8017db8:	005b      	lsls	r3, r3, #1
 8017dba:	4403      	add	r3, r0
 8017dbc:	00db      	lsls	r3, r3, #3
 8017dbe:	440b      	add	r3, r1
 8017dc0:	3304      	adds	r3, #4
 8017dc2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017dc4:	429a      	cmp	r2, r3
 8017dc6:	d108      	bne.n	8017dda <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017dc8:	4b31      	ldr	r3, [pc, #196]	; (8017e90 <etharp_output+0x1fc>)
 8017dca:	781b      	ldrb	r3, [r3, #0]
 8017dcc:	461a      	mov	r2, r3
 8017dce:	68b9      	ldr	r1, [r7, #8]
 8017dd0:	68f8      	ldr	r0, [r7, #12]
 8017dd2:	f7ff fec5 	bl	8017b60 <etharp_output_to_arp_index>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	e04a      	b.n	8017e70 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017dda:	2300      	movs	r3, #0
 8017ddc:	75fb      	strb	r3, [r7, #23]
 8017dde:	e031      	b.n	8017e44 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017de0:	7dfa      	ldrb	r2, [r7, #23]
 8017de2:	492c      	ldr	r1, [pc, #176]	; (8017e94 <etharp_output+0x200>)
 8017de4:	4613      	mov	r3, r2
 8017de6:	005b      	lsls	r3, r3, #1
 8017de8:	4413      	add	r3, r2
 8017dea:	00db      	lsls	r3, r3, #3
 8017dec:	440b      	add	r3, r1
 8017dee:	3314      	adds	r3, #20
 8017df0:	781b      	ldrb	r3, [r3, #0]
 8017df2:	2b01      	cmp	r3, #1
 8017df4:	d923      	bls.n	8017e3e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017df6:	7dfa      	ldrb	r2, [r7, #23]
 8017df8:	4926      	ldr	r1, [pc, #152]	; (8017e94 <etharp_output+0x200>)
 8017dfa:	4613      	mov	r3, r2
 8017dfc:	005b      	lsls	r3, r3, #1
 8017dfe:	4413      	add	r3, r2
 8017e00:	00db      	lsls	r3, r3, #3
 8017e02:	440b      	add	r3, r1
 8017e04:	3308      	adds	r3, #8
 8017e06:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017e08:	68fa      	ldr	r2, [r7, #12]
 8017e0a:	429a      	cmp	r2, r3
 8017e0c:	d117      	bne.n	8017e3e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017e0e:	69bb      	ldr	r3, [r7, #24]
 8017e10:	6819      	ldr	r1, [r3, #0]
 8017e12:	7dfa      	ldrb	r2, [r7, #23]
 8017e14:	481f      	ldr	r0, [pc, #124]	; (8017e94 <etharp_output+0x200>)
 8017e16:	4613      	mov	r3, r2
 8017e18:	005b      	lsls	r3, r3, #1
 8017e1a:	4413      	add	r3, r2
 8017e1c:	00db      	lsls	r3, r3, #3
 8017e1e:	4403      	add	r3, r0
 8017e20:	3304      	adds	r3, #4
 8017e22:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017e24:	4299      	cmp	r1, r3
 8017e26:	d10a      	bne.n	8017e3e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017e28:	4a19      	ldr	r2, [pc, #100]	; (8017e90 <etharp_output+0x1fc>)
 8017e2a:	7dfb      	ldrb	r3, [r7, #23]
 8017e2c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017e2e:	7dfb      	ldrb	r3, [r7, #23]
 8017e30:	461a      	mov	r2, r3
 8017e32:	68b9      	ldr	r1, [r7, #8]
 8017e34:	68f8      	ldr	r0, [r7, #12]
 8017e36:	f7ff fe93 	bl	8017b60 <etharp_output_to_arp_index>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	e018      	b.n	8017e70 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017e3e:	7dfb      	ldrb	r3, [r7, #23]
 8017e40:	3301      	adds	r3, #1
 8017e42:	75fb      	strb	r3, [r7, #23]
 8017e44:	7dfb      	ldrb	r3, [r7, #23]
 8017e46:	2b09      	cmp	r3, #9
 8017e48:	d9ca      	bls.n	8017de0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017e4a:	68ba      	ldr	r2, [r7, #8]
 8017e4c:	69b9      	ldr	r1, [r7, #24]
 8017e4e:	68f8      	ldr	r0, [r7, #12]
 8017e50:	f000 f822 	bl	8017e98 <etharp_query>
 8017e54:	4603      	mov	r3, r0
 8017e56:	e00b      	b.n	8017e70 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017e5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017e62:	9300      	str	r3, [sp, #0]
 8017e64:	69fb      	ldr	r3, [r7, #28]
 8017e66:	68b9      	ldr	r1, [r7, #8]
 8017e68:	68f8      	ldr	r0, [r7, #12]
 8017e6a:	f001 fd5d 	bl	8019928 <ethernet_output>
 8017e6e:	4603      	mov	r3, r0
}
 8017e70:	4618      	mov	r0, r3
 8017e72:	3720      	adds	r7, #32
 8017e74:	46bd      	mov	sp, r7
 8017e76:	bd80      	pop	{r7, pc}
 8017e78:	0801e298 	.word	0x0801e298
 8017e7c:	0801e3e8 	.word	0x0801e3e8
 8017e80:	0801e310 	.word	0x0801e310
 8017e84:	0801e438 	.word	0x0801e438
 8017e88:	0801e3d8 	.word	0x0801e3d8
 8017e8c:	0801eab0 	.word	0x0801eab0
 8017e90:	20008610 	.word	0x20008610
 8017e94:	20008520 	.word	0x20008520

08017e98 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017e98:	b580      	push	{r7, lr}
 8017e9a:	b08c      	sub	sp, #48	; 0x30
 8017e9c:	af02      	add	r7, sp, #8
 8017e9e:	60f8      	str	r0, [r7, #12]
 8017ea0:	60b9      	str	r1, [r7, #8]
 8017ea2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	332a      	adds	r3, #42	; 0x2a
 8017ea8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8017eaa:	23ff      	movs	r3, #255	; 0xff
 8017eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017eb4:	68bb      	ldr	r3, [r7, #8]
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	68f9      	ldr	r1, [r7, #12]
 8017eba:	4618      	mov	r0, r3
 8017ebc:	f000 fe2c 	bl	8018b18 <ip4_addr_isbroadcast_u32>
 8017ec0:	4603      	mov	r3, r0
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d10c      	bne.n	8017ee0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017ec6:	68bb      	ldr	r3, [r7, #8]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017ece:	2be0      	cmp	r3, #224	; 0xe0
 8017ed0:	d006      	beq.n	8017ee0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017ed2:	68bb      	ldr	r3, [r7, #8]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d003      	beq.n	8017ee0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017ed8:	68bb      	ldr	r3, [r7, #8]
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d102      	bne.n	8017ee6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017ee0:	f06f 030f 	mvn.w	r3, #15
 8017ee4:	e101      	b.n	80180ea <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017ee6:	68fa      	ldr	r2, [r7, #12]
 8017ee8:	2101      	movs	r1, #1
 8017eea:	68b8      	ldr	r0, [r7, #8]
 8017eec:	f7ff fb5c 	bl	80175a8 <etharp_find_entry>
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017ef4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	da02      	bge.n	8017f02 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017efc:	8a7b      	ldrh	r3, [r7, #18]
 8017efe:	b25b      	sxtb	r3, r3
 8017f00:	e0f3      	b.n	80180ea <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017f02:	8a7b      	ldrh	r3, [r7, #18]
 8017f04:	2b7e      	cmp	r3, #126	; 0x7e
 8017f06:	d906      	bls.n	8017f16 <etharp_query+0x7e>
 8017f08:	4b7a      	ldr	r3, [pc, #488]	; (80180f4 <etharp_query+0x25c>)
 8017f0a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017f0e:	497a      	ldr	r1, [pc, #488]	; (80180f8 <etharp_query+0x260>)
 8017f10:	487a      	ldr	r0, [pc, #488]	; (80180fc <etharp_query+0x264>)
 8017f12:	f002 fa9f 	bl	801a454 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017f16:	8a7b      	ldrh	r3, [r7, #18]
 8017f18:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017f1a:	7c7a      	ldrb	r2, [r7, #17]
 8017f1c:	4978      	ldr	r1, [pc, #480]	; (8018100 <etharp_query+0x268>)
 8017f1e:	4613      	mov	r3, r2
 8017f20:	005b      	lsls	r3, r3, #1
 8017f22:	4413      	add	r3, r2
 8017f24:	00db      	lsls	r3, r3, #3
 8017f26:	440b      	add	r3, r1
 8017f28:	3314      	adds	r3, #20
 8017f2a:	781b      	ldrb	r3, [r3, #0]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d115      	bne.n	8017f5c <etharp_query+0xc4>
    is_new_entry = 1;
 8017f30:	2301      	movs	r3, #1
 8017f32:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017f34:	7c7a      	ldrb	r2, [r7, #17]
 8017f36:	4972      	ldr	r1, [pc, #456]	; (8018100 <etharp_query+0x268>)
 8017f38:	4613      	mov	r3, r2
 8017f3a:	005b      	lsls	r3, r3, #1
 8017f3c:	4413      	add	r3, r2
 8017f3e:	00db      	lsls	r3, r3, #3
 8017f40:	440b      	add	r3, r1
 8017f42:	3314      	adds	r3, #20
 8017f44:	2201      	movs	r2, #1
 8017f46:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017f48:	7c7a      	ldrb	r2, [r7, #17]
 8017f4a:	496d      	ldr	r1, [pc, #436]	; (8018100 <etharp_query+0x268>)
 8017f4c:	4613      	mov	r3, r2
 8017f4e:	005b      	lsls	r3, r3, #1
 8017f50:	4413      	add	r3, r2
 8017f52:	00db      	lsls	r3, r3, #3
 8017f54:	440b      	add	r3, r1
 8017f56:	3308      	adds	r3, #8
 8017f58:	68fa      	ldr	r2, [r7, #12]
 8017f5a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017f5c:	7c7a      	ldrb	r2, [r7, #17]
 8017f5e:	4968      	ldr	r1, [pc, #416]	; (8018100 <etharp_query+0x268>)
 8017f60:	4613      	mov	r3, r2
 8017f62:	005b      	lsls	r3, r3, #1
 8017f64:	4413      	add	r3, r2
 8017f66:	00db      	lsls	r3, r3, #3
 8017f68:	440b      	add	r3, r1
 8017f6a:	3314      	adds	r3, #20
 8017f6c:	781b      	ldrb	r3, [r3, #0]
 8017f6e:	2b01      	cmp	r3, #1
 8017f70:	d011      	beq.n	8017f96 <etharp_query+0xfe>
 8017f72:	7c7a      	ldrb	r2, [r7, #17]
 8017f74:	4962      	ldr	r1, [pc, #392]	; (8018100 <etharp_query+0x268>)
 8017f76:	4613      	mov	r3, r2
 8017f78:	005b      	lsls	r3, r3, #1
 8017f7a:	4413      	add	r3, r2
 8017f7c:	00db      	lsls	r3, r3, #3
 8017f7e:	440b      	add	r3, r1
 8017f80:	3314      	adds	r3, #20
 8017f82:	781b      	ldrb	r3, [r3, #0]
 8017f84:	2b01      	cmp	r3, #1
 8017f86:	d806      	bhi.n	8017f96 <etharp_query+0xfe>
 8017f88:	4b5a      	ldr	r3, [pc, #360]	; (80180f4 <etharp_query+0x25c>)
 8017f8a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017f8e:	495d      	ldr	r1, [pc, #372]	; (8018104 <etharp_query+0x26c>)
 8017f90:	485a      	ldr	r0, [pc, #360]	; (80180fc <etharp_query+0x264>)
 8017f92:	f002 fa5f 	bl	801a454 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017f96:	6a3b      	ldr	r3, [r7, #32]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d102      	bne.n	8017fa2 <etharp_query+0x10a>
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d10c      	bne.n	8017fbc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017fa2:	68b9      	ldr	r1, [r7, #8]
 8017fa4:	68f8      	ldr	r0, [r7, #12]
 8017fa6:	f000 f963 	bl	8018270 <etharp_request>
 8017faa:	4603      	mov	r3, r0
 8017fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d102      	bne.n	8017fbc <etharp_query+0x124>
      return result;
 8017fb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017fba:	e096      	b.n	80180ea <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d106      	bne.n	8017fd0 <etharp_query+0x138>
 8017fc2:	4b4c      	ldr	r3, [pc, #304]	; (80180f4 <etharp_query+0x25c>)
 8017fc4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017fc8:	494f      	ldr	r1, [pc, #316]	; (8018108 <etharp_query+0x270>)
 8017fca:	484c      	ldr	r0, [pc, #304]	; (80180fc <etharp_query+0x264>)
 8017fcc:	f002 fa42 	bl	801a454 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017fd0:	7c7a      	ldrb	r2, [r7, #17]
 8017fd2:	494b      	ldr	r1, [pc, #300]	; (8018100 <etharp_query+0x268>)
 8017fd4:	4613      	mov	r3, r2
 8017fd6:	005b      	lsls	r3, r3, #1
 8017fd8:	4413      	add	r3, r2
 8017fda:	00db      	lsls	r3, r3, #3
 8017fdc:	440b      	add	r3, r1
 8017fde:	3314      	adds	r3, #20
 8017fe0:	781b      	ldrb	r3, [r3, #0]
 8017fe2:	2b01      	cmp	r3, #1
 8017fe4:	d917      	bls.n	8018016 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017fe6:	4a49      	ldr	r2, [pc, #292]	; (801810c <etharp_query+0x274>)
 8017fe8:	7c7b      	ldrb	r3, [r7, #17]
 8017fea:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017fec:	7c7a      	ldrb	r2, [r7, #17]
 8017fee:	4613      	mov	r3, r2
 8017ff0:	005b      	lsls	r3, r3, #1
 8017ff2:	4413      	add	r3, r2
 8017ff4:	00db      	lsls	r3, r3, #3
 8017ff6:	3308      	adds	r3, #8
 8017ff8:	4a41      	ldr	r2, [pc, #260]	; (8018100 <etharp_query+0x268>)
 8017ffa:	4413      	add	r3, r2
 8017ffc:	3304      	adds	r3, #4
 8017ffe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018002:	9200      	str	r2, [sp, #0]
 8018004:	697a      	ldr	r2, [r7, #20]
 8018006:	6879      	ldr	r1, [r7, #4]
 8018008:	68f8      	ldr	r0, [r7, #12]
 801800a:	f001 fc8d 	bl	8019928 <ethernet_output>
 801800e:	4603      	mov	r3, r0
 8018010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018014:	e067      	b.n	80180e6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018016:	7c7a      	ldrb	r2, [r7, #17]
 8018018:	4939      	ldr	r1, [pc, #228]	; (8018100 <etharp_query+0x268>)
 801801a:	4613      	mov	r3, r2
 801801c:	005b      	lsls	r3, r3, #1
 801801e:	4413      	add	r3, r2
 8018020:	00db      	lsls	r3, r3, #3
 8018022:	440b      	add	r3, r1
 8018024:	3314      	adds	r3, #20
 8018026:	781b      	ldrb	r3, [r3, #0]
 8018028:	2b01      	cmp	r3, #1
 801802a:	d15c      	bne.n	80180e6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801802c:	2300      	movs	r3, #0
 801802e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018034:	e01c      	b.n	8018070 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018036:	69fb      	ldr	r3, [r7, #28]
 8018038:	895a      	ldrh	r2, [r3, #10]
 801803a:	69fb      	ldr	r3, [r7, #28]
 801803c:	891b      	ldrh	r3, [r3, #8]
 801803e:	429a      	cmp	r2, r3
 8018040:	d10a      	bne.n	8018058 <etharp_query+0x1c0>
 8018042:	69fb      	ldr	r3, [r7, #28]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d006      	beq.n	8018058 <etharp_query+0x1c0>
 801804a:	4b2a      	ldr	r3, [pc, #168]	; (80180f4 <etharp_query+0x25c>)
 801804c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018050:	492f      	ldr	r1, [pc, #188]	; (8018110 <etharp_query+0x278>)
 8018052:	482a      	ldr	r0, [pc, #168]	; (80180fc <etharp_query+0x264>)
 8018054:	f002 f9fe 	bl	801a454 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018058:	69fb      	ldr	r3, [r7, #28]
 801805a:	7b1b      	ldrb	r3, [r3, #12]
 801805c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018060:	2b00      	cmp	r3, #0
 8018062:	d002      	beq.n	801806a <etharp_query+0x1d2>
        copy_needed = 1;
 8018064:	2301      	movs	r3, #1
 8018066:	61bb      	str	r3, [r7, #24]
        break;
 8018068:	e005      	b.n	8018076 <etharp_query+0x1de>
      }
      p = p->next;
 801806a:	69fb      	ldr	r3, [r7, #28]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018070:	69fb      	ldr	r3, [r7, #28]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d1df      	bne.n	8018036 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018076:	69bb      	ldr	r3, [r7, #24]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d007      	beq.n	801808c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801807c:	687a      	ldr	r2, [r7, #4]
 801807e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018082:	200e      	movs	r0, #14
 8018084:	f7f7 fb64 	bl	800f750 <pbuf_clone>
 8018088:	61f8      	str	r0, [r7, #28]
 801808a:	e004      	b.n	8018096 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018090:	69f8      	ldr	r0, [r7, #28]
 8018092:	f7f7 f98b 	bl	800f3ac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018096:	69fb      	ldr	r3, [r7, #28]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d021      	beq.n	80180e0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801809c:	7c7a      	ldrb	r2, [r7, #17]
 801809e:	4918      	ldr	r1, [pc, #96]	; (8018100 <etharp_query+0x268>)
 80180a0:	4613      	mov	r3, r2
 80180a2:	005b      	lsls	r3, r3, #1
 80180a4:	4413      	add	r3, r2
 80180a6:	00db      	lsls	r3, r3, #3
 80180a8:	440b      	add	r3, r1
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d00a      	beq.n	80180c6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80180b0:	7c7a      	ldrb	r2, [r7, #17]
 80180b2:	4913      	ldr	r1, [pc, #76]	; (8018100 <etharp_query+0x268>)
 80180b4:	4613      	mov	r3, r2
 80180b6:	005b      	lsls	r3, r3, #1
 80180b8:	4413      	add	r3, r2
 80180ba:	00db      	lsls	r3, r3, #3
 80180bc:	440b      	add	r3, r1
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	4618      	mov	r0, r3
 80180c2:	f7f7 f8cd 	bl	800f260 <pbuf_free>
      }
      arp_table[i].q = p;
 80180c6:	7c7a      	ldrb	r2, [r7, #17]
 80180c8:	490d      	ldr	r1, [pc, #52]	; (8018100 <etharp_query+0x268>)
 80180ca:	4613      	mov	r3, r2
 80180cc:	005b      	lsls	r3, r3, #1
 80180ce:	4413      	add	r3, r2
 80180d0:	00db      	lsls	r3, r3, #3
 80180d2:	440b      	add	r3, r1
 80180d4:	69fa      	ldr	r2, [r7, #28]
 80180d6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80180d8:	2300      	movs	r3, #0
 80180da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80180de:	e002      	b.n	80180e6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80180e0:	23ff      	movs	r3, #255	; 0xff
 80180e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80180e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80180ea:	4618      	mov	r0, r3
 80180ec:	3728      	adds	r7, #40	; 0x28
 80180ee:	46bd      	mov	sp, r7
 80180f0:	bd80      	pop	{r7, pc}
 80180f2:	bf00      	nop
 80180f4:	0801e298 	.word	0x0801e298
 80180f8:	0801e444 	.word	0x0801e444
 80180fc:	0801e310 	.word	0x0801e310
 8018100:	20008520 	.word	0x20008520
 8018104:	0801e454 	.word	0x0801e454
 8018108:	0801e438 	.word	0x0801e438
 801810c:	20008610 	.word	0x20008610
 8018110:	0801e47c 	.word	0x0801e47c

08018114 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b08a      	sub	sp, #40	; 0x28
 8018118:	af02      	add	r7, sp, #8
 801811a:	60f8      	str	r0, [r7, #12]
 801811c:	60b9      	str	r1, [r7, #8]
 801811e:	607a      	str	r2, [r7, #4]
 8018120:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018122:	2300      	movs	r3, #0
 8018124:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d106      	bne.n	801813a <etharp_raw+0x26>
 801812c:	4b3a      	ldr	r3, [pc, #232]	; (8018218 <etharp_raw+0x104>)
 801812e:	f240 4257 	movw	r2, #1111	; 0x457
 8018132:	493a      	ldr	r1, [pc, #232]	; (801821c <etharp_raw+0x108>)
 8018134:	483a      	ldr	r0, [pc, #232]	; (8018220 <etharp_raw+0x10c>)
 8018136:	f002 f98d 	bl	801a454 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801813a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801813e:	211c      	movs	r1, #28
 8018140:	200e      	movs	r0, #14
 8018142:	f7f6 fda9 	bl	800ec98 <pbuf_alloc>
 8018146:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018148:	69bb      	ldr	r3, [r7, #24]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d102      	bne.n	8018154 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801814e:	f04f 33ff 	mov.w	r3, #4294967295
 8018152:	e05d      	b.n	8018210 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018154:	69bb      	ldr	r3, [r7, #24]
 8018156:	895b      	ldrh	r3, [r3, #10]
 8018158:	2b1b      	cmp	r3, #27
 801815a:	d806      	bhi.n	801816a <etharp_raw+0x56>
 801815c:	4b2e      	ldr	r3, [pc, #184]	; (8018218 <etharp_raw+0x104>)
 801815e:	f240 4262 	movw	r2, #1122	; 0x462
 8018162:	4930      	ldr	r1, [pc, #192]	; (8018224 <etharp_raw+0x110>)
 8018164:	482e      	ldr	r0, [pc, #184]	; (8018220 <etharp_raw+0x10c>)
 8018166:	f002 f975 	bl	801a454 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801816a:	69bb      	ldr	r3, [r7, #24]
 801816c:	685b      	ldr	r3, [r3, #4]
 801816e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018170:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018172:	4618      	mov	r0, r3
 8018174:	f7f5 fcbc 	bl	800daf0 <lwip_htons>
 8018178:	4603      	mov	r3, r0
 801817a:	461a      	mov	r2, r3
 801817c:	697b      	ldr	r3, [r7, #20]
 801817e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018186:	2b06      	cmp	r3, #6
 8018188:	d006      	beq.n	8018198 <etharp_raw+0x84>
 801818a:	4b23      	ldr	r3, [pc, #140]	; (8018218 <etharp_raw+0x104>)
 801818c:	f240 4269 	movw	r2, #1129	; 0x469
 8018190:	4925      	ldr	r1, [pc, #148]	; (8018228 <etharp_raw+0x114>)
 8018192:	4823      	ldr	r0, [pc, #140]	; (8018220 <etharp_raw+0x10c>)
 8018194:	f002 f95e 	bl	801a454 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018198:	697b      	ldr	r3, [r7, #20]
 801819a:	3308      	adds	r3, #8
 801819c:	2206      	movs	r2, #6
 801819e:	6839      	ldr	r1, [r7, #0]
 80181a0:	4618      	mov	r0, r3
 80181a2:	f002 f897 	bl	801a2d4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80181a6:	697b      	ldr	r3, [r7, #20]
 80181a8:	3312      	adds	r3, #18
 80181aa:	2206      	movs	r2, #6
 80181ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80181ae:	4618      	mov	r0, r3
 80181b0:	f002 f890 	bl	801a2d4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80181b4:	697b      	ldr	r3, [r7, #20]
 80181b6:	330e      	adds	r3, #14
 80181b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80181ba:	6812      	ldr	r2, [r2, #0]
 80181bc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80181be:	697b      	ldr	r3, [r7, #20]
 80181c0:	3318      	adds	r3, #24
 80181c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80181c4:	6812      	ldr	r2, [r2, #0]
 80181c6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80181c8:	697b      	ldr	r3, [r7, #20]
 80181ca:	2200      	movs	r2, #0
 80181cc:	701a      	strb	r2, [r3, #0]
 80181ce:	2200      	movs	r2, #0
 80181d0:	f042 0201 	orr.w	r2, r2, #1
 80181d4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80181d6:	697b      	ldr	r3, [r7, #20]
 80181d8:	2200      	movs	r2, #0
 80181da:	f042 0208 	orr.w	r2, r2, #8
 80181de:	709a      	strb	r2, [r3, #2]
 80181e0:	2200      	movs	r2, #0
 80181e2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80181e4:	697b      	ldr	r3, [r7, #20]
 80181e6:	2206      	movs	r2, #6
 80181e8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80181ea:	697b      	ldr	r3, [r7, #20]
 80181ec:	2204      	movs	r2, #4
 80181ee:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80181f0:	f640 0306 	movw	r3, #2054	; 0x806
 80181f4:	9300      	str	r3, [sp, #0]
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	68ba      	ldr	r2, [r7, #8]
 80181fa:	69b9      	ldr	r1, [r7, #24]
 80181fc:	68f8      	ldr	r0, [r7, #12]
 80181fe:	f001 fb93 	bl	8019928 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018202:	69b8      	ldr	r0, [r7, #24]
 8018204:	f7f7 f82c 	bl	800f260 <pbuf_free>
  p = NULL;
 8018208:	2300      	movs	r3, #0
 801820a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801820c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018210:	4618      	mov	r0, r3
 8018212:	3720      	adds	r7, #32
 8018214:	46bd      	mov	sp, r7
 8018216:	bd80      	pop	{r7, pc}
 8018218:	0801e298 	.word	0x0801e298
 801821c:	0801e3e8 	.word	0x0801e3e8
 8018220:	0801e310 	.word	0x0801e310
 8018224:	0801e498 	.word	0x0801e498
 8018228:	0801e4cc 	.word	0x0801e4cc

0801822c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801822c:	b580      	push	{r7, lr}
 801822e:	b088      	sub	sp, #32
 8018230:	af04      	add	r7, sp, #16
 8018232:	60f8      	str	r0, [r7, #12]
 8018234:	60b9      	str	r1, [r7, #8]
 8018236:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801823e:	68fb      	ldr	r3, [r7, #12]
 8018240:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018248:	2201      	movs	r2, #1
 801824a:	9203      	str	r2, [sp, #12]
 801824c:	68ba      	ldr	r2, [r7, #8]
 801824e:	9202      	str	r2, [sp, #8]
 8018250:	4a06      	ldr	r2, [pc, #24]	; (801826c <etharp_request_dst+0x40>)
 8018252:	9201      	str	r2, [sp, #4]
 8018254:	9300      	str	r3, [sp, #0]
 8018256:	4603      	mov	r3, r0
 8018258:	687a      	ldr	r2, [r7, #4]
 801825a:	68f8      	ldr	r0, [r7, #12]
 801825c:	f7ff ff5a 	bl	8018114 <etharp_raw>
 8018260:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018262:	4618      	mov	r0, r3
 8018264:	3710      	adds	r7, #16
 8018266:	46bd      	mov	sp, r7
 8018268:	bd80      	pop	{r7, pc}
 801826a:	bf00      	nop
 801826c:	0801eab8 	.word	0x0801eab8

08018270 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018270:	b580      	push	{r7, lr}
 8018272:	b082      	sub	sp, #8
 8018274:	af00      	add	r7, sp, #0
 8018276:	6078      	str	r0, [r7, #4]
 8018278:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801827a:	4a05      	ldr	r2, [pc, #20]	; (8018290 <etharp_request+0x20>)
 801827c:	6839      	ldr	r1, [r7, #0]
 801827e:	6878      	ldr	r0, [r7, #4]
 8018280:	f7ff ffd4 	bl	801822c <etharp_request_dst>
 8018284:	4603      	mov	r3, r0
}
 8018286:	4618      	mov	r0, r3
 8018288:	3708      	adds	r7, #8
 801828a:	46bd      	mov	sp, r7
 801828c:	bd80      	pop	{r7, pc}
 801828e:	bf00      	nop
 8018290:	0801eab0 	.word	0x0801eab0

08018294 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018294:	b580      	push	{r7, lr}
 8018296:	b08e      	sub	sp, #56	; 0x38
 8018298:	af04      	add	r7, sp, #16
 801829a:	6078      	str	r0, [r7, #4]
 801829c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801829e:	4b79      	ldr	r3, [pc, #484]	; (8018484 <icmp_input+0x1f0>)
 80182a0:	689b      	ldr	r3, [r3, #8]
 80182a2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80182a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a6:	781b      	ldrb	r3, [r3, #0]
 80182a8:	f003 030f 	and.w	r3, r3, #15
 80182ac:	b2db      	uxtb	r3, r3
 80182ae:	009b      	lsls	r3, r3, #2
 80182b0:	b2db      	uxtb	r3, r3
 80182b2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80182b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80182b6:	2b13      	cmp	r3, #19
 80182b8:	f240 80cd 	bls.w	8018456 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	895b      	ldrh	r3, [r3, #10]
 80182c0:	2b03      	cmp	r3, #3
 80182c2:	f240 80ca 	bls.w	801845a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	685b      	ldr	r3, [r3, #4]
 80182ca:	781b      	ldrb	r3, [r3, #0]
 80182cc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80182d0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	f000 80b7 	beq.w	8018448 <icmp_input+0x1b4>
 80182da:	2b08      	cmp	r3, #8
 80182dc:	f040 80b7 	bne.w	801844e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80182e0:	4b69      	ldr	r3, [pc, #420]	; (8018488 <icmp_input+0x1f4>)
 80182e2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80182e4:	4b67      	ldr	r3, [pc, #412]	; (8018484 <icmp_input+0x1f0>)
 80182e6:	695b      	ldr	r3, [r3, #20]
 80182e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80182ec:	2be0      	cmp	r3, #224	; 0xe0
 80182ee:	f000 80bb 	beq.w	8018468 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80182f2:	4b64      	ldr	r3, [pc, #400]	; (8018484 <icmp_input+0x1f0>)
 80182f4:	695b      	ldr	r3, [r3, #20]
 80182f6:	4a63      	ldr	r2, [pc, #396]	; (8018484 <icmp_input+0x1f0>)
 80182f8:	6812      	ldr	r2, [r2, #0]
 80182fa:	4611      	mov	r1, r2
 80182fc:	4618      	mov	r0, r3
 80182fe:	f000 fc0b 	bl	8018b18 <ip4_addr_isbroadcast_u32>
 8018302:	4603      	mov	r3, r0
 8018304:	2b00      	cmp	r3, #0
 8018306:	f040 80b1 	bne.w	801846c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	891b      	ldrh	r3, [r3, #8]
 801830e:	2b07      	cmp	r3, #7
 8018310:	f240 80a5 	bls.w	801845e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018314:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018316:	330e      	adds	r3, #14
 8018318:	4619      	mov	r1, r3
 801831a:	6878      	ldr	r0, [r7, #4]
 801831c:	f7f6 ff0a 	bl	800f134 <pbuf_add_header>
 8018320:	4603      	mov	r3, r0
 8018322:	2b00      	cmp	r3, #0
 8018324:	d04b      	beq.n	80183be <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	891a      	ldrh	r2, [r3, #8]
 801832a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801832c:	4413      	add	r3, r2
 801832e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	891b      	ldrh	r3, [r3, #8]
 8018334:	8b7a      	ldrh	r2, [r7, #26]
 8018336:	429a      	cmp	r2, r3
 8018338:	f0c0 809a 	bcc.w	8018470 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801833c:	8b7b      	ldrh	r3, [r7, #26]
 801833e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018342:	4619      	mov	r1, r3
 8018344:	200e      	movs	r0, #14
 8018346:	f7f6 fca7 	bl	800ec98 <pbuf_alloc>
 801834a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801834c:	697b      	ldr	r3, [r7, #20]
 801834e:	2b00      	cmp	r3, #0
 8018350:	f000 8090 	beq.w	8018474 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018354:	697b      	ldr	r3, [r7, #20]
 8018356:	895b      	ldrh	r3, [r3, #10]
 8018358:	461a      	mov	r2, r3
 801835a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801835c:	3308      	adds	r3, #8
 801835e:	429a      	cmp	r2, r3
 8018360:	d203      	bcs.n	801836a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018362:	6978      	ldr	r0, [r7, #20]
 8018364:	f7f6 ff7c 	bl	800f260 <pbuf_free>
          goto icmperr;
 8018368:	e085      	b.n	8018476 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801836a:	697b      	ldr	r3, [r7, #20]
 801836c:	685b      	ldr	r3, [r3, #4]
 801836e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018372:	4618      	mov	r0, r3
 8018374:	f001 ffae 	bl	801a2d4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018378:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801837a:	4619      	mov	r1, r3
 801837c:	6978      	ldr	r0, [r7, #20]
 801837e:	f7f6 fee9 	bl	800f154 <pbuf_remove_header>
 8018382:	4603      	mov	r3, r0
 8018384:	2b00      	cmp	r3, #0
 8018386:	d009      	beq.n	801839c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018388:	4b40      	ldr	r3, [pc, #256]	; (801848c <icmp_input+0x1f8>)
 801838a:	22b6      	movs	r2, #182	; 0xb6
 801838c:	4940      	ldr	r1, [pc, #256]	; (8018490 <icmp_input+0x1fc>)
 801838e:	4841      	ldr	r0, [pc, #260]	; (8018494 <icmp_input+0x200>)
 8018390:	f002 f860 	bl	801a454 <iprintf>
          pbuf_free(r);
 8018394:	6978      	ldr	r0, [r7, #20]
 8018396:	f7f6 ff63 	bl	800f260 <pbuf_free>
          goto icmperr;
 801839a:	e06c      	b.n	8018476 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801839c:	6879      	ldr	r1, [r7, #4]
 801839e:	6978      	ldr	r0, [r7, #20]
 80183a0:	f7f7 f892 	bl	800f4c8 <pbuf_copy>
 80183a4:	4603      	mov	r3, r0
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d003      	beq.n	80183b2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80183aa:	6978      	ldr	r0, [r7, #20]
 80183ac:	f7f6 ff58 	bl	800f260 <pbuf_free>
          goto icmperr;
 80183b0:	e061      	b.n	8018476 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80183b2:	6878      	ldr	r0, [r7, #4]
 80183b4:	f7f6 ff54 	bl	800f260 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80183b8:	697b      	ldr	r3, [r7, #20]
 80183ba:	607b      	str	r3, [r7, #4]
 80183bc:	e00f      	b.n	80183de <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80183be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80183c0:	330e      	adds	r3, #14
 80183c2:	4619      	mov	r1, r3
 80183c4:	6878      	ldr	r0, [r7, #4]
 80183c6:	f7f6 fec5 	bl	800f154 <pbuf_remove_header>
 80183ca:	4603      	mov	r3, r0
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d006      	beq.n	80183de <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80183d0:	4b2e      	ldr	r3, [pc, #184]	; (801848c <icmp_input+0x1f8>)
 80183d2:	22c7      	movs	r2, #199	; 0xc7
 80183d4:	4930      	ldr	r1, [pc, #192]	; (8018498 <icmp_input+0x204>)
 80183d6:	482f      	ldr	r0, [pc, #188]	; (8018494 <icmp_input+0x200>)
 80183d8:	f002 f83c 	bl	801a454 <iprintf>
          goto icmperr;
 80183dc:	e04b      	b.n	8018476 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	685b      	ldr	r3, [r3, #4]
 80183e2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80183e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80183e6:	4619      	mov	r1, r3
 80183e8:	6878      	ldr	r0, [r7, #4]
 80183ea:	f7f6 fea3 	bl	800f134 <pbuf_add_header>
 80183ee:	4603      	mov	r3, r0
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d12b      	bne.n	801844c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	685b      	ldr	r3, [r3, #4]
 80183f8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80183fa:	69fb      	ldr	r3, [r7, #28]
 80183fc:	681a      	ldr	r2, [r3, #0]
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018402:	4b20      	ldr	r3, [pc, #128]	; (8018484 <icmp_input+0x1f0>)
 8018404:	691a      	ldr	r2, [r3, #16]
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801840a:	693b      	ldr	r3, [r7, #16]
 801840c:	2200      	movs	r2, #0
 801840e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8018410:	693b      	ldr	r3, [r7, #16]
 8018412:	2200      	movs	r2, #0
 8018414:	709a      	strb	r2, [r3, #2]
 8018416:	2200      	movs	r2, #0
 8018418:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	22ff      	movs	r2, #255	; 0xff
 801841e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	2200      	movs	r2, #0
 8018424:	729a      	strb	r2, [r3, #10]
 8018426:	2200      	movs	r2, #0
 8018428:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801842a:	683b      	ldr	r3, [r7, #0]
 801842c:	9302      	str	r3, [sp, #8]
 801842e:	2301      	movs	r3, #1
 8018430:	9301      	str	r3, [sp, #4]
 8018432:	2300      	movs	r3, #0
 8018434:	9300      	str	r3, [sp, #0]
 8018436:	23ff      	movs	r3, #255	; 0xff
 8018438:	2200      	movs	r2, #0
 801843a:	69f9      	ldr	r1, [r7, #28]
 801843c:	6878      	ldr	r0, [r7, #4]
 801843e:	f000 fa93 	bl	8018968 <ip4_output_if>
 8018442:	4603      	mov	r3, r0
 8018444:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018446:	e001      	b.n	801844c <icmp_input+0x1b8>
      break;
 8018448:	bf00      	nop
 801844a:	e000      	b.n	801844e <icmp_input+0x1ba>
      break;
 801844c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801844e:	6878      	ldr	r0, [r7, #4]
 8018450:	f7f6 ff06 	bl	800f260 <pbuf_free>
  return;
 8018454:	e013      	b.n	801847e <icmp_input+0x1ea>
    goto lenerr;
 8018456:	bf00      	nop
 8018458:	e002      	b.n	8018460 <icmp_input+0x1cc>
    goto lenerr;
 801845a:	bf00      	nop
 801845c:	e000      	b.n	8018460 <icmp_input+0x1cc>
        goto lenerr;
 801845e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018460:	6878      	ldr	r0, [r7, #4]
 8018462:	f7f6 fefd 	bl	800f260 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018466:	e00a      	b.n	801847e <icmp_input+0x1ea>
        goto icmperr;
 8018468:	bf00      	nop
 801846a:	e004      	b.n	8018476 <icmp_input+0x1e2>
        goto icmperr;
 801846c:	bf00      	nop
 801846e:	e002      	b.n	8018476 <icmp_input+0x1e2>
          goto icmperr;
 8018470:	bf00      	nop
 8018472:	e000      	b.n	8018476 <icmp_input+0x1e2>
          goto icmperr;
 8018474:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018476:	6878      	ldr	r0, [r7, #4]
 8018478:	f7f6 fef2 	bl	800f260 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801847c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801847e:	3728      	adds	r7, #40	; 0x28
 8018480:	46bd      	mov	sp, r7
 8018482:	bd80      	pop	{r7, pc}
 8018484:	2000bc60 	.word	0x2000bc60
 8018488:	2000bc74 	.word	0x2000bc74
 801848c:	0801e510 	.word	0x0801e510
 8018490:	0801e548 	.word	0x0801e548
 8018494:	0801e580 	.word	0x0801e580
 8018498:	0801e5a8 	.word	0x0801e5a8

0801849c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801849c:	b580      	push	{r7, lr}
 801849e:	b082      	sub	sp, #8
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	6078      	str	r0, [r7, #4]
 80184a4:	460b      	mov	r3, r1
 80184a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80184a8:	78fb      	ldrb	r3, [r7, #3]
 80184aa:	461a      	mov	r2, r3
 80184ac:	2103      	movs	r1, #3
 80184ae:	6878      	ldr	r0, [r7, #4]
 80184b0:	f000 f814 	bl	80184dc <icmp_send_response>
}
 80184b4:	bf00      	nop
 80184b6:	3708      	adds	r7, #8
 80184b8:	46bd      	mov	sp, r7
 80184ba:	bd80      	pop	{r7, pc}

080184bc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80184bc:	b580      	push	{r7, lr}
 80184be:	b082      	sub	sp, #8
 80184c0:	af00      	add	r7, sp, #0
 80184c2:	6078      	str	r0, [r7, #4]
 80184c4:	460b      	mov	r3, r1
 80184c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80184c8:	78fb      	ldrb	r3, [r7, #3]
 80184ca:	461a      	mov	r2, r3
 80184cc:	210b      	movs	r1, #11
 80184ce:	6878      	ldr	r0, [r7, #4]
 80184d0:	f000 f804 	bl	80184dc <icmp_send_response>
}
 80184d4:	bf00      	nop
 80184d6:	3708      	adds	r7, #8
 80184d8:	46bd      	mov	sp, r7
 80184da:	bd80      	pop	{r7, pc}

080184dc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b08c      	sub	sp, #48	; 0x30
 80184e0:	af04      	add	r7, sp, #16
 80184e2:	6078      	str	r0, [r7, #4]
 80184e4:	460b      	mov	r3, r1
 80184e6:	70fb      	strb	r3, [r7, #3]
 80184e8:	4613      	mov	r3, r2
 80184ea:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80184ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 80184f0:	2124      	movs	r1, #36	; 0x24
 80184f2:	2022      	movs	r0, #34	; 0x22
 80184f4:	f7f6 fbd0 	bl	800ec98 <pbuf_alloc>
 80184f8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80184fa:	69fb      	ldr	r3, [r7, #28]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d04c      	beq.n	801859a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018500:	69fb      	ldr	r3, [r7, #28]
 8018502:	895b      	ldrh	r3, [r3, #10]
 8018504:	2b23      	cmp	r3, #35	; 0x23
 8018506:	d806      	bhi.n	8018516 <icmp_send_response+0x3a>
 8018508:	4b26      	ldr	r3, [pc, #152]	; (80185a4 <icmp_send_response+0xc8>)
 801850a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801850e:	4926      	ldr	r1, [pc, #152]	; (80185a8 <icmp_send_response+0xcc>)
 8018510:	4826      	ldr	r0, [pc, #152]	; (80185ac <icmp_send_response+0xd0>)
 8018512:	f001 ff9f 	bl	801a454 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	685b      	ldr	r3, [r3, #4]
 801851a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801851c:	69fb      	ldr	r3, [r7, #28]
 801851e:	685b      	ldr	r3, [r3, #4]
 8018520:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018522:	697b      	ldr	r3, [r7, #20]
 8018524:	78fa      	ldrb	r2, [r7, #3]
 8018526:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018528:	697b      	ldr	r3, [r7, #20]
 801852a:	78ba      	ldrb	r2, [r7, #2]
 801852c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801852e:	697b      	ldr	r3, [r7, #20]
 8018530:	2200      	movs	r2, #0
 8018532:	711a      	strb	r2, [r3, #4]
 8018534:	2200      	movs	r2, #0
 8018536:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018538:	697b      	ldr	r3, [r7, #20]
 801853a:	2200      	movs	r2, #0
 801853c:	719a      	strb	r2, [r3, #6]
 801853e:	2200      	movs	r2, #0
 8018540:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018542:	69fb      	ldr	r3, [r7, #28]
 8018544:	685b      	ldr	r3, [r3, #4]
 8018546:	f103 0008 	add.w	r0, r3, #8
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	685b      	ldr	r3, [r3, #4]
 801854e:	221c      	movs	r2, #28
 8018550:	4619      	mov	r1, r3
 8018552:	f001 febf 	bl	801a2d4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018556:	69bb      	ldr	r3, [r7, #24]
 8018558:	68db      	ldr	r3, [r3, #12]
 801855a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801855c:	f107 030c 	add.w	r3, r7, #12
 8018560:	4618      	mov	r0, r3
 8018562:	f000 f825 	bl	80185b0 <ip4_route>
 8018566:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018568:	693b      	ldr	r3, [r7, #16]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d011      	beq.n	8018592 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801856e:	697b      	ldr	r3, [r7, #20]
 8018570:	2200      	movs	r2, #0
 8018572:	709a      	strb	r2, [r3, #2]
 8018574:	2200      	movs	r2, #0
 8018576:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018578:	f107 020c 	add.w	r2, r7, #12
 801857c:	693b      	ldr	r3, [r7, #16]
 801857e:	9302      	str	r3, [sp, #8]
 8018580:	2301      	movs	r3, #1
 8018582:	9301      	str	r3, [sp, #4]
 8018584:	2300      	movs	r3, #0
 8018586:	9300      	str	r3, [sp, #0]
 8018588:	23ff      	movs	r3, #255	; 0xff
 801858a:	2100      	movs	r1, #0
 801858c:	69f8      	ldr	r0, [r7, #28]
 801858e:	f000 f9eb 	bl	8018968 <ip4_output_if>
  }
  pbuf_free(q);
 8018592:	69f8      	ldr	r0, [r7, #28]
 8018594:	f7f6 fe64 	bl	800f260 <pbuf_free>
 8018598:	e000      	b.n	801859c <icmp_send_response+0xc0>
    return;
 801859a:	bf00      	nop
}
 801859c:	3720      	adds	r7, #32
 801859e:	46bd      	mov	sp, r7
 80185a0:	bd80      	pop	{r7, pc}
 80185a2:	bf00      	nop
 80185a4:	0801e510 	.word	0x0801e510
 80185a8:	0801e5dc 	.word	0x0801e5dc
 80185ac:	0801e580 	.word	0x0801e580

080185b0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80185b0:	b480      	push	{r7}
 80185b2:	b085      	sub	sp, #20
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80185b8:	4b33      	ldr	r3, [pc, #204]	; (8018688 <ip4_route+0xd8>)
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	60fb      	str	r3, [r7, #12]
 80185be:	e036      	b.n	801862e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80185c6:	f003 0301 	and.w	r3, r3, #1
 80185ca:	b2db      	uxtb	r3, r3
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d02b      	beq.n	8018628 <ip4_route+0x78>
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80185d6:	089b      	lsrs	r3, r3, #2
 80185d8:	f003 0301 	and.w	r3, r3, #1
 80185dc:	b2db      	uxtb	r3, r3
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d022      	beq.n	8018628 <ip4_route+0x78>
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	3304      	adds	r3, #4
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d01d      	beq.n	8018628 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	681a      	ldr	r2, [r3, #0]
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	3304      	adds	r3, #4
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	405a      	eors	r2, r3
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	3308      	adds	r3, #8
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	4013      	ands	r3, r2
 8018600:	2b00      	cmp	r3, #0
 8018602:	d101      	bne.n	8018608 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	e038      	b.n	801867a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801860e:	f003 0302 	and.w	r3, r3, #2
 8018612:	2b00      	cmp	r3, #0
 8018614:	d108      	bne.n	8018628 <ip4_route+0x78>
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	681a      	ldr	r2, [r3, #0]
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	330c      	adds	r3, #12
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	429a      	cmp	r2, r3
 8018622:	d101      	bne.n	8018628 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	e028      	b.n	801867a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	60fb      	str	r3, [r7, #12]
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d1c5      	bne.n	80185c0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018634:	4b15      	ldr	r3, [pc, #84]	; (801868c <ip4_route+0xdc>)
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	2b00      	cmp	r3, #0
 801863a:	d01a      	beq.n	8018672 <ip4_route+0xc2>
 801863c:	4b13      	ldr	r3, [pc, #76]	; (801868c <ip4_route+0xdc>)
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018644:	f003 0301 	and.w	r3, r3, #1
 8018648:	2b00      	cmp	r3, #0
 801864a:	d012      	beq.n	8018672 <ip4_route+0xc2>
 801864c:	4b0f      	ldr	r3, [pc, #60]	; (801868c <ip4_route+0xdc>)
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018654:	f003 0304 	and.w	r3, r3, #4
 8018658:	2b00      	cmp	r3, #0
 801865a:	d00a      	beq.n	8018672 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801865c:	4b0b      	ldr	r3, [pc, #44]	; (801868c <ip4_route+0xdc>)
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	3304      	adds	r3, #4
 8018662:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018664:	2b00      	cmp	r3, #0
 8018666:	d004      	beq.n	8018672 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	b2db      	uxtb	r3, r3
 801866e:	2b7f      	cmp	r3, #127	; 0x7f
 8018670:	d101      	bne.n	8018676 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018672:	2300      	movs	r3, #0
 8018674:	e001      	b.n	801867a <ip4_route+0xca>
  }

  return netif_default;
 8018676:	4b05      	ldr	r3, [pc, #20]	; (801868c <ip4_route+0xdc>)
 8018678:	681b      	ldr	r3, [r3, #0]
}
 801867a:	4618      	mov	r0, r3
 801867c:	3714      	adds	r7, #20
 801867e:	46bd      	mov	sp, r7
 8018680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018684:	4770      	bx	lr
 8018686:	bf00      	nop
 8018688:	2000f384 	.word	0x2000f384
 801868c:	2000f388 	.word	0x2000f388

08018690 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018690:	b580      	push	{r7, lr}
 8018692:	b082      	sub	sp, #8
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801869e:	f003 0301 	and.w	r3, r3, #1
 80186a2:	b2db      	uxtb	r3, r3
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d016      	beq.n	80186d6 <ip4_input_accept+0x46>
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	3304      	adds	r3, #4
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d011      	beq.n	80186d6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80186b2:	4b0b      	ldr	r3, [pc, #44]	; (80186e0 <ip4_input_accept+0x50>)
 80186b4:	695a      	ldr	r2, [r3, #20]
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	3304      	adds	r3, #4
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	429a      	cmp	r2, r3
 80186be:	d008      	beq.n	80186d2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80186c0:	4b07      	ldr	r3, [pc, #28]	; (80186e0 <ip4_input_accept+0x50>)
 80186c2:	695b      	ldr	r3, [r3, #20]
 80186c4:	6879      	ldr	r1, [r7, #4]
 80186c6:	4618      	mov	r0, r3
 80186c8:	f000 fa26 	bl	8018b18 <ip4_addr_isbroadcast_u32>
 80186cc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d001      	beq.n	80186d6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80186d2:	2301      	movs	r3, #1
 80186d4:	e000      	b.n	80186d8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80186d6:	2300      	movs	r3, #0
}
 80186d8:	4618      	mov	r0, r3
 80186da:	3708      	adds	r7, #8
 80186dc:	46bd      	mov	sp, r7
 80186de:	bd80      	pop	{r7, pc}
 80186e0:	2000bc60 	.word	0x2000bc60

080186e4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b088      	sub	sp, #32
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
 80186ec:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80186ee:	2301      	movs	r3, #1
 80186f0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	685b      	ldr	r3, [r3, #4]
 80186f6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80186f8:	69fb      	ldr	r3, [r7, #28]
 80186fa:	781b      	ldrb	r3, [r3, #0]
 80186fc:	091b      	lsrs	r3, r3, #4
 80186fe:	b2db      	uxtb	r3, r3
 8018700:	2b04      	cmp	r3, #4
 8018702:	d004      	beq.n	801870e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018704:	6878      	ldr	r0, [r7, #4]
 8018706:	f7f6 fdab 	bl	800f260 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801870a:	2300      	movs	r3, #0
 801870c:	e123      	b.n	8018956 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801870e:	69fb      	ldr	r3, [r7, #28]
 8018710:	781b      	ldrb	r3, [r3, #0]
 8018712:	f003 030f 	and.w	r3, r3, #15
 8018716:	b2db      	uxtb	r3, r3
 8018718:	009b      	lsls	r3, r3, #2
 801871a:	b2db      	uxtb	r3, r3
 801871c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801871e:	69fb      	ldr	r3, [r7, #28]
 8018720:	885b      	ldrh	r3, [r3, #2]
 8018722:	b29b      	uxth	r3, r3
 8018724:	4618      	mov	r0, r3
 8018726:	f7f5 f9e3 	bl	800daf0 <lwip_htons>
 801872a:	4603      	mov	r3, r0
 801872c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	891b      	ldrh	r3, [r3, #8]
 8018732:	8a3a      	ldrh	r2, [r7, #16]
 8018734:	429a      	cmp	r2, r3
 8018736:	d204      	bcs.n	8018742 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8018738:	8a3b      	ldrh	r3, [r7, #16]
 801873a:	4619      	mov	r1, r3
 801873c:	6878      	ldr	r0, [r7, #4]
 801873e:	f7f6 fc09 	bl	800ef54 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	895b      	ldrh	r3, [r3, #10]
 8018746:	8a7a      	ldrh	r2, [r7, #18]
 8018748:	429a      	cmp	r2, r3
 801874a:	d807      	bhi.n	801875c <ip4_input+0x78>
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	891b      	ldrh	r3, [r3, #8]
 8018750:	8a3a      	ldrh	r2, [r7, #16]
 8018752:	429a      	cmp	r2, r3
 8018754:	d802      	bhi.n	801875c <ip4_input+0x78>
 8018756:	8a7b      	ldrh	r3, [r7, #18]
 8018758:	2b13      	cmp	r3, #19
 801875a:	d804      	bhi.n	8018766 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801875c:	6878      	ldr	r0, [r7, #4]
 801875e:	f7f6 fd7f 	bl	800f260 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018762:	2300      	movs	r3, #0
 8018764:	e0f7      	b.n	8018956 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018766:	69fb      	ldr	r3, [r7, #28]
 8018768:	691b      	ldr	r3, [r3, #16]
 801876a:	4a7d      	ldr	r2, [pc, #500]	; (8018960 <ip4_input+0x27c>)
 801876c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801876e:	69fb      	ldr	r3, [r7, #28]
 8018770:	68db      	ldr	r3, [r3, #12]
 8018772:	4a7b      	ldr	r2, [pc, #492]	; (8018960 <ip4_input+0x27c>)
 8018774:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018776:	4b7a      	ldr	r3, [pc, #488]	; (8018960 <ip4_input+0x27c>)
 8018778:	695b      	ldr	r3, [r3, #20]
 801877a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801877e:	2be0      	cmp	r3, #224	; 0xe0
 8018780:	d112      	bne.n	80187a8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018782:	683b      	ldr	r3, [r7, #0]
 8018784:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018788:	f003 0301 	and.w	r3, r3, #1
 801878c:	b2db      	uxtb	r3, r3
 801878e:	2b00      	cmp	r3, #0
 8018790:	d007      	beq.n	80187a2 <ip4_input+0xbe>
 8018792:	683b      	ldr	r3, [r7, #0]
 8018794:	3304      	adds	r3, #4
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d002      	beq.n	80187a2 <ip4_input+0xbe>
      netif = inp;
 801879c:	683b      	ldr	r3, [r7, #0]
 801879e:	61bb      	str	r3, [r7, #24]
 80187a0:	e02a      	b.n	80187f8 <ip4_input+0x114>
    } else {
      netif = NULL;
 80187a2:	2300      	movs	r3, #0
 80187a4:	61bb      	str	r3, [r7, #24]
 80187a6:	e027      	b.n	80187f8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80187a8:	6838      	ldr	r0, [r7, #0]
 80187aa:	f7ff ff71 	bl	8018690 <ip4_input_accept>
 80187ae:	4603      	mov	r3, r0
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d002      	beq.n	80187ba <ip4_input+0xd6>
      netif = inp;
 80187b4:	683b      	ldr	r3, [r7, #0]
 80187b6:	61bb      	str	r3, [r7, #24]
 80187b8:	e01e      	b.n	80187f8 <ip4_input+0x114>
    } else {
      netif = NULL;
 80187ba:	2300      	movs	r3, #0
 80187bc:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80187be:	4b68      	ldr	r3, [pc, #416]	; (8018960 <ip4_input+0x27c>)
 80187c0:	695b      	ldr	r3, [r3, #20]
 80187c2:	b2db      	uxtb	r3, r3
 80187c4:	2b7f      	cmp	r3, #127	; 0x7f
 80187c6:	d017      	beq.n	80187f8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80187c8:	4b66      	ldr	r3, [pc, #408]	; (8018964 <ip4_input+0x280>)
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	61bb      	str	r3, [r7, #24]
 80187ce:	e00e      	b.n	80187ee <ip4_input+0x10a>
          if (netif == inp) {
 80187d0:	69ba      	ldr	r2, [r7, #24]
 80187d2:	683b      	ldr	r3, [r7, #0]
 80187d4:	429a      	cmp	r2, r3
 80187d6:	d006      	beq.n	80187e6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80187d8:	69b8      	ldr	r0, [r7, #24]
 80187da:	f7ff ff59 	bl	8018690 <ip4_input_accept>
 80187de:	4603      	mov	r3, r0
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d108      	bne.n	80187f6 <ip4_input+0x112>
 80187e4:	e000      	b.n	80187e8 <ip4_input+0x104>
            continue;
 80187e6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80187e8:	69bb      	ldr	r3, [r7, #24]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	61bb      	str	r3, [r7, #24]
 80187ee:	69bb      	ldr	r3, [r7, #24]
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d1ed      	bne.n	80187d0 <ip4_input+0xec>
 80187f4:	e000      	b.n	80187f8 <ip4_input+0x114>
            break;
 80187f6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80187f8:	69bb      	ldr	r3, [r7, #24]
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d111      	bne.n	8018822 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80187fe:	69fb      	ldr	r3, [r7, #28]
 8018800:	7a5b      	ldrb	r3, [r3, #9]
 8018802:	2b11      	cmp	r3, #17
 8018804:	d10d      	bne.n	8018822 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8018806:	8a7b      	ldrh	r3, [r7, #18]
 8018808:	69fa      	ldr	r2, [r7, #28]
 801880a:	4413      	add	r3, r2
 801880c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	885b      	ldrh	r3, [r3, #2]
 8018812:	b29b      	uxth	r3, r3
 8018814:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8018818:	d103      	bne.n	8018822 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801881a:	683b      	ldr	r3, [r7, #0]
 801881c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801881e:	2300      	movs	r3, #0
 8018820:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018822:	697b      	ldr	r3, [r7, #20]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d017      	beq.n	8018858 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8018828:	4b4d      	ldr	r3, [pc, #308]	; (8018960 <ip4_input+0x27c>)
 801882a:	691b      	ldr	r3, [r3, #16]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d013      	beq.n	8018858 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018830:	4b4b      	ldr	r3, [pc, #300]	; (8018960 <ip4_input+0x27c>)
 8018832:	691b      	ldr	r3, [r3, #16]
 8018834:	6839      	ldr	r1, [r7, #0]
 8018836:	4618      	mov	r0, r3
 8018838:	f000 f96e 	bl	8018b18 <ip4_addr_isbroadcast_u32>
 801883c:	4603      	mov	r3, r0
 801883e:	2b00      	cmp	r3, #0
 8018840:	d105      	bne.n	801884e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018842:	4b47      	ldr	r3, [pc, #284]	; (8018960 <ip4_input+0x27c>)
 8018844:	691b      	ldr	r3, [r3, #16]
 8018846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801884a:	2be0      	cmp	r3, #224	; 0xe0
 801884c:	d104      	bne.n	8018858 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801884e:	6878      	ldr	r0, [r7, #4]
 8018850:	f7f6 fd06 	bl	800f260 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018854:	2300      	movs	r3, #0
 8018856:	e07e      	b.n	8018956 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018858:	69bb      	ldr	r3, [r7, #24]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d104      	bne.n	8018868 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801885e:	6878      	ldr	r0, [r7, #4]
 8018860:	f7f6 fcfe 	bl	800f260 <pbuf_free>
    return ERR_OK;
 8018864:	2300      	movs	r3, #0
 8018866:	e076      	b.n	8018956 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018868:	69fb      	ldr	r3, [r7, #28]
 801886a:	88db      	ldrh	r3, [r3, #6]
 801886c:	b29b      	uxth	r3, r3
 801886e:	461a      	mov	r2, r3
 8018870:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018874:	4013      	ands	r3, r2
 8018876:	2b00      	cmp	r3, #0
 8018878:	d00b      	beq.n	8018892 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801887a:	6878      	ldr	r0, [r7, #4]
 801887c:	f000 fc92 	bl	80191a4 <ip4_reass>
 8018880:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d101      	bne.n	801888c <ip4_input+0x1a8>
      return ERR_OK;
 8018888:	2300      	movs	r3, #0
 801888a:	e064      	b.n	8018956 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	685b      	ldr	r3, [r3, #4]
 8018890:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018892:	4a33      	ldr	r2, [pc, #204]	; (8018960 <ip4_input+0x27c>)
 8018894:	69bb      	ldr	r3, [r7, #24]
 8018896:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018898:	4a31      	ldr	r2, [pc, #196]	; (8018960 <ip4_input+0x27c>)
 801889a:	683b      	ldr	r3, [r7, #0]
 801889c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801889e:	4a30      	ldr	r2, [pc, #192]	; (8018960 <ip4_input+0x27c>)
 80188a0:	69fb      	ldr	r3, [r7, #28]
 80188a2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80188a4:	69fb      	ldr	r3, [r7, #28]
 80188a6:	781b      	ldrb	r3, [r3, #0]
 80188a8:	f003 030f 	and.w	r3, r3, #15
 80188ac:	b2db      	uxtb	r3, r3
 80188ae:	009b      	lsls	r3, r3, #2
 80188b0:	b2db      	uxtb	r3, r3
 80188b2:	b29a      	uxth	r2, r3
 80188b4:	4b2a      	ldr	r3, [pc, #168]	; (8018960 <ip4_input+0x27c>)
 80188b6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80188b8:	8a7b      	ldrh	r3, [r7, #18]
 80188ba:	4619      	mov	r1, r3
 80188bc:	6878      	ldr	r0, [r7, #4]
 80188be:	f7f6 fc49 	bl	800f154 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80188c2:	69fb      	ldr	r3, [r7, #28]
 80188c4:	7a5b      	ldrb	r3, [r3, #9]
 80188c6:	2b11      	cmp	r3, #17
 80188c8:	d006      	beq.n	80188d8 <ip4_input+0x1f4>
 80188ca:	2b11      	cmp	r3, #17
 80188cc:	dc13      	bgt.n	80188f6 <ip4_input+0x212>
 80188ce:	2b01      	cmp	r3, #1
 80188d0:	d00c      	beq.n	80188ec <ip4_input+0x208>
 80188d2:	2b06      	cmp	r3, #6
 80188d4:	d005      	beq.n	80188e2 <ip4_input+0x1fe>
 80188d6:	e00e      	b.n	80188f6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80188d8:	6839      	ldr	r1, [r7, #0]
 80188da:	6878      	ldr	r0, [r7, #4]
 80188dc:	f7fc faea 	bl	8014eb4 <udp_input>
        break;
 80188e0:	e026      	b.n	8018930 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80188e2:	6839      	ldr	r1, [r7, #0]
 80188e4:	6878      	ldr	r0, [r7, #4]
 80188e6:	f7f8 faff 	bl	8010ee8 <tcp_input>
        break;
 80188ea:	e021      	b.n	8018930 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80188ec:	6839      	ldr	r1, [r7, #0]
 80188ee:	6878      	ldr	r0, [r7, #4]
 80188f0:	f7ff fcd0 	bl	8018294 <icmp_input>
        break;
 80188f4:	e01c      	b.n	8018930 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80188f6:	4b1a      	ldr	r3, [pc, #104]	; (8018960 <ip4_input+0x27c>)
 80188f8:	695b      	ldr	r3, [r3, #20]
 80188fa:	69b9      	ldr	r1, [r7, #24]
 80188fc:	4618      	mov	r0, r3
 80188fe:	f000 f90b 	bl	8018b18 <ip4_addr_isbroadcast_u32>
 8018902:	4603      	mov	r3, r0
 8018904:	2b00      	cmp	r3, #0
 8018906:	d10f      	bne.n	8018928 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018908:	4b15      	ldr	r3, [pc, #84]	; (8018960 <ip4_input+0x27c>)
 801890a:	695b      	ldr	r3, [r3, #20]
 801890c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018910:	2be0      	cmp	r3, #224	; 0xe0
 8018912:	d009      	beq.n	8018928 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018914:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018918:	4619      	mov	r1, r3
 801891a:	6878      	ldr	r0, [r7, #4]
 801891c:	f7f6 fc8d 	bl	800f23a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018920:	2102      	movs	r1, #2
 8018922:	6878      	ldr	r0, [r7, #4]
 8018924:	f7ff fdba 	bl	801849c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018928:	6878      	ldr	r0, [r7, #4]
 801892a:	f7f6 fc99 	bl	800f260 <pbuf_free>
        break;
 801892e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018930:	4b0b      	ldr	r3, [pc, #44]	; (8018960 <ip4_input+0x27c>)
 8018932:	2200      	movs	r2, #0
 8018934:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018936:	4b0a      	ldr	r3, [pc, #40]	; (8018960 <ip4_input+0x27c>)
 8018938:	2200      	movs	r2, #0
 801893a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801893c:	4b08      	ldr	r3, [pc, #32]	; (8018960 <ip4_input+0x27c>)
 801893e:	2200      	movs	r2, #0
 8018940:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018942:	4b07      	ldr	r3, [pc, #28]	; (8018960 <ip4_input+0x27c>)
 8018944:	2200      	movs	r2, #0
 8018946:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018948:	4b05      	ldr	r3, [pc, #20]	; (8018960 <ip4_input+0x27c>)
 801894a:	2200      	movs	r2, #0
 801894c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801894e:	4b04      	ldr	r3, [pc, #16]	; (8018960 <ip4_input+0x27c>)
 8018950:	2200      	movs	r2, #0
 8018952:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018954:	2300      	movs	r3, #0
}
 8018956:	4618      	mov	r0, r3
 8018958:	3720      	adds	r7, #32
 801895a:	46bd      	mov	sp, r7
 801895c:	bd80      	pop	{r7, pc}
 801895e:	bf00      	nop
 8018960:	2000bc60 	.word	0x2000bc60
 8018964:	2000f384 	.word	0x2000f384

08018968 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b08a      	sub	sp, #40	; 0x28
 801896c:	af04      	add	r7, sp, #16
 801896e:	60f8      	str	r0, [r7, #12]
 8018970:	60b9      	str	r1, [r7, #8]
 8018972:	607a      	str	r2, [r7, #4]
 8018974:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018976:	68bb      	ldr	r3, [r7, #8]
 8018978:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d009      	beq.n	8018994 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018980:	68bb      	ldr	r3, [r7, #8]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d003      	beq.n	801898e <ip4_output_if+0x26>
 8018986:	68bb      	ldr	r3, [r7, #8]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d102      	bne.n	8018994 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801898e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018990:	3304      	adds	r3, #4
 8018992:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018994:	78fa      	ldrb	r2, [r7, #3]
 8018996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018998:	9302      	str	r3, [sp, #8]
 801899a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801899e:	9301      	str	r3, [sp, #4]
 80189a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80189a4:	9300      	str	r3, [sp, #0]
 80189a6:	4613      	mov	r3, r2
 80189a8:	687a      	ldr	r2, [r7, #4]
 80189aa:	6979      	ldr	r1, [r7, #20]
 80189ac:	68f8      	ldr	r0, [r7, #12]
 80189ae:	f000 f805 	bl	80189bc <ip4_output_if_src>
 80189b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80189b4:	4618      	mov	r0, r3
 80189b6:	3718      	adds	r7, #24
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bd80      	pop	{r7, pc}

080189bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b088      	sub	sp, #32
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	60f8      	str	r0, [r7, #12]
 80189c4:	60b9      	str	r1, [r7, #8]
 80189c6:	607a      	str	r2, [r7, #4]
 80189c8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	7b9b      	ldrb	r3, [r3, #14]
 80189ce:	2b01      	cmp	r3, #1
 80189d0:	d006      	beq.n	80189e0 <ip4_output_if_src+0x24>
 80189d2:	4b4b      	ldr	r3, [pc, #300]	; (8018b00 <ip4_output_if_src+0x144>)
 80189d4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80189d8:	494a      	ldr	r1, [pc, #296]	; (8018b04 <ip4_output_if_src+0x148>)
 80189da:	484b      	ldr	r0, [pc, #300]	; (8018b08 <ip4_output_if_src+0x14c>)
 80189dc:	f001 fd3a 	bl	801a454 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d060      	beq.n	8018aa8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80189e6:	2314      	movs	r3, #20
 80189e8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80189ea:	2114      	movs	r1, #20
 80189ec:	68f8      	ldr	r0, [r7, #12]
 80189ee:	f7f6 fba1 	bl	800f134 <pbuf_add_header>
 80189f2:	4603      	mov	r3, r0
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d002      	beq.n	80189fe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80189f8:	f06f 0301 	mvn.w	r3, #1
 80189fc:	e07c      	b.n	8018af8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	685b      	ldr	r3, [r3, #4]
 8018a02:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018a04:	68fb      	ldr	r3, [r7, #12]
 8018a06:	895b      	ldrh	r3, [r3, #10]
 8018a08:	2b13      	cmp	r3, #19
 8018a0a:	d806      	bhi.n	8018a1a <ip4_output_if_src+0x5e>
 8018a0c:	4b3c      	ldr	r3, [pc, #240]	; (8018b00 <ip4_output_if_src+0x144>)
 8018a0e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018a12:	493e      	ldr	r1, [pc, #248]	; (8018b0c <ip4_output_if_src+0x150>)
 8018a14:	483c      	ldr	r0, [pc, #240]	; (8018b08 <ip4_output_if_src+0x14c>)
 8018a16:	f001 fd1d 	bl	801a454 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018a1a:	69fb      	ldr	r3, [r7, #28]
 8018a1c:	78fa      	ldrb	r2, [r7, #3]
 8018a1e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018a20:	69fb      	ldr	r3, [r7, #28]
 8018a22:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018a26:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	681a      	ldr	r2, [r3, #0]
 8018a2c:	69fb      	ldr	r3, [r7, #28]
 8018a2e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018a30:	8b7b      	ldrh	r3, [r7, #26]
 8018a32:	089b      	lsrs	r3, r3, #2
 8018a34:	b29b      	uxth	r3, r3
 8018a36:	b2db      	uxtb	r3, r3
 8018a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a3c:	b2da      	uxtb	r2, r3
 8018a3e:	69fb      	ldr	r3, [r7, #28]
 8018a40:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018a42:	69fb      	ldr	r3, [r7, #28]
 8018a44:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018a48:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	891b      	ldrh	r3, [r3, #8]
 8018a4e:	4618      	mov	r0, r3
 8018a50:	f7f5 f84e 	bl	800daf0 <lwip_htons>
 8018a54:	4603      	mov	r3, r0
 8018a56:	461a      	mov	r2, r3
 8018a58:	69fb      	ldr	r3, [r7, #28]
 8018a5a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018a5c:	69fb      	ldr	r3, [r7, #28]
 8018a5e:	2200      	movs	r2, #0
 8018a60:	719a      	strb	r2, [r3, #6]
 8018a62:	2200      	movs	r2, #0
 8018a64:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018a66:	4b2a      	ldr	r3, [pc, #168]	; (8018b10 <ip4_output_if_src+0x154>)
 8018a68:	881b      	ldrh	r3, [r3, #0]
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	f7f5 f840 	bl	800daf0 <lwip_htons>
 8018a70:	4603      	mov	r3, r0
 8018a72:	461a      	mov	r2, r3
 8018a74:	69fb      	ldr	r3, [r7, #28]
 8018a76:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018a78:	4b25      	ldr	r3, [pc, #148]	; (8018b10 <ip4_output_if_src+0x154>)
 8018a7a:	881b      	ldrh	r3, [r3, #0]
 8018a7c:	3301      	adds	r3, #1
 8018a7e:	b29a      	uxth	r2, r3
 8018a80:	4b23      	ldr	r3, [pc, #140]	; (8018b10 <ip4_output_if_src+0x154>)
 8018a82:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018a84:	68bb      	ldr	r3, [r7, #8]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d104      	bne.n	8018a94 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018a8a:	4b22      	ldr	r3, [pc, #136]	; (8018b14 <ip4_output_if_src+0x158>)
 8018a8c:	681a      	ldr	r2, [r3, #0]
 8018a8e:	69fb      	ldr	r3, [r7, #28]
 8018a90:	60da      	str	r2, [r3, #12]
 8018a92:	e003      	b.n	8018a9c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018a94:	68bb      	ldr	r3, [r7, #8]
 8018a96:	681a      	ldr	r2, [r3, #0]
 8018a98:	69fb      	ldr	r3, [r7, #28]
 8018a9a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018a9c:	69fb      	ldr	r3, [r7, #28]
 8018a9e:	2200      	movs	r2, #0
 8018aa0:	729a      	strb	r2, [r3, #10]
 8018aa2:	2200      	movs	r2, #0
 8018aa4:	72da      	strb	r2, [r3, #11]
 8018aa6:	e00f      	b.n	8018ac8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	895b      	ldrh	r3, [r3, #10]
 8018aac:	2b13      	cmp	r3, #19
 8018aae:	d802      	bhi.n	8018ab6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018ab0:	f06f 0301 	mvn.w	r3, #1
 8018ab4:	e020      	b.n	8018af8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	685b      	ldr	r3, [r3, #4]
 8018aba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018abc:	69fb      	ldr	r3, [r7, #28]
 8018abe:	691b      	ldr	r3, [r3, #16]
 8018ac0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018ac2:	f107 0314 	add.w	r3, r7, #20
 8018ac6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d00c      	beq.n	8018aea <ip4_output_if_src+0x12e>
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	891a      	ldrh	r2, [r3, #8]
 8018ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ad8:	429a      	cmp	r2, r3
 8018ada:	d906      	bls.n	8018aea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018adc:	687a      	ldr	r2, [r7, #4]
 8018ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018ae0:	68f8      	ldr	r0, [r7, #12]
 8018ae2:	f000 fd4d 	bl	8019580 <ip4_frag>
 8018ae6:	4603      	mov	r3, r0
 8018ae8:	e006      	b.n	8018af8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aec:	695b      	ldr	r3, [r3, #20]
 8018aee:	687a      	ldr	r2, [r7, #4]
 8018af0:	68f9      	ldr	r1, [r7, #12]
 8018af2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018af4:	4798      	blx	r3
 8018af6:	4603      	mov	r3, r0
}
 8018af8:	4618      	mov	r0, r3
 8018afa:	3720      	adds	r7, #32
 8018afc:	46bd      	mov	sp, r7
 8018afe:	bd80      	pop	{r7, pc}
 8018b00:	0801e608 	.word	0x0801e608
 8018b04:	0801e63c 	.word	0x0801e63c
 8018b08:	0801e648 	.word	0x0801e648
 8018b0c:	0801e670 	.word	0x0801e670
 8018b10:	20008612 	.word	0x20008612
 8018b14:	0801eaa8 	.word	0x0801eaa8

08018b18 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018b18:	b480      	push	{r7}
 8018b1a:	b085      	sub	sp, #20
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
 8018b20:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b2c:	d002      	beq.n	8018b34 <ip4_addr_isbroadcast_u32+0x1c>
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d101      	bne.n	8018b38 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018b34:	2301      	movs	r3, #1
 8018b36:	e02a      	b.n	8018b8e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018b38:	683b      	ldr	r3, [r7, #0]
 8018b3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018b3e:	f003 0302 	and.w	r3, r3, #2
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d101      	bne.n	8018b4a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018b46:	2300      	movs	r3, #0
 8018b48:	e021      	b.n	8018b8e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018b4a:	683b      	ldr	r3, [r7, #0]
 8018b4c:	3304      	adds	r3, #4
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	687a      	ldr	r2, [r7, #4]
 8018b52:	429a      	cmp	r2, r3
 8018b54:	d101      	bne.n	8018b5a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018b56:	2300      	movs	r3, #0
 8018b58:	e019      	b.n	8018b8e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018b5a:	68fa      	ldr	r2, [r7, #12]
 8018b5c:	683b      	ldr	r3, [r7, #0]
 8018b5e:	3304      	adds	r3, #4
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	405a      	eors	r2, r3
 8018b64:	683b      	ldr	r3, [r7, #0]
 8018b66:	3308      	adds	r3, #8
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	4013      	ands	r3, r2
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d10d      	bne.n	8018b8c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018b70:	683b      	ldr	r3, [r7, #0]
 8018b72:	3308      	adds	r3, #8
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	43da      	mvns	r2, r3
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018b7c:	683b      	ldr	r3, [r7, #0]
 8018b7e:	3308      	adds	r3, #8
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018b84:	429a      	cmp	r2, r3
 8018b86:	d101      	bne.n	8018b8c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018b88:	2301      	movs	r3, #1
 8018b8a:	e000      	b.n	8018b8e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018b8c:	2300      	movs	r3, #0
  }
}
 8018b8e:	4618      	mov	r0, r3
 8018b90:	3714      	adds	r7, #20
 8018b92:	46bd      	mov	sp, r7
 8018b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b98:	4770      	bx	lr
	...

08018b9c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b084      	sub	sp, #16
 8018ba0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018ba6:	4b12      	ldr	r3, [pc, #72]	; (8018bf0 <ip_reass_tmr+0x54>)
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018bac:	e018      	b.n	8018be0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	7fdb      	ldrb	r3, [r3, #31]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d00b      	beq.n	8018bce <ip_reass_tmr+0x32>
      r->timer--;
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	7fdb      	ldrb	r3, [r3, #31]
 8018bba:	3b01      	subs	r3, #1
 8018bbc:	b2da      	uxtb	r2, r3
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	60fb      	str	r3, [r7, #12]
 8018bcc:	e008      	b.n	8018be0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018bd8:	68b9      	ldr	r1, [r7, #8]
 8018bda:	6878      	ldr	r0, [r7, #4]
 8018bdc:	f000 f80a 	bl	8018bf4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d1e3      	bne.n	8018bae <ip_reass_tmr+0x12>
    }
  }
}
 8018be6:	bf00      	nop
 8018be8:	bf00      	nop
 8018bea:	3710      	adds	r7, #16
 8018bec:	46bd      	mov	sp, r7
 8018bee:	bd80      	pop	{r7, pc}
 8018bf0:	20008614 	.word	0x20008614

08018bf4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b088      	sub	sp, #32
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]
 8018bfc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018bfe:	2300      	movs	r3, #0
 8018c00:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018c02:	683a      	ldr	r2, [r7, #0]
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	429a      	cmp	r2, r3
 8018c08:	d105      	bne.n	8018c16 <ip_reass_free_complete_datagram+0x22>
 8018c0a:	4b45      	ldr	r3, [pc, #276]	; (8018d20 <ip_reass_free_complete_datagram+0x12c>)
 8018c0c:	22ab      	movs	r2, #171	; 0xab
 8018c0e:	4945      	ldr	r1, [pc, #276]	; (8018d24 <ip_reass_free_complete_datagram+0x130>)
 8018c10:	4845      	ldr	r0, [pc, #276]	; (8018d28 <ip_reass_free_complete_datagram+0x134>)
 8018c12:	f001 fc1f 	bl	801a454 <iprintf>
  if (prev != NULL) {
 8018c16:	683b      	ldr	r3, [r7, #0]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d00a      	beq.n	8018c32 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018c1c:	683b      	ldr	r3, [r7, #0]
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	687a      	ldr	r2, [r7, #4]
 8018c22:	429a      	cmp	r2, r3
 8018c24:	d005      	beq.n	8018c32 <ip_reass_free_complete_datagram+0x3e>
 8018c26:	4b3e      	ldr	r3, [pc, #248]	; (8018d20 <ip_reass_free_complete_datagram+0x12c>)
 8018c28:	22ad      	movs	r2, #173	; 0xad
 8018c2a:	4940      	ldr	r1, [pc, #256]	; (8018d2c <ip_reass_free_complete_datagram+0x138>)
 8018c2c:	483e      	ldr	r0, [pc, #248]	; (8018d28 <ip_reass_free_complete_datagram+0x134>)
 8018c2e:	f001 fc11 	bl	801a454 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	685b      	ldr	r3, [r3, #4]
 8018c36:	685b      	ldr	r3, [r3, #4]
 8018c38:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018c3a:	697b      	ldr	r3, [r7, #20]
 8018c3c:	889b      	ldrh	r3, [r3, #4]
 8018c3e:	b29b      	uxth	r3, r3
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d12a      	bne.n	8018c9a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	685b      	ldr	r3, [r3, #4]
 8018c48:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018c4a:	697b      	ldr	r3, [r7, #20]
 8018c4c:	681a      	ldr	r2, [r3, #0]
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018c52:	69bb      	ldr	r3, [r7, #24]
 8018c54:	6858      	ldr	r0, [r3, #4]
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	3308      	adds	r3, #8
 8018c5a:	2214      	movs	r2, #20
 8018c5c:	4619      	mov	r1, r3
 8018c5e:	f001 fb39 	bl	801a2d4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018c62:	2101      	movs	r1, #1
 8018c64:	69b8      	ldr	r0, [r7, #24]
 8018c66:	f7ff fc29 	bl	80184bc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018c6a:	69b8      	ldr	r0, [r7, #24]
 8018c6c:	f7f6 fb86 	bl	800f37c <pbuf_clen>
 8018c70:	4603      	mov	r3, r0
 8018c72:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018c74:	8bfa      	ldrh	r2, [r7, #30]
 8018c76:	8a7b      	ldrh	r3, [r7, #18]
 8018c78:	4413      	add	r3, r2
 8018c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018c7e:	db05      	blt.n	8018c8c <ip_reass_free_complete_datagram+0x98>
 8018c80:	4b27      	ldr	r3, [pc, #156]	; (8018d20 <ip_reass_free_complete_datagram+0x12c>)
 8018c82:	22bc      	movs	r2, #188	; 0xbc
 8018c84:	492a      	ldr	r1, [pc, #168]	; (8018d30 <ip_reass_free_complete_datagram+0x13c>)
 8018c86:	4828      	ldr	r0, [pc, #160]	; (8018d28 <ip_reass_free_complete_datagram+0x134>)
 8018c88:	f001 fbe4 	bl	801a454 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018c8c:	8bfa      	ldrh	r2, [r7, #30]
 8018c8e:	8a7b      	ldrh	r3, [r7, #18]
 8018c90:	4413      	add	r3, r2
 8018c92:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018c94:	69b8      	ldr	r0, [r7, #24]
 8018c96:	f7f6 fae3 	bl	800f260 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	685b      	ldr	r3, [r3, #4]
 8018c9e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018ca0:	e01f      	b.n	8018ce2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018ca2:	69bb      	ldr	r3, [r7, #24]
 8018ca4:	685b      	ldr	r3, [r3, #4]
 8018ca6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018ca8:	69bb      	ldr	r3, [r7, #24]
 8018caa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018cac:	697b      	ldr	r3, [r7, #20]
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018cb2:	68f8      	ldr	r0, [r7, #12]
 8018cb4:	f7f6 fb62 	bl	800f37c <pbuf_clen>
 8018cb8:	4603      	mov	r3, r0
 8018cba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018cbc:	8bfa      	ldrh	r2, [r7, #30]
 8018cbe:	8a7b      	ldrh	r3, [r7, #18]
 8018cc0:	4413      	add	r3, r2
 8018cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018cc6:	db05      	blt.n	8018cd4 <ip_reass_free_complete_datagram+0xe0>
 8018cc8:	4b15      	ldr	r3, [pc, #84]	; (8018d20 <ip_reass_free_complete_datagram+0x12c>)
 8018cca:	22cc      	movs	r2, #204	; 0xcc
 8018ccc:	4918      	ldr	r1, [pc, #96]	; (8018d30 <ip_reass_free_complete_datagram+0x13c>)
 8018cce:	4816      	ldr	r0, [pc, #88]	; (8018d28 <ip_reass_free_complete_datagram+0x134>)
 8018cd0:	f001 fbc0 	bl	801a454 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018cd4:	8bfa      	ldrh	r2, [r7, #30]
 8018cd6:	8a7b      	ldrh	r3, [r7, #18]
 8018cd8:	4413      	add	r3, r2
 8018cda:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018cdc:	68f8      	ldr	r0, [r7, #12]
 8018cde:	f7f6 fabf 	bl	800f260 <pbuf_free>
  while (p != NULL) {
 8018ce2:	69bb      	ldr	r3, [r7, #24]
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d1dc      	bne.n	8018ca2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018ce8:	6839      	ldr	r1, [r7, #0]
 8018cea:	6878      	ldr	r0, [r7, #4]
 8018cec:	f000 f8c2 	bl	8018e74 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018cf0:	4b10      	ldr	r3, [pc, #64]	; (8018d34 <ip_reass_free_complete_datagram+0x140>)
 8018cf2:	881b      	ldrh	r3, [r3, #0]
 8018cf4:	8bfa      	ldrh	r2, [r7, #30]
 8018cf6:	429a      	cmp	r2, r3
 8018cf8:	d905      	bls.n	8018d06 <ip_reass_free_complete_datagram+0x112>
 8018cfa:	4b09      	ldr	r3, [pc, #36]	; (8018d20 <ip_reass_free_complete_datagram+0x12c>)
 8018cfc:	22d2      	movs	r2, #210	; 0xd2
 8018cfe:	490e      	ldr	r1, [pc, #56]	; (8018d38 <ip_reass_free_complete_datagram+0x144>)
 8018d00:	4809      	ldr	r0, [pc, #36]	; (8018d28 <ip_reass_free_complete_datagram+0x134>)
 8018d02:	f001 fba7 	bl	801a454 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018d06:	4b0b      	ldr	r3, [pc, #44]	; (8018d34 <ip_reass_free_complete_datagram+0x140>)
 8018d08:	881a      	ldrh	r2, [r3, #0]
 8018d0a:	8bfb      	ldrh	r3, [r7, #30]
 8018d0c:	1ad3      	subs	r3, r2, r3
 8018d0e:	b29a      	uxth	r2, r3
 8018d10:	4b08      	ldr	r3, [pc, #32]	; (8018d34 <ip_reass_free_complete_datagram+0x140>)
 8018d12:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018d14:	8bfb      	ldrh	r3, [r7, #30]
}
 8018d16:	4618      	mov	r0, r3
 8018d18:	3720      	adds	r7, #32
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	bd80      	pop	{r7, pc}
 8018d1e:	bf00      	nop
 8018d20:	0801e6a0 	.word	0x0801e6a0
 8018d24:	0801e6dc 	.word	0x0801e6dc
 8018d28:	0801e6e8 	.word	0x0801e6e8
 8018d2c:	0801e710 	.word	0x0801e710
 8018d30:	0801e724 	.word	0x0801e724
 8018d34:	20008618 	.word	0x20008618
 8018d38:	0801e744 	.word	0x0801e744

08018d3c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b08a      	sub	sp, #40	; 0x28
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
 8018d44:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018d46:	2300      	movs	r3, #0
 8018d48:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018d4e:	2300      	movs	r3, #0
 8018d50:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018d52:	2300      	movs	r3, #0
 8018d54:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018d56:	2300      	movs	r3, #0
 8018d58:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018d5a:	4b28      	ldr	r3, [pc, #160]	; (8018dfc <ip_reass_remove_oldest_datagram+0xc0>)
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018d60:	e030      	b.n	8018dc4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d64:	695a      	ldr	r2, [r3, #20]
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	68db      	ldr	r3, [r3, #12]
 8018d6a:	429a      	cmp	r2, r3
 8018d6c:	d10c      	bne.n	8018d88 <ip_reass_remove_oldest_datagram+0x4c>
 8018d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d70:	699a      	ldr	r2, [r3, #24]
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	691b      	ldr	r3, [r3, #16]
 8018d76:	429a      	cmp	r2, r3
 8018d78:	d106      	bne.n	8018d88 <ip_reass_remove_oldest_datagram+0x4c>
 8018d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d7c:	899a      	ldrh	r2, [r3, #12]
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	889b      	ldrh	r3, [r3, #4]
 8018d82:	b29b      	uxth	r3, r3
 8018d84:	429a      	cmp	r2, r3
 8018d86:	d014      	beq.n	8018db2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018d88:	693b      	ldr	r3, [r7, #16]
 8018d8a:	3301      	adds	r3, #1
 8018d8c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018d8e:	6a3b      	ldr	r3, [r7, #32]
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d104      	bne.n	8018d9e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d96:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018d98:	69fb      	ldr	r3, [r7, #28]
 8018d9a:	61bb      	str	r3, [r7, #24]
 8018d9c:	e009      	b.n	8018db2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018da0:	7fda      	ldrb	r2, [r3, #31]
 8018da2:	6a3b      	ldr	r3, [r7, #32]
 8018da4:	7fdb      	ldrb	r3, [r3, #31]
 8018da6:	429a      	cmp	r2, r3
 8018da8:	d803      	bhi.n	8018db2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018dae:	69fb      	ldr	r3, [r7, #28]
 8018db0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d001      	beq.n	8018dbe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dbc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d1cb      	bne.n	8018d62 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018dca:	6a3b      	ldr	r3, [r7, #32]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d008      	beq.n	8018de2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018dd0:	69b9      	ldr	r1, [r7, #24]
 8018dd2:	6a38      	ldr	r0, [r7, #32]
 8018dd4:	f7ff ff0e 	bl	8018bf4 <ip_reass_free_complete_datagram>
 8018dd8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018dda:	697a      	ldr	r2, [r7, #20]
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	4413      	add	r3, r2
 8018de0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018de2:	697a      	ldr	r2, [r7, #20]
 8018de4:	683b      	ldr	r3, [r7, #0]
 8018de6:	429a      	cmp	r2, r3
 8018de8:	da02      	bge.n	8018df0 <ip_reass_remove_oldest_datagram+0xb4>
 8018dea:	693b      	ldr	r3, [r7, #16]
 8018dec:	2b01      	cmp	r3, #1
 8018dee:	dcac      	bgt.n	8018d4a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018df0:	697b      	ldr	r3, [r7, #20]
}
 8018df2:	4618      	mov	r0, r3
 8018df4:	3728      	adds	r7, #40	; 0x28
 8018df6:	46bd      	mov	sp, r7
 8018df8:	bd80      	pop	{r7, pc}
 8018dfa:	bf00      	nop
 8018dfc:	20008614 	.word	0x20008614

08018e00 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b084      	sub	sp, #16
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	6078      	str	r0, [r7, #4]
 8018e08:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018e0a:	2004      	movs	r0, #4
 8018e0c:	f7f5 fb26 	bl	800e45c <memp_malloc>
 8018e10:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d110      	bne.n	8018e3a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018e18:	6839      	ldr	r1, [r7, #0]
 8018e1a:	6878      	ldr	r0, [r7, #4]
 8018e1c:	f7ff ff8e 	bl	8018d3c <ip_reass_remove_oldest_datagram>
 8018e20:	4602      	mov	r2, r0
 8018e22:	683b      	ldr	r3, [r7, #0]
 8018e24:	4293      	cmp	r3, r2
 8018e26:	dc03      	bgt.n	8018e30 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018e28:	2004      	movs	r0, #4
 8018e2a:	f7f5 fb17 	bl	800e45c <memp_malloc>
 8018e2e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d101      	bne.n	8018e3a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018e36:	2300      	movs	r3, #0
 8018e38:	e016      	b.n	8018e68 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018e3a:	2220      	movs	r2, #32
 8018e3c:	2100      	movs	r1, #0
 8018e3e:	68f8      	ldr	r0, [r7, #12]
 8018e40:	f001 fa56 	bl	801a2f0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	220f      	movs	r2, #15
 8018e48:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018e4a:	4b09      	ldr	r3, [pc, #36]	; (8018e70 <ip_reass_enqueue_new_datagram+0x70>)
 8018e4c:	681a      	ldr	r2, [r3, #0]
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018e52:	4a07      	ldr	r2, [pc, #28]	; (8018e70 <ip_reass_enqueue_new_datagram+0x70>)
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	3308      	adds	r3, #8
 8018e5c:	2214      	movs	r2, #20
 8018e5e:	6879      	ldr	r1, [r7, #4]
 8018e60:	4618      	mov	r0, r3
 8018e62:	f001 fa37 	bl	801a2d4 <memcpy>
  return ipr;
 8018e66:	68fb      	ldr	r3, [r7, #12]
}
 8018e68:	4618      	mov	r0, r3
 8018e6a:	3710      	adds	r7, #16
 8018e6c:	46bd      	mov	sp, r7
 8018e6e:	bd80      	pop	{r7, pc}
 8018e70:	20008614 	.word	0x20008614

08018e74 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	b082      	sub	sp, #8
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	6078      	str	r0, [r7, #4]
 8018e7c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018e7e:	4b10      	ldr	r3, [pc, #64]	; (8018ec0 <ip_reass_dequeue_datagram+0x4c>)
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	687a      	ldr	r2, [r7, #4]
 8018e84:	429a      	cmp	r2, r3
 8018e86:	d104      	bne.n	8018e92 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	4a0c      	ldr	r2, [pc, #48]	; (8018ec0 <ip_reass_dequeue_datagram+0x4c>)
 8018e8e:	6013      	str	r3, [r2, #0]
 8018e90:	e00d      	b.n	8018eae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018e92:	683b      	ldr	r3, [r7, #0]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d106      	bne.n	8018ea6 <ip_reass_dequeue_datagram+0x32>
 8018e98:	4b0a      	ldr	r3, [pc, #40]	; (8018ec4 <ip_reass_dequeue_datagram+0x50>)
 8018e9a:	f240 1245 	movw	r2, #325	; 0x145
 8018e9e:	490a      	ldr	r1, [pc, #40]	; (8018ec8 <ip_reass_dequeue_datagram+0x54>)
 8018ea0:	480a      	ldr	r0, [pc, #40]	; (8018ecc <ip_reass_dequeue_datagram+0x58>)
 8018ea2:	f001 fad7 	bl	801a454 <iprintf>
    prev->next = ipr->next;
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	681a      	ldr	r2, [r3, #0]
 8018eaa:	683b      	ldr	r3, [r7, #0]
 8018eac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018eae:	6879      	ldr	r1, [r7, #4]
 8018eb0:	2004      	movs	r0, #4
 8018eb2:	f7f5 fb25 	bl	800e500 <memp_free>
}
 8018eb6:	bf00      	nop
 8018eb8:	3708      	adds	r7, #8
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	bd80      	pop	{r7, pc}
 8018ebe:	bf00      	nop
 8018ec0:	20008614 	.word	0x20008614
 8018ec4:	0801e6a0 	.word	0x0801e6a0
 8018ec8:	0801e768 	.word	0x0801e768
 8018ecc:	0801e6e8 	.word	0x0801e6e8

08018ed0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018ed0:	b580      	push	{r7, lr}
 8018ed2:	b08c      	sub	sp, #48	; 0x30
 8018ed4:	af00      	add	r7, sp, #0
 8018ed6:	60f8      	str	r0, [r7, #12]
 8018ed8:	60b9      	str	r1, [r7, #8]
 8018eda:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018edc:	2300      	movs	r3, #0
 8018ede:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018ee0:	2301      	movs	r3, #1
 8018ee2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018ee4:	68bb      	ldr	r3, [r7, #8]
 8018ee6:	685b      	ldr	r3, [r3, #4]
 8018ee8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018eea:	69fb      	ldr	r3, [r7, #28]
 8018eec:	885b      	ldrh	r3, [r3, #2]
 8018eee:	b29b      	uxth	r3, r3
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	f7f4 fdfd 	bl	800daf0 <lwip_htons>
 8018ef6:	4603      	mov	r3, r0
 8018ef8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018efa:	69fb      	ldr	r3, [r7, #28]
 8018efc:	781b      	ldrb	r3, [r3, #0]
 8018efe:	f003 030f 	and.w	r3, r3, #15
 8018f02:	b2db      	uxtb	r3, r3
 8018f04:	009b      	lsls	r3, r3, #2
 8018f06:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018f08:	7e7b      	ldrb	r3, [r7, #25]
 8018f0a:	b29b      	uxth	r3, r3
 8018f0c:	8b7a      	ldrh	r2, [r7, #26]
 8018f0e:	429a      	cmp	r2, r3
 8018f10:	d202      	bcs.n	8018f18 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018f12:	f04f 33ff 	mov.w	r3, #4294967295
 8018f16:	e135      	b.n	8019184 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018f18:	7e7b      	ldrb	r3, [r7, #25]
 8018f1a:	b29b      	uxth	r3, r3
 8018f1c:	8b7a      	ldrh	r2, [r7, #26]
 8018f1e:	1ad3      	subs	r3, r2, r3
 8018f20:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018f22:	69fb      	ldr	r3, [r7, #28]
 8018f24:	88db      	ldrh	r3, [r3, #6]
 8018f26:	b29b      	uxth	r3, r3
 8018f28:	4618      	mov	r0, r3
 8018f2a:	f7f4 fde1 	bl	800daf0 <lwip_htons>
 8018f2e:	4603      	mov	r3, r0
 8018f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018f34:	b29b      	uxth	r3, r3
 8018f36:	00db      	lsls	r3, r3, #3
 8018f38:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018f3a:	68bb      	ldr	r3, [r7, #8]
 8018f3c:	685b      	ldr	r3, [r3, #4]
 8018f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f42:	2200      	movs	r2, #0
 8018f44:	701a      	strb	r2, [r3, #0]
 8018f46:	2200      	movs	r2, #0
 8018f48:	705a      	strb	r2, [r3, #1]
 8018f4a:	2200      	movs	r2, #0
 8018f4c:	709a      	strb	r2, [r3, #2]
 8018f4e:	2200      	movs	r2, #0
 8018f50:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f54:	8afa      	ldrh	r2, [r7, #22]
 8018f56:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018f58:	8afa      	ldrh	r2, [r7, #22]
 8018f5a:	8b7b      	ldrh	r3, [r7, #26]
 8018f5c:	4413      	add	r3, r2
 8018f5e:	b29a      	uxth	r2, r3
 8018f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f62:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f66:	88db      	ldrh	r3, [r3, #6]
 8018f68:	b29b      	uxth	r3, r3
 8018f6a:	8afa      	ldrh	r2, [r7, #22]
 8018f6c:	429a      	cmp	r2, r3
 8018f6e:	d902      	bls.n	8018f76 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018f70:	f04f 33ff 	mov.w	r3, #4294967295
 8018f74:	e106      	b.n	8019184 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	685b      	ldr	r3, [r3, #4]
 8018f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8018f7c:	e068      	b.n	8019050 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f80:	685b      	ldr	r3, [r3, #4]
 8018f82:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f86:	889b      	ldrh	r3, [r3, #4]
 8018f88:	b29a      	uxth	r2, r3
 8018f8a:	693b      	ldr	r3, [r7, #16]
 8018f8c:	889b      	ldrh	r3, [r3, #4]
 8018f8e:	b29b      	uxth	r3, r3
 8018f90:	429a      	cmp	r2, r3
 8018f92:	d235      	bcs.n	8019000 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f98:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d020      	beq.n	8018fe2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fa2:	889b      	ldrh	r3, [r3, #4]
 8018fa4:	b29a      	uxth	r2, r3
 8018fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fa8:	88db      	ldrh	r3, [r3, #6]
 8018faa:	b29b      	uxth	r3, r3
 8018fac:	429a      	cmp	r2, r3
 8018fae:	d307      	bcc.n	8018fc0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fb2:	88db      	ldrh	r3, [r3, #6]
 8018fb4:	b29a      	uxth	r2, r3
 8018fb6:	693b      	ldr	r3, [r7, #16]
 8018fb8:	889b      	ldrh	r3, [r3, #4]
 8018fba:	b29b      	uxth	r3, r3
 8018fbc:	429a      	cmp	r2, r3
 8018fbe:	d902      	bls.n	8018fc6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8018fc4:	e0de      	b.n	8019184 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fc8:	68ba      	ldr	r2, [r7, #8]
 8018fca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fce:	88db      	ldrh	r3, [r3, #6]
 8018fd0:	b29a      	uxth	r2, r3
 8018fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fd4:	889b      	ldrh	r3, [r3, #4]
 8018fd6:	b29b      	uxth	r3, r3
 8018fd8:	429a      	cmp	r2, r3
 8018fda:	d03d      	beq.n	8019058 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018fdc:	2300      	movs	r3, #0
 8018fde:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018fe0:	e03a      	b.n	8019058 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fe4:	88db      	ldrh	r3, [r3, #6]
 8018fe6:	b29a      	uxth	r2, r3
 8018fe8:	693b      	ldr	r3, [r7, #16]
 8018fea:	889b      	ldrh	r3, [r3, #4]
 8018fec:	b29b      	uxth	r3, r3
 8018fee:	429a      	cmp	r2, r3
 8018ff0:	d902      	bls.n	8018ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8018ff6:	e0c5      	b.n	8019184 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	68ba      	ldr	r2, [r7, #8]
 8018ffc:	605a      	str	r2, [r3, #4]
      break;
 8018ffe:	e02b      	b.n	8019058 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019002:	889b      	ldrh	r3, [r3, #4]
 8019004:	b29a      	uxth	r2, r3
 8019006:	693b      	ldr	r3, [r7, #16]
 8019008:	889b      	ldrh	r3, [r3, #4]
 801900a:	b29b      	uxth	r3, r3
 801900c:	429a      	cmp	r2, r3
 801900e:	d102      	bne.n	8019016 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019010:	f04f 33ff 	mov.w	r3, #4294967295
 8019014:	e0b6      	b.n	8019184 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019018:	889b      	ldrh	r3, [r3, #4]
 801901a:	b29a      	uxth	r2, r3
 801901c:	693b      	ldr	r3, [r7, #16]
 801901e:	88db      	ldrh	r3, [r3, #6]
 8019020:	b29b      	uxth	r3, r3
 8019022:	429a      	cmp	r2, r3
 8019024:	d202      	bcs.n	801902c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019026:	f04f 33ff 	mov.w	r3, #4294967295
 801902a:	e0ab      	b.n	8019184 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801902e:	2b00      	cmp	r3, #0
 8019030:	d009      	beq.n	8019046 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019034:	88db      	ldrh	r3, [r3, #6]
 8019036:	b29a      	uxth	r2, r3
 8019038:	693b      	ldr	r3, [r7, #16]
 801903a:	889b      	ldrh	r3, [r3, #4]
 801903c:	b29b      	uxth	r3, r3
 801903e:	429a      	cmp	r2, r3
 8019040:	d001      	beq.n	8019046 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019042:	2300      	movs	r3, #0
 8019044:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019046:	693b      	ldr	r3, [r7, #16]
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801904c:	693b      	ldr	r3, [r7, #16]
 801904e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019052:	2b00      	cmp	r3, #0
 8019054:	d193      	bne.n	8018f7e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019056:	e000      	b.n	801905a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019058:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801905c:	2b00      	cmp	r3, #0
 801905e:	d12d      	bne.n	80190bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019062:	2b00      	cmp	r3, #0
 8019064:	d01c      	beq.n	80190a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019068:	88db      	ldrh	r3, [r3, #6]
 801906a:	b29a      	uxth	r2, r3
 801906c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801906e:	889b      	ldrh	r3, [r3, #4]
 8019070:	b29b      	uxth	r3, r3
 8019072:	429a      	cmp	r2, r3
 8019074:	d906      	bls.n	8019084 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019076:	4b45      	ldr	r3, [pc, #276]	; (801918c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019078:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801907c:	4944      	ldr	r1, [pc, #272]	; (8019190 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801907e:	4845      	ldr	r0, [pc, #276]	; (8019194 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019080:	f001 f9e8 	bl	801a454 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019086:	68ba      	ldr	r2, [r7, #8]
 8019088:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801908c:	88db      	ldrh	r3, [r3, #6]
 801908e:	b29a      	uxth	r2, r3
 8019090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019092:	889b      	ldrh	r3, [r3, #4]
 8019094:	b29b      	uxth	r3, r3
 8019096:	429a      	cmp	r2, r3
 8019098:	d010      	beq.n	80190bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801909a:	2300      	movs	r3, #0
 801909c:	623b      	str	r3, [r7, #32]
 801909e:	e00d      	b.n	80190bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	685b      	ldr	r3, [r3, #4]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d006      	beq.n	80190b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80190a8:	4b38      	ldr	r3, [pc, #224]	; (801918c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80190aa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80190ae:	493a      	ldr	r1, [pc, #232]	; (8019198 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80190b0:	4838      	ldr	r0, [pc, #224]	; (8019194 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80190b2:	f001 f9cf 	bl	801a454 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	68ba      	ldr	r2, [r7, #8]
 80190ba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d105      	bne.n	80190ce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	7f9b      	ldrb	r3, [r3, #30]
 80190c6:	f003 0301 	and.w	r3, r3, #1
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d059      	beq.n	8019182 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80190ce:	6a3b      	ldr	r3, [r7, #32]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d04f      	beq.n	8019174 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	685b      	ldr	r3, [r3, #4]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d006      	beq.n	80190ea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80190dc:	68fb      	ldr	r3, [r7, #12]
 80190de:	685b      	ldr	r3, [r3, #4]
 80190e0:	685b      	ldr	r3, [r3, #4]
 80190e2:	889b      	ldrh	r3, [r3, #4]
 80190e4:	b29b      	uxth	r3, r3
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d002      	beq.n	80190f0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80190ea:	2300      	movs	r3, #0
 80190ec:	623b      	str	r3, [r7, #32]
 80190ee:	e041      	b.n	8019174 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80190f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190f2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80190f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80190fa:	e012      	b.n	8019122 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80190fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190fe:	685b      	ldr	r3, [r3, #4]
 8019100:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019104:	88db      	ldrh	r3, [r3, #6]
 8019106:	b29a      	uxth	r2, r3
 8019108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801910a:	889b      	ldrh	r3, [r3, #4]
 801910c:	b29b      	uxth	r3, r3
 801910e:	429a      	cmp	r2, r3
 8019110:	d002      	beq.n	8019118 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019112:	2300      	movs	r3, #0
 8019114:	623b      	str	r3, [r7, #32]
            break;
 8019116:	e007      	b.n	8019128 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801911a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801911c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019124:	2b00      	cmp	r3, #0
 8019126:	d1e9      	bne.n	80190fc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019128:	6a3b      	ldr	r3, [r7, #32]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d022      	beq.n	8019174 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	685b      	ldr	r3, [r3, #4]
 8019132:	2b00      	cmp	r3, #0
 8019134:	d106      	bne.n	8019144 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019136:	4b15      	ldr	r3, [pc, #84]	; (801918c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019138:	f240 12df 	movw	r2, #479	; 0x1df
 801913c:	4917      	ldr	r1, [pc, #92]	; (801919c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801913e:	4815      	ldr	r0, [pc, #84]	; (8019194 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019140:	f001 f988 	bl	801a454 <iprintf>
          LWIP_ASSERT("sanity check",
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	685b      	ldr	r3, [r3, #4]
 8019148:	685b      	ldr	r3, [r3, #4]
 801914a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801914c:	429a      	cmp	r2, r3
 801914e:	d106      	bne.n	801915e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019150:	4b0e      	ldr	r3, [pc, #56]	; (801918c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019152:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019156:	4911      	ldr	r1, [pc, #68]	; (801919c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019158:	480e      	ldr	r0, [pc, #56]	; (8019194 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801915a:	f001 f97b 	bl	801a454 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801915e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	2b00      	cmp	r3, #0
 8019164:	d006      	beq.n	8019174 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019166:	4b09      	ldr	r3, [pc, #36]	; (801918c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019168:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801916c:	490c      	ldr	r1, [pc, #48]	; (80191a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801916e:	4809      	ldr	r0, [pc, #36]	; (8019194 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019170:	f001 f970 	bl	801a454 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019174:	6a3b      	ldr	r3, [r7, #32]
 8019176:	2b00      	cmp	r3, #0
 8019178:	bf14      	ite	ne
 801917a:	2301      	movne	r3, #1
 801917c:	2300      	moveq	r3, #0
 801917e:	b2db      	uxtb	r3, r3
 8019180:	e000      	b.n	8019184 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019182:	2300      	movs	r3, #0
}
 8019184:	4618      	mov	r0, r3
 8019186:	3730      	adds	r7, #48	; 0x30
 8019188:	46bd      	mov	sp, r7
 801918a:	bd80      	pop	{r7, pc}
 801918c:	0801e6a0 	.word	0x0801e6a0
 8019190:	0801e784 	.word	0x0801e784
 8019194:	0801e6e8 	.word	0x0801e6e8
 8019198:	0801e7a4 	.word	0x0801e7a4
 801919c:	0801e7dc 	.word	0x0801e7dc
 80191a0:	0801e7ec 	.word	0x0801e7ec

080191a4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80191a4:	b580      	push	{r7, lr}
 80191a6:	b08e      	sub	sp, #56	; 0x38
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	685b      	ldr	r3, [r3, #4]
 80191b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80191b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191b4:	781b      	ldrb	r3, [r3, #0]
 80191b6:	f003 030f 	and.w	r3, r3, #15
 80191ba:	b2db      	uxtb	r3, r3
 80191bc:	009b      	lsls	r3, r3, #2
 80191be:	b2db      	uxtb	r3, r3
 80191c0:	2b14      	cmp	r3, #20
 80191c2:	f040 8167 	bne.w	8019494 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80191c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191c8:	88db      	ldrh	r3, [r3, #6]
 80191ca:	b29b      	uxth	r3, r3
 80191cc:	4618      	mov	r0, r3
 80191ce:	f7f4 fc8f 	bl	800daf0 <lwip_htons>
 80191d2:	4603      	mov	r3, r0
 80191d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80191d8:	b29b      	uxth	r3, r3
 80191da:	00db      	lsls	r3, r3, #3
 80191dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80191de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191e0:	885b      	ldrh	r3, [r3, #2]
 80191e2:	b29b      	uxth	r3, r3
 80191e4:	4618      	mov	r0, r3
 80191e6:	f7f4 fc83 	bl	800daf0 <lwip_htons>
 80191ea:	4603      	mov	r3, r0
 80191ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80191ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191f0:	781b      	ldrb	r3, [r3, #0]
 80191f2:	f003 030f 	and.w	r3, r3, #15
 80191f6:	b2db      	uxtb	r3, r3
 80191f8:	009b      	lsls	r3, r3, #2
 80191fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80191fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019202:	b29b      	uxth	r3, r3
 8019204:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019206:	429a      	cmp	r2, r3
 8019208:	f0c0 8146 	bcc.w	8019498 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801920c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019210:	b29b      	uxth	r3, r3
 8019212:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019214:	1ad3      	subs	r3, r2, r3
 8019216:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019218:	6878      	ldr	r0, [r7, #4]
 801921a:	f7f6 f8af 	bl	800f37c <pbuf_clen>
 801921e:	4603      	mov	r3, r0
 8019220:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019222:	4b9f      	ldr	r3, [pc, #636]	; (80194a0 <ip4_reass+0x2fc>)
 8019224:	881b      	ldrh	r3, [r3, #0]
 8019226:	461a      	mov	r2, r3
 8019228:	8c3b      	ldrh	r3, [r7, #32]
 801922a:	4413      	add	r3, r2
 801922c:	2b0a      	cmp	r3, #10
 801922e:	dd10      	ble.n	8019252 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019230:	8c3b      	ldrh	r3, [r7, #32]
 8019232:	4619      	mov	r1, r3
 8019234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019236:	f7ff fd81 	bl	8018d3c <ip_reass_remove_oldest_datagram>
 801923a:	4603      	mov	r3, r0
 801923c:	2b00      	cmp	r3, #0
 801923e:	f000 812d 	beq.w	801949c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019242:	4b97      	ldr	r3, [pc, #604]	; (80194a0 <ip4_reass+0x2fc>)
 8019244:	881b      	ldrh	r3, [r3, #0]
 8019246:	461a      	mov	r2, r3
 8019248:	8c3b      	ldrh	r3, [r7, #32]
 801924a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801924c:	2b0a      	cmp	r3, #10
 801924e:	f300 8125 	bgt.w	801949c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019252:	4b94      	ldr	r3, [pc, #592]	; (80194a4 <ip4_reass+0x300>)
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	633b      	str	r3, [r7, #48]	; 0x30
 8019258:	e015      	b.n	8019286 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801925a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801925c:	695a      	ldr	r2, [r3, #20]
 801925e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019260:	68db      	ldr	r3, [r3, #12]
 8019262:	429a      	cmp	r2, r3
 8019264:	d10c      	bne.n	8019280 <ip4_reass+0xdc>
 8019266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019268:	699a      	ldr	r2, [r3, #24]
 801926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801926c:	691b      	ldr	r3, [r3, #16]
 801926e:	429a      	cmp	r2, r3
 8019270:	d106      	bne.n	8019280 <ip4_reass+0xdc>
 8019272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019274:	899a      	ldrh	r2, [r3, #12]
 8019276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019278:	889b      	ldrh	r3, [r3, #4]
 801927a:	b29b      	uxth	r3, r3
 801927c:	429a      	cmp	r2, r3
 801927e:	d006      	beq.n	801928e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	633b      	str	r3, [r7, #48]	; 0x30
 8019286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019288:	2b00      	cmp	r3, #0
 801928a:	d1e6      	bne.n	801925a <ip4_reass+0xb6>
 801928c:	e000      	b.n	8019290 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801928e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019292:	2b00      	cmp	r3, #0
 8019294:	d109      	bne.n	80192aa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019296:	8c3b      	ldrh	r3, [r7, #32]
 8019298:	4619      	mov	r1, r3
 801929a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801929c:	f7ff fdb0 	bl	8018e00 <ip_reass_enqueue_new_datagram>
 80192a0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80192a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d11c      	bne.n	80192e2 <ip4_reass+0x13e>
      goto nullreturn;
 80192a8:	e109      	b.n	80194be <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80192aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ac:	88db      	ldrh	r3, [r3, #6]
 80192ae:	b29b      	uxth	r3, r3
 80192b0:	4618      	mov	r0, r3
 80192b2:	f7f4 fc1d 	bl	800daf0 <lwip_htons>
 80192b6:	4603      	mov	r3, r0
 80192b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d110      	bne.n	80192e2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80192c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192c2:	89db      	ldrh	r3, [r3, #14]
 80192c4:	4618      	mov	r0, r3
 80192c6:	f7f4 fc13 	bl	800daf0 <lwip_htons>
 80192ca:	4603      	mov	r3, r0
 80192cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d006      	beq.n	80192e2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80192d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192d6:	3308      	adds	r3, #8
 80192d8:	2214      	movs	r2, #20
 80192da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80192dc:	4618      	mov	r0, r3
 80192de:	f000 fff9 	bl	801a2d4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80192e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192e4:	88db      	ldrh	r3, [r3, #6]
 80192e6:	b29b      	uxth	r3, r3
 80192e8:	f003 0320 	and.w	r3, r3, #32
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	bf0c      	ite	eq
 80192f0:	2301      	moveq	r3, #1
 80192f2:	2300      	movne	r3, #0
 80192f4:	b2db      	uxtb	r3, r3
 80192f6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80192f8:	69fb      	ldr	r3, [r7, #28]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d00e      	beq.n	801931c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80192fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019302:	4413      	add	r3, r2
 8019304:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019306:	8b7a      	ldrh	r2, [r7, #26]
 8019308:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801930a:	429a      	cmp	r2, r3
 801930c:	f0c0 80a0 	bcc.w	8019450 <ip4_reass+0x2ac>
 8019310:	8b7b      	ldrh	r3, [r7, #26]
 8019312:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019316:	4293      	cmp	r3, r2
 8019318:	f200 809a 	bhi.w	8019450 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801931c:	69fa      	ldr	r2, [r7, #28]
 801931e:	6879      	ldr	r1, [r7, #4]
 8019320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019322:	f7ff fdd5 	bl	8018ed0 <ip_reass_chain_frag_into_datagram_and_validate>
 8019326:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019328:	697b      	ldr	r3, [r7, #20]
 801932a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801932e:	f000 8091 	beq.w	8019454 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019332:	4b5b      	ldr	r3, [pc, #364]	; (80194a0 <ip4_reass+0x2fc>)
 8019334:	881a      	ldrh	r2, [r3, #0]
 8019336:	8c3b      	ldrh	r3, [r7, #32]
 8019338:	4413      	add	r3, r2
 801933a:	b29a      	uxth	r2, r3
 801933c:	4b58      	ldr	r3, [pc, #352]	; (80194a0 <ip4_reass+0x2fc>)
 801933e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019340:	69fb      	ldr	r3, [r7, #28]
 8019342:	2b00      	cmp	r3, #0
 8019344:	d00d      	beq.n	8019362 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019346:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019348:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801934a:	4413      	add	r3, r2
 801934c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019350:	8a7a      	ldrh	r2, [r7, #18]
 8019352:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019356:	7f9b      	ldrb	r3, [r3, #30]
 8019358:	f043 0301 	orr.w	r3, r3, #1
 801935c:	b2da      	uxtb	r2, r3
 801935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019360:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019362:	697b      	ldr	r3, [r7, #20]
 8019364:	2b01      	cmp	r3, #1
 8019366:	d171      	bne.n	801944c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801936a:	8b9b      	ldrh	r3, [r3, #28]
 801936c:	3314      	adds	r3, #20
 801936e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019372:	685b      	ldr	r3, [r3, #4]
 8019374:	685b      	ldr	r3, [r3, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801937c:	685b      	ldr	r3, [r3, #4]
 801937e:	685b      	ldr	r3, [r3, #4]
 8019380:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019384:	3308      	adds	r3, #8
 8019386:	2214      	movs	r2, #20
 8019388:	4619      	mov	r1, r3
 801938a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801938c:	f000 ffa2 	bl	801a2d4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019390:	8a3b      	ldrh	r3, [r7, #16]
 8019392:	4618      	mov	r0, r3
 8019394:	f7f4 fbac 	bl	800daf0 <lwip_htons>
 8019398:	4603      	mov	r3, r0
 801939a:	461a      	mov	r2, r3
 801939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801939e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80193a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193a2:	2200      	movs	r2, #0
 80193a4:	719a      	strb	r2, [r3, #6]
 80193a6:	2200      	movs	r2, #0
 80193a8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80193aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193ac:	2200      	movs	r2, #0
 80193ae:	729a      	strb	r2, [r3, #10]
 80193b0:	2200      	movs	r2, #0
 80193b2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80193b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193b6:	685b      	ldr	r3, [r3, #4]
 80193b8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80193ba:	e00d      	b.n	80193d8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80193bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193be:	685b      	ldr	r3, [r3, #4]
 80193c0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80193c2:	2114      	movs	r1, #20
 80193c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80193c6:	f7f5 fec5 	bl	800f154 <pbuf_remove_header>
      pbuf_cat(p, r);
 80193ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80193cc:	6878      	ldr	r0, [r7, #4]
 80193ce:	f7f6 f815 	bl	800f3fc <pbuf_cat>
      r = iprh->next_pbuf;
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80193d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d1ee      	bne.n	80193bc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80193de:	4b31      	ldr	r3, [pc, #196]	; (80194a4 <ip4_reass+0x300>)
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80193e4:	429a      	cmp	r2, r3
 80193e6:	d102      	bne.n	80193ee <ip4_reass+0x24a>
      ipr_prev = NULL;
 80193e8:	2300      	movs	r3, #0
 80193ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80193ec:	e010      	b.n	8019410 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80193ee:	4b2d      	ldr	r3, [pc, #180]	; (80194a4 <ip4_reass+0x300>)
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80193f4:	e007      	b.n	8019406 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80193f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80193fc:	429a      	cmp	r2, r3
 80193fe:	d006      	beq.n	801940e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019408:	2b00      	cmp	r3, #0
 801940a:	d1f4      	bne.n	80193f6 <ip4_reass+0x252>
 801940c:	e000      	b.n	8019410 <ip4_reass+0x26c>
          break;
 801940e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019410:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019414:	f7ff fd2e 	bl	8018e74 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019418:	6878      	ldr	r0, [r7, #4]
 801941a:	f7f5 ffaf 	bl	800f37c <pbuf_clen>
 801941e:	4603      	mov	r3, r0
 8019420:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019422:	4b1f      	ldr	r3, [pc, #124]	; (80194a0 <ip4_reass+0x2fc>)
 8019424:	881b      	ldrh	r3, [r3, #0]
 8019426:	8c3a      	ldrh	r2, [r7, #32]
 8019428:	429a      	cmp	r2, r3
 801942a:	d906      	bls.n	801943a <ip4_reass+0x296>
 801942c:	4b1e      	ldr	r3, [pc, #120]	; (80194a8 <ip4_reass+0x304>)
 801942e:	f240 229b 	movw	r2, #667	; 0x29b
 8019432:	491e      	ldr	r1, [pc, #120]	; (80194ac <ip4_reass+0x308>)
 8019434:	481e      	ldr	r0, [pc, #120]	; (80194b0 <ip4_reass+0x30c>)
 8019436:	f001 f80d 	bl	801a454 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801943a:	4b19      	ldr	r3, [pc, #100]	; (80194a0 <ip4_reass+0x2fc>)
 801943c:	881a      	ldrh	r2, [r3, #0]
 801943e:	8c3b      	ldrh	r3, [r7, #32]
 8019440:	1ad3      	subs	r3, r2, r3
 8019442:	b29a      	uxth	r2, r3
 8019444:	4b16      	ldr	r3, [pc, #88]	; (80194a0 <ip4_reass+0x2fc>)
 8019446:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	e03c      	b.n	80194c6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801944c:	2300      	movs	r3, #0
 801944e:	e03a      	b.n	80194c6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8019450:	bf00      	nop
 8019452:	e000      	b.n	8019456 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8019454:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019458:	2b00      	cmp	r3, #0
 801945a:	d106      	bne.n	801946a <ip4_reass+0x2c6>
 801945c:	4b12      	ldr	r3, [pc, #72]	; (80194a8 <ip4_reass+0x304>)
 801945e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8019462:	4914      	ldr	r1, [pc, #80]	; (80194b4 <ip4_reass+0x310>)
 8019464:	4812      	ldr	r0, [pc, #72]	; (80194b0 <ip4_reass+0x30c>)
 8019466:	f000 fff5 	bl	801a454 <iprintf>
  if (ipr->p == NULL) {
 801946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801946c:	685b      	ldr	r3, [r3, #4]
 801946e:	2b00      	cmp	r3, #0
 8019470:	d124      	bne.n	80194bc <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019472:	4b0c      	ldr	r3, [pc, #48]	; (80194a4 <ip4_reass+0x300>)
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019478:	429a      	cmp	r2, r3
 801947a:	d006      	beq.n	801948a <ip4_reass+0x2e6>
 801947c:	4b0a      	ldr	r3, [pc, #40]	; (80194a8 <ip4_reass+0x304>)
 801947e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019482:	490d      	ldr	r1, [pc, #52]	; (80194b8 <ip4_reass+0x314>)
 8019484:	480a      	ldr	r0, [pc, #40]	; (80194b0 <ip4_reass+0x30c>)
 8019486:	f000 ffe5 	bl	801a454 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801948a:	2100      	movs	r1, #0
 801948c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801948e:	f7ff fcf1 	bl	8018e74 <ip_reass_dequeue_datagram>
 8019492:	e014      	b.n	80194be <ip4_reass+0x31a>
    goto nullreturn;
 8019494:	bf00      	nop
 8019496:	e012      	b.n	80194be <ip4_reass+0x31a>
    goto nullreturn;
 8019498:	bf00      	nop
 801949a:	e010      	b.n	80194be <ip4_reass+0x31a>
      goto nullreturn;
 801949c:	bf00      	nop
 801949e:	e00e      	b.n	80194be <ip4_reass+0x31a>
 80194a0:	20008618 	.word	0x20008618
 80194a4:	20008614 	.word	0x20008614
 80194a8:	0801e6a0 	.word	0x0801e6a0
 80194ac:	0801e810 	.word	0x0801e810
 80194b0:	0801e6e8 	.word	0x0801e6e8
 80194b4:	0801e82c 	.word	0x0801e82c
 80194b8:	0801e838 	.word	0x0801e838
  }

nullreturn:
 80194bc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80194be:	6878      	ldr	r0, [r7, #4]
 80194c0:	f7f5 fece 	bl	800f260 <pbuf_free>
  return NULL;
 80194c4:	2300      	movs	r3, #0
}
 80194c6:	4618      	mov	r0, r3
 80194c8:	3738      	adds	r7, #56	; 0x38
 80194ca:	46bd      	mov	sp, r7
 80194cc:	bd80      	pop	{r7, pc}
 80194ce:	bf00      	nop

080194d0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80194d4:	2005      	movs	r0, #5
 80194d6:	f7f4 ffc1 	bl	800e45c <memp_malloc>
 80194da:	4603      	mov	r3, r0
}
 80194dc:	4618      	mov	r0, r3
 80194de:	bd80      	pop	{r7, pc}

080194e0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80194e0:	b580      	push	{r7, lr}
 80194e2:	b082      	sub	sp, #8
 80194e4:	af00      	add	r7, sp, #0
 80194e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d106      	bne.n	80194fc <ip_frag_free_pbuf_custom_ref+0x1c>
 80194ee:	4b07      	ldr	r3, [pc, #28]	; (801950c <ip_frag_free_pbuf_custom_ref+0x2c>)
 80194f0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80194f4:	4906      	ldr	r1, [pc, #24]	; (8019510 <ip_frag_free_pbuf_custom_ref+0x30>)
 80194f6:	4807      	ldr	r0, [pc, #28]	; (8019514 <ip_frag_free_pbuf_custom_ref+0x34>)
 80194f8:	f000 ffac 	bl	801a454 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80194fc:	6879      	ldr	r1, [r7, #4]
 80194fe:	2005      	movs	r0, #5
 8019500:	f7f4 fffe 	bl	800e500 <memp_free>
}
 8019504:	bf00      	nop
 8019506:	3708      	adds	r7, #8
 8019508:	46bd      	mov	sp, r7
 801950a:	bd80      	pop	{r7, pc}
 801950c:	0801e6a0 	.word	0x0801e6a0
 8019510:	0801e858 	.word	0x0801e858
 8019514:	0801e6e8 	.word	0x0801e6e8

08019518 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019518:	b580      	push	{r7, lr}
 801951a:	b084      	sub	sp, #16
 801951c:	af00      	add	r7, sp, #0
 801951e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	2b00      	cmp	r3, #0
 8019528:	d106      	bne.n	8019538 <ipfrag_free_pbuf_custom+0x20>
 801952a:	4b11      	ldr	r3, [pc, #68]	; (8019570 <ipfrag_free_pbuf_custom+0x58>)
 801952c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019530:	4910      	ldr	r1, [pc, #64]	; (8019574 <ipfrag_free_pbuf_custom+0x5c>)
 8019532:	4811      	ldr	r0, [pc, #68]	; (8019578 <ipfrag_free_pbuf_custom+0x60>)
 8019534:	f000 ff8e 	bl	801a454 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019538:	68fa      	ldr	r2, [r7, #12]
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	429a      	cmp	r2, r3
 801953e:	d006      	beq.n	801954e <ipfrag_free_pbuf_custom+0x36>
 8019540:	4b0b      	ldr	r3, [pc, #44]	; (8019570 <ipfrag_free_pbuf_custom+0x58>)
 8019542:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019546:	490d      	ldr	r1, [pc, #52]	; (801957c <ipfrag_free_pbuf_custom+0x64>)
 8019548:	480b      	ldr	r0, [pc, #44]	; (8019578 <ipfrag_free_pbuf_custom+0x60>)
 801954a:	f000 ff83 	bl	801a454 <iprintf>
  if (pcr->original != NULL) {
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	695b      	ldr	r3, [r3, #20]
 8019552:	2b00      	cmp	r3, #0
 8019554:	d004      	beq.n	8019560 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019556:	68fb      	ldr	r3, [r7, #12]
 8019558:	695b      	ldr	r3, [r3, #20]
 801955a:	4618      	mov	r0, r3
 801955c:	f7f5 fe80 	bl	800f260 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019560:	68f8      	ldr	r0, [r7, #12]
 8019562:	f7ff ffbd 	bl	80194e0 <ip_frag_free_pbuf_custom_ref>
}
 8019566:	bf00      	nop
 8019568:	3710      	adds	r7, #16
 801956a:	46bd      	mov	sp, r7
 801956c:	bd80      	pop	{r7, pc}
 801956e:	bf00      	nop
 8019570:	0801e6a0 	.word	0x0801e6a0
 8019574:	0801e864 	.word	0x0801e864
 8019578:	0801e6e8 	.word	0x0801e6e8
 801957c:	0801e870 	.word	0x0801e870

08019580 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019580:	b580      	push	{r7, lr}
 8019582:	b094      	sub	sp, #80	; 0x50
 8019584:	af02      	add	r7, sp, #8
 8019586:	60f8      	str	r0, [r7, #12]
 8019588:	60b9      	str	r1, [r7, #8]
 801958a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801958c:	2300      	movs	r3, #0
 801958e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019592:	68bb      	ldr	r3, [r7, #8]
 8019594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019596:	3b14      	subs	r3, #20
 8019598:	2b00      	cmp	r3, #0
 801959a:	da00      	bge.n	801959e <ip4_frag+0x1e>
 801959c:	3307      	adds	r3, #7
 801959e:	10db      	asrs	r3, r3, #3
 80195a0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80195a2:	2314      	movs	r3, #20
 80195a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	685b      	ldr	r3, [r3, #4]
 80195aa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80195ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80195b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195b2:	781b      	ldrb	r3, [r3, #0]
 80195b4:	f003 030f 	and.w	r3, r3, #15
 80195b8:	b2db      	uxtb	r3, r3
 80195ba:	009b      	lsls	r3, r3, #2
 80195bc:	b2db      	uxtb	r3, r3
 80195be:	2b14      	cmp	r3, #20
 80195c0:	d002      	beq.n	80195c8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80195c2:	f06f 0305 	mvn.w	r3, #5
 80195c6:	e110      	b.n	80197ea <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	895b      	ldrh	r3, [r3, #10]
 80195cc:	2b13      	cmp	r3, #19
 80195ce:	d809      	bhi.n	80195e4 <ip4_frag+0x64>
 80195d0:	4b88      	ldr	r3, [pc, #544]	; (80197f4 <ip4_frag+0x274>)
 80195d2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80195d6:	4988      	ldr	r1, [pc, #544]	; (80197f8 <ip4_frag+0x278>)
 80195d8:	4888      	ldr	r0, [pc, #544]	; (80197fc <ip4_frag+0x27c>)
 80195da:	f000 ff3b 	bl	801a454 <iprintf>
 80195de:	f06f 0305 	mvn.w	r3, #5
 80195e2:	e102      	b.n	80197ea <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80195e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195e6:	88db      	ldrh	r3, [r3, #6]
 80195e8:	b29b      	uxth	r3, r3
 80195ea:	4618      	mov	r0, r3
 80195ec:	f7f4 fa80 	bl	800daf0 <lwip_htons>
 80195f0:	4603      	mov	r3, r0
 80195f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80195f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80195f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80195fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80195fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019604:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	891b      	ldrh	r3, [r3, #8]
 801960a:	3b14      	subs	r3, #20
 801960c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019610:	e0e1      	b.n	80197d6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019612:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019614:	00db      	lsls	r3, r3, #3
 8019616:	b29b      	uxth	r3, r3
 8019618:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801961c:	4293      	cmp	r3, r2
 801961e:	bf28      	it	cs
 8019620:	4613      	movcs	r3, r2
 8019622:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019624:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019628:	2114      	movs	r1, #20
 801962a:	200e      	movs	r0, #14
 801962c:	f7f5 fb34 	bl	800ec98 <pbuf_alloc>
 8019630:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019634:	2b00      	cmp	r3, #0
 8019636:	f000 80d5 	beq.w	80197e4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801963c:	895b      	ldrh	r3, [r3, #10]
 801963e:	2b13      	cmp	r3, #19
 8019640:	d806      	bhi.n	8019650 <ip4_frag+0xd0>
 8019642:	4b6c      	ldr	r3, [pc, #432]	; (80197f4 <ip4_frag+0x274>)
 8019644:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019648:	496d      	ldr	r1, [pc, #436]	; (8019800 <ip4_frag+0x280>)
 801964a:	486c      	ldr	r0, [pc, #432]	; (80197fc <ip4_frag+0x27c>)
 801964c:	f000 ff02 	bl	801a454 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019652:	685b      	ldr	r3, [r3, #4]
 8019654:	2214      	movs	r2, #20
 8019656:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019658:	4618      	mov	r0, r3
 801965a:	f000 fe3b 	bl	801a2d4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019660:	685b      	ldr	r3, [r3, #4]
 8019662:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019664:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019666:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801966a:	e064      	b.n	8019736 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	895a      	ldrh	r2, [r3, #10]
 8019670:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019672:	1ad3      	subs	r3, r2, r3
 8019674:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	895b      	ldrh	r3, [r3, #10]
 801967a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801967c:	429a      	cmp	r2, r3
 801967e:	d906      	bls.n	801968e <ip4_frag+0x10e>
 8019680:	4b5c      	ldr	r3, [pc, #368]	; (80197f4 <ip4_frag+0x274>)
 8019682:	f240 322d 	movw	r2, #813	; 0x32d
 8019686:	495f      	ldr	r1, [pc, #380]	; (8019804 <ip4_frag+0x284>)
 8019688:	485c      	ldr	r0, [pc, #368]	; (80197fc <ip4_frag+0x27c>)
 801968a:	f000 fee3 	bl	801a454 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801968e:	8bfa      	ldrh	r2, [r7, #30]
 8019690:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019694:	4293      	cmp	r3, r2
 8019696:	bf28      	it	cs
 8019698:	4613      	movcs	r3, r2
 801969a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801969e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d105      	bne.n	80196b2 <ip4_frag+0x132>
        poff = 0;
 80196a6:	2300      	movs	r3, #0
 80196a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	60fb      	str	r3, [r7, #12]
        continue;
 80196b0:	e041      	b.n	8019736 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80196b2:	f7ff ff0d 	bl	80194d0 <ip_frag_alloc_pbuf_custom_ref>
 80196b6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80196b8:	69bb      	ldr	r3, [r7, #24]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d103      	bne.n	80196c6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80196be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80196c0:	f7f5 fdce 	bl	800f260 <pbuf_free>
        goto memerr;
 80196c4:	e08f      	b.n	80197e6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80196c6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80196cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80196ce:	4413      	add	r3, r2
 80196d0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80196d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80196d8:	9201      	str	r2, [sp, #4]
 80196da:	9300      	str	r3, [sp, #0]
 80196dc:	4603      	mov	r3, r0
 80196de:	2241      	movs	r2, #65	; 0x41
 80196e0:	2000      	movs	r0, #0
 80196e2:	f7f5 fc03 	bl	800eeec <pbuf_alloced_custom>
 80196e6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80196e8:	697b      	ldr	r3, [r7, #20]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d106      	bne.n	80196fc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80196ee:	69b8      	ldr	r0, [r7, #24]
 80196f0:	f7ff fef6 	bl	80194e0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80196f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80196f6:	f7f5 fdb3 	bl	800f260 <pbuf_free>
        goto memerr;
 80196fa:	e074      	b.n	80197e6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80196fc:	68f8      	ldr	r0, [r7, #12]
 80196fe:	f7f5 fe55 	bl	800f3ac <pbuf_ref>
      pcr->original = p;
 8019702:	69bb      	ldr	r3, [r7, #24]
 8019704:	68fa      	ldr	r2, [r7, #12]
 8019706:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019708:	69bb      	ldr	r3, [r7, #24]
 801970a:	4a3f      	ldr	r2, [pc, #252]	; (8019808 <ip4_frag+0x288>)
 801970c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801970e:	6979      	ldr	r1, [r7, #20]
 8019710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019712:	f7f5 fe73 	bl	800f3fc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019716:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801971a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801971e:	1ad3      	subs	r3, r2, r3
 8019720:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019724:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019728:	2b00      	cmp	r3, #0
 801972a:	d004      	beq.n	8019736 <ip4_frag+0x1b6>
        poff = 0;
 801972c:	2300      	movs	r3, #0
 801972e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019736:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801973a:	2b00      	cmp	r3, #0
 801973c:	d196      	bne.n	801966c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801973e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019740:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019744:	4413      	add	r3, r2
 8019746:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019748:	68bb      	ldr	r3, [r7, #8]
 801974a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801974c:	f1a3 0213 	sub.w	r2, r3, #19
 8019750:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019754:	429a      	cmp	r2, r3
 8019756:	bfcc      	ite	gt
 8019758:	2301      	movgt	r3, #1
 801975a:	2300      	movle	r3, #0
 801975c:	b2db      	uxtb	r3, r3
 801975e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019760:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019768:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801976a:	6a3b      	ldr	r3, [r7, #32]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d002      	beq.n	8019776 <ip4_frag+0x1f6>
 8019770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019772:	2b00      	cmp	r3, #0
 8019774:	d003      	beq.n	801977e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019776:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019778:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801977c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801977e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019780:	4618      	mov	r0, r3
 8019782:	f7f4 f9b5 	bl	800daf0 <lwip_htons>
 8019786:	4603      	mov	r3, r0
 8019788:	461a      	mov	r2, r3
 801978a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801978c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801978e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019790:	3314      	adds	r3, #20
 8019792:	b29b      	uxth	r3, r3
 8019794:	4618      	mov	r0, r3
 8019796:	f7f4 f9ab 	bl	800daf0 <lwip_htons>
 801979a:	4603      	mov	r3, r0
 801979c:	461a      	mov	r2, r3
 801979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197a0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80197a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197a4:	2200      	movs	r2, #0
 80197a6:	729a      	strb	r2, [r3, #10]
 80197a8:	2200      	movs	r2, #0
 80197aa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80197ac:	68bb      	ldr	r3, [r7, #8]
 80197ae:	695b      	ldr	r3, [r3, #20]
 80197b0:	687a      	ldr	r2, [r7, #4]
 80197b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80197b4:	68b8      	ldr	r0, [r7, #8]
 80197b6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80197b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80197ba:	f7f5 fd51 	bl	800f260 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80197be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80197c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80197c4:	1ad3      	subs	r3, r2, r3
 80197c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80197ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80197ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80197d0:	4413      	add	r3, r2
 80197d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80197d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80197da:	2b00      	cmp	r3, #0
 80197dc:	f47f af19 	bne.w	8019612 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80197e0:	2300      	movs	r3, #0
 80197e2:	e002      	b.n	80197ea <ip4_frag+0x26a>
      goto memerr;
 80197e4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80197e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80197ea:	4618      	mov	r0, r3
 80197ec:	3748      	adds	r7, #72	; 0x48
 80197ee:	46bd      	mov	sp, r7
 80197f0:	bd80      	pop	{r7, pc}
 80197f2:	bf00      	nop
 80197f4:	0801e6a0 	.word	0x0801e6a0
 80197f8:	0801e87c 	.word	0x0801e87c
 80197fc:	0801e6e8 	.word	0x0801e6e8
 8019800:	0801e898 	.word	0x0801e898
 8019804:	0801e8b8 	.word	0x0801e8b8
 8019808:	08019519 	.word	0x08019519

0801980c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801980c:	b580      	push	{r7, lr}
 801980e:	b086      	sub	sp, #24
 8019810:	af00      	add	r7, sp, #0
 8019812:	6078      	str	r0, [r7, #4]
 8019814:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019816:	230e      	movs	r3, #14
 8019818:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	895b      	ldrh	r3, [r3, #10]
 801981e:	2b0e      	cmp	r3, #14
 8019820:	d96e      	bls.n	8019900 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	7bdb      	ldrb	r3, [r3, #15]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d106      	bne.n	8019838 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801982a:	683b      	ldr	r3, [r7, #0]
 801982c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019830:	3301      	adds	r3, #1
 8019832:	b2da      	uxtb	r2, r3
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	685b      	ldr	r3, [r3, #4]
 801983c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801983e:	693b      	ldr	r3, [r7, #16]
 8019840:	7b1a      	ldrb	r2, [r3, #12]
 8019842:	7b5b      	ldrb	r3, [r3, #13]
 8019844:	021b      	lsls	r3, r3, #8
 8019846:	4313      	orrs	r3, r2
 8019848:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801984a:	693b      	ldr	r3, [r7, #16]
 801984c:	781b      	ldrb	r3, [r3, #0]
 801984e:	f003 0301 	and.w	r3, r3, #1
 8019852:	2b00      	cmp	r3, #0
 8019854:	d023      	beq.n	801989e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019856:	693b      	ldr	r3, [r7, #16]
 8019858:	781b      	ldrb	r3, [r3, #0]
 801985a:	2b01      	cmp	r3, #1
 801985c:	d10f      	bne.n	801987e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801985e:	693b      	ldr	r3, [r7, #16]
 8019860:	785b      	ldrb	r3, [r3, #1]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d11b      	bne.n	801989e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019866:	693b      	ldr	r3, [r7, #16]
 8019868:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801986a:	2b5e      	cmp	r3, #94	; 0x5e
 801986c:	d117      	bne.n	801989e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	7b5b      	ldrb	r3, [r3, #13]
 8019872:	f043 0310 	orr.w	r3, r3, #16
 8019876:	b2da      	uxtb	r2, r3
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	735a      	strb	r2, [r3, #13]
 801987c:	e00f      	b.n	801989e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801987e:	693b      	ldr	r3, [r7, #16]
 8019880:	2206      	movs	r2, #6
 8019882:	4928      	ldr	r1, [pc, #160]	; (8019924 <ethernet_input+0x118>)
 8019884:	4618      	mov	r0, r3
 8019886:	f000 fd17 	bl	801a2b8 <memcmp>
 801988a:	4603      	mov	r3, r0
 801988c:	2b00      	cmp	r3, #0
 801988e:	d106      	bne.n	801989e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	7b5b      	ldrb	r3, [r3, #13]
 8019894:	f043 0308 	orr.w	r3, r3, #8
 8019898:	b2da      	uxtb	r2, r3
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801989e:	89fb      	ldrh	r3, [r7, #14]
 80198a0:	2b08      	cmp	r3, #8
 80198a2:	d003      	beq.n	80198ac <ethernet_input+0xa0>
 80198a4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80198a8:	d014      	beq.n	80198d4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80198aa:	e032      	b.n	8019912 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80198ac:	683b      	ldr	r3, [r7, #0]
 80198ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80198b2:	f003 0308 	and.w	r3, r3, #8
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d024      	beq.n	8019904 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80198ba:	8afb      	ldrh	r3, [r7, #22]
 80198bc:	4619      	mov	r1, r3
 80198be:	6878      	ldr	r0, [r7, #4]
 80198c0:	f7f5 fc48 	bl	800f154 <pbuf_remove_header>
 80198c4:	4603      	mov	r3, r0
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d11e      	bne.n	8019908 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80198ca:	6839      	ldr	r1, [r7, #0]
 80198cc:	6878      	ldr	r0, [r7, #4]
 80198ce:	f7fe ff09 	bl	80186e4 <ip4_input>
      break;
 80198d2:	e013      	b.n	80198fc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80198d4:	683b      	ldr	r3, [r7, #0]
 80198d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80198da:	f003 0308 	and.w	r3, r3, #8
 80198de:	2b00      	cmp	r3, #0
 80198e0:	d014      	beq.n	801990c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80198e2:	8afb      	ldrh	r3, [r7, #22]
 80198e4:	4619      	mov	r1, r3
 80198e6:	6878      	ldr	r0, [r7, #4]
 80198e8:	f7f5 fc34 	bl	800f154 <pbuf_remove_header>
 80198ec:	4603      	mov	r3, r0
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d10e      	bne.n	8019910 <ethernet_input+0x104>
        etharp_input(p, netif);
 80198f2:	6839      	ldr	r1, [r7, #0]
 80198f4:	6878      	ldr	r0, [r7, #4]
 80198f6:	f7fe f8a5 	bl	8017a44 <etharp_input>
      break;
 80198fa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80198fc:	2300      	movs	r3, #0
 80198fe:	e00c      	b.n	801991a <ethernet_input+0x10e>
    goto free_and_return;
 8019900:	bf00      	nop
 8019902:	e006      	b.n	8019912 <ethernet_input+0x106>
        goto free_and_return;
 8019904:	bf00      	nop
 8019906:	e004      	b.n	8019912 <ethernet_input+0x106>
        goto free_and_return;
 8019908:	bf00      	nop
 801990a:	e002      	b.n	8019912 <ethernet_input+0x106>
        goto free_and_return;
 801990c:	bf00      	nop
 801990e:	e000      	b.n	8019912 <ethernet_input+0x106>
        goto free_and_return;
 8019910:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019912:	6878      	ldr	r0, [r7, #4]
 8019914:	f7f5 fca4 	bl	800f260 <pbuf_free>
  return ERR_OK;
 8019918:	2300      	movs	r3, #0
}
 801991a:	4618      	mov	r0, r3
 801991c:	3718      	adds	r7, #24
 801991e:	46bd      	mov	sp, r7
 8019920:	bd80      	pop	{r7, pc}
 8019922:	bf00      	nop
 8019924:	0801eab0 	.word	0x0801eab0

08019928 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019928:	b580      	push	{r7, lr}
 801992a:	b086      	sub	sp, #24
 801992c:	af00      	add	r7, sp, #0
 801992e:	60f8      	str	r0, [r7, #12]
 8019930:	60b9      	str	r1, [r7, #8]
 8019932:	607a      	str	r2, [r7, #4]
 8019934:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019936:	8c3b      	ldrh	r3, [r7, #32]
 8019938:	4618      	mov	r0, r3
 801993a:	f7f4 f8d9 	bl	800daf0 <lwip_htons>
 801993e:	4603      	mov	r3, r0
 8019940:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019942:	210e      	movs	r1, #14
 8019944:	68b8      	ldr	r0, [r7, #8]
 8019946:	f7f5 fbf5 	bl	800f134 <pbuf_add_header>
 801994a:	4603      	mov	r3, r0
 801994c:	2b00      	cmp	r3, #0
 801994e:	d125      	bne.n	801999c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019950:	68bb      	ldr	r3, [r7, #8]
 8019952:	685b      	ldr	r3, [r3, #4]
 8019954:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019956:	693b      	ldr	r3, [r7, #16]
 8019958:	8afa      	ldrh	r2, [r7, #22]
 801995a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801995c:	693b      	ldr	r3, [r7, #16]
 801995e:	2206      	movs	r2, #6
 8019960:	6839      	ldr	r1, [r7, #0]
 8019962:	4618      	mov	r0, r3
 8019964:	f000 fcb6 	bl	801a2d4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019968:	693b      	ldr	r3, [r7, #16]
 801996a:	3306      	adds	r3, #6
 801996c:	2206      	movs	r2, #6
 801996e:	6879      	ldr	r1, [r7, #4]
 8019970:	4618      	mov	r0, r3
 8019972:	f000 fcaf 	bl	801a2d4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801997c:	2b06      	cmp	r3, #6
 801997e:	d006      	beq.n	801998e <ethernet_output+0x66>
 8019980:	4b0a      	ldr	r3, [pc, #40]	; (80199ac <ethernet_output+0x84>)
 8019982:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019986:	490a      	ldr	r1, [pc, #40]	; (80199b0 <ethernet_output+0x88>)
 8019988:	480a      	ldr	r0, [pc, #40]	; (80199b4 <ethernet_output+0x8c>)
 801998a:	f000 fd63 	bl	801a454 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	699b      	ldr	r3, [r3, #24]
 8019992:	68b9      	ldr	r1, [r7, #8]
 8019994:	68f8      	ldr	r0, [r7, #12]
 8019996:	4798      	blx	r3
 8019998:	4603      	mov	r3, r0
 801999a:	e002      	b.n	80199a2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801999c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801999e:	f06f 0301 	mvn.w	r3, #1
}
 80199a2:	4618      	mov	r0, r3
 80199a4:	3718      	adds	r7, #24
 80199a6:	46bd      	mov	sp, r7
 80199a8:	bd80      	pop	{r7, pc}
 80199aa:	bf00      	nop
 80199ac:	0801e8c8 	.word	0x0801e8c8
 80199b0:	0801e900 	.word	0x0801e900
 80199b4:	0801e934 	.word	0x0801e934

080199b8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b086      	sub	sp, #24
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
 80199c0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80199c2:	683b      	ldr	r3, [r7, #0]
 80199c4:	60bb      	str	r3, [r7, #8]
 80199c6:	2304      	movs	r3, #4
 80199c8:	60fb      	str	r3, [r7, #12]
 80199ca:	2300      	movs	r3, #0
 80199cc:	613b      	str	r3, [r7, #16]
 80199ce:	2300      	movs	r3, #0
 80199d0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80199d2:	f107 0308 	add.w	r3, r7, #8
 80199d6:	2100      	movs	r1, #0
 80199d8:	4618      	mov	r0, r3
 80199da:	f7f1 f9d1 	bl	800ad80 <osMessageCreate>
 80199de:	4602      	mov	r2, r0
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d102      	bne.n	80199f2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80199ec:	f04f 33ff 	mov.w	r3, #4294967295
 80199f0:	e000      	b.n	80199f4 <sys_mbox_new+0x3c>

  return ERR_OK;
 80199f2:	2300      	movs	r3, #0
}
 80199f4:	4618      	mov	r0, r3
 80199f6:	3718      	adds	r7, #24
 80199f8:	46bd      	mov	sp, r7
 80199fa:	bd80      	pop	{r7, pc}

080199fc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80199fc:	b580      	push	{r7, lr}
 80199fe:	b084      	sub	sp, #16
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	6078      	str	r0, [r7, #4]
 8019a04:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	6839      	ldr	r1, [r7, #0]
 8019a0c:	2200      	movs	r2, #0
 8019a0e:	4618      	mov	r0, r3
 8019a10:	f7f1 f9de 	bl	800add0 <osMessagePut>
 8019a14:	4603      	mov	r3, r0
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d102      	bne.n	8019a20 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019a1a:	2300      	movs	r3, #0
 8019a1c:	73fb      	strb	r3, [r7, #15]
 8019a1e:	e001      	b.n	8019a24 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019a20:	23ff      	movs	r3, #255	; 0xff
 8019a22:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019a28:	4618      	mov	r0, r3
 8019a2a:	3710      	adds	r7, #16
 8019a2c:	46bd      	mov	sp, r7
 8019a2e:	bd80      	pop	{r7, pc}

08019a30 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019a30:	b580      	push	{r7, lr}
 8019a32:	b08c      	sub	sp, #48	; 0x30
 8019a34:	af00      	add	r7, sp, #0
 8019a36:	61f8      	str	r0, [r7, #28]
 8019a38:	61b9      	str	r1, [r7, #24]
 8019a3a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019a3c:	f7f0 ffde 	bl	800a9fc <osKernelSysTick>
 8019a40:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019a42:	697b      	ldr	r3, [r7, #20]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d017      	beq.n	8019a78 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019a48:	69fb      	ldr	r3, [r7, #28]
 8019a4a:	6819      	ldr	r1, [r3, #0]
 8019a4c:	f107 0320 	add.w	r3, r7, #32
 8019a50:	697a      	ldr	r2, [r7, #20]
 8019a52:	4618      	mov	r0, r3
 8019a54:	f7f1 f9fc 	bl	800ae50 <osMessageGet>

    if(event.status == osEventMessage)
 8019a58:	6a3b      	ldr	r3, [r7, #32]
 8019a5a:	2b10      	cmp	r3, #16
 8019a5c:	d109      	bne.n	8019a72 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a60:	461a      	mov	r2, r3
 8019a62:	69bb      	ldr	r3, [r7, #24]
 8019a64:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019a66:	f7f0 ffc9 	bl	800a9fc <osKernelSysTick>
 8019a6a:	4602      	mov	r2, r0
 8019a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a6e:	1ad3      	subs	r3, r2, r3
 8019a70:	e019      	b.n	8019aa6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019a72:	f04f 33ff 	mov.w	r3, #4294967295
 8019a76:	e016      	b.n	8019aa6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019a78:	69fb      	ldr	r3, [r7, #28]
 8019a7a:	6819      	ldr	r1, [r3, #0]
 8019a7c:	463b      	mov	r3, r7
 8019a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8019a82:	4618      	mov	r0, r3
 8019a84:	f7f1 f9e4 	bl	800ae50 <osMessageGet>
 8019a88:	f107 0320 	add.w	r3, r7, #32
 8019a8c:	463a      	mov	r2, r7
 8019a8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8019a90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a96:	461a      	mov	r2, r3
 8019a98:	69bb      	ldr	r3, [r7, #24]
 8019a9a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019a9c:	f7f0 ffae 	bl	800a9fc <osKernelSysTick>
 8019aa0:	4602      	mov	r2, r0
 8019aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019aa4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	3730      	adds	r7, #48	; 0x30
 8019aaa:	46bd      	mov	sp, r7
 8019aac:	bd80      	pop	{r7, pc}

08019aae <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019aae:	b480      	push	{r7}
 8019ab0:	b083      	sub	sp, #12
 8019ab2:	af00      	add	r7, sp, #0
 8019ab4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d101      	bne.n	8019ac2 <sys_mbox_valid+0x14>
    return 0;
 8019abe:	2300      	movs	r3, #0
 8019ac0:	e000      	b.n	8019ac4 <sys_mbox_valid+0x16>
  else
    return 1;
 8019ac2:	2301      	movs	r3, #1
}
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	370c      	adds	r7, #12
 8019ac8:	46bd      	mov	sp, r7
 8019aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ace:	4770      	bx	lr

08019ad0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019ad0:	b580      	push	{r7, lr}
 8019ad2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019ad4:	4803      	ldr	r0, [pc, #12]	; (8019ae4 <sys_init+0x14>)
 8019ad6:	f7f1 f801 	bl	800aadc <osMutexCreate>
 8019ada:	4603      	mov	r3, r0
 8019adc:	4a02      	ldr	r2, [pc, #8]	; (8019ae8 <sys_init+0x18>)
 8019ade:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019ae0:	bf00      	nop
 8019ae2:	bd80      	pop	{r7, pc}
 8019ae4:	0801eac0 	.word	0x0801eac0
 8019ae8:	2000f3dc 	.word	0x2000f3dc

08019aec <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019aec:	b580      	push	{r7, lr}
 8019aee:	b084      	sub	sp, #16
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019af4:	2300      	movs	r3, #0
 8019af6:	60bb      	str	r3, [r7, #8]
 8019af8:	2300      	movs	r3, #0
 8019afa:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019afc:	f107 0308 	add.w	r3, r7, #8
 8019b00:	4618      	mov	r0, r3
 8019b02:	f7f0 ffeb 	bl	800aadc <osMutexCreate>
 8019b06:	4602      	mov	r2, r0
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d102      	bne.n	8019b1a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019b14:	f04f 33ff 	mov.w	r3, #4294967295
 8019b18:	e000      	b.n	8019b1c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019b1a:	2300      	movs	r3, #0
}
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	3710      	adds	r7, #16
 8019b20:	46bd      	mov	sp, r7
 8019b22:	bd80      	pop	{r7, pc}

08019b24 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019b24:	b580      	push	{r7, lr}
 8019b26:	b082      	sub	sp, #8
 8019b28:	af00      	add	r7, sp, #0
 8019b2a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	f04f 31ff 	mov.w	r1, #4294967295
 8019b34:	4618      	mov	r0, r3
 8019b36:	f7f0 ffe9 	bl	800ab0c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8019b3a:	bf00      	nop
 8019b3c:	3708      	adds	r7, #8
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	bd80      	pop	{r7, pc}

08019b42 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019b42:	b580      	push	{r7, lr}
 8019b44:	b082      	sub	sp, #8
 8019b46:	af00      	add	r7, sp, #0
 8019b48:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	4618      	mov	r0, r3
 8019b50:	f7f1 f82a 	bl	800aba8 <osMutexRelease>
}
 8019b54:	bf00      	nop
 8019b56:	3708      	adds	r7, #8
 8019b58:	46bd      	mov	sp, r7
 8019b5a:	bd80      	pop	{r7, pc}

08019b5c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019b5c:	b580      	push	{r7, lr}
 8019b5e:	b08c      	sub	sp, #48	; 0x30
 8019b60:	af00      	add	r7, sp, #0
 8019b62:	60f8      	str	r0, [r7, #12]
 8019b64:	60b9      	str	r1, [r7, #8]
 8019b66:	607a      	str	r2, [r7, #4]
 8019b68:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8019b6a:	f107 0314 	add.w	r3, r7, #20
 8019b6e:	2200      	movs	r2, #0
 8019b70:	601a      	str	r2, [r3, #0]
 8019b72:	605a      	str	r2, [r3, #4]
 8019b74:	609a      	str	r2, [r3, #8]
 8019b76:	60da      	str	r2, [r3, #12]
 8019b78:	611a      	str	r2, [r3, #16]
 8019b7a:	615a      	str	r2, [r3, #20]
 8019b7c:	619a      	str	r2, [r3, #24]
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	617b      	str	r3, [r7, #20]
 8019b82:	68bb      	ldr	r3, [r7, #8]
 8019b84:	61bb      	str	r3, [r7, #24]
 8019b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b88:	b21b      	sxth	r3, r3
 8019b8a:	83bb      	strh	r3, [r7, #28]
 8019b8c:	683b      	ldr	r3, [r7, #0]
 8019b8e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019b90:	f107 0314 	add.w	r3, r7, #20
 8019b94:	6879      	ldr	r1, [r7, #4]
 8019b96:	4618      	mov	r0, r3
 8019b98:	f7f0 ff40 	bl	800aa1c <osThreadCreate>
 8019b9c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	3730      	adds	r7, #48	; 0x30
 8019ba2:	46bd      	mov	sp, r7
 8019ba4:	bd80      	pop	{r7, pc}
	...

08019ba8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019bac:	4b04      	ldr	r3, [pc, #16]	; (8019bc0 <sys_arch_protect+0x18>)
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	f7f0 ffa9 	bl	800ab0c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8019bba:	2301      	movs	r3, #1
}
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	bd80      	pop	{r7, pc}
 8019bc0:	2000f3dc 	.word	0x2000f3dc

08019bc4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019bc4:	b580      	push	{r7, lr}
 8019bc6:	b082      	sub	sp, #8
 8019bc8:	af00      	add	r7, sp, #0
 8019bca:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019bcc:	4b04      	ldr	r3, [pc, #16]	; (8019be0 <sys_arch_unprotect+0x1c>)
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	f7f0 ffe9 	bl	800aba8 <osMutexRelease>
}
 8019bd6:	bf00      	nop
 8019bd8:	3708      	adds	r7, #8
 8019bda:	46bd      	mov	sp, r7
 8019bdc:	bd80      	pop	{r7, pc}
 8019bde:	bf00      	nop
 8019be0:	2000f3dc 	.word	0x2000f3dc

08019be4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8019be4:	b580      	push	{r7, lr}
 8019be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8019be8:	2201      	movs	r2, #1
 8019bea:	490e      	ldr	r1, [pc, #56]	; (8019c24 <MX_USB_HOST_Init+0x40>)
 8019bec:	480e      	ldr	r0, [pc, #56]	; (8019c28 <MX_USB_HOST_Init+0x44>)
 8019bee:	f7ee ff23 	bl	8008a38 <USBH_Init>
 8019bf2:	4603      	mov	r3, r0
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d001      	beq.n	8019bfc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8019bf8:	f7e6 fe66 	bl	80008c8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8019bfc:	490b      	ldr	r1, [pc, #44]	; (8019c2c <MX_USB_HOST_Init+0x48>)
 8019bfe:	480a      	ldr	r0, [pc, #40]	; (8019c28 <MX_USB_HOST_Init+0x44>)
 8019c00:	f7ee ffde 	bl	8008bc0 <USBH_RegisterClass>
 8019c04:	4603      	mov	r3, r0
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d001      	beq.n	8019c0e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8019c0a:	f7e6 fe5d 	bl	80008c8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8019c0e:	4806      	ldr	r0, [pc, #24]	; (8019c28 <MX_USB_HOST_Init+0x44>)
 8019c10:	f7ef f8c4 	bl	8008d9c <USBH_Start>
 8019c14:	4603      	mov	r3, r0
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d001      	beq.n	8019c1e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8019c1a:	f7e6 fe55 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8019c1e:	bf00      	nop
 8019c20:	bd80      	pop	{r7, pc}
 8019c22:	bf00      	nop
 8019c24:	08019c31 	.word	0x08019c31
 8019c28:	2000f3e0 	.word	0x2000f3e0
 8019c2c:	2000000c 	.word	0x2000000c

08019c30 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8019c30:	b480      	push	{r7}
 8019c32:	b083      	sub	sp, #12
 8019c34:	af00      	add	r7, sp, #0
 8019c36:	6078      	str	r0, [r7, #4]
 8019c38:	460b      	mov	r3, r1
 8019c3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8019c3c:	78fb      	ldrb	r3, [r7, #3]
 8019c3e:	3b01      	subs	r3, #1
 8019c40:	2b04      	cmp	r3, #4
 8019c42:	d819      	bhi.n	8019c78 <USBH_UserProcess+0x48>
 8019c44:	a201      	add	r2, pc, #4	; (adr r2, 8019c4c <USBH_UserProcess+0x1c>)
 8019c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c4a:	bf00      	nop
 8019c4c:	08019c79 	.word	0x08019c79
 8019c50:	08019c69 	.word	0x08019c69
 8019c54:	08019c79 	.word	0x08019c79
 8019c58:	08019c71 	.word	0x08019c71
 8019c5c:	08019c61 	.word	0x08019c61
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8019c60:	4b09      	ldr	r3, [pc, #36]	; (8019c88 <USBH_UserProcess+0x58>)
 8019c62:	2203      	movs	r2, #3
 8019c64:	701a      	strb	r2, [r3, #0]
  break;
 8019c66:	e008      	b.n	8019c7a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8019c68:	4b07      	ldr	r3, [pc, #28]	; (8019c88 <USBH_UserProcess+0x58>)
 8019c6a:	2202      	movs	r2, #2
 8019c6c:	701a      	strb	r2, [r3, #0]
  break;
 8019c6e:	e004      	b.n	8019c7a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8019c70:	4b05      	ldr	r3, [pc, #20]	; (8019c88 <USBH_UserProcess+0x58>)
 8019c72:	2201      	movs	r2, #1
 8019c74:	701a      	strb	r2, [r3, #0]
  break;
 8019c76:	e000      	b.n	8019c7a <USBH_UserProcess+0x4a>

  default:
  break;
 8019c78:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8019c7a:	bf00      	nop
 8019c7c:	370c      	adds	r7, #12
 8019c7e:	46bd      	mov	sp, r7
 8019c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c84:	4770      	bx	lr
 8019c86:	bf00      	nop
 8019c88:	2000861a 	.word	0x2000861a

08019c8c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b08a      	sub	sp, #40	; 0x28
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019c94:	f107 0314 	add.w	r3, r7, #20
 8019c98:	2200      	movs	r2, #0
 8019c9a:	601a      	str	r2, [r3, #0]
 8019c9c:	605a      	str	r2, [r3, #4]
 8019c9e:	609a      	str	r2, [r3, #8]
 8019ca0:	60da      	str	r2, [r3, #12]
 8019ca2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019cac:	d147      	bne.n	8019d3e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019cae:	2300      	movs	r3, #0
 8019cb0:	613b      	str	r3, [r7, #16]
 8019cb2:	4b25      	ldr	r3, [pc, #148]	; (8019d48 <HAL_HCD_MspInit+0xbc>)
 8019cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019cb6:	4a24      	ldr	r2, [pc, #144]	; (8019d48 <HAL_HCD_MspInit+0xbc>)
 8019cb8:	f043 0301 	orr.w	r3, r3, #1
 8019cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8019cbe:	4b22      	ldr	r3, [pc, #136]	; (8019d48 <HAL_HCD_MspInit+0xbc>)
 8019cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019cc2:	f003 0301 	and.w	r3, r3, #1
 8019cc6:	613b      	str	r3, [r7, #16]
 8019cc8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8019cca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8019cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019cd0:	2302      	movs	r3, #2
 8019cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019cd8:	2303      	movs	r3, #3
 8019cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019cdc:	230a      	movs	r3, #10
 8019cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019ce0:	f107 0314 	add.w	r3, r7, #20
 8019ce4:	4619      	mov	r1, r3
 8019ce6:	4819      	ldr	r0, [pc, #100]	; (8019d4c <HAL_HCD_MspInit+0xc0>)
 8019ce8:	f7e8 fab6 	bl	8002258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8019cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019cf2:	2300      	movs	r3, #0
 8019cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019cf6:	2300      	movs	r3, #0
 8019cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8019cfa:	f107 0314 	add.w	r3, r7, #20
 8019cfe:	4619      	mov	r1, r3
 8019d00:	4812      	ldr	r0, [pc, #72]	; (8019d4c <HAL_HCD_MspInit+0xc0>)
 8019d02:	f7e8 faa9 	bl	8002258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019d06:	4b10      	ldr	r3, [pc, #64]	; (8019d48 <HAL_HCD_MspInit+0xbc>)
 8019d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d0a:	4a0f      	ldr	r2, [pc, #60]	; (8019d48 <HAL_HCD_MspInit+0xbc>)
 8019d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d10:	6353      	str	r3, [r2, #52]	; 0x34
 8019d12:	2300      	movs	r3, #0
 8019d14:	60fb      	str	r3, [r7, #12]
 8019d16:	4b0c      	ldr	r3, [pc, #48]	; (8019d48 <HAL_HCD_MspInit+0xbc>)
 8019d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d1a:	4a0b      	ldr	r2, [pc, #44]	; (8019d48 <HAL_HCD_MspInit+0xbc>)
 8019d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019d20:	6453      	str	r3, [r2, #68]	; 0x44
 8019d22:	4b09      	ldr	r3, [pc, #36]	; (8019d48 <HAL_HCD_MspInit+0xbc>)
 8019d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019d2a:	60fb      	str	r3, [r7, #12]
 8019d2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019d2e:	2200      	movs	r2, #0
 8019d30:	2105      	movs	r1, #5
 8019d32:	2043      	movs	r0, #67	; 0x43
 8019d34:	f7e7 f8c0 	bl	8000eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019d38:	2043      	movs	r0, #67	; 0x43
 8019d3a:	f7e7 f8d9 	bl	8000ef0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019d3e:	bf00      	nop
 8019d40:	3728      	adds	r7, #40	; 0x28
 8019d42:	46bd      	mov	sp, r7
 8019d44:	bd80      	pop	{r7, pc}
 8019d46:	bf00      	nop
 8019d48:	40023800 	.word	0x40023800
 8019d4c:	40020000 	.word	0x40020000

08019d50 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8019d50:	b580      	push	{r7, lr}
 8019d52:	b082      	sub	sp, #8
 8019d54:	af00      	add	r7, sp, #0
 8019d56:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019d5e:	4618      	mov	r0, r3
 8019d60:	f7ef fe17 	bl	8009992 <USBH_LL_IncTimer>
}
 8019d64:	bf00      	nop
 8019d66:	3708      	adds	r7, #8
 8019d68:	46bd      	mov	sp, r7
 8019d6a:	bd80      	pop	{r7, pc}

08019d6c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019d6c:	b580      	push	{r7, lr}
 8019d6e:	b082      	sub	sp, #8
 8019d70:	af00      	add	r7, sp, #0
 8019d72:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019d7a:	4618      	mov	r0, r3
 8019d7c:	f7ef fe5b 	bl	8009a36 <USBH_LL_Connect>
}
 8019d80:	bf00      	nop
 8019d82:	3708      	adds	r7, #8
 8019d84:	46bd      	mov	sp, r7
 8019d86:	bd80      	pop	{r7, pc}

08019d88 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b082      	sub	sp, #8
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019d96:	4618      	mov	r0, r3
 8019d98:	f7ef fe70 	bl	8009a7c <USBH_LL_Disconnect>
}
 8019d9c:	bf00      	nop
 8019d9e:	3708      	adds	r7, #8
 8019da0:	46bd      	mov	sp, r7
 8019da2:	bd80      	pop	{r7, pc}

08019da4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8019da4:	b580      	push	{r7, lr}
 8019da6:	b082      	sub	sp, #8
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	6078      	str	r0, [r7, #4]
 8019dac:	460b      	mov	r3, r1
 8019dae:	70fb      	strb	r3, [r7, #3]
 8019db0:	4613      	mov	r3, r2
 8019db2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019dba:	4618      	mov	r0, r3
 8019dbc:	f7ef fea5 	bl	8009b0a <USBH_LL_NotifyURBChange>
#endif
}
 8019dc0:	bf00      	nop
 8019dc2:	3708      	adds	r7, #8
 8019dc4:	46bd      	mov	sp, r7
 8019dc6:	bd80      	pop	{r7, pc}

08019dc8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019dc8:	b580      	push	{r7, lr}
 8019dca:	b082      	sub	sp, #8
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	f7ef fe05 	bl	80099e6 <USBH_LL_PortEnabled>
}
 8019ddc:	bf00      	nop
 8019dde:	3708      	adds	r7, #8
 8019de0:	46bd      	mov	sp, r7
 8019de2:	bd80      	pop	{r7, pc}

08019de4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019de4:	b580      	push	{r7, lr}
 8019de6:	b082      	sub	sp, #8
 8019de8:	af00      	add	r7, sp, #0
 8019dea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019df2:	4618      	mov	r0, r3
 8019df4:	f7ef fe11 	bl	8009a1a <USBH_LL_PortDisabled>
}
 8019df8:	bf00      	nop
 8019dfa:	3708      	adds	r7, #8
 8019dfc:	46bd      	mov	sp, r7
 8019dfe:	bd80      	pop	{r7, pc}

08019e00 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b082      	sub	sp, #8
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8019e0e:	2b01      	cmp	r3, #1
 8019e10:	d12a      	bne.n	8019e68 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8019e12:	4a18      	ldr	r2, [pc, #96]	; (8019e74 <USBH_LL_Init+0x74>)
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	4a15      	ldr	r2, [pc, #84]	; (8019e74 <USBH_LL_Init+0x74>)
 8019e1e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019e22:	4b14      	ldr	r3, [pc, #80]	; (8019e74 <USBH_LL_Init+0x74>)
 8019e24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019e28:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8019e2a:	4b12      	ldr	r3, [pc, #72]	; (8019e74 <USBH_LL_Init+0x74>)
 8019e2c:	2208      	movs	r2, #8
 8019e2e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8019e30:	4b10      	ldr	r3, [pc, #64]	; (8019e74 <USBH_LL_Init+0x74>)
 8019e32:	2201      	movs	r2, #1
 8019e34:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019e36:	4b0f      	ldr	r3, [pc, #60]	; (8019e74 <USBH_LL_Init+0x74>)
 8019e38:	2200      	movs	r2, #0
 8019e3a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8019e3c:	4b0d      	ldr	r3, [pc, #52]	; (8019e74 <USBH_LL_Init+0x74>)
 8019e3e:	2202      	movs	r2, #2
 8019e40:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8019e42:	4b0c      	ldr	r3, [pc, #48]	; (8019e74 <USBH_LL_Init+0x74>)
 8019e44:	2201      	movs	r2, #1
 8019e46:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8019e48:	480a      	ldr	r0, [pc, #40]	; (8019e74 <USBH_LL_Init+0x74>)
 8019e4a:	f7e8 fbca 	bl	80025e2 <HAL_HCD_Init>
 8019e4e:	4603      	mov	r3, r0
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d001      	beq.n	8019e58 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8019e54:	f7e6 fd38 	bl	80008c8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8019e58:	4806      	ldr	r0, [pc, #24]	; (8019e74 <USBH_LL_Init+0x74>)
 8019e5a:	f7e8 ffae 	bl	8002dba <HAL_HCD_GetCurrentFrame>
 8019e5e:	4603      	mov	r3, r0
 8019e60:	4619      	mov	r1, r3
 8019e62:	6878      	ldr	r0, [r7, #4]
 8019e64:	f7ef fd86 	bl	8009974 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8019e68:	2300      	movs	r3, #0
}
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	3708      	adds	r7, #8
 8019e6e:	46bd      	mov	sp, r7
 8019e70:	bd80      	pop	{r7, pc}
 8019e72:	bf00      	nop
 8019e74:	2000f7c4 	.word	0x2000f7c4

08019e78 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8019e78:	b580      	push	{r7, lr}
 8019e7a:	b084      	sub	sp, #16
 8019e7c:	af00      	add	r7, sp, #0
 8019e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019e80:	2300      	movs	r3, #0
 8019e82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019e84:	2300      	movs	r3, #0
 8019e86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019e8e:	4618      	mov	r0, r3
 8019e90:	f7e8 ff1d 	bl	8002cce <HAL_HCD_Start>
 8019e94:	4603      	mov	r3, r0
 8019e96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019e98:	7bfb      	ldrb	r3, [r7, #15]
 8019e9a:	4618      	mov	r0, r3
 8019e9c:	f000 f982 	bl	801a1a4 <USBH_Get_USB_Status>
 8019ea0:	4603      	mov	r3, r0
 8019ea2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019ea4:	7bbb      	ldrb	r3, [r7, #14]
}
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	3710      	adds	r7, #16
 8019eaa:	46bd      	mov	sp, r7
 8019eac:	bd80      	pop	{r7, pc}

08019eae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8019eae:	b580      	push	{r7, lr}
 8019eb0:	b084      	sub	sp, #16
 8019eb2:	af00      	add	r7, sp, #0
 8019eb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019eb6:	2300      	movs	r3, #0
 8019eb8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019eba:	2300      	movs	r3, #0
 8019ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	f7e8 ff25 	bl	8002d14 <HAL_HCD_Stop>
 8019eca:	4603      	mov	r3, r0
 8019ecc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019ece:	7bfb      	ldrb	r3, [r7, #15]
 8019ed0:	4618      	mov	r0, r3
 8019ed2:	f000 f967 	bl	801a1a4 <USBH_Get_USB_Status>
 8019ed6:	4603      	mov	r3, r0
 8019ed8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019eda:	7bbb      	ldrb	r3, [r7, #14]
}
 8019edc:	4618      	mov	r0, r3
 8019ede:	3710      	adds	r7, #16
 8019ee0:	46bd      	mov	sp, r7
 8019ee2:	bd80      	pop	{r7, pc}

08019ee4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8019ee4:	b580      	push	{r7, lr}
 8019ee6:	b084      	sub	sp, #16
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8019eec:	2301      	movs	r3, #1
 8019eee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019ef6:	4618      	mov	r0, r3
 8019ef8:	f7e8 ff6d 	bl	8002dd6 <HAL_HCD_GetCurrentSpeed>
 8019efc:	4603      	mov	r3, r0
 8019efe:	2b02      	cmp	r3, #2
 8019f00:	d00c      	beq.n	8019f1c <USBH_LL_GetSpeed+0x38>
 8019f02:	2b02      	cmp	r3, #2
 8019f04:	d80d      	bhi.n	8019f22 <USBH_LL_GetSpeed+0x3e>
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d002      	beq.n	8019f10 <USBH_LL_GetSpeed+0x2c>
 8019f0a:	2b01      	cmp	r3, #1
 8019f0c:	d003      	beq.n	8019f16 <USBH_LL_GetSpeed+0x32>
 8019f0e:	e008      	b.n	8019f22 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8019f10:	2300      	movs	r3, #0
 8019f12:	73fb      	strb	r3, [r7, #15]
    break;
 8019f14:	e008      	b.n	8019f28 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8019f16:	2301      	movs	r3, #1
 8019f18:	73fb      	strb	r3, [r7, #15]
    break;
 8019f1a:	e005      	b.n	8019f28 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8019f1c:	2302      	movs	r3, #2
 8019f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8019f20:	e002      	b.n	8019f28 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8019f22:	2301      	movs	r3, #1
 8019f24:	73fb      	strb	r3, [r7, #15]
    break;
 8019f26:	bf00      	nop
  }
  return  speed;
 8019f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	3710      	adds	r7, #16
 8019f2e:	46bd      	mov	sp, r7
 8019f30:	bd80      	pop	{r7, pc}

08019f32 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8019f32:	b580      	push	{r7, lr}
 8019f34:	b084      	sub	sp, #16
 8019f36:	af00      	add	r7, sp, #0
 8019f38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019f3e:	2300      	movs	r3, #0
 8019f40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019f48:	4618      	mov	r0, r3
 8019f4a:	f7e8 ff00 	bl	8002d4e <HAL_HCD_ResetPort>
 8019f4e:	4603      	mov	r3, r0
 8019f50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019f52:	7bfb      	ldrb	r3, [r7, #15]
 8019f54:	4618      	mov	r0, r3
 8019f56:	f000 f925 	bl	801a1a4 <USBH_Get_USB_Status>
 8019f5a:	4603      	mov	r3, r0
 8019f5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019f5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019f60:	4618      	mov	r0, r3
 8019f62:	3710      	adds	r7, #16
 8019f64:	46bd      	mov	sp, r7
 8019f66:	bd80      	pop	{r7, pc}

08019f68 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019f68:	b580      	push	{r7, lr}
 8019f6a:	b082      	sub	sp, #8
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
 8019f70:	460b      	mov	r3, r1
 8019f72:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019f7a:	78fa      	ldrb	r2, [r7, #3]
 8019f7c:	4611      	mov	r1, r2
 8019f7e:	4618      	mov	r0, r3
 8019f80:	f7e8 ff07 	bl	8002d92 <HAL_HCD_HC_GetXferCount>
 8019f84:	4603      	mov	r3, r0
}
 8019f86:	4618      	mov	r0, r3
 8019f88:	3708      	adds	r7, #8
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	bd80      	pop	{r7, pc}

08019f8e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8019f8e:	b590      	push	{r4, r7, lr}
 8019f90:	b089      	sub	sp, #36	; 0x24
 8019f92:	af04      	add	r7, sp, #16
 8019f94:	6078      	str	r0, [r7, #4]
 8019f96:	4608      	mov	r0, r1
 8019f98:	4611      	mov	r1, r2
 8019f9a:	461a      	mov	r2, r3
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	70fb      	strb	r3, [r7, #3]
 8019fa0:	460b      	mov	r3, r1
 8019fa2:	70bb      	strb	r3, [r7, #2]
 8019fa4:	4613      	mov	r3, r2
 8019fa6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019fa8:	2300      	movs	r3, #0
 8019faa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019fac:	2300      	movs	r3, #0
 8019fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8019fb6:	787c      	ldrb	r4, [r7, #1]
 8019fb8:	78ba      	ldrb	r2, [r7, #2]
 8019fba:	78f9      	ldrb	r1, [r7, #3]
 8019fbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019fbe:	9302      	str	r3, [sp, #8]
 8019fc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019fc4:	9301      	str	r3, [sp, #4]
 8019fc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019fca:	9300      	str	r3, [sp, #0]
 8019fcc:	4623      	mov	r3, r4
 8019fce:	f7e8 fb6a 	bl	80026a6 <HAL_HCD_HC_Init>
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8019fd6:	7bfb      	ldrb	r3, [r7, #15]
 8019fd8:	4618      	mov	r0, r3
 8019fda:	f000 f8e3 	bl	801a1a4 <USBH_Get_USB_Status>
 8019fde:	4603      	mov	r3, r0
 8019fe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019fe2:	7bbb      	ldrb	r3, [r7, #14]
}
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	3714      	adds	r7, #20
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bd90      	pop	{r4, r7, pc}

08019fec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b084      	sub	sp, #16
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	6078      	str	r0, [r7, #4]
 8019ff4:	460b      	mov	r3, r1
 8019ff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019ffc:	2300      	movs	r3, #0
 8019ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a006:	78fa      	ldrb	r2, [r7, #3]
 801a008:	4611      	mov	r1, r2
 801a00a:	4618      	mov	r0, r3
 801a00c:	f7e8 fbda 	bl	80027c4 <HAL_HCD_HC_Halt>
 801a010:	4603      	mov	r3, r0
 801a012:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801a014:	7bfb      	ldrb	r3, [r7, #15]
 801a016:	4618      	mov	r0, r3
 801a018:	f000 f8c4 	bl	801a1a4 <USBH_Get_USB_Status>
 801a01c:	4603      	mov	r3, r0
 801a01e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a020:	7bbb      	ldrb	r3, [r7, #14]
}
 801a022:	4618      	mov	r0, r3
 801a024:	3710      	adds	r7, #16
 801a026:	46bd      	mov	sp, r7
 801a028:	bd80      	pop	{r7, pc}

0801a02a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801a02a:	b590      	push	{r4, r7, lr}
 801a02c:	b089      	sub	sp, #36	; 0x24
 801a02e:	af04      	add	r7, sp, #16
 801a030:	6078      	str	r0, [r7, #4]
 801a032:	4608      	mov	r0, r1
 801a034:	4611      	mov	r1, r2
 801a036:	461a      	mov	r2, r3
 801a038:	4603      	mov	r3, r0
 801a03a:	70fb      	strb	r3, [r7, #3]
 801a03c:	460b      	mov	r3, r1
 801a03e:	70bb      	strb	r3, [r7, #2]
 801a040:	4613      	mov	r3, r2
 801a042:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a044:	2300      	movs	r3, #0
 801a046:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a048:	2300      	movs	r3, #0
 801a04a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801a052:	787c      	ldrb	r4, [r7, #1]
 801a054:	78ba      	ldrb	r2, [r7, #2]
 801a056:	78f9      	ldrb	r1, [r7, #3]
 801a058:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a05c:	9303      	str	r3, [sp, #12]
 801a05e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a060:	9302      	str	r3, [sp, #8]
 801a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a064:	9301      	str	r3, [sp, #4]
 801a066:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a06a:	9300      	str	r3, [sp, #0]
 801a06c:	4623      	mov	r3, r4
 801a06e:	f7e8 fbcd 	bl	800280c <HAL_HCD_HC_SubmitRequest>
 801a072:	4603      	mov	r3, r0
 801a074:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801a076:	7bfb      	ldrb	r3, [r7, #15]
 801a078:	4618      	mov	r0, r3
 801a07a:	f000 f893 	bl	801a1a4 <USBH_Get_USB_Status>
 801a07e:	4603      	mov	r3, r0
 801a080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a082:	7bbb      	ldrb	r3, [r7, #14]
}
 801a084:	4618      	mov	r0, r3
 801a086:	3714      	adds	r7, #20
 801a088:	46bd      	mov	sp, r7
 801a08a:	bd90      	pop	{r4, r7, pc}

0801a08c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a08c:	b580      	push	{r7, lr}
 801a08e:	b082      	sub	sp, #8
 801a090:	af00      	add	r7, sp, #0
 801a092:	6078      	str	r0, [r7, #4]
 801a094:	460b      	mov	r3, r1
 801a096:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a09e:	78fa      	ldrb	r2, [r7, #3]
 801a0a0:	4611      	mov	r1, r2
 801a0a2:	4618      	mov	r0, r3
 801a0a4:	f7e8 fe61 	bl	8002d6a <HAL_HCD_HC_GetURBState>
 801a0a8:	4603      	mov	r3, r0
}
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	3708      	adds	r7, #8
 801a0ae:	46bd      	mov	sp, r7
 801a0b0:	bd80      	pop	{r7, pc}

0801a0b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801a0b2:	b580      	push	{r7, lr}
 801a0b4:	b082      	sub	sp, #8
 801a0b6:	af00      	add	r7, sp, #0
 801a0b8:	6078      	str	r0, [r7, #4]
 801a0ba:	460b      	mov	r3, r1
 801a0bc:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 801a0be:	20c8      	movs	r0, #200	; 0xc8
 801a0c0:	f7e6 fe1e 	bl	8000d00 <HAL_Delay>
  return USBH_OK;
 801a0c4:	2300      	movs	r3, #0
}
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	3708      	adds	r7, #8
 801a0ca:	46bd      	mov	sp, r7
 801a0cc:	bd80      	pop	{r7, pc}

0801a0ce <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801a0ce:	b480      	push	{r7}
 801a0d0:	b085      	sub	sp, #20
 801a0d2:	af00      	add	r7, sp, #0
 801a0d4:	6078      	str	r0, [r7, #4]
 801a0d6:	460b      	mov	r3, r1
 801a0d8:	70fb      	strb	r3, [r7, #3]
 801a0da:	4613      	mov	r3, r2
 801a0dc:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a0e4:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801a0e6:	78fb      	ldrb	r3, [r7, #3]
 801a0e8:	68fa      	ldr	r2, [r7, #12]
 801a0ea:	212c      	movs	r1, #44	; 0x2c
 801a0ec:	fb01 f303 	mul.w	r3, r1, r3
 801a0f0:	4413      	add	r3, r2
 801a0f2:	333b      	adds	r3, #59	; 0x3b
 801a0f4:	781b      	ldrb	r3, [r3, #0]
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d009      	beq.n	801a10e <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801a0fa:	78fb      	ldrb	r3, [r7, #3]
 801a0fc:	68fa      	ldr	r2, [r7, #12]
 801a0fe:	212c      	movs	r1, #44	; 0x2c
 801a100:	fb01 f303 	mul.w	r3, r1, r3
 801a104:	4413      	add	r3, r2
 801a106:	3354      	adds	r3, #84	; 0x54
 801a108:	78ba      	ldrb	r2, [r7, #2]
 801a10a:	701a      	strb	r2, [r3, #0]
 801a10c:	e008      	b.n	801a120 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801a10e:	78fb      	ldrb	r3, [r7, #3]
 801a110:	68fa      	ldr	r2, [r7, #12]
 801a112:	212c      	movs	r1, #44	; 0x2c
 801a114:	fb01 f303 	mul.w	r3, r1, r3
 801a118:	4413      	add	r3, r2
 801a11a:	3355      	adds	r3, #85	; 0x55
 801a11c:	78ba      	ldrb	r2, [r7, #2]
 801a11e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801a120:	2300      	movs	r3, #0
}
 801a122:	4618      	mov	r0, r3
 801a124:	3714      	adds	r7, #20
 801a126:	46bd      	mov	sp, r7
 801a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a12c:	4770      	bx	lr

0801a12e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a12e:	b480      	push	{r7}
 801a130:	b085      	sub	sp, #20
 801a132:	af00      	add	r7, sp, #0
 801a134:	6078      	str	r0, [r7, #4]
 801a136:	460b      	mov	r3, r1
 801a138:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801a13a:	2300      	movs	r3, #0
 801a13c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a144:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 801a146:	78fb      	ldrb	r3, [r7, #3]
 801a148:	68ba      	ldr	r2, [r7, #8]
 801a14a:	212c      	movs	r1, #44	; 0x2c
 801a14c:	fb01 f303 	mul.w	r3, r1, r3
 801a150:	4413      	add	r3, r2
 801a152:	333b      	adds	r3, #59	; 0x3b
 801a154:	781b      	ldrb	r3, [r3, #0]
 801a156:	2b00      	cmp	r3, #0
 801a158:	d009      	beq.n	801a16e <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801a15a:	78fb      	ldrb	r3, [r7, #3]
 801a15c:	68ba      	ldr	r2, [r7, #8]
 801a15e:	212c      	movs	r1, #44	; 0x2c
 801a160:	fb01 f303 	mul.w	r3, r1, r3
 801a164:	4413      	add	r3, r2
 801a166:	3354      	adds	r3, #84	; 0x54
 801a168:	781b      	ldrb	r3, [r3, #0]
 801a16a:	73fb      	strb	r3, [r7, #15]
 801a16c:	e008      	b.n	801a180 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 801a16e:	78fb      	ldrb	r3, [r7, #3]
 801a170:	68ba      	ldr	r2, [r7, #8]
 801a172:	212c      	movs	r1, #44	; 0x2c
 801a174:	fb01 f303 	mul.w	r3, r1, r3
 801a178:	4413      	add	r3, r2
 801a17a:	3355      	adds	r3, #85	; 0x55
 801a17c:	781b      	ldrb	r3, [r3, #0]
 801a17e:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 801a180:	7bfb      	ldrb	r3, [r7, #15]
}
 801a182:	4618      	mov	r0, r3
 801a184:	3714      	adds	r7, #20
 801a186:	46bd      	mov	sp, r7
 801a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a18c:	4770      	bx	lr

0801a18e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801a18e:	b580      	push	{r7, lr}
 801a190:	b082      	sub	sp, #8
 801a192:	af00      	add	r7, sp, #0
 801a194:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801a196:	6878      	ldr	r0, [r7, #4]
 801a198:	f7e6 fdb2 	bl	8000d00 <HAL_Delay>
}
 801a19c:	bf00      	nop
 801a19e:	3708      	adds	r7, #8
 801a1a0:	46bd      	mov	sp, r7
 801a1a2:	bd80      	pop	{r7, pc}

0801a1a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a1a4:	b480      	push	{r7}
 801a1a6:	b085      	sub	sp, #20
 801a1a8:	af00      	add	r7, sp, #0
 801a1aa:	4603      	mov	r3, r0
 801a1ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a1ae:	2300      	movs	r3, #0
 801a1b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a1b2:	79fb      	ldrb	r3, [r7, #7]
 801a1b4:	2b03      	cmp	r3, #3
 801a1b6:	d817      	bhi.n	801a1e8 <USBH_Get_USB_Status+0x44>
 801a1b8:	a201      	add	r2, pc, #4	; (adr r2, 801a1c0 <USBH_Get_USB_Status+0x1c>)
 801a1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1be:	bf00      	nop
 801a1c0:	0801a1d1 	.word	0x0801a1d1
 801a1c4:	0801a1d7 	.word	0x0801a1d7
 801a1c8:	0801a1dd 	.word	0x0801a1dd
 801a1cc:	0801a1e3 	.word	0x0801a1e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	73fb      	strb	r3, [r7, #15]
    break;
 801a1d4:	e00b      	b.n	801a1ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801a1d6:	2302      	movs	r3, #2
 801a1d8:	73fb      	strb	r3, [r7, #15]
    break;
 801a1da:	e008      	b.n	801a1ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801a1dc:	2301      	movs	r3, #1
 801a1de:	73fb      	strb	r3, [r7, #15]
    break;
 801a1e0:	e005      	b.n	801a1ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801a1e2:	2302      	movs	r3, #2
 801a1e4:	73fb      	strb	r3, [r7, #15]
    break;
 801a1e6:	e002      	b.n	801a1ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801a1e8:	2302      	movs	r3, #2
 801a1ea:	73fb      	strb	r3, [r7, #15]
    break;
 801a1ec:	bf00      	nop
  }
  return usb_status;
 801a1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 801a1f0:	4618      	mov	r0, r3
 801a1f2:	3714      	adds	r7, #20
 801a1f4:	46bd      	mov	sp, r7
 801a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1fa:	4770      	bx	lr

0801a1fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 801a1fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 801a234 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801a200:	480d      	ldr	r0, [pc, #52]	; (801a238 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801a202:	490e      	ldr	r1, [pc, #56]	; (801a23c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 801a204:	4a0e      	ldr	r2, [pc, #56]	; (801a240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801a206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801a208:	e002      	b.n	801a210 <LoopCopyDataInit>

0801a20a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801a20a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801a20c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801a20e:	3304      	adds	r3, #4

0801a210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801a210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801a212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801a214:	d3f9      	bcc.n	801a20a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801a216:	4a0b      	ldr	r2, [pc, #44]	; (801a244 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 801a218:	4c0b      	ldr	r4, [pc, #44]	; (801a248 <LoopFillZerobss+0x26>)
  movs r3, #0
 801a21a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801a21c:	e001      	b.n	801a222 <LoopFillZerobss>

0801a21e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801a21e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801a220:	3204      	adds	r2, #4

0801a222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801a222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801a224:	d3fb      	bcc.n	801a21e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801a226:	f7e6 fd17 	bl	8000c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801a22a:	f000 f811 	bl	801a250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801a22e:	f7e6 f9c5 	bl	80005bc <main>
  bx  lr    
 801a232:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 801a234:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 801a238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801a23c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 801a240:	0801ec24 	.word	0x0801ec24
  ldr r2, =_sbss
 801a244:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 801a248:	2000fad4 	.word	0x2000fad4

0801a24c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801a24c:	e7fe      	b.n	801a24c <ADC_IRQHandler>
	...

0801a250 <__libc_init_array>:
 801a250:	b570      	push	{r4, r5, r6, lr}
 801a252:	4d0d      	ldr	r5, [pc, #52]	; (801a288 <__libc_init_array+0x38>)
 801a254:	4c0d      	ldr	r4, [pc, #52]	; (801a28c <__libc_init_array+0x3c>)
 801a256:	1b64      	subs	r4, r4, r5
 801a258:	10a4      	asrs	r4, r4, #2
 801a25a:	2600      	movs	r6, #0
 801a25c:	42a6      	cmp	r6, r4
 801a25e:	d109      	bne.n	801a274 <__libc_init_array+0x24>
 801a260:	4d0b      	ldr	r5, [pc, #44]	; (801a290 <__libc_init_array+0x40>)
 801a262:	4c0c      	ldr	r4, [pc, #48]	; (801a294 <__libc_init_array+0x44>)
 801a264:	f001 f8bc 	bl	801b3e0 <_init>
 801a268:	1b64      	subs	r4, r4, r5
 801a26a:	10a4      	asrs	r4, r4, #2
 801a26c:	2600      	movs	r6, #0
 801a26e:	42a6      	cmp	r6, r4
 801a270:	d105      	bne.n	801a27e <__libc_init_array+0x2e>
 801a272:	bd70      	pop	{r4, r5, r6, pc}
 801a274:	f855 3b04 	ldr.w	r3, [r5], #4
 801a278:	4798      	blx	r3
 801a27a:	3601      	adds	r6, #1
 801a27c:	e7ee      	b.n	801a25c <__libc_init_array+0xc>
 801a27e:	f855 3b04 	ldr.w	r3, [r5], #4
 801a282:	4798      	blx	r3
 801a284:	3601      	adds	r6, #1
 801a286:	e7f2      	b.n	801a26e <__libc_init_array+0x1e>
 801a288:	0801ec1c 	.word	0x0801ec1c
 801a28c:	0801ec1c 	.word	0x0801ec1c
 801a290:	0801ec1c 	.word	0x0801ec1c
 801a294:	0801ec20 	.word	0x0801ec20

0801a298 <malloc>:
 801a298:	4b02      	ldr	r3, [pc, #8]	; (801a2a4 <malloc+0xc>)
 801a29a:	4601      	mov	r1, r0
 801a29c:	6818      	ldr	r0, [r3, #0]
 801a29e:	f000 b87f 	b.w	801a3a0 <_malloc_r>
 801a2a2:	bf00      	nop
 801a2a4:	20000040 	.word	0x20000040

0801a2a8 <free>:
 801a2a8:	4b02      	ldr	r3, [pc, #8]	; (801a2b4 <free+0xc>)
 801a2aa:	4601      	mov	r1, r0
 801a2ac:	6818      	ldr	r0, [r3, #0]
 801a2ae:	f000 b827 	b.w	801a300 <_free_r>
 801a2b2:	bf00      	nop
 801a2b4:	20000040 	.word	0x20000040

0801a2b8 <memcmp>:
 801a2b8:	b530      	push	{r4, r5, lr}
 801a2ba:	3901      	subs	r1, #1
 801a2bc:	2400      	movs	r4, #0
 801a2be:	42a2      	cmp	r2, r4
 801a2c0:	d101      	bne.n	801a2c6 <memcmp+0xe>
 801a2c2:	2000      	movs	r0, #0
 801a2c4:	e005      	b.n	801a2d2 <memcmp+0x1a>
 801a2c6:	5d03      	ldrb	r3, [r0, r4]
 801a2c8:	3401      	adds	r4, #1
 801a2ca:	5d0d      	ldrb	r5, [r1, r4]
 801a2cc:	42ab      	cmp	r3, r5
 801a2ce:	d0f6      	beq.n	801a2be <memcmp+0x6>
 801a2d0:	1b58      	subs	r0, r3, r5
 801a2d2:	bd30      	pop	{r4, r5, pc}

0801a2d4 <memcpy>:
 801a2d4:	440a      	add	r2, r1
 801a2d6:	4291      	cmp	r1, r2
 801a2d8:	f100 33ff 	add.w	r3, r0, #4294967295
 801a2dc:	d100      	bne.n	801a2e0 <memcpy+0xc>
 801a2de:	4770      	bx	lr
 801a2e0:	b510      	push	{r4, lr}
 801a2e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a2e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a2ea:	4291      	cmp	r1, r2
 801a2ec:	d1f9      	bne.n	801a2e2 <memcpy+0xe>
 801a2ee:	bd10      	pop	{r4, pc}

0801a2f0 <memset>:
 801a2f0:	4402      	add	r2, r0
 801a2f2:	4603      	mov	r3, r0
 801a2f4:	4293      	cmp	r3, r2
 801a2f6:	d100      	bne.n	801a2fa <memset+0xa>
 801a2f8:	4770      	bx	lr
 801a2fa:	f803 1b01 	strb.w	r1, [r3], #1
 801a2fe:	e7f9      	b.n	801a2f4 <memset+0x4>

0801a300 <_free_r>:
 801a300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a302:	2900      	cmp	r1, #0
 801a304:	d048      	beq.n	801a398 <_free_r+0x98>
 801a306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a30a:	9001      	str	r0, [sp, #4]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	f1a1 0404 	sub.w	r4, r1, #4
 801a312:	bfb8      	it	lt
 801a314:	18e4      	addlt	r4, r4, r3
 801a316:	f000 fa43 	bl	801a7a0 <__malloc_lock>
 801a31a:	4a20      	ldr	r2, [pc, #128]	; (801a39c <_free_r+0x9c>)
 801a31c:	9801      	ldr	r0, [sp, #4]
 801a31e:	6813      	ldr	r3, [r2, #0]
 801a320:	4615      	mov	r5, r2
 801a322:	b933      	cbnz	r3, 801a332 <_free_r+0x32>
 801a324:	6063      	str	r3, [r4, #4]
 801a326:	6014      	str	r4, [r2, #0]
 801a328:	b003      	add	sp, #12
 801a32a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a32e:	f000 ba3d 	b.w	801a7ac <__malloc_unlock>
 801a332:	42a3      	cmp	r3, r4
 801a334:	d90b      	bls.n	801a34e <_free_r+0x4e>
 801a336:	6821      	ldr	r1, [r4, #0]
 801a338:	1862      	adds	r2, r4, r1
 801a33a:	4293      	cmp	r3, r2
 801a33c:	bf04      	itt	eq
 801a33e:	681a      	ldreq	r2, [r3, #0]
 801a340:	685b      	ldreq	r3, [r3, #4]
 801a342:	6063      	str	r3, [r4, #4]
 801a344:	bf04      	itt	eq
 801a346:	1852      	addeq	r2, r2, r1
 801a348:	6022      	streq	r2, [r4, #0]
 801a34a:	602c      	str	r4, [r5, #0]
 801a34c:	e7ec      	b.n	801a328 <_free_r+0x28>
 801a34e:	461a      	mov	r2, r3
 801a350:	685b      	ldr	r3, [r3, #4]
 801a352:	b10b      	cbz	r3, 801a358 <_free_r+0x58>
 801a354:	42a3      	cmp	r3, r4
 801a356:	d9fa      	bls.n	801a34e <_free_r+0x4e>
 801a358:	6811      	ldr	r1, [r2, #0]
 801a35a:	1855      	adds	r5, r2, r1
 801a35c:	42a5      	cmp	r5, r4
 801a35e:	d10b      	bne.n	801a378 <_free_r+0x78>
 801a360:	6824      	ldr	r4, [r4, #0]
 801a362:	4421      	add	r1, r4
 801a364:	1854      	adds	r4, r2, r1
 801a366:	42a3      	cmp	r3, r4
 801a368:	6011      	str	r1, [r2, #0]
 801a36a:	d1dd      	bne.n	801a328 <_free_r+0x28>
 801a36c:	681c      	ldr	r4, [r3, #0]
 801a36e:	685b      	ldr	r3, [r3, #4]
 801a370:	6053      	str	r3, [r2, #4]
 801a372:	4421      	add	r1, r4
 801a374:	6011      	str	r1, [r2, #0]
 801a376:	e7d7      	b.n	801a328 <_free_r+0x28>
 801a378:	d902      	bls.n	801a380 <_free_r+0x80>
 801a37a:	230c      	movs	r3, #12
 801a37c:	6003      	str	r3, [r0, #0]
 801a37e:	e7d3      	b.n	801a328 <_free_r+0x28>
 801a380:	6825      	ldr	r5, [r4, #0]
 801a382:	1961      	adds	r1, r4, r5
 801a384:	428b      	cmp	r3, r1
 801a386:	bf04      	itt	eq
 801a388:	6819      	ldreq	r1, [r3, #0]
 801a38a:	685b      	ldreq	r3, [r3, #4]
 801a38c:	6063      	str	r3, [r4, #4]
 801a38e:	bf04      	itt	eq
 801a390:	1949      	addeq	r1, r1, r5
 801a392:	6021      	streq	r1, [r4, #0]
 801a394:	6054      	str	r4, [r2, #4]
 801a396:	e7c7      	b.n	801a328 <_free_r+0x28>
 801a398:	b003      	add	sp, #12
 801a39a:	bd30      	pop	{r4, r5, pc}
 801a39c:	2000861c 	.word	0x2000861c

0801a3a0 <_malloc_r>:
 801a3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3a2:	1ccd      	adds	r5, r1, #3
 801a3a4:	f025 0503 	bic.w	r5, r5, #3
 801a3a8:	3508      	adds	r5, #8
 801a3aa:	2d0c      	cmp	r5, #12
 801a3ac:	bf38      	it	cc
 801a3ae:	250c      	movcc	r5, #12
 801a3b0:	2d00      	cmp	r5, #0
 801a3b2:	4606      	mov	r6, r0
 801a3b4:	db01      	blt.n	801a3ba <_malloc_r+0x1a>
 801a3b6:	42a9      	cmp	r1, r5
 801a3b8:	d903      	bls.n	801a3c2 <_malloc_r+0x22>
 801a3ba:	230c      	movs	r3, #12
 801a3bc:	6033      	str	r3, [r6, #0]
 801a3be:	2000      	movs	r0, #0
 801a3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3c2:	f000 f9ed 	bl	801a7a0 <__malloc_lock>
 801a3c6:	4921      	ldr	r1, [pc, #132]	; (801a44c <_malloc_r+0xac>)
 801a3c8:	680a      	ldr	r2, [r1, #0]
 801a3ca:	4614      	mov	r4, r2
 801a3cc:	b99c      	cbnz	r4, 801a3f6 <_malloc_r+0x56>
 801a3ce:	4f20      	ldr	r7, [pc, #128]	; (801a450 <_malloc_r+0xb0>)
 801a3d0:	683b      	ldr	r3, [r7, #0]
 801a3d2:	b923      	cbnz	r3, 801a3de <_malloc_r+0x3e>
 801a3d4:	4621      	mov	r1, r4
 801a3d6:	4630      	mov	r0, r6
 801a3d8:	f000 f8aa 	bl	801a530 <_sbrk_r>
 801a3dc:	6038      	str	r0, [r7, #0]
 801a3de:	4629      	mov	r1, r5
 801a3e0:	4630      	mov	r0, r6
 801a3e2:	f000 f8a5 	bl	801a530 <_sbrk_r>
 801a3e6:	1c43      	adds	r3, r0, #1
 801a3e8:	d123      	bne.n	801a432 <_malloc_r+0x92>
 801a3ea:	230c      	movs	r3, #12
 801a3ec:	6033      	str	r3, [r6, #0]
 801a3ee:	4630      	mov	r0, r6
 801a3f0:	f000 f9dc 	bl	801a7ac <__malloc_unlock>
 801a3f4:	e7e3      	b.n	801a3be <_malloc_r+0x1e>
 801a3f6:	6823      	ldr	r3, [r4, #0]
 801a3f8:	1b5b      	subs	r3, r3, r5
 801a3fa:	d417      	bmi.n	801a42c <_malloc_r+0x8c>
 801a3fc:	2b0b      	cmp	r3, #11
 801a3fe:	d903      	bls.n	801a408 <_malloc_r+0x68>
 801a400:	6023      	str	r3, [r4, #0]
 801a402:	441c      	add	r4, r3
 801a404:	6025      	str	r5, [r4, #0]
 801a406:	e004      	b.n	801a412 <_malloc_r+0x72>
 801a408:	6863      	ldr	r3, [r4, #4]
 801a40a:	42a2      	cmp	r2, r4
 801a40c:	bf0c      	ite	eq
 801a40e:	600b      	streq	r3, [r1, #0]
 801a410:	6053      	strne	r3, [r2, #4]
 801a412:	4630      	mov	r0, r6
 801a414:	f000 f9ca 	bl	801a7ac <__malloc_unlock>
 801a418:	f104 000b 	add.w	r0, r4, #11
 801a41c:	1d23      	adds	r3, r4, #4
 801a41e:	f020 0007 	bic.w	r0, r0, #7
 801a422:	1ac2      	subs	r2, r0, r3
 801a424:	d0cc      	beq.n	801a3c0 <_malloc_r+0x20>
 801a426:	1a1b      	subs	r3, r3, r0
 801a428:	50a3      	str	r3, [r4, r2]
 801a42a:	e7c9      	b.n	801a3c0 <_malloc_r+0x20>
 801a42c:	4622      	mov	r2, r4
 801a42e:	6864      	ldr	r4, [r4, #4]
 801a430:	e7cc      	b.n	801a3cc <_malloc_r+0x2c>
 801a432:	1cc4      	adds	r4, r0, #3
 801a434:	f024 0403 	bic.w	r4, r4, #3
 801a438:	42a0      	cmp	r0, r4
 801a43a:	d0e3      	beq.n	801a404 <_malloc_r+0x64>
 801a43c:	1a21      	subs	r1, r4, r0
 801a43e:	4630      	mov	r0, r6
 801a440:	f000 f876 	bl	801a530 <_sbrk_r>
 801a444:	3001      	adds	r0, #1
 801a446:	d1dd      	bne.n	801a404 <_malloc_r+0x64>
 801a448:	e7cf      	b.n	801a3ea <_malloc_r+0x4a>
 801a44a:	bf00      	nop
 801a44c:	2000861c 	.word	0x2000861c
 801a450:	20008620 	.word	0x20008620

0801a454 <iprintf>:
 801a454:	b40f      	push	{r0, r1, r2, r3}
 801a456:	4b0a      	ldr	r3, [pc, #40]	; (801a480 <iprintf+0x2c>)
 801a458:	b513      	push	{r0, r1, r4, lr}
 801a45a:	681c      	ldr	r4, [r3, #0]
 801a45c:	b124      	cbz	r4, 801a468 <iprintf+0x14>
 801a45e:	69a3      	ldr	r3, [r4, #24]
 801a460:	b913      	cbnz	r3, 801a468 <iprintf+0x14>
 801a462:	4620      	mov	r0, r4
 801a464:	f000 f8ea 	bl	801a63c <__sinit>
 801a468:	ab05      	add	r3, sp, #20
 801a46a:	9a04      	ldr	r2, [sp, #16]
 801a46c:	68a1      	ldr	r1, [r4, #8]
 801a46e:	9301      	str	r3, [sp, #4]
 801a470:	4620      	mov	r0, r4
 801a472:	f000 f9cb 	bl	801a80c <_vfiprintf_r>
 801a476:	b002      	add	sp, #8
 801a478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a47c:	b004      	add	sp, #16
 801a47e:	4770      	bx	lr
 801a480:	20000040 	.word	0x20000040

0801a484 <putchar>:
 801a484:	4b09      	ldr	r3, [pc, #36]	; (801a4ac <putchar+0x28>)
 801a486:	b513      	push	{r0, r1, r4, lr}
 801a488:	681c      	ldr	r4, [r3, #0]
 801a48a:	4601      	mov	r1, r0
 801a48c:	b134      	cbz	r4, 801a49c <putchar+0x18>
 801a48e:	69a3      	ldr	r3, [r4, #24]
 801a490:	b923      	cbnz	r3, 801a49c <putchar+0x18>
 801a492:	9001      	str	r0, [sp, #4]
 801a494:	4620      	mov	r0, r4
 801a496:	f000 f8d1 	bl	801a63c <__sinit>
 801a49a:	9901      	ldr	r1, [sp, #4]
 801a49c:	68a2      	ldr	r2, [r4, #8]
 801a49e:	4620      	mov	r0, r4
 801a4a0:	b002      	add	sp, #8
 801a4a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4a6:	f000 bc75 	b.w	801ad94 <_putc_r>
 801a4aa:	bf00      	nop
 801a4ac:	20000040 	.word	0x20000040

0801a4b0 <rand>:
 801a4b0:	4b17      	ldr	r3, [pc, #92]	; (801a510 <rand+0x60>)
 801a4b2:	b510      	push	{r4, lr}
 801a4b4:	681c      	ldr	r4, [r3, #0]
 801a4b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a4b8:	b9b3      	cbnz	r3, 801a4e8 <rand+0x38>
 801a4ba:	2018      	movs	r0, #24
 801a4bc:	f7ff feec 	bl	801a298 <malloc>
 801a4c0:	63a0      	str	r0, [r4, #56]	; 0x38
 801a4c2:	b928      	cbnz	r0, 801a4d0 <rand+0x20>
 801a4c4:	4602      	mov	r2, r0
 801a4c6:	4b13      	ldr	r3, [pc, #76]	; (801a514 <rand+0x64>)
 801a4c8:	4813      	ldr	r0, [pc, #76]	; (801a518 <rand+0x68>)
 801a4ca:	214e      	movs	r1, #78	; 0x4e
 801a4cc:	f000 f840 	bl	801a550 <__assert_func>
 801a4d0:	4a12      	ldr	r2, [pc, #72]	; (801a51c <rand+0x6c>)
 801a4d2:	4b13      	ldr	r3, [pc, #76]	; (801a520 <rand+0x70>)
 801a4d4:	e9c0 2300 	strd	r2, r3, [r0]
 801a4d8:	4b12      	ldr	r3, [pc, #72]	; (801a524 <rand+0x74>)
 801a4da:	6083      	str	r3, [r0, #8]
 801a4dc:	230b      	movs	r3, #11
 801a4de:	8183      	strh	r3, [r0, #12]
 801a4e0:	2201      	movs	r2, #1
 801a4e2:	2300      	movs	r3, #0
 801a4e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a4e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a4ea:	480f      	ldr	r0, [pc, #60]	; (801a528 <rand+0x78>)
 801a4ec:	690a      	ldr	r2, [r1, #16]
 801a4ee:	694b      	ldr	r3, [r1, #20]
 801a4f0:	4c0e      	ldr	r4, [pc, #56]	; (801a52c <rand+0x7c>)
 801a4f2:	4350      	muls	r0, r2
 801a4f4:	fb04 0003 	mla	r0, r4, r3, r0
 801a4f8:	fba2 3404 	umull	r3, r4, r2, r4
 801a4fc:	1c5a      	adds	r2, r3, #1
 801a4fe:	4404      	add	r4, r0
 801a500:	f144 0000 	adc.w	r0, r4, #0
 801a504:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801a508:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a50c:	bd10      	pop	{r4, pc}
 801a50e:	bf00      	nop
 801a510:	20000040 	.word	0x20000040
 801a514:	0801eacc 	.word	0x0801eacc
 801a518:	0801eae3 	.word	0x0801eae3
 801a51c:	abcd330e 	.word	0xabcd330e
 801a520:	e66d1234 	.word	0xe66d1234
 801a524:	0005deec 	.word	0x0005deec
 801a528:	5851f42d 	.word	0x5851f42d
 801a52c:	4c957f2d 	.word	0x4c957f2d

0801a530 <_sbrk_r>:
 801a530:	b538      	push	{r3, r4, r5, lr}
 801a532:	4d06      	ldr	r5, [pc, #24]	; (801a54c <_sbrk_r+0x1c>)
 801a534:	2300      	movs	r3, #0
 801a536:	4604      	mov	r4, r0
 801a538:	4608      	mov	r0, r1
 801a53a:	602b      	str	r3, [r5, #0]
 801a53c:	f7e6 fb2a 	bl	8000b94 <_sbrk>
 801a540:	1c43      	adds	r3, r0, #1
 801a542:	d102      	bne.n	801a54a <_sbrk_r+0x1a>
 801a544:	682b      	ldr	r3, [r5, #0]
 801a546:	b103      	cbz	r3, 801a54a <_sbrk_r+0x1a>
 801a548:	6023      	str	r3, [r4, #0]
 801a54a:	bd38      	pop	{r3, r4, r5, pc}
 801a54c:	2000f3d8 	.word	0x2000f3d8

0801a550 <__assert_func>:
 801a550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a552:	4614      	mov	r4, r2
 801a554:	461a      	mov	r2, r3
 801a556:	4b09      	ldr	r3, [pc, #36]	; (801a57c <__assert_func+0x2c>)
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	4605      	mov	r5, r0
 801a55c:	68d8      	ldr	r0, [r3, #12]
 801a55e:	b14c      	cbz	r4, 801a574 <__assert_func+0x24>
 801a560:	4b07      	ldr	r3, [pc, #28]	; (801a580 <__assert_func+0x30>)
 801a562:	9100      	str	r1, [sp, #0]
 801a564:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a568:	4906      	ldr	r1, [pc, #24]	; (801a584 <__assert_func+0x34>)
 801a56a:	462b      	mov	r3, r5
 801a56c:	f000 f8e4 	bl	801a738 <fiprintf>
 801a570:	f000 fd6e 	bl	801b050 <abort>
 801a574:	4b04      	ldr	r3, [pc, #16]	; (801a588 <__assert_func+0x38>)
 801a576:	461c      	mov	r4, r3
 801a578:	e7f3      	b.n	801a562 <__assert_func+0x12>
 801a57a:	bf00      	nop
 801a57c:	20000040 	.word	0x20000040
 801a580:	0801eb42 	.word	0x0801eb42
 801a584:	0801eb4f 	.word	0x0801eb4f
 801a588:	0801eb7d 	.word	0x0801eb7d

0801a58c <std>:
 801a58c:	2300      	movs	r3, #0
 801a58e:	b510      	push	{r4, lr}
 801a590:	4604      	mov	r4, r0
 801a592:	e9c0 3300 	strd	r3, r3, [r0]
 801a596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a59a:	6083      	str	r3, [r0, #8]
 801a59c:	8181      	strh	r1, [r0, #12]
 801a59e:	6643      	str	r3, [r0, #100]	; 0x64
 801a5a0:	81c2      	strh	r2, [r0, #14]
 801a5a2:	6183      	str	r3, [r0, #24]
 801a5a4:	4619      	mov	r1, r3
 801a5a6:	2208      	movs	r2, #8
 801a5a8:	305c      	adds	r0, #92	; 0x5c
 801a5aa:	f7ff fea1 	bl	801a2f0 <memset>
 801a5ae:	4b05      	ldr	r3, [pc, #20]	; (801a5c4 <std+0x38>)
 801a5b0:	6263      	str	r3, [r4, #36]	; 0x24
 801a5b2:	4b05      	ldr	r3, [pc, #20]	; (801a5c8 <std+0x3c>)
 801a5b4:	62a3      	str	r3, [r4, #40]	; 0x28
 801a5b6:	4b05      	ldr	r3, [pc, #20]	; (801a5cc <std+0x40>)
 801a5b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a5ba:	4b05      	ldr	r3, [pc, #20]	; (801a5d0 <std+0x44>)
 801a5bc:	6224      	str	r4, [r4, #32]
 801a5be:	6323      	str	r3, [r4, #48]	; 0x30
 801a5c0:	bd10      	pop	{r4, pc}
 801a5c2:	bf00      	nop
 801a5c4:	0801ae25 	.word	0x0801ae25
 801a5c8:	0801ae47 	.word	0x0801ae47
 801a5cc:	0801ae7f 	.word	0x0801ae7f
 801a5d0:	0801aea3 	.word	0x0801aea3

0801a5d4 <_cleanup_r>:
 801a5d4:	4901      	ldr	r1, [pc, #4]	; (801a5dc <_cleanup_r+0x8>)
 801a5d6:	f000 b8c1 	b.w	801a75c <_fwalk_reent>
 801a5da:	bf00      	nop
 801a5dc:	0801b18d 	.word	0x0801b18d

0801a5e0 <__sfmoreglue>:
 801a5e0:	b570      	push	{r4, r5, r6, lr}
 801a5e2:	1e4a      	subs	r2, r1, #1
 801a5e4:	2568      	movs	r5, #104	; 0x68
 801a5e6:	4355      	muls	r5, r2
 801a5e8:	460e      	mov	r6, r1
 801a5ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a5ee:	f7ff fed7 	bl	801a3a0 <_malloc_r>
 801a5f2:	4604      	mov	r4, r0
 801a5f4:	b140      	cbz	r0, 801a608 <__sfmoreglue+0x28>
 801a5f6:	2100      	movs	r1, #0
 801a5f8:	e9c0 1600 	strd	r1, r6, [r0]
 801a5fc:	300c      	adds	r0, #12
 801a5fe:	60a0      	str	r0, [r4, #8]
 801a600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a604:	f7ff fe74 	bl	801a2f0 <memset>
 801a608:	4620      	mov	r0, r4
 801a60a:	bd70      	pop	{r4, r5, r6, pc}

0801a60c <__sfp_lock_acquire>:
 801a60c:	4801      	ldr	r0, [pc, #4]	; (801a614 <__sfp_lock_acquire+0x8>)
 801a60e:	f000 b8c5 	b.w	801a79c <__retarget_lock_acquire_recursive>
 801a612:	bf00      	nop
 801a614:	2000fad0 	.word	0x2000fad0

0801a618 <__sfp_lock_release>:
 801a618:	4801      	ldr	r0, [pc, #4]	; (801a620 <__sfp_lock_release+0x8>)
 801a61a:	f000 b8c0 	b.w	801a79e <__retarget_lock_release_recursive>
 801a61e:	bf00      	nop
 801a620:	2000fad0 	.word	0x2000fad0

0801a624 <__sinit_lock_acquire>:
 801a624:	4801      	ldr	r0, [pc, #4]	; (801a62c <__sinit_lock_acquire+0x8>)
 801a626:	f000 b8b9 	b.w	801a79c <__retarget_lock_acquire_recursive>
 801a62a:	bf00      	nop
 801a62c:	2000facb 	.word	0x2000facb

0801a630 <__sinit_lock_release>:
 801a630:	4801      	ldr	r0, [pc, #4]	; (801a638 <__sinit_lock_release+0x8>)
 801a632:	f000 b8b4 	b.w	801a79e <__retarget_lock_release_recursive>
 801a636:	bf00      	nop
 801a638:	2000facb 	.word	0x2000facb

0801a63c <__sinit>:
 801a63c:	b510      	push	{r4, lr}
 801a63e:	4604      	mov	r4, r0
 801a640:	f7ff fff0 	bl	801a624 <__sinit_lock_acquire>
 801a644:	69a3      	ldr	r3, [r4, #24]
 801a646:	b11b      	cbz	r3, 801a650 <__sinit+0x14>
 801a648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a64c:	f7ff bff0 	b.w	801a630 <__sinit_lock_release>
 801a650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a654:	6523      	str	r3, [r4, #80]	; 0x50
 801a656:	4b13      	ldr	r3, [pc, #76]	; (801a6a4 <__sinit+0x68>)
 801a658:	4a13      	ldr	r2, [pc, #76]	; (801a6a8 <__sinit+0x6c>)
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	62a2      	str	r2, [r4, #40]	; 0x28
 801a65e:	42a3      	cmp	r3, r4
 801a660:	bf04      	itt	eq
 801a662:	2301      	moveq	r3, #1
 801a664:	61a3      	streq	r3, [r4, #24]
 801a666:	4620      	mov	r0, r4
 801a668:	f000 f820 	bl	801a6ac <__sfp>
 801a66c:	6060      	str	r0, [r4, #4]
 801a66e:	4620      	mov	r0, r4
 801a670:	f000 f81c 	bl	801a6ac <__sfp>
 801a674:	60a0      	str	r0, [r4, #8]
 801a676:	4620      	mov	r0, r4
 801a678:	f000 f818 	bl	801a6ac <__sfp>
 801a67c:	2200      	movs	r2, #0
 801a67e:	60e0      	str	r0, [r4, #12]
 801a680:	2104      	movs	r1, #4
 801a682:	6860      	ldr	r0, [r4, #4]
 801a684:	f7ff ff82 	bl	801a58c <std>
 801a688:	68a0      	ldr	r0, [r4, #8]
 801a68a:	2201      	movs	r2, #1
 801a68c:	2109      	movs	r1, #9
 801a68e:	f7ff ff7d 	bl	801a58c <std>
 801a692:	68e0      	ldr	r0, [r4, #12]
 801a694:	2202      	movs	r2, #2
 801a696:	2112      	movs	r1, #18
 801a698:	f7ff ff78 	bl	801a58c <std>
 801a69c:	2301      	movs	r3, #1
 801a69e:	61a3      	str	r3, [r4, #24]
 801a6a0:	e7d2      	b.n	801a648 <__sinit+0xc>
 801a6a2:	bf00      	nop
 801a6a4:	0801eac8 	.word	0x0801eac8
 801a6a8:	0801a5d5 	.word	0x0801a5d5

0801a6ac <__sfp>:
 801a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6ae:	4607      	mov	r7, r0
 801a6b0:	f7ff ffac 	bl	801a60c <__sfp_lock_acquire>
 801a6b4:	4b1e      	ldr	r3, [pc, #120]	; (801a730 <__sfp+0x84>)
 801a6b6:	681e      	ldr	r6, [r3, #0]
 801a6b8:	69b3      	ldr	r3, [r6, #24]
 801a6ba:	b913      	cbnz	r3, 801a6c2 <__sfp+0x16>
 801a6bc:	4630      	mov	r0, r6
 801a6be:	f7ff ffbd 	bl	801a63c <__sinit>
 801a6c2:	3648      	adds	r6, #72	; 0x48
 801a6c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a6c8:	3b01      	subs	r3, #1
 801a6ca:	d503      	bpl.n	801a6d4 <__sfp+0x28>
 801a6cc:	6833      	ldr	r3, [r6, #0]
 801a6ce:	b30b      	cbz	r3, 801a714 <__sfp+0x68>
 801a6d0:	6836      	ldr	r6, [r6, #0]
 801a6d2:	e7f7      	b.n	801a6c4 <__sfp+0x18>
 801a6d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a6d8:	b9d5      	cbnz	r5, 801a710 <__sfp+0x64>
 801a6da:	4b16      	ldr	r3, [pc, #88]	; (801a734 <__sfp+0x88>)
 801a6dc:	60e3      	str	r3, [r4, #12]
 801a6de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a6e2:	6665      	str	r5, [r4, #100]	; 0x64
 801a6e4:	f000 f859 	bl	801a79a <__retarget_lock_init_recursive>
 801a6e8:	f7ff ff96 	bl	801a618 <__sfp_lock_release>
 801a6ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a6f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a6f4:	6025      	str	r5, [r4, #0]
 801a6f6:	61a5      	str	r5, [r4, #24]
 801a6f8:	2208      	movs	r2, #8
 801a6fa:	4629      	mov	r1, r5
 801a6fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a700:	f7ff fdf6 	bl	801a2f0 <memset>
 801a704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a70c:	4620      	mov	r0, r4
 801a70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a710:	3468      	adds	r4, #104	; 0x68
 801a712:	e7d9      	b.n	801a6c8 <__sfp+0x1c>
 801a714:	2104      	movs	r1, #4
 801a716:	4638      	mov	r0, r7
 801a718:	f7ff ff62 	bl	801a5e0 <__sfmoreglue>
 801a71c:	4604      	mov	r4, r0
 801a71e:	6030      	str	r0, [r6, #0]
 801a720:	2800      	cmp	r0, #0
 801a722:	d1d5      	bne.n	801a6d0 <__sfp+0x24>
 801a724:	f7ff ff78 	bl	801a618 <__sfp_lock_release>
 801a728:	230c      	movs	r3, #12
 801a72a:	603b      	str	r3, [r7, #0]
 801a72c:	e7ee      	b.n	801a70c <__sfp+0x60>
 801a72e:	bf00      	nop
 801a730:	0801eac8 	.word	0x0801eac8
 801a734:	ffff0001 	.word	0xffff0001

0801a738 <fiprintf>:
 801a738:	b40e      	push	{r1, r2, r3}
 801a73a:	b503      	push	{r0, r1, lr}
 801a73c:	4601      	mov	r1, r0
 801a73e:	ab03      	add	r3, sp, #12
 801a740:	4805      	ldr	r0, [pc, #20]	; (801a758 <fiprintf+0x20>)
 801a742:	f853 2b04 	ldr.w	r2, [r3], #4
 801a746:	6800      	ldr	r0, [r0, #0]
 801a748:	9301      	str	r3, [sp, #4]
 801a74a:	f000 f85f 	bl	801a80c <_vfiprintf_r>
 801a74e:	b002      	add	sp, #8
 801a750:	f85d eb04 	ldr.w	lr, [sp], #4
 801a754:	b003      	add	sp, #12
 801a756:	4770      	bx	lr
 801a758:	20000040 	.word	0x20000040

0801a75c <_fwalk_reent>:
 801a75c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a760:	4606      	mov	r6, r0
 801a762:	4688      	mov	r8, r1
 801a764:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a768:	2700      	movs	r7, #0
 801a76a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a76e:	f1b9 0901 	subs.w	r9, r9, #1
 801a772:	d505      	bpl.n	801a780 <_fwalk_reent+0x24>
 801a774:	6824      	ldr	r4, [r4, #0]
 801a776:	2c00      	cmp	r4, #0
 801a778:	d1f7      	bne.n	801a76a <_fwalk_reent+0xe>
 801a77a:	4638      	mov	r0, r7
 801a77c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a780:	89ab      	ldrh	r3, [r5, #12]
 801a782:	2b01      	cmp	r3, #1
 801a784:	d907      	bls.n	801a796 <_fwalk_reent+0x3a>
 801a786:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a78a:	3301      	adds	r3, #1
 801a78c:	d003      	beq.n	801a796 <_fwalk_reent+0x3a>
 801a78e:	4629      	mov	r1, r5
 801a790:	4630      	mov	r0, r6
 801a792:	47c0      	blx	r8
 801a794:	4307      	orrs	r7, r0
 801a796:	3568      	adds	r5, #104	; 0x68
 801a798:	e7e9      	b.n	801a76e <_fwalk_reent+0x12>

0801a79a <__retarget_lock_init_recursive>:
 801a79a:	4770      	bx	lr

0801a79c <__retarget_lock_acquire_recursive>:
 801a79c:	4770      	bx	lr

0801a79e <__retarget_lock_release_recursive>:
 801a79e:	4770      	bx	lr

0801a7a0 <__malloc_lock>:
 801a7a0:	4801      	ldr	r0, [pc, #4]	; (801a7a8 <__malloc_lock+0x8>)
 801a7a2:	f7ff bffb 	b.w	801a79c <__retarget_lock_acquire_recursive>
 801a7a6:	bf00      	nop
 801a7a8:	2000facc 	.word	0x2000facc

0801a7ac <__malloc_unlock>:
 801a7ac:	4801      	ldr	r0, [pc, #4]	; (801a7b4 <__malloc_unlock+0x8>)
 801a7ae:	f7ff bff6 	b.w	801a79e <__retarget_lock_release_recursive>
 801a7b2:	bf00      	nop
 801a7b4:	2000facc 	.word	0x2000facc

0801a7b8 <__sfputc_r>:
 801a7b8:	6893      	ldr	r3, [r2, #8]
 801a7ba:	3b01      	subs	r3, #1
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	b410      	push	{r4}
 801a7c0:	6093      	str	r3, [r2, #8]
 801a7c2:	da08      	bge.n	801a7d6 <__sfputc_r+0x1e>
 801a7c4:	6994      	ldr	r4, [r2, #24]
 801a7c6:	42a3      	cmp	r3, r4
 801a7c8:	db01      	blt.n	801a7ce <__sfputc_r+0x16>
 801a7ca:	290a      	cmp	r1, #10
 801a7cc:	d103      	bne.n	801a7d6 <__sfputc_r+0x1e>
 801a7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a7d2:	f000 bb6b 	b.w	801aeac <__swbuf_r>
 801a7d6:	6813      	ldr	r3, [r2, #0]
 801a7d8:	1c58      	adds	r0, r3, #1
 801a7da:	6010      	str	r0, [r2, #0]
 801a7dc:	7019      	strb	r1, [r3, #0]
 801a7de:	4608      	mov	r0, r1
 801a7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a7e4:	4770      	bx	lr

0801a7e6 <__sfputs_r>:
 801a7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7e8:	4606      	mov	r6, r0
 801a7ea:	460f      	mov	r7, r1
 801a7ec:	4614      	mov	r4, r2
 801a7ee:	18d5      	adds	r5, r2, r3
 801a7f0:	42ac      	cmp	r4, r5
 801a7f2:	d101      	bne.n	801a7f8 <__sfputs_r+0x12>
 801a7f4:	2000      	movs	r0, #0
 801a7f6:	e007      	b.n	801a808 <__sfputs_r+0x22>
 801a7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a7fc:	463a      	mov	r2, r7
 801a7fe:	4630      	mov	r0, r6
 801a800:	f7ff ffda 	bl	801a7b8 <__sfputc_r>
 801a804:	1c43      	adds	r3, r0, #1
 801a806:	d1f3      	bne.n	801a7f0 <__sfputs_r+0xa>
 801a808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a80c <_vfiprintf_r>:
 801a80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a810:	460d      	mov	r5, r1
 801a812:	b09d      	sub	sp, #116	; 0x74
 801a814:	4614      	mov	r4, r2
 801a816:	4698      	mov	r8, r3
 801a818:	4606      	mov	r6, r0
 801a81a:	b118      	cbz	r0, 801a824 <_vfiprintf_r+0x18>
 801a81c:	6983      	ldr	r3, [r0, #24]
 801a81e:	b90b      	cbnz	r3, 801a824 <_vfiprintf_r+0x18>
 801a820:	f7ff ff0c 	bl	801a63c <__sinit>
 801a824:	4b89      	ldr	r3, [pc, #548]	; (801aa4c <_vfiprintf_r+0x240>)
 801a826:	429d      	cmp	r5, r3
 801a828:	d11b      	bne.n	801a862 <_vfiprintf_r+0x56>
 801a82a:	6875      	ldr	r5, [r6, #4]
 801a82c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a82e:	07d9      	lsls	r1, r3, #31
 801a830:	d405      	bmi.n	801a83e <_vfiprintf_r+0x32>
 801a832:	89ab      	ldrh	r3, [r5, #12]
 801a834:	059a      	lsls	r2, r3, #22
 801a836:	d402      	bmi.n	801a83e <_vfiprintf_r+0x32>
 801a838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a83a:	f7ff ffaf 	bl	801a79c <__retarget_lock_acquire_recursive>
 801a83e:	89ab      	ldrh	r3, [r5, #12]
 801a840:	071b      	lsls	r3, r3, #28
 801a842:	d501      	bpl.n	801a848 <_vfiprintf_r+0x3c>
 801a844:	692b      	ldr	r3, [r5, #16]
 801a846:	b9eb      	cbnz	r3, 801a884 <_vfiprintf_r+0x78>
 801a848:	4629      	mov	r1, r5
 801a84a:	4630      	mov	r0, r6
 801a84c:	f000 fb92 	bl	801af74 <__swsetup_r>
 801a850:	b1c0      	cbz	r0, 801a884 <_vfiprintf_r+0x78>
 801a852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a854:	07dc      	lsls	r4, r3, #31
 801a856:	d50e      	bpl.n	801a876 <_vfiprintf_r+0x6a>
 801a858:	f04f 30ff 	mov.w	r0, #4294967295
 801a85c:	b01d      	add	sp, #116	; 0x74
 801a85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a862:	4b7b      	ldr	r3, [pc, #492]	; (801aa50 <_vfiprintf_r+0x244>)
 801a864:	429d      	cmp	r5, r3
 801a866:	d101      	bne.n	801a86c <_vfiprintf_r+0x60>
 801a868:	68b5      	ldr	r5, [r6, #8]
 801a86a:	e7df      	b.n	801a82c <_vfiprintf_r+0x20>
 801a86c:	4b79      	ldr	r3, [pc, #484]	; (801aa54 <_vfiprintf_r+0x248>)
 801a86e:	429d      	cmp	r5, r3
 801a870:	bf08      	it	eq
 801a872:	68f5      	ldreq	r5, [r6, #12]
 801a874:	e7da      	b.n	801a82c <_vfiprintf_r+0x20>
 801a876:	89ab      	ldrh	r3, [r5, #12]
 801a878:	0598      	lsls	r0, r3, #22
 801a87a:	d4ed      	bmi.n	801a858 <_vfiprintf_r+0x4c>
 801a87c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a87e:	f7ff ff8e 	bl	801a79e <__retarget_lock_release_recursive>
 801a882:	e7e9      	b.n	801a858 <_vfiprintf_r+0x4c>
 801a884:	2300      	movs	r3, #0
 801a886:	9309      	str	r3, [sp, #36]	; 0x24
 801a888:	2320      	movs	r3, #32
 801a88a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a88e:	f8cd 800c 	str.w	r8, [sp, #12]
 801a892:	2330      	movs	r3, #48	; 0x30
 801a894:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801aa58 <_vfiprintf_r+0x24c>
 801a898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a89c:	f04f 0901 	mov.w	r9, #1
 801a8a0:	4623      	mov	r3, r4
 801a8a2:	469a      	mov	sl, r3
 801a8a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a8a8:	b10a      	cbz	r2, 801a8ae <_vfiprintf_r+0xa2>
 801a8aa:	2a25      	cmp	r2, #37	; 0x25
 801a8ac:	d1f9      	bne.n	801a8a2 <_vfiprintf_r+0x96>
 801a8ae:	ebba 0b04 	subs.w	fp, sl, r4
 801a8b2:	d00b      	beq.n	801a8cc <_vfiprintf_r+0xc0>
 801a8b4:	465b      	mov	r3, fp
 801a8b6:	4622      	mov	r2, r4
 801a8b8:	4629      	mov	r1, r5
 801a8ba:	4630      	mov	r0, r6
 801a8bc:	f7ff ff93 	bl	801a7e6 <__sfputs_r>
 801a8c0:	3001      	adds	r0, #1
 801a8c2:	f000 80aa 	beq.w	801aa1a <_vfiprintf_r+0x20e>
 801a8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a8c8:	445a      	add	r2, fp
 801a8ca:	9209      	str	r2, [sp, #36]	; 0x24
 801a8cc:	f89a 3000 	ldrb.w	r3, [sl]
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	f000 80a2 	beq.w	801aa1a <_vfiprintf_r+0x20e>
 801a8d6:	2300      	movs	r3, #0
 801a8d8:	f04f 32ff 	mov.w	r2, #4294967295
 801a8dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a8e0:	f10a 0a01 	add.w	sl, sl, #1
 801a8e4:	9304      	str	r3, [sp, #16]
 801a8e6:	9307      	str	r3, [sp, #28]
 801a8e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a8ec:	931a      	str	r3, [sp, #104]	; 0x68
 801a8ee:	4654      	mov	r4, sl
 801a8f0:	2205      	movs	r2, #5
 801a8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8f6:	4858      	ldr	r0, [pc, #352]	; (801aa58 <_vfiprintf_r+0x24c>)
 801a8f8:	f7e5 fc7a 	bl	80001f0 <memchr>
 801a8fc:	9a04      	ldr	r2, [sp, #16]
 801a8fe:	b9d8      	cbnz	r0, 801a938 <_vfiprintf_r+0x12c>
 801a900:	06d1      	lsls	r1, r2, #27
 801a902:	bf44      	itt	mi
 801a904:	2320      	movmi	r3, #32
 801a906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a90a:	0713      	lsls	r3, r2, #28
 801a90c:	bf44      	itt	mi
 801a90e:	232b      	movmi	r3, #43	; 0x2b
 801a910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a914:	f89a 3000 	ldrb.w	r3, [sl]
 801a918:	2b2a      	cmp	r3, #42	; 0x2a
 801a91a:	d015      	beq.n	801a948 <_vfiprintf_r+0x13c>
 801a91c:	9a07      	ldr	r2, [sp, #28]
 801a91e:	4654      	mov	r4, sl
 801a920:	2000      	movs	r0, #0
 801a922:	f04f 0c0a 	mov.w	ip, #10
 801a926:	4621      	mov	r1, r4
 801a928:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a92c:	3b30      	subs	r3, #48	; 0x30
 801a92e:	2b09      	cmp	r3, #9
 801a930:	d94e      	bls.n	801a9d0 <_vfiprintf_r+0x1c4>
 801a932:	b1b0      	cbz	r0, 801a962 <_vfiprintf_r+0x156>
 801a934:	9207      	str	r2, [sp, #28]
 801a936:	e014      	b.n	801a962 <_vfiprintf_r+0x156>
 801a938:	eba0 0308 	sub.w	r3, r0, r8
 801a93c:	fa09 f303 	lsl.w	r3, r9, r3
 801a940:	4313      	orrs	r3, r2
 801a942:	9304      	str	r3, [sp, #16]
 801a944:	46a2      	mov	sl, r4
 801a946:	e7d2      	b.n	801a8ee <_vfiprintf_r+0xe2>
 801a948:	9b03      	ldr	r3, [sp, #12]
 801a94a:	1d19      	adds	r1, r3, #4
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	9103      	str	r1, [sp, #12]
 801a950:	2b00      	cmp	r3, #0
 801a952:	bfbb      	ittet	lt
 801a954:	425b      	neglt	r3, r3
 801a956:	f042 0202 	orrlt.w	r2, r2, #2
 801a95a:	9307      	strge	r3, [sp, #28]
 801a95c:	9307      	strlt	r3, [sp, #28]
 801a95e:	bfb8      	it	lt
 801a960:	9204      	strlt	r2, [sp, #16]
 801a962:	7823      	ldrb	r3, [r4, #0]
 801a964:	2b2e      	cmp	r3, #46	; 0x2e
 801a966:	d10c      	bne.n	801a982 <_vfiprintf_r+0x176>
 801a968:	7863      	ldrb	r3, [r4, #1]
 801a96a:	2b2a      	cmp	r3, #42	; 0x2a
 801a96c:	d135      	bne.n	801a9da <_vfiprintf_r+0x1ce>
 801a96e:	9b03      	ldr	r3, [sp, #12]
 801a970:	1d1a      	adds	r2, r3, #4
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	9203      	str	r2, [sp, #12]
 801a976:	2b00      	cmp	r3, #0
 801a978:	bfb8      	it	lt
 801a97a:	f04f 33ff 	movlt.w	r3, #4294967295
 801a97e:	3402      	adds	r4, #2
 801a980:	9305      	str	r3, [sp, #20]
 801a982:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801aa68 <_vfiprintf_r+0x25c>
 801a986:	7821      	ldrb	r1, [r4, #0]
 801a988:	2203      	movs	r2, #3
 801a98a:	4650      	mov	r0, sl
 801a98c:	f7e5 fc30 	bl	80001f0 <memchr>
 801a990:	b140      	cbz	r0, 801a9a4 <_vfiprintf_r+0x198>
 801a992:	2340      	movs	r3, #64	; 0x40
 801a994:	eba0 000a 	sub.w	r0, r0, sl
 801a998:	fa03 f000 	lsl.w	r0, r3, r0
 801a99c:	9b04      	ldr	r3, [sp, #16]
 801a99e:	4303      	orrs	r3, r0
 801a9a0:	3401      	adds	r4, #1
 801a9a2:	9304      	str	r3, [sp, #16]
 801a9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9a8:	482c      	ldr	r0, [pc, #176]	; (801aa5c <_vfiprintf_r+0x250>)
 801a9aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a9ae:	2206      	movs	r2, #6
 801a9b0:	f7e5 fc1e 	bl	80001f0 <memchr>
 801a9b4:	2800      	cmp	r0, #0
 801a9b6:	d03f      	beq.n	801aa38 <_vfiprintf_r+0x22c>
 801a9b8:	4b29      	ldr	r3, [pc, #164]	; (801aa60 <_vfiprintf_r+0x254>)
 801a9ba:	bb1b      	cbnz	r3, 801aa04 <_vfiprintf_r+0x1f8>
 801a9bc:	9b03      	ldr	r3, [sp, #12]
 801a9be:	3307      	adds	r3, #7
 801a9c0:	f023 0307 	bic.w	r3, r3, #7
 801a9c4:	3308      	adds	r3, #8
 801a9c6:	9303      	str	r3, [sp, #12]
 801a9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9ca:	443b      	add	r3, r7
 801a9cc:	9309      	str	r3, [sp, #36]	; 0x24
 801a9ce:	e767      	b.n	801a8a0 <_vfiprintf_r+0x94>
 801a9d0:	fb0c 3202 	mla	r2, ip, r2, r3
 801a9d4:	460c      	mov	r4, r1
 801a9d6:	2001      	movs	r0, #1
 801a9d8:	e7a5      	b.n	801a926 <_vfiprintf_r+0x11a>
 801a9da:	2300      	movs	r3, #0
 801a9dc:	3401      	adds	r4, #1
 801a9de:	9305      	str	r3, [sp, #20]
 801a9e0:	4619      	mov	r1, r3
 801a9e2:	f04f 0c0a 	mov.w	ip, #10
 801a9e6:	4620      	mov	r0, r4
 801a9e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a9ec:	3a30      	subs	r2, #48	; 0x30
 801a9ee:	2a09      	cmp	r2, #9
 801a9f0:	d903      	bls.n	801a9fa <_vfiprintf_r+0x1ee>
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d0c5      	beq.n	801a982 <_vfiprintf_r+0x176>
 801a9f6:	9105      	str	r1, [sp, #20]
 801a9f8:	e7c3      	b.n	801a982 <_vfiprintf_r+0x176>
 801a9fa:	fb0c 2101 	mla	r1, ip, r1, r2
 801a9fe:	4604      	mov	r4, r0
 801aa00:	2301      	movs	r3, #1
 801aa02:	e7f0      	b.n	801a9e6 <_vfiprintf_r+0x1da>
 801aa04:	ab03      	add	r3, sp, #12
 801aa06:	9300      	str	r3, [sp, #0]
 801aa08:	462a      	mov	r2, r5
 801aa0a:	4b16      	ldr	r3, [pc, #88]	; (801aa64 <_vfiprintf_r+0x258>)
 801aa0c:	a904      	add	r1, sp, #16
 801aa0e:	4630      	mov	r0, r6
 801aa10:	f3af 8000 	nop.w
 801aa14:	4607      	mov	r7, r0
 801aa16:	1c78      	adds	r0, r7, #1
 801aa18:	d1d6      	bne.n	801a9c8 <_vfiprintf_r+0x1bc>
 801aa1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aa1c:	07d9      	lsls	r1, r3, #31
 801aa1e:	d405      	bmi.n	801aa2c <_vfiprintf_r+0x220>
 801aa20:	89ab      	ldrh	r3, [r5, #12]
 801aa22:	059a      	lsls	r2, r3, #22
 801aa24:	d402      	bmi.n	801aa2c <_vfiprintf_r+0x220>
 801aa26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aa28:	f7ff feb9 	bl	801a79e <__retarget_lock_release_recursive>
 801aa2c:	89ab      	ldrh	r3, [r5, #12]
 801aa2e:	065b      	lsls	r3, r3, #25
 801aa30:	f53f af12 	bmi.w	801a858 <_vfiprintf_r+0x4c>
 801aa34:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa36:	e711      	b.n	801a85c <_vfiprintf_r+0x50>
 801aa38:	ab03      	add	r3, sp, #12
 801aa3a:	9300      	str	r3, [sp, #0]
 801aa3c:	462a      	mov	r2, r5
 801aa3e:	4b09      	ldr	r3, [pc, #36]	; (801aa64 <_vfiprintf_r+0x258>)
 801aa40:	a904      	add	r1, sp, #16
 801aa42:	4630      	mov	r0, r6
 801aa44:	f000 f880 	bl	801ab48 <_printf_i>
 801aa48:	e7e4      	b.n	801aa14 <_vfiprintf_r+0x208>
 801aa4a:	bf00      	nop
 801aa4c:	0801eba0 	.word	0x0801eba0
 801aa50:	0801ebc0 	.word	0x0801ebc0
 801aa54:	0801eb80 	.word	0x0801eb80
 801aa58:	0801ebe0 	.word	0x0801ebe0
 801aa5c:	0801ebea 	.word	0x0801ebea
 801aa60:	00000000 	.word	0x00000000
 801aa64:	0801a7e7 	.word	0x0801a7e7
 801aa68:	0801ebe6 	.word	0x0801ebe6

0801aa6c <_printf_common>:
 801aa6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa70:	4616      	mov	r6, r2
 801aa72:	4699      	mov	r9, r3
 801aa74:	688a      	ldr	r2, [r1, #8]
 801aa76:	690b      	ldr	r3, [r1, #16]
 801aa78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aa7c:	4293      	cmp	r3, r2
 801aa7e:	bfb8      	it	lt
 801aa80:	4613      	movlt	r3, r2
 801aa82:	6033      	str	r3, [r6, #0]
 801aa84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aa88:	4607      	mov	r7, r0
 801aa8a:	460c      	mov	r4, r1
 801aa8c:	b10a      	cbz	r2, 801aa92 <_printf_common+0x26>
 801aa8e:	3301      	adds	r3, #1
 801aa90:	6033      	str	r3, [r6, #0]
 801aa92:	6823      	ldr	r3, [r4, #0]
 801aa94:	0699      	lsls	r1, r3, #26
 801aa96:	bf42      	ittt	mi
 801aa98:	6833      	ldrmi	r3, [r6, #0]
 801aa9a:	3302      	addmi	r3, #2
 801aa9c:	6033      	strmi	r3, [r6, #0]
 801aa9e:	6825      	ldr	r5, [r4, #0]
 801aaa0:	f015 0506 	ands.w	r5, r5, #6
 801aaa4:	d106      	bne.n	801aab4 <_printf_common+0x48>
 801aaa6:	f104 0a19 	add.w	sl, r4, #25
 801aaaa:	68e3      	ldr	r3, [r4, #12]
 801aaac:	6832      	ldr	r2, [r6, #0]
 801aaae:	1a9b      	subs	r3, r3, r2
 801aab0:	42ab      	cmp	r3, r5
 801aab2:	dc26      	bgt.n	801ab02 <_printf_common+0x96>
 801aab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801aab8:	1e13      	subs	r3, r2, #0
 801aaba:	6822      	ldr	r2, [r4, #0]
 801aabc:	bf18      	it	ne
 801aabe:	2301      	movne	r3, #1
 801aac0:	0692      	lsls	r2, r2, #26
 801aac2:	d42b      	bmi.n	801ab1c <_printf_common+0xb0>
 801aac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aac8:	4649      	mov	r1, r9
 801aaca:	4638      	mov	r0, r7
 801aacc:	47c0      	blx	r8
 801aace:	3001      	adds	r0, #1
 801aad0:	d01e      	beq.n	801ab10 <_printf_common+0xa4>
 801aad2:	6823      	ldr	r3, [r4, #0]
 801aad4:	68e5      	ldr	r5, [r4, #12]
 801aad6:	6832      	ldr	r2, [r6, #0]
 801aad8:	f003 0306 	and.w	r3, r3, #6
 801aadc:	2b04      	cmp	r3, #4
 801aade:	bf08      	it	eq
 801aae0:	1aad      	subeq	r5, r5, r2
 801aae2:	68a3      	ldr	r3, [r4, #8]
 801aae4:	6922      	ldr	r2, [r4, #16]
 801aae6:	bf0c      	ite	eq
 801aae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aaec:	2500      	movne	r5, #0
 801aaee:	4293      	cmp	r3, r2
 801aaf0:	bfc4      	itt	gt
 801aaf2:	1a9b      	subgt	r3, r3, r2
 801aaf4:	18ed      	addgt	r5, r5, r3
 801aaf6:	2600      	movs	r6, #0
 801aaf8:	341a      	adds	r4, #26
 801aafa:	42b5      	cmp	r5, r6
 801aafc:	d11a      	bne.n	801ab34 <_printf_common+0xc8>
 801aafe:	2000      	movs	r0, #0
 801ab00:	e008      	b.n	801ab14 <_printf_common+0xa8>
 801ab02:	2301      	movs	r3, #1
 801ab04:	4652      	mov	r2, sl
 801ab06:	4649      	mov	r1, r9
 801ab08:	4638      	mov	r0, r7
 801ab0a:	47c0      	blx	r8
 801ab0c:	3001      	adds	r0, #1
 801ab0e:	d103      	bne.n	801ab18 <_printf_common+0xac>
 801ab10:	f04f 30ff 	mov.w	r0, #4294967295
 801ab14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab18:	3501      	adds	r5, #1
 801ab1a:	e7c6      	b.n	801aaaa <_printf_common+0x3e>
 801ab1c:	18e1      	adds	r1, r4, r3
 801ab1e:	1c5a      	adds	r2, r3, #1
 801ab20:	2030      	movs	r0, #48	; 0x30
 801ab22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ab26:	4422      	add	r2, r4
 801ab28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ab2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ab30:	3302      	adds	r3, #2
 801ab32:	e7c7      	b.n	801aac4 <_printf_common+0x58>
 801ab34:	2301      	movs	r3, #1
 801ab36:	4622      	mov	r2, r4
 801ab38:	4649      	mov	r1, r9
 801ab3a:	4638      	mov	r0, r7
 801ab3c:	47c0      	blx	r8
 801ab3e:	3001      	adds	r0, #1
 801ab40:	d0e6      	beq.n	801ab10 <_printf_common+0xa4>
 801ab42:	3601      	adds	r6, #1
 801ab44:	e7d9      	b.n	801aafa <_printf_common+0x8e>
	...

0801ab48 <_printf_i>:
 801ab48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ab4c:	460c      	mov	r4, r1
 801ab4e:	4691      	mov	r9, r2
 801ab50:	7e27      	ldrb	r7, [r4, #24]
 801ab52:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ab54:	2f78      	cmp	r7, #120	; 0x78
 801ab56:	4680      	mov	r8, r0
 801ab58:	469a      	mov	sl, r3
 801ab5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ab5e:	d807      	bhi.n	801ab70 <_printf_i+0x28>
 801ab60:	2f62      	cmp	r7, #98	; 0x62
 801ab62:	d80a      	bhi.n	801ab7a <_printf_i+0x32>
 801ab64:	2f00      	cmp	r7, #0
 801ab66:	f000 80d8 	beq.w	801ad1a <_printf_i+0x1d2>
 801ab6a:	2f58      	cmp	r7, #88	; 0x58
 801ab6c:	f000 80a3 	beq.w	801acb6 <_printf_i+0x16e>
 801ab70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ab74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ab78:	e03a      	b.n	801abf0 <_printf_i+0xa8>
 801ab7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ab7e:	2b15      	cmp	r3, #21
 801ab80:	d8f6      	bhi.n	801ab70 <_printf_i+0x28>
 801ab82:	a001      	add	r0, pc, #4	; (adr r0, 801ab88 <_printf_i+0x40>)
 801ab84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801ab88:	0801abe1 	.word	0x0801abe1
 801ab8c:	0801abf5 	.word	0x0801abf5
 801ab90:	0801ab71 	.word	0x0801ab71
 801ab94:	0801ab71 	.word	0x0801ab71
 801ab98:	0801ab71 	.word	0x0801ab71
 801ab9c:	0801ab71 	.word	0x0801ab71
 801aba0:	0801abf5 	.word	0x0801abf5
 801aba4:	0801ab71 	.word	0x0801ab71
 801aba8:	0801ab71 	.word	0x0801ab71
 801abac:	0801ab71 	.word	0x0801ab71
 801abb0:	0801ab71 	.word	0x0801ab71
 801abb4:	0801ad01 	.word	0x0801ad01
 801abb8:	0801ac25 	.word	0x0801ac25
 801abbc:	0801ace3 	.word	0x0801ace3
 801abc0:	0801ab71 	.word	0x0801ab71
 801abc4:	0801ab71 	.word	0x0801ab71
 801abc8:	0801ad23 	.word	0x0801ad23
 801abcc:	0801ab71 	.word	0x0801ab71
 801abd0:	0801ac25 	.word	0x0801ac25
 801abd4:	0801ab71 	.word	0x0801ab71
 801abd8:	0801ab71 	.word	0x0801ab71
 801abdc:	0801aceb 	.word	0x0801aceb
 801abe0:	680b      	ldr	r3, [r1, #0]
 801abe2:	1d1a      	adds	r2, r3, #4
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	600a      	str	r2, [r1, #0]
 801abe8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801abec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801abf0:	2301      	movs	r3, #1
 801abf2:	e0a3      	b.n	801ad3c <_printf_i+0x1f4>
 801abf4:	6825      	ldr	r5, [r4, #0]
 801abf6:	6808      	ldr	r0, [r1, #0]
 801abf8:	062e      	lsls	r6, r5, #24
 801abfa:	f100 0304 	add.w	r3, r0, #4
 801abfe:	d50a      	bpl.n	801ac16 <_printf_i+0xce>
 801ac00:	6805      	ldr	r5, [r0, #0]
 801ac02:	600b      	str	r3, [r1, #0]
 801ac04:	2d00      	cmp	r5, #0
 801ac06:	da03      	bge.n	801ac10 <_printf_i+0xc8>
 801ac08:	232d      	movs	r3, #45	; 0x2d
 801ac0a:	426d      	negs	r5, r5
 801ac0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ac10:	485e      	ldr	r0, [pc, #376]	; (801ad8c <_printf_i+0x244>)
 801ac12:	230a      	movs	r3, #10
 801ac14:	e019      	b.n	801ac4a <_printf_i+0x102>
 801ac16:	f015 0f40 	tst.w	r5, #64	; 0x40
 801ac1a:	6805      	ldr	r5, [r0, #0]
 801ac1c:	600b      	str	r3, [r1, #0]
 801ac1e:	bf18      	it	ne
 801ac20:	b22d      	sxthne	r5, r5
 801ac22:	e7ef      	b.n	801ac04 <_printf_i+0xbc>
 801ac24:	680b      	ldr	r3, [r1, #0]
 801ac26:	6825      	ldr	r5, [r4, #0]
 801ac28:	1d18      	adds	r0, r3, #4
 801ac2a:	6008      	str	r0, [r1, #0]
 801ac2c:	0628      	lsls	r0, r5, #24
 801ac2e:	d501      	bpl.n	801ac34 <_printf_i+0xec>
 801ac30:	681d      	ldr	r5, [r3, #0]
 801ac32:	e002      	b.n	801ac3a <_printf_i+0xf2>
 801ac34:	0669      	lsls	r1, r5, #25
 801ac36:	d5fb      	bpl.n	801ac30 <_printf_i+0xe8>
 801ac38:	881d      	ldrh	r5, [r3, #0]
 801ac3a:	4854      	ldr	r0, [pc, #336]	; (801ad8c <_printf_i+0x244>)
 801ac3c:	2f6f      	cmp	r7, #111	; 0x6f
 801ac3e:	bf0c      	ite	eq
 801ac40:	2308      	moveq	r3, #8
 801ac42:	230a      	movne	r3, #10
 801ac44:	2100      	movs	r1, #0
 801ac46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ac4a:	6866      	ldr	r6, [r4, #4]
 801ac4c:	60a6      	str	r6, [r4, #8]
 801ac4e:	2e00      	cmp	r6, #0
 801ac50:	bfa2      	ittt	ge
 801ac52:	6821      	ldrge	r1, [r4, #0]
 801ac54:	f021 0104 	bicge.w	r1, r1, #4
 801ac58:	6021      	strge	r1, [r4, #0]
 801ac5a:	b90d      	cbnz	r5, 801ac60 <_printf_i+0x118>
 801ac5c:	2e00      	cmp	r6, #0
 801ac5e:	d04d      	beq.n	801acfc <_printf_i+0x1b4>
 801ac60:	4616      	mov	r6, r2
 801ac62:	fbb5 f1f3 	udiv	r1, r5, r3
 801ac66:	fb03 5711 	mls	r7, r3, r1, r5
 801ac6a:	5dc7      	ldrb	r7, [r0, r7]
 801ac6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ac70:	462f      	mov	r7, r5
 801ac72:	42bb      	cmp	r3, r7
 801ac74:	460d      	mov	r5, r1
 801ac76:	d9f4      	bls.n	801ac62 <_printf_i+0x11a>
 801ac78:	2b08      	cmp	r3, #8
 801ac7a:	d10b      	bne.n	801ac94 <_printf_i+0x14c>
 801ac7c:	6823      	ldr	r3, [r4, #0]
 801ac7e:	07df      	lsls	r7, r3, #31
 801ac80:	d508      	bpl.n	801ac94 <_printf_i+0x14c>
 801ac82:	6923      	ldr	r3, [r4, #16]
 801ac84:	6861      	ldr	r1, [r4, #4]
 801ac86:	4299      	cmp	r1, r3
 801ac88:	bfde      	ittt	le
 801ac8a:	2330      	movle	r3, #48	; 0x30
 801ac8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ac90:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ac94:	1b92      	subs	r2, r2, r6
 801ac96:	6122      	str	r2, [r4, #16]
 801ac98:	f8cd a000 	str.w	sl, [sp]
 801ac9c:	464b      	mov	r3, r9
 801ac9e:	aa03      	add	r2, sp, #12
 801aca0:	4621      	mov	r1, r4
 801aca2:	4640      	mov	r0, r8
 801aca4:	f7ff fee2 	bl	801aa6c <_printf_common>
 801aca8:	3001      	adds	r0, #1
 801acaa:	d14c      	bne.n	801ad46 <_printf_i+0x1fe>
 801acac:	f04f 30ff 	mov.w	r0, #4294967295
 801acb0:	b004      	add	sp, #16
 801acb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acb6:	4835      	ldr	r0, [pc, #212]	; (801ad8c <_printf_i+0x244>)
 801acb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801acbc:	6823      	ldr	r3, [r4, #0]
 801acbe:	680e      	ldr	r6, [r1, #0]
 801acc0:	061f      	lsls	r7, r3, #24
 801acc2:	f856 5b04 	ldr.w	r5, [r6], #4
 801acc6:	600e      	str	r6, [r1, #0]
 801acc8:	d514      	bpl.n	801acf4 <_printf_i+0x1ac>
 801acca:	07d9      	lsls	r1, r3, #31
 801accc:	bf44      	itt	mi
 801acce:	f043 0320 	orrmi.w	r3, r3, #32
 801acd2:	6023      	strmi	r3, [r4, #0]
 801acd4:	b91d      	cbnz	r5, 801acde <_printf_i+0x196>
 801acd6:	6823      	ldr	r3, [r4, #0]
 801acd8:	f023 0320 	bic.w	r3, r3, #32
 801acdc:	6023      	str	r3, [r4, #0]
 801acde:	2310      	movs	r3, #16
 801ace0:	e7b0      	b.n	801ac44 <_printf_i+0xfc>
 801ace2:	6823      	ldr	r3, [r4, #0]
 801ace4:	f043 0320 	orr.w	r3, r3, #32
 801ace8:	6023      	str	r3, [r4, #0]
 801acea:	2378      	movs	r3, #120	; 0x78
 801acec:	4828      	ldr	r0, [pc, #160]	; (801ad90 <_printf_i+0x248>)
 801acee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801acf2:	e7e3      	b.n	801acbc <_printf_i+0x174>
 801acf4:	065e      	lsls	r6, r3, #25
 801acf6:	bf48      	it	mi
 801acf8:	b2ad      	uxthmi	r5, r5
 801acfa:	e7e6      	b.n	801acca <_printf_i+0x182>
 801acfc:	4616      	mov	r6, r2
 801acfe:	e7bb      	b.n	801ac78 <_printf_i+0x130>
 801ad00:	680b      	ldr	r3, [r1, #0]
 801ad02:	6826      	ldr	r6, [r4, #0]
 801ad04:	6960      	ldr	r0, [r4, #20]
 801ad06:	1d1d      	adds	r5, r3, #4
 801ad08:	600d      	str	r5, [r1, #0]
 801ad0a:	0635      	lsls	r5, r6, #24
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	d501      	bpl.n	801ad14 <_printf_i+0x1cc>
 801ad10:	6018      	str	r0, [r3, #0]
 801ad12:	e002      	b.n	801ad1a <_printf_i+0x1d2>
 801ad14:	0671      	lsls	r1, r6, #25
 801ad16:	d5fb      	bpl.n	801ad10 <_printf_i+0x1c8>
 801ad18:	8018      	strh	r0, [r3, #0]
 801ad1a:	2300      	movs	r3, #0
 801ad1c:	6123      	str	r3, [r4, #16]
 801ad1e:	4616      	mov	r6, r2
 801ad20:	e7ba      	b.n	801ac98 <_printf_i+0x150>
 801ad22:	680b      	ldr	r3, [r1, #0]
 801ad24:	1d1a      	adds	r2, r3, #4
 801ad26:	600a      	str	r2, [r1, #0]
 801ad28:	681e      	ldr	r6, [r3, #0]
 801ad2a:	6862      	ldr	r2, [r4, #4]
 801ad2c:	2100      	movs	r1, #0
 801ad2e:	4630      	mov	r0, r6
 801ad30:	f7e5 fa5e 	bl	80001f0 <memchr>
 801ad34:	b108      	cbz	r0, 801ad3a <_printf_i+0x1f2>
 801ad36:	1b80      	subs	r0, r0, r6
 801ad38:	6060      	str	r0, [r4, #4]
 801ad3a:	6863      	ldr	r3, [r4, #4]
 801ad3c:	6123      	str	r3, [r4, #16]
 801ad3e:	2300      	movs	r3, #0
 801ad40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad44:	e7a8      	b.n	801ac98 <_printf_i+0x150>
 801ad46:	6923      	ldr	r3, [r4, #16]
 801ad48:	4632      	mov	r2, r6
 801ad4a:	4649      	mov	r1, r9
 801ad4c:	4640      	mov	r0, r8
 801ad4e:	47d0      	blx	sl
 801ad50:	3001      	adds	r0, #1
 801ad52:	d0ab      	beq.n	801acac <_printf_i+0x164>
 801ad54:	6823      	ldr	r3, [r4, #0]
 801ad56:	079b      	lsls	r3, r3, #30
 801ad58:	d413      	bmi.n	801ad82 <_printf_i+0x23a>
 801ad5a:	68e0      	ldr	r0, [r4, #12]
 801ad5c:	9b03      	ldr	r3, [sp, #12]
 801ad5e:	4298      	cmp	r0, r3
 801ad60:	bfb8      	it	lt
 801ad62:	4618      	movlt	r0, r3
 801ad64:	e7a4      	b.n	801acb0 <_printf_i+0x168>
 801ad66:	2301      	movs	r3, #1
 801ad68:	4632      	mov	r2, r6
 801ad6a:	4649      	mov	r1, r9
 801ad6c:	4640      	mov	r0, r8
 801ad6e:	47d0      	blx	sl
 801ad70:	3001      	adds	r0, #1
 801ad72:	d09b      	beq.n	801acac <_printf_i+0x164>
 801ad74:	3501      	adds	r5, #1
 801ad76:	68e3      	ldr	r3, [r4, #12]
 801ad78:	9903      	ldr	r1, [sp, #12]
 801ad7a:	1a5b      	subs	r3, r3, r1
 801ad7c:	42ab      	cmp	r3, r5
 801ad7e:	dcf2      	bgt.n	801ad66 <_printf_i+0x21e>
 801ad80:	e7eb      	b.n	801ad5a <_printf_i+0x212>
 801ad82:	2500      	movs	r5, #0
 801ad84:	f104 0619 	add.w	r6, r4, #25
 801ad88:	e7f5      	b.n	801ad76 <_printf_i+0x22e>
 801ad8a:	bf00      	nop
 801ad8c:	0801ebf1 	.word	0x0801ebf1
 801ad90:	0801ec02 	.word	0x0801ec02

0801ad94 <_putc_r>:
 801ad94:	b570      	push	{r4, r5, r6, lr}
 801ad96:	460d      	mov	r5, r1
 801ad98:	4614      	mov	r4, r2
 801ad9a:	4606      	mov	r6, r0
 801ad9c:	b118      	cbz	r0, 801ada6 <_putc_r+0x12>
 801ad9e:	6983      	ldr	r3, [r0, #24]
 801ada0:	b90b      	cbnz	r3, 801ada6 <_putc_r+0x12>
 801ada2:	f7ff fc4b 	bl	801a63c <__sinit>
 801ada6:	4b1c      	ldr	r3, [pc, #112]	; (801ae18 <_putc_r+0x84>)
 801ada8:	429c      	cmp	r4, r3
 801adaa:	d124      	bne.n	801adf6 <_putc_r+0x62>
 801adac:	6874      	ldr	r4, [r6, #4]
 801adae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801adb0:	07d8      	lsls	r0, r3, #31
 801adb2:	d405      	bmi.n	801adc0 <_putc_r+0x2c>
 801adb4:	89a3      	ldrh	r3, [r4, #12]
 801adb6:	0599      	lsls	r1, r3, #22
 801adb8:	d402      	bmi.n	801adc0 <_putc_r+0x2c>
 801adba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801adbc:	f7ff fcee 	bl	801a79c <__retarget_lock_acquire_recursive>
 801adc0:	68a3      	ldr	r3, [r4, #8]
 801adc2:	3b01      	subs	r3, #1
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	60a3      	str	r3, [r4, #8]
 801adc8:	da05      	bge.n	801add6 <_putc_r+0x42>
 801adca:	69a2      	ldr	r2, [r4, #24]
 801adcc:	4293      	cmp	r3, r2
 801adce:	db1c      	blt.n	801ae0a <_putc_r+0x76>
 801add0:	b2eb      	uxtb	r3, r5
 801add2:	2b0a      	cmp	r3, #10
 801add4:	d019      	beq.n	801ae0a <_putc_r+0x76>
 801add6:	6823      	ldr	r3, [r4, #0]
 801add8:	1c5a      	adds	r2, r3, #1
 801adda:	6022      	str	r2, [r4, #0]
 801addc:	701d      	strb	r5, [r3, #0]
 801adde:	b2ed      	uxtb	r5, r5
 801ade0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ade2:	07da      	lsls	r2, r3, #31
 801ade4:	d405      	bmi.n	801adf2 <_putc_r+0x5e>
 801ade6:	89a3      	ldrh	r3, [r4, #12]
 801ade8:	059b      	lsls	r3, r3, #22
 801adea:	d402      	bmi.n	801adf2 <_putc_r+0x5e>
 801adec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801adee:	f7ff fcd6 	bl	801a79e <__retarget_lock_release_recursive>
 801adf2:	4628      	mov	r0, r5
 801adf4:	bd70      	pop	{r4, r5, r6, pc}
 801adf6:	4b09      	ldr	r3, [pc, #36]	; (801ae1c <_putc_r+0x88>)
 801adf8:	429c      	cmp	r4, r3
 801adfa:	d101      	bne.n	801ae00 <_putc_r+0x6c>
 801adfc:	68b4      	ldr	r4, [r6, #8]
 801adfe:	e7d6      	b.n	801adae <_putc_r+0x1a>
 801ae00:	4b07      	ldr	r3, [pc, #28]	; (801ae20 <_putc_r+0x8c>)
 801ae02:	429c      	cmp	r4, r3
 801ae04:	bf08      	it	eq
 801ae06:	68f4      	ldreq	r4, [r6, #12]
 801ae08:	e7d1      	b.n	801adae <_putc_r+0x1a>
 801ae0a:	4629      	mov	r1, r5
 801ae0c:	4622      	mov	r2, r4
 801ae0e:	4630      	mov	r0, r6
 801ae10:	f000 f84c 	bl	801aeac <__swbuf_r>
 801ae14:	4605      	mov	r5, r0
 801ae16:	e7e3      	b.n	801ade0 <_putc_r+0x4c>
 801ae18:	0801eba0 	.word	0x0801eba0
 801ae1c:	0801ebc0 	.word	0x0801ebc0
 801ae20:	0801eb80 	.word	0x0801eb80

0801ae24 <__sread>:
 801ae24:	b510      	push	{r4, lr}
 801ae26:	460c      	mov	r4, r1
 801ae28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae2c:	f000 fa60 	bl	801b2f0 <_read_r>
 801ae30:	2800      	cmp	r0, #0
 801ae32:	bfab      	itete	ge
 801ae34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ae36:	89a3      	ldrhlt	r3, [r4, #12]
 801ae38:	181b      	addge	r3, r3, r0
 801ae3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ae3e:	bfac      	ite	ge
 801ae40:	6563      	strge	r3, [r4, #84]	; 0x54
 801ae42:	81a3      	strhlt	r3, [r4, #12]
 801ae44:	bd10      	pop	{r4, pc}

0801ae46 <__swrite>:
 801ae46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae4a:	461f      	mov	r7, r3
 801ae4c:	898b      	ldrh	r3, [r1, #12]
 801ae4e:	05db      	lsls	r3, r3, #23
 801ae50:	4605      	mov	r5, r0
 801ae52:	460c      	mov	r4, r1
 801ae54:	4616      	mov	r6, r2
 801ae56:	d505      	bpl.n	801ae64 <__swrite+0x1e>
 801ae58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae5c:	2302      	movs	r3, #2
 801ae5e:	2200      	movs	r2, #0
 801ae60:	f000 f9d0 	bl	801b204 <_lseek_r>
 801ae64:	89a3      	ldrh	r3, [r4, #12]
 801ae66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ae6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ae6e:	81a3      	strh	r3, [r4, #12]
 801ae70:	4632      	mov	r2, r6
 801ae72:	463b      	mov	r3, r7
 801ae74:	4628      	mov	r0, r5
 801ae76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae7a:	f000 b869 	b.w	801af50 <_write_r>

0801ae7e <__sseek>:
 801ae7e:	b510      	push	{r4, lr}
 801ae80:	460c      	mov	r4, r1
 801ae82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae86:	f000 f9bd 	bl	801b204 <_lseek_r>
 801ae8a:	1c43      	adds	r3, r0, #1
 801ae8c:	89a3      	ldrh	r3, [r4, #12]
 801ae8e:	bf15      	itete	ne
 801ae90:	6560      	strne	r0, [r4, #84]	; 0x54
 801ae92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ae96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ae9a:	81a3      	strheq	r3, [r4, #12]
 801ae9c:	bf18      	it	ne
 801ae9e:	81a3      	strhne	r3, [r4, #12]
 801aea0:	bd10      	pop	{r4, pc}

0801aea2 <__sclose>:
 801aea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aea6:	f000 b8db 	b.w	801b060 <_close_r>
	...

0801aeac <__swbuf_r>:
 801aeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeae:	460e      	mov	r6, r1
 801aeb0:	4614      	mov	r4, r2
 801aeb2:	4605      	mov	r5, r0
 801aeb4:	b118      	cbz	r0, 801aebe <__swbuf_r+0x12>
 801aeb6:	6983      	ldr	r3, [r0, #24]
 801aeb8:	b90b      	cbnz	r3, 801aebe <__swbuf_r+0x12>
 801aeba:	f7ff fbbf 	bl	801a63c <__sinit>
 801aebe:	4b21      	ldr	r3, [pc, #132]	; (801af44 <__swbuf_r+0x98>)
 801aec0:	429c      	cmp	r4, r3
 801aec2:	d12b      	bne.n	801af1c <__swbuf_r+0x70>
 801aec4:	686c      	ldr	r4, [r5, #4]
 801aec6:	69a3      	ldr	r3, [r4, #24]
 801aec8:	60a3      	str	r3, [r4, #8]
 801aeca:	89a3      	ldrh	r3, [r4, #12]
 801aecc:	071a      	lsls	r2, r3, #28
 801aece:	d52f      	bpl.n	801af30 <__swbuf_r+0x84>
 801aed0:	6923      	ldr	r3, [r4, #16]
 801aed2:	b36b      	cbz	r3, 801af30 <__swbuf_r+0x84>
 801aed4:	6923      	ldr	r3, [r4, #16]
 801aed6:	6820      	ldr	r0, [r4, #0]
 801aed8:	1ac0      	subs	r0, r0, r3
 801aeda:	6963      	ldr	r3, [r4, #20]
 801aedc:	b2f6      	uxtb	r6, r6
 801aede:	4283      	cmp	r3, r0
 801aee0:	4637      	mov	r7, r6
 801aee2:	dc04      	bgt.n	801aeee <__swbuf_r+0x42>
 801aee4:	4621      	mov	r1, r4
 801aee6:	4628      	mov	r0, r5
 801aee8:	f000 f950 	bl	801b18c <_fflush_r>
 801aeec:	bb30      	cbnz	r0, 801af3c <__swbuf_r+0x90>
 801aeee:	68a3      	ldr	r3, [r4, #8]
 801aef0:	3b01      	subs	r3, #1
 801aef2:	60a3      	str	r3, [r4, #8]
 801aef4:	6823      	ldr	r3, [r4, #0]
 801aef6:	1c5a      	adds	r2, r3, #1
 801aef8:	6022      	str	r2, [r4, #0]
 801aefa:	701e      	strb	r6, [r3, #0]
 801aefc:	6963      	ldr	r3, [r4, #20]
 801aefe:	3001      	adds	r0, #1
 801af00:	4283      	cmp	r3, r0
 801af02:	d004      	beq.n	801af0e <__swbuf_r+0x62>
 801af04:	89a3      	ldrh	r3, [r4, #12]
 801af06:	07db      	lsls	r3, r3, #31
 801af08:	d506      	bpl.n	801af18 <__swbuf_r+0x6c>
 801af0a:	2e0a      	cmp	r6, #10
 801af0c:	d104      	bne.n	801af18 <__swbuf_r+0x6c>
 801af0e:	4621      	mov	r1, r4
 801af10:	4628      	mov	r0, r5
 801af12:	f000 f93b 	bl	801b18c <_fflush_r>
 801af16:	b988      	cbnz	r0, 801af3c <__swbuf_r+0x90>
 801af18:	4638      	mov	r0, r7
 801af1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af1c:	4b0a      	ldr	r3, [pc, #40]	; (801af48 <__swbuf_r+0x9c>)
 801af1e:	429c      	cmp	r4, r3
 801af20:	d101      	bne.n	801af26 <__swbuf_r+0x7a>
 801af22:	68ac      	ldr	r4, [r5, #8]
 801af24:	e7cf      	b.n	801aec6 <__swbuf_r+0x1a>
 801af26:	4b09      	ldr	r3, [pc, #36]	; (801af4c <__swbuf_r+0xa0>)
 801af28:	429c      	cmp	r4, r3
 801af2a:	bf08      	it	eq
 801af2c:	68ec      	ldreq	r4, [r5, #12]
 801af2e:	e7ca      	b.n	801aec6 <__swbuf_r+0x1a>
 801af30:	4621      	mov	r1, r4
 801af32:	4628      	mov	r0, r5
 801af34:	f000 f81e 	bl	801af74 <__swsetup_r>
 801af38:	2800      	cmp	r0, #0
 801af3a:	d0cb      	beq.n	801aed4 <__swbuf_r+0x28>
 801af3c:	f04f 37ff 	mov.w	r7, #4294967295
 801af40:	e7ea      	b.n	801af18 <__swbuf_r+0x6c>
 801af42:	bf00      	nop
 801af44:	0801eba0 	.word	0x0801eba0
 801af48:	0801ebc0 	.word	0x0801ebc0
 801af4c:	0801eb80 	.word	0x0801eb80

0801af50 <_write_r>:
 801af50:	b538      	push	{r3, r4, r5, lr}
 801af52:	4d07      	ldr	r5, [pc, #28]	; (801af70 <_write_r+0x20>)
 801af54:	4604      	mov	r4, r0
 801af56:	4608      	mov	r0, r1
 801af58:	4611      	mov	r1, r2
 801af5a:	2200      	movs	r2, #0
 801af5c:	602a      	str	r2, [r5, #0]
 801af5e:	461a      	mov	r2, r3
 801af60:	f7e5 fdfb 	bl	8000b5a <_write>
 801af64:	1c43      	adds	r3, r0, #1
 801af66:	d102      	bne.n	801af6e <_write_r+0x1e>
 801af68:	682b      	ldr	r3, [r5, #0]
 801af6a:	b103      	cbz	r3, 801af6e <_write_r+0x1e>
 801af6c:	6023      	str	r3, [r4, #0]
 801af6e:	bd38      	pop	{r3, r4, r5, pc}
 801af70:	2000f3d8 	.word	0x2000f3d8

0801af74 <__swsetup_r>:
 801af74:	4b32      	ldr	r3, [pc, #200]	; (801b040 <__swsetup_r+0xcc>)
 801af76:	b570      	push	{r4, r5, r6, lr}
 801af78:	681d      	ldr	r5, [r3, #0]
 801af7a:	4606      	mov	r6, r0
 801af7c:	460c      	mov	r4, r1
 801af7e:	b125      	cbz	r5, 801af8a <__swsetup_r+0x16>
 801af80:	69ab      	ldr	r3, [r5, #24]
 801af82:	b913      	cbnz	r3, 801af8a <__swsetup_r+0x16>
 801af84:	4628      	mov	r0, r5
 801af86:	f7ff fb59 	bl	801a63c <__sinit>
 801af8a:	4b2e      	ldr	r3, [pc, #184]	; (801b044 <__swsetup_r+0xd0>)
 801af8c:	429c      	cmp	r4, r3
 801af8e:	d10f      	bne.n	801afb0 <__swsetup_r+0x3c>
 801af90:	686c      	ldr	r4, [r5, #4]
 801af92:	89a3      	ldrh	r3, [r4, #12]
 801af94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801af98:	0719      	lsls	r1, r3, #28
 801af9a:	d42c      	bmi.n	801aff6 <__swsetup_r+0x82>
 801af9c:	06dd      	lsls	r5, r3, #27
 801af9e:	d411      	bmi.n	801afc4 <__swsetup_r+0x50>
 801afa0:	2309      	movs	r3, #9
 801afa2:	6033      	str	r3, [r6, #0]
 801afa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801afa8:	81a3      	strh	r3, [r4, #12]
 801afaa:	f04f 30ff 	mov.w	r0, #4294967295
 801afae:	e03e      	b.n	801b02e <__swsetup_r+0xba>
 801afb0:	4b25      	ldr	r3, [pc, #148]	; (801b048 <__swsetup_r+0xd4>)
 801afb2:	429c      	cmp	r4, r3
 801afb4:	d101      	bne.n	801afba <__swsetup_r+0x46>
 801afb6:	68ac      	ldr	r4, [r5, #8]
 801afb8:	e7eb      	b.n	801af92 <__swsetup_r+0x1e>
 801afba:	4b24      	ldr	r3, [pc, #144]	; (801b04c <__swsetup_r+0xd8>)
 801afbc:	429c      	cmp	r4, r3
 801afbe:	bf08      	it	eq
 801afc0:	68ec      	ldreq	r4, [r5, #12]
 801afc2:	e7e6      	b.n	801af92 <__swsetup_r+0x1e>
 801afc4:	0758      	lsls	r0, r3, #29
 801afc6:	d512      	bpl.n	801afee <__swsetup_r+0x7a>
 801afc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801afca:	b141      	cbz	r1, 801afde <__swsetup_r+0x6a>
 801afcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801afd0:	4299      	cmp	r1, r3
 801afd2:	d002      	beq.n	801afda <__swsetup_r+0x66>
 801afd4:	4630      	mov	r0, r6
 801afd6:	f7ff f993 	bl	801a300 <_free_r>
 801afda:	2300      	movs	r3, #0
 801afdc:	6363      	str	r3, [r4, #52]	; 0x34
 801afde:	89a3      	ldrh	r3, [r4, #12]
 801afe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801afe4:	81a3      	strh	r3, [r4, #12]
 801afe6:	2300      	movs	r3, #0
 801afe8:	6063      	str	r3, [r4, #4]
 801afea:	6923      	ldr	r3, [r4, #16]
 801afec:	6023      	str	r3, [r4, #0]
 801afee:	89a3      	ldrh	r3, [r4, #12]
 801aff0:	f043 0308 	orr.w	r3, r3, #8
 801aff4:	81a3      	strh	r3, [r4, #12]
 801aff6:	6923      	ldr	r3, [r4, #16]
 801aff8:	b94b      	cbnz	r3, 801b00e <__swsetup_r+0x9a>
 801affa:	89a3      	ldrh	r3, [r4, #12]
 801affc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b004:	d003      	beq.n	801b00e <__swsetup_r+0x9a>
 801b006:	4621      	mov	r1, r4
 801b008:	4630      	mov	r0, r6
 801b00a:	f000 f931 	bl	801b270 <__smakebuf_r>
 801b00e:	89a0      	ldrh	r0, [r4, #12]
 801b010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b014:	f010 0301 	ands.w	r3, r0, #1
 801b018:	d00a      	beq.n	801b030 <__swsetup_r+0xbc>
 801b01a:	2300      	movs	r3, #0
 801b01c:	60a3      	str	r3, [r4, #8]
 801b01e:	6963      	ldr	r3, [r4, #20]
 801b020:	425b      	negs	r3, r3
 801b022:	61a3      	str	r3, [r4, #24]
 801b024:	6923      	ldr	r3, [r4, #16]
 801b026:	b943      	cbnz	r3, 801b03a <__swsetup_r+0xc6>
 801b028:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b02c:	d1ba      	bne.n	801afa4 <__swsetup_r+0x30>
 801b02e:	bd70      	pop	{r4, r5, r6, pc}
 801b030:	0781      	lsls	r1, r0, #30
 801b032:	bf58      	it	pl
 801b034:	6963      	ldrpl	r3, [r4, #20]
 801b036:	60a3      	str	r3, [r4, #8]
 801b038:	e7f4      	b.n	801b024 <__swsetup_r+0xb0>
 801b03a:	2000      	movs	r0, #0
 801b03c:	e7f7      	b.n	801b02e <__swsetup_r+0xba>
 801b03e:	bf00      	nop
 801b040:	20000040 	.word	0x20000040
 801b044:	0801eba0 	.word	0x0801eba0
 801b048:	0801ebc0 	.word	0x0801ebc0
 801b04c:	0801eb80 	.word	0x0801eb80

0801b050 <abort>:
 801b050:	b508      	push	{r3, lr}
 801b052:	2006      	movs	r0, #6
 801b054:	f000 f986 	bl	801b364 <raise>
 801b058:	2001      	movs	r0, #1
 801b05a:	f7e5 fd57 	bl	8000b0c <_exit>
	...

0801b060 <_close_r>:
 801b060:	b538      	push	{r3, r4, r5, lr}
 801b062:	4d06      	ldr	r5, [pc, #24]	; (801b07c <_close_r+0x1c>)
 801b064:	2300      	movs	r3, #0
 801b066:	4604      	mov	r4, r0
 801b068:	4608      	mov	r0, r1
 801b06a:	602b      	str	r3, [r5, #0]
 801b06c:	f7e5 fdc0 	bl	8000bf0 <_close>
 801b070:	1c43      	adds	r3, r0, #1
 801b072:	d102      	bne.n	801b07a <_close_r+0x1a>
 801b074:	682b      	ldr	r3, [r5, #0]
 801b076:	b103      	cbz	r3, 801b07a <_close_r+0x1a>
 801b078:	6023      	str	r3, [r4, #0]
 801b07a:	bd38      	pop	{r3, r4, r5, pc}
 801b07c:	2000f3d8 	.word	0x2000f3d8

0801b080 <__sflush_r>:
 801b080:	898a      	ldrh	r2, [r1, #12]
 801b082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b086:	4605      	mov	r5, r0
 801b088:	0710      	lsls	r0, r2, #28
 801b08a:	460c      	mov	r4, r1
 801b08c:	d458      	bmi.n	801b140 <__sflush_r+0xc0>
 801b08e:	684b      	ldr	r3, [r1, #4]
 801b090:	2b00      	cmp	r3, #0
 801b092:	dc05      	bgt.n	801b0a0 <__sflush_r+0x20>
 801b094:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b096:	2b00      	cmp	r3, #0
 801b098:	dc02      	bgt.n	801b0a0 <__sflush_r+0x20>
 801b09a:	2000      	movs	r0, #0
 801b09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b0a2:	2e00      	cmp	r6, #0
 801b0a4:	d0f9      	beq.n	801b09a <__sflush_r+0x1a>
 801b0a6:	2300      	movs	r3, #0
 801b0a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b0ac:	682f      	ldr	r7, [r5, #0]
 801b0ae:	602b      	str	r3, [r5, #0]
 801b0b0:	d032      	beq.n	801b118 <__sflush_r+0x98>
 801b0b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b0b4:	89a3      	ldrh	r3, [r4, #12]
 801b0b6:	075a      	lsls	r2, r3, #29
 801b0b8:	d505      	bpl.n	801b0c6 <__sflush_r+0x46>
 801b0ba:	6863      	ldr	r3, [r4, #4]
 801b0bc:	1ac0      	subs	r0, r0, r3
 801b0be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b0c0:	b10b      	cbz	r3, 801b0c6 <__sflush_r+0x46>
 801b0c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b0c4:	1ac0      	subs	r0, r0, r3
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	4602      	mov	r2, r0
 801b0ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b0cc:	6a21      	ldr	r1, [r4, #32]
 801b0ce:	4628      	mov	r0, r5
 801b0d0:	47b0      	blx	r6
 801b0d2:	1c43      	adds	r3, r0, #1
 801b0d4:	89a3      	ldrh	r3, [r4, #12]
 801b0d6:	d106      	bne.n	801b0e6 <__sflush_r+0x66>
 801b0d8:	6829      	ldr	r1, [r5, #0]
 801b0da:	291d      	cmp	r1, #29
 801b0dc:	d82c      	bhi.n	801b138 <__sflush_r+0xb8>
 801b0de:	4a2a      	ldr	r2, [pc, #168]	; (801b188 <__sflush_r+0x108>)
 801b0e0:	40ca      	lsrs	r2, r1
 801b0e2:	07d6      	lsls	r6, r2, #31
 801b0e4:	d528      	bpl.n	801b138 <__sflush_r+0xb8>
 801b0e6:	2200      	movs	r2, #0
 801b0e8:	6062      	str	r2, [r4, #4]
 801b0ea:	04d9      	lsls	r1, r3, #19
 801b0ec:	6922      	ldr	r2, [r4, #16]
 801b0ee:	6022      	str	r2, [r4, #0]
 801b0f0:	d504      	bpl.n	801b0fc <__sflush_r+0x7c>
 801b0f2:	1c42      	adds	r2, r0, #1
 801b0f4:	d101      	bne.n	801b0fa <__sflush_r+0x7a>
 801b0f6:	682b      	ldr	r3, [r5, #0]
 801b0f8:	b903      	cbnz	r3, 801b0fc <__sflush_r+0x7c>
 801b0fa:	6560      	str	r0, [r4, #84]	; 0x54
 801b0fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b0fe:	602f      	str	r7, [r5, #0]
 801b100:	2900      	cmp	r1, #0
 801b102:	d0ca      	beq.n	801b09a <__sflush_r+0x1a>
 801b104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b108:	4299      	cmp	r1, r3
 801b10a:	d002      	beq.n	801b112 <__sflush_r+0x92>
 801b10c:	4628      	mov	r0, r5
 801b10e:	f7ff f8f7 	bl	801a300 <_free_r>
 801b112:	2000      	movs	r0, #0
 801b114:	6360      	str	r0, [r4, #52]	; 0x34
 801b116:	e7c1      	b.n	801b09c <__sflush_r+0x1c>
 801b118:	6a21      	ldr	r1, [r4, #32]
 801b11a:	2301      	movs	r3, #1
 801b11c:	4628      	mov	r0, r5
 801b11e:	47b0      	blx	r6
 801b120:	1c41      	adds	r1, r0, #1
 801b122:	d1c7      	bne.n	801b0b4 <__sflush_r+0x34>
 801b124:	682b      	ldr	r3, [r5, #0]
 801b126:	2b00      	cmp	r3, #0
 801b128:	d0c4      	beq.n	801b0b4 <__sflush_r+0x34>
 801b12a:	2b1d      	cmp	r3, #29
 801b12c:	d001      	beq.n	801b132 <__sflush_r+0xb2>
 801b12e:	2b16      	cmp	r3, #22
 801b130:	d101      	bne.n	801b136 <__sflush_r+0xb6>
 801b132:	602f      	str	r7, [r5, #0]
 801b134:	e7b1      	b.n	801b09a <__sflush_r+0x1a>
 801b136:	89a3      	ldrh	r3, [r4, #12]
 801b138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b13c:	81a3      	strh	r3, [r4, #12]
 801b13e:	e7ad      	b.n	801b09c <__sflush_r+0x1c>
 801b140:	690f      	ldr	r7, [r1, #16]
 801b142:	2f00      	cmp	r7, #0
 801b144:	d0a9      	beq.n	801b09a <__sflush_r+0x1a>
 801b146:	0793      	lsls	r3, r2, #30
 801b148:	680e      	ldr	r6, [r1, #0]
 801b14a:	bf08      	it	eq
 801b14c:	694b      	ldreq	r3, [r1, #20]
 801b14e:	600f      	str	r7, [r1, #0]
 801b150:	bf18      	it	ne
 801b152:	2300      	movne	r3, #0
 801b154:	eba6 0807 	sub.w	r8, r6, r7
 801b158:	608b      	str	r3, [r1, #8]
 801b15a:	f1b8 0f00 	cmp.w	r8, #0
 801b15e:	dd9c      	ble.n	801b09a <__sflush_r+0x1a>
 801b160:	6a21      	ldr	r1, [r4, #32]
 801b162:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b164:	4643      	mov	r3, r8
 801b166:	463a      	mov	r2, r7
 801b168:	4628      	mov	r0, r5
 801b16a:	47b0      	blx	r6
 801b16c:	2800      	cmp	r0, #0
 801b16e:	dc06      	bgt.n	801b17e <__sflush_r+0xfe>
 801b170:	89a3      	ldrh	r3, [r4, #12]
 801b172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b176:	81a3      	strh	r3, [r4, #12]
 801b178:	f04f 30ff 	mov.w	r0, #4294967295
 801b17c:	e78e      	b.n	801b09c <__sflush_r+0x1c>
 801b17e:	4407      	add	r7, r0
 801b180:	eba8 0800 	sub.w	r8, r8, r0
 801b184:	e7e9      	b.n	801b15a <__sflush_r+0xda>
 801b186:	bf00      	nop
 801b188:	20400001 	.word	0x20400001

0801b18c <_fflush_r>:
 801b18c:	b538      	push	{r3, r4, r5, lr}
 801b18e:	690b      	ldr	r3, [r1, #16]
 801b190:	4605      	mov	r5, r0
 801b192:	460c      	mov	r4, r1
 801b194:	b913      	cbnz	r3, 801b19c <_fflush_r+0x10>
 801b196:	2500      	movs	r5, #0
 801b198:	4628      	mov	r0, r5
 801b19a:	bd38      	pop	{r3, r4, r5, pc}
 801b19c:	b118      	cbz	r0, 801b1a6 <_fflush_r+0x1a>
 801b19e:	6983      	ldr	r3, [r0, #24]
 801b1a0:	b90b      	cbnz	r3, 801b1a6 <_fflush_r+0x1a>
 801b1a2:	f7ff fa4b 	bl	801a63c <__sinit>
 801b1a6:	4b14      	ldr	r3, [pc, #80]	; (801b1f8 <_fflush_r+0x6c>)
 801b1a8:	429c      	cmp	r4, r3
 801b1aa:	d11b      	bne.n	801b1e4 <_fflush_r+0x58>
 801b1ac:	686c      	ldr	r4, [r5, #4]
 801b1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	d0ef      	beq.n	801b196 <_fflush_r+0xa>
 801b1b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b1b8:	07d0      	lsls	r0, r2, #31
 801b1ba:	d404      	bmi.n	801b1c6 <_fflush_r+0x3a>
 801b1bc:	0599      	lsls	r1, r3, #22
 801b1be:	d402      	bmi.n	801b1c6 <_fflush_r+0x3a>
 801b1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1c2:	f7ff faeb 	bl	801a79c <__retarget_lock_acquire_recursive>
 801b1c6:	4628      	mov	r0, r5
 801b1c8:	4621      	mov	r1, r4
 801b1ca:	f7ff ff59 	bl	801b080 <__sflush_r>
 801b1ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b1d0:	07da      	lsls	r2, r3, #31
 801b1d2:	4605      	mov	r5, r0
 801b1d4:	d4e0      	bmi.n	801b198 <_fflush_r+0xc>
 801b1d6:	89a3      	ldrh	r3, [r4, #12]
 801b1d8:	059b      	lsls	r3, r3, #22
 801b1da:	d4dd      	bmi.n	801b198 <_fflush_r+0xc>
 801b1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1de:	f7ff fade 	bl	801a79e <__retarget_lock_release_recursive>
 801b1e2:	e7d9      	b.n	801b198 <_fflush_r+0xc>
 801b1e4:	4b05      	ldr	r3, [pc, #20]	; (801b1fc <_fflush_r+0x70>)
 801b1e6:	429c      	cmp	r4, r3
 801b1e8:	d101      	bne.n	801b1ee <_fflush_r+0x62>
 801b1ea:	68ac      	ldr	r4, [r5, #8]
 801b1ec:	e7df      	b.n	801b1ae <_fflush_r+0x22>
 801b1ee:	4b04      	ldr	r3, [pc, #16]	; (801b200 <_fflush_r+0x74>)
 801b1f0:	429c      	cmp	r4, r3
 801b1f2:	bf08      	it	eq
 801b1f4:	68ec      	ldreq	r4, [r5, #12]
 801b1f6:	e7da      	b.n	801b1ae <_fflush_r+0x22>
 801b1f8:	0801eba0 	.word	0x0801eba0
 801b1fc:	0801ebc0 	.word	0x0801ebc0
 801b200:	0801eb80 	.word	0x0801eb80

0801b204 <_lseek_r>:
 801b204:	b538      	push	{r3, r4, r5, lr}
 801b206:	4d07      	ldr	r5, [pc, #28]	; (801b224 <_lseek_r+0x20>)
 801b208:	4604      	mov	r4, r0
 801b20a:	4608      	mov	r0, r1
 801b20c:	4611      	mov	r1, r2
 801b20e:	2200      	movs	r2, #0
 801b210:	602a      	str	r2, [r5, #0]
 801b212:	461a      	mov	r2, r3
 801b214:	f7e5 fd13 	bl	8000c3e <_lseek>
 801b218:	1c43      	adds	r3, r0, #1
 801b21a:	d102      	bne.n	801b222 <_lseek_r+0x1e>
 801b21c:	682b      	ldr	r3, [r5, #0]
 801b21e:	b103      	cbz	r3, 801b222 <_lseek_r+0x1e>
 801b220:	6023      	str	r3, [r4, #0]
 801b222:	bd38      	pop	{r3, r4, r5, pc}
 801b224:	2000f3d8 	.word	0x2000f3d8

0801b228 <__swhatbuf_r>:
 801b228:	b570      	push	{r4, r5, r6, lr}
 801b22a:	460e      	mov	r6, r1
 801b22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b230:	2900      	cmp	r1, #0
 801b232:	b096      	sub	sp, #88	; 0x58
 801b234:	4614      	mov	r4, r2
 801b236:	461d      	mov	r5, r3
 801b238:	da07      	bge.n	801b24a <__swhatbuf_r+0x22>
 801b23a:	2300      	movs	r3, #0
 801b23c:	602b      	str	r3, [r5, #0]
 801b23e:	89b3      	ldrh	r3, [r6, #12]
 801b240:	061a      	lsls	r2, r3, #24
 801b242:	d410      	bmi.n	801b266 <__swhatbuf_r+0x3e>
 801b244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b248:	e00e      	b.n	801b268 <__swhatbuf_r+0x40>
 801b24a:	466a      	mov	r2, sp
 801b24c:	f000 f8a6 	bl	801b39c <_fstat_r>
 801b250:	2800      	cmp	r0, #0
 801b252:	dbf2      	blt.n	801b23a <__swhatbuf_r+0x12>
 801b254:	9a01      	ldr	r2, [sp, #4]
 801b256:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b25a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b25e:	425a      	negs	r2, r3
 801b260:	415a      	adcs	r2, r3
 801b262:	602a      	str	r2, [r5, #0]
 801b264:	e7ee      	b.n	801b244 <__swhatbuf_r+0x1c>
 801b266:	2340      	movs	r3, #64	; 0x40
 801b268:	2000      	movs	r0, #0
 801b26a:	6023      	str	r3, [r4, #0]
 801b26c:	b016      	add	sp, #88	; 0x58
 801b26e:	bd70      	pop	{r4, r5, r6, pc}

0801b270 <__smakebuf_r>:
 801b270:	898b      	ldrh	r3, [r1, #12]
 801b272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b274:	079d      	lsls	r5, r3, #30
 801b276:	4606      	mov	r6, r0
 801b278:	460c      	mov	r4, r1
 801b27a:	d507      	bpl.n	801b28c <__smakebuf_r+0x1c>
 801b27c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b280:	6023      	str	r3, [r4, #0]
 801b282:	6123      	str	r3, [r4, #16]
 801b284:	2301      	movs	r3, #1
 801b286:	6163      	str	r3, [r4, #20]
 801b288:	b002      	add	sp, #8
 801b28a:	bd70      	pop	{r4, r5, r6, pc}
 801b28c:	ab01      	add	r3, sp, #4
 801b28e:	466a      	mov	r2, sp
 801b290:	f7ff ffca 	bl	801b228 <__swhatbuf_r>
 801b294:	9900      	ldr	r1, [sp, #0]
 801b296:	4605      	mov	r5, r0
 801b298:	4630      	mov	r0, r6
 801b29a:	f7ff f881 	bl	801a3a0 <_malloc_r>
 801b29e:	b948      	cbnz	r0, 801b2b4 <__smakebuf_r+0x44>
 801b2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b2a4:	059a      	lsls	r2, r3, #22
 801b2a6:	d4ef      	bmi.n	801b288 <__smakebuf_r+0x18>
 801b2a8:	f023 0303 	bic.w	r3, r3, #3
 801b2ac:	f043 0302 	orr.w	r3, r3, #2
 801b2b0:	81a3      	strh	r3, [r4, #12]
 801b2b2:	e7e3      	b.n	801b27c <__smakebuf_r+0xc>
 801b2b4:	4b0d      	ldr	r3, [pc, #52]	; (801b2ec <__smakebuf_r+0x7c>)
 801b2b6:	62b3      	str	r3, [r6, #40]	; 0x28
 801b2b8:	89a3      	ldrh	r3, [r4, #12]
 801b2ba:	6020      	str	r0, [r4, #0]
 801b2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b2c0:	81a3      	strh	r3, [r4, #12]
 801b2c2:	9b00      	ldr	r3, [sp, #0]
 801b2c4:	6163      	str	r3, [r4, #20]
 801b2c6:	9b01      	ldr	r3, [sp, #4]
 801b2c8:	6120      	str	r0, [r4, #16]
 801b2ca:	b15b      	cbz	r3, 801b2e4 <__smakebuf_r+0x74>
 801b2cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2d0:	4630      	mov	r0, r6
 801b2d2:	f000 f875 	bl	801b3c0 <_isatty_r>
 801b2d6:	b128      	cbz	r0, 801b2e4 <__smakebuf_r+0x74>
 801b2d8:	89a3      	ldrh	r3, [r4, #12]
 801b2da:	f023 0303 	bic.w	r3, r3, #3
 801b2de:	f043 0301 	orr.w	r3, r3, #1
 801b2e2:	81a3      	strh	r3, [r4, #12]
 801b2e4:	89a0      	ldrh	r0, [r4, #12]
 801b2e6:	4305      	orrs	r5, r0
 801b2e8:	81a5      	strh	r5, [r4, #12]
 801b2ea:	e7cd      	b.n	801b288 <__smakebuf_r+0x18>
 801b2ec:	0801a5d5 	.word	0x0801a5d5

0801b2f0 <_read_r>:
 801b2f0:	b538      	push	{r3, r4, r5, lr}
 801b2f2:	4d07      	ldr	r5, [pc, #28]	; (801b310 <_read_r+0x20>)
 801b2f4:	4604      	mov	r4, r0
 801b2f6:	4608      	mov	r0, r1
 801b2f8:	4611      	mov	r1, r2
 801b2fa:	2200      	movs	r2, #0
 801b2fc:	602a      	str	r2, [r5, #0]
 801b2fe:	461a      	mov	r2, r3
 801b300:	f7e5 fc0e 	bl	8000b20 <_read>
 801b304:	1c43      	adds	r3, r0, #1
 801b306:	d102      	bne.n	801b30e <_read_r+0x1e>
 801b308:	682b      	ldr	r3, [r5, #0]
 801b30a:	b103      	cbz	r3, 801b30e <_read_r+0x1e>
 801b30c:	6023      	str	r3, [r4, #0]
 801b30e:	bd38      	pop	{r3, r4, r5, pc}
 801b310:	2000f3d8 	.word	0x2000f3d8

0801b314 <_raise_r>:
 801b314:	291f      	cmp	r1, #31
 801b316:	b538      	push	{r3, r4, r5, lr}
 801b318:	4604      	mov	r4, r0
 801b31a:	460d      	mov	r5, r1
 801b31c:	d904      	bls.n	801b328 <_raise_r+0x14>
 801b31e:	2316      	movs	r3, #22
 801b320:	6003      	str	r3, [r0, #0]
 801b322:	f04f 30ff 	mov.w	r0, #4294967295
 801b326:	bd38      	pop	{r3, r4, r5, pc}
 801b328:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b32a:	b112      	cbz	r2, 801b332 <_raise_r+0x1e>
 801b32c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b330:	b94b      	cbnz	r3, 801b346 <_raise_r+0x32>
 801b332:	4620      	mov	r0, r4
 801b334:	f000 f830 	bl	801b398 <_getpid_r>
 801b338:	462a      	mov	r2, r5
 801b33a:	4601      	mov	r1, r0
 801b33c:	4620      	mov	r0, r4
 801b33e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b342:	f000 b817 	b.w	801b374 <_kill_r>
 801b346:	2b01      	cmp	r3, #1
 801b348:	d00a      	beq.n	801b360 <_raise_r+0x4c>
 801b34a:	1c59      	adds	r1, r3, #1
 801b34c:	d103      	bne.n	801b356 <_raise_r+0x42>
 801b34e:	2316      	movs	r3, #22
 801b350:	6003      	str	r3, [r0, #0]
 801b352:	2001      	movs	r0, #1
 801b354:	e7e7      	b.n	801b326 <_raise_r+0x12>
 801b356:	2400      	movs	r4, #0
 801b358:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b35c:	4628      	mov	r0, r5
 801b35e:	4798      	blx	r3
 801b360:	2000      	movs	r0, #0
 801b362:	e7e0      	b.n	801b326 <_raise_r+0x12>

0801b364 <raise>:
 801b364:	4b02      	ldr	r3, [pc, #8]	; (801b370 <raise+0xc>)
 801b366:	4601      	mov	r1, r0
 801b368:	6818      	ldr	r0, [r3, #0]
 801b36a:	f7ff bfd3 	b.w	801b314 <_raise_r>
 801b36e:	bf00      	nop
 801b370:	20000040 	.word	0x20000040

0801b374 <_kill_r>:
 801b374:	b538      	push	{r3, r4, r5, lr}
 801b376:	4d07      	ldr	r5, [pc, #28]	; (801b394 <_kill_r+0x20>)
 801b378:	2300      	movs	r3, #0
 801b37a:	4604      	mov	r4, r0
 801b37c:	4608      	mov	r0, r1
 801b37e:	4611      	mov	r1, r2
 801b380:	602b      	str	r3, [r5, #0]
 801b382:	f7e5 fbb1 	bl	8000ae8 <_kill>
 801b386:	1c43      	adds	r3, r0, #1
 801b388:	d102      	bne.n	801b390 <_kill_r+0x1c>
 801b38a:	682b      	ldr	r3, [r5, #0]
 801b38c:	b103      	cbz	r3, 801b390 <_kill_r+0x1c>
 801b38e:	6023      	str	r3, [r4, #0]
 801b390:	bd38      	pop	{r3, r4, r5, pc}
 801b392:	bf00      	nop
 801b394:	2000f3d8 	.word	0x2000f3d8

0801b398 <_getpid_r>:
 801b398:	f7e5 bb9e 	b.w	8000ad8 <_getpid>

0801b39c <_fstat_r>:
 801b39c:	b538      	push	{r3, r4, r5, lr}
 801b39e:	4d07      	ldr	r5, [pc, #28]	; (801b3bc <_fstat_r+0x20>)
 801b3a0:	2300      	movs	r3, #0
 801b3a2:	4604      	mov	r4, r0
 801b3a4:	4608      	mov	r0, r1
 801b3a6:	4611      	mov	r1, r2
 801b3a8:	602b      	str	r3, [r5, #0]
 801b3aa:	f7e5 fc2d 	bl	8000c08 <_fstat>
 801b3ae:	1c43      	adds	r3, r0, #1
 801b3b0:	d102      	bne.n	801b3b8 <_fstat_r+0x1c>
 801b3b2:	682b      	ldr	r3, [r5, #0]
 801b3b4:	b103      	cbz	r3, 801b3b8 <_fstat_r+0x1c>
 801b3b6:	6023      	str	r3, [r4, #0]
 801b3b8:	bd38      	pop	{r3, r4, r5, pc}
 801b3ba:	bf00      	nop
 801b3bc:	2000f3d8 	.word	0x2000f3d8

0801b3c0 <_isatty_r>:
 801b3c0:	b538      	push	{r3, r4, r5, lr}
 801b3c2:	4d06      	ldr	r5, [pc, #24]	; (801b3dc <_isatty_r+0x1c>)
 801b3c4:	2300      	movs	r3, #0
 801b3c6:	4604      	mov	r4, r0
 801b3c8:	4608      	mov	r0, r1
 801b3ca:	602b      	str	r3, [r5, #0]
 801b3cc:	f7e5 fc2c 	bl	8000c28 <_isatty>
 801b3d0:	1c43      	adds	r3, r0, #1
 801b3d2:	d102      	bne.n	801b3da <_isatty_r+0x1a>
 801b3d4:	682b      	ldr	r3, [r5, #0]
 801b3d6:	b103      	cbz	r3, 801b3da <_isatty_r+0x1a>
 801b3d8:	6023      	str	r3, [r4, #0]
 801b3da:	bd38      	pop	{r3, r4, r5, pc}
 801b3dc:	2000f3d8 	.word	0x2000f3d8

0801b3e0 <_init>:
 801b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3e2:	bf00      	nop
 801b3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b3e6:	bc08      	pop	{r3}
 801b3e8:	469e      	mov	lr, r3
 801b3ea:	4770      	bx	lr

0801b3ec <_fini>:
 801b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3ee:	bf00      	nop
 801b3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b3f2:	bc08      	pop	{r3}
 801b3f4:	469e      	mov	lr, r3
 801b3f6:	4770      	bx	lr
