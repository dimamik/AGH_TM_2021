
nucleo-basic-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b82c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000385c  0801b9dc  0801b9dc  0002b9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f238  0801f238  0002f238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f240  0801f240  0002f240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f244  0801f244  0002f244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  20000000  0801f248  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000300a4  2**0
                  CONTENTS
  8 .bss          0000fa94  200000a4  200000a4  000300a4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000fb38  2000fb38  000300a4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005a19e  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000a7a6  00000000  00000000  0008a272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000027e0  00000000  00000000  00094a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000025c0  00000000  00000000  000971f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00038c7a  00000000  00000000  000997b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00041219  00000000  00000000  000d2432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00105f26  00000000  00000000  0011364b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00219571  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000ad48  00000000  00000000  002195c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801b9c4 	.word	0x0801b9c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	0801b9c4 	.word	0x0801b9c4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <__io_putchar>:


#ifdef STM32F429xx
	int __io_putchar(int ch)

	{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
		while(__HAL_UART_GET_FLAG(pUart, UART_FLAG_TXE) == RESET) { ; }
 8000590:	bf00      	nop
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <__io_putchar+0x34>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059e:	2b80      	cmp	r3, #128	; 0x80
 80005a0:	d1f7      	bne.n	8000592 <__io_putchar+0xa>
		pUart->Instance->DR = (uint16_t)ch;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <__io_putchar+0x34>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
		return 0;
 80005ae:	2300      	movs	r3, #0
	}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	200000c0 	.word	0x200000c0

080005c0 <debug_init>:

#endif


void debug_init(UART_HandleTypeDef* handler)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	pUart = handler;
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <debug_init+0x1c>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6013      	str	r3, [r2, #0]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000c0 	.word	0x200000c0

080005e0 <debug_chr>:

extern char inkey(void);

//send chr via UART (platform dependent)
void debug_chr(char chr)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	__io_putchar(chr);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffcb 	bl	8000588 <__io_putchar>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <vApplicationGetIdleTaskMemory+0x2c>)
 800060c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <vApplicationGetIdleTaskMemory+0x30>)
 8000612:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	200000c4 	.word	0x200000c4
 800062c:	20000178 	.word	0x20000178

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fcf1 	bl	800101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f82d 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f8bf 	bl	80007c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000642:	f000 f893 	bl	800076c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000646:	f006 f849 	bl	80066dc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  debug_init(&huart3);
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <main+0x54>)
 800064c:	f7ff ffb8 	bl	80005c0 <debug_init>
  xprintf(ANSI_BG_BLUE "Nucleo-144 project" ANSI_BG_DEFAULT "\n");
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <main+0x58>)
 8000652:	f000 fc27 	bl	8000ea4 <xprintf>
  printf("Zwykly printf tez dziala\n");
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <main+0x5c>)
 8000658:	f01a faa2 	bl	801aba0 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <main+0x60>)
 800065e:	1d3c      	adds	r4, r7, #4
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f00a fbbc 	bl	800adf0 <osThreadCreate>
 8000678:	4603      	mov	r3, r0
 800067a:	4a06      	ldr	r2, [pc, #24]	; (8000694 <main+0x64>)
 800067c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800067e:	f00a fba0 	bl	800adc2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000682:	e7fe      	b.n	8000682 <main+0x52>
 8000684:	2000868c 	.word	0x2000868c
 8000688:	0801b9e8 	.word	0x0801b9e8
 800068c:	0801ba0c 	.word	0x0801ba0c
 8000690:	0801ba28 	.word	0x0801ba28
 8000694:	20008688 	.word	0x20008688

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f01a f92c 	bl	801a904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	; (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800070c:	23a8      	movs	r3, #168	; 0xa8
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f003 febb 	bl	8004498 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 f92a 	bl	8000980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2105      	movs	r1, #5
 800074a:	4618      	mov	r0, r3
 800074c:	f004 f91c 	bl	8004988 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 f913 	bl	8000980 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <MX_USART3_UART_Init+0x50>)
 8000774:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 80007a4:	f004 fdcc 	bl	8005340 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007ae:	f000 f8e7 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000868c 	.word	0x2000868c
 80007bc:	40004800 	.word	0x40004800

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	4b4c      	ldr	r3, [pc, #304]	; (800090c <MX_GPIO_Init+0x14c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a4b      	ldr	r2, [pc, #300]	; (800090c <MX_GPIO_Init+0x14c>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b49      	ldr	r3, [pc, #292]	; (800090c <MX_GPIO_Init+0x14c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	4b45      	ldr	r3, [pc, #276]	; (800090c <MX_GPIO_Init+0x14c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a44      	ldr	r2, [pc, #272]	; (800090c <MX_GPIO_Init+0x14c>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b42      	ldr	r3, [pc, #264]	; (800090c <MX_GPIO_Init+0x14c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b3e      	ldr	r3, [pc, #248]	; (800090c <MX_GPIO_Init+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a3d      	ldr	r2, [pc, #244]	; (800090c <MX_GPIO_Init+0x14c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b3b      	ldr	r3, [pc, #236]	; (800090c <MX_GPIO_Init+0x14c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b37      	ldr	r3, [pc, #220]	; (800090c <MX_GPIO_Init+0x14c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a36      	ldr	r2, [pc, #216]	; (800090c <MX_GPIO_Init+0x14c>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b34      	ldr	r3, [pc, #208]	; (800090c <MX_GPIO_Init+0x14c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b30      	ldr	r3, [pc, #192]	; (800090c <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a2f      	ldr	r2, [pc, #188]	; (800090c <MX_GPIO_Init+0x14c>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b29      	ldr	r3, [pc, #164]	; (800090c <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a28      	ldr	r2, [pc, #160]	; (800090c <MX_GPIO_Init+0x14c>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b26      	ldr	r3, [pc, #152]	; (800090c <MX_GPIO_Init+0x14c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f244 0181 	movw	r1, #16513	; 0x4081
 8000884:	4822      	ldr	r0, [pc, #136]	; (8000910 <MX_GPIO_Init+0x150>)
 8000886:	f002 f863 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2140      	movs	r1, #64	; 0x40
 800088e:	4821      	ldr	r0, [pc, #132]	; (8000914 <MX_GPIO_Init+0x154>)
 8000890:	f002 f85e 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	481b      	ldr	r0, [pc, #108]	; (8000918 <MX_GPIO_Init+0x158>)
 80008ac:	f001 fea4 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008b0:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <MX_GPIO_Init+0x150>)
 80008ca:	f001 fe95 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ce:	2340      	movs	r3, #64	; 0x40
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <MX_GPIO_Init+0x154>)
 80008e6:	f001 fe87 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_GPIO_Init+0x154>)
 80008fe:	f001 fe7b 	bl	80025f8 <HAL_GPIO_Init>

}
 8000902:	bf00      	nop
 8000904:	3730      	adds	r7, #48	; 0x30
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40020400 	.word	0x40020400
 8000914:	40021800 	.word	0x40021800
 8000918:	40020800 	.word	0x40020800

0800091c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000924:	f006 f822 	bl	800696c <MX_LWIP_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000928:	f019 fb6c 	bl	801a004 <MX_USB_HOST_Init>
  for(;;)
  {
// LED

//LD3 zmieni stan (toggle)
    HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800092c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000930:	4809      	ldr	r0, [pc, #36]	; (8000958 <StartDefaultTask+0x3c>)
 8000932:	f002 f826 	bl	8002982 <HAL_GPIO_TogglePin>
    //LD2 wlaczona, czekamy 250 tickow i wylaczamy
    HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <StartDefaultTask+0x3c>)
 800093c:	f002 f808 	bl	8002950 <HAL_GPIO_WritePin>
          osDelay(250);
 8000940:	20fa      	movs	r0, #250	; 0xfa
 8000942:	f00a faa1 	bl	800ae88 <osDelay>
    HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	4803      	ldr	r0, [pc, #12]	; (8000958 <StartDefaultTask+0x3c>)
 800094c:	f002 f800 	bl	8002950 <HAL_GPIO_WritePin>
          osDelay(250);
 8000950:	20fa      	movs	r0, #250	; 0xfa
 8000952:	f00a fa99 	bl	800ae88 <osDelay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8000956:	e7e9      	b.n	800092c <StartDefaultTask+0x10>
 8000958:	40020400 	.word	0x40020400

0800095c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d101      	bne.n	8000972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800096e:	f000 fb77 	bl	8001060 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40001000 	.word	0x40001000

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_MspInit+0x54>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a11      	ldr	r2, [pc, #68]	; (80009e0 <HAL_MspInit+0x54>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_MspInit+0x54>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_MspInit+0x54>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_MspInit+0x54>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_MspInit+0x54>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	210f      	movs	r1, #15
 80009ce:	f06f 0001 	mvn.w	r0, #1
 80009d2:	f000 fc41 	bl	8001258 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_UART_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12c      	bne.n	8000a60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a50:	2307      	movs	r3, #7
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <HAL_UART_MspInit+0x8c>)
 8000a5c:	f001 fdcc 	bl	80025f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40004800 	.word	0x40004800
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020c00 	.word	0x40020c00

08000a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	2036      	movs	r0, #54	; 0x36
 8000a8a:	f000 fbe5 	bl	8001258 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a8e:	2036      	movs	r0, #54	; 0x36
 8000a90:	f000 fbfe 	bl	8001290 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <HAL_InitTick+0xa4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a1e      	ldr	r2, [pc, #120]	; (8000b18 <HAL_InitTick+0xa4>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <HAL_InitTick+0xa4>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab0:	f107 0210 	add.w	r2, r7, #16
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f004 f960 	bl	8004d80 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ac0:	f004 f936 	bl	8004d30 <HAL_RCC_GetPCLK1Freq>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <HAL_InitTick+0xa8>)
 8000ace:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad2:	0c9b      	lsrs	r3, r3, #18
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_InitTick+0xac>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <HAL_InitTick+0xb0>)
 8000adc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_InitTick+0xac>)
 8000ae0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ae4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_InitTick+0xac>)
 8000ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_InitTick+0xac>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_InitTick+0xac>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <HAL_InitTick+0xac>)
 8000afa:	f004 f973 	bl	8004de4 <HAL_TIM_Base_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d104      	bne.n	8000b0e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b04:	4806      	ldr	r0, [pc, #24]	; (8000b20 <HAL_InitTick+0xac>)
 8000b06:	f004 f9c7 	bl	8004e98 <HAL_TIM_Base_Start_IT>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3730      	adds	r7, #48	; 0x30
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	431bde83 	.word	0x431bde83
 8000b20:	200086d0 	.word	0x200086d0
 8000b24:	40001000 	.word	0x40001000

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <TIM6_DAC_IRQHandler+0x10>)
 8000b5a:	f004 fa0d 	bl	8004f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200086d0 	.word	0x200086d0

08000b68 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <ETH_IRQHandler+0x10>)
 8000b6e:	f000 ff81 	bl	8001a74 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000a4a8 	.word	0x2000a4a8

08000b7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <OTG_FS_IRQHandler+0x10>)
 8000b82:	f002 f983 	bl	8002e8c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000f828 	.word	0x2000f828

08000b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
	return 1;
 8000b94:	2301      	movs	r3, #1
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_kill>:

int _kill(int pid, int sig)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <_kill+0x20>)
 8000bac:	2216      	movs	r2, #22
 8000bae:	601a      	str	r2, [r3, #0]
	return -1;
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	2000f43c 	.word	0x2000f43c

08000bc4 <_exit>:

void _exit (int status)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ffe5 	bl	8000ba0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bd6:	e7fe      	b.n	8000bd6 <_exit+0x12>

08000bd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	e00a      	b.n	8000c00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bea:	f3af 8000 	nop.w
 8000bee:	4601      	mov	r1, r0
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	60ba      	str	r2, [r7, #8]
 8000bf6:	b2ca      	uxtb	r2, r1
 8000bf8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbf0      	blt.n	8000bea <_read+0x12>
	}

return len;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	60f8      	str	r0, [r7, #12]
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	e009      	b.n	8000c38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	60ba      	str	r2, [r7, #8]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fcab 	bl	8000588 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	3301      	adds	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dbf1      	blt.n	8000c24 <_write+0x12>
	}
	return len;
 8000c40:	687b      	ldr	r3, [r7, #4]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <_sbrk+0x50>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x16>
		heap_end = &end;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <_sbrk+0x50>)
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <_sbrk+0x54>)
 8000c60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <_sbrk+0x50>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <_sbrk+0x50>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4413      	add	r3, r2
 8000c70:	466a      	mov	r2, sp
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d905      	bls.n	8000c82 <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <_sbrk+0x58>)
 8000c78:	220c      	movs	r2, #12
 8000c7a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	e006      	b.n	8000c90 <_sbrk+0x44>
	}

	heap_end += incr;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <_sbrk+0x50>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <_sbrk+0x50>)
 8000c8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	20000378 	.word	0x20000378
 8000ca0:	2000fb38 	.word	0x2000fb38
 8000ca4:	2000f43c 	.word	0x2000f43c

08000ca8 <_close>:

int _close(int file)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	return -1;
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd0:	605a      	str	r2, [r3, #4]
	return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_isatty>:

int _isatty(int file)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	return 1;
 8000ce8:	2301      	movs	r3, #1
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b085      	sub	sp, #20
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
	return 0;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <SystemInit+0x20>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <SystemInit+0x20>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <xputc>:




void xputc (char c)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	debug_chr(c);
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fc4d 	bl	80005e0 <debug_chr>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <xputs>:




void xputs (const char* str)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
	while (*str)
 8000d56:	e006      	b.n	8000d66 <xputs+0x18>
		xputc(*str++);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ffe7 	bl	8000d34 <xputc>
	while (*str)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1f4      	bne.n	8000d58 <xputs+0xa>
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <xitoa>:




void xitoa (long val, int radix, int len)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
	uint8_t c, r, sgn = 0, pad = ' ';
 8000d84:	2300      	movs	r3, #0
 8000d86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t s[20], i = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint32_t v;


	if (radix < 0) {
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	da0b      	bge.n	8000db4 <xitoa+0x3c>
		radix = -radix;
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	425b      	negs	r3, r3
 8000da0:	60bb      	str	r3, [r7, #8]
		if (val < 0) {
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	da05      	bge.n	8000db4 <xitoa+0x3c>
			val = -val;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	425b      	negs	r3, r3
 8000dac:	60fb      	str	r3, [r7, #12]
			sgn = '-';
 8000dae:	232d      	movs	r3, #45	; 0x2d
 8000db0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}
	}
	v = val;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
	r = radix;
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (len < 0) {
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	da05      	bge.n	8000dd0 <xitoa+0x58>
		len = -len;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	607b      	str	r3, [r7, #4]
		pad = '0';
 8000dca:	2330      	movs	r3, #48	; 0x30
 8000dcc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	}
	if (len > 20) return;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b14      	cmp	r3, #20
 8000dd4:	dc62      	bgt.n	8000e9c <xitoa+0x124>
	do {
		c = (uint8_t)(v % r);
 8000dd6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000de0:	fb02 f201 	mul.w	r2, r2, r1
 8000de4:	1a9b      	subs	r3, r3, r2
 8000de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c >= 10) c += 7;
 8000dea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dee:	2b09      	cmp	r3, #9
 8000df0:	d904      	bls.n	8000dfc <xitoa+0x84>
 8000df2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000df6:	3307      	adds	r3, #7
 8000df8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		c += '0';
 8000dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e00:	3330      	adds	r3, #48	; 0x30
 8000e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		s[i++] = c;
 8000e06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8000e10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e14:	4413      	add	r3, r2
 8000e16:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000e1a:	f803 2c20 	strb.w	r2, [r3, #-32]
		v /= r;
 8000e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
	} while (v);
 8000e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1d2      	bne.n	8000dd6 <xitoa+0x5e>
	if (sgn) s[i++] = sgn;
 8000e30:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d018      	beq.n	8000e6a <xitoa+0xf2>
 8000e38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e3c:	1c5a      	adds	r2, r3, #1
 8000e3e:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8000e42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e46:	4413      	add	r3, r2
 8000e48:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000e4c:	f803 2c20 	strb.w	r2, [r3, #-32]
	while (i < len)
 8000e50:	e00b      	b.n	8000e6a <xitoa+0xf2>
		s[i++] = pad;
 8000e52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8000e5c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e60:	4413      	add	r3, r2
 8000e62:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000e66:	f803 2c20 	strb.w	r2, [r3, #-32]
	while (i < len)
 8000e6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dcee      	bgt.n	8000e52 <xitoa+0xda>
	do
		xputc(s[--i]);
 8000e74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000e7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e86:	4413      	add	r3, r2
 8000e88:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff51 	bl	8000d34 <xputc>
	while (i);
 8000e92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1ec      	bne.n	8000e74 <xitoa+0xfc>
 8000e9a:	e000      	b.n	8000e9e <xitoa+0x126>
	if (len > 20) return;
 8000e9c:	bf00      	nop
}
 8000e9e:	3730      	adds	r7, #48	; 0x30
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <xprintf>:

void xprintf (const char* str, ...)
{
 8000ea4:	b40f      	push	{r0, r1, r2, r3}
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
	va_list arp;
	int d, r, w, s, l;


	va_start(arp, str);
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	603b      	str	r3, [r7, #0]

	while ((d = *str++) != 0) {
 8000eb2:	e09f      	b.n	8000ff4 <xprintf+0x150>
		if (d != '%') {
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	2b25      	cmp	r3, #37	; 0x25
 8000eb8:	d005      	beq.n	8000ec6 <xprintf+0x22>
			xputc(d); continue;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff38 	bl	8000d34 <xputc>
 8000ec4:	e096      	b.n	8000ff4 <xprintf+0x150>
		}
		d = *str++; w = r = s = l = 0;
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
 8000ec8:	1c5a      	adds	r2, r3, #1
 8000eca:	623a      	str	r2, [r7, #32]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	60fb      	str	r3, [r7, #12]
		if (d == '0') {
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	2b30      	cmp	r3, #48	; 0x30
 8000ee4:	d118      	bne.n	8000f18 <xprintf+0x74>
			d = *str++; s = 1;
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
 8000ee8:	1c5a      	adds	r2, r3, #1
 8000eea:	623a      	str	r2, [r7, #32]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
		}
		while ((d >= '0')&&(d <= '9')) {
 8000ef4:	e010      	b.n	8000f18 <xprintf+0x74>
			w += w * 10 + (d - '0');
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	461a      	mov	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3b30      	subs	r3, #48	; 0x30
 8000f06:	4413      	add	r3, r2
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
			d = *str++;
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	623a      	str	r2, [r7, #32]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	617b      	str	r3, [r7, #20]
		while ((d >= '0')&&(d <= '9')) {
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	2b2f      	cmp	r3, #47	; 0x2f
 8000f1c:	dd02      	ble.n	8000f24 <xprintf+0x80>
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	2b39      	cmp	r3, #57	; 0x39
 8000f22:	dde8      	ble.n	8000ef6 <xprintf+0x52>
		}
		if (s) w = -w;
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d002      	beq.n	8000f30 <xprintf+0x8c>
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	425b      	negs	r3, r3
 8000f2e:	60fb      	str	r3, [r7, #12]
		if (d == 'l') {
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	2b6c      	cmp	r3, #108	; 0x6c
 8000f34:	d106      	bne.n	8000f44 <xprintf+0xa0>
			l = 1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	607b      	str	r3, [r7, #4]
			d = *str++;
 8000f3a:	6a3b      	ldr	r3, [r7, #32]
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	623a      	str	r2, [r7, #32]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	617b      	str	r3, [r7, #20]
		}
		if (!d) break;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d05e      	beq.n	8001008 <xprintf+0x164>
		if (d == 's') {
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2b73      	cmp	r3, #115	; 0x73
 8000f4e:	d107      	bne.n	8000f60 <xprintf+0xbc>
			xputs(va_arg(arp, char*));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	1d1a      	adds	r2, r3, #4
 8000f54:	603a      	str	r2, [r7, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fef8 	bl	8000d4e <xputs>
			continue;
 8000f5e:	e049      	b.n	8000ff4 <xprintf+0x150>
		}
		if (d == 'c') {
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	2b63      	cmp	r3, #99	; 0x63
 8000f64:	d108      	bne.n	8000f78 <xprintf+0xd4>
			xputc((char)va_arg(arp, int));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	1d1a      	adds	r2, r3, #4
 8000f6a:	603a      	str	r2, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fedf 	bl	8000d34 <xputc>
			continue;
 8000f76:	e03d      	b.n	8000ff4 <xprintf+0x150>
		}
		if (d == 'u') r = 10;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	2b75      	cmp	r3, #117	; 0x75
 8000f7c:	d101      	bne.n	8000f82 <xprintf+0xde>
 8000f7e:	230a      	movs	r3, #10
 8000f80:	613b      	str	r3, [r7, #16]
		if (d == 'd') r = -10;
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2b64      	cmp	r3, #100	; 0x64
 8000f86:	d102      	bne.n	8000f8e <xprintf+0xea>
 8000f88:	f06f 0309 	mvn.w	r3, #9
 8000f8c:	613b      	str	r3, [r7, #16]
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2b58      	cmp	r3, #88	; 0x58
 8000f92:	d002      	beq.n	8000f9a <xprintf+0xf6>
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2b78      	cmp	r3, #120	; 0x78
 8000f98:	d101      	bne.n	8000f9e <xprintf+0xfa>
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	613b      	str	r3, [r7, #16]
		if (d == 'b') r = 2;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2b62      	cmp	r3, #98	; 0x62
 8000fa2:	d101      	bne.n	8000fa8 <xprintf+0x104>
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	613b      	str	r3, [r7, #16]
		if (!r) break;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d02e      	beq.n	800100c <xprintf+0x168>
		if (l) {
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d009      	beq.n	8000fc8 <xprintf+0x124>
			xitoa((long)va_arg(arp, long), r, w);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	1d1a      	adds	r2, r3, #4
 8000fb8:	603a      	str	r2, [r7, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	6939      	ldr	r1, [r7, #16]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fed9 	bl	8000d78 <xitoa>
 8000fc6:	e015      	b.n	8000ff4 <xprintf+0x150>
		} else {
			if (r > 0)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	dd09      	ble.n	8000fe2 <xprintf+0x13e>
				xitoa((unsigned long)va_arg(arp, int), r, w);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	1d1a      	adds	r2, r3, #4
 8000fd2:	603a      	str	r2, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	6939      	ldr	r1, [r7, #16]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fecc 	bl	8000d78 <xitoa>
 8000fe0:	e008      	b.n	8000ff4 <xprintf+0x150>
			else
				xitoa((long)va_arg(arp, int), r, w);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	1d1a      	adds	r2, r3, #4
 8000fe6:	603a      	str	r2, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	6939      	ldr	r1, [r7, #16]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fec2 	bl	8000d78 <xitoa>
	while ((d = *str++) != 0) {
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	623a      	str	r2, [r7, #32]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2b00      	cmp	r3, #0
 8001002:	f47f af57 	bne.w	8000eb4 <xprintf+0x10>
		}
	}

	va_end(arp);
}
 8001006:	e002      	b.n	800100e <xprintf+0x16a>
		if (!d) break;
 8001008:	bf00      	nop
 800100a:	e000      	b.n	800100e <xprintf+0x16a>
		if (!r) break;
 800100c:	bf00      	nop
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001018:	b004      	add	sp, #16
 800101a:	4770      	bx	lr

0800101c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <HAL_Init+0x40>)
 8001026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_Init+0x40>)
 8001032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_Init+0x40>)
 800103e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 f8fc 	bl	8001242 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104a:	200f      	movs	r0, #15
 800104c:	f7ff fd12 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001050:	f7ff fc9c 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023c00 	.word	0x40023c00

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x20>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x24>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_IncTick+0x24>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008
 8001084:	20008718 	.word	0x20008718

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <HAL_GetTick+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20008718 	.word	0x20008718

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff ffee 	bl	8001088 <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_Delay+0x44>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffde 	bl	8001088 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4907      	ldr	r1, [pc, #28]	; (8001184 <__NVIC_EnableIRQ+0x38>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff4c 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126a:	f7ff ff61 	bl	8001130 <__NVIC_GetPriorityGrouping>
 800126e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	6978      	ldr	r0, [r7, #20]
 8001276:	f7ff ffb1 	bl	80011dc <NVIC_EncodePriority>
 800127a:	4602      	mov	r2, r0
 800127c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff80 	bl	8001188 <__NVIC_SetPriority>
}
 8001288:	bf00      	nop
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff54 	bl	800114c <__NVIC_EnableIRQ>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80012bc:	4baa      	ldr	r3, [pc, #680]	; (8001568 <HAL_ETH_Init+0x2bc>)
 80012be:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e183      	b.n	80015da <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d106      	bne.n	80012ec <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f005 fbb0 	bl	8006a4c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	4b9e      	ldr	r3, [pc, #632]	; (800156c <HAL_ETH_Init+0x2c0>)
 80012f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f4:	4a9d      	ldr	r2, [pc, #628]	; (800156c <HAL_ETH_Init+0x2c0>)
 80012f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fa:	6453      	str	r3, [r2, #68]	; 0x44
 80012fc:	4b9b      	ldr	r3, [pc, #620]	; (800156c <HAL_ETH_Init+0x2c0>)
 80012fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001308:	4b99      	ldr	r3, [pc, #612]	; (8001570 <HAL_ETH_Init+0x2c4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4a98      	ldr	r2, [pc, #608]	; (8001570 <HAL_ETH_Init+0x2c4>)
 800130e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001312:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001314:	4b96      	ldr	r3, [pc, #600]	; (8001570 <HAL_ETH_Init+0x2c4>)
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4994      	ldr	r1, [pc, #592]	; (8001570 <HAL_ETH_Init+0x2c4>)
 800131e:	4313      	orrs	r3, r2
 8001320:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f042 0201 	orr.w	r2, r2, #1
 8001334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001338:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800133a:	f7ff fea5 	bl	8001088 <HAL_GetTick>
 800133e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001340:	e011      	b.n	8001366 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001342:	f7ff fea1 	bl	8001088 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001350:	d909      	bls.n	8001366 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2203      	movs	r2, #3
 8001356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e139      	b.n	80015da <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1e4      	bne.n	8001342 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f023 031c 	bic.w	r3, r3, #28
 8001386:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001388:	f003 fcc6 	bl	8004d18 <HAL_RCC_GetHCLKFreq>
 800138c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4a78      	ldr	r2, [pc, #480]	; (8001574 <HAL_ETH_Init+0x2c8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d908      	bls.n	80013a8 <HAL_ETH_Init+0xfc>
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4a77      	ldr	r2, [pc, #476]	; (8001578 <HAL_ETH_Init+0x2cc>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d804      	bhi.n	80013a8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	e027      	b.n	80013f8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	4a73      	ldr	r2, [pc, #460]	; (8001578 <HAL_ETH_Init+0x2cc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d908      	bls.n	80013c2 <HAL_ETH_Init+0x116>
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	4a6d      	ldr	r2, [pc, #436]	; (8001568 <HAL_ETH_Init+0x2bc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d204      	bcs.n	80013c2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f043 030c 	orr.w	r3, r3, #12
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	e01a      	b.n	80013f8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	4a68      	ldr	r2, [pc, #416]	; (8001568 <HAL_ETH_Init+0x2bc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d303      	bcc.n	80013d2 <HAL_ETH_Init+0x126>
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4a6b      	ldr	r2, [pc, #428]	; (800157c <HAL_ETH_Init+0x2d0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d911      	bls.n	80013f6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4a69      	ldr	r2, [pc, #420]	; (800157c <HAL_ETH_Init+0x2d0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d908      	bls.n	80013ec <HAL_ETH_Init+0x140>
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4a68      	ldr	r2, [pc, #416]	; (8001580 <HAL_ETH_Init+0x2d4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d804      	bhi.n	80013ec <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	e005      	b.n	80013f8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	e000      	b.n	80013f8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80013f6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001400:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001404:	2100      	movs	r1, #0
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fc17 	bl	8001c3a <HAL_ETH_WritePHYRegister>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00b      	beq.n	800142a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001416:	6939      	ldr	r1, [r7, #16]
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fdcd 	bl	8001fb8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0d7      	b.n	80015da <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800142a:	20ff      	movs	r0, #255	; 0xff
 800142c:	f7ff fe38 	bl	80010a0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80a5 	beq.w	8001584 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800143a:	f7ff fe25 	bl	8001088 <HAL_GetTick>
 800143e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	461a      	mov	r2, r3
 8001446:	2101      	movs	r1, #1
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 fb8e 	bl	8001b6a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800144e:	f7ff fe1b 	bl	8001088 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f241 3288 	movw	r2, #5000	; 0x1388
 800145c:	4293      	cmp	r3, r2
 800145e:	d90f      	bls.n	8001480 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001464:	6939      	ldr	r1, [r7, #16]
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 fda6 	bl	8001fb8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e0ac      	b.n	80015da <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0da      	beq.n	8001440 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800148a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800148e:	2100      	movs	r1, #0
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 fbd2 	bl	8001c3a <HAL_ETH_WritePHYRegister>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00b      	beq.n	80014b4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014a0:	6939      	ldr	r1, [r7, #16]
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fd88 	bl	8001fb8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014b0:	2301      	movs	r3, #1
 80014b2:	e092      	b.n	80015da <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80014b4:	f7ff fde8 	bl	8001088 <HAL_GetTick>
 80014b8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	461a      	mov	r2, r3
 80014c0:	2101      	movs	r1, #1
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 fb51 	bl	8001b6a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80014c8:	f7ff fdde 	bl	8001088 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d90f      	bls.n	80014fa <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014de:	6939      	ldr	r1, [r7, #16]
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fd69 	bl	8001fb8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e06f      	b.n	80015da <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f003 0320 	and.w	r3, r3, #32
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0da      	beq.n	80014ba <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	461a      	mov	r2, r3
 800150a:	2110      	movs	r1, #16
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 fb2c 	bl	8001b6a <HAL_ETH_ReadPHYRegister>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00b      	beq.n	8001530 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800151c:	6939      	ldr	r1, [r7, #16]
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fd4a 	bl	8001fb8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800152c:	2301      	movs	r3, #1
 800152e:	e054      	b.n	80015da <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d004      	beq.n	8001544 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	e002      	b.n	800154a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	e035      	b.n	80015c8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	e030      	b.n	80015c8 <HAL_ETH_Init+0x31c>
 8001566:	bf00      	nop
 8001568:	03938700 	.word	0x03938700
 800156c:	40023800 	.word	0x40023800
 8001570:	40013800 	.word	0x40013800
 8001574:	01312cff 	.word	0x01312cff
 8001578:	02160ebf 	.word	0x02160ebf
 800157c:	05f5e0ff 	.word	0x05f5e0ff
 8001580:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001594:	4313      	orrs	r3, r2
 8001596:	b29b      	uxth	r3, r3
 8001598:	461a      	mov	r2, r3
 800159a:	2100      	movs	r1, #0
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fb4c 	bl	8001c3a <HAL_ETH_WritePHYRegister>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00b      	beq.n	80015c0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015ac:	6939      	ldr	r1, [r7, #16]
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 fd02 	bl	8001fb8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e00c      	b.n	80015da <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80015c0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80015c4:	f7ff fd6c 	bl	80010a0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80015c8:	6939      	ldr	r1, [r7, #16]
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 fcf4 	bl	8001fb8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop

080015e4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_ETH_DMATxDescListInit+0x20>
 8001600:	2302      	movs	r3, #2
 8001602:	e052      	b.n	80016aa <HAL_ETH_DMATxDescListInit+0xc6>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2202      	movs	r2, #2
 8001610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e030      	b.n	8001682 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	015b      	lsls	r3, r3, #5
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	4413      	add	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001630:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001638:	fb02 f303 	mul.w	r3, r2, r3
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	461a      	mov	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d105      	bne.n	800165a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	429a      	cmp	r2, r3
 8001662:	d208      	bcs.n	8001676 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3301      	adds	r3, #1
 8001668:	015b      	lsls	r3, r3, #5
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	4413      	add	r3, r2
 800166e:	461a      	mov	r2, r3
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	e002      	b.n	800167c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d3ca      	bcc.n	8001620 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001694:	3310      	adds	r3, #16
 8001696:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b087      	sub	sp, #28
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_ETH_DMARxDescListInit+0x20>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e056      	b.n	8001784 <HAL_ETH_DMARxDescListInit+0xce>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2202      	movs	r2, #2
 80016e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e034      	b.n	800175c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	015b      	lsls	r3, r3, #5
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	4413      	add	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001702:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800170a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	461a      	mov	r2, r3
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3b01      	subs	r3, #1
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	429a      	cmp	r2, r3
 800173c:	d208      	bcs.n	8001750 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	015b      	lsls	r3, r3, #5
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	4413      	add	r3, r2
 8001748:	461a      	mov	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	e002      	b.n	8001756 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3301      	adds	r3, #1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d3c6      	bcc.n	80016f2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176e:	330c      	adds	r3, #12
 8001770:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_ETH_TransmitFrame+0x24>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e0cd      	b.n	8001950 <HAL_ETH_TransmitFrame+0x1c0>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80017da:	2301      	movs	r3, #1
 80017dc:	e0b8      	b.n	8001950 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da09      	bge.n	80017fc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2212      	movs	r2, #18
 80017ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0a9      	b.n	8001950 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001802:	4293      	cmp	r3, r2
 8001804:	d915      	bls.n	8001832 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	4a54      	ldr	r2, [pc, #336]	; (800195c <HAL_ETH_TransmitFrame+0x1cc>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	0a9b      	lsrs	r3, r3, #10
 8001810:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	4b51      	ldr	r3, [pc, #324]	; (800195c <HAL_ETH_TransmitFrame+0x1cc>)
 8001816:	fba3 1302 	umull	r1, r3, r3, r2
 800181a:	0a9b      	lsrs	r3, r3, #10
 800181c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e001      	b.n	8001836 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001832:	2301      	movs	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d11c      	bne.n	8001876 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800184a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001856:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001866:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	461a      	mov	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
 8001874:	e04b      	b.n	800190e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	e044      	b.n	8001906 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800188a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d107      	bne.n	80018a2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018a0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018aa:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d116      	bne.n	80018e4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80018c4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	4a25      	ldr	r2, [pc, #148]	; (8001960 <HAL_ETH_TransmitFrame+0x1d0>)
 80018ca:	fb02 f203 	mul.w	r2, r2, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80018d6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018e2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018f2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	3301      	adds	r3, #1
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	429a      	cmp	r2, r3
 800190c:	d3b6      	bcc.n	800187c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001916:	3314      	adds	r3, #20
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00d      	beq.n	800193e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192a:	3314      	adds	r3, #20
 800192c:	2204      	movs	r2, #4
 800192e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001938:	3304      	adds	r3, #4
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	ac02b00b 	.word	0xac02b00b
 8001960:	fffffa0c 	.word	0xfffffa0c

08001964 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800197a:	2302      	movs	r3, #2
 800197c:	e074      	b.n	8001a68 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2202      	movs	r2, #2
 800198a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800198e:	e05a      	b.n	8001a46 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a4:	d10d      	bne.n	80019c2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
 80019c0:	e041      	b.n	8001a46 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10b      	bne.n	80019e8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	461a      	mov	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	629a      	str	r2, [r3, #40]	; 0x28
 80019e6:	e02e      	b.n	8001a46 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d103      	bne.n	8001a0a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a16:	1f1a      	subs	r2, r3, #4
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e010      	b.n	8001a68 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	db02      	blt.n	8001a56 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d99c      	bls.n	8001990 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a84:	3314      	adds	r3, #20
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8c:	2b40      	cmp	r3, #64	; 0x40
 8001a8e:	d112      	bne.n	8001ab6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f005 f8a9 	bl	8006be8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9e:	3314      	adds	r3, #20
 8001aa0:	2240      	movs	r2, #64	; 0x40
 8001aa2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ab4:	e01b      	b.n	8001aee <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001abe:	3314      	adds	r3, #20
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d111      	bne.n	8001aee <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f839 	bl	8001b42 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad8:	3314      	adds	r3, #20
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af6:	3314      	adds	r3, #20
 8001af8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001afc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b06:	3314      	adds	r3, #20
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b12:	d112      	bne.n	8001b3a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f81e 	bl	8001b56 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b22:	3314      	adds	r3, #20
 8001b24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b28:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	460b      	mov	r3, r1
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b82      	cmp	r3, #130	; 0x82
 8001b8a:	d101      	bne.n	8001b90 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e050      	b.n	8001c32 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2282      	movs	r2, #130	; 0x82
 8001b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f003 031c 	and.w	r3, r3, #28
 8001ba6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8a1b      	ldrh	r3, [r3, #16]
 8001bac:	02db      	lsls	r3, r3, #11
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001bb6:	897b      	ldrh	r3, [r7, #10]
 8001bb8:	019b      	lsls	r3, r3, #6
 8001bba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f023 0302 	bic.w	r3, r3, #2
 8001bca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001bdc:	f7ff fa54 	bl	8001088 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001be2:	e015      	b.n	8001c10 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001be4:	f7ff fa50 	bl	8001088 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf2:	d309      	bcc.n	8001c08 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e014      	b.n	8001c32 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1e4      	bne.n	8001be4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	460b      	mov	r3, r1
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b42      	cmp	r3, #66	; 0x42
 8001c5a:	d101      	bne.n	8001c60 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e04e      	b.n	8001cfe <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2242      	movs	r2, #66	; 0x42
 8001c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 031c 	and.w	r3, r3, #28
 8001c76:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8a1b      	ldrh	r3, [r3, #16]
 8001c7c:	02db      	lsls	r3, r3, #11
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001c86:	897b      	ldrh	r3, [r7, #10]
 8001c88:	019b      	lsls	r3, r3, #6
 8001c8a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb6:	f7ff f9e7 	bl	8001088 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cbc:	e015      	b.n	8001cea <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001cbe:	f7ff f9e3 	bl	8001088 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ccc:	d309      	bcc.n	8001ce2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e00d      	b.n	8001cfe <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1e4      	bne.n	8001cbe <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_ETH_Start+0x16>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e01f      	b.n	8001d5c <HAL_ETH_Start+0x56>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fb45 	bl	80023bc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fb7c 	bl	8002430 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fc13 	bl	8002564 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fbb0 	bl	80024a4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fbdd 	bl	8002504 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_ETH_Stop+0x16>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e01f      	b.n	8001dba <HAL_ETH_Stop+0x56>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fba2 	bl	80024d4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fbcf 	bl	8002534 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fb67 	bl	800246a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fbe1 	bl	8002564 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fb27 	bl	80023f6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_ETH_ConfigMAC+0x1c>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e0e4      	b.n	8001faa <HAL_ETH_ConfigMAC+0x1e6>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80b1 	beq.w	8001f5a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4b6c      	ldr	r3, [pc, #432]	; (8001fb4 <HAL_ETH_ConfigMAC+0x1f0>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001e10:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001e16:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001e1c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001e22:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001e28:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001e2e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001e34:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001e3a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001e40:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001e46:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001e4c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001e52:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f7ff f918 	bl	80010a0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e80:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001e86:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001e8c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001e92:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001e98:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001e9e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001eaa:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001eac:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f7ff f8f2 	bl	80010a0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ecc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ed6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001ef4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001efa:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001f00:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001f06:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001f0c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f7ff f8bb 	bl	80010a0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f7ff f8a8 	bl	80010a0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	61da      	str	r2, [r3, #28]
 8001f58:	e01e      	b.n	8001f98 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001f68:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f7ff f888 	bl	80010a0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	ff20810f 	.word	0xff20810f

08001fb8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0b0      	sub	sp, #192	; 0xc0
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d103      	bne.n	8002006 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002002:	663b      	str	r3, [r7, #96]	; 0x60
 8002004:	e001      	b.n	800200a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800200a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800200e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002014:	2300      	movs	r3, #0
 8002016:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002024:	2340      	movs	r3, #64	; 0x40
 8002026:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800208c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002090:	4bac      	ldr	r3, [pc, #688]	; (8002344 <ETH_MACDMAConfig+0x38c>)
 8002092:	4013      	ands	r3, r2
 8002094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002098:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800209a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800209c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800209e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80020a0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80020a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80020a4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80020aa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80020ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80020ae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80020b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80020b2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80020b8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80020ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80020bc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80020be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80020c0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80020c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80020c4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80020c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80020c8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80020ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80020cc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80020ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7fe ffd7 	bl	80010a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020fa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80020fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002100:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002102:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002104:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002106:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800210a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800210c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002110:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002112:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002116:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002118:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800211c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002120:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002128:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800212a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002136:	2001      	movs	r0, #1
 8002138:	f7fe ffb2 	bl	80010a0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002144:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800214e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002158:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002164:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002168:	f64f 7341 	movw	r3, #65345	; 0xff41
 800216c:	4013      	ands	r3, r2
 800216e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002172:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002176:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002178:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800217c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800217e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002182:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002188:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800218a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800218e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002190:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002194:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002196:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021a8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b4:	2001      	movs	r0, #1
 80021b6:	f7fe ff73 	bl	80010a0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80021c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80021c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021de:	2001      	movs	r0, #1
 80021e0:	f7fe ff5e 	bl	80010a0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80021f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021f6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80021fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002200:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002212:	2304      	movs	r3, #4
 8002214:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800221c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800222c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002232:	2300      	movs	r3, #0
 8002234:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002236:	2300      	movs	r3, #0
 8002238:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002242:	3318      	adds	r3, #24
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800224a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800224e:	4b3e      	ldr	r3, [pc, #248]	; (8002348 <ETH_MACDMAConfig+0x390>)
 8002250:	4013      	ands	r3, r2
 8002252:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002256:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002258:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800225a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800225c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800225e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002260:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002262:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002264:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002266:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002268:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800226a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800226c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800226e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002272:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002274:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002276:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002278:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228a:	3318      	adds	r3, #24
 800228c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002290:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229a:	3318      	adds	r3, #24
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a2:	2001      	movs	r0, #1
 80022a4:	f7fe fefc 	bl	80010a0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b0:	3318      	adds	r3, #24
 80022b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022b6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80022ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022bc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80022c0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80022c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022c4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80022c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80022c8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80022ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022cc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80022ce:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80022d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80022d2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f0:	2001      	movs	r0, #1
 80022f2:	f7fe fed5 	bl	80010a0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002302:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d10f      	bne.n	800232c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002314:	331c      	adds	r3, #28
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002328:	331c      	adds	r3, #28
 800232a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	461a      	mov	r2, r3
 8002332:	2100      	movs	r1, #0
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f809 	bl	800234c <ETH_MACAddressConfig>
}
 800233a:	bf00      	nop
 800233c:	37c0      	adds	r7, #192	; 0xc0
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	ff20810f 	.word	0xff20810f
 8002348:	f8de3f23 	.word	0xf8de3f23

0800234c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3305      	adds	r3, #5
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	3204      	adds	r2, #4
 8002364:	7812      	ldrb	r2, [r2, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <ETH_MACAddressConfig+0x68>)
 800236e:	4413      	add	r3, r2
 8002370:	461a      	mov	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3303      	adds	r3, #3
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	061a      	lsls	r2, r3, #24
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3302      	adds	r3, #2
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3301      	adds	r3, #1
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	4313      	orrs	r3, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <ETH_MACAddressConfig+0x6c>)
 800239e:	4413      	add	r3, r2
 80023a0:	461a      	mov	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	6013      	str	r3, [r2, #0]
}
 80023a6:	bf00      	nop
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40028040 	.word	0x40028040
 80023b8:	40028044 	.word	0x40028044

080023bc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0208 	orr.w	r2, r2, #8
 80023d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023e0:	2001      	movs	r0, #1
 80023e2:	f000 f8e9 	bl	80025b8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	601a      	str	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0208 	bic.w	r2, r2, #8
 8002410:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800241a:	2001      	movs	r0, #1
 800241c:	f000 f8cc 	bl	80025b8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	601a      	str	r2, [r3, #0]
}
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0204 	orr.w	r2, r2, #4
 800244a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002454:	2001      	movs	r0, #1
 8002456:	f000 f8af 	bl	80025b8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	601a      	str	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0204 	bic.w	r2, r2, #4
 8002484:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800248e:	2001      	movs	r0, #1
 8002490:	f000 f892 	bl	80025b8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	601a      	str	r2, [r3, #0]
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b4:	3318      	adds	r3, #24
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c4:	3318      	adds	r3, #24
 80024c6:	601a      	str	r2, [r3, #0]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e4:	3318      	adds	r3, #24
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f4:	3318      	adds	r3, #24
 80024f6:	601a      	str	r2, [r3, #0]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002514:	3318      	adds	r3, #24
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0202 	orr.w	r2, r2, #2
 8002520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002524:	3318      	adds	r3, #24
 8002526:	601a      	str	r2, [r3, #0]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002544:	3318      	adds	r3, #24
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0202 	bic.w	r2, r2, #2
 8002550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002554:	3318      	adds	r3, #24
 8002556:	601a      	str	r2, [r3, #0]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002578:	3318      	adds	r3, #24
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002588:	3318      	adds	r3, #24
 800258a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002594:	3318      	adds	r3, #24
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800259a:	2001      	movs	r0, #1
 800259c:	f000 f80c 	bl	80025b8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025aa:	3318      	adds	r3, #24
 80025ac:	601a      	str	r2, [r3, #0]
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <ETH_Delay+0x38>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <ETH_Delay+0x3c>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0a5b      	lsrs	r3, r3, #9
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80025d4:	bf00      	nop
  } 
  while (Delay --);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1e5a      	subs	r2, r3, #1
 80025da:	60fa      	str	r2, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f9      	bne.n	80025d4 <ETH_Delay+0x1c>
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000000 	.word	0x20000000
 80025f4:	10624dd3 	.word	0x10624dd3

080025f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	e177      	b.n	8002904 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	429a      	cmp	r2, r3
 800262e:	f040 8166 	bne.w	80028fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d005      	beq.n	800264a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002646:	2b02      	cmp	r3, #2
 8002648:	d130      	bne.n	80026ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	2203      	movs	r2, #3
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 0201 	and.w	r2, r3, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d017      	beq.n	80026e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d123      	bne.n	800273c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	08da      	lsrs	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3208      	adds	r2, #8
 80026fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	220f      	movs	r2, #15
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	08da      	lsrs	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3208      	adds	r2, #8
 8002736:	69b9      	ldr	r1, [r7, #24]
 8002738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0203 	and.w	r2, r3, #3
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80c0 	beq.w	80028fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b66      	ldr	r3, [pc, #408]	; (800291c <HAL_GPIO_Init+0x324>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a65      	ldr	r2, [pc, #404]	; (800291c <HAL_GPIO_Init+0x324>)
 8002788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b63      	ldr	r3, [pc, #396]	; (800291c <HAL_GPIO_Init+0x324>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800279a:	4a61      	ldr	r2, [pc, #388]	; (8002920 <HAL_GPIO_Init+0x328>)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3302      	adds	r3, #2
 80027a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	220f      	movs	r2, #15
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a58      	ldr	r2, [pc, #352]	; (8002924 <HAL_GPIO_Init+0x32c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d037      	beq.n	8002836 <HAL_GPIO_Init+0x23e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a57      	ldr	r2, [pc, #348]	; (8002928 <HAL_GPIO_Init+0x330>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d031      	beq.n	8002832 <HAL_GPIO_Init+0x23a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a56      	ldr	r2, [pc, #344]	; (800292c <HAL_GPIO_Init+0x334>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d02b      	beq.n	800282e <HAL_GPIO_Init+0x236>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a55      	ldr	r2, [pc, #340]	; (8002930 <HAL_GPIO_Init+0x338>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d025      	beq.n	800282a <HAL_GPIO_Init+0x232>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a54      	ldr	r2, [pc, #336]	; (8002934 <HAL_GPIO_Init+0x33c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01f      	beq.n	8002826 <HAL_GPIO_Init+0x22e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a53      	ldr	r2, [pc, #332]	; (8002938 <HAL_GPIO_Init+0x340>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d019      	beq.n	8002822 <HAL_GPIO_Init+0x22a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a52      	ldr	r2, [pc, #328]	; (800293c <HAL_GPIO_Init+0x344>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_GPIO_Init+0x226>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a51      	ldr	r2, [pc, #324]	; (8002940 <HAL_GPIO_Init+0x348>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00d      	beq.n	800281a <HAL_GPIO_Init+0x222>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a50      	ldr	r2, [pc, #320]	; (8002944 <HAL_GPIO_Init+0x34c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d007      	beq.n	8002816 <HAL_GPIO_Init+0x21e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4f      	ldr	r2, [pc, #316]	; (8002948 <HAL_GPIO_Init+0x350>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_GPIO_Init+0x21a>
 800280e:	2309      	movs	r3, #9
 8002810:	e012      	b.n	8002838 <HAL_GPIO_Init+0x240>
 8002812:	230a      	movs	r3, #10
 8002814:	e010      	b.n	8002838 <HAL_GPIO_Init+0x240>
 8002816:	2308      	movs	r3, #8
 8002818:	e00e      	b.n	8002838 <HAL_GPIO_Init+0x240>
 800281a:	2307      	movs	r3, #7
 800281c:	e00c      	b.n	8002838 <HAL_GPIO_Init+0x240>
 800281e:	2306      	movs	r3, #6
 8002820:	e00a      	b.n	8002838 <HAL_GPIO_Init+0x240>
 8002822:	2305      	movs	r3, #5
 8002824:	e008      	b.n	8002838 <HAL_GPIO_Init+0x240>
 8002826:	2304      	movs	r3, #4
 8002828:	e006      	b.n	8002838 <HAL_GPIO_Init+0x240>
 800282a:	2303      	movs	r3, #3
 800282c:	e004      	b.n	8002838 <HAL_GPIO_Init+0x240>
 800282e:	2302      	movs	r3, #2
 8002830:	e002      	b.n	8002838 <HAL_GPIO_Init+0x240>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_GPIO_Init+0x240>
 8002836:	2300      	movs	r3, #0
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	f002 0203 	and.w	r2, r2, #3
 800283e:	0092      	lsls	r2, r2, #2
 8002840:	4093      	lsls	r3, r2
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002848:	4935      	ldr	r1, [pc, #212]	; (8002920 <HAL_GPIO_Init+0x328>)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	089b      	lsrs	r3, r3, #2
 800284e:	3302      	adds	r3, #2
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_GPIO_Init+0x354>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800287a:	4a34      	ldr	r2, [pc, #208]	; (800294c <HAL_GPIO_Init+0x354>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <HAL_GPIO_Init+0x354>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028a4:	4a29      	ldr	r2, [pc, #164]	; (800294c <HAL_GPIO_Init+0x354>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028aa:	4b28      	ldr	r3, [pc, #160]	; (800294c <HAL_GPIO_Init+0x354>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ce:	4a1f      	ldr	r2, [pc, #124]	; (800294c <HAL_GPIO_Init+0x354>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d4:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_GPIO_Init+0x354>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <HAL_GPIO_Init+0x354>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3301      	adds	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b0f      	cmp	r3, #15
 8002908:	f67f ae84 	bls.w	8002614 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3724      	adds	r7, #36	; 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	40013800 	.word	0x40013800
 8002924:	40020000 	.word	0x40020000
 8002928:	40020400 	.word	0x40020400
 800292c:	40020800 	.word	0x40020800
 8002930:	40020c00 	.word	0x40020c00
 8002934:	40021000 	.word	0x40021000
 8002938:	40021400 	.word	0x40021400
 800293c:	40021800 	.word	0x40021800
 8002940:	40021c00 	.word	0x40021c00
 8002944:	40022000 	.word	0x40022000
 8002948:	40022400 	.word	0x40022400
 800294c:	40013c00 	.word	0x40013c00

08002950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	807b      	strh	r3, [r7, #2]
 800295c:	4613      	mov	r3, r2
 800295e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002960:	787b      	ldrb	r3, [r7, #1]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800296c:	e003      	b.n	8002976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	041a      	lsls	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	619a      	str	r2, [r3, #24]
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002994:	887a      	ldrh	r2, [r7, #2]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4013      	ands	r3, r2
 800299a:	041a      	lsls	r2, r3, #16
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	43d9      	mvns	r1, r3
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	400b      	ands	r3, r1
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	619a      	str	r2, [r3, #24]
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80029b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b8:	b08f      	sub	sp, #60	; 0x3c
 80029ba:	af0a      	add	r7, sp, #40	; 0x28
 80029bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e054      	b.n	8002a72 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f017 fb62 	bl	801a0ac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2203      	movs	r2, #3
 80029ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d102      	bne.n	8002a02 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 ff22 	bl	8005850 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	603b      	str	r3, [r7, #0]
 8002a12:	687e      	ldr	r6, [r7, #4]
 8002a14:	466d      	mov	r5, sp
 8002a16:	f106 0410 	add.w	r4, r6, #16
 8002a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a26:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a2a:	1d33      	adds	r3, r6, #4
 8002a2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a2e:	6838      	ldr	r0, [r7, #0]
 8002a30:	f002 fe9c 	bl	800576c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f002 ff19 	bl	8005872 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	687e      	ldr	r6, [r7, #4]
 8002a48:	466d      	mov	r5, sp
 8002a4a:	f106 0410 	add.w	r4, r6, #16
 8002a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a5e:	1d33      	adds	r3, r6, #4
 8002a60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a62:	6838      	ldr	r0, [r7, #0]
 8002a64:	f003 f880 	bl	8005b68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a7a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002a7a:	b590      	push	{r4, r7, lr}
 8002a7c:	b089      	sub	sp, #36	; 0x24
 8002a7e:	af04      	add	r7, sp, #16
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	4608      	mov	r0, r1
 8002a84:	4611      	mov	r1, r2
 8002a86:	461a      	mov	r2, r3
 8002a88:	4603      	mov	r3, r0
 8002a8a:	70fb      	strb	r3, [r7, #3]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70bb      	strb	r3, [r7, #2]
 8002a90:	4613      	mov	r3, r2
 8002a92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_HCD_HC_Init+0x28>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e076      	b.n	8002b90 <HAL_HCD_HC_Init+0x116>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	333d      	adds	r3, #61	; 0x3d
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3338      	adds	r3, #56	; 0x38
 8002aca:	787a      	ldrb	r2, [r7, #1]
 8002acc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	212c      	movs	r1, #44	; 0x2c
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	3340      	adds	r3, #64	; 0x40
 8002adc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ade:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	3339      	adds	r3, #57	; 0x39
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	333f      	adds	r3, #63	; 0x3f
 8002b00:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002b04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	78ba      	ldrb	r2, [r7, #2]
 8002b0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b0e:	b2d0      	uxtb	r0, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	333a      	adds	r3, #58	; 0x3a
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002b20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	da09      	bge.n	8002b3c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	333b      	adds	r3, #59	; 0x3b
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e008      	b.n	8002b4e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	333b      	adds	r3, #59	; 0x3b
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	333c      	adds	r3, #60	; 0x3c
 8002b5c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b60:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	787c      	ldrb	r4, [r7, #1]
 8002b68:	78ba      	ldrb	r2, [r7, #2]
 8002b6a:	78f9      	ldrb	r1, [r7, #3]
 8002b6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b6e:	9302      	str	r3, [sp, #8]
 8002b70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	4623      	mov	r3, r4
 8002b7e:	f003 f96d 	bl	8005e5c <USB_HC_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd90      	pop	{r4, r7, pc}

08002b98 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_HCD_HC_Halt+0x1e>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e00f      	b.n	8002bd6 <HAL_HCD_HC_Halt+0x3e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 fba9 	bl	800631e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	70fb      	strb	r3, [r7, #3]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	70bb      	strb	r3, [r7, #2]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	333b      	adds	r3, #59	; 0x3b
 8002c08:	78ba      	ldrb	r2, [r7, #2]
 8002c0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	fb01 f303 	mul.w	r3, r1, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	333f      	adds	r3, #63	; 0x3f
 8002c1a:	787a      	ldrb	r2, [r7, #1]
 8002c1c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002c1e:	7c3b      	ldrb	r3, [r7, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d112      	bne.n	8002c4a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3342      	adds	r3, #66	; 0x42
 8002c32:	2203      	movs	r2, #3
 8002c34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	333d      	adds	r3, #61	; 0x3d
 8002c44:	7f3a      	ldrb	r2, [r7, #28]
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e008      	b.n	8002c5c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	3342      	adds	r3, #66	; 0x42
 8002c58:	2202      	movs	r2, #2
 8002c5a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002c5c:	787b      	ldrb	r3, [r7, #1]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	f200 80c6 	bhi.w	8002df0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002c64:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002c7d 	.word	0x08002c7d
 8002c70:	08002ddd 	.word	0x08002ddd
 8002c74:	08002ce1 	.word	0x08002ce1
 8002c78:	08002d5f 	.word	0x08002d5f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002c7c:	7c3b      	ldrb	r3, [r7, #16]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	f040 80b8 	bne.w	8002df4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002c84:	78bb      	ldrb	r3, [r7, #2]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 80b4 	bne.w	8002df4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002c8c:	8b3b      	ldrh	r3, [r7, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d108      	bne.n	8002ca4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3355      	adds	r3, #85	; 0x55
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3355      	adds	r3, #85	; 0x55
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3342      	adds	r3, #66	; 0x42
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002cca:	e093      	b.n	8002df4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3342      	adds	r3, #66	; 0x42
 8002cda:	2202      	movs	r2, #2
 8002cdc:	701a      	strb	r2, [r3, #0]
      break;
 8002cde:	e089      	b.n	8002df4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ce0:	78bb      	ldrb	r3, [r7, #2]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d11d      	bne.n	8002d22 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3355      	adds	r3, #85	; 0x55
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	3342      	adds	r3, #66	; 0x42
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002d0c:	e073      	b.n	8002df6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	212c      	movs	r1, #44	; 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3342      	adds	r3, #66	; 0x42
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	701a      	strb	r2, [r3, #0]
      break;
 8002d20:	e069      	b.n	8002df6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3354      	adds	r3, #84	; 0x54
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3342      	adds	r3, #66	; 0x42
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
      break;
 8002d48:	e055      	b.n	8002df6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	3342      	adds	r3, #66	; 0x42
 8002d58:	2202      	movs	r2, #2
 8002d5a:	701a      	strb	r2, [r3, #0]
      break;
 8002d5c:	e04b      	b.n	8002df6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002d5e:	78bb      	ldrb	r3, [r7, #2]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d11d      	bne.n	8002da0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3355      	adds	r3, #85	; 0x55
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3342      	adds	r3, #66	; 0x42
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d8a:	e034      	b.n	8002df6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3342      	adds	r3, #66	; 0x42
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	701a      	strb	r2, [r3, #0]
      break;
 8002d9e:	e02a      	b.n	8002df6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3354      	adds	r3, #84	; 0x54
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3342      	adds	r3, #66	; 0x42
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
      break;
 8002dc6:	e016      	b.n	8002df6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3342      	adds	r3, #66	; 0x42
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	701a      	strb	r2, [r3, #0]
      break;
 8002dda:	e00c      	b.n	8002df6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3342      	adds	r3, #66	; 0x42
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
      break;
 8002dee:	e002      	b.n	8002df6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002df0:	bf00      	nop
 8002df2:	e000      	b.n	8002df6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002df4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	3344      	adds	r3, #68	; 0x44
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	8b3a      	ldrh	r2, [r7, #24]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	202c      	movs	r0, #44	; 0x2c
 8002e10:	fb00 f303 	mul.w	r3, r0, r3
 8002e14:	440b      	add	r3, r1
 8002e16:	334c      	adds	r3, #76	; 0x4c
 8002e18:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	212c      	movs	r1, #44	; 0x2c
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3360      	adds	r3, #96	; 0x60
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3350      	adds	r3, #80	; 0x50
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3339      	adds	r3, #57	; 0x39
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3361      	adds	r3, #97	; 0x61
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	222c      	movs	r2, #44	; 0x2c
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	3338      	adds	r3, #56	; 0x38
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	18d1      	adds	r1, r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f003 f8fc 	bl	8006078 <USB_HC_StartXfer>
 8002e80:	4603      	mov	r3, r0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop

08002e8c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f002 fe1f 	bl	8005ae6 <USB_GetMode>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	f040 80f6 	bne.w	800309c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f002 fe03 	bl	8005ac0 <USB_ReadInterrupts>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80ec 	beq.w	800309a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f002 fdfa 	bl	8005ac0 <USB_ReadInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ed6:	d104      	bne.n	8002ee2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ee0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f002 fdea 	bl	8005ac0 <USB_ReadInterrupts>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef6:	d104      	bne.n	8002f02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 fdda 	bl	8005ac0 <USB_ReadInterrupts>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f16:	d104      	bne.n	8002f22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f002 fdca 	bl	8005ac0 <USB_ReadInterrupts>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d103      	bne.n	8002f3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f002 fdbc 	bl	8005ac0 <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f52:	d11c      	bne.n	8002f8e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002f5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10f      	bne.n	8002f8e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f6e:	2110      	movs	r1, #16
 8002f70:	6938      	ldr	r0, [r7, #16]
 8002f72:	f002 fccb 	bl	800590c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f76:	6938      	ldr	r0, [r7, #16]
 8002f78:	f002 fcec 	bl	8005954 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 fea4 	bl	8005cd0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f017 f90d 	bl	801a1a8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f002 fd94 	bl	8005ac0 <USB_ReadInterrupts>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa2:	d102      	bne.n	8002faa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f001 fa03 	bl	80043b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 fd86 	bl	8005ac0 <USB_ReadInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d106      	bne.n	8002fcc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f017 f8d6 	bl	801a170 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2208      	movs	r2, #8
 8002fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f002 fd75 	bl	8005ac0 <USB_ReadInterrupts>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d101      	bne.n	8002fe4 <HAL_HCD_IRQHandler+0x158>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <HAL_HCD_IRQHandler+0x15a>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d012      	beq.n	8003010 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0210 	bic.w	r2, r2, #16
 8002ff8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f001 f906 	bl	800420c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0210 	orr.w	r2, r2, #16
 800300e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f002 fd53 	bl	8005ac0 <USB_ReadInterrupts>
 800301a:	4603      	mov	r3, r0
 800301c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003020:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003024:	d13a      	bne.n	800309c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f003 f966 	bl	80062fc <USB_HC_ReadInterrupt>
 8003030:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	e025      	b.n	8003084 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d018      	beq.n	800307e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800305e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003062:	d106      	bne.n	8003072 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	4619      	mov	r1, r3
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8ab 	bl	80031c6 <HCD_HC_IN_IRQHandler>
 8003070:	e005      	b.n	800307e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	4619      	mov	r1, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fcc6 	bl	8003a0a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	3301      	adds	r3, #1
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	429a      	cmp	r2, r3
 800308c:	d3d4      	bcc.n	8003038 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003096:	615a      	str	r2, [r3, #20]
 8003098:	e000      	b.n	800309c <HAL_HCD_IRQHandler+0x210>
      return;
 800309a:	bf00      	nop
    }
  }
}
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_HCD_Start+0x16>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e013      	b.n	80030e0 <HAL_HCD_Start+0x3e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	4618      	mov	r0, r3
 80030c8:	f002 fe66 	bl	8005d98 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f002 fbac 	bl	800582e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_HCD_Stop+0x16>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e00d      	b.n	800311a <HAL_HCD_Stop+0x32>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f003 fa60 	bl	80065d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f002 fe08 	bl	8005d44 <USB_ResetPort>
 8003134:	4603      	mov	r3, r0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	460b      	mov	r3, r1
 8003148:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	3360      	adds	r3, #96	; 0x60
 8003158:	781b      	ldrb	r3, [r3, #0]
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	212c      	movs	r1, #44	; 0x2c
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	4413      	add	r3, r2
 800317e:	3350      	adds	r3, #80	; 0x50
 8003180:	681b      	ldr	r3, [r3, #0]
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f002 fe4c 	bl	8005e38 <USB_GetCurrentFrame>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f002 fe27 	bl	8005e0a <USB_GetHostSpeed>
 80031bc:	4603      	mov	r3, r0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	460b      	mov	r3, r1
 80031d0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d119      	bne.n	800322a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003202:	461a      	mov	r2, r3
 8003204:	2304      	movs	r3, #4
 8003206:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4413      	add	r3, r2
 8003210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	0151      	lsls	r1, r2, #5
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	440a      	add	r2, r1
 800321e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003222:	f043 0302 	orr.w	r3, r3, #2
 8003226:	60d3      	str	r3, [r2, #12]
 8003228:	e101      	b.n	800342e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4413      	add	r3, r2
 8003232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003240:	d12b      	bne.n	800329a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4413      	add	r3, r2
 800324a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324e:	461a      	mov	r2, r3
 8003250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003254:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3361      	adds	r3, #97	; 0x61
 8003264:	2207      	movs	r2, #7
 8003266:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	0151      	lsls	r1, r2, #5
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	440a      	add	r2, r1
 800327e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003282:	f043 0302 	orr.w	r3, r3, #2
 8003286:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f003 f843 	bl	800631e <USB_HC_Halt>
 8003298:	e0c9      	b.n	800342e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d109      	bne.n	80032c4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032bc:	461a      	mov	r2, r3
 80032be:	2320      	movs	r3, #32
 80032c0:	6093      	str	r3, [r2, #8]
 80032c2:	e0b4      	b.n	800342e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d133      	bne.n	8003342 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	0151      	lsls	r1, r2, #5
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	440a      	add	r2, r1
 80032f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	212c      	movs	r1, #44	; 0x2c
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	3361      	adds	r3, #97	; 0x61
 8003308:	2205      	movs	r2, #5
 800330a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003318:	461a      	mov	r2, r3
 800331a:	2310      	movs	r3, #16
 800331c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	461a      	mov	r2, r3
 800332c:	2308      	movs	r3, #8
 800332e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f002 ffef 	bl	800631e <USB_HC_Halt>
 8003340:	e075      	b.n	800342e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003358:	d134      	bne.n	80033c4 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4413      	add	r3, r2
 8003362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	0151      	lsls	r1, r2, #5
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	440a      	add	r2, r1
 8003370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003374:	f043 0302 	orr.w	r3, r3, #2
 8003378:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	3361      	adds	r3, #97	; 0x61
 8003388:	2208      	movs	r2, #8
 800338a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003398:	461a      	mov	r2, r3
 800339a:	2310      	movs	r3, #16
 800339c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033aa:	461a      	mov	r2, r3
 80033ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f002 ffae 	bl	800631e <USB_HC_Halt>
 80033c2:	e034      	b.n	800342e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	2b80      	cmp	r3, #128	; 0x80
 80033d8:	d129      	bne.n	800342e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	0151      	lsls	r1, r2, #5
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	440a      	add	r2, r1
 80033f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033f4:	f043 0302 	orr.w	r3, r3, #2
 80033f8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	212c      	movs	r1, #44	; 0x2c
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	4413      	add	r3, r2
 8003406:	3361      	adds	r3, #97	; 0x61
 8003408:	2206      	movs	r2, #6
 800340a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f002 ff81 	bl	800631e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003428:	461a      	mov	r2, r3
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4413      	add	r3, r2
 8003436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003444:	d122      	bne.n	800348c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	0151      	lsls	r1, r2, #5
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	440a      	add	r2, r1
 800345c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f002 ff54 	bl	800631e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4413      	add	r3, r2
 800347e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003482:	461a      	mov	r2, r3
 8003484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003488:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800348a:	e2ba      	b.n	8003a02 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	f040 811b 	bne.w	80036da <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d019      	beq.n	80034e0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	212c      	movs	r1, #44	; 0x2c
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	3348      	adds	r3, #72	; 0x48
 80034ba:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	0159      	lsls	r1, r3, #5
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	440b      	add	r3, r1
 80034c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80034ce:	1ad2      	subs	r2, r2, r3
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	202c      	movs	r0, #44	; 0x2c
 80034d6:	fb00 f303 	mul.w	r3, r0, r3
 80034da:	440b      	add	r3, r1
 80034dc:	3350      	adds	r3, #80	; 0x50
 80034de:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3361      	adds	r3, #97	; 0x61
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	335c      	adds	r3, #92	; 0x5c
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003510:	461a      	mov	r2, r3
 8003512:	2301      	movs	r3, #1
 8003514:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	333f      	adds	r3, #63	; 0x3f
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	212c      	movs	r1, #44	; 0x2c
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	4413      	add	r3, r2
 8003536:	333f      	adds	r3, #63	; 0x3f
 8003538:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800353a:	2b02      	cmp	r3, #2
 800353c:	d121      	bne.n	8003582 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	0151      	lsls	r1, r2, #5
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	440a      	add	r2, r1
 8003554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003558:	f043 0302 	orr.w	r3, r3, #2
 800355c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f002 fed8 	bl	800631e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4413      	add	r3, r2
 8003576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357a:	461a      	mov	r2, r3
 800357c:	2310      	movs	r3, #16
 800357e:	6093      	str	r3, [r2, #8]
 8003580:	e066      	b.n	8003650 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	212c      	movs	r1, #44	; 0x2c
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	333f      	adds	r3, #63	; 0x3f
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d127      	bne.n	80035e6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4413      	add	r3, r2
 800359e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	0151      	lsls	r1, r2, #5
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	440a      	add	r2, r1
 80035ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035b4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	212c      	movs	r1, #44	; 0x2c
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	4413      	add	r3, r2
 80035c2:	3360      	adds	r3, #96	; 0x60
 80035c4:	2201      	movs	r2, #1
 80035c6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	b2d9      	uxtb	r1, r3
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	202c      	movs	r0, #44	; 0x2c
 80035d2:	fb00 f303 	mul.w	r3, r0, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	3360      	adds	r3, #96	; 0x60
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f016 fdf0 	bl	801a1c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035e4:	e034      	b.n	8003650 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	212c      	movs	r1, #44	; 0x2c
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	4413      	add	r3, r2
 80035f2:	333f      	adds	r3, #63	; 0x3f
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d12a      	bne.n	8003650 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	212c      	movs	r1, #44	; 0x2c
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	4413      	add	r3, r2
 8003606:	3360      	adds	r3, #96	; 0x60
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	212c      	movs	r1, #44	; 0x2c
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	4413      	add	r3, r2
 8003618:	3354      	adds	r3, #84	; 0x54
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	f083 0301 	eor.w	r3, r3, #1
 8003620:	b2d8      	uxtb	r0, r3
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	212c      	movs	r1, #44	; 0x2c
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	3354      	adds	r3, #84	; 0x54
 8003630:	4602      	mov	r2, r0
 8003632:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	b2d9      	uxtb	r1, r3
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	202c      	movs	r0, #44	; 0x2c
 800363e:	fb00 f303 	mul.w	r3, r0, r3
 8003642:	4413      	add	r3, r2
 8003644:	3360      	adds	r3, #96	; 0x60
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f016 fdba 	bl	801a1c4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d12b      	bne.n	80036b0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3348      	adds	r3, #72	; 0x48
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	202c      	movs	r0, #44	; 0x2c
 800366e:	fb00 f202 	mul.w	r2, r0, r2
 8003672:	440a      	add	r2, r1
 8003674:	3240      	adds	r2, #64	; 0x40
 8003676:	8812      	ldrh	r2, [r2, #0]
 8003678:	fbb3 f3f2 	udiv	r3, r3, r2
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 81be 	beq.w	8003a02 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	212c      	movs	r1, #44	; 0x2c
 800368c:	fb01 f303 	mul.w	r3, r1, r3
 8003690:	4413      	add	r3, r2
 8003692:	3354      	adds	r3, #84	; 0x54
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	f083 0301 	eor.w	r3, r3, #1
 800369a:	b2d8      	uxtb	r0, r3
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	3354      	adds	r3, #84	; 0x54
 80036aa:	4602      	mov	r2, r0
 80036ac:	701a      	strb	r2, [r3, #0]
}
 80036ae:	e1a8      	b.n	8003a02 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	212c      	movs	r1, #44	; 0x2c
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	4413      	add	r3, r2
 80036bc:	3354      	adds	r3, #84	; 0x54
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	f083 0301 	eor.w	r3, r3, #1
 80036c4:	b2d8      	uxtb	r0, r3
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	212c      	movs	r1, #44	; 0x2c
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	4413      	add	r3, r2
 80036d2:	3354      	adds	r3, #84	; 0x54
 80036d4:	4602      	mov	r2, r0
 80036d6:	701a      	strb	r2, [r3, #0]
}
 80036d8:	e193      	b.n	8003a02 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	f040 8106 	bne.w	80038fe <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	0151      	lsls	r1, r2, #5
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	440a      	add	r2, r1
 8003708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800370c:	f023 0302 	bic.w	r3, r3, #2
 8003710:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	212c      	movs	r1, #44	; 0x2c
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	4413      	add	r3, r2
 800371e:	3361      	adds	r3, #97	; 0x61
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d109      	bne.n	800373a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	3360      	adds	r3, #96	; 0x60
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	e0c9      	b.n	80038ce <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	3361      	adds	r3, #97	; 0x61
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b05      	cmp	r3, #5
 800374c:	d109      	bne.n	8003762 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	212c      	movs	r1, #44	; 0x2c
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	3360      	adds	r3, #96	; 0x60
 800375c:	2205      	movs	r2, #5
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e0b5      	b.n	80038ce <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	212c      	movs	r1, #44	; 0x2c
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	4413      	add	r3, r2
 800376e:	3361      	adds	r3, #97	; 0x61
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b06      	cmp	r3, #6
 8003774:	d009      	beq.n	800378a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	212c      	movs	r1, #44	; 0x2c
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	3361      	adds	r3, #97	; 0x61
 8003784:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003786:	2b08      	cmp	r3, #8
 8003788:	d150      	bne.n	800382c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	212c      	movs	r1, #44	; 0x2c
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	4413      	add	r3, r2
 8003796:	335c      	adds	r3, #92	; 0x5c
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	202c      	movs	r0, #44	; 0x2c
 80037a2:	fb00 f303 	mul.w	r3, r0, r3
 80037a6:	440b      	add	r3, r1
 80037a8:	335c      	adds	r3, #92	; 0x5c
 80037aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	212c      	movs	r1, #44	; 0x2c
 80037b2:	fb01 f303 	mul.w	r3, r1, r3
 80037b6:	4413      	add	r3, r2
 80037b8:	335c      	adds	r3, #92	; 0x5c
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d912      	bls.n	80037e6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	212c      	movs	r1, #44	; 0x2c
 80037c6:	fb01 f303 	mul.w	r3, r1, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	335c      	adds	r3, #92	; 0x5c
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	212c      	movs	r1, #44	; 0x2c
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	3360      	adds	r3, #96	; 0x60
 80037e0:	2204      	movs	r2, #4
 80037e2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037e4:	e073      	b.n	80038ce <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	3360      	adds	r3, #96	; 0x60
 80037f4:	2202      	movs	r2, #2
 80037f6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800380e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003816:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4413      	add	r3, r2
 8003820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003824:	461a      	mov	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800382a:	e050      	b.n	80038ce <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	212c      	movs	r1, #44	; 0x2c
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	4413      	add	r3, r2
 8003838:	3361      	adds	r3, #97	; 0x61
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d122      	bne.n	8003886 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	212c      	movs	r1, #44	; 0x2c
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	4413      	add	r3, r2
 800384c:	3360      	adds	r3, #96	; 0x60
 800384e:	2202      	movs	r2, #2
 8003850:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4413      	add	r3, r2
 800385a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003868:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003870:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4413      	add	r3, r2
 800387a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387e:	461a      	mov	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	e023      	b.n	80038ce <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	212c      	movs	r1, #44	; 0x2c
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	4413      	add	r3, r2
 8003892:	3361      	adds	r3, #97	; 0x61
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b07      	cmp	r3, #7
 8003898:	d119      	bne.n	80038ce <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	212c      	movs	r1, #44	; 0x2c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	335c      	adds	r3, #92	; 0x5c
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	202c      	movs	r0, #44	; 0x2c
 80038b2:	fb00 f303 	mul.w	r3, r0, r3
 80038b6:	440b      	add	r3, r1
 80038b8:	335c      	adds	r3, #92	; 0x5c
 80038ba:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	212c      	movs	r1, #44	; 0x2c
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	3360      	adds	r3, #96	; 0x60
 80038ca:	2204      	movs	r2, #4
 80038cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038da:	461a      	mov	r2, r3
 80038dc:	2302      	movs	r3, #2
 80038de:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	b2d9      	uxtb	r1, r3
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	202c      	movs	r0, #44	; 0x2c
 80038ea:	fb00 f303 	mul.w	r3, r0, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	3360      	adds	r3, #96	; 0x60
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f016 fc64 	bl	801a1c4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80038fc:	e081      	b.n	8003a02 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4413      	add	r3, r2
 8003906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b10      	cmp	r3, #16
 8003912:	d176      	bne.n	8003a02 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	212c      	movs	r1, #44	; 0x2c
 800391a:	fb01 f303 	mul.w	r3, r1, r3
 800391e:	4413      	add	r3, r2
 8003920:	333f      	adds	r3, #63	; 0x3f
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b03      	cmp	r3, #3
 8003926:	d121      	bne.n	800396c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	212c      	movs	r1, #44	; 0x2c
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	4413      	add	r3, r2
 8003934:	335c      	adds	r3, #92	; 0x5c
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4413      	add	r3, r2
 8003942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	0151      	lsls	r1, r2, #5
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	440a      	add	r2, r1
 8003950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003954:	f043 0302 	orr.w	r3, r3, #2
 8003958:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f002 fcda 	bl	800631e <USB_HC_Halt>
 800396a:	e041      	b.n	80039f0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	212c      	movs	r1, #44	; 0x2c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	333f      	adds	r3, #63	; 0x3f
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d009      	beq.n	8003994 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	212c      	movs	r1, #44	; 0x2c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	333f      	adds	r3, #63	; 0x3f
 800398e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003990:	2b02      	cmp	r3, #2
 8003992:	d12d      	bne.n	80039f0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	335c      	adds	r3, #92	; 0x5c
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d120      	bne.n	80039f0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	212c      	movs	r1, #44	; 0x2c
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	4413      	add	r3, r2
 80039ba:	3361      	adds	r3, #97	; 0x61
 80039bc:	2203      	movs	r2, #3
 80039be:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	0151      	lsls	r1, r2, #5
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	440a      	add	r2, r1
 80039d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039da:	f043 0302 	orr.w	r3, r3, #2
 80039de:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f002 fc97 	bl	800631e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fc:	461a      	mov	r2, r3
 80039fe:	2310      	movs	r3, #16
 8003a00:	6093      	str	r3, [r2, #8]
}
 8003a02:	bf00      	nop
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b088      	sub	sp, #32
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d119      	bne.n	8003a6e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a46:	461a      	mov	r2, r3
 8003a48:	2304      	movs	r3, #4
 8003a4a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	0151      	lsls	r1, r2, #5
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	440a      	add	r2, r1
 8003a62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a66:	f043 0302 	orr.w	r3, r3, #2
 8003a6a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003a6c:	e3ca      	b.n	8004204 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d13e      	bne.n	8003b02 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a90:	461a      	mov	r2, r3
 8003a92:	2320      	movs	r3, #32
 8003a94:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	212c      	movs	r1, #44	; 0x2c
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	333d      	adds	r3, #61	; 0x3d
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	f040 83ac 	bne.w	8004204 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	333d      	adds	r3, #61	; 0x3d
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	212c      	movs	r1, #44	; 0x2c
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	4413      	add	r3, r2
 8003aca:	3360      	adds	r3, #96	; 0x60
 8003acc:	2202      	movs	r2, #2
 8003ace:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	0151      	lsls	r1, r2, #5
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	440a      	add	r2, r1
 8003ae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aea:	f043 0302 	orr.w	r3, r3, #2
 8003aee:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f002 fc0f 	bl	800631e <USB_HC_Halt>
}
 8003b00:	e380      	b.n	8004204 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b18:	d122      	bne.n	8003b60 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	0151      	lsls	r1, r2, #5
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	440a      	add	r2, r1
 8003b30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b34:	f043 0302 	orr.w	r3, r3, #2
 8003b38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f002 fbea 	bl	800631e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b56:	461a      	mov	r2, r3
 8003b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b5c:	6093      	str	r3, [r2, #8]
}
 8003b5e:	e351      	b.n	8004204 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d150      	bne.n	8003c18 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	212c      	movs	r1, #44	; 0x2c
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	4413      	add	r3, r2
 8003b82:	335c      	adds	r3, #92	; 0x5c
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d111      	bne.n	8003bc2 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	212c      	movs	r1, #44	; 0x2c
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	333d      	adds	r3, #61	; 0x3d
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2340      	movs	r3, #64	; 0x40
 8003bc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	0151      	lsls	r1, r2, #5
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	440a      	add	r2, r1
 8003bd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bdc:	f043 0302 	orr.w	r3, r3, #2
 8003be0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	4611      	mov	r1, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f002 fb96 	bl	800631e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfe:	461a      	mov	r2, r3
 8003c00:	2301      	movs	r3, #1
 8003c02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	212c      	movs	r1, #44	; 0x2c
 8003c0a:	fb01 f303 	mul.w	r3, r1, r3
 8003c0e:	4413      	add	r3, r2
 8003c10:	3361      	adds	r3, #97	; 0x61
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
}
 8003c16:	e2f5      	b.n	8004204 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	2b40      	cmp	r3, #64	; 0x40
 8003c2c:	d13c      	bne.n	8003ca8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	212c      	movs	r1, #44	; 0x2c
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	3361      	adds	r3, #97	; 0x61
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	212c      	movs	r1, #44	; 0x2c
 8003c46:	fb01 f303 	mul.w	r3, r1, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	333d      	adds	r3, #61	; 0x3d
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	212c      	movs	r1, #44	; 0x2c
 8003c58:	fb01 f303 	mul.w	r3, r1, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	335c      	adds	r3, #92	; 0x5c
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	0151      	lsls	r1, r2, #5
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	440a      	add	r2, r1
 8003c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c7e:	f043 0302 	orr.w	r3, r3, #2
 8003c82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f002 fb45 	bl	800631e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2340      	movs	r3, #64	; 0x40
 8003ca4:	6093      	str	r3, [r2, #8]
}
 8003ca6:	e2ad      	b.n	8004204 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d12a      	bne.n	8003d14 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cca:	461a      	mov	r2, r3
 8003ccc:	2308      	movs	r3, #8
 8003cce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	0151      	lsls	r1, r2, #5
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	440a      	add	r2, r1
 8003ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cea:	f043 0302 	orr.w	r3, r3, #2
 8003cee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f002 fb0f 	bl	800631e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	212c      	movs	r1, #44	; 0x2c
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3361      	adds	r3, #97	; 0x61
 8003d0e:	2205      	movs	r2, #5
 8003d10:	701a      	strb	r2, [r3, #0]
}
 8003d12:	e277      	b.n	8004204 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	d150      	bne.n	8003dcc <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	212c      	movs	r1, #44	; 0x2c
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	4413      	add	r3, r2
 8003d36:	335c      	adds	r3, #92	; 0x5c
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	212c      	movs	r1, #44	; 0x2c
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	3361      	adds	r3, #97	; 0x61
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	333d      	adds	r3, #61	; 0x3d
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d112      	bne.n	8003d88 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	333c      	adds	r3, #60	; 0x3c
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d108      	bne.n	8003d88 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	333d      	adds	r3, #61	; 0x3d
 8003d84:	2201      	movs	r2, #1
 8003d86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	0151      	lsls	r1, r2, #5
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	440a      	add	r2, r1
 8003d9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003da2:	f043 0302 	orr.w	r3, r3, #2
 8003da6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f002 fab3 	bl	800631e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	2310      	movs	r3, #16
 8003dc8:	6093      	str	r3, [r2, #8]
}
 8003dca:	e21b      	b.n	8004204 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dde:	2b80      	cmp	r3, #128	; 0x80
 8003de0:	d174      	bne.n	8003ecc <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d121      	bne.n	8003e2e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	212c      	movs	r1, #44	; 0x2c
 8003df0:	fb01 f303 	mul.w	r3, r1, r3
 8003df4:	4413      	add	r3, r2
 8003df6:	3361      	adds	r3, #97	; 0x61
 8003df8:	2206      	movs	r2, #6
 8003dfa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	0151      	lsls	r1, r2, #5
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	440a      	add	r2, r1
 8003e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e16:	f043 0302 	orr.w	r3, r3, #2
 8003e1a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f002 fa79 	bl	800631e <USB_HC_Halt>
 8003e2c:	e044      	b.n	8003eb8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	212c      	movs	r1, #44	; 0x2c
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	335c      	adds	r3, #92	; 0x5c
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	202c      	movs	r0, #44	; 0x2c
 8003e46:	fb00 f303 	mul.w	r3, r0, r3
 8003e4a:	440b      	add	r3, r1
 8003e4c:	335c      	adds	r3, #92	; 0x5c
 8003e4e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	212c      	movs	r1, #44	; 0x2c
 8003e56:	fb01 f303 	mul.w	r3, r1, r3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	335c      	adds	r3, #92	; 0x5c
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d920      	bls.n	8003ea6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	212c      	movs	r1, #44	; 0x2c
 8003e6a:	fb01 f303 	mul.w	r3, r1, r3
 8003e6e:	4413      	add	r3, r2
 8003e70:	335c      	adds	r3, #92	; 0x5c
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	212c      	movs	r1, #44	; 0x2c
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	4413      	add	r3, r2
 8003e82:	3360      	adds	r3, #96	; 0x60
 8003e84:	2204      	movs	r2, #4
 8003e86:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	b2d9      	uxtb	r1, r3
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	202c      	movs	r0, #44	; 0x2c
 8003e92:	fb00 f303 	mul.w	r3, r0, r3
 8003e96:	4413      	add	r3, r2
 8003e98:	3360      	adds	r3, #96	; 0x60
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f016 f990 	bl	801a1c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ea4:	e008      	b.n	8003eb8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	212c      	movs	r1, #44	; 0x2c
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3360      	adds	r3, #96	; 0x60
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	6093      	str	r3, [r2, #8]
}
 8003eca:	e19b      	b.n	8004204 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee2:	d134      	bne.n	8003f4e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	0151      	lsls	r1, r2, #5
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	440a      	add	r2, r1
 8003efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003efe:	f043 0302 	orr.w	r3, r3, #2
 8003f02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f002 fa05 	bl	800631e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f20:	461a      	mov	r2, r3
 8003f22:	2310      	movs	r3, #16
 8003f24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f32:	461a      	mov	r2, r3
 8003f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	212c      	movs	r1, #44	; 0x2c
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	3361      	adds	r3, #97	; 0x61
 8003f48:	2208      	movs	r2, #8
 8003f4a:	701a      	strb	r2, [r3, #0]
}
 8003f4c:	e15a      	b.n	8004204 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	f040 814f 	bne.w	8004204 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	0151      	lsls	r1, r2, #5
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	440a      	add	r2, r1
 8003f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f80:	f023 0302 	bic.w	r3, r3, #2
 8003f84:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	212c      	movs	r1, #44	; 0x2c
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	4413      	add	r3, r2
 8003f92:	3361      	adds	r3, #97	; 0x61
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d17d      	bne.n	8004096 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	212c      	movs	r1, #44	; 0x2c
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3360      	adds	r3, #96	; 0x60
 8003fa8:	2201      	movs	r2, #1
 8003faa:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	212c      	movs	r1, #44	; 0x2c
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	333f      	adds	r3, #63	; 0x3f
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d00a      	beq.n	8003fd6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	212c      	movs	r1, #44	; 0x2c
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	333f      	adds	r3, #63	; 0x3f
 8003fce:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	f040 8100 	bne.w	80041d6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d113      	bne.n	8004006 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	212c      	movs	r1, #44	; 0x2c
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	3355      	adds	r3, #85	; 0x55
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	f083 0301 	eor.w	r3, r3, #1
 8003ff2:	b2d8      	uxtb	r0, r3
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	212c      	movs	r1, #44	; 0x2c
 8003ffa:	fb01 f303 	mul.w	r3, r1, r3
 8003ffe:	4413      	add	r3, r2
 8004000:	3355      	adds	r3, #85	; 0x55
 8004002:	4602      	mov	r2, r0
 8004004:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b01      	cmp	r3, #1
 800400c:	f040 80e3 	bne.w	80041d6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	334c      	adds	r3, #76	; 0x4c
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80d8 	beq.w	80041d6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	212c      	movs	r1, #44	; 0x2c
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	4413      	add	r3, r2
 8004032:	334c      	adds	r3, #76	; 0x4c
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	202c      	movs	r0, #44	; 0x2c
 800403c:	fb00 f202 	mul.w	r2, r0, r2
 8004040:	440a      	add	r2, r1
 8004042:	3240      	adds	r2, #64	; 0x40
 8004044:	8812      	ldrh	r2, [r2, #0]
 8004046:	4413      	add	r3, r2
 8004048:	3b01      	subs	r3, #1
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	202c      	movs	r0, #44	; 0x2c
 8004050:	fb00 f202 	mul.w	r2, r0, r2
 8004054:	440a      	add	r2, r1
 8004056:	3240      	adds	r2, #64	; 0x40
 8004058:	8812      	ldrh	r2, [r2, #0]
 800405a:	fbb3 f3f2 	udiv	r3, r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80b5 	beq.w	80041d6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	212c      	movs	r1, #44	; 0x2c
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	4413      	add	r3, r2
 8004078:	3355      	adds	r3, #85	; 0x55
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	f083 0301 	eor.w	r3, r3, #1
 8004080:	b2d8      	uxtb	r0, r3
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	3355      	adds	r3, #85	; 0x55
 8004090:	4602      	mov	r2, r0
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e09f      	b.n	80041d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	212c      	movs	r1, #44	; 0x2c
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	3361      	adds	r3, #97	; 0x61
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d109      	bne.n	80040be <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	212c      	movs	r1, #44	; 0x2c
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	4413      	add	r3, r2
 80040b6:	3360      	adds	r3, #96	; 0x60
 80040b8:	2202      	movs	r2, #2
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	e08b      	b.n	80041d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	212c      	movs	r1, #44	; 0x2c
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	3361      	adds	r3, #97	; 0x61
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d109      	bne.n	80040e6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	212c      	movs	r1, #44	; 0x2c
 80040d8:	fb01 f303 	mul.w	r3, r1, r3
 80040dc:	4413      	add	r3, r2
 80040de:	3360      	adds	r3, #96	; 0x60
 80040e0:	2202      	movs	r2, #2
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	e077      	b.n	80041d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	212c      	movs	r1, #44	; 0x2c
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	4413      	add	r3, r2
 80040f2:	3361      	adds	r3, #97	; 0x61
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d109      	bne.n	800410e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	212c      	movs	r1, #44	; 0x2c
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	4413      	add	r3, r2
 8004106:	3360      	adds	r3, #96	; 0x60
 8004108:	2205      	movs	r2, #5
 800410a:	701a      	strb	r2, [r3, #0]
 800410c:	e063      	b.n	80041d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	212c      	movs	r1, #44	; 0x2c
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	4413      	add	r3, r2
 800411a:	3361      	adds	r3, #97	; 0x61
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b06      	cmp	r3, #6
 8004120:	d009      	beq.n	8004136 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	212c      	movs	r1, #44	; 0x2c
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	4413      	add	r3, r2
 800412e:	3361      	adds	r3, #97	; 0x61
 8004130:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004132:	2b08      	cmp	r3, #8
 8004134:	d14f      	bne.n	80041d6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	212c      	movs	r1, #44	; 0x2c
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	4413      	add	r3, r2
 8004142:	335c      	adds	r3, #92	; 0x5c
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	202c      	movs	r0, #44	; 0x2c
 800414e:	fb00 f303 	mul.w	r3, r0, r3
 8004152:	440b      	add	r3, r1
 8004154:	335c      	adds	r3, #92	; 0x5c
 8004156:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	335c      	adds	r3, #92	; 0x5c
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d912      	bls.n	8004192 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	212c      	movs	r1, #44	; 0x2c
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	4413      	add	r3, r2
 8004178:	335c      	adds	r3, #92	; 0x5c
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	212c      	movs	r1, #44	; 0x2c
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	3360      	adds	r3, #96	; 0x60
 800418c:	2204      	movs	r2, #4
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	e021      	b.n	80041d6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	212c      	movs	r1, #44	; 0x2c
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	3360      	adds	r3, #96	; 0x60
 80041a0:	2202      	movs	r2, #2
 80041a2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041ba:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041c2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d0:	461a      	mov	r2, r3
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e2:	461a      	mov	r2, r3
 80041e4:	2302      	movs	r3, #2
 80041e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	b2d9      	uxtb	r1, r3
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	202c      	movs	r0, #44	; 0x2c
 80041f2:	fb00 f303 	mul.w	r3, r0, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	3360      	adds	r3, #96	; 0x60
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f015 ffe0 	bl	801a1c4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004204:	bf00      	nop
 8004206:	3720      	adds	r7, #32
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	0c5b      	lsrs	r3, r3, #17
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004240:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d004      	beq.n	8004252 <HCD_RXQLVL_IRQHandler+0x46>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b05      	cmp	r3, #5
 800424c:	f000 80a9 	beq.w	80043a2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004250:	e0aa      	b.n	80043a8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80a6 	beq.w	80043a6 <HCD_RXQLVL_IRQHandler+0x19a>
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	212c      	movs	r1, #44	; 0x2c
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	4413      	add	r3, r2
 8004266:	3344      	adds	r3, #68	; 0x44
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 809b 	beq.w	80043a6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	212c      	movs	r1, #44	; 0x2c
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	4413      	add	r3, r2
 800427c:	3350      	adds	r3, #80	; 0x50
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	441a      	add	r2, r3
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	202c      	movs	r0, #44	; 0x2c
 800428a:	fb00 f303 	mul.w	r3, r0, r3
 800428e:	440b      	add	r3, r1
 8004290:	334c      	adds	r3, #76	; 0x4c
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d87a      	bhi.n	800438e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	212c      	movs	r1, #44	; 0x2c
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	3344      	adds	r3, #68	; 0x44
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	b292      	uxth	r2, r2
 80042b0:	4619      	mov	r1, r3
 80042b2:	f001 fbad 	bl	8005a10 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	212c      	movs	r1, #44	; 0x2c
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	4413      	add	r3, r2
 80042c2:	3344      	adds	r3, #68	; 0x44
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	441a      	add	r2, r3
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	202c      	movs	r0, #44	; 0x2c
 80042d0:	fb00 f303 	mul.w	r3, r0, r3
 80042d4:	440b      	add	r3, r1
 80042d6:	3344      	adds	r3, #68	; 0x44
 80042d8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	212c      	movs	r1, #44	; 0x2c
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	4413      	add	r3, r2
 80042e6:	3350      	adds	r3, #80	; 0x50
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	441a      	add	r2, r3
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	202c      	movs	r0, #44	; 0x2c
 80042f4:	fb00 f303 	mul.w	r3, r0, r3
 80042f8:	440b      	add	r3, r1
 80042fa:	3350      	adds	r3, #80	; 0x50
 80042fc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	4413      	add	r3, r2
 8004306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	0cdb      	lsrs	r3, r3, #19
 800430e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004312:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	212c      	movs	r1, #44	; 0x2c
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	3340      	adds	r3, #64	; 0x40
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4293      	cmp	r3, r2
 800432a:	d13c      	bne.n	80043a6 <HCD_RXQLVL_IRQHandler+0x19a>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d039      	beq.n	80043a6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	4413      	add	r3, r2
 800433a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004348:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004350:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	4413      	add	r3, r2
 800435a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435e:	461a      	mov	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	212c      	movs	r1, #44	; 0x2c
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	4413      	add	r3, r2
 8004370:	3354      	adds	r3, #84	; 0x54
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	f083 0301 	eor.w	r3, r3, #1
 8004378:	b2d8      	uxtb	r0, r3
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	212c      	movs	r1, #44	; 0x2c
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	4413      	add	r3, r2
 8004386:	3354      	adds	r3, #84	; 0x54
 8004388:	4602      	mov	r2, r0
 800438a:	701a      	strb	r2, [r3, #0]
      break;
 800438c:	e00b      	b.n	80043a6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	212c      	movs	r1, #44	; 0x2c
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	4413      	add	r3, r2
 800439a:	3360      	adds	r3, #96	; 0x60
 800439c:	2204      	movs	r2, #4
 800439e:	701a      	strb	r2, [r3, #0]
      break;
 80043a0:	e001      	b.n	80043a6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80043a2:	bf00      	nop
 80043a4:	e000      	b.n	80043a8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80043a6:	bf00      	nop
  }
}
 80043a8:	bf00      	nop
 80043aa:	3728      	adds	r7, #40	; 0x28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80043dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d10b      	bne.n	8004400 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d102      	bne.n	80043f8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f015 feca 	bl	801a18c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f043 0302 	orr.w	r3, r3, #2
 80043fe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b08      	cmp	r3, #8
 8004408:	d132      	bne.n	8004470 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f043 0308 	orr.w	r3, r3, #8
 8004410:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b04      	cmp	r3, #4
 800441a:	d126      	bne.n	800446a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d113      	bne.n	800444c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800442a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800442e:	d106      	bne.n	800443e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2102      	movs	r1, #2
 8004436:	4618      	mov	r0, r3
 8004438:	f001 fc4a 	bl	8005cd0 <USB_InitFSLSPClkSel>
 800443c:	e011      	b.n	8004462 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2101      	movs	r1, #1
 8004444:	4618      	mov	r0, r3
 8004446:	f001 fc43 	bl	8005cd0 <USB_InitFSLSPClkSel>
 800444a:	e00a      	b.n	8004462 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d106      	bne.n	8004462 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800445a:	461a      	mov	r2, r3
 800445c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004460:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f015 fec0 	bl	801a1e8 <HAL_HCD_PortEnabled_Callback>
 8004468:	e002      	b.n	8004470 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f015 feca 	bl	801a204 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b20      	cmp	r3, #32
 8004478:	d103      	bne.n	8004482 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f043 0320 	orr.w	r3, r3, #32
 8004480:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004488:	461a      	mov	r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	6013      	str	r3, [r2, #0]
}
 800448e:	bf00      	nop
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e264      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d075      	beq.n	80045a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044b6:	4ba3      	ldr	r3, [pc, #652]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d00c      	beq.n	80044dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c2:	4ba0      	ldr	r3, [pc, #640]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d112      	bne.n	80044f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ce:	4b9d      	ldr	r3, [pc, #628]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044da:	d10b      	bne.n	80044f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044dc:	4b99      	ldr	r3, [pc, #612]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d05b      	beq.n	80045a0 <HAL_RCC_OscConfig+0x108>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d157      	bne.n	80045a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e23f      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fc:	d106      	bne.n	800450c <HAL_RCC_OscConfig+0x74>
 80044fe:	4b91      	ldr	r3, [pc, #580]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a90      	ldr	r2, [pc, #576]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e01d      	b.n	8004548 <HAL_RCC_OscConfig+0xb0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004514:	d10c      	bne.n	8004530 <HAL_RCC_OscConfig+0x98>
 8004516:	4b8b      	ldr	r3, [pc, #556]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a8a      	ldr	r2, [pc, #552]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 800451c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	4b88      	ldr	r3, [pc, #544]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a87      	ldr	r2, [pc, #540]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e00b      	b.n	8004548 <HAL_RCC_OscConfig+0xb0>
 8004530:	4b84      	ldr	r3, [pc, #528]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a83      	ldr	r2, [pc, #524]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	4b81      	ldr	r3, [pc, #516]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a80      	ldr	r2, [pc, #512]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d013      	beq.n	8004578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7fc fd9a 	bl	8001088 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004558:	f7fc fd96 	bl	8001088 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	; 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e204      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	4b76      	ldr	r3, [pc, #472]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0xc0>
 8004576:	e014      	b.n	80045a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fc fd86 	bl	8001088 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004580:	f7fc fd82 	bl	8001088 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e1f0      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004592:	4b6c      	ldr	r3, [pc, #432]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0xe8>
 800459e:	e000      	b.n	80045a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d063      	beq.n	8004676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ae:	4b65      	ldr	r3, [pc, #404]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ba:	4b62      	ldr	r3, [pc, #392]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d11c      	bne.n	8004600 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c6:	4b5f      	ldr	r3, [pc, #380]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d116      	bne.n	8004600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d2:	4b5c      	ldr	r3, [pc, #368]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_RCC_OscConfig+0x152>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d001      	beq.n	80045ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e1c4      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ea:	4b56      	ldr	r3, [pc, #344]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4952      	ldr	r1, [pc, #328]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fe:	e03a      	b.n	8004676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004608:	4b4f      	ldr	r3, [pc, #316]	; (8004748 <HAL_RCC_OscConfig+0x2b0>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460e:	f7fc fd3b 	bl	8001088 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004616:	f7fc fd37 	bl	8001088 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e1a5      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004628:	4b46      	ldr	r3, [pc, #280]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004634:	4b43      	ldr	r3, [pc, #268]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4940      	ldr	r1, [pc, #256]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004644:	4313      	orrs	r3, r2
 8004646:	600b      	str	r3, [r1, #0]
 8004648:	e015      	b.n	8004676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800464a:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <HAL_RCC_OscConfig+0x2b0>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fc fd1a 	bl	8001088 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004658:	f7fc fd16 	bl	8001088 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e184      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466a:	4b36      	ldr	r3, [pc, #216]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d030      	beq.n	80046e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d016      	beq.n	80046b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468a:	4b30      	ldr	r3, [pc, #192]	; (800474c <HAL_RCC_OscConfig+0x2b4>)
 800468c:	2201      	movs	r2, #1
 800468e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004690:	f7fc fcfa 	bl	8001088 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004698:	f7fc fcf6 	bl	8001088 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e164      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046aa:	4b26      	ldr	r3, [pc, #152]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0x200>
 80046b6:	e015      	b.n	80046e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b8:	4b24      	ldr	r3, [pc, #144]	; (800474c <HAL_RCC_OscConfig+0x2b4>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046be:	f7fc fce3 	bl	8001088 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c6:	f7fc fcdf 	bl	8001088 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e14d      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d8:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80046da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f0      	bne.n	80046c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80a0 	beq.w	8004832 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f2:	2300      	movs	r3, #0
 80046f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f6:	4b13      	ldr	r3, [pc, #76]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10f      	bne.n	8004722 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	4a0e      	ldr	r2, [pc, #56]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 800470c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004710:	6413      	str	r3, [r2, #64]	; 0x40
 8004712:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471e:	2301      	movs	r3, #1
 8004720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004722:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCC_OscConfig+0x2b8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472a:	2b00      	cmp	r3, #0
 800472c:	d121      	bne.n	8004772 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800472e:	4b08      	ldr	r3, [pc, #32]	; (8004750 <HAL_RCC_OscConfig+0x2b8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a07      	ldr	r2, [pc, #28]	; (8004750 <HAL_RCC_OscConfig+0x2b8>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473a:	f7fc fca5 	bl	8001088 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004740:	e011      	b.n	8004766 <HAL_RCC_OscConfig+0x2ce>
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	42470000 	.word	0x42470000
 800474c:	42470e80 	.word	0x42470e80
 8004750:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004754:	f7fc fc98 	bl	8001088 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e106      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004766:	4b85      	ldr	r3, [pc, #532]	; (800497c <HAL_RCC_OscConfig+0x4e4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d106      	bne.n	8004788 <HAL_RCC_OscConfig+0x2f0>
 800477a:	4b81      	ldr	r3, [pc, #516]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	4a80      	ldr	r2, [pc, #512]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	6713      	str	r3, [r2, #112]	; 0x70
 8004786:	e01c      	b.n	80047c2 <HAL_RCC_OscConfig+0x32a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b05      	cmp	r3, #5
 800478e:	d10c      	bne.n	80047aa <HAL_RCC_OscConfig+0x312>
 8004790:	4b7b      	ldr	r3, [pc, #492]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	4a7a      	ldr	r2, [pc, #488]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 8004796:	f043 0304 	orr.w	r3, r3, #4
 800479a:	6713      	str	r3, [r2, #112]	; 0x70
 800479c:	4b78      	ldr	r3, [pc, #480]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	4a77      	ldr	r2, [pc, #476]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6713      	str	r3, [r2, #112]	; 0x70
 80047a8:	e00b      	b.n	80047c2 <HAL_RCC_OscConfig+0x32a>
 80047aa:	4b75      	ldr	r3, [pc, #468]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ae:	4a74      	ldr	r2, [pc, #464]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	6713      	str	r3, [r2, #112]	; 0x70
 80047b6:	4b72      	ldr	r3, [pc, #456]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	4a71      	ldr	r2, [pc, #452]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80047bc:	f023 0304 	bic.w	r3, r3, #4
 80047c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d015      	beq.n	80047f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ca:	f7fc fc5d 	bl	8001088 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fc fc59 	bl	8001088 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e0c5      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e8:	4b65      	ldr	r3, [pc, #404]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ee      	beq.n	80047d2 <HAL_RCC_OscConfig+0x33a>
 80047f4:	e014      	b.n	8004820 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f6:	f7fc fc47 	bl	8001088 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fe:	f7fc fc43 	bl	8001088 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	; 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e0af      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004814:	4b5a      	ldr	r3, [pc, #360]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1ee      	bne.n	80047fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d105      	bne.n	8004832 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004826:	4b56      	ldr	r3, [pc, #344]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	4a55      	ldr	r2, [pc, #340]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 800482c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004830:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 809b 	beq.w	8004972 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800483c:	4b50      	ldr	r3, [pc, #320]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 030c 	and.w	r3, r3, #12
 8004844:	2b08      	cmp	r3, #8
 8004846:	d05c      	beq.n	8004902 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d141      	bne.n	80048d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004850:	4b4c      	ldr	r3, [pc, #304]	; (8004984 <HAL_RCC_OscConfig+0x4ec>)
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004856:	f7fc fc17 	bl	8001088 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800485e:	f7fc fc13 	bl	8001088 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e081      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004870:	4b43      	ldr	r3, [pc, #268]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f0      	bne.n	800485e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	019b      	lsls	r3, r3, #6
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	085b      	lsrs	r3, r3, #1
 8004894:	3b01      	subs	r3, #1
 8004896:	041b      	lsls	r3, r3, #16
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	061b      	lsls	r3, r3, #24
 80048a0:	4937      	ldr	r1, [pc, #220]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a6:	4b37      	ldr	r3, [pc, #220]	; (8004984 <HAL_RCC_OscConfig+0x4ec>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7fc fbec 	bl	8001088 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b4:	f7fc fbe8 	bl	8001088 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e056      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c6:	4b2e      	ldr	r3, [pc, #184]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f0      	beq.n	80048b4 <HAL_RCC_OscConfig+0x41c>
 80048d2:	e04e      	b.n	8004972 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d4:	4b2b      	ldr	r3, [pc, #172]	; (8004984 <HAL_RCC_OscConfig+0x4ec>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048da:	f7fc fbd5 	bl	8001088 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e2:	f7fc fbd1 	bl	8001088 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e03f      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f4:	4b22      	ldr	r3, [pc, #136]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f0      	bne.n	80048e2 <HAL_RCC_OscConfig+0x44a>
 8004900:	e037      	b.n	8004972 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d101      	bne.n	800490e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e032      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800490e:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d028      	beq.n	800496e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004926:	429a      	cmp	r2, r3
 8004928:	d121      	bne.n	800496e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d11a      	bne.n	800496e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800493e:	4013      	ands	r3, r2
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004944:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004946:	4293      	cmp	r3, r2
 8004948:	d111      	bne.n	800496e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	3b01      	subs	r3, #1
 8004958:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d107      	bne.n	800496e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800496a:	429a      	cmp	r2, r3
 800496c:	d001      	beq.n	8004972 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40007000 	.word	0x40007000
 8004980:	40023800 	.word	0x40023800
 8004984:	42470060 	.word	0x42470060

08004988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e0cc      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800499c:	4b68      	ldr	r3, [pc, #416]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d90c      	bls.n	80049c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4b65      	ldr	r3, [pc, #404]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b2:	4b63      	ldr	r3, [pc, #396]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0b8      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d020      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049dc:	4b59      	ldr	r3, [pc, #356]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4a58      	ldr	r2, [pc, #352]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f4:	4b53      	ldr	r3, [pc, #332]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a52      	ldr	r2, [pc, #328]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a00:	4b50      	ldr	r3, [pc, #320]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	494d      	ldr	r1, [pc, #308]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d044      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d107      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a26:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d119      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e07f      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d107      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a46:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e06f      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a56:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e067      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a66:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f023 0203 	bic.w	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4934      	ldr	r1, [pc, #208]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a78:	f7fc fb06 	bl	8001088 <HAL_GetTick>
 8004a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a80:	f7fc fb02 	bl	8001088 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e04f      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a96:	4b2b      	ldr	r3, [pc, #172]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 020c 	and.w	r2, r3, #12
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d1eb      	bne.n	8004a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa8:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d20c      	bcs.n	8004ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab6:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abe:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e032      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004adc:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4916      	ldr	r1, [pc, #88]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	490e      	ldr	r1, [pc, #56]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b0e:	f000 f821 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	490a      	ldr	r1, [pc, #40]	; (8004b48 <HAL_RCC_ClockConfig+0x1c0>)
 8004b20:	5ccb      	ldrb	r3, [r1, r3]
 8004b22:	fa22 f303 	lsr.w	r3, r2, r3
 8004b26:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <HAL_RCC_ClockConfig+0x1c4>)
 8004b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fb ffa0 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40023c00 	.word	0x40023c00
 8004b44:	40023800 	.word	0x40023800
 8004b48:	0801ef80 	.word	0x0801ef80
 8004b4c:	20000000 	.word	0x20000000
 8004b50:	20000004 	.word	0x20000004

08004b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	607b      	str	r3, [r7, #4]
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	2300      	movs	r3, #0
 8004b66:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b6c:	4b67      	ldr	r3, [pc, #412]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 030c 	and.w	r3, r3, #12
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d00d      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x40>
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	f200 80bd 	bhi.w	8004cf8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x34>
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d003      	beq.n	8004b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b86:	e0b7      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b88:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b8a:	60bb      	str	r3, [r7, #8]
       break;
 8004b8c:	e0b7      	b.n	8004cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b8e:	4b61      	ldr	r3, [pc, #388]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004b90:	60bb      	str	r3, [r7, #8]
      break;
 8004b92:	e0b4      	b.n	8004cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b94:	4b5d      	ldr	r3, [pc, #372]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b9e:	4b5b      	ldr	r3, [pc, #364]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d04d      	beq.n	8004c46 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004baa:	4b58      	ldr	r3, [pc, #352]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	099b      	lsrs	r3, r3, #6
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	ea02 0800 	and.w	r8, r2, r0
 8004bc2:	ea03 0901 	and.w	r9, r3, r1
 8004bc6:	4640      	mov	r0, r8
 8004bc8:	4649      	mov	r1, r9
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	014b      	lsls	r3, r1, #5
 8004bd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bd8:	0142      	lsls	r2, r0, #5
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4619      	mov	r1, r3
 8004bde:	ebb0 0008 	subs.w	r0, r0, r8
 8004be2:	eb61 0109 	sbc.w	r1, r1, r9
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	018b      	lsls	r3, r1, #6
 8004bf0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bf4:	0182      	lsls	r2, r0, #6
 8004bf6:	1a12      	subs	r2, r2, r0
 8004bf8:	eb63 0301 	sbc.w	r3, r3, r1
 8004bfc:	f04f 0000 	mov.w	r0, #0
 8004c00:	f04f 0100 	mov.w	r1, #0
 8004c04:	00d9      	lsls	r1, r3, #3
 8004c06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c0a:	00d0      	lsls	r0, r2, #3
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	eb12 0208 	adds.w	r2, r2, r8
 8004c14:	eb43 0309 	adc.w	r3, r3, r9
 8004c18:	f04f 0000 	mov.w	r0, #0
 8004c1c:	f04f 0100 	mov.w	r1, #0
 8004c20:	0259      	lsls	r1, r3, #9
 8004c22:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004c26:	0250      	lsls	r0, r2, #9
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	461a      	mov	r2, r3
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	f7fb fb2a 	bl	8000290 <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4613      	mov	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	e04a      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c46:	4b31      	ldr	r3, [pc, #196]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	099b      	lsrs	r3, r3, #6
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c56:	f04f 0100 	mov.w	r1, #0
 8004c5a:	ea02 0400 	and.w	r4, r2, r0
 8004c5e:	ea03 0501 	and.w	r5, r3, r1
 8004c62:	4620      	mov	r0, r4
 8004c64:	4629      	mov	r1, r5
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	014b      	lsls	r3, r1, #5
 8004c70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c74:	0142      	lsls	r2, r0, #5
 8004c76:	4610      	mov	r0, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	1b00      	subs	r0, r0, r4
 8004c7c:	eb61 0105 	sbc.w	r1, r1, r5
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	018b      	lsls	r3, r1, #6
 8004c8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c8e:	0182      	lsls	r2, r0, #6
 8004c90:	1a12      	subs	r2, r2, r0
 8004c92:	eb63 0301 	sbc.w	r3, r3, r1
 8004c96:	f04f 0000 	mov.w	r0, #0
 8004c9a:	f04f 0100 	mov.w	r1, #0
 8004c9e:	00d9      	lsls	r1, r3, #3
 8004ca0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ca4:	00d0      	lsls	r0, r2, #3
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	1912      	adds	r2, r2, r4
 8004cac:	eb45 0303 	adc.w	r3, r5, r3
 8004cb0:	f04f 0000 	mov.w	r0, #0
 8004cb4:	f04f 0100 	mov.w	r1, #0
 8004cb8:	0299      	lsls	r1, r3, #10
 8004cba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004cbe:	0290      	lsls	r0, r2, #10
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	f7fb fade 	bl	8000290 <__aeabi_uldivmod>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4613      	mov	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	0c1b      	lsrs	r3, r3, #16
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	60bb      	str	r3, [r7, #8]
      break;
 8004cf6:	e002      	b.n	8004cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004cfa:	60bb      	str	r3, [r7, #8]
      break;
 8004cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	00f42400 	.word	0x00f42400
 8004d14:	007a1200 	.word	0x007a1200

08004d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d1c:	4b03      	ldr	r3, [pc, #12]	; (8004d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	20000000 	.word	0x20000000

08004d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d34:	f7ff fff0 	bl	8004d18 <HAL_RCC_GetHCLKFreq>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	0a9b      	lsrs	r3, r3, #10
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	4903      	ldr	r1, [pc, #12]	; (8004d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d46:	5ccb      	ldrb	r3, [r1, r3]
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40023800 	.word	0x40023800
 8004d54:	0801ef90 	.word	0x0801ef90

08004d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d5c:	f7ff ffdc 	bl	8004d18 <HAL_RCC_GetHCLKFreq>
 8004d60:	4602      	mov	r2, r0
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	0b5b      	lsrs	r3, r3, #13
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	4903      	ldr	r1, [pc, #12]	; (8004d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d6e:	5ccb      	ldrb	r3, [r1, r3]
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	0801ef90 	.word	0x0801ef90

08004d80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	220f      	movs	r2, #15
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d90:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <HAL_RCC_GetClockConfig+0x5c>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 0203 	and.w	r2, r3, #3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <HAL_RCC_GetClockConfig+0x5c>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004da8:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <HAL_RCC_GetClockConfig+0x5c>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004db4:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <HAL_RCC_GetClockConfig+0x5c>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	08db      	lsrs	r3, r3, #3
 8004dba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dc2:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <HAL_RCC_GetClockConfig+0x60>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 020f 	and.w	r2, r3, #15
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	601a      	str	r2, [r3, #0]
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	40023c00 	.word	0x40023c00

08004de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e041      	b.n	8004e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f839 	bl	8004e82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f000 f9d8 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d001      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e04e      	b.n	8004f4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a23      	ldr	r2, [pc, #140]	; (8004f5c <HAL_TIM_Base_Start_IT+0xc4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d022      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x80>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eda:	d01d      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x80>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1f      	ldr	r2, [pc, #124]	; (8004f60 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d018      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x80>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <HAL_TIM_Base_Start_IT+0xcc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d013      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x80>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00e      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x80>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <HAL_TIM_Base_Start_IT+0xd4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d009      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x80>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a19      	ldr	r2, [pc, #100]	; (8004f70 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x80>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d111      	bne.n	8004f3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b06      	cmp	r3, #6
 8004f28:	d010      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0201 	orr.w	r2, r2, #1
 8004f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3a:	e007      	b.n	8004f4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40010400 	.word	0x40010400
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40001800 	.word	0x40001800

08004f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d122      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d11b      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0202 	mvn.w	r2, #2
 8004fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f8ee 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f8e0 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f8f1 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d122      	bne.n	8005028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d11b      	bne.n	8005028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0204 	mvn.w	r2, #4
 8004ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8c4 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 8005014:	e005      	b.n	8005022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8b6 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f8c7 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b08      	cmp	r3, #8
 8005034:	d122      	bne.n	800507c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b08      	cmp	r3, #8
 8005042:	d11b      	bne.n	800507c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0208 	mvn.w	r2, #8
 800504c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2204      	movs	r2, #4
 8005052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f89a 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f88c 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f89d 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b10      	cmp	r3, #16
 8005088:	d122      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b10      	cmp	r3, #16
 8005096:	d11b      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0210 	mvn.w	r2, #16
 80050a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2208      	movs	r2, #8
 80050a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f870 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 80050bc:	e005      	b.n	80050ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f862 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f873 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d10e      	bne.n	80050fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0201 	mvn.w	r2, #1
 80050f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fb fc30 	bl	800095c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005106:	2b80      	cmp	r3, #128	; 0x80
 8005108:	d10e      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005114:	2b80      	cmp	r3, #128	; 0x80
 8005116:	d107      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f902 	bl	800532c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d10e      	bne.n	8005154 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d107      	bne.n	8005154 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800514c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f838 	bl	80051c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b20      	cmp	r3, #32
 8005160:	d10e      	bne.n	8005180 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b20      	cmp	r3, #32
 800516e:	d107      	bne.n	8005180 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0220 	mvn.w	r2, #32
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f8cc 	bl	8005318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a40      	ldr	r2, [pc, #256]	; (80052ec <TIM_Base_SetConfig+0x114>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f6:	d00f      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3d      	ldr	r2, [pc, #244]	; (80052f0 <TIM_Base_SetConfig+0x118>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00b      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3c      	ldr	r2, [pc, #240]	; (80052f4 <TIM_Base_SetConfig+0x11c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d007      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a3b      	ldr	r2, [pc, #236]	; (80052f8 <TIM_Base_SetConfig+0x120>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a3a      	ldr	r2, [pc, #232]	; (80052fc <TIM_Base_SetConfig+0x124>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d108      	bne.n	800522a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2f      	ldr	r2, [pc, #188]	; (80052ec <TIM_Base_SetConfig+0x114>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d02b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005238:	d027      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2c      	ldr	r2, [pc, #176]	; (80052f0 <TIM_Base_SetConfig+0x118>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d023      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2b      	ldr	r2, [pc, #172]	; (80052f4 <TIM_Base_SetConfig+0x11c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01f      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2a      	ldr	r2, [pc, #168]	; (80052f8 <TIM_Base_SetConfig+0x120>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a29      	ldr	r2, [pc, #164]	; (80052fc <TIM_Base_SetConfig+0x124>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d017      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a28      	ldr	r2, [pc, #160]	; (8005300 <TIM_Base_SetConfig+0x128>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a27      	ldr	r2, [pc, #156]	; (8005304 <TIM_Base_SetConfig+0x12c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00f      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a26      	ldr	r2, [pc, #152]	; (8005308 <TIM_Base_SetConfig+0x130>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a25      	ldr	r2, [pc, #148]	; (800530c <TIM_Base_SetConfig+0x134>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d007      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a24      	ldr	r2, [pc, #144]	; (8005310 <TIM_Base_SetConfig+0x138>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d003      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a23      	ldr	r2, [pc, #140]	; (8005314 <TIM_Base_SetConfig+0x13c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d108      	bne.n	800529c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <TIM_Base_SetConfig+0x114>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_Base_SetConfig+0xf8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a0c      	ldr	r2, [pc, #48]	; (80052fc <TIM_Base_SetConfig+0x124>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d103      	bne.n	80052d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	615a      	str	r2, [r3, #20]
}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40010000 	.word	0x40010000
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	40000c00 	.word	0x40000c00
 80052fc:	40010400 	.word	0x40010400
 8005300:	40014000 	.word	0x40014000
 8005304:	40014400 	.word	0x40014400
 8005308:	40014800 	.word	0x40014800
 800530c:	40001800 	.word	0x40001800
 8005310:	40001c00 	.word	0x40001c00
 8005314:	40002000 	.word	0x40002000

08005318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e03f      	b.n	80053d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fb fb3c 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	; 0x24
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f829 	bl	80053dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e0:	b09f      	sub	sp, #124	; 0x7c
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f2:	68d9      	ldr	r1, [r3, #12]
 80053f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	ea40 0301 	orr.w	r3, r0, r1
 80053fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	431a      	orrs	r2, r3
 8005408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	431a      	orrs	r2, r3
 800540e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	4313      	orrs	r3, r2
 8005414:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005420:	f021 010c 	bic.w	r1, r1, #12
 8005424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800542a:	430b      	orrs	r3, r1
 800542c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800542e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543a:	6999      	ldr	r1, [r3, #24]
 800543c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	ea40 0301 	orr.w	r3, r0, r1
 8005444:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	4bc5      	ldr	r3, [pc, #788]	; (8005760 <UART_SetConfig+0x384>)
 800544c:	429a      	cmp	r2, r3
 800544e:	d004      	beq.n	800545a <UART_SetConfig+0x7e>
 8005450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4bc3      	ldr	r3, [pc, #780]	; (8005764 <UART_SetConfig+0x388>)
 8005456:	429a      	cmp	r2, r3
 8005458:	d103      	bne.n	8005462 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800545a:	f7ff fc7d 	bl	8004d58 <HAL_RCC_GetPCLK2Freq>
 800545e:	6778      	str	r0, [r7, #116]	; 0x74
 8005460:	e002      	b.n	8005468 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005462:	f7ff fc65 	bl	8004d30 <HAL_RCC_GetPCLK1Freq>
 8005466:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005470:	f040 80b6 	bne.w	80055e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005476:	461c      	mov	r4, r3
 8005478:	f04f 0500 	mov.w	r5, #0
 800547c:	4622      	mov	r2, r4
 800547e:	462b      	mov	r3, r5
 8005480:	1891      	adds	r1, r2, r2
 8005482:	6439      	str	r1, [r7, #64]	; 0x40
 8005484:	415b      	adcs	r3, r3
 8005486:	647b      	str	r3, [r7, #68]	; 0x44
 8005488:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800548c:	1912      	adds	r2, r2, r4
 800548e:	eb45 0303 	adc.w	r3, r5, r3
 8005492:	f04f 0000 	mov.w	r0, #0
 8005496:	f04f 0100 	mov.w	r1, #0
 800549a:	00d9      	lsls	r1, r3, #3
 800549c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054a0:	00d0      	lsls	r0, r2, #3
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	1911      	adds	r1, r2, r4
 80054a8:	6639      	str	r1, [r7, #96]	; 0x60
 80054aa:	416b      	adcs	r3, r5
 80054ac:	667b      	str	r3, [r7, #100]	; 0x64
 80054ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	461a      	mov	r2, r3
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	1891      	adds	r1, r2, r2
 80054ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80054bc:	415b      	adcs	r3, r3
 80054be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80054c8:	f7fa fee2 	bl	8000290 <__aeabi_uldivmod>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4ba5      	ldr	r3, [pc, #660]	; (8005768 <UART_SetConfig+0x38c>)
 80054d2:	fba3 2302 	umull	r2, r3, r3, r2
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	011e      	lsls	r6, r3, #4
 80054da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054dc:	461c      	mov	r4, r3
 80054de:	f04f 0500 	mov.w	r5, #0
 80054e2:	4622      	mov	r2, r4
 80054e4:	462b      	mov	r3, r5
 80054e6:	1891      	adds	r1, r2, r2
 80054e8:	6339      	str	r1, [r7, #48]	; 0x30
 80054ea:	415b      	adcs	r3, r3
 80054ec:	637b      	str	r3, [r7, #52]	; 0x34
 80054ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054f2:	1912      	adds	r2, r2, r4
 80054f4:	eb45 0303 	adc.w	r3, r5, r3
 80054f8:	f04f 0000 	mov.w	r0, #0
 80054fc:	f04f 0100 	mov.w	r1, #0
 8005500:	00d9      	lsls	r1, r3, #3
 8005502:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005506:	00d0      	lsls	r0, r2, #3
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	1911      	adds	r1, r2, r4
 800550e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005510:	416b      	adcs	r3, r5
 8005512:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	461a      	mov	r2, r3
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	1891      	adds	r1, r2, r2
 8005520:	62b9      	str	r1, [r7, #40]	; 0x28
 8005522:	415b      	adcs	r3, r3
 8005524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005526:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800552a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800552e:	f7fa feaf 	bl	8000290 <__aeabi_uldivmod>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4b8c      	ldr	r3, [pc, #560]	; (8005768 <UART_SetConfig+0x38c>)
 8005538:	fba3 1302 	umull	r1, r3, r3, r2
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	2164      	movs	r1, #100	; 0x64
 8005540:	fb01 f303 	mul.w	r3, r1, r3
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	3332      	adds	r3, #50	; 0x32
 800554a:	4a87      	ldr	r2, [pc, #540]	; (8005768 <UART_SetConfig+0x38c>)
 800554c:	fba2 2303 	umull	r2, r3, r2, r3
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005558:	441e      	add	r6, r3
 800555a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800555c:	4618      	mov	r0, r3
 800555e:	f04f 0100 	mov.w	r1, #0
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	1894      	adds	r4, r2, r2
 8005568:	623c      	str	r4, [r7, #32]
 800556a:	415b      	adcs	r3, r3
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
 800556e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005572:	1812      	adds	r2, r2, r0
 8005574:	eb41 0303 	adc.w	r3, r1, r3
 8005578:	f04f 0400 	mov.w	r4, #0
 800557c:	f04f 0500 	mov.w	r5, #0
 8005580:	00dd      	lsls	r5, r3, #3
 8005582:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005586:	00d4      	lsls	r4, r2, #3
 8005588:	4622      	mov	r2, r4
 800558a:	462b      	mov	r3, r5
 800558c:	1814      	adds	r4, r2, r0
 800558e:	653c      	str	r4, [r7, #80]	; 0x50
 8005590:	414b      	adcs	r3, r1
 8005592:	657b      	str	r3, [r7, #84]	; 0x54
 8005594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	461a      	mov	r2, r3
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	1891      	adds	r1, r2, r2
 80055a0:	61b9      	str	r1, [r7, #24]
 80055a2:	415b      	adcs	r3, r3
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80055ae:	f7fa fe6f 	bl	8000290 <__aeabi_uldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4b6c      	ldr	r3, [pc, #432]	; (8005768 <UART_SetConfig+0x38c>)
 80055b8:	fba3 1302 	umull	r1, r3, r3, r2
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	2164      	movs	r1, #100	; 0x64
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	3332      	adds	r3, #50	; 0x32
 80055ca:	4a67      	ldr	r2, [pc, #412]	; (8005768 <UART_SetConfig+0x38c>)
 80055cc:	fba2 2303 	umull	r2, r3, r2, r3
 80055d0:	095b      	lsrs	r3, r3, #5
 80055d2:	f003 0207 	and.w	r2, r3, #7
 80055d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4432      	add	r2, r6
 80055dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055de:	e0b9      	b.n	8005754 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055e2:	461c      	mov	r4, r3
 80055e4:	f04f 0500 	mov.w	r5, #0
 80055e8:	4622      	mov	r2, r4
 80055ea:	462b      	mov	r3, r5
 80055ec:	1891      	adds	r1, r2, r2
 80055ee:	6139      	str	r1, [r7, #16]
 80055f0:	415b      	adcs	r3, r3
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055f8:	1912      	adds	r2, r2, r4
 80055fa:	eb45 0303 	adc.w	r3, r5, r3
 80055fe:	f04f 0000 	mov.w	r0, #0
 8005602:	f04f 0100 	mov.w	r1, #0
 8005606:	00d9      	lsls	r1, r3, #3
 8005608:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800560c:	00d0      	lsls	r0, r2, #3
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	eb12 0804 	adds.w	r8, r2, r4
 8005616:	eb43 0905 	adc.w	r9, r3, r5
 800561a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4618      	mov	r0, r3
 8005620:	f04f 0100 	mov.w	r1, #0
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	008b      	lsls	r3, r1, #2
 800562e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005632:	0082      	lsls	r2, r0, #2
 8005634:	4640      	mov	r0, r8
 8005636:	4649      	mov	r1, r9
 8005638:	f7fa fe2a 	bl	8000290 <__aeabi_uldivmod>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4b49      	ldr	r3, [pc, #292]	; (8005768 <UART_SetConfig+0x38c>)
 8005642:	fba3 2302 	umull	r2, r3, r3, r2
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	011e      	lsls	r6, r3, #4
 800564a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800564c:	4618      	mov	r0, r3
 800564e:	f04f 0100 	mov.w	r1, #0
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	1894      	adds	r4, r2, r2
 8005658:	60bc      	str	r4, [r7, #8]
 800565a:	415b      	adcs	r3, r3
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005662:	1812      	adds	r2, r2, r0
 8005664:	eb41 0303 	adc.w	r3, r1, r3
 8005668:	f04f 0400 	mov.w	r4, #0
 800566c:	f04f 0500 	mov.w	r5, #0
 8005670:	00dd      	lsls	r5, r3, #3
 8005672:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005676:	00d4      	lsls	r4, r2, #3
 8005678:	4622      	mov	r2, r4
 800567a:	462b      	mov	r3, r5
 800567c:	1814      	adds	r4, r2, r0
 800567e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005680:	414b      	adcs	r3, r1
 8005682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4618      	mov	r0, r3
 800568a:	f04f 0100 	mov.w	r1, #0
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	f04f 0300 	mov.w	r3, #0
 8005696:	008b      	lsls	r3, r1, #2
 8005698:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800569c:	0082      	lsls	r2, r0, #2
 800569e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80056a2:	f7fa fdf5 	bl	8000290 <__aeabi_uldivmod>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4b2f      	ldr	r3, [pc, #188]	; (8005768 <UART_SetConfig+0x38c>)
 80056ac:	fba3 1302 	umull	r1, r3, r3, r2
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	2164      	movs	r1, #100	; 0x64
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	3332      	adds	r3, #50	; 0x32
 80056be:	4a2a      	ldr	r2, [pc, #168]	; (8005768 <UART_SetConfig+0x38c>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056ca:	441e      	add	r6, r3
 80056cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ce:	4618      	mov	r0, r3
 80056d0:	f04f 0100 	mov.w	r1, #0
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	1894      	adds	r4, r2, r2
 80056da:	603c      	str	r4, [r7, #0]
 80056dc:	415b      	adcs	r3, r3
 80056de:	607b      	str	r3, [r7, #4]
 80056e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056e4:	1812      	adds	r2, r2, r0
 80056e6:	eb41 0303 	adc.w	r3, r1, r3
 80056ea:	f04f 0400 	mov.w	r4, #0
 80056ee:	f04f 0500 	mov.w	r5, #0
 80056f2:	00dd      	lsls	r5, r3, #3
 80056f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056f8:	00d4      	lsls	r4, r2, #3
 80056fa:	4622      	mov	r2, r4
 80056fc:	462b      	mov	r3, r5
 80056fe:	eb12 0a00 	adds.w	sl, r2, r0
 8005702:	eb43 0b01 	adc.w	fp, r3, r1
 8005706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	4618      	mov	r0, r3
 800570c:	f04f 0100 	mov.w	r1, #0
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	008b      	lsls	r3, r1, #2
 800571a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800571e:	0082      	lsls	r2, r0, #2
 8005720:	4650      	mov	r0, sl
 8005722:	4659      	mov	r1, fp
 8005724:	f7fa fdb4 	bl	8000290 <__aeabi_uldivmod>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4b0e      	ldr	r3, [pc, #56]	; (8005768 <UART_SetConfig+0x38c>)
 800572e:	fba3 1302 	umull	r1, r3, r3, r2
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	2164      	movs	r1, #100	; 0x64
 8005736:	fb01 f303 	mul.w	r3, r1, r3
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	3332      	adds	r3, #50	; 0x32
 8005740:	4a09      	ldr	r2, [pc, #36]	; (8005768 <UART_SetConfig+0x38c>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	f003 020f 	and.w	r2, r3, #15
 800574c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4432      	add	r2, r6
 8005752:	609a      	str	r2, [r3, #8]
}
 8005754:	bf00      	nop
 8005756:	377c      	adds	r7, #124	; 0x7c
 8005758:	46bd      	mov	sp, r7
 800575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575e:	bf00      	nop
 8005760:	40011000 	.word	0x40011000
 8005764:	40011400 	.word	0x40011400
 8005768:	51eb851f 	.word	0x51eb851f

0800576c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800576c:	b084      	sub	sp, #16
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	f107 001c 	add.w	r0, r7, #28
 800577a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	2b01      	cmp	r3, #1
 8005782:	d122      	bne.n	80057ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d105      	bne.n	80057be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f9a0 	bl	8005b04 <USB_CoreReset>
 80057c4:	4603      	mov	r3, r0
 80057c6:	73fb      	strb	r3, [r7, #15]
 80057c8:	e01a      	b.n	8005800 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f994 	bl	8005b04 <USB_CoreReset>
 80057dc:	4603      	mov	r3, r0
 80057de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
 80057f2:	e005      	b.n	8005800 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	2b01      	cmp	r3, #1
 8005804:	d10b      	bne.n	800581e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f043 0206 	orr.w	r2, r3, #6
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f043 0220 	orr.w	r2, r3, #32
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800582a:	b004      	add	sp, #16
 800582c:	4770      	bx	lr

0800582e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f043 0201 	orr.w	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f023 0201 	bic.w	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	460b      	mov	r3, r1
 800587c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800588e:	78fb      	ldrb	r3, [r7, #3]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d115      	bne.n	80058c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058a0:	2001      	movs	r0, #1
 80058a2:	f7fb fbfd 	bl	80010a0 <HAL_Delay>
      ms++;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3301      	adds	r3, #1
 80058aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f91a 	bl	8005ae6 <USB_GetMode>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d01e      	beq.n	80058f6 <USB_SetCurrentMode+0x84>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b31      	cmp	r3, #49	; 0x31
 80058bc:	d9f0      	bls.n	80058a0 <USB_SetCurrentMode+0x2e>
 80058be:	e01a      	b.n	80058f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d115      	bne.n	80058f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058d2:	2001      	movs	r0, #1
 80058d4:	f7fb fbe4 	bl	80010a0 <HAL_Delay>
      ms++;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3301      	adds	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f901 	bl	8005ae6 <USB_GetMode>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <USB_SetCurrentMode+0x84>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b31      	cmp	r3, #49	; 0x31
 80058ee:	d9f0      	bls.n	80058d2 <USB_SetCurrentMode+0x60>
 80058f0:	e001      	b.n	80058f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e005      	b.n	8005902 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b32      	cmp	r3, #50	; 0x32
 80058fa:	d101      	bne.n	8005900 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e000      	b.n	8005902 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	019b      	lsls	r3, r3, #6
 800591e:	f043 0220 	orr.w	r2, r3, #32
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3301      	adds	r3, #1
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	4a08      	ldr	r2, [pc, #32]	; (8005950 <USB_FlushTxFifo+0x44>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e006      	b.n	8005944 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b20      	cmp	r3, #32
 8005940:	d0f1      	beq.n	8005926 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	00030d40 	.word	0x00030d40

08005954 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2210      	movs	r2, #16
 8005964:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3301      	adds	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	4a08      	ldr	r2, [pc, #32]	; (8005990 <USB_FlushRxFifo+0x3c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e006      	b.n	8005984 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0310 	and.w	r3, r3, #16
 800597e:	2b10      	cmp	r3, #16
 8005980:	d0f1      	beq.n	8005966 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	00030d40 	.word	0x00030d40

08005994 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005994:	b480      	push	{r7}
 8005996:	b089      	sub	sp, #36	; 0x24
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	4611      	mov	r1, r2
 80059a0:	461a      	mov	r2, r3
 80059a2:	460b      	mov	r3, r1
 80059a4:	71fb      	strb	r3, [r7, #7]
 80059a6:	4613      	mov	r3, r2
 80059a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d123      	bne.n	8005a02 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059ba:	88bb      	ldrh	r3, [r7, #4]
 80059bc:	3303      	adds	r3, #3
 80059be:	089b      	lsrs	r3, r3, #2
 80059c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059c2:	2300      	movs	r3, #0
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	e018      	b.n	80059fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	031a      	lsls	r2, r3, #12
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d4:	461a      	mov	r2, r3
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	3301      	adds	r3, #1
 80059e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	3301      	adds	r3, #1
 80059e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	3301      	adds	r3, #1
 80059ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	3301      	adds	r3, #1
 80059f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	3301      	adds	r3, #1
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d3e2      	bcc.n	80059c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3724      	adds	r7, #36	; 0x24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b08b      	sub	sp, #44	; 0x2c
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	089b      	lsrs	r3, r3, #2
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a2e:	88fb      	ldrh	r3, [r7, #6]
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a36:	2300      	movs	r3, #0
 8005a38:	623b      	str	r3, [r7, #32]
 8005a3a:	e014      	b.n	8005a66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	3301      	adds	r3, #1
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	3301      	adds	r3, #1
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	3301      	adds	r3, #1
 8005a64:	623b      	str	r3, [r7, #32]
 8005a66:	6a3a      	ldr	r2, [r7, #32]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d3e6      	bcc.n	8005a3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a6e:	8bfb      	ldrh	r3, [r7, #30]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01e      	beq.n	8005ab2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f107 0310 	add.w	r3, r7, #16
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	fa22 f303 	lsr.w	r3, r2, r3
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	701a      	strb	r2, [r3, #0]
      i++;
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005aa6:	8bfb      	ldrh	r3, [r7, #30]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005aac:	8bfb      	ldrh	r3, [r7, #30]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1ea      	bne.n	8005a88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	372c      	adds	r7, #44	; 0x2c
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f003 0301 	and.w	r3, r3, #1
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3301      	adds	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <USB_CoreReset+0x60>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d901      	bls.n	8005b20 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e01a      	b.n	8005b56 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	daf3      	bge.n	8005b10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f043 0201 	orr.w	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	4a09      	ldr	r2, [pc, #36]	; (8005b64 <USB_CoreReset+0x60>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d901      	bls.n	8005b48 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e006      	b.n	8005b56 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d0f1      	beq.n	8005b38 <USB_CoreReset+0x34>

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	00030d40 	.word	0x00030d40

08005b68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b68:	b084      	sub	sp, #16
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	f107 001c 	add.w	r0, r7, #28
 8005b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b84:	461a      	mov	r2, r3
 8005b86:	2300      	movs	r3, #0
 8005b88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d018      	beq.n	8005bec <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d10a      	bne.n	8005bd6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bce:	f043 0304 	orr.w	r3, r3, #4
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	e014      	b.n	8005c00 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005be4:	f023 0304 	bic.w	r3, r3, #4
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	e009      	b.n	8005c00 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bfa:	f023 0304 	bic.w	r3, r3, #4
 8005bfe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005c00:	2110      	movs	r1, #16
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff fe82 	bl	800590c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7ff fea3 	bl	8005954 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	e015      	b.n	8005c40 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c20:	461a      	mov	r2, r3
 8005c22:	f04f 33ff 	mov.w	r3, #4294967295
 8005c26:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c34:	461a      	mov	r2, r3
 8005c36:	2300      	movs	r3, #0
 8005c38:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d3e5      	bcc.n	8005c14 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f04f 32ff 	mov.w	r2, #4294967295
 8005c54:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00b      	beq.n	8005c7a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c68:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <USB_HostInit+0x154>)
 8005c6e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a13      	ldr	r2, [pc, #76]	; (8005cc0 <USB_HostInit+0x158>)
 8005c74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005c78:	e009      	b.n	8005c8e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2280      	movs	r2, #128	; 0x80
 8005c7e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a10      	ldr	r2, [pc, #64]	; (8005cc4 <USB_HostInit+0x15c>)
 8005c84:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a0f      	ldr	r2, [pc, #60]	; (8005cc8 <USB_HostInit+0x160>)
 8005c8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d105      	bne.n	8005ca0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	f043 0210 	orr.w	r2, r3, #16
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699a      	ldr	r2, [r3, #24]
 8005ca4:	4b09      	ldr	r3, [pc, #36]	; (8005ccc <USB_HostInit+0x164>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cb8:	b004      	add	sp, #16
 8005cba:	4770      	bx	lr
 8005cbc:	01000200 	.word	0x01000200
 8005cc0:	00e00300 	.word	0x00e00300
 8005cc4:	00600080 	.word	0x00600080
 8005cc8:	004000e0 	.word	0x004000e0
 8005ccc:	a3200008 	.word	0xa3200008

08005cd0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	68f9      	ldr	r1, [r7, #12]
 8005d04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d107      	bne.n	8005d22 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d1e:	6053      	str	r3, [r2, #4]
 8005d20:	e009      	b.n	8005d36 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d106      	bne.n	8005d36 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d34:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d64:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d72:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d74:	2064      	movs	r0, #100	; 0x64
 8005d76:	f7fb f993 	bl	80010a0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d86:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005d88:	200a      	movs	r0, #10
 8005d8a:	f7fb f989 	bl	80010a0 <HAL_Delay>

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005dbc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d109      	bne.n	8005ddc <USB_DriveVbus+0x44>
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d106      	bne.n	8005ddc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dda:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de6:	d109      	bne.n	8005dfc <USB_DriveVbus+0x64>
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dfa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	0c5b      	lsrs	r3, r3, #17
 8005e28:	f003 0303 	and.w	r3, r3, #3
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	b29b      	uxth	r3, r3
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	4608      	mov	r0, r1
 8005e66:	4611      	mov	r1, r2
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	70fb      	strb	r3, [r7, #3]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	70bb      	strb	r3, [r7, #2]
 8005e72:	4613      	mov	r3, r2
 8005e74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005e7e:	78fb      	ldrb	r3, [r7, #3]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e90:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d87e      	bhi.n	8005f98 <USB_HC_Init+0x13c>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <USB_HC_Init+0x44>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005eb1 	.word	0x08005eb1
 8005ea4:	08005f5b 	.word	0x08005f5b
 8005ea8:	08005eb1 	.word	0x08005eb1
 8005eac:	08005f1d 	.word	0x08005f1d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ec2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ec4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	da10      	bge.n	8005eee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eea:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005eec:	e057      	b.n	8005f9e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d051      	beq.n	8005f9e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005efa:	78fb      	ldrb	r3, [r7, #3]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	78fa      	ldrb	r2, [r7, #3]
 8005f0a:	0151      	lsls	r1, r2, #5
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	440a      	add	r2, r1
 8005f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f18:	60d3      	str	r3, [r2, #12]
      break;
 8005f1a:	e040      	b.n	8005f9e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	da34      	bge.n	8005fa2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f56:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f58:	e023      	b.n	8005fa2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f66:	461a      	mov	r2, r3
 8005f68:	f240 2325 	movw	r3, #549	; 0x225
 8005f6c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	da17      	bge.n	8005fa6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	78fa      	ldrb	r2, [r7, #3]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f90:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005f94:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005f96:	e006      	b.n	8005fa6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	77fb      	strb	r3, [r7, #31]
      break;
 8005f9c:	e004      	b.n	8005fa8 <USB_HC_Init+0x14c>
      break;
 8005f9e:	bf00      	nop
 8005fa0:	e002      	b.n	8005fa8 <USB_HC_Init+0x14c>
      break;
 8005fa2:	bf00      	nop
 8005fa4:	e000      	b.n	8005fa8 <USB_HC_Init+0x14c>
      break;
 8005fa6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fae:	699a      	ldr	r2, [r3, #24]
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fbc:	6939      	ldr	r1, [r7, #16]
 8005fbe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005fd2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	da03      	bge.n	8005fe2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	e001      	b.n	8005fe6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff ff0f 	bl	8005e0a <USB_GetHostSpeed>
 8005fec:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005fee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d106      	bne.n	8006004 <USB_HC_Init+0x1a8>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d003      	beq.n	8006004 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e001      	b.n	8006008 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006008:	787b      	ldrb	r3, [r7, #1]
 800600a:	059b      	lsls	r3, r3, #22
 800600c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006010:	78bb      	ldrb	r3, [r7, #2]
 8006012:	02db      	lsls	r3, r3, #11
 8006014:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006018:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800601a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800601e:	049b      	lsls	r3, r3, #18
 8006020:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006024:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006026:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006028:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800602c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	0159      	lsls	r1, r3, #5
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	440b      	add	r3, r1
 800603a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006044:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006046:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800604a:	2b03      	cmp	r3, #3
 800604c:	d10f      	bne.n	800606e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	78fa      	ldrb	r2, [r7, #3]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	440a      	add	r2, r1
 8006064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006068:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800606c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800606e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08c      	sub	sp, #48	; 0x30
 800607c:	af02      	add	r7, sp, #8
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	4613      	mov	r3, r2
 8006084:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006094:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d02d      	beq.n	80060fe <USB_HC_StartXfer+0x86>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	791b      	ldrb	r3, [r3, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d129      	bne.n	80060fe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d117      	bne.n	80060e0 <USB_HC_StartXfer+0x68>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	79db      	ldrb	r3, [r3, #7]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <USB_HC_StartXfer+0x48>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	79db      	ldrb	r3, [r3, #7]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d10f      	bne.n	80060e0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	69fa      	ldr	r2, [r7, #28]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	6a3a      	ldr	r2, [r7, #32]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060de:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10b      	bne.n	80060fe <USB_HC_StartXfer+0x86>
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	795b      	ldrb	r3, [r3, #5]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d107      	bne.n	80060fe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	785b      	ldrb	r3, [r3, #1]
 80060f2:	4619      	mov	r1, r3
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fa2f 	bl	8006558 <USB_DoPing>
      return HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	e0f8      	b.n	80062f0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d018      	beq.n	8006138 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	8912      	ldrh	r2, [r2, #8]
 800610e:	4413      	add	r3, r2
 8006110:	3b01      	subs	r3, #1
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	8912      	ldrh	r2, [r2, #8]
 8006116:	fbb3 f3f2 	udiv	r3, r3, r2
 800611a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800611c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800611e:	8b7b      	ldrh	r3, [r7, #26]
 8006120:	429a      	cmp	r2, r3
 8006122:	d90b      	bls.n	800613c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006124:	8b7b      	ldrh	r3, [r7, #26]
 8006126:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006128:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	8912      	ldrh	r2, [r2, #8]
 800612e:	fb02 f203 	mul.w	r2, r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	611a      	str	r2, [r3, #16]
 8006136:	e001      	b.n	800613c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006138:	2301      	movs	r3, #1
 800613a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	78db      	ldrb	r3, [r3, #3]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d007      	beq.n	8006154 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006144:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	8912      	ldrh	r2, [r2, #8]
 800614a:	fb02 f203 	mul.w	r2, r2, r3
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	611a      	str	r2, [r3, #16]
 8006152:	e003      	b.n	800615c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	695a      	ldr	r2, [r3, #20]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006164:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006166:	04d9      	lsls	r1, r3, #19
 8006168:	4b63      	ldr	r3, [pc, #396]	; (80062f8 <USB_HC_StartXfer+0x280>)
 800616a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800616c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	7a9b      	ldrb	r3, [r3, #10]
 8006172:	075b      	lsls	r3, r3, #29
 8006174:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006178:	69f9      	ldr	r1, [r7, #28]
 800617a:	0148      	lsls	r0, r1, #5
 800617c:	6a39      	ldr	r1, [r7, #32]
 800617e:	4401      	add	r1, r0
 8006180:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006184:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006186:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	68d9      	ldr	r1, [r3, #12]
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	4413      	add	r3, r2
 800619a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619e:	460a      	mov	r2, r1
 80061a0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	bf0c      	ite	eq
 80061b2:	2301      	moveq	r3, #1
 80061b4:	2300      	movne	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	6a3a      	ldr	r2, [r7, #32]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061d8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	7e7b      	ldrb	r3, [r7, #25]
 80061ea:	075b      	lsls	r3, r3, #29
 80061ec:	69f9      	ldr	r1, [r7, #28]
 80061ee:	0148      	lsls	r0, r1, #5
 80061f0:	6a39      	ldr	r1, [r7, #32]
 80061f2:	4401      	add	r1, r0
 80061f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80061f8:	4313      	orrs	r3, r2
 80061fa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	4413      	add	r3, r2
 8006204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006212:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	78db      	ldrb	r3, [r3, #3]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d004      	beq.n	8006226 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	e003      	b.n	800622e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800622c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006234:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	4413      	add	r3, r2
 800623e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006242:	461a      	mov	r2, r3
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	e04e      	b.n	80062f0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	78db      	ldrb	r3, [r3, #3]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d149      	bne.n	80062ee <USB_HC_StartXfer+0x276>
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d045      	beq.n	80062ee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	79db      	ldrb	r3, [r3, #7]
 8006266:	2b03      	cmp	r3, #3
 8006268:	d830      	bhi.n	80062cc <USB_HC_StartXfer+0x254>
 800626a:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <USB_HC_StartXfer+0x1f8>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	08006281 	.word	0x08006281
 8006274:	080062a5 	.word	0x080062a5
 8006278:	08006281 	.word	0x08006281
 800627c:	080062a5 	.word	0x080062a5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	3303      	adds	r3, #3
 8006286:	089b      	lsrs	r3, r3, #2
 8006288:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800628a:	8afa      	ldrh	r2, [r7, #22]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	b29b      	uxth	r3, r3
 8006292:	429a      	cmp	r2, r3
 8006294:	d91c      	bls.n	80062d0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	f043 0220 	orr.w	r2, r3, #32
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80062a2:	e015      	b.n	80062d0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	3303      	adds	r3, #3
 80062aa:	089b      	lsrs	r3, r3, #2
 80062ac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80062ae:	8afa      	ldrh	r2, [r7, #22]
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d90a      	bls.n	80062d4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80062ca:	e003      	b.n	80062d4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80062cc:	bf00      	nop
 80062ce:	e002      	b.n	80062d6 <USB_HC_StartXfer+0x25e>
        break;
 80062d0:	bf00      	nop
 80062d2:	e000      	b.n	80062d6 <USB_HC_StartXfer+0x25e>
        break;
 80062d4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	68d9      	ldr	r1, [r3, #12]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	785a      	ldrb	r2, [r3, #1]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2000      	movs	r0, #0
 80062e6:	9000      	str	r0, [sp, #0]
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f7ff fb53 	bl	8005994 <USB_WritePacket>
  }

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3728      	adds	r7, #40	; 0x28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	1ff80000 	.word	0x1ff80000

080062fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	b29b      	uxth	r3, r3
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800631e:	b480      	push	{r7}
 8006320:	b089      	sub	sp, #36	; 0x24
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	4413      	add	r3, r2
 800633e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	0c9b      	lsrs	r3, r3, #18
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	4413      	add	r3, r2
 8006354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	0fdb      	lsrs	r3, r3, #31
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b20      	cmp	r3, #32
 800636c:	d104      	bne.n	8006378 <USB_HC_Halt+0x5a>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	e0e8      	b.n	800654a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <USB_HC_Halt+0x66>
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d173      	bne.n	800646c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	4413      	add	r3, r2
 800638c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	440a      	add	r2, r1
 800639a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800639e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063a2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f040 80cb 	bne.w	8006548 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d143      	bne.n	8006446 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	0151      	lsls	r1, r2, #5
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	440a      	add	r2, r1
 80063d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063dc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	0151      	lsls	r1, r2, #5
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	440a      	add	r2, r1
 80063f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063fc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	4413      	add	r3, r2
 8006406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	440a      	add	r2, r1
 8006414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006418:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800641c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	3301      	adds	r3, #1
 8006422:	61fb      	str	r3, [r7, #28]
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800642a:	d81d      	bhi.n	8006468 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	4413      	add	r3, r2
 8006434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800643e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006442:	d0ec      	beq.n	800641e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006444:	e080      	b.n	8006548 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	4413      	add	r3, r2
 800644e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	440a      	add	r2, r1
 800645c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006464:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006466:	e06f      	b.n	8006548 <USB_HC_Halt+0x22a>
            break;
 8006468:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800646a:	e06d      	b.n	8006548 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	4413      	add	r3, r2
 8006474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	0151      	lsls	r1, r2, #5
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	440a      	add	r2, r1
 8006482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006486:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800648a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d143      	bne.n	8006524 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	0151      	lsls	r1, r2, #5
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	440a      	add	r2, r1
 80064d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064fa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	3301      	adds	r3, #1
 8006500:	61fb      	str	r3, [r7, #28]
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006508:	d81d      	bhi.n	8006546 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800651c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006520:	d0ec      	beq.n	80064fc <USB_HC_Halt+0x1de>
 8006522:	e011      	b.n	8006548 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	4413      	add	r3, r2
 800652c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	440a      	add	r2, r1
 800653a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800653e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	e000      	b.n	8006548 <USB_HC_Halt+0x22a>
          break;
 8006546:	bf00      	nop
    }
  }

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3724      	adds	r7, #36	; 0x24
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800656c:	2301      	movs	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	04da      	lsls	r2, r3, #19
 8006574:	4b15      	ldr	r3, [pc, #84]	; (80065cc <USB_DoPing+0x74>)
 8006576:	4013      	ands	r3, r2
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	0151      	lsls	r1, r2, #5
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	440a      	add	r2, r1
 8006580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006588:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4413      	add	r3, r2
 8006592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b6:	461a      	mov	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	1ff80000 	.word	0x1ff80000

080065d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff f935 	bl	8005850 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80065e6:	2110      	movs	r1, #16
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff f98f 	bl	800590c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff f9b0 	bl	8005954 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80065f4:	2300      	movs	r3, #0
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	e01f      	b.n	800663a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006610:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006618:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006620:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662e:	461a      	mov	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	3301      	adds	r3, #1
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b0f      	cmp	r3, #15
 800663e:	d9dc      	bls.n	80065fa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006640:	2300      	movs	r3, #0
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	e034      	b.n	80066b0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4413      	add	r3, r2
 800664e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800665c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006664:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800666c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667a:	461a      	mov	r2, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	3301      	adds	r3, #1
 8006684:	617b      	str	r3, [r7, #20]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800668c:	d80c      	bhi.n	80066a8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4413      	add	r3, r2
 8006696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066a4:	d0ec      	beq.n	8006680 <USB_StopHost+0xb0>
 80066a6:	e000      	b.n	80066aa <USB_StopHost+0xda>
        break;
 80066a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	3301      	adds	r3, #1
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b0f      	cmp	r3, #15
 80066b4:	d9c7      	bls.n	8006646 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066bc:	461a      	mov	r2, r3
 80066be:	f04f 33ff 	mov.w	r3, #4294967295
 80066c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff f8ae 	bl	800582e <USB_EnableGlobalInt>

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80066e0:	4904      	ldr	r1, [pc, #16]	; (80066f4 <MX_FATFS_Init+0x18>)
 80066e2:	4805      	ldr	r0, [pc, #20]	; (80066f8 <MX_FATFS_Init+0x1c>)
 80066e4:	f004 fb34 	bl	800ad50 <FATFS_LinkDriver>
 80066e8:	4603      	mov	r3, r0
 80066ea:	461a      	mov	r2, r3
 80066ec:	4b03      	ldr	r3, [pc, #12]	; (80066fc <MX_FATFS_Init+0x20>)
 80066ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  // f_mount(&USBHFatFS, USBHPath, 0);
  /* USER CODE END Init */
}
 80066f0:	bf00      	nop
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	2000871c 	.word	0x2000871c
 80066f8:	0801ef98 	.word	0x0801ef98
 80066fc:	20008b88 	.word	0x20008b88

08006700 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	4619      	mov	r1, r3
 800672a:	4808      	ldr	r0, [pc, #32]	; (800674c <USBH_status+0x34>)
 800672c:	f001 fc78 	bl	8008020 <USBH_MSC_UnitIsReady>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <USBH_status+0x24>
  {
    res = RES_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]
 800673a:	e001      	b.n	8006740 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	2000f444 	.word	0x2000f444

08006750 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b094      	sub	sp, #80	; 0x50
 8006754:	af02      	add	r7, sp, #8
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	607a      	str	r2, [r7, #4]
 800675a:	603b      	str	r3, [r7, #0]
 800675c:	4603      	mov	r3, r0
 800675e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006766:	7bf9      	ldrb	r1, [r7, #15]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	4818      	ldr	r0, [pc, #96]	; (80067d4 <USBH_read+0x84>)
 8006772:	f001 fc9f 	bl	80080b4 <USBH_MSC_Read>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d103      	bne.n	8006784 <USBH_read+0x34>
  {
    res = RES_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006782:	e020      	b.n	80067c6 <USBH_read+0x76>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006784:	f107 0210 	add.w	r2, r7, #16
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	4619      	mov	r1, r3
 800678c:	4811      	ldr	r0, [pc, #68]	; (80067d4 <USBH_read+0x84>)
 800678e:	f001 fc6d 	bl	800806c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006792:	7f7b      	ldrb	r3, [r7, #29]
 8006794:	2b3a      	cmp	r3, #58	; 0x3a
 8006796:	d005      	beq.n	80067a4 <USBH_read+0x54>
 8006798:	2b3a      	cmp	r3, #58	; 0x3a
 800679a:	dc10      	bgt.n	80067be <USBH_read+0x6e>
 800679c:	2b04      	cmp	r3, #4
 800679e:	d001      	beq.n	80067a4 <USBH_read+0x54>
 80067a0:	2b28      	cmp	r3, #40	; 0x28
 80067a2:	d10c      	bne.n	80067be <USBH_read+0x6e>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 80067a4:	480c      	ldr	r0, [pc, #48]	; (80067d8 <USBH_read+0x88>)
 80067a6:	f014 f95f 	bl	801aa68 <iprintf>
 80067aa:	480c      	ldr	r0, [pc, #48]	; (80067dc <USBH_read+0x8c>)
 80067ac:	f014 f95c 	bl	801aa68 <iprintf>
 80067b0:	200a      	movs	r0, #10
 80067b2:	f014 f971 	bl	801aa98 <putchar>
      res = RES_NOTRDY;
 80067b6:	2303      	movs	r3, #3
 80067b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80067bc:	e003      	b.n	80067c6 <USBH_read+0x76>

    default:
      res = RES_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80067c4:	bf00      	nop
    }
  }

  return res;
 80067c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3748      	adds	r7, #72	; 0x48
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	2000f444 	.word	0x2000f444
 80067d8:	0801ba44 	.word	0x0801ba44
 80067dc:	0801ba4c 	.word	0x0801ba4c

080067e0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b094      	sub	sp, #80	; 0x50
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	607a      	str	r2, [r7, #4]
 80067ea:	603b      	str	r3, [r7, #0]
 80067ec:	4603      	mov	r3, r0
 80067ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80067f6:	7bf9      	ldrb	r1, [r7, #15]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	4820      	ldr	r0, [pc, #128]	; (8006884 <USBH_write+0xa4>)
 8006802:	f001 fcc0 	bl	8008186 <USBH_MSC_Write>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d103      	bne.n	8006814 <USBH_write+0x34>
  {
    res = RES_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006812:	e031      	b.n	8006878 <USBH_write+0x98>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006814:	f107 0210 	add.w	r2, r7, #16
 8006818:	7bfb      	ldrb	r3, [r7, #15]
 800681a:	4619      	mov	r1, r3
 800681c:	4819      	ldr	r0, [pc, #100]	; (8006884 <USBH_write+0xa4>)
 800681e:	f001 fc25 	bl	800806c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006822:	7f7b      	ldrb	r3, [r7, #29]
 8006824:	2b3a      	cmp	r3, #58	; 0x3a
 8006826:	d016      	beq.n	8006856 <USBH_write+0x76>
 8006828:	2b3a      	cmp	r3, #58	; 0x3a
 800682a:	dc21      	bgt.n	8006870 <USBH_write+0x90>
 800682c:	2b28      	cmp	r3, #40	; 0x28
 800682e:	d012      	beq.n	8006856 <USBH_write+0x76>
 8006830:	2b28      	cmp	r3, #40	; 0x28
 8006832:	dc1d      	bgt.n	8006870 <USBH_write+0x90>
 8006834:	2b04      	cmp	r3, #4
 8006836:	d00e      	beq.n	8006856 <USBH_write+0x76>
 8006838:	2b27      	cmp	r3, #39	; 0x27
 800683a:	d119      	bne.n	8006870 <USBH_write+0x90>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 800683c:	4812      	ldr	r0, [pc, #72]	; (8006888 <USBH_write+0xa8>)
 800683e:	f014 f913 	bl	801aa68 <iprintf>
 8006842:	4812      	ldr	r0, [pc, #72]	; (800688c <USBH_write+0xac>)
 8006844:	f014 f910 	bl	801aa68 <iprintf>
 8006848:	200a      	movs	r0, #10
 800684a:	f014 f925 	bl	801aa98 <putchar>
      res = RES_WRPRT;
 800684e:	2302      	movs	r3, #2
 8006850:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006854:	e010      	b.n	8006878 <USBH_write+0x98>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 8006856:	480c      	ldr	r0, [pc, #48]	; (8006888 <USBH_write+0xa8>)
 8006858:	f014 f906 	bl	801aa68 <iprintf>
 800685c:	480c      	ldr	r0, [pc, #48]	; (8006890 <USBH_write+0xb0>)
 800685e:	f014 f903 	bl	801aa68 <iprintf>
 8006862:	200a      	movs	r0, #10
 8006864:	f014 f918 	bl	801aa98 <putchar>
      res = RES_NOTRDY;
 8006868:	2303      	movs	r3, #3
 800686a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800686e:	e003      	b.n	8006878 <USBH_write+0x98>

    default:
      res = RES_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006876:	bf00      	nop
    }
  }

  return res;
 8006878:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800687c:	4618      	mov	r0, r3
 800687e:	3748      	adds	r7, #72	; 0x48
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	2000f444 	.word	0x2000f444
 8006888:	0801ba44 	.word	0x0801ba44
 800688c:	0801ba64 	.word	0x0801ba64
 8006890:	0801ba4c 	.word	0x0801ba4c

08006894 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b090      	sub	sp, #64	; 0x40
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	603a      	str	r2, [r7, #0]
 800689e:	71fb      	strb	r3, [r7, #7]
 80068a0:	460b      	mov	r3, r1
 80068a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80068aa:	79bb      	ldrb	r3, [r7, #6]
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d852      	bhi.n	8006956 <USBH_ioctl+0xc2>
 80068b0:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <USBH_ioctl+0x24>)
 80068b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b6:	bf00      	nop
 80068b8:	080068c9 	.word	0x080068c9
 80068bc:	080068d1 	.word	0x080068d1
 80068c0:	080068fb 	.word	0x080068fb
 80068c4:	08006927 	.word	0x08006927
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80068ce:	e045      	b.n	800695c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80068d0:	f107 0208 	add.w	r2, r7, #8
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	4619      	mov	r1, r3
 80068d8:	4823      	ldr	r0, [pc, #140]	; (8006968 <USBH_ioctl+0xd4>)
 80068da:	f001 fbc7 	bl	800806c <USBH_MSC_GetLUNInfo>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d106      	bne.n	80068f2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80068f0:	e034      	b.n	800695c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80068f8:	e030      	b.n	800695c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80068fa:	f107 0208 	add.w	r2, r7, #8
 80068fe:	79fb      	ldrb	r3, [r7, #7]
 8006900:	4619      	mov	r1, r3
 8006902:	4819      	ldr	r0, [pc, #100]	; (8006968 <USBH_ioctl+0xd4>)
 8006904:	f001 fbb2 	bl	800806c <USBH_MSC_GetLUNInfo>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d107      	bne.n	800691e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800690e:	8a3b      	ldrh	r3, [r7, #16]
 8006910:	461a      	mov	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800691c:	e01e      	b.n	800695c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006924:	e01a      	b.n	800695c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006926:	f107 0208 	add.w	r2, r7, #8
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	4619      	mov	r1, r3
 800692e:	480e      	ldr	r0, [pc, #56]	; (8006968 <USBH_ioctl+0xd4>)
 8006930:	f001 fb9c 	bl	800806c <USBH_MSC_GetLUNInfo>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d109      	bne.n	800694e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800693a:	8a3b      	ldrh	r3, [r7, #16]
 800693c:	0a5b      	lsrs	r3, r3, #9
 800693e:	b29b      	uxth	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800694c:	e006      	b.n	800695c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006954:	e002      	b.n	800695c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006956:	2304      	movs	r3, #4
 8006958:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800695c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006960:	4618      	mov	r0, r3
 8006962:	3740      	adds	r7, #64	; 0x40
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	2000f444 	.word	0x2000f444

0800696c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800696c:	b5b0      	push	{r4, r5, r7, lr}
 800696e:	b08e      	sub	sp, #56	; 0x38
 8006970:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006972:	2100      	movs	r1, #0
 8006974:	2000      	movs	r0, #0
 8006976:	f007 fa81 	bl	800de7c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800697a:	4b2a      	ldr	r3, [pc, #168]	; (8006a24 <MX_LWIP_Init+0xb8>)
 800697c:	2200      	movs	r2, #0
 800697e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8006980:	4b29      	ldr	r3, [pc, #164]	; (8006a28 <MX_LWIP_Init+0xbc>)
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8006986:	4b29      	ldr	r3, [pc, #164]	; (8006a2c <MX_LWIP_Init+0xc0>)
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800698c:	4b28      	ldr	r3, [pc, #160]	; (8006a30 <MX_LWIP_Init+0xc4>)
 800698e:	9302      	str	r3, [sp, #8]
 8006990:	4b28      	ldr	r3, [pc, #160]	; (8006a34 <MX_LWIP_Init+0xc8>)
 8006992:	9301      	str	r3, [sp, #4]
 8006994:	2300      	movs	r3, #0
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	4b24      	ldr	r3, [pc, #144]	; (8006a2c <MX_LWIP_Init+0xc0>)
 800699a:	4a23      	ldr	r2, [pc, #140]	; (8006a28 <MX_LWIP_Init+0xbc>)
 800699c:	4921      	ldr	r1, [pc, #132]	; (8006a24 <MX_LWIP_Init+0xb8>)
 800699e:	4826      	ldr	r0, [pc, #152]	; (8006a38 <MX_LWIP_Init+0xcc>)
 80069a0:	f007 fff0 	bl	800e984 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80069a4:	4824      	ldr	r0, [pc, #144]	; (8006a38 <MX_LWIP_Init+0xcc>)
 80069a6:	f008 f9a7 	bl	800ecf8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80069aa:	4b23      	ldr	r3, [pc, #140]	; (8006a38 <MX_LWIP_Init+0xcc>)
 80069ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80069b0:	089b      	lsrs	r3, r3, #2
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80069bc:	481e      	ldr	r0, [pc, #120]	; (8006a38 <MX_LWIP_Init+0xcc>)
 80069be:	f008 f9ab 	bl	800ed18 <netif_set_up>
 80069c2:	e002      	b.n	80069ca <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80069c4:	481c      	ldr	r0, [pc, #112]	; (8006a38 <MX_LWIP_Init+0xcc>)
 80069c6:	f008 fa13 	bl	800edf0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80069ca:	491c      	ldr	r1, [pc, #112]	; (8006a3c <MX_LWIP_Init+0xd0>)
 80069cc:	481a      	ldr	r0, [pc, #104]	; (8006a38 <MX_LWIP_Init+0xcc>)
 80069ce:	f008 faa9 	bl	800ef24 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80069d2:	2300      	movs	r3, #0
 80069d4:	623b      	str	r3, [r7, #32]
 80069d6:	2300      	movs	r3, #0
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80069da:	f107 0320 	add.w	r3, r7, #32
 80069de:	2101      	movs	r1, #1
 80069e0:	4618      	mov	r0, r3
 80069e2:	f004 fb01 	bl	800afe8 <osSemaphoreCreate>
 80069e6:	4603      	mov	r3, r0
 80069e8:	4a15      	ldr	r2, [pc, #84]	; (8006a40 <MX_LWIP_Init+0xd4>)
 80069ea:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80069ec:	4b15      	ldr	r3, [pc, #84]	; (8006a44 <MX_LWIP_Init+0xd8>)
 80069ee:	4a12      	ldr	r2, [pc, #72]	; (8006a38 <MX_LWIP_Init+0xcc>)
 80069f0:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80069f2:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <MX_LWIP_Init+0xd4>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a13      	ldr	r2, [pc, #76]	; (8006a44 <MX_LWIP_Init+0xd8>)
 80069f8:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80069fa:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <MX_LWIP_Init+0xdc>)
 80069fc:	1d3c      	adds	r4, r7, #4
 80069fe:	461d      	mov	r5, r3
 8006a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006a08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8006a0c:	1d3b      	adds	r3, r7, #4
 8006a0e:	490d      	ldr	r1, [pc, #52]	; (8006a44 <MX_LWIP_Init+0xd8>)
 8006a10:	4618      	mov	r0, r3
 8006a12:	f004 f9ed 	bl	800adf0 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006a16:	4808      	ldr	r0, [pc, #32]	; (8006a38 <MX_LWIP_Init+0xcc>)
 8006a18:	f00f fbe6 	bl	80161e8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006a1c:	bf00      	nop
 8006a1e:	3728      	adds	r7, #40	; 0x28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bdb0      	pop	{r4, r5, r7, pc}
 8006a24:	20008bcc 	.word	0x20008bcc
 8006a28:	20008bd0 	.word	0x20008bd0
 8006a2c:	20008bd4 	.word	0x20008bd4
 8006a30:	0800ddb9 	.word	0x0800ddb9
 8006a34:	080070bd 	.word	0x080070bd
 8006a38:	20008b94 	.word	0x20008b94
 8006a3c:	080071a1 	.word	0x080071a1
 8006a40:	2000037c 	.word	0x2000037c
 8006a44:	20008b8c 	.word	0x20008b8c
 8006a48:	0801ba8c 	.word	0x0801ba8c

08006a4c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08e      	sub	sp, #56	; 0x38
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	605a      	str	r2, [r3, #4]
 8006a5e:	609a      	str	r2, [r3, #8]
 8006a60:	60da      	str	r2, [r3, #12]
 8006a62:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a59      	ldr	r2, [pc, #356]	; (8006bd0 <HAL_ETH_MspInit+0x184>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	f040 80ac 	bne.w	8006bc8 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006a70:	2300      	movs	r3, #0
 8006a72:	623b      	str	r3, [r7, #32]
 8006a74:	4b57      	ldr	r3, [pc, #348]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a78:	4a56      	ldr	r2, [pc, #344]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006a7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8006a80:	4b54      	ldr	r3, [pc, #336]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a88:	623b      	str	r3, [r7, #32]
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61fb      	str	r3, [r7, #28]
 8006a90:	4b50      	ldr	r3, [pc, #320]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a94:	4a4f      	ldr	r2, [pc, #316]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006a96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8006a9c:	4b4d      	ldr	r3, [pc, #308]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006aa4:	61fb      	str	r3, [r7, #28]
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	61bb      	str	r3, [r7, #24]
 8006aac:	4b49      	ldr	r3, [pc, #292]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab0:	4a48      	ldr	r2, [pc, #288]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006ab2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8006ab8:	4b46      	ldr	r3, [pc, #280]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ac0:	61bb      	str	r3, [r7, #24]
 8006ac2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	4b42      	ldr	r3, [pc, #264]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006acc:	4a41      	ldr	r2, [pc, #260]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006ace:	f043 0304 	orr.w	r3, r3, #4
 8006ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ad4:	4b3f      	ldr	r3, [pc, #252]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	4b3b      	ldr	r3, [pc, #236]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae8:	4a3a      	ldr	r2, [pc, #232]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006aea:	f043 0301 	orr.w	r3, r3, #1
 8006aee:	6313      	str	r3, [r2, #48]	; 0x30
 8006af0:	4b38      	ldr	r3, [pc, #224]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	613b      	str	r3, [r7, #16]
 8006afa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	4b34      	ldr	r3, [pc, #208]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b04:	4a33      	ldr	r2, [pc, #204]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006b06:	f043 0302 	orr.w	r3, r3, #2
 8006b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8006b0c:	4b31      	ldr	r3, [pc, #196]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60bb      	str	r3, [r7, #8]
 8006b1c:	4b2d      	ldr	r3, [pc, #180]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b20:	4a2c      	ldr	r2, [pc, #176]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b26:	6313      	str	r3, [r2, #48]	; 0x30
 8006b28:	4b2a      	ldr	r3, [pc, #168]	; (8006bd4 <HAL_ETH_MspInit+0x188>)
 8006b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b30:	60bb      	str	r3, [r7, #8]
 8006b32:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006b34:	2332      	movs	r3, #50	; 0x32
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b40:	2303      	movs	r3, #3
 8006b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b44:	230b      	movs	r3, #11
 8006b46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4822      	ldr	r0, [pc, #136]	; (8006bd8 <HAL_ETH_MspInit+0x18c>)
 8006b50:	f7fb fd52 	bl	80025f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006b54:	2386      	movs	r3, #134	; 0x86
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b60:	2303      	movs	r3, #3
 8006b62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b64:	230b      	movs	r3, #11
 8006b66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	481b      	ldr	r0, [pc, #108]	; (8006bdc <HAL_ETH_MspInit+0x190>)
 8006b70:	f7fb fd42 	bl	80025f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b82:	2303      	movs	r3, #3
 8006b84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b86:	230b      	movs	r3, #11
 8006b88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4813      	ldr	r0, [pc, #76]	; (8006be0 <HAL_ETH_MspInit+0x194>)
 8006b92:	f7fb fd31 	bl	80025f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006b96:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ba8:	230b      	movs	r3, #11
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	480c      	ldr	r0, [pc, #48]	; (8006be4 <HAL_ETH_MspInit+0x198>)
 8006bb4:	f7fb fd20 	bl	80025f8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2105      	movs	r1, #5
 8006bbc:	203d      	movs	r0, #61	; 0x3d
 8006bbe:	f7fa fb4b 	bl	8001258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006bc2:	203d      	movs	r0, #61	; 0x3d
 8006bc4:	f7fa fb64 	bl	8001290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006bc8:	bf00      	nop
 8006bca:	3738      	adds	r7, #56	; 0x38
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	40028000 	.word	0x40028000
 8006bd4:	40023800 	.word	0x40023800
 8006bd8:	40020800 	.word	0x40020800
 8006bdc:	40020000 	.word	0x40020000
 8006be0:	40020400 	.word	0x40020400
 8006be4:	40021800 	.word	0x40021800

08006be8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8006bf0:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <HAL_ETH_RxCpltCallback+0x1c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f004 fa77 	bl	800b0e8 <osSemaphoreRelease>
}
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000380 	.word	0x20000380

08006c08 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006c08:	b5b0      	push	{r4, r5, r7, lr}
 8006c0a:	b090      	sub	sp, #64	; 0x40
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006c10:	2300      	movs	r3, #0
 8006c12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006c14:	4b60      	ldr	r3, [pc, #384]	; (8006d98 <low_level_init+0x190>)
 8006c16:	4a61      	ldr	r2, [pc, #388]	; (8006d9c <low_level_init+0x194>)
 8006c18:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006c1a:	4b5f      	ldr	r3, [pc, #380]	; (8006d98 <low_level_init+0x190>)
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006c20:	4b5d      	ldr	r3, [pc, #372]	; (8006d98 <low_level_init+0x190>)
 8006c22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c26:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006c28:	4b5b      	ldr	r3, [pc, #364]	; (8006d98 <low_level_init+0x190>)
 8006c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c2e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006c30:	4b59      	ldr	r3, [pc, #356]	; (8006d98 <low_level_init+0x190>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0xB0;
 8006c36:	23b0      	movs	r3, #176	; 0xb0
 8006c38:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x41;
 8006c3c:	2341      	movs	r3, #65	; 0x41
 8006c3e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0x9B;
 8006c42:	239b      	movs	r3, #155	; 0x9b
 8006c44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xF3;
 8006c48:	23f3      	movs	r3, #243	; 0xf3
 8006c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x1D;
 8006c4e:	231d      	movs	r3, #29
 8006c50:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x7E;
 8006c54:	237e      	movs	r3, #126	; 0x7e
 8006c56:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8006c5a:	4a4f      	ldr	r2, [pc, #316]	; (8006d98 <low_level_init+0x190>)
 8006c5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c60:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006c62:	4b4d      	ldr	r3, [pc, #308]	; (8006d98 <low_level_init+0x190>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006c68:	4b4b      	ldr	r3, [pc, #300]	; (8006d98 <low_level_init+0x190>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006c6e:	4b4a      	ldr	r3, [pc, #296]	; (8006d98 <low_level_init+0x190>)
 8006c70:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006c74:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006c76:	4848      	ldr	r0, [pc, #288]	; (8006d98 <low_level_init+0x190>)
 8006c78:	f7fa fb18 	bl	80012ac <HAL_ETH_Init>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006c82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d108      	bne.n	8006c9c <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006c90:	f043 0304 	orr.w	r3, r3, #4
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006c9c:	2304      	movs	r3, #4
 8006c9e:	4a40      	ldr	r2, [pc, #256]	; (8006da0 <low_level_init+0x198>)
 8006ca0:	4940      	ldr	r1, [pc, #256]	; (8006da4 <low_level_init+0x19c>)
 8006ca2:	483d      	ldr	r0, [pc, #244]	; (8006d98 <low_level_init+0x190>)
 8006ca4:	f7fa fc9e 	bl	80015e4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006ca8:	2304      	movs	r3, #4
 8006caa:	4a3f      	ldr	r2, [pc, #252]	; (8006da8 <low_level_init+0x1a0>)
 8006cac:	493f      	ldr	r1, [pc, #252]	; (8006dac <low_level_init+0x1a4>)
 8006cae:	483a      	ldr	r0, [pc, #232]	; (8006d98 <low_level_init+0x190>)
 8006cb0:	f7fa fd01 	bl	80016b6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2206      	movs	r2, #6
 8006cb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006cbc:	4b36      	ldr	r3, [pc, #216]	; (8006d98 <low_level_init+0x190>)
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	781a      	ldrb	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006cc8:	4b33      	ldr	r3, [pc, #204]	; (8006d98 <low_level_init+0x190>)
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	785a      	ldrb	r2, [r3, #1]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006cd4:	4b30      	ldr	r3, [pc, #192]	; (8006d98 <low_level_init+0x190>)
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	789a      	ldrb	r2, [r3, #2]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006ce0:	4b2d      	ldr	r3, [pc, #180]	; (8006d98 <low_level_init+0x190>)
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	78da      	ldrb	r2, [r3, #3]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006cec:	4b2a      	ldr	r3, [pc, #168]	; (8006d98 <low_level_init+0x190>)
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	791a      	ldrb	r2, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006cf8:	4b27      	ldr	r3, [pc, #156]	; (8006d98 <low_level_init+0x190>)
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	795a      	ldrb	r2, [r3, #5]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006d0a:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d12:	f043 030a 	orr.w	r3, r3, #10
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d22:	2300      	movs	r3, #0
 8006d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f004 f95b 	bl	800afe8 <osSemaphoreCreate>
 8006d32:	4603      	mov	r3, r0
 8006d34:	4a1e      	ldr	r2, [pc, #120]	; (8006db0 <low_level_init+0x1a8>)
 8006d36:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006d38:	4b1e      	ldr	r3, [pc, #120]	; (8006db4 <low_level_init+0x1ac>)
 8006d3a:	f107 040c 	add.w	r4, r7, #12
 8006d3e:	461d      	mov	r5, r3
 8006d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006d48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006d4c:	f107 030c 	add.w	r3, r7, #12
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f004 f84c 	bl	800adf0 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006d58:	480f      	ldr	r0, [pc, #60]	; (8006d98 <low_level_init+0x190>)
 8006d5a:	f7fa ffd4 	bl	8001d06 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006d5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d62:	461a      	mov	r2, r3
 8006d64:	211d      	movs	r1, #29
 8006d66:	480c      	ldr	r0, [pc, #48]	; (8006d98 <low_level_init+0x190>)
 8006d68:	f7fa feff 	bl	8001b6a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	f043 030b 	orr.w	r3, r3, #11
 8006d72:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d76:	461a      	mov	r2, r3
 8006d78:	211d      	movs	r1, #29
 8006d7a:	4807      	ldr	r0, [pc, #28]	; (8006d98 <low_level_init+0x190>)
 8006d7c:	f7fa ff5d 	bl	8001c3a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006d80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d84:	461a      	mov	r2, r3
 8006d86:	211d      	movs	r1, #29
 8006d88:	4803      	ldr	r0, [pc, #12]	; (8006d98 <low_level_init+0x190>)
 8006d8a:	f7fa feee 	bl	8001b6a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006d8e:	bf00      	nop
 8006d90:	3740      	adds	r7, #64	; 0x40
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bdb0      	pop	{r4, r5, r7, pc}
 8006d96:	bf00      	nop
 8006d98:	2000a4a8 	.word	0x2000a4a8
 8006d9c:	40028000 	.word	0x40028000
 8006da0:	2000a4f0 	.word	0x2000a4f0
 8006da4:	20008bd8 	.word	0x20008bd8
 8006da8:	20008c58 	.word	0x20008c58
 8006dac:	2000a428 	.word	0x2000a428
 8006db0:	20000380 	.word	0x20000380
 8006db4:	0801bab0 	.word	0x0801bab0

08006db8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08a      	sub	sp, #40	; 0x28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006dc2:	4b4b      	ldr	r3, [pc, #300]	; (8006ef0 <low_level_output+0x138>)
 8006dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006dda:	4b45      	ldr	r3, [pc, #276]	; (8006ef0 <low_level_output+0x138>)
 8006ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dde:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	623b      	str	r3, [r7, #32]
 8006de8:	e05a      	b.n	8006ea0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	da03      	bge.n	8006dfa <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006df2:	23f8      	movs	r3, #248	; 0xf8
 8006df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006df8:	e05c      	b.n	8006eb4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	895b      	ldrh	r3, [r3, #10]
 8006dfe:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006e04:	e02f      	b.n	8006e66 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	18d0      	adds	r0, r2, r3
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	18d1      	adds	r1, r2, r3
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f013 fd63 	bl	801a8e8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	da03      	bge.n	8006e38 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006e30:	23f8      	movs	r3, #248	; 0xf8
 8006e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006e36:	e03d      	b.n	8006eb4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006e48:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006e54:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006e60:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d8c8      	bhi.n	8006e06 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	18d0      	adds	r0, r2, r3
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	4413      	add	r3, r2
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	4619      	mov	r1, r3
 8006e86:	f013 fd2f 	bl	801a8e8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	623b      	str	r3, [r7, #32]
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1a1      	bne.n	8006dea <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006ea6:	6979      	ldr	r1, [r7, #20]
 8006ea8:	4811      	ldr	r0, [pc, #68]	; (8006ef0 <low_level_output+0x138>)
 8006eaa:	f7fa fc71 	bl	8001790 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006eb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ef0 <low_level_output+0x138>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ebc:	3314      	adds	r3, #20
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0320 	and.w	r3, r3, #32
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00d      	beq.n	8006ee4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006ec8:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <low_level_output+0x138>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ed0:	3314      	adds	r3, #20
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006ed6:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <low_level_output+0x138>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ede:	3304      	adds	r3, #4
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8006ee4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3728      	adds	r7, #40	; 0x28
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	2000a4a8 	.word	0x2000a4a8

08006ef4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08c      	sub	sp, #48	; 0x30
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006efc:	2300      	movs	r3, #0
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006f18:	484f      	ldr	r0, [pc, #316]	; (8007058 <low_level_input+0x164>)
 8006f1a:	f7fa fd23 	bl	8001964 <HAL_ETH_GetReceivedFrame_IT>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <low_level_input+0x34>

    return NULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	e092      	b.n	800704e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006f28:	4b4b      	ldr	r3, [pc, #300]	; (8007058 <low_level_input+0x164>)
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006f2e:	4b4a      	ldr	r3, [pc, #296]	; (8007058 <low_level_input+0x164>)
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006f34:	89fb      	ldrh	r3, [r7, #14]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d007      	beq.n	8006f4a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006f3a:	89fb      	ldrh	r3, [r7, #14]
 8006f3c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006f40:	4619      	mov	r1, r3
 8006f42:	2000      	movs	r0, #0
 8006f44:	f008 f8b8 	bl	800f0b8 <pbuf_alloc>
 8006f48:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8006f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d04b      	beq.n	8006fe8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006f50:	4b41      	ldr	r3, [pc, #260]	; (8007058 <low_level_input+0x164>)
 8006f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f54:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f5e:	e040      	b.n	8006fe2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	895b      	ldrh	r3, [r3, #10]
 8006f64:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006f6a:	e021      	b.n	8006fb0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	18d0      	adds	r0, r2, r3
 8006f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	18d1      	adds	r1, r2, r3
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006f80:	3304      	adds	r3, #4
 8006f82:	461a      	mov	r2, r3
 8006f84:	f013 fcb0 	bl	801a8e8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006f94:	69fa      	ldr	r2, [r7, #28]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006f9e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006faa:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006fac:	2300      	movs	r3, #0
 8006fae:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d8d6      	bhi.n	8006f6c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	18d0      	adds	r0, r2, r3
 8006fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	4413      	add	r3, r2
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	f013 fc8a 	bl	801a8e8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	4413      	add	r3, r2
 8006fda:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1bb      	bne.n	8006f60 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006fe8:	4b1b      	ldr	r3, [pc, #108]	; (8007058 <low_level_input+0x164>)
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006fee:	2300      	movs	r3, #0
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	e00b      	b.n	800700c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	3301      	adds	r3, #1
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	4b12      	ldr	r3, [pc, #72]	; (8007058 <low_level_input+0x164>)
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	429a      	cmp	r2, r3
 8007014:	d3ee      	bcc.n	8006ff4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007016:	4b10      	ldr	r3, [pc, #64]	; (8007058 <low_level_input+0x164>)
 8007018:	2200      	movs	r2, #0
 800701a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800701c:	4b0e      	ldr	r3, [pc, #56]	; (8007058 <low_level_input+0x164>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007024:	3314      	adds	r3, #20
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00d      	beq.n	800704c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007030:	4b09      	ldr	r3, [pc, #36]	; (8007058 <low_level_input+0x164>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007038:	3314      	adds	r3, #20
 800703a:	2280      	movs	r2, #128	; 0x80
 800703c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800703e:	4b06      	ldr	r3, [pc, #24]	; (8007058 <low_level_input+0x164>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007046:	3308      	adds	r3, #8
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800704e:	4618      	mov	r0, r3
 8007050:	3730      	adds	r7, #48	; 0x30
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	2000a4a8 	.word	0x2000a4a8

0800705c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007068:	4b12      	ldr	r3, [pc, #72]	; (80070b4 <ethernetif_input+0x58>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f04f 31ff 	mov.w	r1, #4294967295
 8007070:	4618      	mov	r0, r3
 8007072:	f003 ffeb 	bl	800b04c <osSemaphoreWait>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1f5      	bne.n	8007068 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800707c:	480e      	ldr	r0, [pc, #56]	; (80070b8 <ethernetif_input+0x5c>)
 800707e:	f012 ff61 	bl	8019f44 <sys_mutex_lock>
        p = low_level_input( netif );
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f7ff ff36 	bl	8006ef4 <low_level_input>
 8007088:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	68f9      	ldr	r1, [r7, #12]
 8007096:	68b8      	ldr	r0, [r7, #8]
 8007098:	4798      	blx	r3
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80070a0:	68b8      	ldr	r0, [r7, #8]
 80070a2:	f008 faed 	bl	800f680 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80070a6:	4804      	ldr	r0, [pc, #16]	; (80070b8 <ethernetif_input+0x5c>)
 80070a8:	f012 ff5b 	bl	8019f62 <sys_mutex_unlock>
      } while(p!=NULL);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e4      	bne.n	800707c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80070b2:	e7d9      	b.n	8007068 <ethernetif_input+0xc>
 80070b4:	20000380 	.word	0x20000380
 80070b8:	2000bcc0 	.word	0x2000bcc0

080070bc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <ethernetif_init+0x1c>
 80070ca:	4b0e      	ldr	r3, [pc, #56]	; (8007104 <ethernetif_init+0x48>)
 80070cc:	f240 2235 	movw	r2, #565	; 0x235
 80070d0:	490d      	ldr	r1, [pc, #52]	; (8007108 <ethernetif_init+0x4c>)
 80070d2:	480e      	ldr	r0, [pc, #56]	; (800710c <ethernetif_init+0x50>)
 80070d4:	f013 fcc8 	bl	801aa68 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2273      	movs	r2, #115	; 0x73
 80070dc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2274      	movs	r2, #116	; 0x74
 80070e4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a09      	ldr	r2, [pc, #36]	; (8007110 <ethernetif_init+0x54>)
 80070ec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a08      	ldr	r2, [pc, #32]	; (8007114 <ethernetif_init+0x58>)
 80070f2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff fd87 	bl	8006c08 <low_level_init>

  return ERR_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	0801bacc 	.word	0x0801bacc
 8007108:	0801bae8 	.word	0x0801bae8
 800710c:	0801baf8 	.word	0x0801baf8
 8007110:	080180b5 	.word	0x080180b5
 8007114:	08006db9 	.word	0x08006db9

08007118 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800711c:	f7f9 ffb4 	bl	8001088 <HAL_GetTick>
 8007120:	4603      	mov	r3, r0
}
 8007122:	4618      	mov	r0, r3
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007138:	f107 0308 	add.w	r3, r7, #8
 800713c:	461a      	mov	r2, r3
 800713e:	2101      	movs	r1, #1
 8007140:	4816      	ldr	r0, [pc, #88]	; (800719c <ethernetif_set_link+0x74>)
 8007142:	f7fa fd12 	bl	8001b6a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	2b00      	cmp	r3, #0
 800715c:	d108      	bne.n	8007170 <ethernetif_set_link+0x48>
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d005      	beq.n	8007170 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f007 fe73 	bl	800ee54 <netif_set_link_up>
 800716e:	e011      	b.n	8007194 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007178:	089b      	lsrs	r3, r3, #2
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <ethernetif_set_link+0x6c>
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d104      	bne.n	8007194 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4618      	mov	r0, r3
 8007190:	f007 fe98 	bl	800eec4 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8007194:	20c8      	movs	r0, #200	; 0xc8
 8007196:	f003 fe77 	bl	800ae88 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800719a:	e7cd      	b.n	8007138 <ethernetif_set_link+0x10>
 800719c:	2000a4a8 	.word	0x2000a4a8

080071a0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80071b6:	089b      	lsrs	r3, r3, #2
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d05d      	beq.n	800727e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80071c2:	4b34      	ldr	r3, [pc, #208]	; (8007294 <ethernetif_update_config+0xf4>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d03f      	beq.n	800724a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80071ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80071ce:	2100      	movs	r1, #0
 80071d0:	4830      	ldr	r0, [pc, #192]	; (8007294 <ethernetif_update_config+0xf4>)
 80071d2:	f7fa fd32 	bl	8001c3a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80071d6:	f7f9 ff57 	bl	8001088 <HAL_GetTick>
 80071da:	4603      	mov	r3, r0
 80071dc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80071de:	f107 0308 	add.w	r3, r7, #8
 80071e2:	461a      	mov	r2, r3
 80071e4:	2101      	movs	r1, #1
 80071e6:	482b      	ldr	r0, [pc, #172]	; (8007294 <ethernetif_update_config+0xf4>)
 80071e8:	f7fa fcbf 	bl	8001b6a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80071ec:	f7f9 ff4c 	bl	8001088 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071fa:	d828      	bhi.n	800724e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0eb      	beq.n	80071de <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007206:	f107 0308 	add.w	r3, r7, #8
 800720a:	461a      	mov	r2, r3
 800720c:	2110      	movs	r1, #16
 800720e:	4821      	ldr	r0, [pc, #132]	; (8007294 <ethernetif_update_config+0xf4>)
 8007210:	f7fa fcab 	bl	8001b6a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f003 0304 	and.w	r3, r3, #4
 800721a:	2b00      	cmp	r3, #0
 800721c:	d004      	beq.n	8007228 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800721e:	4b1d      	ldr	r3, [pc, #116]	; (8007294 <ethernetif_update_config+0xf4>)
 8007220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007224:	60da      	str	r2, [r3, #12]
 8007226:	e002      	b.n	800722e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007228:	4b1a      	ldr	r3, [pc, #104]	; (8007294 <ethernetif_update_config+0xf4>)
 800722a:	2200      	movs	r2, #0
 800722c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007238:	4b16      	ldr	r3, [pc, #88]	; (8007294 <ethernetif_update_config+0xf4>)
 800723a:	2200      	movs	r2, #0
 800723c:	609a      	str	r2, [r3, #8]
 800723e:	e016      	b.n	800726e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007240:	4b14      	ldr	r3, [pc, #80]	; (8007294 <ethernetif_update_config+0xf4>)
 8007242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007246:	609a      	str	r2, [r3, #8]
 8007248:	e011      	b.n	800726e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800724a:	bf00      	nop
 800724c:	e000      	b.n	8007250 <ethernetif_update_config+0xb0>
          goto error;
 800724e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007250:	4b10      	ldr	r3, [pc, #64]	; (8007294 <ethernetif_update_config+0xf4>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	08db      	lsrs	r3, r3, #3
 8007256:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007258:	4b0e      	ldr	r3, [pc, #56]	; (8007294 <ethernetif_update_config+0xf4>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	085b      	lsrs	r3, r3, #1
 800725e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007260:	4313      	orrs	r3, r2
 8007262:	b29b      	uxth	r3, r3
 8007264:	461a      	mov	r2, r3
 8007266:	2100      	movs	r1, #0
 8007268:	480a      	ldr	r0, [pc, #40]	; (8007294 <ethernetif_update_config+0xf4>)
 800726a:	f7fa fce6 	bl	8001c3a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800726e:	2100      	movs	r1, #0
 8007270:	4808      	ldr	r0, [pc, #32]	; (8007294 <ethernetif_update_config+0xf4>)
 8007272:	f7fa fda7 	bl	8001dc4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007276:	4807      	ldr	r0, [pc, #28]	; (8007294 <ethernetif_update_config+0xf4>)
 8007278:	f7fa fd45 	bl	8001d06 <HAL_ETH_Start>
 800727c:	e002      	b.n	8007284 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800727e:	4805      	ldr	r0, [pc, #20]	; (8007294 <ethernetif_update_config+0xf4>)
 8007280:	f7fa fd70 	bl	8001d64 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f807 	bl	8007298 <ethernetif_notify_conn_changed>
}
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	2000a4a8 	.word	0x2000a4a8

08007298 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80072ac:	b590      	push	{r4, r7, lr}
 80072ae:	b089      	sub	sp, #36	; 0x24
 80072b0:	af04      	add	r7, sp, #16
 80072b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072ba:	7919      	ldrb	r1, [r3, #4]
 80072bc:	2350      	movs	r3, #80	; 0x50
 80072be:	2206      	movs	r2, #6
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 ff0f 	bl	80090e4 <USBH_FindInterface>
 80072c6:	4603      	mov	r3, r0
 80072c8:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	2bff      	cmp	r3, #255	; 0xff
 80072ce:	d002      	beq.n	80072d6 <USBH_MSC_InterfaceInit+0x2a>
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d90f      	bls.n	80072f6 <USBH_MSC_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 80072d6:	4886      	ldr	r0, [pc, #536]	; (80074f0 <USBH_MSC_InterfaceInit+0x244>)
 80072d8:	f013 fbc6 	bl	801aa68 <iprintf>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4619      	mov	r1, r3
 80072e6:	4883      	ldr	r0, [pc, #524]	; (80074f4 <USBH_MSC_InterfaceInit+0x248>)
 80072e8:	f013 fbbe 	bl	801aa68 <iprintf>
 80072ec:	200a      	movs	r0, #10
 80072ee:	f013 fbd3 	bl	801aa98 <putchar>
    return USBH_FAIL;
 80072f2:	2302      	movs	r3, #2
 80072f4:	e0f8      	b.n	80074e8 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 fe8a 	bl	8009014 <USBH_SelectInterface>
 8007300:	4603      	mov	r3, r0
 8007302:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <USBH_MSC_InterfaceInit+0x62>
  {
    return USBH_FAIL;
 800730a:	2302      	movs	r3, #2
 800730c:	e0ec      	b.n	80074e8 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007314:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007318:	f013 fac8 	bl	801a8ac <malloc>
 800731c:	4603      	mov	r3, r0
 800731e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <USBH_MSC_InterfaceInit+0x9a>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 8007330:	486f      	ldr	r0, [pc, #444]	; (80074f0 <USBH_MSC_InterfaceInit+0x244>)
 8007332:	f013 fb99 	bl	801aa68 <iprintf>
 8007336:	4870      	ldr	r0, [pc, #448]	; (80074f8 <USBH_MSC_InterfaceInit+0x24c>)
 8007338:	f013 fb96 	bl	801aa68 <iprintf>
 800733c:	200a      	movs	r0, #10
 800733e:	f013 fbab 	bl	801aa98 <putchar>
    return USBH_FAIL;
 8007342:	2302      	movs	r3, #2
 8007344:	e0d0      	b.n	80074e8 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800734a:	2100      	movs	r1, #0
 800734c:	68b8      	ldr	r0, [r7, #8]
 800734e:	f013 fad9 	bl	801a904 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	211a      	movs	r1, #26
 8007358:	fb01 f303 	mul.w	r3, r1, r3
 800735c:	4413      	add	r3, r2
 800735e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	b25b      	sxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	da16      	bge.n	8007398 <USBH_MSC_InterfaceInit+0xec>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	211a      	movs	r1, #26
 8007370:	fb01 f303 	mul.w	r3, r1, r3
 8007374:	4413      	add	r3, r2
 8007376:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800737a:	781a      	ldrb	r2, [r3, #0]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	211a      	movs	r1, #26
 8007386:	fb01 f303 	mul.w	r3, r1, r3
 800738a:	4413      	add	r3, r2
 800738c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007390:	881a      	ldrh	r2, [r3, #0]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	815a      	strh	r2, [r3, #10]
 8007396:	e015      	b.n	80073c4 <USBH_MSC_InterfaceInit+0x118>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	211a      	movs	r1, #26
 800739e:	fb01 f303 	mul.w	r3, r1, r3
 80073a2:	4413      	add	r3, r2
 80073a4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073a8:	781a      	ldrb	r2, [r3, #0]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	211a      	movs	r1, #26
 80073b4:	fb01 f303 	mul.w	r3, r1, r3
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80073be:	881a      	ldrh	r2, [r3, #0]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	211a      	movs	r1, #26
 80073ca:	fb01 f303 	mul.w	r3, r1, r3
 80073ce:	4413      	add	r3, r2
 80073d0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	b25b      	sxtb	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	da16      	bge.n	800740a <USBH_MSC_InterfaceInit+0x15e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	211a      	movs	r1, #26
 80073e2:	fb01 f303 	mul.w	r3, r1, r3
 80073e6:	4413      	add	r3, r2
 80073e8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80073ec:	781a      	ldrb	r2, [r3, #0]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	211a      	movs	r1, #26
 80073f8:	fb01 f303 	mul.w	r3, r1, r3
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007402:	881a      	ldrh	r2, [r3, #0]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	815a      	strh	r2, [r3, #10]
 8007408:	e015      	b.n	8007436 <USBH_MSC_InterfaceInit+0x18a>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800740a:	7bfb      	ldrb	r3, [r7, #15]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	211a      	movs	r1, #26
 8007410:	fb01 f303 	mul.w	r3, r1, r3
 8007414:	4413      	add	r3, r2
 8007416:	f203 3356 	addw	r3, r3, #854	; 0x356
 800741a:	781a      	ldrb	r2, [r3, #0]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007420:	7bfb      	ldrb	r3, [r7, #15]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	211a      	movs	r1, #26
 8007426:	fb01 f303 	mul.w	r3, r1, r3
 800742a:	4413      	add	r3, r2
 800742c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007430:	881a      	ldrh	r2, [r3, #0]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2200      	movs	r2, #0
 800743a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2200      	movs	r2, #0
 8007440:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2200      	movs	r2, #0
 8007446:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	799b      	ldrb	r3, [r3, #6]
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f003 fbcf 	bl	800abf2 <USBH_AllocPipe>
 8007454:	4603      	mov	r3, r0
 8007456:	461a      	mov	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	79db      	ldrb	r3, [r3, #7]
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f003 fbc5 	bl	800abf2 <USBH_AllocPipe>
 8007468:	4603      	mov	r3, r0
 800746a:	461a      	mov	r2, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 ff2d 	bl	80082d0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	7959      	ldrb	r1, [r3, #5]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	7998      	ldrb	r0, [r3, #6]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	8912      	ldrh	r2, [r2, #8]
 800748e:	9202      	str	r2, [sp, #8]
 8007490:	2202      	movs	r2, #2
 8007492:	9201      	str	r2, [sp, #4]
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	4623      	mov	r3, r4
 8007498:	4602      	mov	r2, r0
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f003 fb7a 	bl	800ab94 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	7919      	ldrb	r1, [r3, #4]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	79d8      	ldrb	r0, [r3, #7]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	8952      	ldrh	r2, [r2, #10]
 80074b8:	9202      	str	r2, [sp, #8]
 80074ba:	2202      	movs	r2, #2
 80074bc:	9201      	str	r2, [sp, #4]
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	4623      	mov	r3, r4
 80074c2:	4602      	mov	r2, r0
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f003 fb65 	bl	800ab94 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	791b      	ldrb	r3, [r3, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f013 f80b 	bl	801a4ee <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	795b      	ldrb	r3, [r3, #5]
 80074dc:	2200      	movs	r2, #0
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f013 f804 	bl	801a4ee <USBH_LL_SetToggle>

  return USBH_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd90      	pop	{r4, r7, pc}
 80074f0:	0801bb24 	.word	0x0801bb24
 80074f4:	0801bb30 	.word	0x0801bb30
 80074f8:	0801bb58 	.word	0x0801bb58

080074fc <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	795b      	ldrb	r3, [r3, #5]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00e      	beq.n	8007534 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	795b      	ldrb	r3, [r3, #5]
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f003 fb58 	bl	800abd2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	795b      	ldrb	r3, [r3, #5]
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f003 fb83 	bl	800ac34 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	791b      	ldrb	r3, [r3, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00e      	beq.n	800755a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	791b      	ldrb	r3, [r3, #4]
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f003 fb45 	bl	800abd2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	791b      	ldrb	r3, [r3, #4]
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f003 fb70 	bl	800ac34 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00b      	beq.n	800757e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	4618      	mov	r0, r3
 8007570:	f013 f9a4 	bl	801a8bc <free>
    phost->pActiveClass->pData = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800757a:	2200      	movs	r2, #0
 800757c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800759a:	2301      	movs	r3, #1
 800759c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	7b9b      	ldrb	r3, [r3, #14]
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d04a      	beq.n	800763c <USBH_MSC_ClassRequest+0xb4>
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	dc54      	bgt.n	8007654 <USBH_MSC_ClassRequest+0xcc>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <USBH_MSC_ClassRequest+0x2a>
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d150      	bne.n	8007654 <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fe6b 	bl	8008292 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80075bc:	4603      	mov	r3, r0
 80075be:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d104      	bne.n	80075d0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d140      	bne.n	8007658 <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d804      	bhi.n	80075e8 <USBH_MSC_ClassRequest+0x60>
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	e000      	b.n	80075ea <USBH_MSC_ClassRequest+0x62>
 80075e8:	2202      	movs	r2, #2
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	4619      	mov	r1, r3
 80075f4:	481c      	ldr	r0, [pc, #112]	; (8007668 <USBH_MSC_ClassRequest+0xe0>)
 80075f6:	f013 fa37 	bl	801aa68 <iprintf>
 80075fa:	200a      	movs	r0, #10
 80075fc:	f013 fa4c 	bl	801aa98 <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007600:	2300      	movs	r3, #0
 8007602:	73bb      	strb	r3, [r7, #14]
 8007604:	e014      	b.n	8007630 <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007606:	7bbb      	ldrb	r3, [r7, #14]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	2134      	movs	r1, #52	; 0x34
 800760c:	fb01 f303 	mul.w	r3, r1, r3
 8007610:	4413      	add	r3, r2
 8007612:	3392      	adds	r3, #146	; 0x92
 8007614:	2202      	movs	r2, #2
 8007616:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	2134      	movs	r1, #52	; 0x34
 800761e:	fb01 f303 	mul.w	r3, r1, r3
 8007622:	4413      	add	r3, r2
 8007624:	33c1      	adds	r3, #193	; 0xc1
 8007626:	2200      	movs	r2, #0
 8007628:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	3301      	adds	r3, #1
 800762e:	73bb      	strb	r3, [r7, #14]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	7bba      	ldrb	r2, [r7, #14]
 8007636:	429a      	cmp	r2, r3
 8007638:	d3e5      	bcc.n	8007606 <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 800763a:	e00d      	b.n	8007658 <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800763c:	2100      	movs	r1, #0
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f002 fd7b 	bl	800a13a <USBH_ClrFeature>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d108      	bne.n	800765c <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	7bda      	ldrb	r2, [r3, #15]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	739a      	strb	r2, [r3, #14]
      }
      break;
 8007652:	e003      	b.n	800765c <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 8007654:	bf00      	nop
 8007656:	e002      	b.n	800765e <USBH_MSC_ClassRequest+0xd6>
      break;
 8007658:	bf00      	nop
 800765a:	e000      	b.n	800765e <USBH_MSC_ClassRequest+0xd6>
      break;
 800765c:	bf00      	nop
  }

  return status;
 800765e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	0801bb80 	.word	0x0801bb80

0800766c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800767e:	2301      	movs	r3, #1
 8007680:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8007682:	2301      	movs	r3, #1
 8007684:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8007686:	2301      	movs	r3, #1
 8007688:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	7b1b      	ldrb	r3, [r3, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <USBH_MSC_Process+0x2e>
 8007692:	2b01      	cmp	r3, #1
 8007694:	f000 8371 	beq.w	8007d7a <USBH_MSC_Process+0x70e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8007698:	e372      	b.n	8007d80 <USBH_MSC_Process+0x714>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	429a      	cmp	r2, r3
 80076a8:	f080 834b 	bcs.w	8007d42 <USBH_MSC_Process+0x6d6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076b2:	4619      	mov	r1, r3
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	2334      	movs	r3, #52	; 0x34
 80076b8:	fb03 f301 	mul.w	r3, r3, r1
 80076bc:	4413      	add	r3, r2
 80076be:	3391      	adds	r3, #145	; 0x91
 80076c0:	2201      	movs	r2, #1
 80076c2:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076ca:	4619      	mov	r1, r3
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	2334      	movs	r3, #52	; 0x34
 80076d0:	fb03 f301 	mul.w	r3, r3, r1
 80076d4:	4413      	add	r3, r2
 80076d6:	3390      	adds	r3, #144	; 0x90
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b08      	cmp	r3, #8
 80076dc:	f200 8319 	bhi.w	8007d12 <USBH_MSC_Process+0x6a6>
 80076e0:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <USBH_MSC_Process+0x7c>)
 80076e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	08007d13 	.word	0x08007d13
 80076f0:	08007855 	.word	0x08007855
 80076f4:	08007a09 	.word	0x08007a09
 80076f8:	08007747 	.word	0x08007747
 80076fc:	08007b75 	.word	0x08007b75
 8007700:	08007d13 	.word	0x08007d13
 8007704:	08007d13 	.word	0x08007d13
 8007708:	08007d01 	.word	0x08007d01
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007712:	4619      	mov	r1, r3
 8007714:	48b6      	ldr	r0, [pc, #728]	; (80079f0 <USBH_MSC_Process+0x384>)
 8007716:	f013 f9a7 	bl	801aa68 <iprintf>
 800771a:	200a      	movs	r0, #10
 800771c:	f013 f9bc 	bl	801aa98 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007726:	4619      	mov	r1, r3
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	2334      	movs	r3, #52	; 0x34
 800772c:	fb03 f301 	mul.w	r3, r3, r1
 8007730:	4413      	add	r3, r2
 8007732:	3390      	adds	r3, #144	; 0x90
 8007734:	2204      	movs	r2, #4
 8007736:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007744:	e2ee      	b.n	8007d24 <USBH_MSC_Process+0x6b8>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800774c:	b2d9      	uxtb	r1, r3
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007754:	461a      	mov	r2, r3
 8007756:	2334      	movs	r3, #52	; 0x34
 8007758:	fb03 f302 	mul.w	r3, r3, r2
 800775c:	3398      	adds	r3, #152	; 0x98
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4413      	add	r3, r2
 8007762:	3307      	adds	r3, #7
 8007764:	461a      	mov	r2, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 f95c 	bl	8008a24 <USBH_MSC_SCSI_Inquiry>
 800776c:	4603      	mov	r3, r0
 800776e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d141      	bne.n	80077fa <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800777c:	461a      	mov	r2, r3
 800777e:	2334      	movs	r3, #52	; 0x34
 8007780:	fb03 f302 	mul.w	r3, r3, r2
 8007784:	3398      	adds	r3, #152	; 0x98
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	4413      	add	r3, r2
 800778a:	330a      	adds	r3, #10
 800778c:	4619      	mov	r1, r3
 800778e:	4899      	ldr	r0, [pc, #612]	; (80079f4 <USBH_MSC_Process+0x388>)
 8007790:	f013 f96a 	bl	801aa68 <iprintf>
 8007794:	200a      	movs	r0, #10
 8007796:	f013 f97f 	bl	801aa98 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077a0:	461a      	mov	r2, r3
 80077a2:	2334      	movs	r3, #52	; 0x34
 80077a4:	fb03 f302 	mul.w	r3, r3, r2
 80077a8:	33a0      	adds	r3, #160	; 0xa0
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4413      	add	r3, r2
 80077ae:	330b      	adds	r3, #11
 80077b0:	4619      	mov	r1, r3
 80077b2:	4891      	ldr	r0, [pc, #580]	; (80079f8 <USBH_MSC_Process+0x38c>)
 80077b4:	f013 f958 	bl	801aa68 <iprintf>
 80077b8:	200a      	movs	r0, #10
 80077ba:	f013 f96d 	bl	801aa98 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077c4:	461a      	mov	r2, r3
 80077c6:	2334      	movs	r3, #52	; 0x34
 80077c8:	fb03 f302 	mul.w	r3, r3, r2
 80077cc:	33b0      	adds	r3, #176	; 0xb0
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4413      	add	r3, r2
 80077d2:	330c      	adds	r3, #12
 80077d4:	4619      	mov	r1, r3
 80077d6:	4889      	ldr	r0, [pc, #548]	; (80079fc <USBH_MSC_Process+0x390>)
 80077d8:	f013 f946 	bl	801aa68 <iprintf>
 80077dc:	200a      	movs	r0, #10
 80077de:	f013 f95b 	bl	801aa98 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077e8:	4619      	mov	r1, r3
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	2334      	movs	r3, #52	; 0x34
 80077ee:	fb03 f301 	mul.w	r3, r3, r1
 80077f2:	4413      	add	r3, r2
 80077f4:	3390      	adds	r3, #144	; 0x90
 80077f6:	2202      	movs	r2, #2
 80077f8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d10c      	bne.n	800781a <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007806:	4619      	mov	r1, r3
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	2334      	movs	r3, #52	; 0x34
 800780c:	fb03 f301 	mul.w	r3, r3, r1
 8007810:	4413      	add	r3, r2
 8007812:	3390      	adds	r3, #144	; 0x90
 8007814:	2205      	movs	r2, #5
 8007816:	701a      	strb	r2, [r3, #0]
            break;
 8007818:	e27d      	b.n	8007d16 <USBH_MSC_Process+0x6aa>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	2b04      	cmp	r3, #4
 800781e:	f040 827a 	bne.w	8007d16 <USBH_MSC_Process+0x6aa>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007828:	4619      	mov	r1, r3
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	2334      	movs	r3, #52	; 0x34
 800782e:	fb03 f301 	mul.w	r3, r3, r1
 8007832:	4413      	add	r3, r2
 8007834:	3390      	adds	r3, #144	; 0x90
 8007836:	2201      	movs	r2, #1
 8007838:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007840:	4619      	mov	r1, r3
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	2334      	movs	r3, #52	; 0x34
 8007846:	fb03 f301 	mul.w	r3, r3, r1
 800784a:	4413      	add	r3, r2
 800784c:	3391      	adds	r3, #145	; 0x91
 800784e:	2202      	movs	r2, #2
 8007850:	701a      	strb	r2, [r3, #0]
            break;
 8007852:	e260      	b.n	8007d16 <USBH_MSC_Process+0x6aa>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800785a:	b2db      	uxtb	r3, r3
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 f822 	bl	80088a8 <USBH_MSC_SCSI_TestUnitReady>
 8007864:	4603      	mov	r3, r0
 8007866:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d14f      	bne.n	800790e <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007874:	4619      	mov	r1, r3
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	2334      	movs	r3, #52	; 0x34
 800787a:	fb03 f301 	mul.w	r3, r3, r1
 800787e:	4413      	add	r3, r2
 8007880:	3392      	adds	r3, #146	; 0x92
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d012      	beq.n	80078ae <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800788e:	4619      	mov	r1, r3
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	2334      	movs	r3, #52	; 0x34
 8007894:	fb03 f301 	mul.w	r3, r3, r1
 8007898:	4413      	add	r3, r2
 800789a:	33c1      	adds	r3, #193	; 0xc1
 800789c:	2201      	movs	r2, #1
 800789e:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 80078a0:	4857      	ldr	r0, [pc, #348]	; (8007a00 <USBH_MSC_Process+0x394>)
 80078a2:	f013 f8e1 	bl	801aa68 <iprintf>
 80078a6:	200a      	movs	r0, #10
 80078a8:	f013 f8f6 	bl	801aa98 <putchar>
 80078ac:	e00b      	b.n	80078c6 <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078b4:	4619      	mov	r1, r3
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	2334      	movs	r3, #52	; 0x34
 80078ba:	fb03 f301 	mul.w	r3, r3, r1
 80078be:	4413      	add	r3, r2
 80078c0:	33c1      	adds	r3, #193	; 0xc1
 80078c2:	2200      	movs	r2, #0
 80078c4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078cc:	4619      	mov	r1, r3
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	2334      	movs	r3, #52	; 0x34
 80078d2:	fb03 f301 	mul.w	r3, r3, r1
 80078d6:	4413      	add	r3, r2
 80078d8:	3390      	adds	r3, #144	; 0x90
 80078da:	2203      	movs	r2, #3
 80078dc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078e4:	4619      	mov	r1, r3
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	2334      	movs	r3, #52	; 0x34
 80078ea:	fb03 f301 	mul.w	r3, r3, r1
 80078ee:	4413      	add	r3, r2
 80078f0:	3391      	adds	r3, #145	; 0x91
 80078f2:	2200      	movs	r2, #0
 80078f4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078fc:	4619      	mov	r1, r3
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	2334      	movs	r3, #52	; 0x34
 8007902:	fb03 f301 	mul.w	r3, r3, r1
 8007906:	4413      	add	r3, r2
 8007908:	3392      	adds	r3, #146	; 0x92
 800790a:	2200      	movs	r2, #0
 800790c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	2b02      	cmp	r3, #2
 8007912:	d150      	bne.n	80079b6 <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800791a:	4619      	mov	r1, r3
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	2334      	movs	r3, #52	; 0x34
 8007920:	fb03 f301 	mul.w	r3, r3, r1
 8007924:	4413      	add	r3, r2
 8007926:	3392      	adds	r3, #146	; 0x92
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	2b02      	cmp	r3, #2
 800792c:	d012      	beq.n	8007954 <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007934:	4619      	mov	r1, r3
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	2334      	movs	r3, #52	; 0x34
 800793a:	fb03 f301 	mul.w	r3, r3, r1
 800793e:	4413      	add	r3, r2
 8007940:	33c1      	adds	r3, #193	; 0xc1
 8007942:	2201      	movs	r2, #1
 8007944:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 8007946:	482f      	ldr	r0, [pc, #188]	; (8007a04 <USBH_MSC_Process+0x398>)
 8007948:	f013 f88e 	bl	801aa68 <iprintf>
 800794c:	200a      	movs	r0, #10
 800794e:	f013 f8a3 	bl	801aa98 <putchar>
 8007952:	e00b      	b.n	800796c <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800795a:	4619      	mov	r1, r3
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	2334      	movs	r3, #52	; 0x34
 8007960:	fb03 f301 	mul.w	r3, r3, r1
 8007964:	4413      	add	r3, r2
 8007966:	33c1      	adds	r3, #193	; 0xc1
 8007968:	2200      	movs	r2, #0
 800796a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007972:	4619      	mov	r1, r3
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	2334      	movs	r3, #52	; 0x34
 8007978:	fb03 f301 	mul.w	r3, r3, r1
 800797c:	4413      	add	r3, r2
 800797e:	3390      	adds	r3, #144	; 0x90
 8007980:	2205      	movs	r2, #5
 8007982:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800798a:	4619      	mov	r1, r3
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	2334      	movs	r3, #52	; 0x34
 8007990:	fb03 f301 	mul.w	r3, r3, r1
 8007994:	4413      	add	r3, r2
 8007996:	3391      	adds	r3, #145	; 0x91
 8007998:	2201      	movs	r2, #1
 800799a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079a2:	4619      	mov	r1, r3
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	2334      	movs	r3, #52	; 0x34
 80079a8:	fb03 f301 	mul.w	r3, r3, r1
 80079ac:	4413      	add	r3, r2
 80079ae:	3392      	adds	r3, #146	; 0x92
 80079b0:	2202      	movs	r2, #2
 80079b2:	701a      	strb	r2, [r3, #0]
            break;
 80079b4:	e1b1      	b.n	8007d1a <USBH_MSC_Process+0x6ae>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	f040 81ae 	bne.w	8007d1a <USBH_MSC_Process+0x6ae>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079c4:	4619      	mov	r1, r3
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	2334      	movs	r3, #52	; 0x34
 80079ca:	fb03 f301 	mul.w	r3, r3, r1
 80079ce:	4413      	add	r3, r2
 80079d0:	3390      	adds	r3, #144	; 0x90
 80079d2:	2201      	movs	r2, #1
 80079d4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079dc:	4619      	mov	r1, r3
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	2334      	movs	r3, #52	; 0x34
 80079e2:	fb03 f301 	mul.w	r3, r3, r1
 80079e6:	4413      	add	r3, r2
 80079e8:	3391      	adds	r3, #145	; 0x91
 80079ea:	2202      	movs	r2, #2
 80079ec:	701a      	strb	r2, [r3, #0]
            break;
 80079ee:	e194      	b.n	8007d1a <USBH_MSC_Process+0x6ae>
 80079f0:	0801bb9c 	.word	0x0801bb9c
 80079f4:	0801bba8 	.word	0x0801bba8
 80079f8:	0801bbc0 	.word	0x0801bbc0
 80079fc:	0801bbd8 	.word	0x0801bbd8
 8007a00:	0801bbf0 	.word	0x0801bbf0
 8007a04:	0801bc04 	.word	0x0801bc04
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a0e:	b2d9      	uxtb	r1, r3
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a16:	461a      	mov	r2, r3
 8007a18:	2334      	movs	r3, #52	; 0x34
 8007a1a:	fb03 f302 	mul.w	r3, r3, r2
 8007a1e:	3390      	adds	r3, #144	; 0x90
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4413      	add	r3, r2
 8007a24:	3304      	adds	r3, #4
 8007a26:	461a      	mov	r2, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 ff80 	bl	800892e <USBH_MSC_SCSI_ReadCapacity>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d170      	bne.n	8007b1a <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a3e:	4619      	mov	r1, r3
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	2334      	movs	r3, #52	; 0x34
 8007a44:	fb03 f301 	mul.w	r3, r3, r1
 8007a48:	4413      	add	r3, r2
 8007a4a:	33c1      	adds	r3, #193	; 0xc1
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d142      	bne.n	8007ad8 <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a58:	4619      	mov	r1, r3
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	2334      	movs	r3, #52	; 0x34
 8007a5e:	fb03 f301 	mul.w	r3, r3, r1
 8007a62:	4413      	add	r3, r2
 8007a64:	3394      	adds	r3, #148	; 0x94
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 8007a6e:	4610      	mov	r0, r2
 8007a70:	6939      	ldr	r1, [r7, #16]
 8007a72:	2234      	movs	r2, #52	; 0x34
 8007a74:	fb02 f200 	mul.w	r2, r2, r0
 8007a78:	440a      	add	r2, r1
 8007a7a:	3298      	adds	r2, #152	; 0x98
 8007a7c:	8812      	ldrh	r2, [r2, #0]
 8007a7e:	fb02 f303 	mul.w	r3, r2, r3
 8007a82:	4619      	mov	r1, r3
 8007a84:	48c1      	ldr	r0, [pc, #772]	; (8007d8c <USBH_MSC_Process+0x720>)
 8007a86:	f012 ffef 	bl	801aa68 <iprintf>
 8007a8a:	200a      	movs	r0, #10
 8007a8c:	f013 f804 	bl	801aa98 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a96:	4619      	mov	r1, r3
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	2334      	movs	r3, #52	; 0x34
 8007a9c:	fb03 f301 	mul.w	r3, r3, r1
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3394      	adds	r3, #148	; 0x94
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	48b9      	ldr	r0, [pc, #740]	; (8007d90 <USBH_MSC_Process+0x724>)
 8007aaa:	f012 ffdd 	bl	801aa68 <iprintf>
 8007aae:	200a      	movs	r0, #10
 8007ab0:	f012 fff2 	bl	801aa98 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007aba:	4619      	mov	r1, r3
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	2334      	movs	r3, #52	; 0x34
 8007ac0:	fb03 f301 	mul.w	r3, r3, r1
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3398      	adds	r3, #152	; 0x98
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	4619      	mov	r1, r3
 8007acc:	48b1      	ldr	r0, [pc, #708]	; (8007d94 <USBH_MSC_Process+0x728>)
 8007ace:	f012 ffcb 	bl	801aa68 <iprintf>
 8007ad2:	200a      	movs	r0, #10
 8007ad4:	f012 ffe0 	bl	801aa98 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ade:	4619      	mov	r1, r3
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	2334      	movs	r3, #52	; 0x34
 8007ae4:	fb03 f301 	mul.w	r3, r3, r1
 8007ae8:	4413      	add	r3, r2
 8007aea:	3390      	adds	r3, #144	; 0x90
 8007aec:	2201      	movs	r2, #1
 8007aee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007af6:	4619      	mov	r1, r3
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	2334      	movs	r3, #52	; 0x34
 8007afc:	fb03 f301 	mul.w	r3, r3, r1
 8007b00:	4413      	add	r3, r2
 8007b02:	3391      	adds	r3, #145	; 0x91
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b0e:	3301      	adds	r3, #1
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007b18:	e101      	b.n	8007d1e <USBH_MSC_Process+0x6b2>
            else if (scsi_status == USBH_FAIL)
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d10c      	bne.n	8007b3a <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b26:	4619      	mov	r1, r3
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	2334      	movs	r3, #52	; 0x34
 8007b2c:	fb03 f301 	mul.w	r3, r3, r1
 8007b30:	4413      	add	r3, r2
 8007b32:	3390      	adds	r3, #144	; 0x90
 8007b34:	2205      	movs	r2, #5
 8007b36:	701a      	strb	r2, [r3, #0]
            break;
 8007b38:	e0f1      	b.n	8007d1e <USBH_MSC_Process+0x6b2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	f040 80ee 	bne.w	8007d1e <USBH_MSC_Process+0x6b2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b48:	4619      	mov	r1, r3
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	2334      	movs	r3, #52	; 0x34
 8007b4e:	fb03 f301 	mul.w	r3, r3, r1
 8007b52:	4413      	add	r3, r2
 8007b54:	3390      	adds	r3, #144	; 0x90
 8007b56:	2201      	movs	r2, #1
 8007b58:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b60:	4619      	mov	r1, r3
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	2334      	movs	r3, #52	; 0x34
 8007b66:	fb03 f301 	mul.w	r3, r3, r1
 8007b6a:	4413      	add	r3, r2
 8007b6c:	3391      	adds	r3, #145	; 0x91
 8007b6e:	2202      	movs	r2, #2
 8007b70:	701a      	strb	r2, [r3, #0]
            break;
 8007b72:	e0d4      	b.n	8007d1e <USBH_MSC_Process+0x6b2>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b7a:	b2d9      	uxtb	r1, r3
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b82:	461a      	mov	r2, r3
 8007b84:	2334      	movs	r3, #52	; 0x34
 8007b86:	fb03 f302 	mul.w	r3, r3, r2
 8007b8a:	3398      	adds	r3, #152	; 0x98
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	4413      	add	r3, r2
 8007b90:	3304      	adds	r3, #4
 8007b92:	461a      	mov	r2, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 ffea 	bl	8008b6e <USBH_MSC_SCSI_RequestSense>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d17b      	bne.n	8007c9c <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007baa:	4619      	mov	r1, r3
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	2334      	movs	r3, #52	; 0x34
 8007bb0:	fb03 f301 	mul.w	r3, r3, r1
 8007bb4:	4413      	add	r3, r2
 8007bb6:	339c      	adds	r3, #156	; 0x9c
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	2b06      	cmp	r3, #6
 8007bbc:	d00c      	beq.n	8007bd8 <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	2334      	movs	r3, #52	; 0x34
 8007bca:	fb03 f301 	mul.w	r3, r3, r1
 8007bce:	4413      	add	r3, r2
 8007bd0:	339c      	adds	r3, #156	; 0x9c
 8007bd2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d117      	bne.n	8007c08 <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	f242 720f 	movw	r2, #9999	; 0x270f
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d80c      	bhi.n	8007c08 <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	2334      	movs	r3, #52	; 0x34
 8007bfa:	fb03 f301 	mul.w	r3, r3, r1
 8007bfe:	4413      	add	r3, r2
 8007c00:	3390      	adds	r3, #144	; 0x90
 8007c02:	2202      	movs	r2, #2
 8007c04:	701a      	strb	r2, [r3, #0]
                  break;
 8007c06:	e08d      	b.n	8007d24 <USBH_MSC_Process+0x6b8>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c0e:	4619      	mov	r1, r3
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	2334      	movs	r3, #52	; 0x34
 8007c14:	fb03 f301 	mul.w	r3, r3, r1
 8007c18:	4413      	add	r3, r2
 8007c1a:	339c      	adds	r3, #156	; 0x9c
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	485d      	ldr	r0, [pc, #372]	; (8007d98 <USBH_MSC_Process+0x72c>)
 8007c22:	f012 ff21 	bl	801aa68 <iprintf>
 8007c26:	200a      	movs	r0, #10
 8007c28:	f012 ff36 	bl	801aa98 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c32:	4619      	mov	r1, r3
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	2334      	movs	r3, #52	; 0x34
 8007c38:	fb03 f301 	mul.w	r3, r3, r1
 8007c3c:	4413      	add	r3, r2
 8007c3e:	339d      	adds	r3, #157	; 0x9d
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	4619      	mov	r1, r3
 8007c44:	4855      	ldr	r0, [pc, #340]	; (8007d9c <USBH_MSC_Process+0x730>)
 8007c46:	f012 ff0f 	bl	801aa68 <iprintf>
 8007c4a:	200a      	movs	r0, #10
 8007c4c:	f012 ff24 	bl	801aa98 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c56:	4619      	mov	r1, r3
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	2334      	movs	r3, #52	; 0x34
 8007c5c:	fb03 f301 	mul.w	r3, r3, r1
 8007c60:	4413      	add	r3, r2
 8007c62:	339e      	adds	r3, #158	; 0x9e
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	4619      	mov	r1, r3
 8007c68:	484d      	ldr	r0, [pc, #308]	; (8007da0 <USBH_MSC_Process+0x734>)
 8007c6a:	f012 fefd 	bl	801aa68 <iprintf>
 8007c6e:	200a      	movs	r0, #10
 8007c70:	f012 ff12 	bl	801aa98 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	2334      	movs	r3, #52	; 0x34
 8007c80:	fb03 f301 	mul.w	r3, r3, r1
 8007c84:	4413      	add	r3, r2
 8007c86:	3390      	adds	r3, #144	; 0x90
 8007c88:	2201      	movs	r2, #1
 8007c8a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c92:	3301      	adds	r3, #1
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d112      	bne.n	8007cc8 <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 8007ca2:	4840      	ldr	r0, [pc, #256]	; (8007da4 <USBH_MSC_Process+0x738>)
 8007ca4:	f012 fee0 	bl	801aa68 <iprintf>
 8007ca8:	200a      	movs	r0, #10
 8007caa:	f012 fef5 	bl	801aa98 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	2334      	movs	r3, #52	; 0x34
 8007cba:	fb03 f301 	mul.w	r3, r3, r1
 8007cbe:	4413      	add	r3, r2
 8007cc0:	3390      	adds	r3, #144	; 0x90
 8007cc2:	2208      	movs	r2, #8
 8007cc4:	701a      	strb	r2, [r3, #0]
            break;
 8007cc6:	e02c      	b.n	8007d22 <USBH_MSC_Process+0x6b6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	d129      	bne.n	8007d22 <USBH_MSC_Process+0x6b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	2334      	movs	r3, #52	; 0x34
 8007cda:	fb03 f301 	mul.w	r3, r3, r1
 8007cde:	4413      	add	r3, r2
 8007ce0:	3390      	adds	r3, #144	; 0x90
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cec:	4619      	mov	r1, r3
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	2334      	movs	r3, #52	; 0x34
 8007cf2:	fb03 f301 	mul.w	r3, r3, r1
 8007cf6:	4413      	add	r3, r2
 8007cf8:	3391      	adds	r3, #145	; 0x91
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	701a      	strb	r2, [r3, #0]
            break;
 8007cfe:	e010      	b.n	8007d22 <USBH_MSC_Process+0x6b6>
            MSC_Handle->current_lun++;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d06:	3301      	adds	r3, #1
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007d10:	e008      	b.n	8007d24 <USBH_MSC_Process+0x6b8>
            break;
 8007d12:	bf00      	nop
 8007d14:	e006      	b.n	8007d24 <USBH_MSC_Process+0x6b8>
            break;
 8007d16:	bf00      	nop
 8007d18:	e004      	b.n	8007d24 <USBH_MSC_Process+0x6b8>
            break;
 8007d1a:	bf00      	nop
 8007d1c:	e002      	b.n	8007d24 <USBH_MSC_Process+0x6b8>
            break;
 8007d1e:	bf00      	nop
 8007d20:	e000      	b.n	8007d24 <USBH_MSC_Process+0x6b8>
            break;
 8007d22:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2204      	movs	r2, #4
 8007d28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	f003 fa32 	bl	800b1a4 <osMessagePut>
      break;
 8007d40:	e01e      	b.n	8007d80 <USBH_MSC_Process+0x714>
        MSC_Handle->current_lun = 0U;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2204      	movs	r2, #4
 8007d54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d64:	2200      	movs	r2, #0
 8007d66:	4619      	mov	r1, r3
 8007d68:	f003 fa1c 	bl	800b1a4 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d72:	2102      	movs	r1, #2
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	4798      	blx	r3
      break;
 8007d78:	e002      	b.n	8007d80 <USBH_MSC_Process+0x714>
      error = USBH_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d7e:	bf00      	nop
  }
  return error;
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	0801bc1c 	.word	0x0801bc1c
 8007d90:	0801bc3c 	.word	0x0801bc3c
 8007d94:	0801bc50 	.word	0x0801bc50
 8007d98:	0801bc64 	.word	0x0801bc64
 8007d9c:	0801bc74 	.word	0x0801bc74
 8007da0:	0801bc90 	.word	0x0801bc90
 8007da4:	0801bc04 	.word	0x0801bc04

08007da8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
	...

08007dc0 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b088      	sub	sp, #32
 8007dc4:	af02      	add	r7, sp, #8
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dd2:	69db      	ldr	r3, [r3, #28]
 8007dd4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007dde:	78fb      	ldrb	r3, [r7, #3]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	2134      	movs	r1, #52	; 0x34
 8007de4:	fb01 f303 	mul.w	r3, r1, r3
 8007de8:	4413      	add	r3, r2
 8007dea:	3390      	adds	r3, #144	; 0x90
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2b07      	cmp	r3, #7
 8007df0:	d04b      	beq.n	8007e8a <USBH_MSC_RdWrProcess+0xca>
 8007df2:	2b07      	cmp	r3, #7
 8007df4:	f300 8106 	bgt.w	8008004 <USBH_MSC_RdWrProcess+0x244>
 8007df8:	2b05      	cmp	r3, #5
 8007dfa:	f000 8089 	beq.w	8007f10 <USBH_MSC_RdWrProcess+0x150>
 8007dfe:	2b06      	cmp	r3, #6
 8007e00:	f040 8100 	bne.w	8008004 <USBH_MSC_RdWrProcess+0x244>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007e04:	78f9      	ldrb	r1, [r7, #3]
 8007e06:	2300      	movs	r3, #0
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 ff91 	bl	8008d36 <USBH_MSC_SCSI_Read>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10b      	bne.n	8007e36 <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007e1e:	78fb      	ldrb	r3, [r7, #3]
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	2134      	movs	r1, #52	; 0x34
 8007e24:	fb01 f303 	mul.w	r3, r1, r3
 8007e28:	4413      	add	r3, r2
 8007e2a:	3390      	adds	r3, #144	; 0x90
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	75fb      	strb	r3, [r7, #23]
 8007e34:	e01a      	b.n	8007e6c <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d109      	bne.n	8007e50 <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	2134      	movs	r1, #52	; 0x34
 8007e42:	fb01 f303 	mul.w	r3, r1, r3
 8007e46:	4413      	add	r3, r2
 8007e48:	3390      	adds	r3, #144	; 0x90
 8007e4a:	2205      	movs	r2, #5
 8007e4c:	701a      	strb	r2, [r3, #0]
 8007e4e:	e00d      	b.n	8007e6c <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	d10a      	bne.n	8007e6c <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007e56:	78fb      	ldrb	r3, [r7, #3]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	2134      	movs	r1, #52	; 0x34
 8007e5c:	fb01 f303 	mul.w	r3, r1, r3
 8007e60:	4413      	add	r3, r2
 8007e62:	3390      	adds	r3, #144	; 0x90
 8007e64:	2208      	movs	r2, #8
 8007e66:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007e68:	2302      	movs	r3, #2
 8007e6a:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2204      	movs	r2, #4
 8007e70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e80:	2200      	movs	r2, #0
 8007e82:	4619      	mov	r1, r3
 8007e84:	f003 f98e 	bl	800b1a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e88:	e0bd      	b.n	8008006 <USBH_MSC_RdWrProcess+0x246>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007e8a:	78f9      	ldrb	r1, [r7, #3]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	2300      	movs	r3, #0
 8007e92:	2200      	movs	r2, #0
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fee3 	bl	8008c60 <USBH_MSC_SCSI_Write>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10b      	bne.n	8007ebc <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	2134      	movs	r1, #52	; 0x34
 8007eaa:	fb01 f303 	mul.w	r3, r1, r3
 8007eae:	4413      	add	r3, r2
 8007eb0:	3390      	adds	r3, #144	; 0x90
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	75fb      	strb	r3, [r7, #23]
 8007eba:	e01a      	b.n	8007ef2 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d109      	bne.n	8007ed6 <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	2134      	movs	r1, #52	; 0x34
 8007ec8:	fb01 f303 	mul.w	r3, r1, r3
 8007ecc:	4413      	add	r3, r2
 8007ece:	3390      	adds	r3, #144	; 0x90
 8007ed0:	2205      	movs	r2, #5
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	e00d      	b.n	8007ef2 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d10a      	bne.n	8007ef2 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007edc:	78fb      	ldrb	r3, [r7, #3]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	2134      	movs	r1, #52	; 0x34
 8007ee2:	fb01 f303 	mul.w	r3, r1, r3
 8007ee6:	4413      	add	r3, r2
 8007ee8:	3390      	adds	r3, #144	; 0x90
 8007eea:	2208      	movs	r2, #8
 8007eec:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007eee:	2302      	movs	r3, #2
 8007ef0:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2204      	movs	r2, #4
 8007ef6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f06:	2200      	movs	r2, #0
 8007f08:	4619      	mov	r1, r3
 8007f0a:	f003 f94b 	bl	800b1a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f0e:	e07a      	b.n	8008006 <USBH_MSC_RdWrProcess+0x246>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	2234      	movs	r2, #52	; 0x34
 8007f14:	fb02 f303 	mul.w	r3, r2, r3
 8007f18:	3398      	adds	r3, #152	; 0x98
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	1d1a      	adds	r2, r3, #4
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fe22 	bl	8008b6e <USBH_MSC_SCSI_RequestSense>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d140      	bne.n	8007fb6 <USBH_MSC_RdWrProcess+0x1f6>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	2134      	movs	r1, #52	; 0x34
 8007f3a:	fb01 f303 	mul.w	r3, r1, r3
 8007f3e:	4413      	add	r3, r2
 8007f40:	339c      	adds	r3, #156	; 0x9c
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	4619      	mov	r1, r3
 8007f46:	4832      	ldr	r0, [pc, #200]	; (8008010 <USBH_MSC_RdWrProcess+0x250>)
 8007f48:	f012 fd8e 	bl	801aa68 <iprintf>
 8007f4c:	200a      	movs	r0, #10
 8007f4e:	f012 fda3 	bl	801aa98 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	2134      	movs	r1, #52	; 0x34
 8007f58:	fb01 f303 	mul.w	r3, r1, r3
 8007f5c:	4413      	add	r3, r2
 8007f5e:	339d      	adds	r3, #157	; 0x9d
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	4619      	mov	r1, r3
 8007f64:	482b      	ldr	r0, [pc, #172]	; (8008014 <USBH_MSC_RdWrProcess+0x254>)
 8007f66:	f012 fd7f 	bl	801aa68 <iprintf>
 8007f6a:	200a      	movs	r0, #10
 8007f6c:	f012 fd94 	bl	801aa98 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	2134      	movs	r1, #52	; 0x34
 8007f76:	fb01 f303 	mul.w	r3, r1, r3
 8007f7a:	4413      	add	r3, r2
 8007f7c:	339e      	adds	r3, #158	; 0x9e
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	4619      	mov	r1, r3
 8007f82:	4825      	ldr	r0, [pc, #148]	; (8008018 <USBH_MSC_RdWrProcess+0x258>)
 8007f84:	f012 fd70 	bl	801aa68 <iprintf>
 8007f88:	200a      	movs	r0, #10
 8007f8a:	f012 fd85 	bl	801aa98 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	2134      	movs	r1, #52	; 0x34
 8007f94:	fb01 f303 	mul.w	r3, r1, r3
 8007f98:	4413      	add	r3, r2
 8007f9a:	3390      	adds	r3, #144	; 0x90
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	2134      	movs	r1, #52	; 0x34
 8007fa6:	fb01 f303 	mul.w	r3, r1, r3
 8007faa:	4413      	add	r3, r2
 8007fac:	3391      	adds	r3, #145	; 0x91
 8007fae:	2202      	movs	r2, #2
 8007fb0:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d106      	bne.n	8007fca <USBH_MSC_RdWrProcess+0x20a>
      {
        USBH_UsrLog("MSC Device NOT ready");
 8007fbc:	4817      	ldr	r0, [pc, #92]	; (800801c <USBH_MSC_RdWrProcess+0x25c>)
 8007fbe:	f012 fd53 	bl	801aa68 <iprintf>
 8007fc2:	200a      	movs	r0, #10
 8007fc4:	f012 fd68 	bl	801aa98 <putchar>
 8007fc8:	e00d      	b.n	8007fe6 <USBH_MSC_RdWrProcess+0x226>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d10a      	bne.n	8007fe6 <USBH_MSC_RdWrProcess+0x226>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007fd0:	78fb      	ldrb	r3, [r7, #3]
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	2134      	movs	r1, #52	; 0x34
 8007fd6:	fb01 f303 	mul.w	r3, r1, r3
 8007fda:	4413      	add	r3, r2
 8007fdc:	3390      	adds	r3, #144	; 0x90
 8007fde:	2208      	movs	r2, #8
 8007fe0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2204      	movs	r2, #4
 8007fea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	f003 f8d1 	bl	800b1a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008002:	e000      	b.n	8008006 <USBH_MSC_RdWrProcess+0x246>

    default:
      break;
 8008004:	bf00      	nop

  }
  return error;
 8008006:	7dfb      	ldrb	r3, [r7, #23]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	0801bc64 	.word	0x0801bc64
 8008014:	0801bc74 	.word	0x0801bc74
 8008018:	0801bc90 	.word	0x0801bc90
 800801c:	0801bc04 	.word	0x0801bc04

08008020 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b0b      	cmp	r3, #11
 800803e:	d10c      	bne.n	800805a <USBH_MSC_UnitIsReady+0x3a>
 8008040:	78fb      	ldrb	r3, [r7, #3]
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	2134      	movs	r1, #52	; 0x34
 8008046:	fb01 f303 	mul.w	r3, r1, r3
 800804a:	4413      	add	r3, r2
 800804c:	3391      	adds	r3, #145	; 0x91
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d102      	bne.n	800805a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008054:	2301      	movs	r3, #1
 8008056:	73fb      	strb	r3, [r7, #15]
 8008058:	e001      	b.n	800805e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800805e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	460b      	mov	r3, r1
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b0b      	cmp	r3, #11
 800808c:	d10d      	bne.n	80080aa <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800808e:	7afb      	ldrb	r3, [r7, #11]
 8008090:	2234      	movs	r2, #52	; 0x34
 8008092:	fb02 f303 	mul.w	r3, r2, r3
 8008096:	3390      	adds	r3, #144	; 0x90
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	4413      	add	r3, r2
 800809c:	2234      	movs	r2, #52	; 0x34
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f012 fc21 	bl	801a8e8 <memcpy>
    return USBH_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	e000      	b.n	80080ac <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80080aa:	2302      	movs	r3, #2
  }
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af02      	add	r7, sp, #8
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	607a      	str	r2, [r7, #4]
 80080be:	603b      	str	r3, [r7, #0]
 80080c0:	460b      	mov	r3, r1
 80080c2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00e      	beq.n	80080f8 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80080e0:	2b0b      	cmp	r3, #11
 80080e2:	d109      	bne.n	80080f8 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80080e4:	7afb      	ldrb	r3, [r7, #11]
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	2134      	movs	r1, #52	; 0x34
 80080ea:	fb01 f303 	mul.w	r3, r1, r3
 80080ee:	4413      	add	r3, r2
 80080f0:	3390      	adds	r3, #144	; 0x90
 80080f2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d001      	beq.n	80080fc <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80080f8:	2302      	movs	r3, #2
 80080fa:	e040      	b.n	800817e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2206      	movs	r2, #6
 8008100:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008102:	7afb      	ldrb	r3, [r7, #11]
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	2134      	movs	r1, #52	; 0x34
 8008108:	fb01 f303 	mul.w	r3, r1, r3
 800810c:	4413      	add	r3, r2
 800810e:	3390      	adds	r3, #144	; 0x90
 8008110:	2206      	movs	r2, #6
 8008112:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008114:	7afb      	ldrb	r3, [r7, #11]
 8008116:	b29a      	uxth	r2, r3
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800811e:	7af9      	ldrb	r1, [r7, #11]
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 fe04 	bl	8008d36 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008134:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008136:	e016      	b.n	8008166 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	1ad2      	subs	r2, r2, r3
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	f242 7110 	movw	r1, #10000	; 0x2710
 8008148:	fb01 f303 	mul.w	r3, r1, r3
 800814c:	429a      	cmp	r2, r3
 800814e:	d805      	bhi.n	800815c <USBH_MSC_Read+0xa8>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b00      	cmp	r3, #0
 800815a:	d104      	bne.n	8008166 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	2201      	movs	r2, #1
 8008160:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008162:	2302      	movs	r3, #2
 8008164:	e00b      	b.n	800817e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008166:	7afb      	ldrb	r3, [r7, #11]
 8008168:	4619      	mov	r1, r3
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7ff fe28 	bl	8007dc0 <USBH_MSC_RdWrProcess>
 8008170:	4603      	mov	r3, r0
 8008172:	2b01      	cmp	r3, #1
 8008174:	d0e0      	beq.n	8008138 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2201      	movs	r2, #1
 800817a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b088      	sub	sp, #32
 800818a:	af02      	add	r7, sp, #8
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	603b      	str	r3, [r7, #0]
 8008192:	460b      	mov	r3, r1
 8008194:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00e      	beq.n	80081ca <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80081b2:	2b0b      	cmp	r3, #11
 80081b4:	d109      	bne.n	80081ca <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80081b6:	7afb      	ldrb	r3, [r7, #11]
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	2134      	movs	r1, #52	; 0x34
 80081bc:	fb01 f303 	mul.w	r3, r1, r3
 80081c0:	4413      	add	r3, r2
 80081c2:	3390      	adds	r3, #144	; 0x90
 80081c4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d001      	beq.n	80081ce <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80081ca:	2302      	movs	r3, #2
 80081cc:	e040      	b.n	8008250 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2207      	movs	r2, #7
 80081d2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80081d4:	7afb      	ldrb	r3, [r7, #11]
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	2134      	movs	r1, #52	; 0x34
 80081da:	fb01 f303 	mul.w	r3, r1, r3
 80081de:	4413      	add	r3, r2
 80081e0:	3390      	adds	r3, #144	; 0x90
 80081e2:	2207      	movs	r2, #7
 80081e4:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80081e6:	7afb      	ldrb	r3, [r7, #11]
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80081f0:	7af9      	ldrb	r1, [r7, #11]
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 fd30 	bl	8008c60 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008206:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008208:	e016      	b.n	8008238 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	1ad2      	subs	r2, r2, r3
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	f242 7110 	movw	r1, #10000	; 0x2710
 800821a:	fb01 f303 	mul.w	r3, r1, r3
 800821e:	429a      	cmp	r2, r3
 8008220:	d805      	bhi.n	800822e <USBH_MSC_Write+0xa8>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d104      	bne.n	8008238 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2201      	movs	r2, #1
 8008232:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008234:	2302      	movs	r3, #2
 8008236:	e00b      	b.n	8008250 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008238:	7afb      	ldrb	r3, [r7, #11]
 800823a:	4619      	mov	r1, r3
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff fdbf 	bl	8007dc0 <USBH_MSC_RdWrProcess>
 8008242:	4603      	mov	r3, r0
 8008244:	2b01      	cmp	r3, #1
 8008246:	d0e0      	beq.n	800820a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	2201      	movs	r2, #1
 800824c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2221      	movs	r2, #33	; 0x21
 8008264:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	22ff      	movs	r2, #255	; 0xff
 800826a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800827e:	2200      	movs	r2, #0
 8008280:	2100      	movs	r1, #0
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f002 f939 	bl	800a4fa <USBH_CtlReq>
 8008288:	4603      	mov	r3, r0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b082      	sub	sp, #8
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	22a1      	movs	r2, #161	; 0xa1
 80082a0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	22fe      	movs	r2, #254	; 0xfe
 80082a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80082ba:	2201      	movs	r2, #1
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f002 f91b 	bl	800a4fa <USBH_CtlReq>
 80082c4:	4603      	mov	r3, r0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4a09      	ldr	r2, [pc, #36]	; (800830c <USBH_MSC_BOT_Init+0x3c>)
 80082e6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4a09      	ldr	r2, [pc, #36]	; (8008310 <USBH_MSC_BOT_Init+0x40>)
 80082ec:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	43425355 	.word	0x43425355
 8008310:	20304050 	.word	0x20304050

08008314 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af02      	add	r7, sp, #8
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008320:	2301      	movs	r3, #1
 8008322:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008324:	2301      	movs	r3, #1
 8008326:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008328:	2301      	movs	r3, #1
 800832a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800832c:	2300      	movs	r3, #0
 800832e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008344:	3b01      	subs	r3, #1
 8008346:	2b0a      	cmp	r3, #10
 8008348:	f200 822a 	bhi.w	80087a0 <USBH_MSC_BOT_Process+0x48c>
 800834c:	a201      	add	r2, pc, #4	; (adr r2, 8008354 <USBH_MSC_BOT_Process+0x40>)
 800834e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008352:	bf00      	nop
 8008354:	08008381 	.word	0x08008381
 8008358:	080083a9 	.word	0x080083a9
 800835c:	08008467 	.word	0x08008467
 8008360:	08008485 	.word	0x08008485
 8008364:	08008541 	.word	0x08008541
 8008368:	08008563 	.word	0x08008563
 800836c:	0800864f 	.word	0x0800864f
 8008370:	0800866b 	.word	0x0800866b
 8008374:	080086f5 	.word	0x080086f5
 8008378:	08008725 	.word	0x08008725
 800837c:	08008787 	.word	0x08008787
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	78fa      	ldrb	r2, [r7, #3]
 8008384:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	795b      	ldrb	r3, [r3, #5]
 800839a:	2201      	movs	r2, #1
 800839c:	9200      	str	r2, [sp, #0]
 800839e:	221f      	movs	r2, #31
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f002 fbb4 	bl	800ab0e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80083a6:	e20a      	b.n	80087be <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	795b      	ldrb	r3, [r3, #5]
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f012 f87c 	bl	801a4ac <USBH_LL_GetURBState>
 80083b4:	4603      	mov	r3, r0
 80083b6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80083b8:	7d3b      	ldrb	r3, [r7, #20]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d126      	bne.n	800840c <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00f      	beq.n	80083e6 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80083cc:	b25b      	sxtb	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	da04      	bge.n	80083dc <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2203      	movs	r2, #3
 80083d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80083da:	e008      	b.n	80083ee <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2205      	movs	r2, #5
 80083e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80083e4:	e003      	b.n	80083ee <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	2207      	movs	r2, #7
 80083ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2202      	movs	r2, #2
 80083f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008402:	2200      	movs	r2, #0
 8008404:	4619      	mov	r1, r3
 8008406:	f002 fecd 	bl	800b1a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800840a:	e1cb      	b.n	80087a4 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 800840c:	7d3b      	ldrb	r3, [r7, #20]
 800840e:	2b02      	cmp	r3, #2
 8008410:	d112      	bne.n	8008438 <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2202      	movs	r2, #2
 800841e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800842e:	2200      	movs	r2, #0
 8008430:	4619      	mov	r1, r3
 8008432:	f002 feb7 	bl	800b1a4 <osMessagePut>
      break;
 8008436:	e1b5      	b.n	80087a4 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 8008438:	7d3b      	ldrb	r3, [r7, #20]
 800843a:	2b05      	cmp	r3, #5
 800843c:	f040 81b2 	bne.w	80087a4 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	220a      	movs	r2, #10
 8008444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800845c:	2200      	movs	r2, #0
 800845e:	4619      	mov	r1, r3
 8008460:	f002 fea0 	bl	800b1a4 <osMessagePut>
      break;
 8008464:	e19e      	b.n	80087a4 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	895a      	ldrh	r2, [r3, #10]
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	791b      	ldrb	r3, [r3, #4]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f002 fb6f 	bl	800ab58 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	2204      	movs	r2, #4
 800847e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8008482:	e19c      	b.n	80087be <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	791b      	ldrb	r3, [r3, #4]
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f012 f80e 	bl	801a4ac <USBH_LL_GetURBState>
 8008490:	4603      	mov	r3, r0
 8008492:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008494:	7d3b      	ldrb	r3, [r7, #20]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d13b      	bne.n	8008512 <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	8952      	ldrh	r2, [r2, #10]
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d910      	bls.n	80084c8 <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	8952      	ldrh	r2, [r2, #10]
 80084b0:	441a      	add	r2, r3
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	8952      	ldrh	r2, [r2, #10]
 80084c0:	1a9a      	subs	r2, r3, r2
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80084c6:	e002      	b.n	80084ce <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	2200      	movs	r2, #0
 80084cc:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	895a      	ldrh	r2, [r3, #10]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	791b      	ldrb	r3, [r3, #4]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f002 fb37 	bl	800ab58 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80084ea:	e15d      	b.n	80087a8 <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	2207      	movs	r2, #7
 80084f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2202      	movs	r2, #2
 80084f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008508:	2200      	movs	r2, #0
 800850a:	4619      	mov	r1, r3
 800850c:	f002 fe4a 	bl	800b1a4 <osMessagePut>
      break;
 8008510:	e14a      	b.n	80087a8 <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 8008512:	7d3b      	ldrb	r3, [r7, #20]
 8008514:	2b05      	cmp	r3, #5
 8008516:	f040 8147 	bne.w	80087a8 <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	2209      	movs	r2, #9
 800851e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2202      	movs	r2, #2
 8008526:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008536:	2200      	movs	r2, #0
 8008538:	4619      	mov	r1, r3
 800853a:	f002 fe33 	bl	800b1a4 <osMessagePut>
      break;
 800853e:	e133      	b.n	80087a8 <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	891a      	ldrh	r2, [r3, #8]
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	795b      	ldrb	r3, [r3, #5]
 800854e:	2001      	movs	r0, #1
 8008550:	9000      	str	r0, [sp, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f002 fadb 	bl	800ab0e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	2206      	movs	r2, #6
 800855c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008560:	e12d      	b.n	80087be <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	795b      	ldrb	r3, [r3, #5]
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f011 ff9f 	bl	801a4ac <USBH_LL_GetURBState>
 800856e:	4603      	mov	r3, r0
 8008570:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008572:	7d3b      	ldrb	r3, [r7, #20]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d13d      	bne.n	80085f4 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	8912      	ldrh	r2, [r2, #8]
 8008580:	4293      	cmp	r3, r2
 8008582:	d910      	bls.n	80085a6 <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	8912      	ldrh	r2, [r2, #8]
 800858e:	441a      	add	r2, r3
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	8912      	ldrh	r2, [r2, #8]
 800859e:	1a9a      	subs	r2, r3, r2
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80085a4:	e002      	b.n	80085ac <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	2200      	movs	r2, #0
 80085aa:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00c      	beq.n	80085ce <USBH_MSC_BOT_Process+0x2ba>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	891a      	ldrh	r2, [r3, #8]
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	795b      	ldrb	r3, [r3, #5]
 80085c2:	2001      	movs	r0, #1
 80085c4:	9000      	str	r0, [sp, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f002 faa1 	bl	800ab0e <USBH_BulkSendData>
 80085cc:	e003      	b.n	80085d6 <USBH_MSC_BOT_Process+0x2c2>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	2207      	movs	r2, #7
 80085d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2202      	movs	r2, #2
 80085da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085ea:	2200      	movs	r2, #0
 80085ec:	4619      	mov	r1, r3
 80085ee:	f002 fdd9 	bl	800b1a4 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 80085f2:	e0db      	b.n	80087ac <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 80085f4:	7d3b      	ldrb	r3, [r7, #20]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d112      	bne.n	8008620 <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	2205      	movs	r2, #5
 80085fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2202      	movs	r2, #2
 8008606:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008616:	2200      	movs	r2, #0
 8008618:	4619      	mov	r1, r3
 800861a:	f002 fdc3 	bl	800b1a4 <osMessagePut>
      break;
 800861e:	e0c5      	b.n	80087ac <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 8008620:	7d3b      	ldrb	r3, [r7, #20]
 8008622:	2b05      	cmp	r3, #5
 8008624:	f040 80c2 	bne.w	80087ac <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	220a      	movs	r2, #10
 800862c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2202      	movs	r2, #2
 8008634:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008644:	2200      	movs	r2, #0
 8008646:	4619      	mov	r1, r3
 8008648:	f002 fdac 	bl	800b1a4 <osMessagePut>
      break;
 800864c:	e0ae      	b.n	80087ac <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	791b      	ldrb	r3, [r3, #4]
 8008658:	220d      	movs	r2, #13
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f002 fa7c 	bl	800ab58 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	2208      	movs	r2, #8
 8008664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008668:	e0a9      	b.n	80087be <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	791b      	ldrb	r3, [r3, #4]
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f011 ff1b 	bl	801a4ac <USBH_LL_GetURBState>
 8008676:	4603      	mov	r3, r0
 8008678:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800867a:	7d3b      	ldrb	r3, [r7, #20]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d123      	bne.n	80086c8 <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f8c5 	bl	8008820 <USBH_MSC_DecodeCSW>
 8008696:	4603      	mov	r3, r0
 8008698:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800869a:	7d7b      	ldrb	r3, [r7, #21]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d102      	bne.n	80086a6 <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	75fb      	strb	r3, [r7, #23]
 80086a4:	e001      	b.n	80086aa <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 80086a6:	2302      	movs	r3, #2
 80086a8:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2202      	movs	r2, #2
 80086ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086be:	2200      	movs	r2, #0
 80086c0:	4619      	mov	r1, r3
 80086c2:	f002 fd6f 	bl	800b1a4 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 80086c6:	e073      	b.n	80087b0 <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 80086c8:	7d3b      	ldrb	r3, [r7, #20]
 80086ca:	2b05      	cmp	r3, #5
 80086cc:	d170      	bne.n	80087b0 <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	2209      	movs	r2, #9
 80086d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2202      	movs	r2, #2
 80086da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086ea:	2200      	movs	r2, #0
 80086ec:	4619      	mov	r1, r3
 80086ee:	f002 fd59 	bl	800b1a4 <osMessagePut>
      break;
 80086f2:	e05d      	b.n	80087b0 <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80086f4:	78fb      	ldrb	r3, [r7, #3]
 80086f6:	2200      	movs	r2, #0
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f864 	bl	80087c8 <USBH_MSC_BOT_Abort>
 8008700:	4603      	mov	r3, r0
 8008702:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008704:	7dbb      	ldrb	r3, [r7, #22]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d104      	bne.n	8008714 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2207      	movs	r2, #7
 800870e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008712:	e04f      	b.n	80087b4 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008714:	7dbb      	ldrb	r3, [r7, #22]
 8008716:	2b04      	cmp	r3, #4
 8008718:	d14c      	bne.n	80087b4 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	220b      	movs	r2, #11
 800871e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008722:	e047      	b.n	80087b4 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	2201      	movs	r2, #1
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f84c 	bl	80087c8 <USBH_MSC_BOT_Abort>
 8008730:	4603      	mov	r3, r0
 8008732:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008734:	7dbb      	ldrb	r3, [r7, #22]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d11d      	bne.n	8008776 <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	795b      	ldrb	r3, [r3, #5]
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f011 ff04 	bl	801a54e <USBH_LL_GetToggle>
 8008746:	4603      	mov	r3, r0
 8008748:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	7959      	ldrb	r1, [r3, #5]
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	f1c3 0301 	rsb	r3, r3, #1
 8008754:	b2db      	uxtb	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f011 fec8 	bl	801a4ee <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	791b      	ldrb	r3, [r3, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f011 fec1 	bl	801a4ee <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	2209      	movs	r2, #9
 8008770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008774:	e020      	b.n	80087b8 <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 8008776:	7dbb      	ldrb	r3, [r7, #22]
 8008778:	2b04      	cmp	r3, #4
 800877a:	d11d      	bne.n	80087b8 <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	220b      	movs	r2, #11
 8008780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008784:	e018      	b.n	80087b8 <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7ff fd66 	bl	8008258 <USBH_MSC_BOT_REQ_Reset>
 800878c:	4603      	mov	r3, r0
 800878e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008790:	7dfb      	ldrb	r3, [r7, #23]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d112      	bne.n	80087bc <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800879e:	e00d      	b.n	80087bc <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 80087a0:	bf00      	nop
 80087a2:	e00c      	b.n	80087be <USBH_MSC_BOT_Process+0x4aa>
      break;
 80087a4:	bf00      	nop
 80087a6:	e00a      	b.n	80087be <USBH_MSC_BOT_Process+0x4aa>
      break;
 80087a8:	bf00      	nop
 80087aa:	e008      	b.n	80087be <USBH_MSC_BOT_Process+0x4aa>
      break;
 80087ac:	bf00      	nop
 80087ae:	e006      	b.n	80087be <USBH_MSC_BOT_Process+0x4aa>
      break;
 80087b0:	bf00      	nop
 80087b2:	e004      	b.n	80087be <USBH_MSC_BOT_Process+0x4aa>
      break;
 80087b4:	bf00      	nop
 80087b6:	e002      	b.n	80087be <USBH_MSC_BOT_Process+0x4aa>
      break;
 80087b8:	bf00      	nop
 80087ba:	e000      	b.n	80087be <USBH_MSC_BOT_Process+0x4aa>
      break;
 80087bc:	bf00      	nop
  }
  return status;
 80087be:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
 80087d4:	4613      	mov	r3, r2
 80087d6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80087d8:	2302      	movs	r3, #2
 80087da:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80087e6:	78bb      	ldrb	r3, [r7, #2]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d002      	beq.n	80087f2 <USBH_MSC_BOT_Abort+0x2a>
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d009      	beq.n	8008804 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80087f0:	e011      	b.n	8008816 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	79db      	ldrb	r3, [r3, #7]
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 fc9e 	bl	800a13a <USBH_ClrFeature>
 80087fe:	4603      	mov	r3, r0
 8008800:	73fb      	strb	r3, [r7, #15]
      break;
 8008802:	e008      	b.n	8008816 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	799b      	ldrb	r3, [r3, #6]
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 fc95 	bl	800a13a <USBH_ClrFeature>
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]
      break;
 8008814:	bf00      	nop
  }
  return status;
 8008816:	7bfb      	ldrb	r3, [r7, #15]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008832:	2301      	movs	r3, #1
 8008834:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	791b      	ldrb	r3, [r3, #4]
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f011 fda3 	bl	801a388 <USBH_LL_GetLastXferSize>
 8008842:	4603      	mov	r3, r0
 8008844:	2b0d      	cmp	r3, #13
 8008846:	d002      	beq.n	800884e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008848:	2302      	movs	r3, #2
 800884a:	73fb      	strb	r3, [r7, #15]
 800884c:	e024      	b.n	8008898 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008852:	4a14      	ldr	r2, [pc, #80]	; (80088a4 <USBH_MSC_DecodeCSW+0x84>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d11d      	bne.n	8008894 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008860:	429a      	cmp	r2, r3
 8008862:	d119      	bne.n	8008898 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800886a:	2b00      	cmp	r3, #0
 800886c:	d102      	bne.n	8008874 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]
 8008872:	e011      	b.n	8008898 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800887a:	2b01      	cmp	r3, #1
 800887c:	d102      	bne.n	8008884 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800887e:	2301      	movs	r3, #1
 8008880:	73fb      	strb	r3, [r7, #15]
 8008882:	e009      	b.n	8008898 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800888a:	2b02      	cmp	r3, #2
 800888c:	d104      	bne.n	8008898 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800888e:	2302      	movs	r3, #2
 8008890:	73fb      	strb	r3, [r7, #15]
 8008892:	e001      	b.n	8008898 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008894:	2302      	movs	r3, #2
 8008896:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008898:	7bfb      	ldrb	r3, [r7, #15]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	53425355 	.word	0x53425355

080088a8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80088b4:	2302      	movs	r3, #2
 80088b6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088be:	69db      	ldr	r3, [r3, #28]
 80088c0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d002      	beq.n	80088d2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d021      	beq.n	8008914 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80088d0:	e028      	b.n	8008924 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2200      	movs	r2, #0
 80088d6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	220a      	movs	r2, #10
 80088e4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	3363      	adds	r3, #99	; 0x63
 80088ec:	2210      	movs	r2, #16
 80088ee:	2100      	movs	r1, #0
 80088f0:	4618      	mov	r0, r3
 80088f2:	f012 f807 	bl	801a904 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2202      	movs	r2, #2
 800890a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800890e:	2301      	movs	r3, #1
 8008910:	73fb      	strb	r3, [r7, #15]
      break;
 8008912:	e007      	b.n	8008924 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7ff fcfb 	bl	8008314 <USBH_MSC_BOT_Process>
 800891e:	4603      	mov	r3, r0
 8008920:	73fb      	strb	r3, [r7, #15]
      break;
 8008922:	bf00      	nop
  }

  return error;
 8008924:	7bfb      	ldrb	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b086      	sub	sp, #24
 8008932:	af00      	add	r7, sp, #0
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	460b      	mov	r3, r1
 8008938:	607a      	str	r2, [r7, #4]
 800893a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800893c:	2301      	movs	r3, #1
 800893e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008950:	2b01      	cmp	r3, #1
 8008952:	d002      	beq.n	800895a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008954:	2b02      	cmp	r3, #2
 8008956:	d027      	beq.n	80089a8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008958:	e05f      	b.n	8008a1a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	2208      	movs	r2, #8
 800895e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	2280      	movs	r2, #128	; 0x80
 8008964:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	220a      	movs	r2, #10
 800896c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	3363      	adds	r3, #99	; 0x63
 8008974:	2210      	movs	r2, #16
 8008976:	2100      	movs	r1, #0
 8008978:	4618      	mov	r0, r3
 800897a:	f011 ffc3 	bl	801a904 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	2225      	movs	r2, #37	; 0x25
 8008982:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	2202      	movs	r2, #2
 8008992:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f103 0210 	add.w	r2, r3, #16
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80089a2:	2301      	movs	r3, #1
 80089a4:	75fb      	strb	r3, [r7, #23]
      break;
 80089a6:	e038      	b.n	8008a1a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80089a8:	7afb      	ldrb	r3, [r7, #11]
 80089aa:	4619      	mov	r1, r3
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f7ff fcb1 	bl	8008314 <USBH_MSC_BOT_Process>
 80089b2:	4603      	mov	r3, r0
 80089b4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d12d      	bne.n	8008a18 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089c2:	3303      	adds	r3, #3
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ce:	3302      	adds	r3, #2
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	021b      	lsls	r3, r3, #8
 80089d4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089dc:	3301      	adds	r3, #1
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80089e2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	061b      	lsls	r3, r3, #24
 80089ee:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089fa:	3307      	adds	r3, #7
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a06:	3306      	adds	r3, #6
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	021b      	lsls	r3, r3, #8
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	4313      	orrs	r3, r2
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	809a      	strh	r2, [r3, #4]
      break;
 8008a18:	bf00      	nop
  }

  return error;
 8008a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3718      	adds	r7, #24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008a32:	2302      	movs	r3, #2
 8008a34:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d002      	beq.n	8008a50 <USBH_MSC_SCSI_Inquiry+0x2c>
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d03d      	beq.n	8008aca <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8008a4e:	e089      	b.n	8008b64 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	2224      	movs	r2, #36	; 0x24
 8008a54:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2280      	movs	r2, #128	; 0x80
 8008a5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	220a      	movs	r2, #10
 8008a62:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	3363      	adds	r3, #99	; 0x63
 8008a6a:	220a      	movs	r2, #10
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f011 ff48 	bl	801a904 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	2212      	movs	r2, #18
 8008a78:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	015b      	lsls	r3, r3, #5
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	2224      	movs	r2, #36	; 0x24
 8008a9c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f103 0210 	add.w	r2, r3, #16
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ac8:	e04c      	b.n	8008b64 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008aca:	7afb      	ldrb	r3, [r7, #11]
 8008acc:	4619      	mov	r1, r3
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f7ff fc20 	bl	8008314 <USBH_MSC_BOT_Process>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d141      	bne.n	8008b62 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008ade:	2222      	movs	r2, #34	; 0x22
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f011 ff0e 	bl	801a904 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	f003 031f 	and.w	r3, r3, #31
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	095b      	lsrs	r3, r3, #5
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b10:	3301      	adds	r3, #1
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	b25b      	sxtb	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	da03      	bge.n	8008b22 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	709a      	strb	r2, [r3, #2]
 8008b20:	e002      	b.n	8008b28 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	1cd8      	adds	r0, r3, #3
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b32:	3308      	adds	r3, #8
 8008b34:	2208      	movs	r2, #8
 8008b36:	4619      	mov	r1, r3
 8008b38:	f011 fed6 	bl	801a8e8 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f103 000c 	add.w	r0, r3, #12
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b48:	3310      	adds	r3, #16
 8008b4a:	2210      	movs	r2, #16
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	f011 fecb 	bl	801a8e8 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	331d      	adds	r3, #29
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008b5c:	3220      	adds	r2, #32
 8008b5e:	6812      	ldr	r2, [r2, #0]
 8008b60:	601a      	str	r2, [r3, #0]
      break;
 8008b62:	bf00      	nop
  }

  return error;
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b086      	sub	sp, #24
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	460b      	mov	r3, r1
 8008b78:	607a      	str	r2, [r7, #4]
 8008b7a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d002      	beq.n	8008b9a <USBH_MSC_SCSI_RequestSense+0x2c>
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d03d      	beq.n	8008c14 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8008b98:	e05d      	b.n	8008c56 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	220e      	movs	r2, #14
 8008b9e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	2280      	movs	r2, #128	; 0x80
 8008ba4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	220a      	movs	r2, #10
 8008bac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	3363      	adds	r3, #99	; 0x63
 8008bb4:	2210      	movs	r2, #16
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f011 fea3 	bl	801a904 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	2203      	movs	r2, #3
 8008bc2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008bc6:	7afb      	ldrb	r3, [r7, #11]
 8008bc8:	015b      	lsls	r3, r3, #5
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	220e      	movs	r2, #14
 8008be6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	f103 0210 	add.w	r2, r3, #16
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	75fb      	strb	r3, [r7, #23]
      break;
 8008c12:	e020      	b.n	8008c56 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008c14:	7afb      	ldrb	r3, [r7, #11]
 8008c16:	4619      	mov	r1, r3
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f7ff fb7b 	bl	8008314 <USBH_MSC_BOT_Process>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008c22:	7dfb      	ldrb	r3, [r7, #23]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d115      	bne.n	8008c54 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c2e:	3302      	adds	r3, #2
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	f003 030f 	and.w	r3, r3, #15
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c42:	7b1a      	ldrb	r2, [r3, #12]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c4e:	7b5a      	ldrb	r2, [r3, #13]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	709a      	strb	r2, [r3, #2]
      break;
 8008c54:	bf00      	nop
  }

  return error;
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	607a      	str	r2, [r7, #4]
 8008c6a:	603b      	str	r3, [r7, #0]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008c70:	2302      	movs	r3, #2
 8008c72:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c7a:	69db      	ldr	r3, [r3, #28]
 8008c7c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d002      	beq.n	8008c8e <USBH_MSC_SCSI_Write+0x2e>
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d047      	beq.n	8008d1c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008c8c:	e04e      	b.n	8008d2c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008c94:	461a      	mov	r2, r3
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	fb03 f202 	mul.w	r2, r3, r2
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	220a      	movs	r2, #10
 8008cac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	3363      	adds	r3, #99	; 0x63
 8008cb4:	2210      	movs	r2, #16
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f011 fe23 	bl	801a904 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	222a      	movs	r2, #42	; 0x2a
 8008cc2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008cc6:	79fa      	ldrb	r2, [r7, #7]
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008cce:	79ba      	ldrb	r2, [r7, #6]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008cd6:	797a      	ldrb	r2, [r7, #5]
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008cde:	1d3b      	adds	r3, r7, #4
 8008ce0:	781a      	ldrb	r2, [r3, #0]
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008ce8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008cf2:	f107 0320 	add.w	r3, r7, #32
 8008cf6:	781a      	ldrb	r2, [r3, #0]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	2202      	movs	r2, #2
 8008d0a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008d16:	2301      	movs	r3, #1
 8008d18:	75fb      	strb	r3, [r7, #23]
      break;
 8008d1a:	e007      	b.n	8008d2c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008d1c:	7afb      	ldrb	r3, [r7, #11]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f7ff faf7 	bl	8008314 <USBH_MSC_BOT_Process>
 8008d26:	4603      	mov	r3, r0
 8008d28:	75fb      	strb	r3, [r7, #23]
      break;
 8008d2a:	bf00      	nop
  }

  return error;
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b086      	sub	sp, #24
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	60f8      	str	r0, [r7, #12]
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	603b      	str	r3, [r7, #0]
 8008d42:	460b      	mov	r3, r1
 8008d44:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008d46:	2302      	movs	r3, #2
 8008d48:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d002      	beq.n	8008d64 <USBH_MSC_SCSI_Read+0x2e>
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d047      	beq.n	8008df2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008d62:	e04e      	b.n	8008e02 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	fb03 f202 	mul.w	r2, r3, r2
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	2280      	movs	r2, #128	; 0x80
 8008d7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	220a      	movs	r2, #10
 8008d82:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	3363      	adds	r3, #99	; 0x63
 8008d8a:	2210      	movs	r2, #16
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f011 fdb8 	bl	801a904 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	2228      	movs	r2, #40	; 0x28
 8008d98:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008d9c:	79fa      	ldrb	r2, [r7, #7]
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008da4:	79ba      	ldrb	r2, [r7, #6]
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008dac:	797a      	ldrb	r2, [r7, #5]
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008db4:	1d3b      	adds	r3, r7, #4
 8008db6:	781a      	ldrb	r2, [r3, #0]
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008dbe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008dc8:	f107 0320 	add.w	r3, r7, #32
 8008dcc:	781a      	ldrb	r2, [r3, #0]
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	2202      	movs	r2, #2
 8008de0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008dec:	2301      	movs	r3, #1
 8008dee:	75fb      	strb	r3, [r7, #23]
      break;
 8008df0:	e007      	b.n	8008e02 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008df2:	7afb      	ldrb	r3, [r7, #11]
 8008df4:	4619      	mov	r1, r3
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f7ff fa8c 	bl	8008314 <USBH_MSC_BOT_Process>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8008e00:	bf00      	nop
  }

  return error;
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3718      	adds	r7, #24
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008e0c:	b5b0      	push	{r4, r5, r7, lr}
 8008e0e:	b090      	sub	sp, #64	; 0x40
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	4613      	mov	r3, r2
 8008e18:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8008e20:	482e      	ldr	r0, [pc, #184]	; (8008edc <USBH_Init+0xd0>)
 8008e22:	f011 fe21 	bl	801aa68 <iprintf>
 8008e26:	482e      	ldr	r0, [pc, #184]	; (8008ee0 <USBH_Init+0xd4>)
 8008e28:	f011 fe1e 	bl	801aa68 <iprintf>
 8008e2c:	200a      	movs	r0, #10
 8008e2e:	f011 fe33 	bl	801aa98 <putchar>
    return USBH_FAIL;
 8008e32:	2302      	movs	r3, #2
 8008e34:	e04d      	b.n	8008ed2 <USBH_Init+0xc6>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	79fa      	ldrb	r2, [r7, #7]
 8008e3a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 f84c 	bl	8008eec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008e82:	4b18      	ldr	r3, [pc, #96]	; (8008ee4 <USBH_Init+0xd8>)
 8008e84:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8008e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8008e8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e92:	2100      	movs	r1, #0
 8008e94:	4618      	mov	r0, r3
 8008e96:	f002 f95d 	bl	800b154 <osMessageCreate>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008ea2:	4b11      	ldr	r3, [pc, #68]	; (8008ee8 <USBH_Init+0xdc>)
 8008ea4:	f107 0414 	add.w	r4, r7, #20
 8008ea8:	461d      	mov	r5, r3
 8008eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008eae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008eb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8008eb6:	f107 0314 	add.w	r3, r7, #20
 8008eba:	68f9      	ldr	r1, [r7, #12]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f001 ff97 	bl	800adf0 <osThreadCreate>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f011 f9a8 	bl	801a220 <USBH_LL_Init>

  return USBH_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3740      	adds	r7, #64	; 0x40
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8008eda:	bf00      	nop
 8008edc:	0801bcc0 	.word	0x0801bcc0
 8008ee0:	0801bcc8 	.word	0x0801bcc8
 8008ee4:	0801bcdc 	.word	0x0801bcdc
 8008ee8:	0801bcec 	.word	0x0801bcec

08008eec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	e009      	b.n	8008f12 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	33e0      	adds	r3, #224	; 0xe0
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	2200      	movs	r2, #0
 8008f0a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b0e      	cmp	r3, #14
 8008f16:	d9f2      	bls.n	8008efe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60fb      	str	r3, [r7, #12]
 8008f1c:	e009      	b.n	8008f32 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f28:	2200      	movs	r2, #0
 8008f2a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f38:	d3f1      	bcc.n	8008f1e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2240      	movs	r2, #64	; 0x40
 8008f5e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d01f      	beq.n	8008fe8 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10e      	bne.n	8008fd0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008fb8:	1c59      	adds	r1, r3, #1
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	33de      	adds	r3, #222	; 0xde
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]
 8008fce:	e016      	b.n	8008ffe <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 8008fd0:	480d      	ldr	r0, [pc, #52]	; (8009008 <USBH_RegisterClass+0x74>)
 8008fd2:	f011 fd49 	bl	801aa68 <iprintf>
 8008fd6:	480d      	ldr	r0, [pc, #52]	; (800900c <USBH_RegisterClass+0x78>)
 8008fd8:	f011 fd46 	bl	801aa68 <iprintf>
 8008fdc:	200a      	movs	r0, #10
 8008fde:	f011 fd5b 	bl	801aa98 <putchar>
      status = USBH_FAIL;
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	73fb      	strb	r3, [r7, #15]
 8008fe6:	e00a      	b.n	8008ffe <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8008fe8:	4807      	ldr	r0, [pc, #28]	; (8009008 <USBH_RegisterClass+0x74>)
 8008fea:	f011 fd3d 	bl	801aa68 <iprintf>
 8008fee:	4808      	ldr	r0, [pc, #32]	; (8009010 <USBH_RegisterClass+0x7c>)
 8008ff0:	f011 fd3a 	bl	801aa68 <iprintf>
 8008ff4:	200a      	movs	r0, #10
 8008ff6:	f011 fd4f 	bl	801aa98 <putchar>
    status = USBH_FAIL;
 8008ffa:	2302      	movs	r3, #2
 8008ffc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	0801bcc0 	.word	0x0801bcc0
 800900c:	0801bd08 	.word	0x0801bd08
 8009010:	0801bd24 	.word	0x0801bd24

08009014 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800902a:	78fa      	ldrb	r2, [r7, #3]
 800902c:	429a      	cmp	r2, r3
 800902e:	d23c      	bcs.n	80090aa <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	78fa      	ldrb	r2, [r7, #3]
 8009034:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	4619      	mov	r1, r3
 800903c:	4823      	ldr	r0, [pc, #140]	; (80090cc <USBH_SelectInterface+0xb8>)
 800903e:	f011 fd13 	bl	801aa68 <iprintf>
 8009042:	200a      	movs	r0, #10
 8009044:	f011 fd28 	bl	801aa98 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	211a      	movs	r1, #26
 800904e:	fb01 f303 	mul.w	r3, r1, r3
 8009052:	4413      	add	r3, r2
 8009054:	f203 3347 	addw	r3, r3, #839	; 0x347
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	4619      	mov	r1, r3
 800905c:	481c      	ldr	r0, [pc, #112]	; (80090d0 <USBH_SelectInterface+0xbc>)
 800905e:	f011 fd03 	bl	801aa68 <iprintf>
 8009062:	200a      	movs	r0, #10
 8009064:	f011 fd18 	bl	801aa98 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 8009068:	78fb      	ldrb	r3, [r7, #3]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	211a      	movs	r1, #26
 800906e:	fb01 f303 	mul.w	r3, r1, r3
 8009072:	4413      	add	r3, r2
 8009074:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	4619      	mov	r1, r3
 800907c:	4815      	ldr	r0, [pc, #84]	; (80090d4 <USBH_SelectInterface+0xc0>)
 800907e:	f011 fcf3 	bl	801aa68 <iprintf>
 8009082:	200a      	movs	r0, #10
 8009084:	f011 fd08 	bl	801aa98 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	211a      	movs	r1, #26
 800908e:	fb01 f303 	mul.w	r3, r1, r3
 8009092:	4413      	add	r3, r2
 8009094:	f203 3349 	addw	r3, r3, #841	; 0x349
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	4619      	mov	r1, r3
 800909c:	480e      	ldr	r0, [pc, #56]	; (80090d8 <USBH_SelectInterface+0xc4>)
 800909e:	f011 fce3 	bl	801aa68 <iprintf>
 80090a2:	200a      	movs	r0, #10
 80090a4:	f011 fcf8 	bl	801aa98 <putchar>
 80090a8:	e00a      	b.n	80090c0 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 80090aa:	480c      	ldr	r0, [pc, #48]	; (80090dc <USBH_SelectInterface+0xc8>)
 80090ac:	f011 fcdc 	bl	801aa68 <iprintf>
 80090b0:	480b      	ldr	r0, [pc, #44]	; (80090e0 <USBH_SelectInterface+0xcc>)
 80090b2:	f011 fcd9 	bl	801aa68 <iprintf>
 80090b6:	200a      	movs	r0, #10
 80090b8:	f011 fcee 	bl	801aa98 <putchar>
    status = USBH_FAIL;
 80090bc:	2302      	movs	r3, #2
 80090be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80090c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	0801bd3c 	.word	0x0801bd3c
 80090d0:	0801bd5c 	.word	0x0801bd5c
 80090d4:	0801bd6c 	.word	0x0801bd6c
 80090d8:	0801bd7c 	.word	0x0801bd7c
 80090dc:	0801bcc0 	.word	0x0801bcc0
 80090e0:	0801bd8c 	.word	0x0801bd8c

080090e4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	4608      	mov	r0, r1
 80090ee:	4611      	mov	r1, r2
 80090f0:	461a      	mov	r2, r3
 80090f2:	4603      	mov	r3, r0
 80090f4:	70fb      	strb	r3, [r7, #3]
 80090f6:	460b      	mov	r3, r1
 80090f8:	70bb      	strb	r3, [r7, #2]
 80090fa:	4613      	mov	r3, r2
 80090fc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80090fe:	2300      	movs	r3, #0
 8009100:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009102:	2300      	movs	r3, #0
 8009104:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800910c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800910e:	e025      	b.n	800915c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009110:	7dfb      	ldrb	r3, [r7, #23]
 8009112:	221a      	movs	r2, #26
 8009114:	fb02 f303 	mul.w	r3, r2, r3
 8009118:	3308      	adds	r3, #8
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	4413      	add	r3, r2
 800911e:	3302      	adds	r3, #2
 8009120:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	795b      	ldrb	r3, [r3, #5]
 8009126:	78fa      	ldrb	r2, [r7, #3]
 8009128:	429a      	cmp	r2, r3
 800912a:	d002      	beq.n	8009132 <USBH_FindInterface+0x4e>
 800912c:	78fb      	ldrb	r3, [r7, #3]
 800912e:	2bff      	cmp	r3, #255	; 0xff
 8009130:	d111      	bne.n	8009156 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009136:	78ba      	ldrb	r2, [r7, #2]
 8009138:	429a      	cmp	r2, r3
 800913a:	d002      	beq.n	8009142 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800913c:	78bb      	ldrb	r3, [r7, #2]
 800913e:	2bff      	cmp	r3, #255	; 0xff
 8009140:	d109      	bne.n	8009156 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009146:	787a      	ldrb	r2, [r7, #1]
 8009148:	429a      	cmp	r2, r3
 800914a:	d002      	beq.n	8009152 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800914c:	787b      	ldrb	r3, [r7, #1]
 800914e:	2bff      	cmp	r3, #255	; 0xff
 8009150:	d101      	bne.n	8009156 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009152:	7dfb      	ldrb	r3, [r7, #23]
 8009154:	e006      	b.n	8009164 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009156:	7dfb      	ldrb	r3, [r7, #23]
 8009158:	3301      	adds	r3, #1
 800915a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800915c:	7dfb      	ldrb	r3, [r7, #23]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d9d6      	bls.n	8009110 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009162:	23ff      	movs	r3, #255	; 0xff
}
 8009164:	4618      	mov	r0, r3
 8009166:	371c      	adds	r7, #28
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f011 f88d 	bl	801a298 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800917e:	2101      	movs	r1, #1
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f011 f9a6 	bl	801a4d2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b088      	sub	sp, #32
 8009194:	af04      	add	r7, sp, #16
 8009196:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009198:	2302      	movs	r3, #2
 800919a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800919c:	2300      	movs	r3, #0
 800919e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d102      	bne.n	80091b2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2203      	movs	r2, #3
 80091b0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2b0b      	cmp	r3, #11
 80091ba:	f200 82b2 	bhi.w	8009722 <USBH_Process+0x592>
 80091be:	a201      	add	r2, pc, #4	; (adr r2, 80091c4 <USBH_Process+0x34>)
 80091c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c4:	080091f5 	.word	0x080091f5
 80091c8:	0800924f 	.word	0x0800924f
 80091cc:	080092eb 	.word	0x080092eb
 80091d0:	08009695 	.word	0x08009695
 80091d4:	08009723 	.word	0x08009723
 80091d8:	080093ab 	.word	0x080093ab
 80091dc:	080095fb 	.word	0x080095fb
 80091e0:	08009415 	.word	0x08009415
 80091e4:	08009451 	.word	0x08009451
 80091e8:	08009497 	.word	0x08009497
 80091ec:	080094eb 	.word	0x080094eb
 80091f0:	0800967d 	.word	0x0800967d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 8292 	beq.w	8009726 <USBH_Process+0x596>
      {
        USBH_UsrLog("USB Device Connected");
 8009202:	48c0      	ldr	r0, [pc, #768]	; (8009504 <USBH_Process+0x374>)
 8009204:	f011 fc30 	bl	801aa68 <iprintf>
 8009208:	200a      	movs	r0, #10
 800920a:	f011 fc45 	bl	801aa98 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009214:	20c8      	movs	r0, #200	; 0xc8
 8009216:	f011 f9ca 	bl	801a5ae <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f011 f899 	bl	801a352 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009244:	2200      	movs	r2, #0
 8009246:	4619      	mov	r1, r3
 8009248:	f001 ffac 	bl	800b1a4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800924c:	e26b      	b.n	8009726 <USBH_Process+0x596>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009254:	2b01      	cmp	r3, #1
 8009256:	d10d      	bne.n	8009274 <USBH_Process+0xe4>
      {
        USBH_UsrLog("USB Device Reset Completed");
 8009258:	48ab      	ldr	r0, [pc, #684]	; (8009508 <USBH_Process+0x378>)
 800925a:	f011 fc05 	bl	801aa68 <iprintf>
 800925e:	200a      	movs	r0, #10
 8009260:	f011 fc1a 	bl	801aa98 <putchar>
        phost->device.RstCnt = 0U;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	701a      	strb	r2, [r3, #0]
 8009272:	e02b      	b.n	80092cc <USBH_Process+0x13c>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800927a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800927e:	d91a      	bls.n	80092b6 <USBH_Process+0x126>
        {
          phost->device.RstCnt++;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009286:	3301      	adds	r3, #1
 8009288:	b2da      	uxtb	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009296:	2b03      	cmp	r3, #3
 8009298:	d909      	bls.n	80092ae <USBH_Process+0x11e>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800929a:	489c      	ldr	r0, [pc, #624]	; (800950c <USBH_Process+0x37c>)
 800929c:	f011 fbe4 	bl	801aa68 <iprintf>
 80092a0:	200a      	movs	r0, #10
 80092a2:	f011 fbf9 	bl	801aa98 <putchar>
            phost->gState = HOST_ABORT_STATE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	220d      	movs	r2, #13
 80092aa:	701a      	strb	r2, [r3, #0]
 80092ac:	e00e      	b.n	80092cc <USBH_Process+0x13c>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	701a      	strb	r2, [r3, #0]
 80092b4:	e00a      	b.n	80092cc <USBH_Process+0x13c>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80092bc:	f103 020a 	add.w	r2, r3, #10
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80092c6:	200a      	movs	r0, #10
 80092c8:	f011 f971 	bl	801a5ae <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80092e0:	2200      	movs	r2, #0
 80092e2:	4619      	mov	r1, r3
 80092e4:	f001 ff5e 	bl	800b1a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80092e8:	e224      	b.n	8009734 <USBH_Process+0x5a4>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d005      	beq.n	8009300 <USBH_Process+0x170>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092fa:	2104      	movs	r1, #4
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009300:	2064      	movs	r0, #100	; 0x64
 8009302:	f011 f954 	bl	801a5ae <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f010 fffc 	bl	801a304 <USBH_LL_GetSpeed>
 800930c:	4603      	mov	r3, r0
 800930e:	461a      	mov	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2205      	movs	r2, #5
 800931a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800931c:	2100      	movs	r1, #0
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 fc67 	bl	800abf2 <USBH_AllocPipe>
 8009324:	4603      	mov	r3, r0
 8009326:	461a      	mov	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800932c:	2180      	movs	r1, #128	; 0x80
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f001 fc5f 	bl	800abf2 <USBH_AllocPipe>
 8009334:	4603      	mov	r3, r0
 8009336:	461a      	mov	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	7919      	ldrb	r1, [r3, #4]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009350:	b292      	uxth	r2, r2
 8009352:	9202      	str	r2, [sp, #8]
 8009354:	2200      	movs	r2, #0
 8009356:	9201      	str	r2, [sp, #4]
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	4603      	mov	r3, r0
 800935c:	2280      	movs	r2, #128	; 0x80
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f001 fc18 	bl	800ab94 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	7959      	ldrb	r1, [r3, #5]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009378:	b292      	uxth	r2, r2
 800937a:	9202      	str	r2, [sp, #8]
 800937c:	2200      	movs	r2, #0
 800937e:	9201      	str	r2, [sp, #4]
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	4603      	mov	r3, r0
 8009384:	2200      	movs	r2, #0
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 fc04 	bl	800ab94 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80093a0:	2200      	movs	r2, #0
 80093a2:	4619      	mov	r1, r3
 80093a4:	f001 fefe 	bl	800b1a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80093a8:	e1c4      	b.n	8009734 <USBH_Process+0x5a4>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f9d6 	bl	800975c <USBH_HandleEnum>
 80093b0:	4603      	mov	r3, r0
 80093b2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f040 81b6 	bne.w	800972a <USBH_Process+0x59a>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 80093be:	4854      	ldr	r0, [pc, #336]	; (8009510 <USBH_Process+0x380>)
 80093c0:	f011 fb52 	bl	801aa68 <iprintf>
 80093c4:	200a      	movs	r0, #10
 80093c6:	f011 fb67 	bl	801aa98 <putchar>

        phost->device.current_interface = 0U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d109      	bne.n	80093f0 <USBH_Process+0x260>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 80093dc:	484d      	ldr	r0, [pc, #308]	; (8009514 <USBH_Process+0x384>)
 80093de:	f011 fb43 	bl	801aa68 <iprintf>
 80093e2:	200a      	movs	r0, #10
 80093e4:	f011 fb58 	bl	801aa98 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2208      	movs	r2, #8
 80093ec:	701a      	strb	r2, [r3, #0]
 80093ee:	e002      	b.n	80093f6 <USBH_Process+0x266>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2207      	movs	r2, #7
 80093f4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2205      	movs	r2, #5
 80093fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800940a:	2200      	movs	r2, #0
 800940c:	4619      	mov	r1, r3
 800940e:	f001 fec9 	bl	800b1a4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009412:	e18a      	b.n	800972a <USBH_Process+0x59a>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800941a:	2b00      	cmp	r3, #0
 800941c:	f000 8187 	beq.w	800972e <USBH_Process+0x59e>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009426:	2101      	movs	r1, #1
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2208      	movs	r2, #8
 8009430:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2205      	movs	r2, #5
 8009436:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009446:	2200      	movs	r2, #0
 8009448:	4619      	mov	r1, r3
 800944a:	f001 feab 	bl	800b1a4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800944e:	e16e      	b.n	800972e <USBH_Process+0x59e>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009456:	b29b      	uxth	r3, r3
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fe26 	bl	800a0ac <USBH_SetCfg>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d108      	bne.n	8009478 <USBH_Process+0x2e8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2209      	movs	r2, #9
 800946a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800946c:	482a      	ldr	r0, [pc, #168]	; (8009518 <USBH_Process+0x388>)
 800946e:	f011 fafb 	bl	801aa68 <iprintf>
 8009472:	200a      	movs	r0, #10
 8009474:	f011 fb10 	bl	801aa98 <putchar>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800948c:	2200      	movs	r2, #0
 800948e:	4619      	mov	r1, r3
 8009490:	f001 fe88 	bl	800b1a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009494:	e14e      	b.n	8009734 <USBH_Process+0x5a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800949c:	f003 0320 	and.w	r3, r3, #32
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d010      	beq.n	80094c6 <USBH_Process+0x336>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80094a4:	2101      	movs	r1, #1
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fe23 	bl	800a0f2 <USBH_SetFeature>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10c      	bne.n	80094cc <USBH_Process+0x33c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 80094b2:	481a      	ldr	r0, [pc, #104]	; (800951c <USBH_Process+0x38c>)
 80094b4:	f011 fad8 	bl	801aa68 <iprintf>
 80094b8:	200a      	movs	r0, #10
 80094ba:	f011 faed 	bl	801aa98 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	220a      	movs	r2, #10
 80094c2:	701a      	strb	r2, [r3, #0]
 80094c4:	e002      	b.n	80094cc <USBH_Process+0x33c>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	220a      	movs	r2, #10
 80094ca:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094e0:	2200      	movs	r2, #0
 80094e2:	4619      	mov	r1, r3
 80094e4:	f001 fe5e 	bl	800b1a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80094e8:	e124      	b.n	8009734 <USBH_Process+0x5a4>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d117      	bne.n	8009524 <USBH_Process+0x394>
      {
        USBH_UsrLog("No Class has been registered.");
 80094f4:	480a      	ldr	r0, [pc, #40]	; (8009520 <USBH_Process+0x390>)
 80094f6:	f011 fab7 	bl	801aa68 <iprintf>
 80094fa:	200a      	movs	r0, #10
 80094fc:	f011 facc 	bl	801aa98 <putchar>
 8009500:	e06c      	b.n	80095dc <USBH_Process+0x44c>
 8009502:	bf00      	nop
 8009504:	0801bdac 	.word	0x0801bdac
 8009508:	0801bdc4 	.word	0x0801bdc4
 800950c:	0801bde0 	.word	0x0801bde0
 8009510:	0801be0c 	.word	0x0801be0c
 8009514:	0801be20 	.word	0x0801be20
 8009518:	0801be48 	.word	0x0801be48
 800951c:	0801be64 	.word	0x0801be64
 8009520:	0801be84 	.word	0x0801be84
      }
      else
      {
        phost->pActiveClass = NULL;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]
 8009530:	e016      	b.n	8009560 <USBH_Process+0x3d0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009532:	7bfa      	ldrb	r2, [r7, #15]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	32de      	adds	r2, #222	; 0xde
 8009538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800953c:	791a      	ldrb	r2, [r3, #4]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009544:	429a      	cmp	r2, r3
 8009546:	d108      	bne.n	800955a <USBH_Process+0x3ca>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009548:	7bfa      	ldrb	r2, [r7, #15]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	32de      	adds	r2, #222	; 0xde
 800954e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009558:	e005      	b.n	8009566 <USBH_Process+0x3d6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800955a:	7bfb      	ldrb	r3, [r7, #15]
 800955c:	3301      	adds	r3, #1
 800955e:	73fb      	strb	r3, [r7, #15]
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0e5      	beq.n	8009532 <USBH_Process+0x3a2>
          }
        }

        if (phost->pActiveClass != NULL)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800956c:	2b00      	cmp	r3, #0
 800956e:	d02c      	beq.n	80095ca <USBH_Process+0x43a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	4798      	blx	r3
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d114      	bne.n	80095ac <USBH_Process+0x41c>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2206      	movs	r2, #6
 8009586:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4619      	mov	r1, r3
 8009592:	486b      	ldr	r0, [pc, #428]	; (8009740 <USBH_Process+0x5b0>)
 8009594:	f011 fa68 	bl	801aa68 <iprintf>
 8009598:	200a      	movs	r0, #10
 800959a:	f011 fa7d 	bl	801aa98 <putchar>

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095a4:	2103      	movs	r1, #3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	4798      	blx	r3
 80095aa:	e017      	b.n	80095dc <USBH_Process+0x44c>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	220d      	movs	r2, #13
 80095b0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4619      	mov	r1, r3
 80095bc:	4861      	ldr	r0, [pc, #388]	; (8009744 <USBH_Process+0x5b4>)
 80095be:	f011 fa53 	bl	801aa68 <iprintf>
 80095c2:	200a      	movs	r0, #10
 80095c4:	f011 fa68 	bl	801aa98 <putchar>
 80095c8:	e008      	b.n	80095dc <USBH_Process+0x44c>
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	220d      	movs	r2, #13
 80095ce:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 80095d0:	485d      	ldr	r0, [pc, #372]	; (8009748 <USBH_Process+0x5b8>)
 80095d2:	f011 fa49 	bl	801aa68 <iprintf>
 80095d6:	200a      	movs	r0, #10
 80095d8:	f011 fa5e 	bl	801aa98 <putchar>
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2205      	movs	r2, #5
 80095e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095f0:	2200      	movs	r2, #0
 80095f2:	4619      	mov	r1, r3
 80095f4:	f001 fdd6 	bl	800b1a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80095f8:	e09c      	b.n	8009734 <USBH_Process+0x5a4>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009600:	2b00      	cmp	r3, #0
 8009602:	d020      	beq.n	8009646 <USBH_Process+0x4b6>
      {
        status = phost->pActiveClass->Requests(phost);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	4798      	blx	r3
 8009610:	4603      	mov	r3, r0
 8009612:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d103      	bne.n	8009624 <USBH_Process+0x494>
        {
          phost->gState = HOST_CLASS;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	220b      	movs	r2, #11
 8009620:	701a      	strb	r2, [r3, #0]
 8009622:	e01c      	b.n	800965e <USBH_Process+0x4ce>
        }
        else if (status == USBH_FAIL)
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b02      	cmp	r3, #2
 800962a:	d118      	bne.n	800965e <USBH_Process+0x4ce>
        {
          phost->gState = HOST_ABORT_STATE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	220d      	movs	r2, #13
 8009630:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8009632:	4846      	ldr	r0, [pc, #280]	; (800974c <USBH_Process+0x5bc>)
 8009634:	f011 fa18 	bl	801aa68 <iprintf>
 8009638:	4845      	ldr	r0, [pc, #276]	; (8009750 <USBH_Process+0x5c0>)
 800963a:	f011 fa15 	bl	801aa68 <iprintf>
 800963e:	200a      	movs	r0, #10
 8009640:	f011 fa2a 	bl	801aa98 <putchar>
 8009644:	e00b      	b.n	800965e <USBH_Process+0x4ce>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	220d      	movs	r2, #13
 800964a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800964c:	483f      	ldr	r0, [pc, #252]	; (800974c <USBH_Process+0x5bc>)
 800964e:	f011 fa0b 	bl	801aa68 <iprintf>
 8009652:	4840      	ldr	r0, [pc, #256]	; (8009754 <USBH_Process+0x5c4>)
 8009654:	f011 fa08 	bl	801aa68 <iprintf>
 8009658:	200a      	movs	r0, #10
 800965a:	f011 fa1d 	bl	801aa98 <putchar>
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2205      	movs	r2, #5
 8009662:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009672:	2200      	movs	r2, #0
 8009674:	4619      	mov	r1, r3
 8009676:	f001 fd95 	bl	800b1a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800967a:	e05b      	b.n	8009734 <USBH_Process+0x5a4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009682:	2b00      	cmp	r3, #0
 8009684:	d055      	beq.n	8009732 <USBH_Process+0x5a2>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	4798      	blx	r3
      }
      break;
 8009692:	e04e      	b.n	8009732 <USBH_Process+0x5a2>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7ff fc25 	bl	8008eec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d009      	beq.n	80096c0 <USBH_Process+0x530>
      {
        phost->pActiveClass->DeInit(phost);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d005      	beq.n	80096d6 <USBH_Process+0x546>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096d0:	2105      	movs	r1, #5
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 80096d6:	4820      	ldr	r0, [pc, #128]	; (8009758 <USBH_Process+0x5c8>)
 80096d8:	f011 f9c6 	bl	801aa68 <iprintf>
 80096dc:	200a      	movs	r0, #10
 80096de:	f011 f9db 	bl	801aa98 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d107      	bne.n	80096fe <USBH_Process+0x56e>
      {
        phost->device.is_ReEnumerated = 0U;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7ff fd3a 	bl	8009170 <USBH_Start>
 80096fc:	e002      	b.n	8009704 <USBH_Process+0x574>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f010 fdca 	bl	801a298 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009718:	2200      	movs	r2, #0
 800971a:	4619      	mov	r1, r3
 800971c:	f001 fd42 	bl	800b1a4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009720:	e008      	b.n	8009734 <USBH_Process+0x5a4>

    case HOST_ABORT_STATE:
    default :
      break;
 8009722:	bf00      	nop
 8009724:	e006      	b.n	8009734 <USBH_Process+0x5a4>
      break;
 8009726:	bf00      	nop
 8009728:	e004      	b.n	8009734 <USBH_Process+0x5a4>
      break;
 800972a:	bf00      	nop
 800972c:	e002      	b.n	8009734 <USBH_Process+0x5a4>
    break;
 800972e:	bf00      	nop
 8009730:	e000      	b.n	8009734 <USBH_Process+0x5a4>
      break;
 8009732:	bf00      	nop
  }
  return USBH_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	0801bea4 	.word	0x0801bea4
 8009744:	0801beb8 	.word	0x0801beb8
 8009748:	0801bed8 	.word	0x0801bed8
 800974c:	0801bcc0 	.word	0x0801bcc0
 8009750:	0801bf00 	.word	0x0801bf00
 8009754:	0801bf28 	.word	0x0801bf28
 8009758:	0801bf40 	.word	0x0801bf40

0800975c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b088      	sub	sp, #32
 8009760:	af04      	add	r7, sp, #16
 8009762:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009764:	2301      	movs	r3, #1
 8009766:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009768:	2301      	movs	r3, #1
 800976a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	785b      	ldrb	r3, [r3, #1]
 8009770:	2b07      	cmp	r3, #7
 8009772:	f200 82c6 	bhi.w	8009d02 <USBH_HandleEnum+0x5a6>
 8009776:	a201      	add	r2, pc, #4	; (adr r2, 800977c <USBH_HandleEnum+0x20>)
 8009778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977c:	0800979d 	.word	0x0800979d
 8009780:	08009879 	.word	0x08009879
 8009784:	08009929 	.word	0x08009929
 8009788:	080099e9 	.word	0x080099e9
 800978c:	08009a71 	.word	0x08009a71
 8009790:	08009b25 	.word	0x08009b25
 8009794:	08009bed 	.word	0x08009bed
 8009798:	08009c97 	.word	0x08009c97
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800979c:	2108      	movs	r1, #8
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fbb4 	bl	8009f0c <USBH_Get_DevDesc>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d130      	bne.n	8009810 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	7919      	ldrb	r1, [r3, #4]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80097d2:	b292      	uxth	r2, r2
 80097d4:	9202      	str	r2, [sp, #8]
 80097d6:	2200      	movs	r2, #0
 80097d8:	9201      	str	r2, [sp, #4]
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	4603      	mov	r3, r0
 80097de:	2280      	movs	r2, #128	; 0x80
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f001 f9d7 	bl	800ab94 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	7959      	ldrb	r1, [r3, #5]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80097fa:	b292      	uxth	r2, r2
 80097fc:	9202      	str	r2, [sp, #8]
 80097fe:	2200      	movs	r2, #0
 8009800:	9201      	str	r2, [sp, #4]
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	4603      	mov	r3, r0
 8009806:	2200      	movs	r2, #0
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f001 f9c3 	bl	800ab94 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800980e:	e27a      	b.n	8009d06 <USBH_HandleEnum+0x5aa>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009810:	7bbb      	ldrb	r3, [r7, #14]
 8009812:	2b03      	cmp	r3, #3
 8009814:	f040 8277 	bne.w	8009d06 <USBH_HandleEnum+0x5aa>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 8009818:	48b9      	ldr	r0, [pc, #740]	; (8009b00 <USBH_HandleEnum+0x3a4>)
 800981a:	f011 f925 	bl	801aa68 <iprintf>
 800981e:	48b9      	ldr	r0, [pc, #740]	; (8009b04 <USBH_HandleEnum+0x3a8>)
 8009820:	f011 f922 	bl	801aa68 <iprintf>
 8009824:	200a      	movs	r0, #10
 8009826:	f011 f937 	bl	801aa98 <putchar>
        phost->device.EnumCnt++;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009830:	3301      	adds	r3, #1
 8009832:	b2da      	uxtb	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009840:	2b03      	cmp	r3, #3
 8009842:	d909      	bls.n	8009858 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8009844:	48b0      	ldr	r0, [pc, #704]	; (8009b08 <USBH_HandleEnum+0x3ac>)
 8009846:	f011 f90f 	bl	801aa68 <iprintf>
 800984a:	200a      	movs	r0, #10
 800984c:	f011 f924 	bl	801aa98 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	220d      	movs	r2, #13
 8009854:	701a      	strb	r2, [r3, #0]
      break;
 8009856:	e256      	b.n	8009d06 <USBH_HandleEnum+0x5aa>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	795b      	ldrb	r3, [r3, #5]
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f001 f9e8 	bl	800ac34 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	791b      	ldrb	r3, [r3, #4]
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 f9e2 	bl	800ac34 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	701a      	strb	r2, [r3, #0]
      break;
 8009876:	e246      	b.n	8009d06 <USBH_HandleEnum+0x5aa>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009878:	2112      	movs	r1, #18
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fb46 	bl	8009f0c <USBH_Get_DevDesc>
 8009880:	4603      	mov	r3, r0
 8009882:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009884:	7bbb      	ldrb	r3, [r7, #14]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d117      	bne.n	80098ba <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 8009890:	4619      	mov	r1, r3
 8009892:	489e      	ldr	r0, [pc, #632]	; (8009b0c <USBH_HandleEnum+0x3b0>)
 8009894:	f011 f8e8 	bl	801aa68 <iprintf>
 8009898:	200a      	movs	r0, #10
 800989a:	f011 f8fd 	bl	801aa98 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 80098a4:	4619      	mov	r1, r3
 80098a6:	489a      	ldr	r0, [pc, #616]	; (8009b10 <USBH_HandleEnum+0x3b4>)
 80098a8:	f011 f8de 	bl	801aa68 <iprintf>
 80098ac:	200a      	movs	r0, #10
 80098ae:	f011 f8f3 	bl	801aa98 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2202      	movs	r2, #2
 80098b6:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80098b8:	e227      	b.n	8009d0a <USBH_HandleEnum+0x5ae>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
 80098bc:	2b03      	cmp	r3, #3
 80098be:	f040 8224 	bne.w	8009d0a <USBH_HandleEnum+0x5ae>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 80098c2:	488f      	ldr	r0, [pc, #572]	; (8009b00 <USBH_HandleEnum+0x3a4>)
 80098c4:	f011 f8d0 	bl	801aa68 <iprintf>
 80098c8:	4892      	ldr	r0, [pc, #584]	; (8009b14 <USBH_HandleEnum+0x3b8>)
 80098ca:	f011 f8cd 	bl	801aa68 <iprintf>
 80098ce:	200a      	movs	r0, #10
 80098d0:	f011 f8e2 	bl	801aa98 <putchar>
        phost->device.EnumCnt++;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098da:	3301      	adds	r3, #1
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	d909      	bls.n	8009902 <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80098ee:	4886      	ldr	r0, [pc, #536]	; (8009b08 <USBH_HandleEnum+0x3ac>)
 80098f0:	f011 f8ba 	bl	801aa68 <iprintf>
 80098f4:	200a      	movs	r0, #10
 80098f6:	f011 f8cf 	bl	801aa98 <putchar>
          phost->gState = HOST_ABORT_STATE;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	220d      	movs	r2, #13
 80098fe:	701a      	strb	r2, [r3, #0]
      break;
 8009900:	e203      	b.n	8009d0a <USBH_HandleEnum+0x5ae>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	795b      	ldrb	r3, [r3, #5]
 8009906:	4619      	mov	r1, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f001 f993 	bl	800ac34 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	791b      	ldrb	r3, [r3, #4]
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 f98d 	bl	800ac34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	701a      	strb	r2, [r3, #0]
      break;
 8009926:	e1f0      	b.n	8009d0a <USBH_HandleEnum+0x5ae>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009928:	2101      	movs	r1, #1
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fb9a 	bl	800a064 <USBH_SetAddress>
 8009930:	4603      	mov	r3, r0
 8009932:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009934:	7bbb      	ldrb	r3, [r7, #14]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d13c      	bne.n	80099b4 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 800993a:	2002      	movs	r0, #2
 800993c:	f010 fe37 	bl	801a5ae <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800994e:	4619      	mov	r1, r3
 8009950:	4871      	ldr	r0, [pc, #452]	; (8009b18 <USBH_HandleEnum+0x3bc>)
 8009952:	f011 f889 	bl	801aa68 <iprintf>
 8009956:	200a      	movs	r0, #10
 8009958:	f011 f89e 	bl	801aa98 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2203      	movs	r2, #3
 8009960:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	7919      	ldrb	r1, [r3, #4]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009976:	b292      	uxth	r2, r2
 8009978:	9202      	str	r2, [sp, #8]
 800997a:	2200      	movs	r2, #0
 800997c:	9201      	str	r2, [sp, #4]
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	4603      	mov	r3, r0
 8009982:	2280      	movs	r2, #128	; 0x80
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f001 f905 	bl	800ab94 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	7959      	ldrb	r1, [r3, #5]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800999e:	b292      	uxth	r2, r2
 80099a0:	9202      	str	r2, [sp, #8]
 80099a2:	2200      	movs	r2, #0
 80099a4:	9201      	str	r2, [sp, #4]
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	4603      	mov	r3, r0
 80099aa:	2200      	movs	r2, #0
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f001 f8f1 	bl	800ab94 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80099b2:	e1ac      	b.n	8009d0e <USBH_HandleEnum+0x5b2>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
 80099b6:	2b03      	cmp	r3, #3
 80099b8:	f040 81a9 	bne.w	8009d0e <USBH_HandleEnum+0x5b2>
        USBH_ErrLog("Control error: Device Set Address request failed");
 80099bc:	4850      	ldr	r0, [pc, #320]	; (8009b00 <USBH_HandleEnum+0x3a4>)
 80099be:	f011 f853 	bl	801aa68 <iprintf>
 80099c2:	4856      	ldr	r0, [pc, #344]	; (8009b1c <USBH_HandleEnum+0x3c0>)
 80099c4:	f011 f850 	bl	801aa68 <iprintf>
 80099c8:	200a      	movs	r0, #10
 80099ca:	f011 f865 	bl	801aa98 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80099ce:	484e      	ldr	r0, [pc, #312]	; (8009b08 <USBH_HandleEnum+0x3ac>)
 80099d0:	f011 f84a 	bl	801aa68 <iprintf>
 80099d4:	200a      	movs	r0, #10
 80099d6:	f011 f85f 	bl	801aa98 <putchar>
        phost->gState = HOST_ABORT_STATE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	220d      	movs	r2, #13
 80099de:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	705a      	strb	r2, [r3, #1]
      break;
 80099e6:	e192      	b.n	8009d0e <USBH_HandleEnum+0x5b2>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80099e8:	2109      	movs	r1, #9
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fab6 	bl	8009f5c <USBH_Get_CfgDesc>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099f4:	7bbb      	ldrb	r3, [r7, #14]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d103      	bne.n	8009a02 <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2204      	movs	r2, #4
 80099fe:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a00:	e187      	b.n	8009d12 <USBH_HandleEnum+0x5b6>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a02:	7bbb      	ldrb	r3, [r7, #14]
 8009a04:	2b03      	cmp	r3, #3
 8009a06:	f040 8184 	bne.w	8009d12 <USBH_HandleEnum+0x5b6>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8009a0a:	483d      	ldr	r0, [pc, #244]	; (8009b00 <USBH_HandleEnum+0x3a4>)
 8009a0c:	f011 f82c 	bl	801aa68 <iprintf>
 8009a10:	4843      	ldr	r0, [pc, #268]	; (8009b20 <USBH_HandleEnum+0x3c4>)
 8009a12:	f011 f829 	bl	801aa68 <iprintf>
 8009a16:	200a      	movs	r0, #10
 8009a18:	f011 f83e 	bl	801aa98 <putchar>
        phost->device.EnumCnt++;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a22:	3301      	adds	r3, #1
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	d909      	bls.n	8009a4a <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8009a36:	4834      	ldr	r0, [pc, #208]	; (8009b08 <USBH_HandleEnum+0x3ac>)
 8009a38:	f011 f816 	bl	801aa68 <iprintf>
 8009a3c:	200a      	movs	r0, #10
 8009a3e:	f011 f82b 	bl	801aa98 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	220d      	movs	r2, #13
 8009a46:	701a      	strb	r2, [r3, #0]
      break;
 8009a48:	e163      	b.n	8009d12 <USBH_HandleEnum+0x5b6>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	795b      	ldrb	r3, [r3, #5]
 8009a4e:	4619      	mov	r1, r3
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f001 f8ef 	bl	800ac34 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	791b      	ldrb	r3, [r3, #4]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f001 f8e9 	bl	800ac34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	701a      	strb	r2, [r3, #0]
      break;
 8009a6e:	e150      	b.n	8009d12 <USBH_HandleEnum+0x5b6>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fa6f 	bl	8009f5c <USBH_Get_CfgDesc>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d103      	bne.n	8009a90 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2205      	movs	r2, #5
 8009a8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a8e:	e142      	b.n	8009d16 <USBH_HandleEnum+0x5ba>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a90:	7bbb      	ldrb	r3, [r7, #14]
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	f040 813f 	bne.w	8009d16 <USBH_HandleEnum+0x5ba>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8009a98:	4819      	ldr	r0, [pc, #100]	; (8009b00 <USBH_HandleEnum+0x3a4>)
 8009a9a:	f010 ffe5 	bl	801aa68 <iprintf>
 8009a9e:	4820      	ldr	r0, [pc, #128]	; (8009b20 <USBH_HandleEnum+0x3c4>)
 8009aa0:	f010 ffe2 	bl	801aa68 <iprintf>
 8009aa4:	200a      	movs	r0, #10
 8009aa6:	f010 fff7 	bl	801aa98 <putchar>
        phost->device.EnumCnt++;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d909      	bls.n	8009ad8 <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8009ac4:	4810      	ldr	r0, [pc, #64]	; (8009b08 <USBH_HandleEnum+0x3ac>)
 8009ac6:	f010 ffcf 	bl	801aa68 <iprintf>
 8009aca:	200a      	movs	r0, #10
 8009acc:	f010 ffe4 	bl	801aa98 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	220d      	movs	r2, #13
 8009ad4:	701a      	strb	r2, [r3, #0]
      break;
 8009ad6:	e11e      	b.n	8009d16 <USBH_HandleEnum+0x5ba>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	795b      	ldrb	r3, [r3, #5]
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 f8a8 	bl	800ac34 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	791b      	ldrb	r3, [r3, #4]
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f001 f8a2 	bl	800ac34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	701a      	strb	r2, [r3, #0]
      break;
 8009afc:	e10b      	b.n	8009d16 <USBH_HandleEnum+0x5ba>
 8009afe:	bf00      	nop
 8009b00:	0801bcc0 	.word	0x0801bcc0
 8009b04:	0801bf58 	.word	0x0801bf58
 8009b08:	0801bf8c 	.word	0x0801bf8c
 8009b0c:	0801bfcc 	.word	0x0801bfcc
 8009b10:	0801bfd8 	.word	0x0801bfd8
 8009b14:	0801bfe4 	.word	0x0801bfe4
 8009b18:	0801c020 	.word	0x0801c020
 8009b1c:	0801c038 	.word	0x0801c038
 8009b20:	0801c06c 	.word	0x0801c06c

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d046      	beq.n	8009bbc <USBH_HandleEnum+0x460>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b3a:	23ff      	movs	r3, #255	; 0xff
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fa31 	bl	8009fa4 <USBH_Get_StringDesc>
 8009b42:	4603      	mov	r3, r0
 8009b44:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b46:	7bbb      	ldrb	r3, [r7, #14]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d11b      	bne.n	8009b84 <USBH_HandleEnum+0x428>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009b52:	4619      	mov	r1, r3
 8009b54:	4876      	ldr	r0, [pc, #472]	; (8009d30 <USBH_HandleEnum+0x5d4>)
 8009b56:	f010 ff87 	bl	801aa68 <iprintf>
 8009b5a:	200a      	movs	r0, #10
 8009b5c:	f010 ff9c 	bl	801aa98 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2206      	movs	r2, #6
 8009b64:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2205      	movs	r2, #5
 8009b6a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	f001 fb11 	bl	800b1a4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009b82:	e0ca      	b.n	8009d1a <USBH_HandleEnum+0x5be>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	f040 80c7 	bne.w	8009d1a <USBH_HandleEnum+0x5be>
          USBH_UsrLog("Manufacturer : N/A");
 8009b8c:	4869      	ldr	r0, [pc, #420]	; (8009d34 <USBH_HandleEnum+0x5d8>)
 8009b8e:	f010 ff6b 	bl	801aa68 <iprintf>
 8009b92:	200a      	movs	r0, #10
 8009b94:	f010 ff80 	bl	801aa98 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2206      	movs	r2, #6
 8009b9c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2205      	movs	r2, #5
 8009ba2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	f001 faf5 	bl	800b1a4 <osMessagePut>
      break;
 8009bba:	e0ae      	b.n	8009d1a <USBH_HandleEnum+0x5be>
        USBH_UsrLog("Manufacturer : N/A");
 8009bbc:	485d      	ldr	r0, [pc, #372]	; (8009d34 <USBH_HandleEnum+0x5d8>)
 8009bbe:	f010 ff53 	bl	801aa68 <iprintf>
 8009bc2:	200a      	movs	r0, #10
 8009bc4:	f010 ff68 	bl	801aa98 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2206      	movs	r2, #6
 8009bcc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2205      	movs	r2, #5
 8009bd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009be2:	2200      	movs	r2, #0
 8009be4:	4619      	mov	r1, r3
 8009be6:	f001 fadd 	bl	800b1a4 <osMessagePut>
      break;
 8009bea:	e096      	b.n	8009d1a <USBH_HandleEnum+0x5be>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d037      	beq.n	8009c66 <USBH_HandleEnum+0x50a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c02:	23ff      	movs	r3, #255	; 0xff
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f9cd 	bl	8009fa4 <USBH_Get_StringDesc>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c0e:	7bbb      	ldrb	r3, [r7, #14]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10d      	bne.n	8009c30 <USBH_HandleEnum+0x4d4>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4846      	ldr	r0, [pc, #280]	; (8009d38 <USBH_HandleEnum+0x5dc>)
 8009c1e:	f010 ff23 	bl	801aa68 <iprintf>
 8009c22:	200a      	movs	r0, #10
 8009c24:	f010 ff38 	bl	801aa98 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2207      	movs	r2, #7
 8009c2c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009c2e:	e076      	b.n	8009d1e <USBH_HandleEnum+0x5c2>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	2b03      	cmp	r3, #3
 8009c34:	d173      	bne.n	8009d1e <USBH_HandleEnum+0x5c2>
          USBH_UsrLog("Product : N/A");
 8009c36:	4841      	ldr	r0, [pc, #260]	; (8009d3c <USBH_HandleEnum+0x5e0>)
 8009c38:	f010 ff16 	bl	801aa68 <iprintf>
 8009c3c:	200a      	movs	r0, #10
 8009c3e:	f010 ff2b 	bl	801aa98 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2207      	movs	r2, #7
 8009c46:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2205      	movs	r2, #5
 8009c4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	4619      	mov	r1, r3
 8009c60:	f001 faa0 	bl	800b1a4 <osMessagePut>
      break;
 8009c64:	e05b      	b.n	8009d1e <USBH_HandleEnum+0x5c2>
        USBH_UsrLog("Product : N/A");
 8009c66:	4835      	ldr	r0, [pc, #212]	; (8009d3c <USBH_HandleEnum+0x5e0>)
 8009c68:	f010 fefe 	bl	801aa68 <iprintf>
 8009c6c:	200a      	movs	r0, #10
 8009c6e:	f010 ff13 	bl	801aa98 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2207      	movs	r2, #7
 8009c76:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2205      	movs	r2, #5
 8009c7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	4619      	mov	r1, r3
 8009c90:	f001 fa88 	bl	800b1a4 <osMessagePut>
      break;
 8009c94:	e043      	b.n	8009d1e <USBH_HandleEnum+0x5c2>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d027      	beq.n	8009cf0 <USBH_HandleEnum+0x594>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009cac:	23ff      	movs	r3, #255	; 0xff
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f978 	bl	8009fa4 <USBH_Get_StringDesc>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10c      	bne.n	8009cd8 <USBH_HandleEnum+0x57c>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	481e      	ldr	r0, [pc, #120]	; (8009d40 <USBH_HandleEnum+0x5e4>)
 8009cc8:	f010 fece 	bl	801aa68 <iprintf>
 8009ccc:	200a      	movs	r0, #10
 8009cce:	f010 fee3 	bl	801aa98 <putchar>
          Status = USBH_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009cd6:	e024      	b.n	8009d22 <USBH_HandleEnum+0x5c6>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d121      	bne.n	8009d22 <USBH_HandleEnum+0x5c6>
          USBH_UsrLog("Serial Number : N/A");
 8009cde:	4819      	ldr	r0, [pc, #100]	; (8009d44 <USBH_HandleEnum+0x5e8>)
 8009ce0:	f010 fec2 	bl	801aa68 <iprintf>
 8009ce4:	200a      	movs	r0, #10
 8009ce6:	f010 fed7 	bl	801aa98 <putchar>
          Status = USBH_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	73fb      	strb	r3, [r7, #15]
      break;
 8009cee:	e018      	b.n	8009d22 <USBH_HandleEnum+0x5c6>
        USBH_UsrLog("Serial Number : N/A");
 8009cf0:	4814      	ldr	r0, [pc, #80]	; (8009d44 <USBH_HandleEnum+0x5e8>)
 8009cf2:	f010 feb9 	bl	801aa68 <iprintf>
 8009cf6:	200a      	movs	r0, #10
 8009cf8:	f010 fece 	bl	801aa98 <putchar>
        Status = USBH_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8009d00:	e00f      	b.n	8009d22 <USBH_HandleEnum+0x5c6>

    default:
      break;
 8009d02:	bf00      	nop
 8009d04:	e00e      	b.n	8009d24 <USBH_HandleEnum+0x5c8>
      break;
 8009d06:	bf00      	nop
 8009d08:	e00c      	b.n	8009d24 <USBH_HandleEnum+0x5c8>
      break;
 8009d0a:	bf00      	nop
 8009d0c:	e00a      	b.n	8009d24 <USBH_HandleEnum+0x5c8>
      break;
 8009d0e:	bf00      	nop
 8009d10:	e008      	b.n	8009d24 <USBH_HandleEnum+0x5c8>
      break;
 8009d12:	bf00      	nop
 8009d14:	e006      	b.n	8009d24 <USBH_HandleEnum+0x5c8>
      break;
 8009d16:	bf00      	nop
 8009d18:	e004      	b.n	8009d24 <USBH_HandleEnum+0x5c8>
      break;
 8009d1a:	bf00      	nop
 8009d1c:	e002      	b.n	8009d24 <USBH_HandleEnum+0x5c8>
      break;
 8009d1e:	bf00      	nop
 8009d20:	e000      	b.n	8009d24 <USBH_HandleEnum+0x5c8>
      break;
 8009d22:	bf00      	nop
  }
  return Status;
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	0801c0b0 	.word	0x0801c0b0
 8009d34:	0801c0c4 	.word	0x0801c0c4
 8009d38:	0801c0d8 	.word	0x0801c0d8
 8009d3c:	0801c0e8 	.word	0x0801c0e8
 8009d40:	0801c0f8 	.word	0x0801c0f8
 8009d44:	0801c10c 	.word	0x0801c10c

08009d48 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009d5a:	bf00      	nop
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f804 	bl	8009d8a <USBH_HandleSof>
}
 8009d82:	bf00      	nop
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b082      	sub	sp, #8
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b0b      	cmp	r3, #11
 8009d9a:	d10a      	bne.n	8009db2 <USBH_HandleSof+0x28>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d005      	beq.n	8009db2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	4798      	blx	r3
  }
}
 8009db2:	bf00      	nop
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b082      	sub	sp, #8
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009dde:	2200      	movs	r2, #0
 8009de0:	4619      	mov	r1, r3
 8009de2:	f001 f9df 	bl	800b1a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009de6:	bf00      	nop
}
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009dfe:	bf00      	nop
}
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b082      	sub	sp, #8
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e3e:	2200      	movs	r2, #0
 8009e40:	4619      	mov	r1, r3
 8009e42:	f001 f9af 	bl	800b1a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f010 fa2c 	bl	801a2ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	791b      	ldrb	r3, [r3, #4]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fed9 	bl	800ac34 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	795b      	ldrb	r3, [r3, #5]
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fed3 	bl	800ac34 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	f001 f97d 	bl	800b1a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8009ec2:	f107 030c 	add.w	r3, r7, #12
 8009ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f001 f9aa 	bl	800b224 <osMessageGet>
    if (event.status == osEventMessage)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b10      	cmp	r3, #16
 8009ed4:	d1f2      	bne.n	8009ebc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff f95a 	bl	8009190 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009edc:	e7ee      	b.n	8009ebc <USBH_Process_OS+0x8>

08009ede <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009efa:	2200      	movs	r2, #0
 8009efc:	4619      	mov	r1, r3
 8009efe:	f001 f951 	bl	800b1a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af02      	add	r7, sp, #8
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009f1e:	78fb      	ldrb	r3, [r7, #3]
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	4613      	mov	r3, r2
 8009f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f864 	bl	8009ffa <USBH_GetDescriptor>
 8009f32:	4603      	mov	r3, r0
 8009f34:	73fb      	strb	r3, [r7, #15]
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10a      	bne.n	8009f52 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f48:	78fa      	ldrb	r2, [r7, #3]
 8009f4a:	b292      	uxth	r2, r2
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	f000 f918 	bl	800a182 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af02      	add	r7, sp, #8
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	331c      	adds	r3, #28
 8009f6c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009f6e:	887b      	ldrh	r3, [r7, #2]
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f78:	2100      	movs	r1, #0
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f83d 	bl	8009ffa <USBH_GetDescriptor>
 8009f80:	4603      	mov	r3, r0
 8009f82:	72fb      	strb	r3, [r7, #11]
 8009f84:	7afb      	ldrb	r3, [r7, #11]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d107      	bne.n	8009f9a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009f90:	887a      	ldrh	r2, [r7, #2]
 8009f92:	68f9      	ldr	r1, [r7, #12]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 f964 	bl	800a262 <USBH_ParseCfgDesc>
  }

  return status;
 8009f9a:	7afb      	ldrb	r3, [r7, #11]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b088      	sub	sp, #32
 8009fa8:	af02      	add	r7, sp, #8
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	607a      	str	r2, [r7, #4]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	72fb      	strb	r3, [r7, #11]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009fb8:	7afb      	ldrb	r3, [r7, #11]
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009fc0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009fc8:	893b      	ldrh	r3, [r7, #8]
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	2100      	movs	r1, #0
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f000 f812 	bl	8009ffa <USBH_GetDescriptor>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	75fb      	strb	r3, [r7, #23]
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d107      	bne.n	8009ff0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009fe6:	893a      	ldrh	r2, [r7, #8]
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 fa37 	bl	800a45e <USBH_ParseStringDesc>
  }

  return status;
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3718      	adds	r7, #24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b084      	sub	sp, #16
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	60f8      	str	r0, [r7, #12]
 800a002:	607b      	str	r3, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	72fb      	strb	r3, [r7, #11]
 800a008:	4613      	mov	r3, r2
 800a00a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	789b      	ldrb	r3, [r3, #2]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d11c      	bne.n	800a04e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a014:	7afb      	ldrb	r3, [r7, #11]
 800a016:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2206      	movs	r2, #6
 800a024:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	893a      	ldrh	r2, [r7, #8]
 800a02a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a02c:	893b      	ldrh	r3, [r7, #8]
 800a02e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a036:	d104      	bne.n	800a042 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f240 4209 	movw	r2, #1033	; 0x409
 800a03e:	829a      	strh	r2, [r3, #20]
 800a040:	e002      	b.n	800a048 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	8b3a      	ldrh	r2, [r7, #24]
 800a04c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a04e:	8b3b      	ldrh	r3, [r7, #24]
 800a050:	461a      	mov	r2, r3
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f000 fa50 	bl	800a4fa <USBH_CtlReq>
 800a05a:	4603      	mov	r3, r0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	789b      	ldrb	r3, [r3, #2]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d10f      	bne.n	800a098 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2205      	movs	r2, #5
 800a082:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a084:	78fb      	ldrb	r3, [r7, #3]
 800a086:	b29a      	uxth	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a098:	2200      	movs	r2, #0
 800a09a:	2100      	movs	r1, #0
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fa2c 	bl	800a4fa <USBH_CtlReq>
 800a0a2:	4603      	mov	r3, r0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	789b      	ldrb	r3, [r3, #2]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d10e      	bne.n	800a0de <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2209      	movs	r2, #9
 800a0ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	887a      	ldrh	r2, [r7, #2]
 800a0d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a0de:	2200      	movs	r2, #0
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fa09 	bl	800a4fa <USBH_CtlReq>
 800a0e8:	4603      	mov	r3, r0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b082      	sub	sp, #8
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	789b      	ldrb	r3, [r3, #2]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d10f      	bne.n	800a126 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2203      	movs	r2, #3
 800a110:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a112:	78fb      	ldrb	r3, [r7, #3]
 800a114:	b29a      	uxth	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a126:	2200      	movs	r2, #0
 800a128:	2100      	movs	r1, #0
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f9e5 	bl	800a4fa <USBH_CtlReq>
 800a130:	4603      	mov	r3, r0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b082      	sub	sp, #8
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	460b      	mov	r3, r1
 800a144:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	789b      	ldrb	r3, [r3, #2]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d10f      	bne.n	800a16e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2202      	movs	r2, #2
 800a152:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a160:	78fb      	ldrb	r3, [r7, #3]
 800a162:	b29a      	uxth	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a16e:	2200      	movs	r2, #0
 800a170:	2100      	movs	r1, #0
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f9c1 	bl	800a4fa <USBH_CtlReq>
 800a178:	4603      	mov	r3, r0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a182:	b480      	push	{r7}
 800a184:	b085      	sub	sp, #20
 800a186:	af00      	add	r7, sp, #0
 800a188:	60f8      	str	r0, [r7, #12]
 800a18a:	60b9      	str	r1, [r7, #8]
 800a18c:	4613      	mov	r3, r2
 800a18e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	781a      	ldrb	r2, [r3, #0]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	785a      	ldrb	r2, [r3, #1]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	3302      	adds	r3, #2
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	3303      	adds	r3, #3
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	021b      	lsls	r3, r3, #8
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	791a      	ldrb	r2, [r3, #4]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	795a      	ldrb	r2, [r3, #5]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	799a      	ldrb	r2, [r3, #6]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	79da      	ldrb	r2, [r3, #7]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a1dc:	88fb      	ldrh	r3, [r7, #6]
 800a1de:	2b08      	cmp	r3, #8
 800a1e0:	d939      	bls.n	800a256 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	3309      	adds	r3, #9
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	021b      	lsls	r3, r3, #8
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	330a      	adds	r3, #10
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	b29a      	uxth	r2, r3
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	330b      	adds	r3, #11
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	021b      	lsls	r3, r3, #8
 800a210:	b29b      	uxth	r3, r3
 800a212:	4313      	orrs	r3, r2
 800a214:	b29a      	uxth	r2, r3
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	330c      	adds	r3, #12
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	b29a      	uxth	r2, r3
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	330d      	adds	r3, #13
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	b29b      	uxth	r3, r3
 800a22a:	021b      	lsls	r3, r3, #8
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	4313      	orrs	r3, r2
 800a230:	b29a      	uxth	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	7b9a      	ldrb	r2, [r3, #14]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	7bda      	ldrb	r2, [r3, #15]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	7c1a      	ldrb	r2, [r3, #16]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	7c5a      	ldrb	r2, [r3, #17]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	745a      	strb	r2, [r3, #17]
  }
}
 800a256:	bf00      	nop
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b08a      	sub	sp, #40	; 0x28
 800a266:	af00      	add	r7, sp, #0
 800a268:	60f8      	str	r0, [r7, #12]
 800a26a:	60b9      	str	r1, [r7, #8]
 800a26c:	4613      	mov	r3, r2
 800a26e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a274:	2300      	movs	r3, #0
 800a276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a27a:	2300      	movs	r3, #0
 800a27c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	781a      	ldrb	r2, [r3, #0]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	785a      	ldrb	r2, [r3, #1]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	3302      	adds	r3, #2
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	3303      	adds	r3, #3
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	021b      	lsls	r3, r3, #8
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	791a      	ldrb	r2, [r3, #4]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	795a      	ldrb	r2, [r3, #5]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	799a      	ldrb	r2, [r3, #6]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	79da      	ldrb	r2, [r3, #7]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	7a1a      	ldrb	r2, [r3, #8]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a2d8:	88fb      	ldrh	r3, [r7, #6]
 800a2da:	2b09      	cmp	r3, #9
 800a2dc:	d95f      	bls.n	800a39e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a2de:	2309      	movs	r3, #9
 800a2e0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a2e6:	e051      	b.n	800a38c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a2e8:	f107 0316 	add.w	r3, r7, #22
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2f0:	f000 f8e8 	bl	800a4c4 <USBH_GetNextDesc>
 800a2f4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f8:	785b      	ldrb	r3, [r3, #1]
 800a2fa:	2b04      	cmp	r3, #4
 800a2fc:	d146      	bne.n	800a38c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a2fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a302:	221a      	movs	r2, #26
 800a304:	fb02 f303 	mul.w	r3, r2, r3
 800a308:	3308      	adds	r3, #8
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	4413      	add	r3, r2
 800a30e:	3302      	adds	r3, #2
 800a310:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a312:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a314:	69f8      	ldr	r0, [r7, #28]
 800a316:	f000 f846 	bl	800a3a6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a31a:	2300      	movs	r3, #0
 800a31c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a320:	2300      	movs	r3, #0
 800a322:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a324:	e022      	b.n	800a36c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a326:	f107 0316 	add.w	r3, r7, #22
 800a32a:	4619      	mov	r1, r3
 800a32c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a32e:	f000 f8c9 	bl	800a4c4 <USBH_GetNextDesc>
 800a332:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	785b      	ldrb	r3, [r3, #1]
 800a338:	2b05      	cmp	r3, #5
 800a33a:	d117      	bne.n	800a36c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a33c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a340:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a344:	3201      	adds	r2, #1
 800a346:	00d2      	lsls	r2, r2, #3
 800a348:	211a      	movs	r1, #26
 800a34a:	fb01 f303 	mul.w	r3, r1, r3
 800a34e:	4413      	add	r3, r2
 800a350:	3308      	adds	r3, #8
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	4413      	add	r3, r2
 800a356:	3304      	adds	r3, #4
 800a358:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a35a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a35c:	69b8      	ldr	r0, [r7, #24]
 800a35e:	f000 f851 	bl	800a404 <USBH_ParseEPDesc>
            ep_ix++;
 800a362:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a366:	3301      	adds	r3, #1
 800a368:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	791b      	ldrb	r3, [r3, #4]
 800a370:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a374:	429a      	cmp	r2, r3
 800a376:	d204      	bcs.n	800a382 <USBH_ParseCfgDesc+0x120>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	885a      	ldrh	r2, [r3, #2]
 800a37c:	8afb      	ldrh	r3, [r7, #22]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d8d1      	bhi.n	800a326 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a382:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a386:	3301      	adds	r3, #1
 800a388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a38c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a390:	2b01      	cmp	r3, #1
 800a392:	d804      	bhi.n	800a39e <USBH_ParseCfgDesc+0x13c>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	885a      	ldrh	r2, [r3, #2]
 800a398:	8afb      	ldrh	r3, [r7, #22]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d8a4      	bhi.n	800a2e8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a39e:	bf00      	nop
 800a3a0:	3728      	adds	r7, #40	; 0x28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	781a      	ldrb	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	785a      	ldrb	r2, [r3, #1]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	789a      	ldrb	r2, [r3, #2]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	78da      	ldrb	r2, [r3, #3]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	791a      	ldrb	r2, [r3, #4]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	795a      	ldrb	r2, [r3, #5]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	799a      	ldrb	r2, [r3, #6]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	79da      	ldrb	r2, [r3, #7]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	7a1a      	ldrb	r2, [r3, #8]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	721a      	strb	r2, [r3, #8]
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	781a      	ldrb	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	785a      	ldrb	r2, [r3, #1]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	789a      	ldrb	r2, [r3, #2]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	78da      	ldrb	r2, [r3, #3]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	3304      	adds	r3, #4
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	b29a      	uxth	r2, r3
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	3305      	adds	r3, #5
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	021b      	lsls	r3, r3, #8
 800a440:	b29b      	uxth	r3, r3
 800a442:	4313      	orrs	r3, r2
 800a444:	b29a      	uxth	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	799a      	ldrb	r2, [r3, #6]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	719a      	strb	r2, [r3, #6]
}
 800a452:	bf00      	nop
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a45e:	b480      	push	{r7}
 800a460:	b087      	sub	sp, #28
 800a462:	af00      	add	r7, sp, #0
 800a464:	60f8      	str	r0, [r7, #12]
 800a466:	60b9      	str	r1, [r7, #8]
 800a468:	4613      	mov	r3, r2
 800a46a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	3301      	adds	r3, #1
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b03      	cmp	r3, #3
 800a474:	d120      	bne.n	800a4b8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	1e9a      	subs	r2, r3, #2
 800a47c:	88fb      	ldrh	r3, [r7, #6]
 800a47e:	4293      	cmp	r3, r2
 800a480:	bf28      	it	cs
 800a482:	4613      	movcs	r3, r2
 800a484:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	3302      	adds	r3, #2
 800a48a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a48c:	2300      	movs	r3, #0
 800a48e:	82fb      	strh	r3, [r7, #22]
 800a490:	e00b      	b.n	800a4aa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a492:	8afb      	ldrh	r3, [r7, #22]
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	4413      	add	r3, r2
 800a498:	781a      	ldrb	r2, [r3, #0]
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a4a4:	8afb      	ldrh	r3, [r7, #22]
 800a4a6:	3302      	adds	r3, #2
 800a4a8:	82fb      	strh	r3, [r7, #22]
 800a4aa:	8afa      	ldrh	r2, [r7, #22]
 800a4ac:	8abb      	ldrh	r3, [r7, #20]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d3ef      	bcc.n	800a492 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	701a      	strb	r2, [r3, #0]
  }
}
 800a4b8:	bf00      	nop
 800a4ba:	371c      	adds	r7, #28
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	881a      	ldrh	r2, [r3, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	4413      	add	r3, r2
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b086      	sub	sp, #24
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	60f8      	str	r0, [r7, #12]
 800a502:	60b9      	str	r1, [r7, #8]
 800a504:	4613      	mov	r3, r2
 800a506:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a508:	2301      	movs	r3, #1
 800a50a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	789b      	ldrb	r3, [r3, #2]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d002      	beq.n	800a51a <USBH_CtlReq+0x20>
 800a514:	2b02      	cmp	r3, #2
 800a516:	d01d      	beq.n	800a554 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a518:	e043      	b.n	800a5a2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	88fa      	ldrh	r2, [r7, #6]
 800a524:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2201      	movs	r2, #1
 800a52a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2202      	movs	r2, #2
 800a530:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a532:	2301      	movs	r3, #1
 800a534:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2203      	movs	r2, #3
 800a53a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a54a:	2200      	movs	r2, #0
 800a54c:	4619      	mov	r1, r3
 800a54e:	f000 fe29 	bl	800b1a4 <osMessagePut>
      break;
 800a552:	e026      	b.n	800a5a2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 f829 	bl	800a5ac <USBH_HandleControl>
 800a55a:	4603      	mov	r3, r0
 800a55c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a55e:	7dfb      	ldrb	r3, [r7, #23]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d002      	beq.n	800a56a <USBH_CtlReq+0x70>
 800a564:	7dfb      	ldrb	r3, [r7, #23]
 800a566:	2b03      	cmp	r3, #3
 800a568:	d106      	bne.n	800a578 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2201      	movs	r2, #1
 800a56e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	761a      	strb	r2, [r3, #24]
 800a576:	e005      	b.n	800a584 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a578:	7dfb      	ldrb	r3, [r7, #23]
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d102      	bne.n	800a584 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2201      	movs	r2, #1
 800a582:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2203      	movs	r2, #3
 800a588:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a598:	2200      	movs	r2, #0
 800a59a:	4619      	mov	r1, r3
 800a59c:	f000 fe02 	bl	800b1a4 <osMessagePut>
      break;
 800a5a0:	bf00      	nop
  }
  return status;
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af02      	add	r7, sp, #8
 800a5b2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	7e1b      	ldrb	r3, [r3, #24]
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	2b0a      	cmp	r3, #10
 800a5c4:	f200 8232 	bhi.w	800aa2c <USBH_HandleControl+0x480>
 800a5c8:	a201      	add	r2, pc, #4	; (adr r2, 800a5d0 <USBH_HandleControl+0x24>)
 800a5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ce:	bf00      	nop
 800a5d0:	0800a5fd 	.word	0x0800a5fd
 800a5d4:	0800a617 	.word	0x0800a617
 800a5d8:	0800a6b9 	.word	0x0800a6b9
 800a5dc:	0800a6df 	.word	0x0800a6df
 800a5e0:	0800a76b 	.word	0x0800a76b
 800a5e4:	0800a795 	.word	0x0800a795
 800a5e8:	0800a857 	.word	0x0800a857
 800a5ec:	0800a879 	.word	0x0800a879
 800a5f0:	0800a90b 	.word	0x0800a90b
 800a5f4:	0800a931 	.word	0x0800a931
 800a5f8:	0800a9c3 	.word	0x0800a9c3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f103 0110 	add.w	r1, r3, #16
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	795b      	ldrb	r3, [r3, #5]
 800a606:	461a      	mov	r2, r3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 fa23 	bl	800aa54 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2202      	movs	r2, #2
 800a612:	761a      	strb	r2, [r3, #24]
      break;
 800a614:	e215      	b.n	800aa42 <USBH_HandleControl+0x496>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	795b      	ldrb	r3, [r3, #5]
 800a61a:	4619      	mov	r1, r3
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f00f ff45 	bl	801a4ac <USBH_LL_GetURBState>
 800a622:	4603      	mov	r3, r0
 800a624:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a626:	7bbb      	ldrb	r3, [r7, #14]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d12c      	bne.n	800a686 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	7c1b      	ldrb	r3, [r3, #16]
 800a630:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a634:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	8adb      	ldrh	r3, [r3, #22]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00a      	beq.n	800a654 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a63e:	7b7b      	ldrb	r3, [r7, #13]
 800a640:	2b80      	cmp	r3, #128	; 0x80
 800a642:	d103      	bne.n	800a64c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2203      	movs	r2, #3
 800a648:	761a      	strb	r2, [r3, #24]
 800a64a:	e00d      	b.n	800a668 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2205      	movs	r2, #5
 800a650:	761a      	strb	r2, [r3, #24]
 800a652:	e009      	b.n	800a668 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a654:	7b7b      	ldrb	r3, [r7, #13]
 800a656:	2b80      	cmp	r3, #128	; 0x80
 800a658:	d103      	bne.n	800a662 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2209      	movs	r2, #9
 800a65e:	761a      	strb	r2, [r3, #24]
 800a660:	e002      	b.n	800a668 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2207      	movs	r2, #7
 800a666:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2203      	movs	r2, #3
 800a66c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a67c:	2200      	movs	r2, #0
 800a67e:	4619      	mov	r1, r3
 800a680:	f000 fd90 	bl	800b1a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a684:	e1d4      	b.n	800aa30 <USBH_HandleControl+0x484>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a686:	7bbb      	ldrb	r3, [r7, #14]
 800a688:	2b04      	cmp	r3, #4
 800a68a:	d003      	beq.n	800a694 <USBH_HandleControl+0xe8>
 800a68c:	7bbb      	ldrb	r3, [r7, #14]
 800a68e:	2b02      	cmp	r3, #2
 800a690:	f040 81ce 	bne.w	800aa30 <USBH_HandleControl+0x484>
          phost->Control.state = CTRL_ERROR;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	220b      	movs	r2, #11
 800a698:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2203      	movs	r2, #3
 800a69e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	f000 fd77 	bl	800b1a4 <osMessagePut>
      break;
 800a6b6:	e1bb      	b.n	800aa30 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6899      	ldr	r1, [r3, #8]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	899a      	ldrh	r2, [r3, #12]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	791b      	ldrb	r3, [r3, #4]
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 f9fe 	bl	800aad2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2204      	movs	r2, #4
 800a6da:	761a      	strb	r2, [r3, #24]
      break;
 800a6dc:	e1b1      	b.n	800aa42 <USBH_HandleControl+0x496>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	791b      	ldrb	r3, [r3, #4]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f00f fee1 	bl	801a4ac <USBH_LL_GetURBState>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d110      	bne.n	800a716 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2209      	movs	r2, #9
 800a6f8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2203      	movs	r2, #3
 800a6fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a70e:	2200      	movs	r2, #0
 800a710:	4619      	mov	r1, r3
 800a712:	f000 fd47 	bl	800b1a4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a716:	7bbb      	ldrb	r3, [r7, #14]
 800a718:	2b05      	cmp	r3, #5
 800a71a:	d110      	bne.n	800a73e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a71c:	2303      	movs	r3, #3
 800a71e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2203      	movs	r2, #3
 800a724:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a734:	2200      	movs	r2, #0
 800a736:	4619      	mov	r1, r3
 800a738:	f000 fd34 	bl	800b1a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a73c:	e17a      	b.n	800aa34 <USBH_HandleControl+0x488>
        if (URB_Status == USBH_URB_ERROR)
 800a73e:	7bbb      	ldrb	r3, [r7, #14]
 800a740:	2b04      	cmp	r3, #4
 800a742:	f040 8177 	bne.w	800aa34 <USBH_HandleControl+0x488>
          phost->Control.state = CTRL_ERROR;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	220b      	movs	r2, #11
 800a74a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2203      	movs	r2, #3
 800a750:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a760:	2200      	movs	r2, #0
 800a762:	4619      	mov	r1, r3
 800a764:	f000 fd1e 	bl	800b1a4 <osMessagePut>
      break;
 800a768:	e164      	b.n	800aa34 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6899      	ldr	r1, [r3, #8]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	899a      	ldrh	r2, [r3, #12]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	795b      	ldrb	r3, [r3, #5]
 800a776:	2001      	movs	r0, #1
 800a778:	9000      	str	r0, [sp, #0]
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f984 	bl	800aa88 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a786:	b29a      	uxth	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2206      	movs	r2, #6
 800a790:	761a      	strb	r2, [r3, #24]
      break;
 800a792:	e156      	b.n	800aa42 <USBH_HandleControl+0x496>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	795b      	ldrb	r3, [r3, #5]
 800a798:	4619      	mov	r1, r3
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f00f fe86 	bl	801a4ac <USBH_LL_GetURBState>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d111      	bne.n	800a7ce <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2207      	movs	r2, #7
 800a7ae:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2203      	movs	r2, #3
 800a7b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	f000 fcec 	bl	800b1a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a7cc:	e134      	b.n	800aa38 <USBH_HandleControl+0x48c>
      else if (URB_Status == USBH_URB_STALL)
 800a7ce:	7bbb      	ldrb	r3, [r7, #14]
 800a7d0:	2b05      	cmp	r3, #5
 800a7d2:	d113      	bne.n	800a7fc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	220c      	movs	r2, #12
 800a7d8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2203      	movs	r2, #3
 800a7e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	f000 fcd5 	bl	800b1a4 <osMessagePut>
      break;
 800a7fa:	e11d      	b.n	800aa38 <USBH_HandleControl+0x48c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d111      	bne.n	800a826 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2205      	movs	r2, #5
 800a806:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2203      	movs	r2, #3
 800a80c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a81c:	2200      	movs	r2, #0
 800a81e:	4619      	mov	r1, r3
 800a820:	f000 fcc0 	bl	800b1a4 <osMessagePut>
      break;
 800a824:	e108      	b.n	800aa38 <USBH_HandleControl+0x48c>
        if (URB_Status == USBH_URB_ERROR)
 800a826:	7bbb      	ldrb	r3, [r7, #14]
 800a828:	2b04      	cmp	r3, #4
 800a82a:	f040 8105 	bne.w	800aa38 <USBH_HandleControl+0x48c>
          phost->Control.state = CTRL_ERROR;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	220b      	movs	r2, #11
 800a832:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a834:	2302      	movs	r3, #2
 800a836:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2203      	movs	r2, #3
 800a83c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a84c:	2200      	movs	r2, #0
 800a84e:	4619      	mov	r1, r3
 800a850:	f000 fca8 	bl	800b1a4 <osMessagePut>
      break;
 800a854:	e0f0      	b.n	800aa38 <USBH_HandleControl+0x48c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	791b      	ldrb	r3, [r3, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	2100      	movs	r1, #0
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f937 	bl	800aad2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2208      	movs	r2, #8
 800a874:	761a      	strb	r2, [r3, #24]

      break;
 800a876:	e0e4      	b.n	800aa42 <USBH_HandleControl+0x496>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	791b      	ldrb	r3, [r3, #4]
 800a87c:	4619      	mov	r1, r3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f00f fe14 	bl	801a4ac <USBH_LL_GetURBState>
 800a884:	4603      	mov	r3, r0
 800a886:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a888:	7bbb      	ldrb	r3, [r7, #14]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d113      	bne.n	800a8b6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	220d      	movs	r2, #13
 800a892:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2203      	movs	r2, #3
 800a89c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	f000 fc78 	bl	800b1a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a8b4:	e0c2      	b.n	800aa3c <USBH_HandleControl+0x490>
      else if (URB_Status == USBH_URB_ERROR)
 800a8b6:	7bbb      	ldrb	r3, [r7, #14]
 800a8b8:	2b04      	cmp	r3, #4
 800a8ba:	d111      	bne.n	800a8e0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	220b      	movs	r2, #11
 800a8c0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2203      	movs	r2, #3
 800a8c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	4619      	mov	r1, r3
 800a8da:	f000 fc63 	bl	800b1a4 <osMessagePut>
      break;
 800a8de:	e0ad      	b.n	800aa3c <USBH_HandleControl+0x490>
        if (URB_Status == USBH_URB_STALL)
 800a8e0:	7bbb      	ldrb	r3, [r7, #14]
 800a8e2:	2b05      	cmp	r3, #5
 800a8e4:	f040 80aa 	bne.w	800aa3c <USBH_HandleControl+0x490>
          status = USBH_NOT_SUPPORTED;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2203      	movs	r2, #3
 800a8f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a900:	2200      	movs	r2, #0
 800a902:	4619      	mov	r1, r3
 800a904:	f000 fc4e 	bl	800b1a4 <osMessagePut>
      break;
 800a908:	e098      	b.n	800aa3c <USBH_HandleControl+0x490>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	795b      	ldrb	r3, [r3, #5]
 800a90e:	2201      	movs	r2, #1
 800a910:	9200      	str	r2, [sp, #0]
 800a912:	2200      	movs	r2, #0
 800a914:	2100      	movs	r1, #0
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f8b6 	bl	800aa88 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a922:	b29a      	uxth	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	220a      	movs	r2, #10
 800a92c:	761a      	strb	r2, [r3, #24]
      break;
 800a92e:	e088      	b.n	800aa42 <USBH_HandleControl+0x496>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	795b      	ldrb	r3, [r3, #5]
 800a934:	4619      	mov	r1, r3
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f00f fdb8 	bl	801a4ac <USBH_LL_GetURBState>
 800a93c:	4603      	mov	r3, r0
 800a93e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a940:	7bbb      	ldrb	r3, [r7, #14]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d113      	bne.n	800a96e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a946:	2300      	movs	r3, #0
 800a948:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	220d      	movs	r2, #13
 800a94e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2203      	movs	r2, #3
 800a954:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a964:	2200      	movs	r2, #0
 800a966:	4619      	mov	r1, r3
 800a968:	f000 fc1c 	bl	800b1a4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a96c:	e068      	b.n	800aa40 <USBH_HandleControl+0x494>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d111      	bne.n	800a998 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2209      	movs	r2, #9
 800a978:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2203      	movs	r2, #3
 800a97e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a98e:	2200      	movs	r2, #0
 800a990:	4619      	mov	r1, r3
 800a992:	f000 fc07 	bl	800b1a4 <osMessagePut>
      break;
 800a996:	e053      	b.n	800aa40 <USBH_HandleControl+0x494>
        if (URB_Status == USBH_URB_ERROR)
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	2b04      	cmp	r3, #4
 800a99c:	d150      	bne.n	800aa40 <USBH_HandleControl+0x494>
          phost->Control.state = CTRL_ERROR;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	220b      	movs	r2, #11
 800a9a2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2203      	movs	r2, #3
 800a9a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	f000 fbf2 	bl	800b1a4 <osMessagePut>
      break;
 800a9c0:	e03e      	b.n	800aa40 <USBH_HandleControl+0x494>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	7e5b      	ldrb	r3, [r3, #25]
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	765a      	strb	r2, [r3, #25]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	7e5b      	ldrb	r3, [r3, #25]
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d806      	bhi.n	800a9e4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a9e2:	e02e      	b.n	800aa42 <USBH_HandleControl+0x496>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a9ea:	2106      	movs	r1, #6
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800a9f6:	4815      	ldr	r0, [pc, #84]	; (800aa4c <USBH_HandleControl+0x4a0>)
 800a9f8:	f010 f836 	bl	801aa68 <iprintf>
 800a9fc:	4814      	ldr	r0, [pc, #80]	; (800aa50 <USBH_HandleControl+0x4a4>)
 800a9fe:	f010 f833 	bl	801aa68 <iprintf>
 800aa02:	200a      	movs	r0, #10
 800aa04:	f010 f848 	bl	801aa98 <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	795b      	ldrb	r3, [r3, #5]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f910 	bl	800ac34 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	791b      	ldrb	r3, [r3, #4]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f90a 	bl	800ac34 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800aa26:	2302      	movs	r3, #2
 800aa28:	73fb      	strb	r3, [r7, #15]
      break;
 800aa2a:	e00a      	b.n	800aa42 <USBH_HandleControl+0x496>

    default:
      break;
 800aa2c:	bf00      	nop
 800aa2e:	e008      	b.n	800aa42 <USBH_HandleControl+0x496>
      break;
 800aa30:	bf00      	nop
 800aa32:	e006      	b.n	800aa42 <USBH_HandleControl+0x496>
      break;
 800aa34:	bf00      	nop
 800aa36:	e004      	b.n	800aa42 <USBH_HandleControl+0x496>
      break;
 800aa38:	bf00      	nop
 800aa3a:	e002      	b.n	800aa42 <USBH_HandleControl+0x496>
      break;
 800aa3c:	bf00      	nop
 800aa3e:	e000      	b.n	800aa42 <USBH_HandleControl+0x496>
      break;
 800aa40:	bf00      	nop
  }

  return status;
 800aa42:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	0801c120 	.word	0x0801c120
 800aa50:	0801c128 	.word	0x0801c128

0800aa54 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b088      	sub	sp, #32
 800aa58:	af04      	add	r7, sp, #16
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	4613      	mov	r3, r2
 800aa60:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aa62:	79f9      	ldrb	r1, [r7, #7]
 800aa64:	2300      	movs	r3, #0
 800aa66:	9303      	str	r3, [sp, #12]
 800aa68:	2308      	movs	r3, #8
 800aa6a:	9302      	str	r3, [sp, #8]
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	9301      	str	r3, [sp, #4]
 800aa70:	2300      	movs	r3, #0
 800aa72:	9300      	str	r3, [sp, #0]
 800aa74:	2300      	movs	r3, #0
 800aa76:	2200      	movs	r2, #0
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f00f fce6 	bl	801a44a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b088      	sub	sp, #32
 800aa8c:	af04      	add	r7, sp, #16
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	4611      	mov	r1, r2
 800aa94:	461a      	mov	r2, r3
 800aa96:	460b      	mov	r3, r1
 800aa98:	80fb      	strh	r3, [r7, #6]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aaac:	7979      	ldrb	r1, [r7, #5]
 800aaae:	7e3b      	ldrb	r3, [r7, #24]
 800aab0:	9303      	str	r3, [sp, #12]
 800aab2:	88fb      	ldrh	r3, [r7, #6]
 800aab4:	9302      	str	r3, [sp, #8]
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	9301      	str	r3, [sp, #4]
 800aaba:	2301      	movs	r3, #1
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	2300      	movs	r3, #0
 800aac0:	2200      	movs	r2, #0
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	f00f fcc1 	bl	801a44a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b088      	sub	sp, #32
 800aad6:	af04      	add	r7, sp, #16
 800aad8:	60f8      	str	r0, [r7, #12]
 800aada:	60b9      	str	r1, [r7, #8]
 800aadc:	4611      	mov	r1, r2
 800aade:	461a      	mov	r2, r3
 800aae0:	460b      	mov	r3, r1
 800aae2:	80fb      	strh	r3, [r7, #6]
 800aae4:	4613      	mov	r3, r2
 800aae6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aae8:	7979      	ldrb	r1, [r7, #5]
 800aaea:	2300      	movs	r3, #0
 800aaec:	9303      	str	r3, [sp, #12]
 800aaee:	88fb      	ldrh	r3, [r7, #6]
 800aaf0:	9302      	str	r3, [sp, #8]
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	9301      	str	r3, [sp, #4]
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	2300      	movs	r3, #0
 800aafc:	2201      	movs	r2, #1
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f00f fca3 	bl	801a44a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ab04:	2300      	movs	r3, #0

}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b088      	sub	sp, #32
 800ab12:	af04      	add	r7, sp, #16
 800ab14:	60f8      	str	r0, [r7, #12]
 800ab16:	60b9      	str	r1, [r7, #8]
 800ab18:	4611      	mov	r1, r2
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	80fb      	strh	r3, [r7, #6]
 800ab20:	4613      	mov	r3, r2
 800ab22:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d001      	beq.n	800ab32 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ab32:	7979      	ldrb	r1, [r7, #5]
 800ab34:	7e3b      	ldrb	r3, [r7, #24]
 800ab36:	9303      	str	r3, [sp, #12]
 800ab38:	88fb      	ldrh	r3, [r7, #6]
 800ab3a:	9302      	str	r3, [sp, #8]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	9301      	str	r3, [sp, #4]
 800ab40:	2301      	movs	r3, #1
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	2302      	movs	r3, #2
 800ab46:	2200      	movs	r2, #0
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f00f fc7e 	bl	801a44a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b088      	sub	sp, #32
 800ab5c:	af04      	add	r7, sp, #16
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	4611      	mov	r1, r2
 800ab64:	461a      	mov	r2, r3
 800ab66:	460b      	mov	r3, r1
 800ab68:	80fb      	strh	r3, [r7, #6]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ab6e:	7979      	ldrb	r1, [r7, #5]
 800ab70:	2300      	movs	r3, #0
 800ab72:	9303      	str	r3, [sp, #12]
 800ab74:	88fb      	ldrh	r3, [r7, #6]
 800ab76:	9302      	str	r3, [sp, #8]
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	2302      	movs	r3, #2
 800ab82:	2201      	movs	r2, #1
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f00f fc60 	bl	801a44a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af04      	add	r7, sp, #16
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	4608      	mov	r0, r1
 800ab9e:	4611      	mov	r1, r2
 800aba0:	461a      	mov	r2, r3
 800aba2:	4603      	mov	r3, r0
 800aba4:	70fb      	strb	r3, [r7, #3]
 800aba6:	460b      	mov	r3, r1
 800aba8:	70bb      	strb	r3, [r7, #2]
 800abaa:	4613      	mov	r3, r2
 800abac:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800abae:	7878      	ldrb	r0, [r7, #1]
 800abb0:	78ba      	ldrb	r2, [r7, #2]
 800abb2:	78f9      	ldrb	r1, [r7, #3]
 800abb4:	8b3b      	ldrh	r3, [r7, #24]
 800abb6:	9302      	str	r3, [sp, #8]
 800abb8:	7d3b      	ldrb	r3, [r7, #20]
 800abba:	9301      	str	r3, [sp, #4]
 800abbc:	7c3b      	ldrb	r3, [r7, #16]
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	4603      	mov	r3, r0
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f00f fbf3 	bl	801a3ae <USBH_LL_OpenPipe>

  return USBH_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b082      	sub	sp, #8
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	460b      	mov	r3, r1
 800abdc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800abde:	78fb      	ldrb	r3, [r7, #3]
 800abe0:	4619      	mov	r1, r3
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f00f fc12 	bl	801a40c <USBH_LL_ClosePipe>

  return USBH_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b084      	sub	sp, #16
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	460b      	mov	r3, r1
 800abfc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f836 	bl	800ac70 <USBH_GetFreePipe>
 800ac04:	4603      	mov	r3, r0
 800ac06:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ac08:	89fb      	ldrh	r3, [r7, #14]
 800ac0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d00a      	beq.n	800ac28 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ac12:	78fa      	ldrb	r2, [r7, #3]
 800ac14:	89fb      	ldrh	r3, [r7, #14]
 800ac16:	f003 030f 	and.w	r3, r3, #15
 800ac1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	33e0      	adds	r3, #224	; 0xe0
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	440b      	add	r3, r1
 800ac26:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ac28:	89fb      	ldrh	r3, [r7, #14]
 800ac2a:	b2db      	uxtb	r3, r3
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ac40:	78fb      	ldrb	r3, [r7, #3]
 800ac42:	2b0a      	cmp	r3, #10
 800ac44:	d80d      	bhi.n	800ac62 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ac46:	78fb      	ldrb	r3, [r7, #3]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	33e0      	adds	r3, #224	; 0xe0
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4413      	add	r3, r2
 800ac50:	685a      	ldr	r2, [r3, #4]
 800ac52:	78fb      	ldrb	r3, [r7, #3]
 800ac54:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ac58:	6879      	ldr	r1, [r7, #4]
 800ac5a:	33e0      	adds	r3, #224	; 0xe0
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	440b      	add	r3, r1
 800ac60:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	73fb      	strb	r3, [r7, #15]
 800ac80:	e00f      	b.n	800aca2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	33e0      	adds	r3, #224	; 0xe0
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d102      	bne.n	800ac9c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	e007      	b.n	800acac <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	73fb      	strb	r3, [r7, #15]
 800aca2:	7bfb      	ldrb	r3, [r7, #15]
 800aca4:	2b0a      	cmp	r3, #10
 800aca6:	d9ec      	bls.n	800ac82 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800aca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800acac:	4618      	mov	r0, r3
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800acb8:	b480      	push	{r7}
 800acba:	b087      	sub	sp, #28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	4613      	mov	r3, r2
 800acc4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800acc6:	2301      	movs	r3, #1
 800acc8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800acca:	2300      	movs	r3, #0
 800accc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800acce:	4b1f      	ldr	r3, [pc, #124]	; (800ad4c <FATFS_LinkDriverEx+0x94>)
 800acd0:	7a5b      	ldrb	r3, [r3, #9]
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d131      	bne.n	800ad3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800acd8:	4b1c      	ldr	r3, [pc, #112]	; (800ad4c <FATFS_LinkDriverEx+0x94>)
 800acda:	7a5b      	ldrb	r3, [r3, #9]
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	461a      	mov	r2, r3
 800ace0:	4b1a      	ldr	r3, [pc, #104]	; (800ad4c <FATFS_LinkDriverEx+0x94>)
 800ace2:	2100      	movs	r1, #0
 800ace4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ace6:	4b19      	ldr	r3, [pc, #100]	; (800ad4c <FATFS_LinkDriverEx+0x94>)
 800ace8:	7a5b      	ldrb	r3, [r3, #9]
 800acea:	b2db      	uxtb	r3, r3
 800acec:	4a17      	ldr	r2, [pc, #92]	; (800ad4c <FATFS_LinkDriverEx+0x94>)
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	4413      	add	r3, r2
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800acf6:	4b15      	ldr	r3, [pc, #84]	; (800ad4c <FATFS_LinkDriverEx+0x94>)
 800acf8:	7a5b      	ldrb	r3, [r3, #9]
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	461a      	mov	r2, r3
 800acfe:	4b13      	ldr	r3, [pc, #76]	; (800ad4c <FATFS_LinkDriverEx+0x94>)
 800ad00:	4413      	add	r3, r2
 800ad02:	79fa      	ldrb	r2, [r7, #7]
 800ad04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ad06:	4b11      	ldr	r3, [pc, #68]	; (800ad4c <FATFS_LinkDriverEx+0x94>)
 800ad08:	7a5b      	ldrb	r3, [r3, #9]
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	1c5a      	adds	r2, r3, #1
 800ad0e:	b2d1      	uxtb	r1, r2
 800ad10:	4a0e      	ldr	r2, [pc, #56]	; (800ad4c <FATFS_LinkDriverEx+0x94>)
 800ad12:	7251      	strb	r1, [r2, #9]
 800ad14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ad16:	7dbb      	ldrb	r3, [r7, #22]
 800ad18:	3330      	adds	r3, #48	; 0x30
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	3301      	adds	r3, #1
 800ad24:	223a      	movs	r2, #58	; 0x3a
 800ad26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	3302      	adds	r3, #2
 800ad2c:	222f      	movs	r2, #47	; 0x2f
 800ad2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	3303      	adds	r3, #3
 800ad34:	2200      	movs	r2, #0
 800ad36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ad3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	371c      	adds	r7, #28
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	20000384 	.word	0x20000384

0800ad50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7ff ffaa 	bl	800acb8 <FATFS_LinkDriverEx>
 800ad64:	4603      	mov	r3, r0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b085      	sub	sp, #20
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	4603      	mov	r3, r0
 800ad76:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ad7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad80:	2b84      	cmp	r3, #132	; 0x84
 800ad82:	d005      	beq.n	800ad90 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ad84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	3303      	adds	r3, #3
 800ad8e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ad90:	68fb      	ldr	r3, [r7, #12]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3714      	adds	r7, #20
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b083      	sub	sp, #12
 800ada2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ada4:	f3ef 8305 	mrs	r3, IPSR
 800ada8:	607b      	str	r3, [r7, #4]
  return(result);
 800adaa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800adac:	2b00      	cmp	r3, #0
 800adae:	bf14      	ite	ne
 800adb0:	2301      	movne	r3, #1
 800adb2:	2300      	moveq	r3, #0
 800adb4:	b2db      	uxtb	r3, r3
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800adc6:	f001 fc73 	bl	800c6b0 <vTaskStartScheduler>
  
  return osOK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	bd80      	pop	{r7, pc}

0800add0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800add4:	f7ff ffe3 	bl	800ad9e <inHandlerMode>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d003      	beq.n	800ade6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800adde:	f001 fd8b 	bl	800c8f8 <xTaskGetTickCountFromISR>
 800ade2:	4603      	mov	r3, r0
 800ade4:	e002      	b.n	800adec <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ade6:	f001 fd77 	bl	800c8d8 <xTaskGetTickCount>
 800adea:	4603      	mov	r3, r0
  }
}
 800adec:	4618      	mov	r0, r3
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800adf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adf2:	b089      	sub	sp, #36	; 0x24
 800adf4:	af04      	add	r7, sp, #16
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d020      	beq.n	800ae44 <osThreadCreate+0x54>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d01c      	beq.n	800ae44 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685c      	ldr	r4, [r3, #4]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681d      	ldr	r5, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	691e      	ldr	r6, [r3, #16]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7ff ffa6 	bl	800ad6e <makeFreeRtosPriority>
 800ae22:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	695b      	ldr	r3, [r3, #20]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae2c:	9202      	str	r2, [sp, #8]
 800ae2e:	9301      	str	r3, [sp, #4]
 800ae30:	9100      	str	r1, [sp, #0]
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	4632      	mov	r2, r6
 800ae36:	4629      	mov	r1, r5
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f001 fa5b 	bl	800c2f4 <xTaskCreateStatic>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	60fb      	str	r3, [r7, #12]
 800ae42:	e01c      	b.n	800ae7e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685c      	ldr	r4, [r3, #4]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae50:	b29e      	uxth	r6, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7ff ff88 	bl	800ad6e <makeFreeRtosPriority>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	f107 030c 	add.w	r3, r7, #12
 800ae64:	9301      	str	r3, [sp, #4]
 800ae66:	9200      	str	r2, [sp, #0]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	4632      	mov	r2, r6
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f001 fa9d 	bl	800c3ae <xTaskCreate>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d001      	beq.n	800ae7e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	e000      	b.n	800ae80 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae88 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <osDelay+0x16>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	e000      	b.n	800aea0 <osDelay+0x18>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	4618      	mov	r0, r3
 800aea2:	f001 fbd1 	bl	800c648 <vTaskDelay>
  
  return osOK;
 800aea6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d007      	beq.n	800aed0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	4619      	mov	r1, r3
 800aec6:	2001      	movs	r0, #1
 800aec8:	f000 fc3f 	bl	800b74a <xQueueCreateMutexStatic>
 800aecc:	4603      	mov	r3, r0
 800aece:	e003      	b.n	800aed8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800aed0:	2001      	movs	r0, #1
 800aed2:	f000 fc22 	bl	800b71a <xQueueCreateMutex>
 800aed6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800aeea:	2300      	movs	r3, #0
 800aeec:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d101      	bne.n	800aef8 <osMutexWait+0x18>
    return osErrorParameter;
 800aef4:	2380      	movs	r3, #128	; 0x80
 800aef6:	e03a      	b.n	800af6e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800aef8:	2300      	movs	r3, #0
 800aefa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af02:	d103      	bne.n	800af0c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800af04:	f04f 33ff 	mov.w	r3, #4294967295
 800af08:	60fb      	str	r3, [r7, #12]
 800af0a:	e009      	b.n	800af20 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d006      	beq.n	800af20 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d101      	bne.n	800af20 <osMutexWait+0x40>
      ticks = 1;
 800af1c:	2301      	movs	r3, #1
 800af1e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800af20:	f7ff ff3d 	bl	800ad9e <inHandlerMode>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d017      	beq.n	800af5a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800af2a:	f107 0308 	add.w	r3, r7, #8
 800af2e:	461a      	mov	r2, r3
 800af30:	2100      	movs	r1, #0
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f001 f836 	bl	800bfa4 <xQueueReceiveFromISR>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d001      	beq.n	800af42 <osMutexWait+0x62>
      return osErrorOS;
 800af3e:	23ff      	movs	r3, #255	; 0xff
 800af40:	e015      	b.n	800af6e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d011      	beq.n	800af6c <osMutexWait+0x8c>
 800af48:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <osMutexWait+0x98>)
 800af4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af4e:	601a      	str	r2, [r3, #0]
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	e008      	b.n	800af6c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800af5a:	68f9      	ldr	r1, [r7, #12]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 ff15 	bl	800bd8c <xQueueSemaphoreTake>
 800af62:	4603      	mov	r3, r0
 800af64:	2b01      	cmp	r3, #1
 800af66:	d001      	beq.n	800af6c <osMutexWait+0x8c>
    return osErrorOS;
 800af68:	23ff      	movs	r3, #255	; 0xff
 800af6a:	e000      	b.n	800af6e <osMutexWait+0x8e>
  }
  
  return osOK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	e000ed04 	.word	0xe000ed04

0800af7c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800af84:	2300      	movs	r3, #0
 800af86:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800af88:	2300      	movs	r3, #0
 800af8a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800af8c:	f7ff ff07 	bl	800ad9e <inHandlerMode>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d016      	beq.n	800afc4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800af96:	f107 0308 	add.w	r3, r7, #8
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fd88 	bl	800bab2 <xQueueGiveFromISR>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d001      	beq.n	800afac <osMutexRelease+0x30>
      return osErrorOS;
 800afa8:	23ff      	movs	r3, #255	; 0xff
 800afaa:	e017      	b.n	800afdc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d013      	beq.n	800afda <osMutexRelease+0x5e>
 800afb2:	4b0c      	ldr	r3, [pc, #48]	; (800afe4 <osMutexRelease+0x68>)
 800afb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb8:	601a      	str	r2, [r3, #0]
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	e00a      	b.n	800afda <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800afc4:	2300      	movs	r3, #0
 800afc6:	2200      	movs	r2, #0
 800afc8:	2100      	movs	r1, #0
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fbd8 	bl	800b780 <xQueueGenericSend>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d001      	beq.n	800afda <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800afd6:	23ff      	movs	r3, #255	; 0xff
 800afd8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800afda:	68fb      	ldr	r3, [r7, #12]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	e000ed04 	.word	0xe000ed04

0800afe8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af02      	add	r7, sp, #8
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00f      	beq.n	800b01a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d10a      	bne.n	800b016 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	2203      	movs	r2, #3
 800b006:	9200      	str	r2, [sp, #0]
 800b008:	2200      	movs	r2, #0
 800b00a:	2100      	movs	r1, #0
 800b00c:	2001      	movs	r0, #1
 800b00e:	f000 fa99 	bl	800b544 <xQueueGenericCreateStatic>
 800b012:	4603      	mov	r3, r0
 800b014:	e016      	b.n	800b044 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b016:	2300      	movs	r3, #0
 800b018:	e014      	b.n	800b044 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d110      	bne.n	800b042 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b020:	2203      	movs	r2, #3
 800b022:	2100      	movs	r1, #0
 800b024:	2001      	movs	r0, #1
 800b026:	f000 fb05 	bl	800b634 <xQueueGenericCreate>
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d005      	beq.n	800b03e <osSemaphoreCreate+0x56>
 800b032:	2300      	movs	r3, #0
 800b034:	2200      	movs	r2, #0
 800b036:	2100      	movs	r1, #0
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 fba1 	bl	800b780 <xQueueGenericSend>
      return sema;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	e000      	b.n	800b044 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b042:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b056:	2300      	movs	r3, #0
 800b058:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b060:	2380      	movs	r3, #128	; 0x80
 800b062:	e03a      	b.n	800b0da <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b064:	2300      	movs	r3, #0
 800b066:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b06e:	d103      	bne.n	800b078 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b070:	f04f 33ff 	mov.w	r3, #4294967295
 800b074:	60fb      	str	r3, [r7, #12]
 800b076:	e009      	b.n	800b08c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d006      	beq.n	800b08c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d101      	bne.n	800b08c <osSemaphoreWait+0x40>
      ticks = 1;
 800b088:	2301      	movs	r3, #1
 800b08a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b08c:	f7ff fe87 	bl	800ad9e <inHandlerMode>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d017      	beq.n	800b0c6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b096:	f107 0308 	add.w	r3, r7, #8
 800b09a:	461a      	mov	r2, r3
 800b09c:	2100      	movs	r1, #0
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 ff80 	bl	800bfa4 <xQueueReceiveFromISR>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d001      	beq.n	800b0ae <osSemaphoreWait+0x62>
      return osErrorOS;
 800b0aa:	23ff      	movs	r3, #255	; 0xff
 800b0ac:	e015      	b.n	800b0da <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d011      	beq.n	800b0d8 <osSemaphoreWait+0x8c>
 800b0b4:	4b0b      	ldr	r3, [pc, #44]	; (800b0e4 <osSemaphoreWait+0x98>)
 800b0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ba:	601a      	str	r2, [r3, #0]
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	e008      	b.n	800b0d8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b0c6:	68f9      	ldr	r1, [r7, #12]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 fe5f 	bl	800bd8c <xQueueSemaphoreTake>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d001      	beq.n	800b0d8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b0d4:	23ff      	movs	r3, #255	; 0xff
 800b0d6:	e000      	b.n	800b0da <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	e000ed04 	.word	0xe000ed04

0800b0e8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b0f8:	f7ff fe51 	bl	800ad9e <inHandlerMode>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d016      	beq.n	800b130 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b102:	f107 0308 	add.w	r3, r7, #8
 800b106:	4619      	mov	r1, r3
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 fcd2 	bl	800bab2 <xQueueGiveFromISR>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b01      	cmp	r3, #1
 800b112:	d001      	beq.n	800b118 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b114:	23ff      	movs	r3, #255	; 0xff
 800b116:	e017      	b.n	800b148 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d013      	beq.n	800b146 <osSemaphoreRelease+0x5e>
 800b11e:	4b0c      	ldr	r3, [pc, #48]	; (800b150 <osSemaphoreRelease+0x68>)
 800b120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	e00a      	b.n	800b146 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b130:	2300      	movs	r3, #0
 800b132:	2200      	movs	r2, #0
 800b134:	2100      	movs	r1, #0
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fb22 	bl	800b780 <xQueueGenericSend>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d001      	beq.n	800b146 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b142:	23ff      	movs	r3, #255	; 0xff
 800b144:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b146:	68fb      	ldr	r3, [r7, #12]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	e000ed04 	.word	0xe000ed04

0800b154 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b154:	b590      	push	{r4, r7, lr}
 800b156:	b085      	sub	sp, #20
 800b158:	af02      	add	r7, sp, #8
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d011      	beq.n	800b18a <osMessageCreate+0x36>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00d      	beq.n	800b18a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6818      	ldr	r0, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6859      	ldr	r1, [r3, #4]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	689a      	ldr	r2, [r3, #8]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	2400      	movs	r4, #0
 800b180:	9400      	str	r4, [sp, #0]
 800b182:	f000 f9df 	bl	800b544 <xQueueGenericCreateStatic>
 800b186:	4603      	mov	r3, r0
 800b188:	e008      	b.n	800b19c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	4619      	mov	r1, r3
 800b196:	f000 fa4d 	bl	800b634 <xQueueGenericCreate>
 800b19a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd90      	pop	{r4, r7, pc}

0800b1a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d101      	bne.n	800b1c2 <osMessagePut+0x1e>
    ticks = 1;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b1c2:	f7ff fdec 	bl	800ad9e <inHandlerMode>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d018      	beq.n	800b1fe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b1cc:	f107 0210 	add.w	r2, r7, #16
 800b1d0:	f107 0108 	add.w	r1, r7, #8
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f000 fbd0 	bl	800b97c <xQueueGenericSendFromISR>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d001      	beq.n	800b1e6 <osMessagePut+0x42>
      return osErrorOS;
 800b1e2:	23ff      	movs	r3, #255	; 0xff
 800b1e4:	e018      	b.n	800b218 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d014      	beq.n	800b216 <osMessagePut+0x72>
 800b1ec:	4b0c      	ldr	r3, [pc, #48]	; (800b220 <osMessagePut+0x7c>)
 800b1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1f2:	601a      	str	r2, [r3, #0]
 800b1f4:	f3bf 8f4f 	dsb	sy
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	e00b      	b.n	800b216 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b1fe:	f107 0108 	add.w	r1, r7, #8
 800b202:	2300      	movs	r3, #0
 800b204:	697a      	ldr	r2, [r7, #20]
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f000 faba 	bl	800b780 <xQueueGenericSend>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d001      	beq.n	800b216 <osMessagePut+0x72>
      return osErrorOS;
 800b212:	23ff      	movs	r3, #255	; 0xff
 800b214:	e000      	b.n	800b218 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b216:	2300      	movs	r3, #0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3718      	adds	r7, #24
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	e000ed04 	.word	0xe000ed04

0800b224 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b224:	b590      	push	{r4, r7, lr}
 800b226:	b08b      	sub	sp, #44	; 0x2c
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10a      	bne.n	800b254 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b23e:	2380      	movs	r3, #128	; 0x80
 800b240:	617b      	str	r3, [r7, #20]
    return event;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	461c      	mov	r4, r3
 800b246:	f107 0314 	add.w	r3, r7, #20
 800b24a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b24e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b252:	e054      	b.n	800b2fe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b254:	2300      	movs	r3, #0
 800b256:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b258:	2300      	movs	r3, #0
 800b25a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b262:	d103      	bne.n	800b26c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b264:	f04f 33ff 	mov.w	r3, #4294967295
 800b268:	627b      	str	r3, [r7, #36]	; 0x24
 800b26a:	e009      	b.n	800b280 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d006      	beq.n	800b280 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d101      	bne.n	800b280 <osMessageGet+0x5c>
      ticks = 1;
 800b27c:	2301      	movs	r3, #1
 800b27e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b280:	f7ff fd8d 	bl	800ad9e <inHandlerMode>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d01c      	beq.n	800b2c4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b28a:	f107 0220 	add.w	r2, r7, #32
 800b28e:	f107 0314 	add.w	r3, r7, #20
 800b292:	3304      	adds	r3, #4
 800b294:	4619      	mov	r1, r3
 800b296:	68b8      	ldr	r0, [r7, #8]
 800b298:	f000 fe84 	bl	800bfa4 <xQueueReceiveFromISR>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d102      	bne.n	800b2a8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b2a2:	2310      	movs	r3, #16
 800b2a4:	617b      	str	r3, [r7, #20]
 800b2a6:	e001      	b.n	800b2ac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b2ac:	6a3b      	ldr	r3, [r7, #32]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d01d      	beq.n	800b2ee <osMessageGet+0xca>
 800b2b2:	4b15      	ldr	r3, [pc, #84]	; (800b308 <osMessageGet+0xe4>)
 800b2b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2b8:	601a      	str	r2, [r3, #0]
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	f3bf 8f6f 	isb	sy
 800b2c2:	e014      	b.n	800b2ee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b2c4:	f107 0314 	add.w	r3, r7, #20
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	68b8      	ldr	r0, [r7, #8]
 800b2d0:	f000 fc7c 	bl	800bbcc <xQueueReceive>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d102      	bne.n	800b2e0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b2da:	2310      	movs	r3, #16
 800b2dc:	617b      	str	r3, [r7, #20]
 800b2de:	e006      	b.n	800b2ee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <osMessageGet+0xc6>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	e000      	b.n	800b2ec <osMessageGet+0xc8>
 800b2ea:	2340      	movs	r3, #64	; 0x40
 800b2ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	461c      	mov	r4, r3
 800b2f2:	f107 0314 	add.w	r3, r7, #20
 800b2f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b2fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	372c      	adds	r7, #44	; 0x2c
 800b302:	46bd      	mov	sp, r7
 800b304:	bd90      	pop	{r4, r7, pc}
 800b306:	bf00      	nop
 800b308:	e000ed04 	.word	0xe000ed04

0800b30c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f103 0208 	add.w	r2, r3, #8
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f04f 32ff 	mov.w	r2, #4294967295
 800b324:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f103 0208 	add.w	r2, r3, #8
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f103 0208 	add.w	r2, r3, #8
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b340:	bf00      	nop
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b35a:	bf00      	nop
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b366:	b480      	push	{r7}
 800b368:	b085      	sub	sp, #20
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	689a      	ldr	r2, [r3, #8]
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	683a      	ldr	r2, [r7, #0]
 800b38a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	1c5a      	adds	r2, r3, #1
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	601a      	str	r2, [r3, #0]
}
 800b3a2:	bf00      	nop
 800b3a4:	3714      	adds	r7, #20
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3ae:	b480      	push	{r7}
 800b3b0:	b085      	sub	sp, #20
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c4:	d103      	bne.n	800b3ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	60fb      	str	r3, [r7, #12]
 800b3cc:	e00c      	b.n	800b3e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	3308      	adds	r3, #8
 800b3d2:	60fb      	str	r3, [r7, #12]
 800b3d4:	e002      	b.n	800b3dc <vListInsert+0x2e>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	60fb      	str	r3, [r7, #12]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d2f6      	bcs.n	800b3d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	685a      	ldr	r2, [r3, #4]
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	683a      	ldr	r2, [r7, #0]
 800b3f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	683a      	ldr	r2, [r7, #0]
 800b402:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	1c5a      	adds	r2, r3, #1
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	601a      	str	r2, [r3, #0]
}
 800b414:	bf00      	nop
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	6892      	ldr	r2, [r2, #8]
 800b436:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	6852      	ldr	r2, [r2, #4]
 800b440:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d103      	bne.n	800b454 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	689a      	ldr	r2, [r3, #8]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	1e5a      	subs	r2, r3, #1
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3714      	adds	r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10a      	bne.n	800b49e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48c:	f383 8811 	msr	BASEPRI, r3
 800b490:	f3bf 8f6f 	isb	sy
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b49a:	bf00      	nop
 800b49c:	e7fe      	b.n	800b49c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b49e:	f002 f889 	bl	800d5b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4aa:	68f9      	ldr	r1, [r7, #12]
 800b4ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4ae:	fb01 f303 	mul.w	r3, r1, r3
 800b4b2:	441a      	add	r2, r3
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	68f9      	ldr	r1, [r7, #12]
 800b4d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4d4:	fb01 f303 	mul.w	r3, r1, r3
 800b4d8:	441a      	add	r2, r3
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	22ff      	movs	r2, #255	; 0xff
 800b4e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	22ff      	movs	r2, #255	; 0xff
 800b4ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d114      	bne.n	800b51e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d01a      	beq.n	800b532 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	3310      	adds	r3, #16
 800b500:	4618      	mov	r0, r3
 800b502:	f001 fb49 	bl	800cb98 <xTaskRemoveFromEventList>
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d012      	beq.n	800b532 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b50c:	4b0c      	ldr	r3, [pc, #48]	; (800b540 <xQueueGenericReset+0xcc>)
 800b50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b512:	601a      	str	r2, [r3, #0]
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	e009      	b.n	800b532 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	3310      	adds	r3, #16
 800b522:	4618      	mov	r0, r3
 800b524:	f7ff fef2 	bl	800b30c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	3324      	adds	r3, #36	; 0x24
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7ff feed 	bl	800b30c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b532:	f002 f86f 	bl	800d614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b536:	2301      	movs	r3, #1
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	e000ed04 	.word	0xe000ed04

0800b544 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b544:	b580      	push	{r7, lr}
 800b546:	b08e      	sub	sp, #56	; 0x38
 800b548:	af02      	add	r7, sp, #8
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
 800b550:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10a      	bne.n	800b56e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b56a:	bf00      	nop
 800b56c:	e7fe      	b.n	800b56c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10a      	bne.n	800b58a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b586:	bf00      	nop
 800b588:	e7fe      	b.n	800b588 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <xQueueGenericCreateStatic+0x52>
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d001      	beq.n	800b59a <xQueueGenericCreateStatic+0x56>
 800b596:	2301      	movs	r3, #1
 800b598:	e000      	b.n	800b59c <xQueueGenericCreateStatic+0x58>
 800b59a:	2300      	movs	r3, #0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d10a      	bne.n	800b5b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	623b      	str	r3, [r7, #32]
}
 800b5b2:	bf00      	nop
 800b5b4:	e7fe      	b.n	800b5b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d102      	bne.n	800b5c2 <xQueueGenericCreateStatic+0x7e>
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d101      	bne.n	800b5c6 <xQueueGenericCreateStatic+0x82>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e000      	b.n	800b5c8 <xQueueGenericCreateStatic+0x84>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10a      	bne.n	800b5e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	61fb      	str	r3, [r7, #28]
}
 800b5de:	bf00      	nop
 800b5e0:	e7fe      	b.n	800b5e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b5e2:	2348      	movs	r3, #72	; 0x48
 800b5e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2b48      	cmp	r3, #72	; 0x48
 800b5ea:	d00a      	beq.n	800b602 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	61bb      	str	r3, [r7, #24]
}
 800b5fe:	bf00      	nop
 800b600:	e7fe      	b.n	800b600 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b602:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00d      	beq.n	800b62a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b610:	2201      	movs	r2, #1
 800b612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b616:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	4613      	mov	r3, r2
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	68b9      	ldr	r1, [r7, #8]
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f000 f83f 	bl	800b6a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3730      	adds	r7, #48	; 0x30
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b634:	b580      	push	{r7, lr}
 800b636:	b08a      	sub	sp, #40	; 0x28
 800b638:	af02      	add	r7, sp, #8
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	4613      	mov	r3, r2
 800b640:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10a      	bne.n	800b65e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	613b      	str	r3, [r7, #16]
}
 800b65a:	bf00      	nop
 800b65c:	e7fe      	b.n	800b65c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	68ba      	ldr	r2, [r7, #8]
 800b662:	fb02 f303 	mul.w	r3, r2, r3
 800b666:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	3348      	adds	r3, #72	; 0x48
 800b66c:	4618      	mov	r0, r3
 800b66e:	f002 f8c3 	bl	800d7f8 <pvPortMalloc>
 800b672:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d011      	beq.n	800b69e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	3348      	adds	r3, #72	; 0x48
 800b682:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b68c:	79fa      	ldrb	r2, [r7, #7]
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	4613      	mov	r3, r2
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	68b9      	ldr	r1, [r7, #8]
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f000 f805 	bl	800b6a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b69e:	69bb      	ldr	r3, [r7, #24]
	}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3720      	adds	r7, #32
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
 800b6b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d103      	bne.n	800b6c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	69ba      	ldr	r2, [r7, #24]
 800b6c0:	601a      	str	r2, [r3, #0]
 800b6c2:	e002      	b.n	800b6ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b6d6:	2101      	movs	r1, #1
 800b6d8:	69b8      	ldr	r0, [r7, #24]
 800b6da:	f7ff fecb 	bl	800b474 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b6de:	bf00      	nop
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b082      	sub	sp, #8
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00e      	beq.n	800b712 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b706:	2300      	movs	r3, #0
 800b708:	2200      	movs	r2, #0
 800b70a:	2100      	movs	r1, #0
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f837 	bl	800b780 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b712:	bf00      	nop
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b086      	sub	sp, #24
 800b71e:	af00      	add	r7, sp, #0
 800b720:	4603      	mov	r3, r0
 800b722:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b724:	2301      	movs	r3, #1
 800b726:	617b      	str	r3, [r7, #20]
 800b728:	2300      	movs	r3, #0
 800b72a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b72c:	79fb      	ldrb	r3, [r7, #7]
 800b72e:	461a      	mov	r2, r3
 800b730:	6939      	ldr	r1, [r7, #16]
 800b732:	6978      	ldr	r0, [r7, #20]
 800b734:	f7ff ff7e 	bl	800b634 <xQueueGenericCreate>
 800b738:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f7ff ffd3 	bl	800b6e6 <prvInitialiseMutex>

		return xNewQueue;
 800b740:	68fb      	ldr	r3, [r7, #12]
	}
 800b742:	4618      	mov	r0, r3
 800b744:	3718      	adds	r7, #24
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b088      	sub	sp, #32
 800b74e:	af02      	add	r7, sp, #8
 800b750:	4603      	mov	r3, r0
 800b752:	6039      	str	r1, [r7, #0]
 800b754:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b756:	2301      	movs	r3, #1
 800b758:	617b      	str	r3, [r7, #20]
 800b75a:	2300      	movs	r3, #0
 800b75c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b75e:	79fb      	ldrb	r3, [r7, #7]
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2200      	movs	r2, #0
 800b766:	6939      	ldr	r1, [r7, #16]
 800b768:	6978      	ldr	r0, [r7, #20]
 800b76a:	f7ff feeb 	bl	800b544 <xQueueGenericCreateStatic>
 800b76e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f7ff ffb8 	bl	800b6e6 <prvInitialiseMutex>

		return xNewQueue;
 800b776:	68fb      	ldr	r3, [r7, #12]
	}
 800b778:	4618      	mov	r0, r3
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b08e      	sub	sp, #56	; 0x38
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
 800b78c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b78e:	2300      	movs	r3, #0
 800b790:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10a      	bne.n	800b7b2 <xQueueGenericSend+0x32>
	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7ae:	bf00      	nop
 800b7b0:	e7fe      	b.n	800b7b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d103      	bne.n	800b7c0 <xQueueGenericSend+0x40>
 800b7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <xQueueGenericSend+0x44>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e000      	b.n	800b7c6 <xQueueGenericSend+0x46>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10a      	bne.n	800b7e0 <xQueueGenericSend+0x60>
	__asm volatile
 800b7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ce:	f383 8811 	msr	BASEPRI, r3
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b7dc:	bf00      	nop
 800b7de:	e7fe      	b.n	800b7de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d103      	bne.n	800b7ee <xQueueGenericSend+0x6e>
 800b7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d101      	bne.n	800b7f2 <xQueueGenericSend+0x72>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e000      	b.n	800b7f4 <xQueueGenericSend+0x74>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d10a      	bne.n	800b80e <xQueueGenericSend+0x8e>
	__asm volatile
 800b7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fc:	f383 8811 	msr	BASEPRI, r3
 800b800:	f3bf 8f6f 	isb	sy
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	623b      	str	r3, [r7, #32]
}
 800b80a:	bf00      	nop
 800b80c:	e7fe      	b.n	800b80c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b80e:	f001 fb83 	bl	800cf18 <xTaskGetSchedulerState>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d102      	bne.n	800b81e <xQueueGenericSend+0x9e>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d101      	bne.n	800b822 <xQueueGenericSend+0xa2>
 800b81e:	2301      	movs	r3, #1
 800b820:	e000      	b.n	800b824 <xQueueGenericSend+0xa4>
 800b822:	2300      	movs	r3, #0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d10a      	bne.n	800b83e <xQueueGenericSend+0xbe>
	__asm volatile
 800b828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82c:	f383 8811 	msr	BASEPRI, r3
 800b830:	f3bf 8f6f 	isb	sy
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	61fb      	str	r3, [r7, #28]
}
 800b83a:	bf00      	nop
 800b83c:	e7fe      	b.n	800b83c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b83e:	f001 feb9 	bl	800d5b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d302      	bcc.n	800b854 <xQueueGenericSend+0xd4>
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	2b02      	cmp	r3, #2
 800b852:	d129      	bne.n	800b8a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	68b9      	ldr	r1, [r7, #8]
 800b858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b85a:	f000 fc3b 	bl	800c0d4 <prvCopyDataToQueue>
 800b85e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b864:	2b00      	cmp	r3, #0
 800b866:	d010      	beq.n	800b88a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86a:	3324      	adds	r3, #36	; 0x24
 800b86c:	4618      	mov	r0, r3
 800b86e:	f001 f993 	bl	800cb98 <xTaskRemoveFromEventList>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d013      	beq.n	800b8a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b878:	4b3f      	ldr	r3, [pc, #252]	; (800b978 <xQueueGenericSend+0x1f8>)
 800b87a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b87e:	601a      	str	r2, [r3, #0]
 800b880:	f3bf 8f4f 	dsb	sy
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	e00a      	b.n	800b8a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d007      	beq.n	800b8a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b890:	4b39      	ldr	r3, [pc, #228]	; (800b978 <xQueueGenericSend+0x1f8>)
 800b892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b896:	601a      	str	r2, [r3, #0]
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b8a0:	f001 feb8 	bl	800d614 <vPortExitCritical>
				return pdPASS;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e063      	b.n	800b970 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d103      	bne.n	800b8b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8ae:	f001 feb1 	bl	800d614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	e05c      	b.n	800b970 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d106      	bne.n	800b8ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8bc:	f107 0314 	add.w	r3, r7, #20
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f001 f9cb 	bl	800cc5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8ca:	f001 fea3 	bl	800d614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8ce:	f000 ff59 	bl	800c784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8d2:	f001 fe6f 	bl	800d5b4 <vPortEnterCritical>
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8dc:	b25b      	sxtb	r3, r3
 800b8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e2:	d103      	bne.n	800b8ec <xQueueGenericSend+0x16c>
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8f2:	b25b      	sxtb	r3, r3
 800b8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f8:	d103      	bne.n	800b902 <xQueueGenericSend+0x182>
 800b8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b902:	f001 fe87 	bl	800d614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b906:	1d3a      	adds	r2, r7, #4
 800b908:	f107 0314 	add.w	r3, r7, #20
 800b90c:	4611      	mov	r1, r2
 800b90e:	4618      	mov	r0, r3
 800b910:	f001 f9ba 	bl	800cc88 <xTaskCheckForTimeOut>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d124      	bne.n	800b964 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b91a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b91c:	f000 fcd2 	bl	800c2c4 <prvIsQueueFull>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d018      	beq.n	800b958 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b928:	3310      	adds	r3, #16
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	4611      	mov	r1, r2
 800b92e:	4618      	mov	r0, r3
 800b930:	f001 f90e 	bl	800cb50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b936:	f000 fc5d 	bl	800c1f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b93a:	f000 ff31 	bl	800c7a0 <xTaskResumeAll>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	f47f af7c 	bne.w	800b83e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b946:	4b0c      	ldr	r3, [pc, #48]	; (800b978 <xQueueGenericSend+0x1f8>)
 800b948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b94c:	601a      	str	r2, [r3, #0]
 800b94e:	f3bf 8f4f 	dsb	sy
 800b952:	f3bf 8f6f 	isb	sy
 800b956:	e772      	b.n	800b83e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b95a:	f000 fc4b 	bl	800c1f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b95e:	f000 ff1f 	bl	800c7a0 <xTaskResumeAll>
 800b962:	e76c      	b.n	800b83e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b966:	f000 fc45 	bl	800c1f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b96a:	f000 ff19 	bl	800c7a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b96e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b970:	4618      	mov	r0, r3
 800b972:	3738      	adds	r7, #56	; 0x38
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	e000ed04 	.word	0xe000ed04

0800b97c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b090      	sub	sp, #64	; 0x40
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
 800b988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b990:	2b00      	cmp	r3, #0
 800b992:	d10a      	bne.n	800b9aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b9a6:	bf00      	nop
 800b9a8:	e7fe      	b.n	800b9a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d103      	bne.n	800b9b8 <xQueueGenericSendFromISR+0x3c>
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d101      	bne.n	800b9bc <xQueueGenericSendFromISR+0x40>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e000      	b.n	800b9be <xQueueGenericSendFromISR+0x42>
 800b9bc:	2300      	movs	r3, #0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d10a      	bne.n	800b9d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b9d4:	bf00      	nop
 800b9d6:	e7fe      	b.n	800b9d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d103      	bne.n	800b9e6 <xQueueGenericSendFromISR+0x6a>
 800b9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d101      	bne.n	800b9ea <xQueueGenericSendFromISR+0x6e>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e000      	b.n	800b9ec <xQueueGenericSendFromISR+0x70>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10a      	bne.n	800ba06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	623b      	str	r3, [r7, #32]
}
 800ba02:	bf00      	nop
 800ba04:	e7fe      	b.n	800ba04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba06:	f001 feb7 	bl	800d778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba0a:	f3ef 8211 	mrs	r2, BASEPRI
 800ba0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba12:	f383 8811 	msr	BASEPRI, r3
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	61fa      	str	r2, [r7, #28]
 800ba20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ba22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d302      	bcc.n	800ba38 <xQueueGenericSendFromISR+0xbc>
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	d12f      	bne.n	800ba98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	68b9      	ldr	r1, [r7, #8]
 800ba4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba4e:	f000 fb41 	bl	800c0d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ba56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba5a:	d112      	bne.n	800ba82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d016      	beq.n	800ba92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba66:	3324      	adds	r3, #36	; 0x24
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f001 f895 	bl	800cb98 <xTaskRemoveFromEventList>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00e      	beq.n	800ba92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00b      	beq.n	800ba92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	601a      	str	r2, [r3, #0]
 800ba80:	e007      	b.n	800ba92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba86:	3301      	adds	r3, #1
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	b25a      	sxtb	r2, r3
 800ba8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba92:	2301      	movs	r3, #1
 800ba94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ba96:	e001      	b.n	800ba9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800baa6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800baa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3740      	adds	r7, #64	; 0x40
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b08e      	sub	sp, #56	; 0x38
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10a      	bne.n	800badc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baca:	f383 8811 	msr	BASEPRI, r3
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f3bf 8f4f 	dsb	sy
 800bad6:	623b      	str	r3, [r7, #32]
}
 800bad8:	bf00      	nop
 800bada:	e7fe      	b.n	800bada <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800badc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d00a      	beq.n	800bafa <xQueueGiveFromISR+0x48>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	61fb      	str	r3, [r7, #28]
}
 800baf6:	bf00      	nop
 800baf8:	e7fe      	b.n	800baf8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d103      	bne.n	800bb0a <xQueueGiveFromISR+0x58>
 800bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d101      	bne.n	800bb0e <xQueueGiveFromISR+0x5c>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e000      	b.n	800bb10 <xQueueGiveFromISR+0x5e>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10a      	bne.n	800bb2a <xQueueGiveFromISR+0x78>
	__asm volatile
 800bb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb18:	f383 8811 	msr	BASEPRI, r3
 800bb1c:	f3bf 8f6f 	isb	sy
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	61bb      	str	r3, [r7, #24]
}
 800bb26:	bf00      	nop
 800bb28:	e7fe      	b.n	800bb28 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb2a:	f001 fe25 	bl	800d778 <vPortValidateInterruptPriority>
	__asm volatile
 800bb2e:	f3ef 8211 	mrs	r2, BASEPRI
 800bb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb36:	f383 8811 	msr	BASEPRI, r3
 800bb3a:	f3bf 8f6f 	isb	sy
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	617a      	str	r2, [r7, #20]
 800bb44:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bb46:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d22b      	bcs.n	800bbb2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb66:	1c5a      	adds	r2, r3, #1
 800bb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bb6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bb70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb74:	d112      	bne.n	800bb9c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d016      	beq.n	800bbac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb80:	3324      	adds	r3, #36	; 0x24
 800bb82:	4618      	mov	r0, r3
 800bb84:	f001 f808 	bl	800cb98 <xTaskRemoveFromEventList>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00e      	beq.n	800bbac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00b      	beq.n	800bbac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2201      	movs	r2, #1
 800bb98:	601a      	str	r2, [r3, #0]
 800bb9a:	e007      	b.n	800bbac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bba0:	3301      	adds	r3, #1
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	b25a      	sxtb	r2, r3
 800bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bbac:	2301      	movs	r3, #1
 800bbae:	637b      	str	r3, [r7, #52]	; 0x34
 800bbb0:	e001      	b.n	800bbb6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	637b      	str	r3, [r7, #52]	; 0x34
 800bbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f383 8811 	msr	BASEPRI, r3
}
 800bbc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3738      	adds	r7, #56	; 0x38
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b08c      	sub	sp, #48	; 0x30
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10a      	bne.n	800bbfc <xQueueReceive+0x30>
	__asm volatile
 800bbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbea:	f383 8811 	msr	BASEPRI, r3
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	623b      	str	r3, [r7, #32]
}
 800bbf8:	bf00      	nop
 800bbfa:	e7fe      	b.n	800bbfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d103      	bne.n	800bc0a <xQueueReceive+0x3e>
 800bc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d101      	bne.n	800bc0e <xQueueReceive+0x42>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e000      	b.n	800bc10 <xQueueReceive+0x44>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10a      	bne.n	800bc2a <xQueueReceive+0x5e>
	__asm volatile
 800bc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc18:	f383 8811 	msr	BASEPRI, r3
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	61fb      	str	r3, [r7, #28]
}
 800bc26:	bf00      	nop
 800bc28:	e7fe      	b.n	800bc28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc2a:	f001 f975 	bl	800cf18 <xTaskGetSchedulerState>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d102      	bne.n	800bc3a <xQueueReceive+0x6e>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d101      	bne.n	800bc3e <xQueueReceive+0x72>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e000      	b.n	800bc40 <xQueueReceive+0x74>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d10a      	bne.n	800bc5a <xQueueReceive+0x8e>
	__asm volatile
 800bc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc48:	f383 8811 	msr	BASEPRI, r3
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	61bb      	str	r3, [r7, #24]
}
 800bc56:	bf00      	nop
 800bc58:	e7fe      	b.n	800bc58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc5a:	f001 fcab 	bl	800d5b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d01f      	beq.n	800bcaa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc6a:	68b9      	ldr	r1, [r7, #8]
 800bc6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc6e:	f000 fa9b 	bl	800c1a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc74:	1e5a      	subs	r2, r3, #1
 800bc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00f      	beq.n	800bca2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc84:	3310      	adds	r3, #16
 800bc86:	4618      	mov	r0, r3
 800bc88:	f000 ff86 	bl	800cb98 <xTaskRemoveFromEventList>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d007      	beq.n	800bca2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc92:	4b3d      	ldr	r3, [pc, #244]	; (800bd88 <xQueueReceive+0x1bc>)
 800bc94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc98:	601a      	str	r2, [r3, #0]
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bca2:	f001 fcb7 	bl	800d614 <vPortExitCritical>
				return pdPASS;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e069      	b.n	800bd7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d103      	bne.n	800bcb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcb0:	f001 fcb0 	bl	800d614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	e062      	b.n	800bd7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d106      	bne.n	800bccc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcbe:	f107 0310 	add.w	r3, r7, #16
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f000 ffca 	bl	800cc5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bccc:	f001 fca2 	bl	800d614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcd0:	f000 fd58 	bl	800c784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcd4:	f001 fc6e 	bl	800d5b4 <vPortEnterCritical>
 800bcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcde:	b25b      	sxtb	r3, r3
 800bce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce4:	d103      	bne.n	800bcee <xQueueReceive+0x122>
 800bce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce8:	2200      	movs	r2, #0
 800bcea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcf4:	b25b      	sxtb	r3, r3
 800bcf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcfa:	d103      	bne.n	800bd04 <xQueueReceive+0x138>
 800bcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd04:	f001 fc86 	bl	800d614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd08:	1d3a      	adds	r2, r7, #4
 800bd0a:	f107 0310 	add.w	r3, r7, #16
 800bd0e:	4611      	mov	r1, r2
 800bd10:	4618      	mov	r0, r3
 800bd12:	f000 ffb9 	bl	800cc88 <xTaskCheckForTimeOut>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d123      	bne.n	800bd64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd1e:	f000 fabb 	bl	800c298 <prvIsQueueEmpty>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d017      	beq.n	800bd58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	3324      	adds	r3, #36	; 0x24
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	4611      	mov	r1, r2
 800bd30:	4618      	mov	r0, r3
 800bd32:	f000 ff0d 	bl	800cb50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd38:	f000 fa5c 	bl	800c1f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd3c:	f000 fd30 	bl	800c7a0 <xTaskResumeAll>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d189      	bne.n	800bc5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bd46:	4b10      	ldr	r3, [pc, #64]	; (800bd88 <xQueueReceive+0x1bc>)
 800bd48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd4c:	601a      	str	r2, [r3, #0]
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	e780      	b.n	800bc5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bd58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd5a:	f000 fa4b 	bl	800c1f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd5e:	f000 fd1f 	bl	800c7a0 <xTaskResumeAll>
 800bd62:	e77a      	b.n	800bc5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bd64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd66:	f000 fa45 	bl	800c1f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd6a:	f000 fd19 	bl	800c7a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd70:	f000 fa92 	bl	800c298 <prvIsQueueEmpty>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f43f af6f 	beq.w	800bc5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3730      	adds	r7, #48	; 0x30
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	e000ed04 	.word	0xe000ed04

0800bd8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b08e      	sub	sp, #56	; 0x38
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd96:	2300      	movs	r3, #0
 800bd98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10a      	bne.n	800bdbe <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	623b      	str	r3, [r7, #32]
}
 800bdba:	bf00      	nop
 800bdbc:	e7fe      	b.n	800bdbc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00a      	beq.n	800bddc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	61fb      	str	r3, [r7, #28]
}
 800bdd8:	bf00      	nop
 800bdda:	e7fe      	b.n	800bdda <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bddc:	f001 f89c 	bl	800cf18 <xTaskGetSchedulerState>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d102      	bne.n	800bdec <xQueueSemaphoreTake+0x60>
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d101      	bne.n	800bdf0 <xQueueSemaphoreTake+0x64>
 800bdec:	2301      	movs	r3, #1
 800bdee:	e000      	b.n	800bdf2 <xQueueSemaphoreTake+0x66>
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d10a      	bne.n	800be0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfa:	f383 8811 	msr	BASEPRI, r3
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	f3bf 8f4f 	dsb	sy
 800be06:	61bb      	str	r3, [r7, #24]
}
 800be08:	bf00      	nop
 800be0a:	e7fe      	b.n	800be0a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be0c:	f001 fbd2 	bl	800d5b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800be10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800be16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d024      	beq.n	800be66 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800be1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1e:	1e5a      	subs	r2, r3, #1
 800be20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d104      	bne.n	800be36 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800be2c:	f001 fa1c 	bl	800d268 <pvTaskIncrementMutexHeldCount>
 800be30:	4602      	mov	r2, r0
 800be32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be34:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00f      	beq.n	800be5e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be40:	3310      	adds	r3, #16
 800be42:	4618      	mov	r0, r3
 800be44:	f000 fea8 	bl	800cb98 <xTaskRemoveFromEventList>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d007      	beq.n	800be5e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be4e:	4b54      	ldr	r3, [pc, #336]	; (800bfa0 <xQueueSemaphoreTake+0x214>)
 800be50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be5e:	f001 fbd9 	bl	800d614 <vPortExitCritical>
				return pdPASS;
 800be62:	2301      	movs	r3, #1
 800be64:	e097      	b.n	800bf96 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d111      	bne.n	800be90 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00a      	beq.n	800be88 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be76:	f383 8811 	msr	BASEPRI, r3
 800be7a:	f3bf 8f6f 	isb	sy
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	617b      	str	r3, [r7, #20]
}
 800be84:	bf00      	nop
 800be86:	e7fe      	b.n	800be86 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800be88:	f001 fbc4 	bl	800d614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be8c:	2300      	movs	r3, #0
 800be8e:	e082      	b.n	800bf96 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be92:	2b00      	cmp	r3, #0
 800be94:	d106      	bne.n	800bea4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be96:	f107 030c 	add.w	r3, r7, #12
 800be9a:	4618      	mov	r0, r3
 800be9c:	f000 fede 	bl	800cc5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bea0:	2301      	movs	r3, #1
 800bea2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bea4:	f001 fbb6 	bl	800d614 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bea8:	f000 fc6c 	bl	800c784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800beac:	f001 fb82 	bl	800d5b4 <vPortEnterCritical>
 800beb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800beb6:	b25b      	sxtb	r3, r3
 800beb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bebc:	d103      	bne.n	800bec6 <xQueueSemaphoreTake+0x13a>
 800bebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800becc:	b25b      	sxtb	r3, r3
 800bece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed2:	d103      	bne.n	800bedc <xQueueSemaphoreTake+0x150>
 800bed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed6:	2200      	movs	r2, #0
 800bed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bedc:	f001 fb9a 	bl	800d614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bee0:	463a      	mov	r2, r7
 800bee2:	f107 030c 	add.w	r3, r7, #12
 800bee6:	4611      	mov	r1, r2
 800bee8:	4618      	mov	r0, r3
 800beea:	f000 fecd 	bl	800cc88 <xTaskCheckForTimeOut>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d132      	bne.n	800bf5a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bef6:	f000 f9cf 	bl	800c298 <prvIsQueueEmpty>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d026      	beq.n	800bf4e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d109      	bne.n	800bf1c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bf08:	f001 fb54 	bl	800d5b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f001 f81f 	bl	800cf54 <xTaskPriorityInherit>
 800bf16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bf18:	f001 fb7c 	bl	800d614 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1e:	3324      	adds	r3, #36	; 0x24
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	4611      	mov	r1, r2
 800bf24:	4618      	mov	r0, r3
 800bf26:	f000 fe13 	bl	800cb50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf2c:	f000 f962 	bl	800c1f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf30:	f000 fc36 	bl	800c7a0 <xTaskResumeAll>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f47f af68 	bne.w	800be0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bf3c:	4b18      	ldr	r3, [pc, #96]	; (800bfa0 <xQueueSemaphoreTake+0x214>)
 800bf3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf42:	601a      	str	r2, [r3, #0]
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	e75e      	b.n	800be0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bf4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf50:	f000 f950 	bl	800c1f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf54:	f000 fc24 	bl	800c7a0 <xTaskResumeAll>
 800bf58:	e758      	b.n	800be0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bf5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf5c:	f000 f94a 	bl	800c1f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf60:	f000 fc1e 	bl	800c7a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf66:	f000 f997 	bl	800c298 <prvIsQueueEmpty>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f43f af4d 	beq.w	800be0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00d      	beq.n	800bf94 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bf78:	f001 fb1c 	bl	800d5b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bf7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf7e:	f000 f891 	bl	800c0a4 <prvGetDisinheritPriorityAfterTimeout>
 800bf82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f001 f8de 	bl	800d14c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bf90:	f001 fb40 	bl	800d614 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3738      	adds	r7, #56	; 0x38
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	e000ed04 	.word	0xe000ed04

0800bfa4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b08e      	sub	sp, #56	; 0x38
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10a      	bne.n	800bfd0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbe:	f383 8811 	msr	BASEPRI, r3
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	623b      	str	r3, [r7, #32]
}
 800bfcc:	bf00      	nop
 800bfce:	e7fe      	b.n	800bfce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d103      	bne.n	800bfde <xQueueReceiveFromISR+0x3a>
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d101      	bne.n	800bfe2 <xQueueReceiveFromISR+0x3e>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e000      	b.n	800bfe4 <xQueueReceiveFromISR+0x40>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10a      	bne.n	800bffe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	61fb      	str	r3, [r7, #28]
}
 800bffa:	bf00      	nop
 800bffc:	e7fe      	b.n	800bffc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bffe:	f001 fbbb 	bl	800d778 <vPortValidateInterruptPriority>
	__asm volatile
 800c002:	f3ef 8211 	mrs	r2, BASEPRI
 800c006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	61ba      	str	r2, [r7, #24]
 800c018:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c01a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c01c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c022:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c026:	2b00      	cmp	r3, #0
 800c028:	d02f      	beq.n	800c08a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c034:	68b9      	ldr	r1, [r7, #8]
 800c036:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c038:	f000 f8b6 	bl	800c1a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03e:	1e5a      	subs	r2, r3, #1
 800c040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c042:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c044:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c04c:	d112      	bne.n	800c074 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d016      	beq.n	800c084 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c058:	3310      	adds	r3, #16
 800c05a:	4618      	mov	r0, r3
 800c05c:	f000 fd9c 	bl	800cb98 <xTaskRemoveFromEventList>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00e      	beq.n	800c084 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00b      	beq.n	800c084 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	e007      	b.n	800c084 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c078:	3301      	adds	r3, #1
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	b25a      	sxtb	r2, r3
 800c07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c084:	2301      	movs	r3, #1
 800c086:	637b      	str	r3, [r7, #52]	; 0x34
 800c088:	e001      	b.n	800c08e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c08a:	2300      	movs	r3, #0
 800c08c:	637b      	str	r3, [r7, #52]	; 0x34
 800c08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c090:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	f383 8811 	msr	BASEPRI, r3
}
 800c098:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3738      	adds	r7, #56	; 0x38
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d006      	beq.n	800c0c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f1c3 0307 	rsb	r3, r3, #7
 800c0be:	60fb      	str	r3, [r7, #12]
 800c0c0:	e001      	b.n	800c0c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
	}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3714      	adds	r7, #20
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b086      	sub	sp, #24
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d10d      	bne.n	800c10e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d14d      	bne.n	800c196 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 ff9e 	bl	800d040 <xTaskPriorityDisinherit>
 800c104:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	609a      	str	r2, [r3, #8]
 800c10c:	e043      	b.n	800c196 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d119      	bne.n	800c148 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6858      	ldr	r0, [r3, #4]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c11c:	461a      	mov	r2, r3
 800c11e:	68b9      	ldr	r1, [r7, #8]
 800c120:	f00e fbe2 	bl	801a8e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	685a      	ldr	r2, [r3, #4]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12c:	441a      	add	r2, r3
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d32b      	bcc.n	800c196 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	605a      	str	r2, [r3, #4]
 800c146:	e026      	b.n	800c196 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	68d8      	ldr	r0, [r3, #12]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c150:	461a      	mov	r2, r3
 800c152:	68b9      	ldr	r1, [r7, #8]
 800c154:	f00e fbc8 	bl	801a8e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	68da      	ldr	r2, [r3, #12]
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c160:	425b      	negs	r3, r3
 800c162:	441a      	add	r2, r3
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	68da      	ldr	r2, [r3, #12]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	429a      	cmp	r2, r3
 800c172:	d207      	bcs.n	800c184 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	689a      	ldr	r2, [r3, #8]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17c:	425b      	negs	r3, r3
 800c17e:	441a      	add	r2, r3
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b02      	cmp	r3, #2
 800c188:	d105      	bne.n	800c196 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d002      	beq.n	800c196 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	3b01      	subs	r3, #1
 800c194:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	1c5a      	adds	r2, r3, #1
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c19e:	697b      	ldr	r3, [r7, #20]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3718      	adds	r7, #24
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d018      	beq.n	800c1ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	68da      	ldr	r2, [r3, #12]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c2:	441a      	add	r2, r3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	68da      	ldr	r2, [r3, #12]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d303      	bcc.n	800c1dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	68d9      	ldr	r1, [r3, #12]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	6838      	ldr	r0, [r7, #0]
 800c1e8:	f00e fb7e 	bl	801a8e8 <memcpy>
	}
}
 800c1ec:	bf00      	nop
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c1fc:	f001 f9da 	bl	800d5b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c206:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c208:	e011      	b.n	800c22e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d012      	beq.n	800c238 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	3324      	adds	r3, #36	; 0x24
 800c216:	4618      	mov	r0, r3
 800c218:	f000 fcbe 	bl	800cb98 <xTaskRemoveFromEventList>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d001      	beq.n	800c226 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c222:	f000 fd93 	bl	800cd4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c226:	7bfb      	ldrb	r3, [r7, #15]
 800c228:	3b01      	subs	r3, #1
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c22e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c232:	2b00      	cmp	r3, #0
 800c234:	dce9      	bgt.n	800c20a <prvUnlockQueue+0x16>
 800c236:	e000      	b.n	800c23a <prvUnlockQueue+0x46>
					break;
 800c238:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	22ff      	movs	r2, #255	; 0xff
 800c23e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c242:	f001 f9e7 	bl	800d614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c246:	f001 f9b5 	bl	800d5b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c250:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c252:	e011      	b.n	800c278 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d012      	beq.n	800c282 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	3310      	adds	r3, #16
 800c260:	4618      	mov	r0, r3
 800c262:	f000 fc99 	bl	800cb98 <xTaskRemoveFromEventList>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c26c:	f000 fd6e 	bl	800cd4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c270:	7bbb      	ldrb	r3, [r7, #14]
 800c272:	3b01      	subs	r3, #1
 800c274:	b2db      	uxtb	r3, r3
 800c276:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	dce9      	bgt.n	800c254 <prvUnlockQueue+0x60>
 800c280:	e000      	b.n	800c284 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c282:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	22ff      	movs	r2, #255	; 0xff
 800c288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c28c:	f001 f9c2 	bl	800d614 <vPortExitCritical>
}
 800c290:	bf00      	nop
 800c292:	3710      	adds	r7, #16
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c2a0:	f001 f988 	bl	800d5b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d102      	bne.n	800c2b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	60fb      	str	r3, [r7, #12]
 800c2b0:	e001      	b.n	800c2b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c2b6:	f001 f9ad 	bl	800d614 <vPortExitCritical>

	return xReturn;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3710      	adds	r7, #16
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c2cc:	f001 f972 	bl	800d5b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d102      	bne.n	800c2e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	60fb      	str	r3, [r7, #12]
 800c2e0:	e001      	b.n	800c2e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c2e6:	f001 f995 	bl	800d614 <vPortExitCritical>

	return xReturn;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3710      	adds	r7, #16
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b08e      	sub	sp, #56	; 0x38
 800c2f8:	af04      	add	r7, sp, #16
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10a      	bne.n	800c31e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30c:	f383 8811 	msr	BASEPRI, r3
 800c310:	f3bf 8f6f 	isb	sy
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	623b      	str	r3, [r7, #32]
}
 800c31a:	bf00      	nop
 800c31c:	e7fe      	b.n	800c31c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10a      	bne.n	800c33a <xTaskCreateStatic+0x46>
	__asm volatile
 800c324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c328:	f383 8811 	msr	BASEPRI, r3
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	61fb      	str	r3, [r7, #28]
}
 800c336:	bf00      	nop
 800c338:	e7fe      	b.n	800c338 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c33a:	23b4      	movs	r3, #180	; 0xb4
 800c33c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	2bb4      	cmp	r3, #180	; 0xb4
 800c342:	d00a      	beq.n	800c35a <xTaskCreateStatic+0x66>
	__asm volatile
 800c344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c348:	f383 8811 	msr	BASEPRI, r3
 800c34c:	f3bf 8f6f 	isb	sy
 800c350:	f3bf 8f4f 	dsb	sy
 800c354:	61bb      	str	r3, [r7, #24]
}
 800c356:	bf00      	nop
 800c358:	e7fe      	b.n	800c358 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c35a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d01e      	beq.n	800c3a0 <xTaskCreateStatic+0xac>
 800c362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c364:	2b00      	cmp	r3, #0
 800c366:	d01b      	beq.n	800c3a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c370:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c374:	2202      	movs	r2, #2
 800c376:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c37a:	2300      	movs	r3, #0
 800c37c:	9303      	str	r3, [sp, #12]
 800c37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c380:	9302      	str	r3, [sp, #8]
 800c382:	f107 0314 	add.w	r3, r7, #20
 800c386:	9301      	str	r3, [sp, #4]
 800c388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	68b9      	ldr	r1, [r7, #8]
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f000 f850 	bl	800c438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c39a:	f000 f8eb 	bl	800c574 <prvAddNewTaskToReadyList>
 800c39e:	e001      	b.n	800c3a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c3a4:	697b      	ldr	r3, [r7, #20]
	}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3728      	adds	r7, #40	; 0x28
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b08c      	sub	sp, #48	; 0x30
 800c3b2:	af04      	add	r7, sp, #16
 800c3b4:	60f8      	str	r0, [r7, #12]
 800c3b6:	60b9      	str	r1, [r7, #8]
 800c3b8:	603b      	str	r3, [r7, #0]
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c3be:	88fb      	ldrh	r3, [r7, #6]
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f001 fa18 	bl	800d7f8 <pvPortMalloc>
 800c3c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00e      	beq.n	800c3ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c3d0:	20b4      	movs	r0, #180	; 0xb4
 800c3d2:	f001 fa11 	bl	800d7f8 <pvPortMalloc>
 800c3d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d003      	beq.n	800c3e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	697a      	ldr	r2, [r7, #20]
 800c3e2:	631a      	str	r2, [r3, #48]	; 0x30
 800c3e4:	e005      	b.n	800c3f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c3e6:	6978      	ldr	r0, [r7, #20]
 800c3e8:	f001 fad2 	bl	800d990 <vPortFree>
 800c3ec:	e001      	b.n	800c3f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d017      	beq.n	800c428 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c400:	88fa      	ldrh	r2, [r7, #6]
 800c402:	2300      	movs	r3, #0
 800c404:	9303      	str	r3, [sp, #12]
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	9302      	str	r3, [sp, #8]
 800c40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40c:	9301      	str	r3, [sp, #4]
 800c40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c410:	9300      	str	r3, [sp, #0]
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	68b9      	ldr	r1, [r7, #8]
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f000 f80e 	bl	800c438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c41c:	69f8      	ldr	r0, [r7, #28]
 800c41e:	f000 f8a9 	bl	800c574 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c422:	2301      	movs	r3, #1
 800c424:	61bb      	str	r3, [r7, #24]
 800c426:	e002      	b.n	800c42e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c428:	f04f 33ff 	mov.w	r3, #4294967295
 800c42c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c42e:	69bb      	ldr	r3, [r7, #24]
	}
 800c430:	4618      	mov	r0, r3
 800c432:	3720      	adds	r7, #32
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b088      	sub	sp, #32
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
 800c444:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c450:	3b01      	subs	r3, #1
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	f023 0307 	bic.w	r3, r3, #7
 800c45e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	f003 0307 	and.w	r3, r3, #7
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00a      	beq.n	800c480 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46e:	f383 8811 	msr	BASEPRI, r3
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	617b      	str	r3, [r7, #20]
}
 800c47c:	bf00      	nop
 800c47e:	e7fe      	b.n	800c47e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d01f      	beq.n	800c4c6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c486:	2300      	movs	r3, #0
 800c488:	61fb      	str	r3, [r7, #28]
 800c48a:	e012      	b.n	800c4b2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	4413      	add	r3, r2
 800c492:	7819      	ldrb	r1, [r3, #0]
 800c494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c496:	69fb      	ldr	r3, [r7, #28]
 800c498:	4413      	add	r3, r2
 800c49a:	3334      	adds	r3, #52	; 0x34
 800c49c:	460a      	mov	r2, r1
 800c49e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c4a0:	68ba      	ldr	r2, [r7, #8]
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d006      	beq.n	800c4ba <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	61fb      	str	r3, [r7, #28]
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	2b0f      	cmp	r3, #15
 800c4b6:	d9e9      	bls.n	800c48c <prvInitialiseNewTask+0x54>
 800c4b8:	e000      	b.n	800c4bc <prvInitialiseNewTask+0x84>
			{
				break;
 800c4ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c4c4:	e003      	b.n	800c4ce <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d0:	2b06      	cmp	r3, #6
 800c4d2:	d901      	bls.n	800c4d8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c4d4:	2306      	movs	r3, #6
 800c4d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fe ff2c 	bl	800b34c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f6:	3318      	adds	r3, #24
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7fe ff27 	bl	800b34c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c502:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c506:	f1c3 0207 	rsb	r2, r3, #7
 800c50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c512:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c516:	2200      	movs	r2, #0
 800c518:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51e:	2200      	movs	r2, #0
 800c520:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c526:	334c      	adds	r3, #76	; 0x4c
 800c528:	2260      	movs	r2, #96	; 0x60
 800c52a:	2100      	movs	r1, #0
 800c52c:	4618      	mov	r0, r3
 800c52e:	f00e f9e9 	bl	801a904 <memset>
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	4a0c      	ldr	r2, [pc, #48]	; (800c568 <prvInitialiseNewTask+0x130>)
 800c536:	651a      	str	r2, [r3, #80]	; 0x50
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53a:	4a0c      	ldr	r2, [pc, #48]	; (800c56c <prvInitialiseNewTask+0x134>)
 800c53c:	655a      	str	r2, [r3, #84]	; 0x54
 800c53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c540:	4a0b      	ldr	r2, [pc, #44]	; (800c570 <prvInitialiseNewTask+0x138>)
 800c542:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	68f9      	ldr	r1, [r7, #12]
 800c548:	69b8      	ldr	r0, [r7, #24]
 800c54a:	f000 ff07 	bl	800d35c <pxPortInitialiseStack>
 800c54e:	4602      	mov	r2, r0
 800c550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c552:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c556:	2b00      	cmp	r3, #0
 800c558:	d002      	beq.n	800c560 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c55e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c560:	bf00      	nop
 800c562:	3720      	adds	r7, #32
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	0801f10c 	.word	0x0801f10c
 800c56c:	0801f12c 	.word	0x0801f12c
 800c570:	0801f0ec 	.word	0x0801f0ec

0800c574 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c57c:	f001 f81a 	bl	800d5b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c580:	4b2a      	ldr	r3, [pc, #168]	; (800c62c <prvAddNewTaskToReadyList+0xb8>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	3301      	adds	r3, #1
 800c586:	4a29      	ldr	r2, [pc, #164]	; (800c62c <prvAddNewTaskToReadyList+0xb8>)
 800c588:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c58a:	4b29      	ldr	r3, [pc, #164]	; (800c630 <prvAddNewTaskToReadyList+0xbc>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d109      	bne.n	800c5a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c592:	4a27      	ldr	r2, [pc, #156]	; (800c630 <prvAddNewTaskToReadyList+0xbc>)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c598:	4b24      	ldr	r3, [pc, #144]	; (800c62c <prvAddNewTaskToReadyList+0xb8>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d110      	bne.n	800c5c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c5a0:	f000 fbf8 	bl	800cd94 <prvInitialiseTaskLists>
 800c5a4:	e00d      	b.n	800c5c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c5a6:	4b23      	ldr	r3, [pc, #140]	; (800c634 <prvAddNewTaskToReadyList+0xc0>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d109      	bne.n	800c5c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c5ae:	4b20      	ldr	r3, [pc, #128]	; (800c630 <prvAddNewTaskToReadyList+0xbc>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d802      	bhi.n	800c5c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c5bc:	4a1c      	ldr	r2, [pc, #112]	; (800c630 <prvAddNewTaskToReadyList+0xbc>)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c5c2:	4b1d      	ldr	r3, [pc, #116]	; (800c638 <prvAddNewTaskToReadyList+0xc4>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	4a1b      	ldr	r2, [pc, #108]	; (800c638 <prvAddNewTaskToReadyList+0xc4>)
 800c5ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	409a      	lsls	r2, r3
 800c5d4:	4b19      	ldr	r3, [pc, #100]	; (800c63c <prvAddNewTaskToReadyList+0xc8>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	4a18      	ldr	r2, [pc, #96]	; (800c63c <prvAddNewTaskToReadyList+0xc8>)
 800c5dc:	6013      	str	r3, [r2, #0]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	4413      	add	r3, r2
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	4a15      	ldr	r2, [pc, #84]	; (800c640 <prvAddNewTaskToReadyList+0xcc>)
 800c5ec:	441a      	add	r2, r3
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	3304      	adds	r3, #4
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	4610      	mov	r0, r2
 800c5f6:	f7fe feb6 	bl	800b366 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c5fa:	f001 f80b 	bl	800d614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c5fe:	4b0d      	ldr	r3, [pc, #52]	; (800c634 <prvAddNewTaskToReadyList+0xc0>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00e      	beq.n	800c624 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c606:	4b0a      	ldr	r3, [pc, #40]	; (800c630 <prvAddNewTaskToReadyList+0xbc>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c610:	429a      	cmp	r2, r3
 800c612:	d207      	bcs.n	800c624 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c614:	4b0b      	ldr	r3, [pc, #44]	; (800c644 <prvAddNewTaskToReadyList+0xd0>)
 800c616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c61a:	601a      	str	r2, [r3, #0]
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c624:	bf00      	nop
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	20000490 	.word	0x20000490
 800c630:	20000390 	.word	0x20000390
 800c634:	2000049c 	.word	0x2000049c
 800c638:	200004ac 	.word	0x200004ac
 800c63c:	20000498 	.word	0x20000498
 800c640:	20000394 	.word	0x20000394
 800c644:	e000ed04 	.word	0xe000ed04

0800c648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c650:	2300      	movs	r3, #0
 800c652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d017      	beq.n	800c68a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c65a:	4b13      	ldr	r3, [pc, #76]	; (800c6a8 <vTaskDelay+0x60>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00a      	beq.n	800c678 <vTaskDelay+0x30>
	__asm volatile
 800c662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c666:	f383 8811 	msr	BASEPRI, r3
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	60bb      	str	r3, [r7, #8]
}
 800c674:	bf00      	nop
 800c676:	e7fe      	b.n	800c676 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c678:	f000 f884 	bl	800c784 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c67c:	2100      	movs	r1, #0
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 fe06 	bl	800d290 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c684:	f000 f88c 	bl	800c7a0 <xTaskResumeAll>
 800c688:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d107      	bne.n	800c6a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c690:	4b06      	ldr	r3, [pc, #24]	; (800c6ac <vTaskDelay+0x64>)
 800c692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c696:	601a      	str	r2, [r3, #0]
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6a0:	bf00      	nop
 800c6a2:	3710      	adds	r7, #16
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	200004b8 	.word	0x200004b8
 800c6ac:	e000ed04 	.word	0xe000ed04

0800c6b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b08a      	sub	sp, #40	; 0x28
 800c6b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c6be:	463a      	mov	r2, r7
 800c6c0:	1d39      	adds	r1, r7, #4
 800c6c2:	f107 0308 	add.w	r3, r7, #8
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7f3 ff98 	bl	80005fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c6cc:	6839      	ldr	r1, [r7, #0]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	68ba      	ldr	r2, [r7, #8]
 800c6d2:	9202      	str	r2, [sp, #8]
 800c6d4:	9301      	str	r3, [sp, #4]
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	2300      	movs	r3, #0
 800c6dc:	460a      	mov	r2, r1
 800c6de:	4921      	ldr	r1, [pc, #132]	; (800c764 <vTaskStartScheduler+0xb4>)
 800c6e0:	4821      	ldr	r0, [pc, #132]	; (800c768 <vTaskStartScheduler+0xb8>)
 800c6e2:	f7ff fe07 	bl	800c2f4 <xTaskCreateStatic>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	4a20      	ldr	r2, [pc, #128]	; (800c76c <vTaskStartScheduler+0xbc>)
 800c6ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c6ec:	4b1f      	ldr	r3, [pc, #124]	; (800c76c <vTaskStartScheduler+0xbc>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d002      	beq.n	800c6fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	617b      	str	r3, [r7, #20]
 800c6f8:	e001      	b.n	800c6fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	2b01      	cmp	r3, #1
 800c702:	d11b      	bne.n	800c73c <vTaskStartScheduler+0x8c>
	__asm volatile
 800c704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c708:	f383 8811 	msr	BASEPRI, r3
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	f3bf 8f4f 	dsb	sy
 800c714:	613b      	str	r3, [r7, #16]
}
 800c716:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c718:	4b15      	ldr	r3, [pc, #84]	; (800c770 <vTaskStartScheduler+0xc0>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	334c      	adds	r3, #76	; 0x4c
 800c71e:	4a15      	ldr	r2, [pc, #84]	; (800c774 <vTaskStartScheduler+0xc4>)
 800c720:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c722:	4b15      	ldr	r3, [pc, #84]	; (800c778 <vTaskStartScheduler+0xc8>)
 800c724:	f04f 32ff 	mov.w	r2, #4294967295
 800c728:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c72a:	4b14      	ldr	r3, [pc, #80]	; (800c77c <vTaskStartScheduler+0xcc>)
 800c72c:	2201      	movs	r2, #1
 800c72e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c730:	4b13      	ldr	r3, [pc, #76]	; (800c780 <vTaskStartScheduler+0xd0>)
 800c732:	2200      	movs	r2, #0
 800c734:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c736:	f000 fe9b 	bl	800d470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c73a:	e00e      	b.n	800c75a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c742:	d10a      	bne.n	800c75a <vTaskStartScheduler+0xaa>
	__asm volatile
 800c744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	60fb      	str	r3, [r7, #12]
}
 800c756:	bf00      	nop
 800c758:	e7fe      	b.n	800c758 <vTaskStartScheduler+0xa8>
}
 800c75a:	bf00      	nop
 800c75c:	3718      	adds	r7, #24
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	0801c150 	.word	0x0801c150
 800c768:	0800cd65 	.word	0x0800cd65
 800c76c:	200004b4 	.word	0x200004b4
 800c770:	20000390 	.word	0x20000390
 800c774:	20000040 	.word	0x20000040
 800c778:	200004b0 	.word	0x200004b0
 800c77c:	2000049c 	.word	0x2000049c
 800c780:	20000494 	.word	0x20000494

0800c784 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c784:	b480      	push	{r7}
 800c786:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c788:	4b04      	ldr	r3, [pc, #16]	; (800c79c <vTaskSuspendAll+0x18>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	3301      	adds	r3, #1
 800c78e:	4a03      	ldr	r2, [pc, #12]	; (800c79c <vTaskSuspendAll+0x18>)
 800c790:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c792:	bf00      	nop
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	200004b8 	.word	0x200004b8

0800c7a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c7ae:	4b41      	ldr	r3, [pc, #260]	; (800c8b4 <xTaskResumeAll+0x114>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10a      	bne.n	800c7cc <xTaskResumeAll+0x2c>
	__asm volatile
 800c7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ba:	f383 8811 	msr	BASEPRI, r3
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	603b      	str	r3, [r7, #0]
}
 800c7c8:	bf00      	nop
 800c7ca:	e7fe      	b.n	800c7ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c7cc:	f000 fef2 	bl	800d5b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c7d0:	4b38      	ldr	r3, [pc, #224]	; (800c8b4 <xTaskResumeAll+0x114>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	4a37      	ldr	r2, [pc, #220]	; (800c8b4 <xTaskResumeAll+0x114>)
 800c7d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7da:	4b36      	ldr	r3, [pc, #216]	; (800c8b4 <xTaskResumeAll+0x114>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d161      	bne.n	800c8a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c7e2:	4b35      	ldr	r3, [pc, #212]	; (800c8b8 <xTaskResumeAll+0x118>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d05d      	beq.n	800c8a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7ea:	e02e      	b.n	800c84a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7ec:	4b33      	ldr	r3, [pc, #204]	; (800c8bc <xTaskResumeAll+0x11c>)
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	3318      	adds	r3, #24
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7fe fe11 	bl	800b420 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	3304      	adds	r3, #4
 800c802:	4618      	mov	r0, r3
 800c804:	f7fe fe0c 	bl	800b420 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80c:	2201      	movs	r2, #1
 800c80e:	409a      	lsls	r2, r3
 800c810:	4b2b      	ldr	r3, [pc, #172]	; (800c8c0 <xTaskResumeAll+0x120>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4313      	orrs	r3, r2
 800c816:	4a2a      	ldr	r2, [pc, #168]	; (800c8c0 <xTaskResumeAll+0x120>)
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c81e:	4613      	mov	r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	4413      	add	r3, r2
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	4a27      	ldr	r2, [pc, #156]	; (800c8c4 <xTaskResumeAll+0x124>)
 800c828:	441a      	add	r2, r3
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	3304      	adds	r3, #4
 800c82e:	4619      	mov	r1, r3
 800c830:	4610      	mov	r0, r2
 800c832:	f7fe fd98 	bl	800b366 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c83a:	4b23      	ldr	r3, [pc, #140]	; (800c8c8 <xTaskResumeAll+0x128>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c840:	429a      	cmp	r2, r3
 800c842:	d302      	bcc.n	800c84a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c844:	4b21      	ldr	r3, [pc, #132]	; (800c8cc <xTaskResumeAll+0x12c>)
 800c846:	2201      	movs	r2, #1
 800c848:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c84a:	4b1c      	ldr	r3, [pc, #112]	; (800c8bc <xTaskResumeAll+0x11c>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d1cc      	bne.n	800c7ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d001      	beq.n	800c85c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c858:	f000 fb3e 	bl	800ced8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c85c:	4b1c      	ldr	r3, [pc, #112]	; (800c8d0 <xTaskResumeAll+0x130>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d010      	beq.n	800c88a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c868:	f000 f858 	bl	800c91c <xTaskIncrementTick>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d002      	beq.n	800c878 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c872:	4b16      	ldr	r3, [pc, #88]	; (800c8cc <xTaskResumeAll+0x12c>)
 800c874:	2201      	movs	r2, #1
 800c876:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	3b01      	subs	r3, #1
 800c87c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d1f1      	bne.n	800c868 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c884:	4b12      	ldr	r3, [pc, #72]	; (800c8d0 <xTaskResumeAll+0x130>)
 800c886:	2200      	movs	r2, #0
 800c888:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c88a:	4b10      	ldr	r3, [pc, #64]	; (800c8cc <xTaskResumeAll+0x12c>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d009      	beq.n	800c8a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c892:	2301      	movs	r3, #1
 800c894:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c896:	4b0f      	ldr	r3, [pc, #60]	; (800c8d4 <xTaskResumeAll+0x134>)
 800c898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c89c:	601a      	str	r2, [r3, #0]
 800c89e:	f3bf 8f4f 	dsb	sy
 800c8a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8a6:	f000 feb5 	bl	800d614 <vPortExitCritical>

	return xAlreadyYielded;
 800c8aa:	68bb      	ldr	r3, [r7, #8]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3710      	adds	r7, #16
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	200004b8 	.word	0x200004b8
 800c8b8:	20000490 	.word	0x20000490
 800c8bc:	20000450 	.word	0x20000450
 800c8c0:	20000498 	.word	0x20000498
 800c8c4:	20000394 	.word	0x20000394
 800c8c8:	20000390 	.word	0x20000390
 800c8cc:	200004a4 	.word	0x200004a4
 800c8d0:	200004a0 	.word	0x200004a0
 800c8d4:	e000ed04 	.word	0xe000ed04

0800c8d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c8de:	4b05      	ldr	r3, [pc, #20]	; (800c8f4 <xTaskGetTickCount+0x1c>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c8e4:	687b      	ldr	r3, [r7, #4]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	370c      	adds	r7, #12
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	20000494 	.word	0x20000494

0800c8f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8fe:	f000 ff3b 	bl	800d778 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c902:	2300      	movs	r3, #0
 800c904:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c906:	4b04      	ldr	r3, [pc, #16]	; (800c918 <xTaskGetTickCountFromISR+0x20>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c90c:	683b      	ldr	r3, [r7, #0]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	20000494 	.word	0x20000494

0800c91c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b086      	sub	sp, #24
 800c920:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c922:	2300      	movs	r3, #0
 800c924:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c926:	4b4e      	ldr	r3, [pc, #312]	; (800ca60 <xTaskIncrementTick+0x144>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f040 808e 	bne.w	800ca4c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c930:	4b4c      	ldr	r3, [pc, #304]	; (800ca64 <xTaskIncrementTick+0x148>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	3301      	adds	r3, #1
 800c936:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c938:	4a4a      	ldr	r2, [pc, #296]	; (800ca64 <xTaskIncrementTick+0x148>)
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d120      	bne.n	800c986 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c944:	4b48      	ldr	r3, [pc, #288]	; (800ca68 <xTaskIncrementTick+0x14c>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00a      	beq.n	800c964 <xTaskIncrementTick+0x48>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	603b      	str	r3, [r7, #0]
}
 800c960:	bf00      	nop
 800c962:	e7fe      	b.n	800c962 <xTaskIncrementTick+0x46>
 800c964:	4b40      	ldr	r3, [pc, #256]	; (800ca68 <xTaskIncrementTick+0x14c>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	60fb      	str	r3, [r7, #12]
 800c96a:	4b40      	ldr	r3, [pc, #256]	; (800ca6c <xTaskIncrementTick+0x150>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a3e      	ldr	r2, [pc, #248]	; (800ca68 <xTaskIncrementTick+0x14c>)
 800c970:	6013      	str	r3, [r2, #0]
 800c972:	4a3e      	ldr	r2, [pc, #248]	; (800ca6c <xTaskIncrementTick+0x150>)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6013      	str	r3, [r2, #0]
 800c978:	4b3d      	ldr	r3, [pc, #244]	; (800ca70 <xTaskIncrementTick+0x154>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	3301      	adds	r3, #1
 800c97e:	4a3c      	ldr	r2, [pc, #240]	; (800ca70 <xTaskIncrementTick+0x154>)
 800c980:	6013      	str	r3, [r2, #0]
 800c982:	f000 faa9 	bl	800ced8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c986:	4b3b      	ldr	r3, [pc, #236]	; (800ca74 <xTaskIncrementTick+0x158>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	693a      	ldr	r2, [r7, #16]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d348      	bcc.n	800ca22 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c990:	4b35      	ldr	r3, [pc, #212]	; (800ca68 <xTaskIncrementTick+0x14c>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d104      	bne.n	800c9a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c99a:	4b36      	ldr	r3, [pc, #216]	; (800ca74 <xTaskIncrementTick+0x158>)
 800c99c:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a0:	601a      	str	r2, [r3, #0]
					break;
 800c9a2:	e03e      	b.n	800ca22 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9a4:	4b30      	ldr	r3, [pc, #192]	; (800ca68 <xTaskIncrementTick+0x14c>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c9b4:	693a      	ldr	r2, [r7, #16]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d203      	bcs.n	800c9c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c9bc:	4a2d      	ldr	r2, [pc, #180]	; (800ca74 <xTaskIncrementTick+0x158>)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c9c2:	e02e      	b.n	800ca22 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fe fd29 	bl	800b420 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d004      	beq.n	800c9e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	3318      	adds	r3, #24
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fe fd20 	bl	800b420 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	409a      	lsls	r2, r3
 800c9e8:	4b23      	ldr	r3, [pc, #140]	; (800ca78 <xTaskIncrementTick+0x15c>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	4a22      	ldr	r2, [pc, #136]	; (800ca78 <xTaskIncrementTick+0x15c>)
 800c9f0:	6013      	str	r3, [r2, #0]
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	4413      	add	r3, r2
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	4a1f      	ldr	r2, [pc, #124]	; (800ca7c <xTaskIncrementTick+0x160>)
 800ca00:	441a      	add	r2, r3
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	3304      	adds	r3, #4
 800ca06:	4619      	mov	r1, r3
 800ca08:	4610      	mov	r0, r2
 800ca0a:	f7fe fcac 	bl	800b366 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca12:	4b1b      	ldr	r3, [pc, #108]	; (800ca80 <xTaskIncrementTick+0x164>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d3b9      	bcc.n	800c990 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca20:	e7b6      	b.n	800c990 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca22:	4b17      	ldr	r3, [pc, #92]	; (800ca80 <xTaskIncrementTick+0x164>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca28:	4914      	ldr	r1, [pc, #80]	; (800ca7c <xTaskIncrementTick+0x160>)
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	4413      	add	r3, r2
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	440b      	add	r3, r1
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d901      	bls.n	800ca3e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ca3e:	4b11      	ldr	r3, [pc, #68]	; (800ca84 <xTaskIncrementTick+0x168>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d007      	beq.n	800ca56 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ca46:	2301      	movs	r3, #1
 800ca48:	617b      	str	r3, [r7, #20]
 800ca4a:	e004      	b.n	800ca56 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ca4c:	4b0e      	ldr	r3, [pc, #56]	; (800ca88 <xTaskIncrementTick+0x16c>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	3301      	adds	r3, #1
 800ca52:	4a0d      	ldr	r2, [pc, #52]	; (800ca88 <xTaskIncrementTick+0x16c>)
 800ca54:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ca56:	697b      	ldr	r3, [r7, #20]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3718      	adds	r7, #24
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	200004b8 	.word	0x200004b8
 800ca64:	20000494 	.word	0x20000494
 800ca68:	20000448 	.word	0x20000448
 800ca6c:	2000044c 	.word	0x2000044c
 800ca70:	200004a8 	.word	0x200004a8
 800ca74:	200004b0 	.word	0x200004b0
 800ca78:	20000498 	.word	0x20000498
 800ca7c:	20000394 	.word	0x20000394
 800ca80:	20000390 	.word	0x20000390
 800ca84:	200004a4 	.word	0x200004a4
 800ca88:	200004a0 	.word	0x200004a0

0800ca8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b087      	sub	sp, #28
 800ca90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca92:	4b29      	ldr	r3, [pc, #164]	; (800cb38 <vTaskSwitchContext+0xac>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d003      	beq.n	800caa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca9a:	4b28      	ldr	r3, [pc, #160]	; (800cb3c <vTaskSwitchContext+0xb0>)
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800caa0:	e044      	b.n	800cb2c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800caa2:	4b26      	ldr	r3, [pc, #152]	; (800cb3c <vTaskSwitchContext+0xb0>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caa8:	4b25      	ldr	r3, [pc, #148]	; (800cb40 <vTaskSwitchContext+0xb4>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	fab3 f383 	clz	r3, r3
 800cab4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cab6:	7afb      	ldrb	r3, [r7, #11]
 800cab8:	f1c3 031f 	rsb	r3, r3, #31
 800cabc:	617b      	str	r3, [r7, #20]
 800cabe:	4921      	ldr	r1, [pc, #132]	; (800cb44 <vTaskSwitchContext+0xb8>)
 800cac0:	697a      	ldr	r2, [r7, #20]
 800cac2:	4613      	mov	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	4413      	add	r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	440b      	add	r3, r1
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d10a      	bne.n	800cae8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	607b      	str	r3, [r7, #4]
}
 800cae4:	bf00      	nop
 800cae6:	e7fe      	b.n	800cae6 <vTaskSwitchContext+0x5a>
 800cae8:	697a      	ldr	r2, [r7, #20]
 800caea:	4613      	mov	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	4a14      	ldr	r2, [pc, #80]	; (800cb44 <vTaskSwitchContext+0xb8>)
 800caf4:	4413      	add	r3, r2
 800caf6:	613b      	str	r3, [r7, #16]
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	685a      	ldr	r2, [r3, #4]
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	605a      	str	r2, [r3, #4]
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	685a      	ldr	r2, [r3, #4]
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	3308      	adds	r3, #8
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d104      	bne.n	800cb18 <vTaskSwitchContext+0x8c>
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	685a      	ldr	r2, [r3, #4]
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	605a      	str	r2, [r3, #4]
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	4a0a      	ldr	r2, [pc, #40]	; (800cb48 <vTaskSwitchContext+0xbc>)
 800cb20:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb22:	4b09      	ldr	r3, [pc, #36]	; (800cb48 <vTaskSwitchContext+0xbc>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	334c      	adds	r3, #76	; 0x4c
 800cb28:	4a08      	ldr	r2, [pc, #32]	; (800cb4c <vTaskSwitchContext+0xc0>)
 800cb2a:	6013      	str	r3, [r2, #0]
}
 800cb2c:	bf00      	nop
 800cb2e:	371c      	adds	r7, #28
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr
 800cb38:	200004b8 	.word	0x200004b8
 800cb3c:	200004a4 	.word	0x200004a4
 800cb40:	20000498 	.word	0x20000498
 800cb44:	20000394 	.word	0x20000394
 800cb48:	20000390 	.word	0x20000390
 800cb4c:	20000040 	.word	0x20000040

0800cb50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10a      	bne.n	800cb76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb64:	f383 8811 	msr	BASEPRI, r3
 800cb68:	f3bf 8f6f 	isb	sy
 800cb6c:	f3bf 8f4f 	dsb	sy
 800cb70:	60fb      	str	r3, [r7, #12]
}
 800cb72:	bf00      	nop
 800cb74:	e7fe      	b.n	800cb74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb76:	4b07      	ldr	r3, [pc, #28]	; (800cb94 <vTaskPlaceOnEventList+0x44>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	3318      	adds	r3, #24
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f7fe fc15 	bl	800b3ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb84:	2101      	movs	r1, #1
 800cb86:	6838      	ldr	r0, [r7, #0]
 800cb88:	f000 fb82 	bl	800d290 <prvAddCurrentTaskToDelayedList>
}
 800cb8c:	bf00      	nop
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	20000390 	.word	0x20000390

0800cb98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b086      	sub	sp, #24
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d10a      	bne.n	800cbc4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	60fb      	str	r3, [r7, #12]
}
 800cbc0:	bf00      	nop
 800cbc2:	e7fe      	b.n	800cbc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	3318      	adds	r3, #24
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fe fc29 	bl	800b420 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbce:	4b1d      	ldr	r3, [pc, #116]	; (800cc44 <xTaskRemoveFromEventList+0xac>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d11c      	bne.n	800cc10 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	3304      	adds	r3, #4
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fe fc20 	bl	800b420 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	409a      	lsls	r2, r3
 800cbe8:	4b17      	ldr	r3, [pc, #92]	; (800cc48 <xTaskRemoveFromEventList+0xb0>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4313      	orrs	r3, r2
 800cbee:	4a16      	ldr	r2, [pc, #88]	; (800cc48 <xTaskRemoveFromEventList+0xb0>)
 800cbf0:	6013      	str	r3, [r2, #0]
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	4413      	add	r3, r2
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	4a13      	ldr	r2, [pc, #76]	; (800cc4c <xTaskRemoveFromEventList+0xb4>)
 800cc00:	441a      	add	r2, r3
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	3304      	adds	r3, #4
 800cc06:	4619      	mov	r1, r3
 800cc08:	4610      	mov	r0, r2
 800cc0a:	f7fe fbac 	bl	800b366 <vListInsertEnd>
 800cc0e:	e005      	b.n	800cc1c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	3318      	adds	r3, #24
 800cc14:	4619      	mov	r1, r3
 800cc16:	480e      	ldr	r0, [pc, #56]	; (800cc50 <xTaskRemoveFromEventList+0xb8>)
 800cc18:	f7fe fba5 	bl	800b366 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc20:	4b0c      	ldr	r3, [pc, #48]	; (800cc54 <xTaskRemoveFromEventList+0xbc>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d905      	bls.n	800cc36 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cc2e:	4b0a      	ldr	r3, [pc, #40]	; (800cc58 <xTaskRemoveFromEventList+0xc0>)
 800cc30:	2201      	movs	r2, #1
 800cc32:	601a      	str	r2, [r3, #0]
 800cc34:	e001      	b.n	800cc3a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cc36:	2300      	movs	r3, #0
 800cc38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cc3a:	697b      	ldr	r3, [r7, #20]
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3718      	adds	r7, #24
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	200004b8 	.word	0x200004b8
 800cc48:	20000498 	.word	0x20000498
 800cc4c:	20000394 	.word	0x20000394
 800cc50:	20000450 	.word	0x20000450
 800cc54:	20000390 	.word	0x20000390
 800cc58:	200004a4 	.word	0x200004a4

0800cc5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b083      	sub	sp, #12
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc64:	4b06      	ldr	r3, [pc, #24]	; (800cc80 <vTaskInternalSetTimeOutState+0x24>)
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc6c:	4b05      	ldr	r3, [pc, #20]	; (800cc84 <vTaskInternalSetTimeOutState+0x28>)
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	605a      	str	r2, [r3, #4]
}
 800cc74:	bf00      	nop
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr
 800cc80:	200004a8 	.word	0x200004a8
 800cc84:	20000494 	.word	0x20000494

0800cc88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b088      	sub	sp, #32
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d10a      	bne.n	800ccae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	613b      	str	r3, [r7, #16]
}
 800ccaa:	bf00      	nop
 800ccac:	e7fe      	b.n	800ccac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d10a      	bne.n	800ccca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ccb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb8:	f383 8811 	msr	BASEPRI, r3
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	60fb      	str	r3, [r7, #12]
}
 800ccc6:	bf00      	nop
 800ccc8:	e7fe      	b.n	800ccc8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ccca:	f000 fc73 	bl	800d5b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ccce:	4b1d      	ldr	r3, [pc, #116]	; (800cd44 <xTaskCheckForTimeOut+0xbc>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	69ba      	ldr	r2, [r7, #24]
 800ccda:	1ad3      	subs	r3, r2, r3
 800ccdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce6:	d102      	bne.n	800ccee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cce8:	2300      	movs	r3, #0
 800ccea:	61fb      	str	r3, [r7, #28]
 800ccec:	e023      	b.n	800cd36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	4b15      	ldr	r3, [pc, #84]	; (800cd48 <xTaskCheckForTimeOut+0xc0>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d007      	beq.n	800cd0a <xTaskCheckForTimeOut+0x82>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	69ba      	ldr	r2, [r7, #24]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d302      	bcc.n	800cd0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cd04:	2301      	movs	r3, #1
 800cd06:	61fb      	str	r3, [r7, #28]
 800cd08:	e015      	b.n	800cd36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	697a      	ldr	r2, [r7, #20]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d20b      	bcs.n	800cd2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	1ad2      	subs	r2, r2, r3
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f7ff ff9b 	bl	800cc5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cd26:	2300      	movs	r3, #0
 800cd28:	61fb      	str	r3, [r7, #28]
 800cd2a:	e004      	b.n	800cd36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd32:	2301      	movs	r3, #1
 800cd34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cd36:	f000 fc6d 	bl	800d614 <vPortExitCritical>

	return xReturn;
 800cd3a:	69fb      	ldr	r3, [r7, #28]
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3720      	adds	r7, #32
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	20000494 	.word	0x20000494
 800cd48:	200004a8 	.word	0x200004a8

0800cd4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd50:	4b03      	ldr	r3, [pc, #12]	; (800cd60 <vTaskMissedYield+0x14>)
 800cd52:	2201      	movs	r2, #1
 800cd54:	601a      	str	r2, [r3, #0]
}
 800cd56:	bf00      	nop
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr
 800cd60:	200004a4 	.word	0x200004a4

0800cd64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd6c:	f000 f852 	bl	800ce14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd70:	4b06      	ldr	r3, [pc, #24]	; (800cd8c <prvIdleTask+0x28>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d9f9      	bls.n	800cd6c <prvIdleTask+0x8>
			{
				taskYIELD();
 800cd78:	4b05      	ldr	r3, [pc, #20]	; (800cd90 <prvIdleTask+0x2c>)
 800cd7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd7e:	601a      	str	r2, [r3, #0]
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cd88:	e7f0      	b.n	800cd6c <prvIdleTask+0x8>
 800cd8a:	bf00      	nop
 800cd8c:	20000394 	.word	0x20000394
 800cd90:	e000ed04 	.word	0xe000ed04

0800cd94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	607b      	str	r3, [r7, #4]
 800cd9e:	e00c      	b.n	800cdba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	4613      	mov	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	4413      	add	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	4a12      	ldr	r2, [pc, #72]	; (800cdf4 <prvInitialiseTaskLists+0x60>)
 800cdac:	4413      	add	r3, r2
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7fe faac 	bl	800b30c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	607b      	str	r3, [r7, #4]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2b06      	cmp	r3, #6
 800cdbe:	d9ef      	bls.n	800cda0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cdc0:	480d      	ldr	r0, [pc, #52]	; (800cdf8 <prvInitialiseTaskLists+0x64>)
 800cdc2:	f7fe faa3 	bl	800b30c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cdc6:	480d      	ldr	r0, [pc, #52]	; (800cdfc <prvInitialiseTaskLists+0x68>)
 800cdc8:	f7fe faa0 	bl	800b30c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cdcc:	480c      	ldr	r0, [pc, #48]	; (800ce00 <prvInitialiseTaskLists+0x6c>)
 800cdce:	f7fe fa9d 	bl	800b30c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cdd2:	480c      	ldr	r0, [pc, #48]	; (800ce04 <prvInitialiseTaskLists+0x70>)
 800cdd4:	f7fe fa9a 	bl	800b30c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cdd8:	480b      	ldr	r0, [pc, #44]	; (800ce08 <prvInitialiseTaskLists+0x74>)
 800cdda:	f7fe fa97 	bl	800b30c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cdde:	4b0b      	ldr	r3, [pc, #44]	; (800ce0c <prvInitialiseTaskLists+0x78>)
 800cde0:	4a05      	ldr	r2, [pc, #20]	; (800cdf8 <prvInitialiseTaskLists+0x64>)
 800cde2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cde4:	4b0a      	ldr	r3, [pc, #40]	; (800ce10 <prvInitialiseTaskLists+0x7c>)
 800cde6:	4a05      	ldr	r2, [pc, #20]	; (800cdfc <prvInitialiseTaskLists+0x68>)
 800cde8:	601a      	str	r2, [r3, #0]
}
 800cdea:	bf00      	nop
 800cdec:	3708      	adds	r7, #8
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	20000394 	.word	0x20000394
 800cdf8:	20000420 	.word	0x20000420
 800cdfc:	20000434 	.word	0x20000434
 800ce00:	20000450 	.word	0x20000450
 800ce04:	20000464 	.word	0x20000464
 800ce08:	2000047c 	.word	0x2000047c
 800ce0c:	20000448 	.word	0x20000448
 800ce10:	2000044c 	.word	0x2000044c

0800ce14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce1a:	e019      	b.n	800ce50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce1c:	f000 fbca 	bl	800d5b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce20:	4b10      	ldr	r3, [pc, #64]	; (800ce64 <prvCheckTasksWaitingTermination+0x50>)
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	3304      	adds	r3, #4
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7fe faf7 	bl	800b420 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce32:	4b0d      	ldr	r3, [pc, #52]	; (800ce68 <prvCheckTasksWaitingTermination+0x54>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	3b01      	subs	r3, #1
 800ce38:	4a0b      	ldr	r2, [pc, #44]	; (800ce68 <prvCheckTasksWaitingTermination+0x54>)
 800ce3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ce3c:	4b0b      	ldr	r3, [pc, #44]	; (800ce6c <prvCheckTasksWaitingTermination+0x58>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	3b01      	subs	r3, #1
 800ce42:	4a0a      	ldr	r2, [pc, #40]	; (800ce6c <prvCheckTasksWaitingTermination+0x58>)
 800ce44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ce46:	f000 fbe5 	bl	800d614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 f810 	bl	800ce70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce50:	4b06      	ldr	r3, [pc, #24]	; (800ce6c <prvCheckTasksWaitingTermination+0x58>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d1e1      	bne.n	800ce1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce58:	bf00      	nop
 800ce5a:	bf00      	nop
 800ce5c:	3708      	adds	r7, #8
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	20000464 	.word	0x20000464
 800ce68:	20000490 	.word	0x20000490
 800ce6c:	20000478 	.word	0x20000478

0800ce70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	334c      	adds	r3, #76	; 0x4c
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f00d fee5 	bl	801ac4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d108      	bne.n	800ce9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce90:	4618      	mov	r0, r3
 800ce92:	f000 fd7d 	bl	800d990 <vPortFree>
				vPortFree( pxTCB );
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fd7a 	bl	800d990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ce9c:	e018      	b.n	800ced0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d103      	bne.n	800ceb0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 fd71 	bl	800d990 <vPortFree>
	}
 800ceae:	e00f      	b.n	800ced0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ceb6:	2b02      	cmp	r3, #2
 800ceb8:	d00a      	beq.n	800ced0 <prvDeleteTCB+0x60>
	__asm volatile
 800ceba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	60fb      	str	r3, [r7, #12]
}
 800cecc:	bf00      	nop
 800cece:	e7fe      	b.n	800cece <prvDeleteTCB+0x5e>
	}
 800ced0:	bf00      	nop
 800ced2:	3710      	adds	r7, #16
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cede:	4b0c      	ldr	r3, [pc, #48]	; (800cf10 <prvResetNextTaskUnblockTime+0x38>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d104      	bne.n	800cef2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cee8:	4b0a      	ldr	r3, [pc, #40]	; (800cf14 <prvResetNextTaskUnblockTime+0x3c>)
 800ceea:	f04f 32ff 	mov.w	r2, #4294967295
 800ceee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cef0:	e008      	b.n	800cf04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cef2:	4b07      	ldr	r3, [pc, #28]	; (800cf10 <prvResetNextTaskUnblockTime+0x38>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	4a04      	ldr	r2, [pc, #16]	; (800cf14 <prvResetNextTaskUnblockTime+0x3c>)
 800cf02:	6013      	str	r3, [r2, #0]
}
 800cf04:	bf00      	nop
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr
 800cf10:	20000448 	.word	0x20000448
 800cf14:	200004b0 	.word	0x200004b0

0800cf18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf1e:	4b0b      	ldr	r3, [pc, #44]	; (800cf4c <xTaskGetSchedulerState+0x34>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d102      	bne.n	800cf2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cf26:	2301      	movs	r3, #1
 800cf28:	607b      	str	r3, [r7, #4]
 800cf2a:	e008      	b.n	800cf3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf2c:	4b08      	ldr	r3, [pc, #32]	; (800cf50 <xTaskGetSchedulerState+0x38>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d102      	bne.n	800cf3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cf34:	2302      	movs	r3, #2
 800cf36:	607b      	str	r3, [r7, #4]
 800cf38:	e001      	b.n	800cf3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cf3e:	687b      	ldr	r3, [r7, #4]
	}
 800cf40:	4618      	mov	r0, r3
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr
 800cf4c:	2000049c 	.word	0x2000049c
 800cf50:	200004b8 	.word	0x200004b8

0800cf54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cf60:	2300      	movs	r3, #0
 800cf62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d05e      	beq.n	800d028 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf6e:	4b31      	ldr	r3, [pc, #196]	; (800d034 <xTaskPriorityInherit+0xe0>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d24e      	bcs.n	800d016 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	db06      	blt.n	800cf8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf80:	4b2c      	ldr	r3, [pc, #176]	; (800d034 <xTaskPriorityInherit+0xe0>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf86:	f1c3 0207 	rsb	r2, r3, #7
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	6959      	ldr	r1, [r3, #20]
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf96:	4613      	mov	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	4413      	add	r3, r2
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	4a26      	ldr	r2, [pc, #152]	; (800d038 <xTaskPriorityInherit+0xe4>)
 800cfa0:	4413      	add	r3, r2
 800cfa2:	4299      	cmp	r1, r3
 800cfa4:	d12f      	bne.n	800d006 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	3304      	adds	r3, #4
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fe fa38 	bl	800b420 <uxListRemove>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d10a      	bne.n	800cfcc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfba:	2201      	movs	r2, #1
 800cfbc:	fa02 f303 	lsl.w	r3, r2, r3
 800cfc0:	43da      	mvns	r2, r3
 800cfc2:	4b1e      	ldr	r3, [pc, #120]	; (800d03c <xTaskPriorityInherit+0xe8>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4013      	ands	r3, r2
 800cfc8:	4a1c      	ldr	r2, [pc, #112]	; (800d03c <xTaskPriorityInherit+0xe8>)
 800cfca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cfcc:	4b19      	ldr	r3, [pc, #100]	; (800d034 <xTaskPriorityInherit+0xe0>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfda:	2201      	movs	r2, #1
 800cfdc:	409a      	lsls	r2, r3
 800cfde:	4b17      	ldr	r3, [pc, #92]	; (800d03c <xTaskPriorityInherit+0xe8>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	4a15      	ldr	r2, [pc, #84]	; (800d03c <xTaskPriorityInherit+0xe8>)
 800cfe6:	6013      	str	r3, [r2, #0]
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfec:	4613      	mov	r3, r2
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	4413      	add	r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4a10      	ldr	r2, [pc, #64]	; (800d038 <xTaskPriorityInherit+0xe4>)
 800cff6:	441a      	add	r2, r3
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	3304      	adds	r3, #4
 800cffc:	4619      	mov	r1, r3
 800cffe:	4610      	mov	r0, r2
 800d000:	f7fe f9b1 	bl	800b366 <vListInsertEnd>
 800d004:	e004      	b.n	800d010 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d006:	4b0b      	ldr	r3, [pc, #44]	; (800d034 <xTaskPriorityInherit+0xe0>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d010:	2301      	movs	r3, #1
 800d012:	60fb      	str	r3, [r7, #12]
 800d014:	e008      	b.n	800d028 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d01a:	4b06      	ldr	r3, [pc, #24]	; (800d034 <xTaskPriorityInherit+0xe0>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d020:	429a      	cmp	r2, r3
 800d022:	d201      	bcs.n	800d028 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d024:	2301      	movs	r3, #1
 800d026:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d028:	68fb      	ldr	r3, [r7, #12]
	}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	20000390 	.word	0x20000390
 800d038:	20000394 	.word	0x20000394
 800d03c:	20000498 	.word	0x20000498

0800d040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d04c:	2300      	movs	r3, #0
 800d04e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d06e      	beq.n	800d134 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d056:	4b3a      	ldr	r3, [pc, #232]	; (800d140 <xTaskPriorityDisinherit+0x100>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	693a      	ldr	r2, [r7, #16]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d00a      	beq.n	800d076 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d064:	f383 8811 	msr	BASEPRI, r3
 800d068:	f3bf 8f6f 	isb	sy
 800d06c:	f3bf 8f4f 	dsb	sy
 800d070:	60fb      	str	r3, [r7, #12]
}
 800d072:	bf00      	nop
 800d074:	e7fe      	b.n	800d074 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d10a      	bne.n	800d094 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	60bb      	str	r3, [r7, #8]
}
 800d090:	bf00      	nop
 800d092:	e7fe      	b.n	800d092 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d098:	1e5a      	subs	r2, r3, #1
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d044      	beq.n	800d134 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d140      	bne.n	800d134 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	3304      	adds	r3, #4
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7fe f9b2 	bl	800b420 <uxListRemove>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d115      	bne.n	800d0ee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0c6:	491f      	ldr	r1, [pc, #124]	; (800d144 <xTaskPriorityDisinherit+0x104>)
 800d0c8:	4613      	mov	r3, r2
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	4413      	add	r3, r2
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	440b      	add	r3, r1
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10a      	bne.n	800d0ee <xTaskPriorityDisinherit+0xae>
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0dc:	2201      	movs	r2, #1
 800d0de:	fa02 f303 	lsl.w	r3, r2, r3
 800d0e2:	43da      	mvns	r2, r3
 800d0e4:	4b18      	ldr	r3, [pc, #96]	; (800d148 <xTaskPriorityDisinherit+0x108>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4013      	ands	r3, r2
 800d0ea:	4a17      	ldr	r2, [pc, #92]	; (800d148 <xTaskPriorityDisinherit+0x108>)
 800d0ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0fa:	f1c3 0207 	rsb	r2, r3, #7
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d106:	2201      	movs	r2, #1
 800d108:	409a      	lsls	r2, r3
 800d10a:	4b0f      	ldr	r3, [pc, #60]	; (800d148 <xTaskPriorityDisinherit+0x108>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4313      	orrs	r3, r2
 800d110:	4a0d      	ldr	r2, [pc, #52]	; (800d148 <xTaskPriorityDisinherit+0x108>)
 800d112:	6013      	str	r3, [r2, #0]
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d118:	4613      	mov	r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	4413      	add	r3, r2
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	4a08      	ldr	r2, [pc, #32]	; (800d144 <xTaskPriorityDisinherit+0x104>)
 800d122:	441a      	add	r2, r3
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	3304      	adds	r3, #4
 800d128:	4619      	mov	r1, r3
 800d12a:	4610      	mov	r0, r2
 800d12c:	f7fe f91b 	bl	800b366 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d130:	2301      	movs	r3, #1
 800d132:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d134:	697b      	ldr	r3, [r7, #20]
	}
 800d136:	4618      	mov	r0, r3
 800d138:	3718      	adds	r7, #24
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	20000390 	.word	0x20000390
 800d144:	20000394 	.word	0x20000394
 800d148:	20000498 	.word	0x20000498

0800d14c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b088      	sub	sp, #32
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d15a:	2301      	movs	r3, #1
 800d15c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d077      	beq.n	800d254 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d164:	69bb      	ldr	r3, [r7, #24]
 800d166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d10a      	bne.n	800d182 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	60fb      	str	r3, [r7, #12]
}
 800d17e:	bf00      	nop
 800d180:	e7fe      	b.n	800d180 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d186:	683a      	ldr	r2, [r7, #0]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d902      	bls.n	800d192 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	61fb      	str	r3, [r7, #28]
 800d190:	e002      	b.n	800d198 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d196:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d19c:	69fa      	ldr	r2, [r7, #28]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d058      	beq.n	800d254 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1a6:	697a      	ldr	r2, [r7, #20]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d153      	bne.n	800d254 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d1ac:	4b2b      	ldr	r3, [pc, #172]	; (800d25c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	69ba      	ldr	r2, [r7, #24]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d10a      	bne.n	800d1cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ba:	f383 8811 	msr	BASEPRI, r3
 800d1be:	f3bf 8f6f 	isb	sy
 800d1c2:	f3bf 8f4f 	dsb	sy
 800d1c6:	60bb      	str	r3, [r7, #8]
}
 800d1c8:	bf00      	nop
 800d1ca:	e7fe      	b.n	800d1ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d1d2:	69bb      	ldr	r3, [r7, #24]
 800d1d4:	69fa      	ldr	r2, [r7, #28]
 800d1d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	699b      	ldr	r3, [r3, #24]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	db04      	blt.n	800d1ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	f1c3 0207 	rsb	r2, r3, #7
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	6959      	ldr	r1, [r3, #20]
 800d1ee:	693a      	ldr	r2, [r7, #16]
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4413      	add	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	4a19      	ldr	r2, [pc, #100]	; (800d260 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d1fa:	4413      	add	r3, r2
 800d1fc:	4299      	cmp	r1, r3
 800d1fe:	d129      	bne.n	800d254 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	3304      	adds	r3, #4
 800d204:	4618      	mov	r0, r3
 800d206:	f7fe f90b 	bl	800b420 <uxListRemove>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d10a      	bne.n	800d226 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d210:	69bb      	ldr	r3, [r7, #24]
 800d212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d214:	2201      	movs	r2, #1
 800d216:	fa02 f303 	lsl.w	r3, r2, r3
 800d21a:	43da      	mvns	r2, r3
 800d21c:	4b11      	ldr	r3, [pc, #68]	; (800d264 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4013      	ands	r3, r2
 800d222:	4a10      	ldr	r2, [pc, #64]	; (800d264 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d224:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22a:	2201      	movs	r2, #1
 800d22c:	409a      	lsls	r2, r3
 800d22e:	4b0d      	ldr	r3, [pc, #52]	; (800d264 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4313      	orrs	r3, r2
 800d234:	4a0b      	ldr	r2, [pc, #44]	; (800d264 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d236:	6013      	str	r3, [r2, #0]
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d23c:	4613      	mov	r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	4413      	add	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4a06      	ldr	r2, [pc, #24]	; (800d260 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d246:	441a      	add	r2, r3
 800d248:	69bb      	ldr	r3, [r7, #24]
 800d24a:	3304      	adds	r3, #4
 800d24c:	4619      	mov	r1, r3
 800d24e:	4610      	mov	r0, r2
 800d250:	f7fe f889 	bl	800b366 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d254:	bf00      	nop
 800d256:	3720      	adds	r7, #32
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	20000390 	.word	0x20000390
 800d260:	20000394 	.word	0x20000394
 800d264:	20000498 	.word	0x20000498

0800d268 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d268:	b480      	push	{r7}
 800d26a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d26c:	4b07      	ldr	r3, [pc, #28]	; (800d28c <pvTaskIncrementMutexHeldCount+0x24>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d004      	beq.n	800d27e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d274:	4b05      	ldr	r3, [pc, #20]	; (800d28c <pvTaskIncrementMutexHeldCount+0x24>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d27a:	3201      	adds	r2, #1
 800d27c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d27e:	4b03      	ldr	r3, [pc, #12]	; (800d28c <pvTaskIncrementMutexHeldCount+0x24>)
 800d280:	681b      	ldr	r3, [r3, #0]
	}
 800d282:	4618      	mov	r0, r3
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr
 800d28c:	20000390 	.word	0x20000390

0800d290 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d29a:	4b29      	ldr	r3, [pc, #164]	; (800d340 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2a0:	4b28      	ldr	r3, [pc, #160]	; (800d344 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	3304      	adds	r3, #4
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fe f8ba 	bl	800b420 <uxListRemove>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d10b      	bne.n	800d2ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d2b2:	4b24      	ldr	r3, [pc, #144]	; (800d344 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d2be:	43da      	mvns	r2, r3
 800d2c0:	4b21      	ldr	r3, [pc, #132]	; (800d348 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4013      	ands	r3, r2
 800d2c6:	4a20      	ldr	r2, [pc, #128]	; (800d348 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d2c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d0:	d10a      	bne.n	800d2e8 <prvAddCurrentTaskToDelayedList+0x58>
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d007      	beq.n	800d2e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2d8:	4b1a      	ldr	r3, [pc, #104]	; (800d344 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	3304      	adds	r3, #4
 800d2de:	4619      	mov	r1, r3
 800d2e0:	481a      	ldr	r0, [pc, #104]	; (800d34c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d2e2:	f7fe f840 	bl	800b366 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d2e6:	e026      	b.n	800d336 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d2f0:	4b14      	ldr	r3, [pc, #80]	; (800d344 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	68ba      	ldr	r2, [r7, #8]
 800d2f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d2f8:	68ba      	ldr	r2, [r7, #8]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d209      	bcs.n	800d314 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d300:	4b13      	ldr	r3, [pc, #76]	; (800d350 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	4b0f      	ldr	r3, [pc, #60]	; (800d344 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	3304      	adds	r3, #4
 800d30a:	4619      	mov	r1, r3
 800d30c:	4610      	mov	r0, r2
 800d30e:	f7fe f84e 	bl	800b3ae <vListInsert>
}
 800d312:	e010      	b.n	800d336 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d314:	4b0f      	ldr	r3, [pc, #60]	; (800d354 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	4b0a      	ldr	r3, [pc, #40]	; (800d344 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	3304      	adds	r3, #4
 800d31e:	4619      	mov	r1, r3
 800d320:	4610      	mov	r0, r2
 800d322:	f7fe f844 	bl	800b3ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d326:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	68ba      	ldr	r2, [r7, #8]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d202      	bcs.n	800d336 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d330:	4a09      	ldr	r2, [pc, #36]	; (800d358 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	6013      	str	r3, [r2, #0]
}
 800d336:	bf00      	nop
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	20000494 	.word	0x20000494
 800d344:	20000390 	.word	0x20000390
 800d348:	20000498 	.word	0x20000498
 800d34c:	2000047c 	.word	0x2000047c
 800d350:	2000044c 	.word	0x2000044c
 800d354:	20000448 	.word	0x20000448
 800d358:	200004b0 	.word	0x200004b0

0800d35c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	3b04      	subs	r3, #4
 800d36c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	3b04      	subs	r3, #4
 800d37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	f023 0201 	bic.w	r2, r3, #1
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	3b04      	subs	r3, #4
 800d38a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d38c:	4a0c      	ldr	r2, [pc, #48]	; (800d3c0 <pxPortInitialiseStack+0x64>)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	3b14      	subs	r3, #20
 800d396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	3b04      	subs	r3, #4
 800d3a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f06f 0202 	mvn.w	r2, #2
 800d3aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	3b20      	subs	r3, #32
 800d3b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3714      	adds	r7, #20
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	0800d3c5 	.word	0x0800d3c5

0800d3c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b085      	sub	sp, #20
 800d3c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d3ce:	4b12      	ldr	r3, [pc, #72]	; (800d418 <prvTaskExitError+0x54>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d6:	d00a      	beq.n	800d3ee <prvTaskExitError+0x2a>
	__asm volatile
 800d3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3dc:	f383 8811 	msr	BASEPRI, r3
 800d3e0:	f3bf 8f6f 	isb	sy
 800d3e4:	f3bf 8f4f 	dsb	sy
 800d3e8:	60fb      	str	r3, [r7, #12]
}
 800d3ea:	bf00      	nop
 800d3ec:	e7fe      	b.n	800d3ec <prvTaskExitError+0x28>
	__asm volatile
 800d3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	60bb      	str	r3, [r7, #8]
}
 800d400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d402:	bf00      	nop
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d0fc      	beq.n	800d404 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d40a:	bf00      	nop
 800d40c:	bf00      	nop
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr
 800d418:	2000002c 	.word	0x2000002c
 800d41c:	00000000 	.word	0x00000000

0800d420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d420:	4b07      	ldr	r3, [pc, #28]	; (800d440 <pxCurrentTCBConst2>)
 800d422:	6819      	ldr	r1, [r3, #0]
 800d424:	6808      	ldr	r0, [r1, #0]
 800d426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42a:	f380 8809 	msr	PSP, r0
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	f04f 0000 	mov.w	r0, #0
 800d436:	f380 8811 	msr	BASEPRI, r0
 800d43a:	4770      	bx	lr
 800d43c:	f3af 8000 	nop.w

0800d440 <pxCurrentTCBConst2>:
 800d440:	20000390 	.word	0x20000390
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d444:	bf00      	nop
 800d446:	bf00      	nop

0800d448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d448:	4808      	ldr	r0, [pc, #32]	; (800d46c <prvPortStartFirstTask+0x24>)
 800d44a:	6800      	ldr	r0, [r0, #0]
 800d44c:	6800      	ldr	r0, [r0, #0]
 800d44e:	f380 8808 	msr	MSP, r0
 800d452:	f04f 0000 	mov.w	r0, #0
 800d456:	f380 8814 	msr	CONTROL, r0
 800d45a:	b662      	cpsie	i
 800d45c:	b661      	cpsie	f
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	df00      	svc	0
 800d468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d46a:	bf00      	nop
 800d46c:	e000ed08 	.word	0xe000ed08

0800d470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b086      	sub	sp, #24
 800d474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d476:	4b46      	ldr	r3, [pc, #280]	; (800d590 <xPortStartScheduler+0x120>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a46      	ldr	r2, [pc, #280]	; (800d594 <xPortStartScheduler+0x124>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d10a      	bne.n	800d496 <xPortStartScheduler+0x26>
	__asm volatile
 800d480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d484:	f383 8811 	msr	BASEPRI, r3
 800d488:	f3bf 8f6f 	isb	sy
 800d48c:	f3bf 8f4f 	dsb	sy
 800d490:	613b      	str	r3, [r7, #16]
}
 800d492:	bf00      	nop
 800d494:	e7fe      	b.n	800d494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d496:	4b3e      	ldr	r3, [pc, #248]	; (800d590 <xPortStartScheduler+0x120>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4a3f      	ldr	r2, [pc, #252]	; (800d598 <xPortStartScheduler+0x128>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d10a      	bne.n	800d4b6 <xPortStartScheduler+0x46>
	__asm volatile
 800d4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a4:	f383 8811 	msr	BASEPRI, r3
 800d4a8:	f3bf 8f6f 	isb	sy
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	60fb      	str	r3, [r7, #12]
}
 800d4b2:	bf00      	nop
 800d4b4:	e7fe      	b.n	800d4b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d4b6:	4b39      	ldr	r3, [pc, #228]	; (800d59c <xPortStartScheduler+0x12c>)
 800d4b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	22ff      	movs	r2, #255	; 0xff
 800d4c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d4d0:	78fb      	ldrb	r3, [r7, #3]
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d4d8:	b2da      	uxtb	r2, r3
 800d4da:	4b31      	ldr	r3, [pc, #196]	; (800d5a0 <xPortStartScheduler+0x130>)
 800d4dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d4de:	4b31      	ldr	r3, [pc, #196]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d4e0:	2207      	movs	r2, #7
 800d4e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4e4:	e009      	b.n	800d4fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d4e6:	4b2f      	ldr	r3, [pc, #188]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	3b01      	subs	r3, #1
 800d4ec:	4a2d      	ldr	r2, [pc, #180]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d4ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d4f0:	78fb      	ldrb	r3, [r7, #3]
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	005b      	lsls	r3, r3, #1
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4fa:	78fb      	ldrb	r3, [r7, #3]
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d502:	2b80      	cmp	r3, #128	; 0x80
 800d504:	d0ef      	beq.n	800d4e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d506:	4b27      	ldr	r3, [pc, #156]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f1c3 0307 	rsb	r3, r3, #7
 800d50e:	2b04      	cmp	r3, #4
 800d510:	d00a      	beq.n	800d528 <xPortStartScheduler+0xb8>
	__asm volatile
 800d512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d516:	f383 8811 	msr	BASEPRI, r3
 800d51a:	f3bf 8f6f 	isb	sy
 800d51e:	f3bf 8f4f 	dsb	sy
 800d522:	60bb      	str	r3, [r7, #8]
}
 800d524:	bf00      	nop
 800d526:	e7fe      	b.n	800d526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d528:	4b1e      	ldr	r3, [pc, #120]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	021b      	lsls	r3, r3, #8
 800d52e:	4a1d      	ldr	r2, [pc, #116]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d532:	4b1c      	ldr	r3, [pc, #112]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d53a:	4a1a      	ldr	r2, [pc, #104]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d53c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	b2da      	uxtb	r2, r3
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d546:	4b18      	ldr	r3, [pc, #96]	; (800d5a8 <xPortStartScheduler+0x138>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a17      	ldr	r2, [pc, #92]	; (800d5a8 <xPortStartScheduler+0x138>)
 800d54c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d552:	4b15      	ldr	r3, [pc, #84]	; (800d5a8 <xPortStartScheduler+0x138>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a14      	ldr	r2, [pc, #80]	; (800d5a8 <xPortStartScheduler+0x138>)
 800d558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d55c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d55e:	f000 f8dd 	bl	800d71c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d562:	4b12      	ldr	r3, [pc, #72]	; (800d5ac <xPortStartScheduler+0x13c>)
 800d564:	2200      	movs	r2, #0
 800d566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d568:	f000 f8fc 	bl	800d764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d56c:	4b10      	ldr	r3, [pc, #64]	; (800d5b0 <xPortStartScheduler+0x140>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a0f      	ldr	r2, [pc, #60]	; (800d5b0 <xPortStartScheduler+0x140>)
 800d572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d578:	f7ff ff66 	bl	800d448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d57c:	f7ff fa86 	bl	800ca8c <vTaskSwitchContext>
	prvTaskExitError();
 800d580:	f7ff ff20 	bl	800d3c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d584:	2300      	movs	r3, #0
}
 800d586:	4618      	mov	r0, r3
 800d588:	3718      	adds	r7, #24
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	e000ed00 	.word	0xe000ed00
 800d594:	410fc271 	.word	0x410fc271
 800d598:	410fc270 	.word	0x410fc270
 800d59c:	e000e400 	.word	0xe000e400
 800d5a0:	200004bc 	.word	0x200004bc
 800d5a4:	200004c0 	.word	0x200004c0
 800d5a8:	e000ed20 	.word	0xe000ed20
 800d5ac:	2000002c 	.word	0x2000002c
 800d5b0:	e000ef34 	.word	0xe000ef34

0800d5b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
	__asm volatile
 800d5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5be:	f383 8811 	msr	BASEPRI, r3
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	f3bf 8f4f 	dsb	sy
 800d5ca:	607b      	str	r3, [r7, #4]
}
 800d5cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d5ce:	4b0f      	ldr	r3, [pc, #60]	; (800d60c <vPortEnterCritical+0x58>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	4a0d      	ldr	r2, [pc, #52]	; (800d60c <vPortEnterCritical+0x58>)
 800d5d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d5d8:	4b0c      	ldr	r3, [pc, #48]	; (800d60c <vPortEnterCritical+0x58>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d10f      	bne.n	800d600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d5e0:	4b0b      	ldr	r3, [pc, #44]	; (800d610 <vPortEnterCritical+0x5c>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00a      	beq.n	800d600 <vPortEnterCritical+0x4c>
	__asm volatile
 800d5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ee:	f383 8811 	msr	BASEPRI, r3
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	f3bf 8f4f 	dsb	sy
 800d5fa:	603b      	str	r3, [r7, #0]
}
 800d5fc:	bf00      	nop
 800d5fe:	e7fe      	b.n	800d5fe <vPortEnterCritical+0x4a>
	}
}
 800d600:	bf00      	nop
 800d602:	370c      	adds	r7, #12
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr
 800d60c:	2000002c 	.word	0x2000002c
 800d610:	e000ed04 	.word	0xe000ed04

0800d614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d61a:	4b12      	ldr	r3, [pc, #72]	; (800d664 <vPortExitCritical+0x50>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d10a      	bne.n	800d638 <vPortExitCritical+0x24>
	__asm volatile
 800d622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d626:	f383 8811 	msr	BASEPRI, r3
 800d62a:	f3bf 8f6f 	isb	sy
 800d62e:	f3bf 8f4f 	dsb	sy
 800d632:	607b      	str	r3, [r7, #4]
}
 800d634:	bf00      	nop
 800d636:	e7fe      	b.n	800d636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d638:	4b0a      	ldr	r3, [pc, #40]	; (800d664 <vPortExitCritical+0x50>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	4a09      	ldr	r2, [pc, #36]	; (800d664 <vPortExitCritical+0x50>)
 800d640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d642:	4b08      	ldr	r3, [pc, #32]	; (800d664 <vPortExitCritical+0x50>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d105      	bne.n	800d656 <vPortExitCritical+0x42>
 800d64a:	2300      	movs	r3, #0
 800d64c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	f383 8811 	msr	BASEPRI, r3
}
 800d654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d656:	bf00      	nop
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop
 800d664:	2000002c 	.word	0x2000002c
	...

0800d670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d670:	f3ef 8009 	mrs	r0, PSP
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	4b15      	ldr	r3, [pc, #84]	; (800d6d0 <pxCurrentTCBConst>)
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	f01e 0f10 	tst.w	lr, #16
 800d680:	bf08      	it	eq
 800d682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68a:	6010      	str	r0, [r2, #0]
 800d68c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d690:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d694:	f380 8811 	msr	BASEPRI, r0
 800d698:	f3bf 8f4f 	dsb	sy
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f7ff f9f4 	bl	800ca8c <vTaskSwitchContext>
 800d6a4:	f04f 0000 	mov.w	r0, #0
 800d6a8:	f380 8811 	msr	BASEPRI, r0
 800d6ac:	bc09      	pop	{r0, r3}
 800d6ae:	6819      	ldr	r1, [r3, #0]
 800d6b0:	6808      	ldr	r0, [r1, #0]
 800d6b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b6:	f01e 0f10 	tst.w	lr, #16
 800d6ba:	bf08      	it	eq
 800d6bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d6c0:	f380 8809 	msr	PSP, r0
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	f3af 8000 	nop.w

0800d6d0 <pxCurrentTCBConst>:
 800d6d0:	20000390 	.word	0x20000390
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d6d4:	bf00      	nop
 800d6d6:	bf00      	nop

0800d6d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	607b      	str	r3, [r7, #4]
}
 800d6f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d6f2:	f7ff f913 	bl	800c91c <xTaskIncrementTick>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d003      	beq.n	800d704 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d6fc:	4b06      	ldr	r3, [pc, #24]	; (800d718 <SysTick_Handler+0x40>)
 800d6fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d702:	601a      	str	r2, [r3, #0]
 800d704:	2300      	movs	r3, #0
 800d706:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	f383 8811 	msr	BASEPRI, r3
}
 800d70e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d710:	bf00      	nop
 800d712:	3708      	adds	r7, #8
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	e000ed04 	.word	0xe000ed04

0800d71c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d71c:	b480      	push	{r7}
 800d71e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d720:	4b0b      	ldr	r3, [pc, #44]	; (800d750 <vPortSetupTimerInterrupt+0x34>)
 800d722:	2200      	movs	r2, #0
 800d724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d726:	4b0b      	ldr	r3, [pc, #44]	; (800d754 <vPortSetupTimerInterrupt+0x38>)
 800d728:	2200      	movs	r2, #0
 800d72a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d72c:	4b0a      	ldr	r3, [pc, #40]	; (800d758 <vPortSetupTimerInterrupt+0x3c>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a0a      	ldr	r2, [pc, #40]	; (800d75c <vPortSetupTimerInterrupt+0x40>)
 800d732:	fba2 2303 	umull	r2, r3, r2, r3
 800d736:	099b      	lsrs	r3, r3, #6
 800d738:	4a09      	ldr	r2, [pc, #36]	; (800d760 <vPortSetupTimerInterrupt+0x44>)
 800d73a:	3b01      	subs	r3, #1
 800d73c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d73e:	4b04      	ldr	r3, [pc, #16]	; (800d750 <vPortSetupTimerInterrupt+0x34>)
 800d740:	2207      	movs	r2, #7
 800d742:	601a      	str	r2, [r3, #0]
}
 800d744:	bf00      	nop
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop
 800d750:	e000e010 	.word	0xe000e010
 800d754:	e000e018 	.word	0xe000e018
 800d758:	20000000 	.word	0x20000000
 800d75c:	10624dd3 	.word	0x10624dd3
 800d760:	e000e014 	.word	0xe000e014

0800d764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d774 <vPortEnableVFP+0x10>
 800d768:	6801      	ldr	r1, [r0, #0]
 800d76a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d76e:	6001      	str	r1, [r0, #0]
 800d770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d772:	bf00      	nop
 800d774:	e000ed88 	.word	0xe000ed88

0800d778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d77e:	f3ef 8305 	mrs	r3, IPSR
 800d782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2b0f      	cmp	r3, #15
 800d788:	d914      	bls.n	800d7b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d78a:	4a17      	ldr	r2, [pc, #92]	; (800d7e8 <vPortValidateInterruptPriority+0x70>)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	4413      	add	r3, r2
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d794:	4b15      	ldr	r3, [pc, #84]	; (800d7ec <vPortValidateInterruptPriority+0x74>)
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	7afa      	ldrb	r2, [r7, #11]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d20a      	bcs.n	800d7b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	607b      	str	r3, [r7, #4]
}
 800d7b0:	bf00      	nop
 800d7b2:	e7fe      	b.n	800d7b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d7b4:	4b0e      	ldr	r3, [pc, #56]	; (800d7f0 <vPortValidateInterruptPriority+0x78>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d7bc:	4b0d      	ldr	r3, [pc, #52]	; (800d7f4 <vPortValidateInterruptPriority+0x7c>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d90a      	bls.n	800d7da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c8:	f383 8811 	msr	BASEPRI, r3
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	603b      	str	r3, [r7, #0]
}
 800d7d6:	bf00      	nop
 800d7d8:	e7fe      	b.n	800d7d8 <vPortValidateInterruptPriority+0x60>
	}
 800d7da:	bf00      	nop
 800d7dc:	3714      	adds	r7, #20
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	e000e3f0 	.word	0xe000e3f0
 800d7ec:	200004bc 	.word	0x200004bc
 800d7f0:	e000ed0c 	.word	0xe000ed0c
 800d7f4:	200004c0 	.word	0x200004c0

0800d7f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b08a      	sub	sp, #40	; 0x28
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d800:	2300      	movs	r3, #0
 800d802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d804:	f7fe ffbe 	bl	800c784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d808:	4b5b      	ldr	r3, [pc, #364]	; (800d978 <pvPortMalloc+0x180>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d101      	bne.n	800d814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d810:	f000 f920 	bl	800da54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d814:	4b59      	ldr	r3, [pc, #356]	; (800d97c <pvPortMalloc+0x184>)
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4013      	ands	r3, r2
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f040 8093 	bne.w	800d948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d01d      	beq.n	800d864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d828:	2208      	movs	r2, #8
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4413      	add	r3, r2
 800d82e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f003 0307 	and.w	r3, r3, #7
 800d836:	2b00      	cmp	r3, #0
 800d838:	d014      	beq.n	800d864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f023 0307 	bic.w	r3, r3, #7
 800d840:	3308      	adds	r3, #8
 800d842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f003 0307 	and.w	r3, r3, #7
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d00a      	beq.n	800d864 <pvPortMalloc+0x6c>
	__asm volatile
 800d84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	617b      	str	r3, [r7, #20]
}
 800d860:	bf00      	nop
 800d862:	e7fe      	b.n	800d862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d06e      	beq.n	800d948 <pvPortMalloc+0x150>
 800d86a:	4b45      	ldr	r3, [pc, #276]	; (800d980 <pvPortMalloc+0x188>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	429a      	cmp	r2, r3
 800d872:	d869      	bhi.n	800d948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d874:	4b43      	ldr	r3, [pc, #268]	; (800d984 <pvPortMalloc+0x18c>)
 800d876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d878:	4b42      	ldr	r3, [pc, #264]	; (800d984 <pvPortMalloc+0x18c>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d87e:	e004      	b.n	800d88a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	429a      	cmp	r2, r3
 800d892:	d903      	bls.n	800d89c <pvPortMalloc+0xa4>
 800d894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d1f1      	bne.n	800d880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d89c:	4b36      	ldr	r3, [pc, #216]	; (800d978 <pvPortMalloc+0x180>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d050      	beq.n	800d948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d8a6:	6a3b      	ldr	r3, [r7, #32]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2208      	movs	r2, #8
 800d8ac:	4413      	add	r3, r2
 800d8ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	681a      	ldr	r2, [r3, #0]
 800d8b4:	6a3b      	ldr	r3, [r7, #32]
 800d8b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ba:	685a      	ldr	r2, [r3, #4]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	1ad2      	subs	r2, r2, r3
 800d8c0:	2308      	movs	r3, #8
 800d8c2:	005b      	lsls	r3, r3, #1
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d91f      	bls.n	800d908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	f003 0307 	and.w	r3, r3, #7
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00a      	beq.n	800d8f0 <pvPortMalloc+0xf8>
	__asm volatile
 800d8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8de:	f383 8811 	msr	BASEPRI, r3
 800d8e2:	f3bf 8f6f 	isb	sy
 800d8e6:	f3bf 8f4f 	dsb	sy
 800d8ea:	613b      	str	r3, [r7, #16]
}
 800d8ec:	bf00      	nop
 800d8ee:	e7fe      	b.n	800d8ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f2:	685a      	ldr	r2, [r3, #4]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	1ad2      	subs	r2, r2, r3
 800d8f8:	69bb      	ldr	r3, [r7, #24]
 800d8fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d902:	69b8      	ldr	r0, [r7, #24]
 800d904:	f000 f908 	bl	800db18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d908:	4b1d      	ldr	r3, [pc, #116]	; (800d980 <pvPortMalloc+0x188>)
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	4a1b      	ldr	r2, [pc, #108]	; (800d980 <pvPortMalloc+0x188>)
 800d914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d916:	4b1a      	ldr	r3, [pc, #104]	; (800d980 <pvPortMalloc+0x188>)
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	4b1b      	ldr	r3, [pc, #108]	; (800d988 <pvPortMalloc+0x190>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d203      	bcs.n	800d92a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d922:	4b17      	ldr	r3, [pc, #92]	; (800d980 <pvPortMalloc+0x188>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4a18      	ldr	r2, [pc, #96]	; (800d988 <pvPortMalloc+0x190>)
 800d928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	685a      	ldr	r2, [r3, #4]
 800d92e:	4b13      	ldr	r3, [pc, #76]	; (800d97c <pvPortMalloc+0x184>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	431a      	orrs	r2, r3
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93a:	2200      	movs	r2, #0
 800d93c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d93e:	4b13      	ldr	r3, [pc, #76]	; (800d98c <pvPortMalloc+0x194>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	3301      	adds	r3, #1
 800d944:	4a11      	ldr	r2, [pc, #68]	; (800d98c <pvPortMalloc+0x194>)
 800d946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d948:	f7fe ff2a 	bl	800c7a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	f003 0307 	and.w	r3, r3, #7
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00a      	beq.n	800d96c <pvPortMalloc+0x174>
	__asm volatile
 800d956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95a:	f383 8811 	msr	BASEPRI, r3
 800d95e:	f3bf 8f6f 	isb	sy
 800d962:	f3bf 8f4f 	dsb	sy
 800d966:	60fb      	str	r3, [r7, #12]
}
 800d968:	bf00      	nop
 800d96a:	e7fe      	b.n	800d96a <pvPortMalloc+0x172>
	return pvReturn;
 800d96c:	69fb      	ldr	r3, [r7, #28]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3728      	adds	r7, #40	; 0x28
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	200084cc 	.word	0x200084cc
 800d97c:	200084e0 	.word	0x200084e0
 800d980:	200084d0 	.word	0x200084d0
 800d984:	200084c4 	.word	0x200084c4
 800d988:	200084d4 	.word	0x200084d4
 800d98c:	200084d8 	.word	0x200084d8

0800d990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b086      	sub	sp, #24
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d04d      	beq.n	800da3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d9a2:	2308      	movs	r3, #8
 800d9a4:	425b      	negs	r3, r3
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	685a      	ldr	r2, [r3, #4]
 800d9b4:	4b24      	ldr	r3, [pc, #144]	; (800da48 <vPortFree+0xb8>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4013      	ands	r3, r2
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d10a      	bne.n	800d9d4 <vPortFree+0x44>
	__asm volatile
 800d9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c2:	f383 8811 	msr	BASEPRI, r3
 800d9c6:	f3bf 8f6f 	isb	sy
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	60fb      	str	r3, [r7, #12]
}
 800d9d0:	bf00      	nop
 800d9d2:	e7fe      	b.n	800d9d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00a      	beq.n	800d9f2 <vPortFree+0x62>
	__asm volatile
 800d9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e0:	f383 8811 	msr	BASEPRI, r3
 800d9e4:	f3bf 8f6f 	isb	sy
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	60bb      	str	r3, [r7, #8]
}
 800d9ee:	bf00      	nop
 800d9f0:	e7fe      	b.n	800d9f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	685a      	ldr	r2, [r3, #4]
 800d9f6:	4b14      	ldr	r3, [pc, #80]	; (800da48 <vPortFree+0xb8>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4013      	ands	r3, r2
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d01e      	beq.n	800da3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d11a      	bne.n	800da3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	685a      	ldr	r2, [r3, #4]
 800da0c:	4b0e      	ldr	r3, [pc, #56]	; (800da48 <vPortFree+0xb8>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	43db      	mvns	r3, r3
 800da12:	401a      	ands	r2, r3
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800da18:	f7fe feb4 	bl	800c784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	685a      	ldr	r2, [r3, #4]
 800da20:	4b0a      	ldr	r3, [pc, #40]	; (800da4c <vPortFree+0xbc>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4413      	add	r3, r2
 800da26:	4a09      	ldr	r2, [pc, #36]	; (800da4c <vPortFree+0xbc>)
 800da28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800da2a:	6938      	ldr	r0, [r7, #16]
 800da2c:	f000 f874 	bl	800db18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800da30:	4b07      	ldr	r3, [pc, #28]	; (800da50 <vPortFree+0xc0>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	3301      	adds	r3, #1
 800da36:	4a06      	ldr	r2, [pc, #24]	; (800da50 <vPortFree+0xc0>)
 800da38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800da3a:	f7fe feb1 	bl	800c7a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800da3e:	bf00      	nop
 800da40:	3718      	adds	r7, #24
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	200084e0 	.word	0x200084e0
 800da4c:	200084d0 	.word	0x200084d0
 800da50:	200084dc 	.word	0x200084dc

0800da54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800da5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800da60:	4b27      	ldr	r3, [pc, #156]	; (800db00 <prvHeapInit+0xac>)
 800da62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f003 0307 	and.w	r3, r3, #7
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00c      	beq.n	800da88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	3307      	adds	r3, #7
 800da72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f023 0307 	bic.w	r3, r3, #7
 800da7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	4a1f      	ldr	r2, [pc, #124]	; (800db00 <prvHeapInit+0xac>)
 800da84:	4413      	add	r3, r2
 800da86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da8c:	4a1d      	ldr	r2, [pc, #116]	; (800db04 <prvHeapInit+0xb0>)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da92:	4b1c      	ldr	r3, [pc, #112]	; (800db04 <prvHeapInit+0xb0>)
 800da94:	2200      	movs	r2, #0
 800da96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	68ba      	ldr	r2, [r7, #8]
 800da9c:	4413      	add	r3, r2
 800da9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800daa0:	2208      	movs	r2, #8
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	1a9b      	subs	r3, r3, r2
 800daa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f023 0307 	bic.w	r3, r3, #7
 800daae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	4a15      	ldr	r2, [pc, #84]	; (800db08 <prvHeapInit+0xb4>)
 800dab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dab6:	4b14      	ldr	r3, [pc, #80]	; (800db08 <prvHeapInit+0xb4>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	2200      	movs	r2, #0
 800dabc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dabe:	4b12      	ldr	r3, [pc, #72]	; (800db08 <prvHeapInit+0xb4>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2200      	movs	r2, #0
 800dac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	1ad2      	subs	r2, r2, r3
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dad4:	4b0c      	ldr	r3, [pc, #48]	; (800db08 <prvHeapInit+0xb4>)
 800dad6:	681a      	ldr	r2, [r3, #0]
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	4a0a      	ldr	r2, [pc, #40]	; (800db0c <prvHeapInit+0xb8>)
 800dae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	4a09      	ldr	r2, [pc, #36]	; (800db10 <prvHeapInit+0xbc>)
 800daea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800daec:	4b09      	ldr	r3, [pc, #36]	; (800db14 <prvHeapInit+0xc0>)
 800daee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800daf2:	601a      	str	r2, [r3, #0]
}
 800daf4:	bf00      	nop
 800daf6:	3714      	adds	r7, #20
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr
 800db00:	200004c4 	.word	0x200004c4
 800db04:	200084c4 	.word	0x200084c4
 800db08:	200084cc 	.word	0x200084cc
 800db0c:	200084d4 	.word	0x200084d4
 800db10:	200084d0 	.word	0x200084d0
 800db14:	200084e0 	.word	0x200084e0

0800db18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800db18:	b480      	push	{r7}
 800db1a:	b085      	sub	sp, #20
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800db20:	4b28      	ldr	r3, [pc, #160]	; (800dbc4 <prvInsertBlockIntoFreeList+0xac>)
 800db22:	60fb      	str	r3, [r7, #12]
 800db24:	e002      	b.n	800db2c <prvInsertBlockIntoFreeList+0x14>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	60fb      	str	r3, [r7, #12]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	429a      	cmp	r2, r3
 800db34:	d8f7      	bhi.n	800db26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	68ba      	ldr	r2, [r7, #8]
 800db40:	4413      	add	r3, r2
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	429a      	cmp	r2, r3
 800db46:	d108      	bne.n	800db5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	685a      	ldr	r2, [r3, #4]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	441a      	add	r2, r3
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	68ba      	ldr	r2, [r7, #8]
 800db64:	441a      	add	r2, r3
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d118      	bne.n	800dba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	4b15      	ldr	r3, [pc, #84]	; (800dbc8 <prvInsertBlockIntoFreeList+0xb0>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	429a      	cmp	r2, r3
 800db78:	d00d      	beq.n	800db96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	685a      	ldr	r2, [r3, #4]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	441a      	add	r2, r3
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	601a      	str	r2, [r3, #0]
 800db94:	e008      	b.n	800dba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db96:	4b0c      	ldr	r3, [pc, #48]	; (800dbc8 <prvInsertBlockIntoFreeList+0xb0>)
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	601a      	str	r2, [r3, #0]
 800db9e:	e003      	b.n	800dba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dba8:	68fa      	ldr	r2, [r7, #12]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d002      	beq.n	800dbb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbb6:	bf00      	nop
 800dbb8:	3714      	adds	r7, #20
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr
 800dbc2:	bf00      	nop
 800dbc4:	200084c4 	.word	0x200084c4
 800dbc8:	200084cc 	.word	0x200084cc

0800dbcc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800dbd6:	f007 fa97 	bl	8015108 <sys_timeouts_sleeptime>
 800dbda:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe2:	d10b      	bne.n	800dbfc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800dbe4:	4813      	ldr	r0, [pc, #76]	; (800dc34 <tcpip_timeouts_mbox_fetch+0x68>)
 800dbe6:	f00c f9bc 	bl	8019f62 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800dbea:	2200      	movs	r2, #0
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f00c f92e 	bl	8019e50 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800dbf4:	480f      	ldr	r0, [pc, #60]	; (800dc34 <tcpip_timeouts_mbox_fetch+0x68>)
 800dbf6:	f00c f9a5 	bl	8019f44 <sys_mutex_lock>
    return;
 800dbfa:	e018      	b.n	800dc2e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d102      	bne.n	800dc08 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800dc02:	f007 fa47 	bl	8015094 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800dc06:	e7e6      	b.n	800dbd6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800dc08:	480a      	ldr	r0, [pc, #40]	; (800dc34 <tcpip_timeouts_mbox_fetch+0x68>)
 800dc0a:	f00c f9aa 	bl	8019f62 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800dc0e:	68fa      	ldr	r2, [r7, #12]
 800dc10:	6839      	ldr	r1, [r7, #0]
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f00c f91c 	bl	8019e50 <sys_arch_mbox_fetch>
 800dc18:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800dc1a:	4806      	ldr	r0, [pc, #24]	; (800dc34 <tcpip_timeouts_mbox_fetch+0x68>)
 800dc1c:	f00c f992 	bl	8019f44 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc26:	d102      	bne.n	800dc2e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800dc28:	f007 fa34 	bl	8015094 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800dc2c:	e7d3      	b.n	800dbd6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	2000bcc0 	.word	0x2000bcc0

0800dc38 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800dc40:	4810      	ldr	r0, [pc, #64]	; (800dc84 <tcpip_thread+0x4c>)
 800dc42:	f00c f97f 	bl	8019f44 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800dc46:	4b10      	ldr	r3, [pc, #64]	; (800dc88 <tcpip_thread+0x50>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d005      	beq.n	800dc5a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800dc4e:	4b0e      	ldr	r3, [pc, #56]	; (800dc88 <tcpip_thread+0x50>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4a0e      	ldr	r2, [pc, #56]	; (800dc8c <tcpip_thread+0x54>)
 800dc54:	6812      	ldr	r2, [r2, #0]
 800dc56:	4610      	mov	r0, r2
 800dc58:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800dc5a:	f107 030c 	add.w	r3, r7, #12
 800dc5e:	4619      	mov	r1, r3
 800dc60:	480b      	ldr	r0, [pc, #44]	; (800dc90 <tcpip_thread+0x58>)
 800dc62:	f7ff ffb3 	bl	800dbcc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d106      	bne.n	800dc7a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800dc6c:	4b09      	ldr	r3, [pc, #36]	; (800dc94 <tcpip_thread+0x5c>)
 800dc6e:	2291      	movs	r2, #145	; 0x91
 800dc70:	4909      	ldr	r1, [pc, #36]	; (800dc98 <tcpip_thread+0x60>)
 800dc72:	480a      	ldr	r0, [pc, #40]	; (800dc9c <tcpip_thread+0x64>)
 800dc74:	f00c fef8 	bl	801aa68 <iprintf>
      continue;
 800dc78:	e003      	b.n	800dc82 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f000 f80f 	bl	800dca0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800dc82:	e7ea      	b.n	800dc5a <tcpip_thread+0x22>
 800dc84:	2000bcc0 	.word	0x2000bcc0
 800dc88:	200084e4 	.word	0x200084e4
 800dc8c:	200084e8 	.word	0x200084e8
 800dc90:	200084ec 	.word	0x200084ec
 800dc94:	0801c158 	.word	0x0801c158
 800dc98:	0801c188 	.word	0x0801c188
 800dc9c:	0801c1a8 	.word	0x0801c1a8

0800dca0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	2b02      	cmp	r3, #2
 800dcae:	d026      	beq.n	800dcfe <tcpip_thread_handle_msg+0x5e>
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	dc2b      	bgt.n	800dd0c <tcpip_thread_handle_msg+0x6c>
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d002      	beq.n	800dcbe <tcpip_thread_handle_msg+0x1e>
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d015      	beq.n	800dce8 <tcpip_thread_handle_msg+0x48>
 800dcbc:	e026      	b.n	800dd0c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	6850      	ldr	r0, [r2, #4]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	6892      	ldr	r2, [r2, #8]
 800dcca:	4611      	mov	r1, r2
 800dccc:	4798      	blx	r3
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d004      	beq.n	800dcde <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f001 fcd1 	bl	800f680 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dcde:	6879      	ldr	r1, [r7, #4]
 800dce0:	2009      	movs	r0, #9
 800dce2:	f000 fe1d 	bl	800e920 <memp_free>
      break;
 800dce6:	e018      	b.n	800dd1a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	6892      	ldr	r2, [r2, #8]
 800dcf0:	4610      	mov	r0, r2
 800dcf2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800dcf4:	6879      	ldr	r1, [r7, #4]
 800dcf6:	2008      	movs	r0, #8
 800dcf8:	f000 fe12 	bl	800e920 <memp_free>
      break;
 800dcfc:	e00d      	b.n	800dd1a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	6892      	ldr	r2, [r2, #8]
 800dd06:	4610      	mov	r0, r2
 800dd08:	4798      	blx	r3
      break;
 800dd0a:	e006      	b.n	800dd1a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800dd0c:	4b05      	ldr	r3, [pc, #20]	; (800dd24 <tcpip_thread_handle_msg+0x84>)
 800dd0e:	22cf      	movs	r2, #207	; 0xcf
 800dd10:	4905      	ldr	r1, [pc, #20]	; (800dd28 <tcpip_thread_handle_msg+0x88>)
 800dd12:	4806      	ldr	r0, [pc, #24]	; (800dd2c <tcpip_thread_handle_msg+0x8c>)
 800dd14:	f00c fea8 	bl	801aa68 <iprintf>
      break;
 800dd18:	bf00      	nop
  }
}
 800dd1a:	bf00      	nop
 800dd1c:	3708      	adds	r7, #8
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	0801c158 	.word	0x0801c158
 800dd28:	0801c188 	.word	0x0801c188
 800dd2c:	0801c1a8 	.word	0x0801c1a8

0800dd30 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b086      	sub	sp, #24
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800dd3c:	481a      	ldr	r0, [pc, #104]	; (800dda8 <tcpip_inpkt+0x78>)
 800dd3e:	f00c f8c6 	bl	8019ece <sys_mbox_valid>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d105      	bne.n	800dd54 <tcpip_inpkt+0x24>
 800dd48:	4b18      	ldr	r3, [pc, #96]	; (800ddac <tcpip_inpkt+0x7c>)
 800dd4a:	22fc      	movs	r2, #252	; 0xfc
 800dd4c:	4918      	ldr	r1, [pc, #96]	; (800ddb0 <tcpip_inpkt+0x80>)
 800dd4e:	4819      	ldr	r0, [pc, #100]	; (800ddb4 <tcpip_inpkt+0x84>)
 800dd50:	f00c fe8a 	bl	801aa68 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800dd54:	2009      	movs	r0, #9
 800dd56:	f000 fd91 	bl	800e87c <memp_malloc>
 800dd5a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d102      	bne.n	800dd68 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800dd62:	f04f 33ff 	mov.w	r3, #4294967295
 800dd66:	e01a      	b.n	800dd9e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	68fa      	ldr	r2, [r7, #12]
 800dd72:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	68ba      	ldr	r2, [r7, #8]
 800dd78:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800dd80:	6979      	ldr	r1, [r7, #20]
 800dd82:	4809      	ldr	r0, [pc, #36]	; (800dda8 <tcpip_inpkt+0x78>)
 800dd84:	f00c f84a 	bl	8019e1c <sys_mbox_trypost>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d006      	beq.n	800dd9c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dd8e:	6979      	ldr	r1, [r7, #20]
 800dd90:	2009      	movs	r0, #9
 800dd92:	f000 fdc5 	bl	800e920 <memp_free>
    return ERR_MEM;
 800dd96:	f04f 33ff 	mov.w	r3, #4294967295
 800dd9a:	e000      	b.n	800dd9e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800dd9c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3718      	adds	r7, #24
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	200084ec 	.word	0x200084ec
 800ddac:	0801c158 	.word	0x0801c158
 800ddb0:	0801c1d0 	.word	0x0801c1d0
 800ddb4:	0801c1a8 	.word	0x0801c1a8

0800ddb8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ddc8:	f003 0318 	and.w	r3, r3, #24
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d006      	beq.n	800ddde <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ddd0:	4a08      	ldr	r2, [pc, #32]	; (800ddf4 <tcpip_input+0x3c>)
 800ddd2:	6839      	ldr	r1, [r7, #0]
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f7ff ffab 	bl	800dd30 <tcpip_inpkt>
 800ddda:	4603      	mov	r3, r0
 800dddc:	e005      	b.n	800ddea <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ddde:	4a06      	ldr	r2, [pc, #24]	; (800ddf8 <tcpip_input+0x40>)
 800dde0:	6839      	ldr	r1, [r7, #0]
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff ffa4 	bl	800dd30 <tcpip_inpkt>
 800dde8:	4603      	mov	r3, r0
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3708      	adds	r7, #8
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	08019c2d 	.word	0x08019c2d
 800ddf8:	08018b05 	.word	0x08018b05

0800ddfc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800de06:	4819      	ldr	r0, [pc, #100]	; (800de6c <tcpip_try_callback+0x70>)
 800de08:	f00c f861 	bl	8019ece <sys_mbox_valid>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d106      	bne.n	800de20 <tcpip_try_callback+0x24>
 800de12:	4b17      	ldr	r3, [pc, #92]	; (800de70 <tcpip_try_callback+0x74>)
 800de14:	f240 125d 	movw	r2, #349	; 0x15d
 800de18:	4916      	ldr	r1, [pc, #88]	; (800de74 <tcpip_try_callback+0x78>)
 800de1a:	4817      	ldr	r0, [pc, #92]	; (800de78 <tcpip_try_callback+0x7c>)
 800de1c:	f00c fe24 	bl	801aa68 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800de20:	2008      	movs	r0, #8
 800de22:	f000 fd2b 	bl	800e87c <memp_malloc>
 800de26:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d102      	bne.n	800de34 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800de2e:	f04f 33ff 	mov.w	r3, #4294967295
 800de32:	e017      	b.n	800de64 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2201      	movs	r2, #1
 800de38:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	683a      	ldr	r2, [r7, #0]
 800de44:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800de46:	68f9      	ldr	r1, [r7, #12]
 800de48:	4808      	ldr	r0, [pc, #32]	; (800de6c <tcpip_try_callback+0x70>)
 800de4a:	f00b ffe7 	bl	8019e1c <sys_mbox_trypost>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d006      	beq.n	800de62 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800de54:	68f9      	ldr	r1, [r7, #12]
 800de56:	2008      	movs	r0, #8
 800de58:	f000 fd62 	bl	800e920 <memp_free>
    return ERR_MEM;
 800de5c:	f04f 33ff 	mov.w	r3, #4294967295
 800de60:	e000      	b.n	800de64 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3710      	adds	r7, #16
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	200084ec 	.word	0x200084ec
 800de70:	0801c158 	.word	0x0801c158
 800de74:	0801c1d0 	.word	0x0801c1d0
 800de78:	0801c1a8 	.word	0x0801c1a8

0800de7c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af02      	add	r7, sp, #8
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
  lwip_init();
 800de86:	f000 f871 	bl	800df6c <lwip_init>

  tcpip_init_done = initfunc;
 800de8a:	4a17      	ldr	r2, [pc, #92]	; (800dee8 <tcpip_init+0x6c>)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800de90:	4a16      	ldr	r2, [pc, #88]	; (800deec <tcpip_init+0x70>)
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800de96:	2106      	movs	r1, #6
 800de98:	4815      	ldr	r0, [pc, #84]	; (800def0 <tcpip_init+0x74>)
 800de9a:	f00b ff9d 	bl	8019dd8 <sys_mbox_new>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d006      	beq.n	800deb2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800dea4:	4b13      	ldr	r3, [pc, #76]	; (800def4 <tcpip_init+0x78>)
 800dea6:	f240 2261 	movw	r2, #609	; 0x261
 800deaa:	4913      	ldr	r1, [pc, #76]	; (800def8 <tcpip_init+0x7c>)
 800deac:	4813      	ldr	r0, [pc, #76]	; (800defc <tcpip_init+0x80>)
 800deae:	f00c fddb 	bl	801aa68 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800deb2:	4813      	ldr	r0, [pc, #76]	; (800df00 <tcpip_init+0x84>)
 800deb4:	f00c f82a 	bl	8019f0c <sys_mutex_new>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	d006      	beq.n	800decc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800debe:	4b0d      	ldr	r3, [pc, #52]	; (800def4 <tcpip_init+0x78>)
 800dec0:	f240 2265 	movw	r2, #613	; 0x265
 800dec4:	490f      	ldr	r1, [pc, #60]	; (800df04 <tcpip_init+0x88>)
 800dec6:	480d      	ldr	r0, [pc, #52]	; (800defc <tcpip_init+0x80>)
 800dec8:	f00c fdce 	bl	801aa68 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800decc:	2300      	movs	r3, #0
 800dece:	9300      	str	r3, [sp, #0]
 800ded0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ded4:	2200      	movs	r2, #0
 800ded6:	490c      	ldr	r1, [pc, #48]	; (800df08 <tcpip_init+0x8c>)
 800ded8:	480c      	ldr	r0, [pc, #48]	; (800df0c <tcpip_init+0x90>)
 800deda:	f00c f84f 	bl	8019f7c <sys_thread_new>
}
 800dede:	bf00      	nop
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	200084e4 	.word	0x200084e4
 800deec:	200084e8 	.word	0x200084e8
 800def0:	200084ec 	.word	0x200084ec
 800def4:	0801c158 	.word	0x0801c158
 800def8:	0801c1e0 	.word	0x0801c1e0
 800defc:	0801c1a8 	.word	0x0801c1a8
 800df00:	2000bcc0 	.word	0x2000bcc0
 800df04:	0801c204 	.word	0x0801c204
 800df08:	0800dc39 	.word	0x0800dc39
 800df0c:	0801c228 	.word	0x0801c228

0800df10 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800df10:	b480      	push	{r7}
 800df12:	b083      	sub	sp, #12
 800df14:	af00      	add	r7, sp, #0
 800df16:	4603      	mov	r3, r0
 800df18:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800df1a:	88fb      	ldrh	r3, [r7, #6]
 800df1c:	021b      	lsls	r3, r3, #8
 800df1e:	b21a      	sxth	r2, r3
 800df20:	88fb      	ldrh	r3, [r7, #6]
 800df22:	0a1b      	lsrs	r3, r3, #8
 800df24:	b29b      	uxth	r3, r3
 800df26:	b21b      	sxth	r3, r3
 800df28:	4313      	orrs	r3, r2
 800df2a:	b21b      	sxth	r3, r3
 800df2c:	b29b      	uxth	r3, r3
}
 800df2e:	4618      	mov	r0, r3
 800df30:	370c      	adds	r7, #12
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr

0800df3a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800df3a:	b480      	push	{r7}
 800df3c:	b083      	sub	sp, #12
 800df3e:	af00      	add	r7, sp, #0
 800df40:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	061a      	lsls	r2, r3, #24
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	021b      	lsls	r3, r3, #8
 800df4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df4e:	431a      	orrs	r2, r3
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	0a1b      	lsrs	r3, r3, #8
 800df54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800df58:	431a      	orrs	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	0e1b      	lsrs	r3, r3, #24
 800df5e:	4313      	orrs	r3, r2
}
 800df60:	4618      	mov	r0, r3
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800df72:	2300      	movs	r3, #0
 800df74:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800df76:	f00b ffbb 	bl	8019ef0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800df7a:	f000 f8d5 	bl	800e128 <mem_init>
  memp_init();
 800df7e:	f000 fc31 	bl	800e7e4 <memp_init>
  pbuf_init();
  netif_init();
 800df82:	f000 fcf7 	bl	800e974 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800df86:	f007 f8f7 	bl	8015178 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800df8a:	f001 fe23 	bl	800fbd4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800df8e:	f007 f839 	bl	8015004 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800df92:	bf00      	nop
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
	...

0800df9c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b083      	sub	sp, #12
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800dfa6:	4b05      	ldr	r3, [pc, #20]	; (800dfbc <ptr_to_mem+0x20>)
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	88fb      	ldrh	r3, [r7, #6]
 800dfac:	4413      	add	r3, r2
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	370c      	adds	r7, #12
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	200084f0 	.word	0x200084f0

0800dfc0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800dfc8:	4b05      	ldr	r3, [pc, #20]	; (800dfe0 <mem_to_ptr+0x20>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	1ad3      	subs	r3, r2, r3
 800dfd0:	b29b      	uxth	r3, r3
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	370c      	adds	r7, #12
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	200084f0 	.word	0x200084f0

0800dfe4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800dfe4:	b590      	push	{r4, r7, lr}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800dfec:	4b45      	ldr	r3, [pc, #276]	; (800e104 <plug_holes+0x120>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d206      	bcs.n	800e004 <plug_holes+0x20>
 800dff6:	4b44      	ldr	r3, [pc, #272]	; (800e108 <plug_holes+0x124>)
 800dff8:	f240 12df 	movw	r2, #479	; 0x1df
 800dffc:	4943      	ldr	r1, [pc, #268]	; (800e10c <plug_holes+0x128>)
 800dffe:	4844      	ldr	r0, [pc, #272]	; (800e110 <plug_holes+0x12c>)
 800e000:	f00c fd32 	bl	801aa68 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e004:	4b43      	ldr	r3, [pc, #268]	; (800e114 <plug_holes+0x130>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d306      	bcc.n	800e01c <plug_holes+0x38>
 800e00e:	4b3e      	ldr	r3, [pc, #248]	; (800e108 <plug_holes+0x124>)
 800e010:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e014:	4940      	ldr	r1, [pc, #256]	; (800e118 <plug_holes+0x134>)
 800e016:	483e      	ldr	r0, [pc, #248]	; (800e110 <plug_holes+0x12c>)
 800e018:	f00c fd26 	bl	801aa68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	791b      	ldrb	r3, [r3, #4]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d006      	beq.n	800e032 <plug_holes+0x4e>
 800e024:	4b38      	ldr	r3, [pc, #224]	; (800e108 <plug_holes+0x124>)
 800e026:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e02a:	493c      	ldr	r1, [pc, #240]	; (800e11c <plug_holes+0x138>)
 800e02c:	4838      	ldr	r0, [pc, #224]	; (800e110 <plug_holes+0x12c>)
 800e02e:	f00c fd1b 	bl	801aa68 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	881b      	ldrh	r3, [r3, #0]
 800e036:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e03a:	d906      	bls.n	800e04a <plug_holes+0x66>
 800e03c:	4b32      	ldr	r3, [pc, #200]	; (800e108 <plug_holes+0x124>)
 800e03e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800e042:	4937      	ldr	r1, [pc, #220]	; (800e120 <plug_holes+0x13c>)
 800e044:	4832      	ldr	r0, [pc, #200]	; (800e110 <plug_holes+0x12c>)
 800e046:	f00c fd0f 	bl	801aa68 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	881b      	ldrh	r3, [r3, #0]
 800e04e:	4618      	mov	r0, r3
 800e050:	f7ff ffa4 	bl	800df9c <ptr_to_mem>
 800e054:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e056:	687a      	ldr	r2, [r7, #4]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d024      	beq.n	800e0a8 <plug_holes+0xc4>
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	791b      	ldrb	r3, [r3, #4]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d120      	bne.n	800e0a8 <plug_holes+0xc4>
 800e066:	4b2b      	ldr	r3, [pc, #172]	; (800e114 <plug_holes+0x130>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	68fa      	ldr	r2, [r7, #12]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d01b      	beq.n	800e0a8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e070:	4b2c      	ldr	r3, [pc, #176]	; (800e124 <plug_holes+0x140>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	68fa      	ldr	r2, [r7, #12]
 800e076:	429a      	cmp	r2, r3
 800e078:	d102      	bne.n	800e080 <plug_holes+0x9c>
      lfree = mem;
 800e07a:	4a2a      	ldr	r2, [pc, #168]	; (800e124 <plug_holes+0x140>)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	881a      	ldrh	r2, [r3, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	881b      	ldrh	r3, [r3, #0]
 800e08c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e090:	d00a      	beq.n	800e0a8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	881b      	ldrh	r3, [r3, #0]
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff ff80 	bl	800df9c <ptr_to_mem>
 800e09c:	4604      	mov	r4, r0
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f7ff ff8e 	bl	800dfc0 <mem_to_ptr>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	885b      	ldrh	r3, [r3, #2]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7ff ff75 	bl	800df9c <ptr_to_mem>
 800e0b2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e0b4:	68ba      	ldr	r2, [r7, #8]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d01f      	beq.n	800e0fc <plug_holes+0x118>
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	791b      	ldrb	r3, [r3, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d11b      	bne.n	800e0fc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e0c4:	4b17      	ldr	r3, [pc, #92]	; (800e124 <plug_holes+0x140>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d102      	bne.n	800e0d4 <plug_holes+0xf0>
      lfree = pmem;
 800e0ce:	4a15      	ldr	r2, [pc, #84]	; (800e124 <plug_holes+0x140>)
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	881a      	ldrh	r2, [r3, #0]
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	881b      	ldrh	r3, [r3, #0]
 800e0e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e0e4:	d00a      	beq.n	800e0fc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	881b      	ldrh	r3, [r3, #0]
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7ff ff56 	bl	800df9c <ptr_to_mem>
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	68b8      	ldr	r0, [r7, #8]
 800e0f4:	f7ff ff64 	bl	800dfc0 <mem_to_ptr>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800e0fc:	bf00      	nop
 800e0fe:	3714      	adds	r7, #20
 800e100:	46bd      	mov	sp, r7
 800e102:	bd90      	pop	{r4, r7, pc}
 800e104:	200084f0 	.word	0x200084f0
 800e108:	0801c238 	.word	0x0801c238
 800e10c:	0801c268 	.word	0x0801c268
 800e110:	0801c280 	.word	0x0801c280
 800e114:	200084f4 	.word	0x200084f4
 800e118:	0801c2a8 	.word	0x0801c2a8
 800e11c:	0801c2c4 	.word	0x0801c2c4
 800e120:	0801c2e0 	.word	0x0801c2e0
 800e124:	200084fc 	.word	0x200084fc

0800e128 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b082      	sub	sp, #8
 800e12c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e12e:	4b1f      	ldr	r3, [pc, #124]	; (800e1ac <mem_init+0x84>)
 800e130:	3303      	adds	r3, #3
 800e132:	f023 0303 	bic.w	r3, r3, #3
 800e136:	461a      	mov	r2, r3
 800e138:	4b1d      	ldr	r3, [pc, #116]	; (800e1b0 <mem_init+0x88>)
 800e13a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e13c:	4b1c      	ldr	r3, [pc, #112]	; (800e1b0 <mem_init+0x88>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e148:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2200      	movs	r2, #0
 800e14e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e156:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800e15a:	f7ff ff1f 	bl	800df9c <ptr_to_mem>
 800e15e:	4603      	mov	r3, r0
 800e160:	4a14      	ldr	r2, [pc, #80]	; (800e1b4 <mem_init+0x8c>)
 800e162:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e164:	4b13      	ldr	r3, [pc, #76]	; (800e1b4 <mem_init+0x8c>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2201      	movs	r2, #1
 800e16a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e16c:	4b11      	ldr	r3, [pc, #68]	; (800e1b4 <mem_init+0x8c>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e174:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e176:	4b0f      	ldr	r3, [pc, #60]	; (800e1b4 <mem_init+0x8c>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e17e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e180:	4b0b      	ldr	r3, [pc, #44]	; (800e1b0 <mem_init+0x88>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a0c      	ldr	r2, [pc, #48]	; (800e1b8 <mem_init+0x90>)
 800e186:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e188:	480c      	ldr	r0, [pc, #48]	; (800e1bc <mem_init+0x94>)
 800e18a:	f00b febf 	bl	8019f0c <sys_mutex_new>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d006      	beq.n	800e1a2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e194:	4b0a      	ldr	r3, [pc, #40]	; (800e1c0 <mem_init+0x98>)
 800e196:	f240 221f 	movw	r2, #543	; 0x21f
 800e19a:	490a      	ldr	r1, [pc, #40]	; (800e1c4 <mem_init+0x9c>)
 800e19c:	480a      	ldr	r0, [pc, #40]	; (800e1c8 <mem_init+0xa0>)
 800e19e:	f00c fc63 	bl	801aa68 <iprintf>
  }
}
 800e1a2:	bf00      	nop
 800e1a4:	3708      	adds	r7, #8
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	2000bcdc 	.word	0x2000bcdc
 800e1b0:	200084f0 	.word	0x200084f0
 800e1b4:	200084f4 	.word	0x200084f4
 800e1b8:	200084fc 	.word	0x200084fc
 800e1bc:	200084f8 	.word	0x200084f8
 800e1c0:	0801c238 	.word	0x0801c238
 800e1c4:	0801c30c 	.word	0x0801c30c
 800e1c8:	0801c280 	.word	0x0801c280

0800e1cc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b086      	sub	sp, #24
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7ff fef3 	bl	800dfc0 <mem_to_ptr>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	881b      	ldrh	r3, [r3, #0]
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7ff feda 	bl	800df9c <ptr_to_mem>
 800e1e8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	885b      	ldrh	r3, [r3, #2]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7ff fed4 	bl	800df9c <ptr_to_mem>
 800e1f4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	881b      	ldrh	r3, [r3, #0]
 800e1fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e1fe:	d818      	bhi.n	800e232 <mem_link_valid+0x66>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	885b      	ldrh	r3, [r3, #2]
 800e204:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e208:	d813      	bhi.n	800e232 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e20e:	8afa      	ldrh	r2, [r7, #22]
 800e210:	429a      	cmp	r2, r3
 800e212:	d004      	beq.n	800e21e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	881b      	ldrh	r3, [r3, #0]
 800e218:	8afa      	ldrh	r2, [r7, #22]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d109      	bne.n	800e232 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e21e:	4b08      	ldr	r3, [pc, #32]	; (800e240 <mem_link_valid+0x74>)
 800e220:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e222:	693a      	ldr	r2, [r7, #16]
 800e224:	429a      	cmp	r2, r3
 800e226:	d006      	beq.n	800e236 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	885b      	ldrh	r3, [r3, #2]
 800e22c:	8afa      	ldrh	r2, [r7, #22]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d001      	beq.n	800e236 <mem_link_valid+0x6a>
    return 0;
 800e232:	2300      	movs	r3, #0
 800e234:	e000      	b.n	800e238 <mem_link_valid+0x6c>
  }
  return 1;
 800e236:	2301      	movs	r3, #1
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3718      	adds	r7, #24
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	200084f4 	.word	0x200084f4

0800e244 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b088      	sub	sp, #32
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d070      	beq.n	800e334 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f003 0303 	and.w	r3, r3, #3
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00d      	beq.n	800e278 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e25c:	4b37      	ldr	r3, [pc, #220]	; (800e33c <mem_free+0xf8>)
 800e25e:	f240 2273 	movw	r2, #627	; 0x273
 800e262:	4937      	ldr	r1, [pc, #220]	; (800e340 <mem_free+0xfc>)
 800e264:	4837      	ldr	r0, [pc, #220]	; (800e344 <mem_free+0x100>)
 800e266:	f00c fbff 	bl	801aa68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e26a:	f00b fead 	bl	8019fc8 <sys_arch_protect>
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f00b feb7 	bl	8019fe4 <sys_arch_unprotect>
    return;
 800e276:	e05e      	b.n	800e336 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	3b08      	subs	r3, #8
 800e27c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e27e:	4b32      	ldr	r3, [pc, #200]	; (800e348 <mem_free+0x104>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	69fa      	ldr	r2, [r7, #28]
 800e284:	429a      	cmp	r2, r3
 800e286:	d306      	bcc.n	800e296 <mem_free+0x52>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f103 020c 	add.w	r2, r3, #12
 800e28e:	4b2f      	ldr	r3, [pc, #188]	; (800e34c <mem_free+0x108>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	429a      	cmp	r2, r3
 800e294:	d90d      	bls.n	800e2b2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e296:	4b29      	ldr	r3, [pc, #164]	; (800e33c <mem_free+0xf8>)
 800e298:	f240 227f 	movw	r2, #639	; 0x27f
 800e29c:	492c      	ldr	r1, [pc, #176]	; (800e350 <mem_free+0x10c>)
 800e29e:	4829      	ldr	r0, [pc, #164]	; (800e344 <mem_free+0x100>)
 800e2a0:	f00c fbe2 	bl	801aa68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e2a4:	f00b fe90 	bl	8019fc8 <sys_arch_protect>
 800e2a8:	6138      	str	r0, [r7, #16]
 800e2aa:	6938      	ldr	r0, [r7, #16]
 800e2ac:	f00b fe9a 	bl	8019fe4 <sys_arch_unprotect>
    return;
 800e2b0:	e041      	b.n	800e336 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e2b2:	4828      	ldr	r0, [pc, #160]	; (800e354 <mem_free+0x110>)
 800e2b4:	f00b fe46 	bl	8019f44 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	791b      	ldrb	r3, [r3, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d110      	bne.n	800e2e2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e2c0:	4b1e      	ldr	r3, [pc, #120]	; (800e33c <mem_free+0xf8>)
 800e2c2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800e2c6:	4924      	ldr	r1, [pc, #144]	; (800e358 <mem_free+0x114>)
 800e2c8:	481e      	ldr	r0, [pc, #120]	; (800e344 <mem_free+0x100>)
 800e2ca:	f00c fbcd 	bl	801aa68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e2ce:	4821      	ldr	r0, [pc, #132]	; (800e354 <mem_free+0x110>)
 800e2d0:	f00b fe47 	bl	8019f62 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e2d4:	f00b fe78 	bl	8019fc8 <sys_arch_protect>
 800e2d8:	6178      	str	r0, [r7, #20]
 800e2da:	6978      	ldr	r0, [r7, #20]
 800e2dc:	f00b fe82 	bl	8019fe4 <sys_arch_unprotect>
    return;
 800e2e0:	e029      	b.n	800e336 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e2e2:	69f8      	ldr	r0, [r7, #28]
 800e2e4:	f7ff ff72 	bl	800e1cc <mem_link_valid>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d110      	bne.n	800e310 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e2ee:	4b13      	ldr	r3, [pc, #76]	; (800e33c <mem_free+0xf8>)
 800e2f0:	f240 2295 	movw	r2, #661	; 0x295
 800e2f4:	4919      	ldr	r1, [pc, #100]	; (800e35c <mem_free+0x118>)
 800e2f6:	4813      	ldr	r0, [pc, #76]	; (800e344 <mem_free+0x100>)
 800e2f8:	f00c fbb6 	bl	801aa68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e2fc:	4815      	ldr	r0, [pc, #84]	; (800e354 <mem_free+0x110>)
 800e2fe:	f00b fe30 	bl	8019f62 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e302:	f00b fe61 	bl	8019fc8 <sys_arch_protect>
 800e306:	61b8      	str	r0, [r7, #24]
 800e308:	69b8      	ldr	r0, [r7, #24]
 800e30a:	f00b fe6b 	bl	8019fe4 <sys_arch_unprotect>
    return;
 800e30e:	e012      	b.n	800e336 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	2200      	movs	r2, #0
 800e314:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e316:	4b12      	ldr	r3, [pc, #72]	; (800e360 <mem_free+0x11c>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	69fa      	ldr	r2, [r7, #28]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d202      	bcs.n	800e326 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e320:	4a0f      	ldr	r2, [pc, #60]	; (800e360 <mem_free+0x11c>)
 800e322:	69fb      	ldr	r3, [r7, #28]
 800e324:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e326:	69f8      	ldr	r0, [r7, #28]
 800e328:	f7ff fe5c 	bl	800dfe4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e32c:	4809      	ldr	r0, [pc, #36]	; (800e354 <mem_free+0x110>)
 800e32e:	f00b fe18 	bl	8019f62 <sys_mutex_unlock>
 800e332:	e000      	b.n	800e336 <mem_free+0xf2>
    return;
 800e334:	bf00      	nop
}
 800e336:	3720      	adds	r7, #32
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}
 800e33c:	0801c238 	.word	0x0801c238
 800e340:	0801c328 	.word	0x0801c328
 800e344:	0801c280 	.word	0x0801c280
 800e348:	200084f0 	.word	0x200084f0
 800e34c:	200084f4 	.word	0x200084f4
 800e350:	0801c34c 	.word	0x0801c34c
 800e354:	200084f8 	.word	0x200084f8
 800e358:	0801c368 	.word	0x0801c368
 800e35c:	0801c390 	.word	0x0801c390
 800e360:	200084fc 	.word	0x200084fc

0800e364 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b088      	sub	sp, #32
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	460b      	mov	r3, r1
 800e36e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e370:	887b      	ldrh	r3, [r7, #2]
 800e372:	3303      	adds	r3, #3
 800e374:	b29b      	uxth	r3, r3
 800e376:	f023 0303 	bic.w	r3, r3, #3
 800e37a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e37c:	8bfb      	ldrh	r3, [r7, #30]
 800e37e:	2b0b      	cmp	r3, #11
 800e380:	d801      	bhi.n	800e386 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e382:	230c      	movs	r3, #12
 800e384:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e386:	8bfb      	ldrh	r3, [r7, #30]
 800e388:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e38c:	d803      	bhi.n	800e396 <mem_trim+0x32>
 800e38e:	8bfa      	ldrh	r2, [r7, #30]
 800e390:	887b      	ldrh	r3, [r7, #2]
 800e392:	429a      	cmp	r2, r3
 800e394:	d201      	bcs.n	800e39a <mem_trim+0x36>
    return NULL;
 800e396:	2300      	movs	r3, #0
 800e398:	e0d8      	b.n	800e54c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e39a:	4b6e      	ldr	r3, [pc, #440]	; (800e554 <mem_trim+0x1f0>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d304      	bcc.n	800e3ae <mem_trim+0x4a>
 800e3a4:	4b6c      	ldr	r3, [pc, #432]	; (800e558 <mem_trim+0x1f4>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d306      	bcc.n	800e3bc <mem_trim+0x58>
 800e3ae:	4b6b      	ldr	r3, [pc, #428]	; (800e55c <mem_trim+0x1f8>)
 800e3b0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e3b4:	496a      	ldr	r1, [pc, #424]	; (800e560 <mem_trim+0x1fc>)
 800e3b6:	486b      	ldr	r0, [pc, #428]	; (800e564 <mem_trim+0x200>)
 800e3b8:	f00c fb56 	bl	801aa68 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e3bc:	4b65      	ldr	r3, [pc, #404]	; (800e554 <mem_trim+0x1f0>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d304      	bcc.n	800e3d0 <mem_trim+0x6c>
 800e3c6:	4b64      	ldr	r3, [pc, #400]	; (800e558 <mem_trim+0x1f4>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d307      	bcc.n	800e3e0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e3d0:	f00b fdfa 	bl	8019fc8 <sys_arch_protect>
 800e3d4:	60b8      	str	r0, [r7, #8]
 800e3d6:	68b8      	ldr	r0, [r7, #8]
 800e3d8:	f00b fe04 	bl	8019fe4 <sys_arch_unprotect>
    return rmem;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	e0b5      	b.n	800e54c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	3b08      	subs	r3, #8
 800e3e4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e3e6:	69b8      	ldr	r0, [r7, #24]
 800e3e8:	f7ff fdea 	bl	800dfc0 <mem_to_ptr>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	881a      	ldrh	r2, [r3, #0]
 800e3f4:	8afb      	ldrh	r3, [r7, #22]
 800e3f6:	1ad3      	subs	r3, r2, r3
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	3b08      	subs	r3, #8
 800e3fc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e3fe:	8bfa      	ldrh	r2, [r7, #30]
 800e400:	8abb      	ldrh	r3, [r7, #20]
 800e402:	429a      	cmp	r2, r3
 800e404:	d906      	bls.n	800e414 <mem_trim+0xb0>
 800e406:	4b55      	ldr	r3, [pc, #340]	; (800e55c <mem_trim+0x1f8>)
 800e408:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800e40c:	4956      	ldr	r1, [pc, #344]	; (800e568 <mem_trim+0x204>)
 800e40e:	4855      	ldr	r0, [pc, #340]	; (800e564 <mem_trim+0x200>)
 800e410:	f00c fb2a 	bl	801aa68 <iprintf>
  if (newsize > size) {
 800e414:	8bfa      	ldrh	r2, [r7, #30]
 800e416:	8abb      	ldrh	r3, [r7, #20]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d901      	bls.n	800e420 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800e41c:	2300      	movs	r3, #0
 800e41e:	e095      	b.n	800e54c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e420:	8bfa      	ldrh	r2, [r7, #30]
 800e422:	8abb      	ldrh	r3, [r7, #20]
 800e424:	429a      	cmp	r2, r3
 800e426:	d101      	bne.n	800e42c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	e08f      	b.n	800e54c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e42c:	484f      	ldr	r0, [pc, #316]	; (800e56c <mem_trim+0x208>)
 800e42e:	f00b fd89 	bl	8019f44 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	881b      	ldrh	r3, [r3, #0]
 800e436:	4618      	mov	r0, r3
 800e438:	f7ff fdb0 	bl	800df9c <ptr_to_mem>
 800e43c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	791b      	ldrb	r3, [r3, #4]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d13f      	bne.n	800e4c6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	881b      	ldrh	r3, [r3, #0]
 800e44a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e44e:	d106      	bne.n	800e45e <mem_trim+0xfa>
 800e450:	4b42      	ldr	r3, [pc, #264]	; (800e55c <mem_trim+0x1f8>)
 800e452:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e456:	4946      	ldr	r1, [pc, #280]	; (800e570 <mem_trim+0x20c>)
 800e458:	4842      	ldr	r0, [pc, #264]	; (800e564 <mem_trim+0x200>)
 800e45a:	f00c fb05 	bl	801aa68 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	881b      	ldrh	r3, [r3, #0]
 800e462:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e464:	8afa      	ldrh	r2, [r7, #22]
 800e466:	8bfb      	ldrh	r3, [r7, #30]
 800e468:	4413      	add	r3, r2
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	3308      	adds	r3, #8
 800e46e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e470:	4b40      	ldr	r3, [pc, #256]	; (800e574 <mem_trim+0x210>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	693a      	ldr	r2, [r7, #16]
 800e476:	429a      	cmp	r2, r3
 800e478:	d106      	bne.n	800e488 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e47a:	89fb      	ldrh	r3, [r7, #14]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7ff fd8d 	bl	800df9c <ptr_to_mem>
 800e482:	4603      	mov	r3, r0
 800e484:	4a3b      	ldr	r2, [pc, #236]	; (800e574 <mem_trim+0x210>)
 800e486:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e488:	89fb      	ldrh	r3, [r7, #14]
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7ff fd86 	bl	800df9c <ptr_to_mem>
 800e490:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	2200      	movs	r2, #0
 800e496:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	89ba      	ldrh	r2, [r7, #12]
 800e49c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	8afa      	ldrh	r2, [r7, #22]
 800e4a2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e4a4:	69bb      	ldr	r3, [r7, #24]
 800e4a6:	89fa      	ldrh	r2, [r7, #14]
 800e4a8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	881b      	ldrh	r3, [r3, #0]
 800e4ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e4b2:	d047      	beq.n	800e544 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	881b      	ldrh	r3, [r3, #0]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7ff fd6f 	bl	800df9c <ptr_to_mem>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	89fb      	ldrh	r3, [r7, #14]
 800e4c2:	8053      	strh	r3, [r2, #2]
 800e4c4:	e03e      	b.n	800e544 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e4c6:	8bfb      	ldrh	r3, [r7, #30]
 800e4c8:	f103 0214 	add.w	r2, r3, #20
 800e4cc:	8abb      	ldrh	r3, [r7, #20]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d838      	bhi.n	800e544 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e4d2:	8afa      	ldrh	r2, [r7, #22]
 800e4d4:	8bfb      	ldrh	r3, [r7, #30]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	3308      	adds	r3, #8
 800e4dc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e4de:	69bb      	ldr	r3, [r7, #24]
 800e4e0:	881b      	ldrh	r3, [r3, #0]
 800e4e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e4e6:	d106      	bne.n	800e4f6 <mem_trim+0x192>
 800e4e8:	4b1c      	ldr	r3, [pc, #112]	; (800e55c <mem_trim+0x1f8>)
 800e4ea:	f240 3216 	movw	r2, #790	; 0x316
 800e4ee:	4920      	ldr	r1, [pc, #128]	; (800e570 <mem_trim+0x20c>)
 800e4f0:	481c      	ldr	r0, [pc, #112]	; (800e564 <mem_trim+0x200>)
 800e4f2:	f00c fab9 	bl	801aa68 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e4f6:	89fb      	ldrh	r3, [r7, #14]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7ff fd4f 	bl	800df9c <ptr_to_mem>
 800e4fe:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e500:	4b1c      	ldr	r3, [pc, #112]	; (800e574 <mem_trim+0x210>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	693a      	ldr	r2, [r7, #16]
 800e506:	429a      	cmp	r2, r3
 800e508:	d202      	bcs.n	800e510 <mem_trim+0x1ac>
      lfree = mem2;
 800e50a:	4a1a      	ldr	r2, [pc, #104]	; (800e574 <mem_trim+0x210>)
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	2200      	movs	r2, #0
 800e514:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e516:	69bb      	ldr	r3, [r7, #24]
 800e518:	881a      	ldrh	r2, [r3, #0]
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	8afa      	ldrh	r2, [r7, #22]
 800e522:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e524:	69bb      	ldr	r3, [r7, #24]
 800e526:	89fa      	ldrh	r2, [r7, #14]
 800e528:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	881b      	ldrh	r3, [r3, #0]
 800e52e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e532:	d007      	beq.n	800e544 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	881b      	ldrh	r3, [r3, #0]
 800e538:	4618      	mov	r0, r3
 800e53a:	f7ff fd2f 	bl	800df9c <ptr_to_mem>
 800e53e:	4602      	mov	r2, r0
 800e540:	89fb      	ldrh	r3, [r7, #14]
 800e542:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e544:	4809      	ldr	r0, [pc, #36]	; (800e56c <mem_trim+0x208>)
 800e546:	f00b fd0c 	bl	8019f62 <sys_mutex_unlock>
  return rmem;
 800e54a:	687b      	ldr	r3, [r7, #4]
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3720      	adds	r7, #32
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	200084f0 	.word	0x200084f0
 800e558:	200084f4 	.word	0x200084f4
 800e55c:	0801c238 	.word	0x0801c238
 800e560:	0801c3c4 	.word	0x0801c3c4
 800e564:	0801c280 	.word	0x0801c280
 800e568:	0801c3dc 	.word	0x0801c3dc
 800e56c:	200084f8 	.word	0x200084f8
 800e570:	0801c3fc 	.word	0x0801c3fc
 800e574:	200084fc 	.word	0x200084fc

0800e578 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b088      	sub	sp, #32
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	4603      	mov	r3, r0
 800e580:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e582:	88fb      	ldrh	r3, [r7, #6]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d101      	bne.n	800e58c <mem_malloc+0x14>
    return NULL;
 800e588:	2300      	movs	r3, #0
 800e58a:	e0e2      	b.n	800e752 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e58c:	88fb      	ldrh	r3, [r7, #6]
 800e58e:	3303      	adds	r3, #3
 800e590:	b29b      	uxth	r3, r3
 800e592:	f023 0303 	bic.w	r3, r3, #3
 800e596:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e598:	8bbb      	ldrh	r3, [r7, #28]
 800e59a:	2b0b      	cmp	r3, #11
 800e59c:	d801      	bhi.n	800e5a2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e59e:	230c      	movs	r3, #12
 800e5a0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e5a2:	8bbb      	ldrh	r3, [r7, #28]
 800e5a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e5a8:	d803      	bhi.n	800e5b2 <mem_malloc+0x3a>
 800e5aa:	8bba      	ldrh	r2, [r7, #28]
 800e5ac:	88fb      	ldrh	r3, [r7, #6]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d201      	bcs.n	800e5b6 <mem_malloc+0x3e>
    return NULL;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	e0cd      	b.n	800e752 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e5b6:	4869      	ldr	r0, [pc, #420]	; (800e75c <mem_malloc+0x1e4>)
 800e5b8:	f00b fcc4 	bl	8019f44 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e5bc:	4b68      	ldr	r3, [pc, #416]	; (800e760 <mem_malloc+0x1e8>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7ff fcfd 	bl	800dfc0 <mem_to_ptr>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	83fb      	strh	r3, [r7, #30]
 800e5ca:	e0b7      	b.n	800e73c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e5cc:	8bfb      	ldrh	r3, [r7, #30]
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7ff fce4 	bl	800df9c <ptr_to_mem>
 800e5d4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	791b      	ldrb	r3, [r3, #4]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	f040 80a7 	bne.w	800e72e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	881b      	ldrh	r3, [r3, #0]
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	8bfb      	ldrh	r3, [r7, #30]
 800e5e8:	1ad3      	subs	r3, r2, r3
 800e5ea:	f1a3 0208 	sub.w	r2, r3, #8
 800e5ee:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	f0c0 809c 	bcc.w	800e72e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	881b      	ldrh	r3, [r3, #0]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	8bfb      	ldrh	r3, [r7, #30]
 800e5fe:	1ad3      	subs	r3, r2, r3
 800e600:	f1a3 0208 	sub.w	r2, r3, #8
 800e604:	8bbb      	ldrh	r3, [r7, #28]
 800e606:	3314      	adds	r3, #20
 800e608:	429a      	cmp	r2, r3
 800e60a:	d333      	bcc.n	800e674 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e60c:	8bfa      	ldrh	r2, [r7, #30]
 800e60e:	8bbb      	ldrh	r3, [r7, #28]
 800e610:	4413      	add	r3, r2
 800e612:	b29b      	uxth	r3, r3
 800e614:	3308      	adds	r3, #8
 800e616:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e618:	8a7b      	ldrh	r3, [r7, #18]
 800e61a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e61e:	d106      	bne.n	800e62e <mem_malloc+0xb6>
 800e620:	4b50      	ldr	r3, [pc, #320]	; (800e764 <mem_malloc+0x1ec>)
 800e622:	f240 3287 	movw	r2, #903	; 0x387
 800e626:	4950      	ldr	r1, [pc, #320]	; (800e768 <mem_malloc+0x1f0>)
 800e628:	4850      	ldr	r0, [pc, #320]	; (800e76c <mem_malloc+0x1f4>)
 800e62a:	f00c fa1d 	bl	801aa68 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e62e:	8a7b      	ldrh	r3, [r7, #18]
 800e630:	4618      	mov	r0, r3
 800e632:	f7ff fcb3 	bl	800df9c <ptr_to_mem>
 800e636:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2200      	movs	r2, #0
 800e63c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	881a      	ldrh	r2, [r3, #0]
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	8bfa      	ldrh	r2, [r7, #30]
 800e64a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	8a7a      	ldrh	r2, [r7, #18]
 800e650:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	2201      	movs	r2, #1
 800e656:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	881b      	ldrh	r3, [r3, #0]
 800e65c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e660:	d00b      	beq.n	800e67a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	881b      	ldrh	r3, [r3, #0]
 800e666:	4618      	mov	r0, r3
 800e668:	f7ff fc98 	bl	800df9c <ptr_to_mem>
 800e66c:	4602      	mov	r2, r0
 800e66e:	8a7b      	ldrh	r3, [r7, #18]
 800e670:	8053      	strh	r3, [r2, #2]
 800e672:	e002      	b.n	800e67a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	2201      	movs	r2, #1
 800e678:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e67a:	4b39      	ldr	r3, [pc, #228]	; (800e760 <mem_malloc+0x1e8>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	697a      	ldr	r2, [r7, #20]
 800e680:	429a      	cmp	r2, r3
 800e682:	d127      	bne.n	800e6d4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e684:	4b36      	ldr	r3, [pc, #216]	; (800e760 <mem_malloc+0x1e8>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e68a:	e005      	b.n	800e698 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	881b      	ldrh	r3, [r3, #0]
 800e690:	4618      	mov	r0, r3
 800e692:	f7ff fc83 	bl	800df9c <ptr_to_mem>
 800e696:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	791b      	ldrb	r3, [r3, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d004      	beq.n	800e6aa <mem_malloc+0x132>
 800e6a0:	4b33      	ldr	r3, [pc, #204]	; (800e770 <mem_malloc+0x1f8>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	69ba      	ldr	r2, [r7, #24]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d1f0      	bne.n	800e68c <mem_malloc+0x114>
          }
          lfree = cur;
 800e6aa:	4a2d      	ldr	r2, [pc, #180]	; (800e760 <mem_malloc+0x1e8>)
 800e6ac:	69bb      	ldr	r3, [r7, #24]
 800e6ae:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e6b0:	4b2b      	ldr	r3, [pc, #172]	; (800e760 <mem_malloc+0x1e8>)
 800e6b2:	681a      	ldr	r2, [r3, #0]
 800e6b4:	4b2e      	ldr	r3, [pc, #184]	; (800e770 <mem_malloc+0x1f8>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d00b      	beq.n	800e6d4 <mem_malloc+0x15c>
 800e6bc:	4b28      	ldr	r3, [pc, #160]	; (800e760 <mem_malloc+0x1e8>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	791b      	ldrb	r3, [r3, #4]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d006      	beq.n	800e6d4 <mem_malloc+0x15c>
 800e6c6:	4b27      	ldr	r3, [pc, #156]	; (800e764 <mem_malloc+0x1ec>)
 800e6c8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e6cc:	4929      	ldr	r1, [pc, #164]	; (800e774 <mem_malloc+0x1fc>)
 800e6ce:	4827      	ldr	r0, [pc, #156]	; (800e76c <mem_malloc+0x1f4>)
 800e6d0:	f00c f9ca 	bl	801aa68 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e6d4:	4821      	ldr	r0, [pc, #132]	; (800e75c <mem_malloc+0x1e4>)
 800e6d6:	f00b fc44 	bl	8019f62 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e6da:	8bba      	ldrh	r2, [r7, #28]
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	4413      	add	r3, r2
 800e6e0:	3308      	adds	r3, #8
 800e6e2:	4a23      	ldr	r2, [pc, #140]	; (800e770 <mem_malloc+0x1f8>)
 800e6e4:	6812      	ldr	r2, [r2, #0]
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d906      	bls.n	800e6f8 <mem_malloc+0x180>
 800e6ea:	4b1e      	ldr	r3, [pc, #120]	; (800e764 <mem_malloc+0x1ec>)
 800e6ec:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e6f0:	4921      	ldr	r1, [pc, #132]	; (800e778 <mem_malloc+0x200>)
 800e6f2:	481e      	ldr	r0, [pc, #120]	; (800e76c <mem_malloc+0x1f4>)
 800e6f4:	f00c f9b8 	bl	801aa68 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	f003 0303 	and.w	r3, r3, #3
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d006      	beq.n	800e710 <mem_malloc+0x198>
 800e702:	4b18      	ldr	r3, [pc, #96]	; (800e764 <mem_malloc+0x1ec>)
 800e704:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e708:	491c      	ldr	r1, [pc, #112]	; (800e77c <mem_malloc+0x204>)
 800e70a:	4818      	ldr	r0, [pc, #96]	; (800e76c <mem_malloc+0x1f4>)
 800e70c:	f00c f9ac 	bl	801aa68 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	f003 0303 	and.w	r3, r3, #3
 800e716:	2b00      	cmp	r3, #0
 800e718:	d006      	beq.n	800e728 <mem_malloc+0x1b0>
 800e71a:	4b12      	ldr	r3, [pc, #72]	; (800e764 <mem_malloc+0x1ec>)
 800e71c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e720:	4917      	ldr	r1, [pc, #92]	; (800e780 <mem_malloc+0x208>)
 800e722:	4812      	ldr	r0, [pc, #72]	; (800e76c <mem_malloc+0x1f4>)
 800e724:	f00c f9a0 	bl	801aa68 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	3308      	adds	r3, #8
 800e72c:	e011      	b.n	800e752 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e72e:	8bfb      	ldrh	r3, [r7, #30]
 800e730:	4618      	mov	r0, r3
 800e732:	f7ff fc33 	bl	800df9c <ptr_to_mem>
 800e736:	4603      	mov	r3, r0
 800e738:	881b      	ldrh	r3, [r3, #0]
 800e73a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e73c:	8bfa      	ldrh	r2, [r7, #30]
 800e73e:	8bbb      	ldrh	r3, [r7, #28]
 800e740:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800e744:	429a      	cmp	r2, r3
 800e746:	f4ff af41 	bcc.w	800e5cc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e74a:	4804      	ldr	r0, [pc, #16]	; (800e75c <mem_malloc+0x1e4>)
 800e74c:	f00b fc09 	bl	8019f62 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e750:	2300      	movs	r3, #0
}
 800e752:	4618      	mov	r0, r3
 800e754:	3720      	adds	r7, #32
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	200084f8 	.word	0x200084f8
 800e760:	200084fc 	.word	0x200084fc
 800e764:	0801c238 	.word	0x0801c238
 800e768:	0801c3fc 	.word	0x0801c3fc
 800e76c:	0801c280 	.word	0x0801c280
 800e770:	200084f4 	.word	0x200084f4
 800e774:	0801c410 	.word	0x0801c410
 800e778:	0801c42c 	.word	0x0801c42c
 800e77c:	0801c45c 	.word	0x0801c45c
 800e780:	0801c48c 	.word	0x0801c48c

0800e784 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e784:	b480      	push	{r7}
 800e786:	b085      	sub	sp, #20
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	2200      	movs	r2, #0
 800e792:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	3303      	adds	r3, #3
 800e79a:	f023 0303 	bic.w	r3, r3, #3
 800e79e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	60fb      	str	r3, [r7, #12]
 800e7a4:	e011      	b.n	800e7ca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	689b      	ldr	r3, [r3, #8]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	689b      	ldr	r3, [r3, #8]
 800e7b4:	68ba      	ldr	r2, [r7, #8]
 800e7b6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	881b      	ldrh	r3, [r3, #0]
 800e7bc:	461a      	mov	r2, r3
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	60fb      	str	r3, [r7, #12]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	885b      	ldrh	r3, [r3, #2]
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	dbe7      	blt.n	800e7a6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e7d6:	bf00      	nop
 800e7d8:	bf00      	nop
 800e7da:	3714      	adds	r7, #20
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	80fb      	strh	r3, [r7, #6]
 800e7ee:	e009      	b.n	800e804 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e7f0:	88fb      	ldrh	r3, [r7, #6]
 800e7f2:	4a08      	ldr	r2, [pc, #32]	; (800e814 <memp_init+0x30>)
 800e7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7ff ffc3 	bl	800e784 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e7fe:	88fb      	ldrh	r3, [r7, #6]
 800e800:	3301      	adds	r3, #1
 800e802:	80fb      	strh	r3, [r7, #6]
 800e804:	88fb      	ldrh	r3, [r7, #6]
 800e806:	2b0c      	cmp	r3, #12
 800e808:	d9f2      	bls.n	800e7f0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e80a:	bf00      	nop
 800e80c:	bf00      	nop
 800e80e:	3708      	adds	r7, #8
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}
 800e814:	0801f048 	.word	0x0801f048

0800e818 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e820:	f00b fbd2 	bl	8019fc8 <sys_arch_protect>
 800e824:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	689b      	ldr	r3, [r3, #8]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d015      	beq.n	800e860 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	689b      	ldr	r3, [r3, #8]
 800e838:	68ba      	ldr	r2, [r7, #8]
 800e83a:	6812      	ldr	r2, [r2, #0]
 800e83c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	f003 0303 	and.w	r3, r3, #3
 800e844:	2b00      	cmp	r3, #0
 800e846:	d006      	beq.n	800e856 <do_memp_malloc_pool+0x3e>
 800e848:	4b09      	ldr	r3, [pc, #36]	; (800e870 <do_memp_malloc_pool+0x58>)
 800e84a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e84e:	4909      	ldr	r1, [pc, #36]	; (800e874 <do_memp_malloc_pool+0x5c>)
 800e850:	4809      	ldr	r0, [pc, #36]	; (800e878 <do_memp_malloc_pool+0x60>)
 800e852:	f00c f909 	bl	801aa68 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f00b fbc4 	bl	8019fe4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	e003      	b.n	800e868 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f00b fbbf 	bl	8019fe4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e866:	2300      	movs	r3, #0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3710      	adds	r7, #16
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	0801c4b0 	.word	0x0801c4b0
 800e874:	0801c4e0 	.word	0x0801c4e0
 800e878:	0801c504 	.word	0x0801c504

0800e87c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
 800e882:	4603      	mov	r3, r0
 800e884:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e886:	79fb      	ldrb	r3, [r7, #7]
 800e888:	2b0c      	cmp	r3, #12
 800e88a:	d908      	bls.n	800e89e <memp_malloc+0x22>
 800e88c:	4b0a      	ldr	r3, [pc, #40]	; (800e8b8 <memp_malloc+0x3c>)
 800e88e:	f240 1257 	movw	r2, #343	; 0x157
 800e892:	490a      	ldr	r1, [pc, #40]	; (800e8bc <memp_malloc+0x40>)
 800e894:	480a      	ldr	r0, [pc, #40]	; (800e8c0 <memp_malloc+0x44>)
 800e896:	f00c f8e7 	bl	801aa68 <iprintf>
 800e89a:	2300      	movs	r3, #0
 800e89c:	e008      	b.n	800e8b0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e89e:	79fb      	ldrb	r3, [r7, #7]
 800e8a0:	4a08      	ldr	r2, [pc, #32]	; (800e8c4 <memp_malloc+0x48>)
 800e8a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7ff ffb6 	bl	800e818 <do_memp_malloc_pool>
 800e8ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3710      	adds	r7, #16
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	0801c4b0 	.word	0x0801c4b0
 800e8bc:	0801c540 	.word	0x0801c540
 800e8c0:	0801c504 	.word	0x0801c504
 800e8c4:	0801f048 	.word	0x0801f048

0800e8c8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	f003 0303 	and.w	r3, r3, #3
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d006      	beq.n	800e8ea <do_memp_free_pool+0x22>
 800e8dc:	4b0d      	ldr	r3, [pc, #52]	; (800e914 <do_memp_free_pool+0x4c>)
 800e8de:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e8e2:	490d      	ldr	r1, [pc, #52]	; (800e918 <do_memp_free_pool+0x50>)
 800e8e4:	480d      	ldr	r0, [pc, #52]	; (800e91c <do_memp_free_pool+0x54>)
 800e8e6:	f00c f8bf 	bl	801aa68 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e8ee:	f00b fb6b 	bl	8019fc8 <sys_arch_protect>
 800e8f2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	689b      	ldr	r3, [r3, #8]
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e906:	68b8      	ldr	r0, [r7, #8]
 800e908:	f00b fb6c 	bl	8019fe4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e90c:	bf00      	nop
 800e90e:	3710      	adds	r7, #16
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}
 800e914:	0801c4b0 	.word	0x0801c4b0
 800e918:	0801c560 	.word	0x0801c560
 800e91c:	0801c504 	.word	0x0801c504

0800e920 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	4603      	mov	r3, r0
 800e928:	6039      	str	r1, [r7, #0]
 800e92a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e92c:	79fb      	ldrb	r3, [r7, #7]
 800e92e:	2b0c      	cmp	r3, #12
 800e930:	d907      	bls.n	800e942 <memp_free+0x22>
 800e932:	4b0c      	ldr	r3, [pc, #48]	; (800e964 <memp_free+0x44>)
 800e934:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e938:	490b      	ldr	r1, [pc, #44]	; (800e968 <memp_free+0x48>)
 800e93a:	480c      	ldr	r0, [pc, #48]	; (800e96c <memp_free+0x4c>)
 800e93c:	f00c f894 	bl	801aa68 <iprintf>
 800e940:	e00c      	b.n	800e95c <memp_free+0x3c>

  if (mem == NULL) {
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d008      	beq.n	800e95a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e948:	79fb      	ldrb	r3, [r7, #7]
 800e94a:	4a09      	ldr	r2, [pc, #36]	; (800e970 <memp_free+0x50>)
 800e94c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e950:	6839      	ldr	r1, [r7, #0]
 800e952:	4618      	mov	r0, r3
 800e954:	f7ff ffb8 	bl	800e8c8 <do_memp_free_pool>
 800e958:	e000      	b.n	800e95c <memp_free+0x3c>
    return;
 800e95a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	0801c4b0 	.word	0x0801c4b0
 800e968:	0801c580 	.word	0x0801c580
 800e96c:	0801c504 	.word	0x0801c504
 800e970:	0801f048 	.word	0x0801f048

0800e974 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e974:	b480      	push	{r7}
 800e976:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e978:	bf00      	nop
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr
	...

0800e984 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b086      	sub	sp, #24
 800e988:	af00      	add	r7, sp, #0
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	60b9      	str	r1, [r7, #8]
 800e98e:	607a      	str	r2, [r7, #4]
 800e990:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d108      	bne.n	800e9aa <netif_add+0x26>
 800e998:	4b5b      	ldr	r3, [pc, #364]	; (800eb08 <netif_add+0x184>)
 800e99a:	f240 1227 	movw	r2, #295	; 0x127
 800e99e:	495b      	ldr	r1, [pc, #364]	; (800eb0c <netif_add+0x188>)
 800e9a0:	485b      	ldr	r0, [pc, #364]	; (800eb10 <netif_add+0x18c>)
 800e9a2:	f00c f861 	bl	801aa68 <iprintf>
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	e0a9      	b.n	800eafe <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d108      	bne.n	800e9c2 <netif_add+0x3e>
 800e9b0:	4b55      	ldr	r3, [pc, #340]	; (800eb08 <netif_add+0x184>)
 800e9b2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e9b6:	4957      	ldr	r1, [pc, #348]	; (800eb14 <netif_add+0x190>)
 800e9b8:	4855      	ldr	r0, [pc, #340]	; (800eb10 <netif_add+0x18c>)
 800e9ba:	f00c f855 	bl	801aa68 <iprintf>
 800e9be:	2300      	movs	r3, #0
 800e9c0:	e09d      	b.n	800eafe <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d101      	bne.n	800e9cc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e9c8:	4b53      	ldr	r3, [pc, #332]	; (800eb18 <netif_add+0x194>)
 800e9ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d101      	bne.n	800e9d6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e9d2:	4b51      	ldr	r3, [pc, #324]	; (800eb18 <netif_add+0x194>)
 800e9d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d101      	bne.n	800e9e0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e9dc:	4b4e      	ldr	r3, [pc, #312]	; (800eb18 <netif_add+0x194>)
 800e9de:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	4a49      	ldr	r2, [pc, #292]	; (800eb1c <netif_add+0x198>)
 800e9f6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2200      	movs	r2, #0
 800ea02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	3324      	adds	r3, #36	; 0x24
 800ea0a:	2204      	movs	r2, #4
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f00b ff78 	bl	801a904 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2200      	movs	r2, #0
 800ea18:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	6a3a      	ldr	r2, [r7, #32]
 800ea1e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ea20:	4b3f      	ldr	r3, [pc, #252]	; (800eb20 <netif_add+0x19c>)
 800ea22:	781a      	ldrb	r2, [r3, #0]
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea2e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	68b9      	ldr	r1, [r7, #8]
 800ea36:	68f8      	ldr	r0, [r7, #12]
 800ea38:	f000 f914 	bl	800ec64 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ea3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	4798      	blx	r3
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d001      	beq.n	800ea4c <netif_add+0xc8>
    return NULL;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	e058      	b.n	800eafe <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea52:	2bff      	cmp	r3, #255	; 0xff
 800ea54:	d103      	bne.n	800ea5e <netif_add+0xda>
        netif->num = 0;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ea62:	4b30      	ldr	r3, [pc, #192]	; (800eb24 <netif_add+0x1a0>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	617b      	str	r3, [r7, #20]
 800ea68:	e02b      	b.n	800eac2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ea6a:	697a      	ldr	r2, [r7, #20]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d106      	bne.n	800ea80 <netif_add+0xfc>
 800ea72:	4b25      	ldr	r3, [pc, #148]	; (800eb08 <netif_add+0x184>)
 800ea74:	f240 128b 	movw	r2, #395	; 0x18b
 800ea78:	492b      	ldr	r1, [pc, #172]	; (800eb28 <netif_add+0x1a4>)
 800ea7a:	4825      	ldr	r0, [pc, #148]	; (800eb10 <netif_add+0x18c>)
 800ea7c:	f00b fff4 	bl	801aa68 <iprintf>
        num_netifs++;
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	3301      	adds	r3, #1
 800ea84:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	2bff      	cmp	r3, #255	; 0xff
 800ea8a:	dd06      	ble.n	800ea9a <netif_add+0x116>
 800ea8c:	4b1e      	ldr	r3, [pc, #120]	; (800eb08 <netif_add+0x184>)
 800ea8e:	f240 128d 	movw	r2, #397	; 0x18d
 800ea92:	4926      	ldr	r1, [pc, #152]	; (800eb2c <netif_add+0x1a8>)
 800ea94:	481e      	ldr	r0, [pc, #120]	; (800eb10 <netif_add+0x18c>)
 800ea96:	f00b ffe7 	bl	801aa68 <iprintf>
        if (netif2->num == netif->num) {
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d108      	bne.n	800eabc <netif_add+0x138>
          netif->num++;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eab0:	3301      	adds	r3, #1
 800eab2:	b2da      	uxtb	r2, r3
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800eaba:	e005      	b.n	800eac8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	617b      	str	r3, [r7, #20]
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1d0      	bne.n	800ea6a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d1be      	bne.n	800ea4c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ead4:	2bfe      	cmp	r3, #254	; 0xfe
 800ead6:	d103      	bne.n	800eae0 <netif_add+0x15c>
    netif_num = 0;
 800ead8:	4b11      	ldr	r3, [pc, #68]	; (800eb20 <netif_add+0x19c>)
 800eada:	2200      	movs	r2, #0
 800eadc:	701a      	strb	r2, [r3, #0]
 800eade:	e006      	b.n	800eaee <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eae6:	3301      	adds	r3, #1
 800eae8:	b2da      	uxtb	r2, r3
 800eaea:	4b0d      	ldr	r3, [pc, #52]	; (800eb20 <netif_add+0x19c>)
 800eaec:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800eaee:	4b0d      	ldr	r3, [pc, #52]	; (800eb24 <netif_add+0x1a0>)
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800eaf6:	4a0b      	ldr	r2, [pc, #44]	; (800eb24 <netif_add+0x1a0>)
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800eafc:	68fb      	ldr	r3, [r7, #12]
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3718      	adds	r7, #24
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	0801c59c 	.word	0x0801c59c
 800eb0c:	0801c630 	.word	0x0801c630
 800eb10:	0801c5ec 	.word	0x0801c5ec
 800eb14:	0801c64c 	.word	0x0801c64c
 800eb18:	0801f0cc 	.word	0x0801f0cc
 800eb1c:	0800ef47 	.word	0x0800ef47
 800eb20:	20008534 	.word	0x20008534
 800eb24:	2000f3e8 	.word	0x2000f3e8
 800eb28:	0801c670 	.word	0x0801c670
 800eb2c:	0801c684 	.word	0x0801c684

0800eb30 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800eb3a:	6839      	ldr	r1, [r7, #0]
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f002 fb91 	bl	8011264 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800eb42:	6839      	ldr	r1, [r7, #0]
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f006 ffa3 	bl	8015a90 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800eb4a:	bf00      	nop
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
	...

0800eb54 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b086      	sub	sp, #24
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	60b9      	str	r1, [r7, #8]
 800eb5e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d106      	bne.n	800eb74 <netif_do_set_ipaddr+0x20>
 800eb66:	4b1d      	ldr	r3, [pc, #116]	; (800ebdc <netif_do_set_ipaddr+0x88>)
 800eb68:	f240 12cb 	movw	r2, #459	; 0x1cb
 800eb6c:	491c      	ldr	r1, [pc, #112]	; (800ebe0 <netif_do_set_ipaddr+0x8c>)
 800eb6e:	481d      	ldr	r0, [pc, #116]	; (800ebe4 <netif_do_set_ipaddr+0x90>)
 800eb70:	f00b ff7a 	bl	801aa68 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d106      	bne.n	800eb88 <netif_do_set_ipaddr+0x34>
 800eb7a:	4b18      	ldr	r3, [pc, #96]	; (800ebdc <netif_do_set_ipaddr+0x88>)
 800eb7c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800eb80:	4917      	ldr	r1, [pc, #92]	; (800ebe0 <netif_do_set_ipaddr+0x8c>)
 800eb82:	4818      	ldr	r0, [pc, #96]	; (800ebe4 <netif_do_set_ipaddr+0x90>)
 800eb84:	f00b ff70 	bl	801aa68 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	681a      	ldr	r2, [r3, #0]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	3304      	adds	r3, #4
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d01c      	beq.n	800ebd0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	3304      	adds	r3, #4
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800eba6:	f107 0314 	add.w	r3, r7, #20
 800ebaa:	4619      	mov	r1, r3
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7ff ffbf 	bl	800eb30 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d002      	beq.n	800ebbe <netif_do_set_ipaddr+0x6a>
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	e000      	b.n	800ebc0 <netif_do_set_ipaddr+0x6c>
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ebc4:	2101      	movs	r1, #1
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	f000 f8d2 	bl	800ed70 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ebcc:	2301      	movs	r3, #1
 800ebce:	e000      	b.n	800ebd2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3718      	adds	r7, #24
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	0801c59c 	.word	0x0801c59c
 800ebe0:	0801c6b4 	.word	0x0801c6b4
 800ebe4:	0801c5ec 	.word	0x0801c5ec

0800ebe8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b085      	sub	sp, #20
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	60b9      	str	r1, [r7, #8]
 800ebf2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	3308      	adds	r3, #8
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d00a      	beq.n	800ec18 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d002      	beq.n	800ec0e <netif_do_set_netmask+0x26>
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	e000      	b.n	800ec10 <netif_do_set_netmask+0x28>
 800ec0e:	2300      	movs	r3, #0
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ec14:	2301      	movs	r3, #1
 800ec16:	e000      	b.n	800ec1a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ec18:	2300      	movs	r3, #0
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3714      	adds	r7, #20
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr

0800ec26 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ec26:	b480      	push	{r7}
 800ec28:	b085      	sub	sp, #20
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	60f8      	str	r0, [r7, #12]
 800ec2e:	60b9      	str	r1, [r7, #8]
 800ec30:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	330c      	adds	r3, #12
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d00a      	beq.n	800ec56 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d002      	beq.n	800ec4c <netif_do_set_gw+0x26>
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	e000      	b.n	800ec4e <netif_do_set_gw+0x28>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ec52:	2301      	movs	r3, #1
 800ec54:	e000      	b.n	800ec58 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ec56:	2300      	movs	r3, #0
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3714      	adds	r7, #20
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr

0800ec64 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b088      	sub	sp, #32
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	607a      	str	r2, [r7, #4]
 800ec70:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ec72:	2300      	movs	r3, #0
 800ec74:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ec76:	2300      	movs	r3, #0
 800ec78:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d101      	bne.n	800ec84 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ec80:	4b1c      	ldr	r3, [pc, #112]	; (800ecf4 <netif_set_addr+0x90>)
 800ec82:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d101      	bne.n	800ec8e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ec8a:	4b1a      	ldr	r3, [pc, #104]	; (800ecf4 <netif_set_addr+0x90>)
 800ec8c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d101      	bne.n	800ec98 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ec94:	4b17      	ldr	r3, [pc, #92]	; (800ecf4 <netif_set_addr+0x90>)
 800ec96:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d003      	beq.n	800eca6 <netif_set_addr+0x42>
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d101      	bne.n	800ecaa <netif_set_addr+0x46>
 800eca6:	2301      	movs	r3, #1
 800eca8:	e000      	b.n	800ecac <netif_set_addr+0x48>
 800ecaa:	2300      	movs	r3, #0
 800ecac:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d006      	beq.n	800ecc2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ecb4:	f107 0310 	add.w	r3, r7, #16
 800ecb8:	461a      	mov	r2, r3
 800ecba:	68b9      	ldr	r1, [r7, #8]
 800ecbc:	68f8      	ldr	r0, [r7, #12]
 800ecbe:	f7ff ff49 	bl	800eb54 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ecc2:	69fa      	ldr	r2, [r7, #28]
 800ecc4:	6879      	ldr	r1, [r7, #4]
 800ecc6:	68f8      	ldr	r0, [r7, #12]
 800ecc8:	f7ff ff8e 	bl	800ebe8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800eccc:	69ba      	ldr	r2, [r7, #24]
 800ecce:	6839      	ldr	r1, [r7, #0]
 800ecd0:	68f8      	ldr	r0, [r7, #12]
 800ecd2:	f7ff ffa8 	bl	800ec26 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d106      	bne.n	800ecea <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ecdc:	f107 0310 	add.w	r3, r7, #16
 800ece0:	461a      	mov	r2, r3
 800ece2:	68b9      	ldr	r1, [r7, #8]
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	f7ff ff35 	bl	800eb54 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ecea:	bf00      	nop
 800ecec:	3720      	adds	r7, #32
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	0801f0cc 	.word	0x0801f0cc

0800ecf8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ed00:	4a04      	ldr	r2, [pc, #16]	; (800ed14 <netif_set_default+0x1c>)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ed06:	bf00      	nop
 800ed08:	370c      	adds	r7, #12
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	2000f3ec 	.word	0x2000f3ec

0800ed18 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d107      	bne.n	800ed36 <netif_set_up+0x1e>
 800ed26:	4b0f      	ldr	r3, [pc, #60]	; (800ed64 <netif_set_up+0x4c>)
 800ed28:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ed2c:	490e      	ldr	r1, [pc, #56]	; (800ed68 <netif_set_up+0x50>)
 800ed2e:	480f      	ldr	r0, [pc, #60]	; (800ed6c <netif_set_up+0x54>)
 800ed30:	f00b fe9a 	bl	801aa68 <iprintf>
 800ed34:	e013      	b.n	800ed5e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ed3c:	f003 0301 	and.w	r3, r3, #1
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d10c      	bne.n	800ed5e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ed4a:	f043 0301 	orr.w	r3, r3, #1
 800ed4e:	b2da      	uxtb	r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ed56:	2103      	movs	r1, #3
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f000 f809 	bl	800ed70 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ed5e:	3708      	adds	r7, #8
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	0801c59c 	.word	0x0801c59c
 800ed68:	0801c724 	.word	0x0801c724
 800ed6c:	0801c5ec 	.word	0x0801c5ec

0800ed70 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	460b      	mov	r3, r1
 800ed7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d106      	bne.n	800ed90 <netif_issue_reports+0x20>
 800ed82:	4b18      	ldr	r3, [pc, #96]	; (800ede4 <netif_issue_reports+0x74>)
 800ed84:	f240 326d 	movw	r2, #877	; 0x36d
 800ed88:	4917      	ldr	r1, [pc, #92]	; (800ede8 <netif_issue_reports+0x78>)
 800ed8a:	4818      	ldr	r0, [pc, #96]	; (800edec <netif_issue_reports+0x7c>)
 800ed8c:	f00b fe6c 	bl	801aa68 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ed96:	f003 0304 	and.w	r3, r3, #4
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d01e      	beq.n	800eddc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eda4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d017      	beq.n	800eddc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800edac:	78fb      	ldrb	r3, [r7, #3]
 800edae:	f003 0301 	and.w	r3, r3, #1
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d013      	beq.n	800edde <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	3304      	adds	r3, #4
 800edba:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d00e      	beq.n	800edde <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800edc6:	f003 0308 	and.w	r3, r3, #8
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d007      	beq.n	800edde <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	3304      	adds	r3, #4
 800edd2:	4619      	mov	r1, r3
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f009 fc5b 	bl	8018690 <etharp_request>
 800edda:	e000      	b.n	800edde <netif_issue_reports+0x6e>
    return;
 800eddc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800edde:	3708      	adds	r7, #8
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	0801c59c 	.word	0x0801c59c
 800ede8:	0801c740 	.word	0x0801c740
 800edec:	0801c5ec 	.word	0x0801c5ec

0800edf0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d107      	bne.n	800ee0e <netif_set_down+0x1e>
 800edfe:	4b12      	ldr	r3, [pc, #72]	; (800ee48 <netif_set_down+0x58>)
 800ee00:	f240 329b 	movw	r2, #923	; 0x39b
 800ee04:	4911      	ldr	r1, [pc, #68]	; (800ee4c <netif_set_down+0x5c>)
 800ee06:	4812      	ldr	r0, [pc, #72]	; (800ee50 <netif_set_down+0x60>)
 800ee08:	f00b fe2e 	bl	801aa68 <iprintf>
 800ee0c:	e019      	b.n	800ee42 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ee14:	f003 0301 	and.w	r3, r3, #1
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d012      	beq.n	800ee42 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ee22:	f023 0301 	bic.w	r3, r3, #1
 800ee26:	b2da      	uxtb	r2, r3
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ee34:	f003 0308 	and.w	r3, r3, #8
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d002      	beq.n	800ee42 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f008 ffe1 	bl	8017e04 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ee42:	3708      	adds	r7, #8
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}
 800ee48:	0801c59c 	.word	0x0801c59c
 800ee4c:	0801c764 	.word	0x0801c764
 800ee50:	0801c5ec 	.word	0x0801c5ec

0800ee54 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d107      	bne.n	800ee72 <netif_set_link_up+0x1e>
 800ee62:	4b15      	ldr	r3, [pc, #84]	; (800eeb8 <netif_set_link_up+0x64>)
 800ee64:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ee68:	4914      	ldr	r1, [pc, #80]	; (800eebc <netif_set_link_up+0x68>)
 800ee6a:	4815      	ldr	r0, [pc, #84]	; (800eec0 <netif_set_link_up+0x6c>)
 800ee6c:	f00b fdfc 	bl	801aa68 <iprintf>
 800ee70:	e01e      	b.n	800eeb0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ee78:	f003 0304 	and.w	r3, r3, #4
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d117      	bne.n	800eeb0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ee86:	f043 0304 	orr.w	r3, r3, #4
 800ee8a:	b2da      	uxtb	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f007 fa26 	bl	80162e4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ee98:	2103      	movs	r1, #3
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f7ff ff68 	bl	800ed70 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	69db      	ldr	r3, [r3, #28]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d003      	beq.n	800eeb0 <netif_set_link_up+0x5c>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	69db      	ldr	r3, [r3, #28]
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800eeb0:	3708      	adds	r7, #8
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	0801c59c 	.word	0x0801c59c
 800eebc:	0801c784 	.word	0x0801c784
 800eec0:	0801c5ec 	.word	0x0801c5ec

0800eec4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d107      	bne.n	800eee2 <netif_set_link_down+0x1e>
 800eed2:	4b11      	ldr	r3, [pc, #68]	; (800ef18 <netif_set_link_down+0x54>)
 800eed4:	f240 4206 	movw	r2, #1030	; 0x406
 800eed8:	4910      	ldr	r1, [pc, #64]	; (800ef1c <netif_set_link_down+0x58>)
 800eeda:	4811      	ldr	r0, [pc, #68]	; (800ef20 <netif_set_link_down+0x5c>)
 800eedc:	f00b fdc4 	bl	801aa68 <iprintf>
 800eee0:	e017      	b.n	800ef12 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eee8:	f003 0304 	and.w	r3, r3, #4
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d010      	beq.n	800ef12 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eef6:	f023 0304 	bic.w	r3, r3, #4
 800eefa:	b2da      	uxtb	r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	69db      	ldr	r3, [r3, #28]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d003      	beq.n	800ef12 <netif_set_link_down+0x4e>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	69db      	ldr	r3, [r3, #28]
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	0801c59c 	.word	0x0801c59c
 800ef1c:	0801c7a8 	.word	0x0801c7a8
 800ef20:	0801c5ec 	.word	0x0801c5ec

0800ef24 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b083      	sub	sp, #12
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d002      	beq.n	800ef3a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	683a      	ldr	r2, [r7, #0]
 800ef38:	61da      	str	r2, [r3, #28]
  }
}
 800ef3a:	bf00      	nop
 800ef3c:	370c      	adds	r7, #12
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef44:	4770      	bx	lr

0800ef46 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ef46:	b480      	push	{r7}
 800ef48:	b085      	sub	sp, #20
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	60f8      	str	r0, [r7, #12]
 800ef4e:	60b9      	str	r1, [r7, #8]
 800ef50:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ef52:	f06f 030b 	mvn.w	r3, #11
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3714      	adds	r7, #20
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr
	...

0800ef64 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b085      	sub	sp, #20
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ef6e:	79fb      	ldrb	r3, [r7, #7]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d013      	beq.n	800ef9c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ef74:	4b0d      	ldr	r3, [pc, #52]	; (800efac <netif_get_by_index+0x48>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	e00c      	b.n	800ef96 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ef82:	3301      	adds	r3, #1
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	79fa      	ldrb	r2, [r7, #7]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d101      	bne.n	800ef90 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	e006      	b.n	800ef9e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	60fb      	str	r3, [r7, #12]
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d1ef      	bne.n	800ef7c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ef9c:	2300      	movs	r3, #0
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3714      	adds	r7, #20
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	2000f3e8 	.word	0x2000f3e8

0800efb0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800efb6:	f00b f807 	bl	8019fc8 <sys_arch_protect>
 800efba:	6038      	str	r0, [r7, #0]
 800efbc:	4b0d      	ldr	r3, [pc, #52]	; (800eff4 <pbuf_free_ooseq+0x44>)
 800efbe:	2200      	movs	r2, #0
 800efc0:	701a      	strb	r2, [r3, #0]
 800efc2:	6838      	ldr	r0, [r7, #0]
 800efc4:	f00b f80e 	bl	8019fe4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800efc8:	4b0b      	ldr	r3, [pc, #44]	; (800eff8 <pbuf_free_ooseq+0x48>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	607b      	str	r3, [r7, #4]
 800efce:	e00a      	b.n	800efe6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d003      	beq.n	800efe0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f002 f981 	bl	80112e0 <tcp_free_ooseq>
      return;
 800efde:	e005      	b.n	800efec <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	68db      	ldr	r3, [r3, #12]
 800efe4:	607b      	str	r3, [r7, #4]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d1f1      	bne.n	800efd0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800efec:	3708      	adds	r7, #8
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	2000f3f0 	.word	0x2000f3f0
 800eff8:	2000f3f8 	.word	0x2000f3f8

0800effc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800f004:	f7ff ffd4 	bl	800efb0 <pbuf_free_ooseq>
}
 800f008:	bf00      	nop
 800f00a:	3708      	adds	r7, #8
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b082      	sub	sp, #8
 800f014:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800f016:	f00a ffd7 	bl	8019fc8 <sys_arch_protect>
 800f01a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800f01c:	4b0f      	ldr	r3, [pc, #60]	; (800f05c <pbuf_pool_is_empty+0x4c>)
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f022:	4b0e      	ldr	r3, [pc, #56]	; (800f05c <pbuf_pool_is_empty+0x4c>)
 800f024:	2201      	movs	r2, #1
 800f026:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f00a ffdb 	bl	8019fe4 <sys_arch_unprotect>

  if (!queued) {
 800f02e:	78fb      	ldrb	r3, [r7, #3]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d10f      	bne.n	800f054 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f034:	2100      	movs	r1, #0
 800f036:	480a      	ldr	r0, [pc, #40]	; (800f060 <pbuf_pool_is_empty+0x50>)
 800f038:	f7fe fee0 	bl	800ddfc <tcpip_try_callback>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d008      	beq.n	800f054 <pbuf_pool_is_empty+0x44>
 800f042:	f00a ffc1 	bl	8019fc8 <sys_arch_protect>
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	4b04      	ldr	r3, [pc, #16]	; (800f05c <pbuf_pool_is_empty+0x4c>)
 800f04a:	2200      	movs	r2, #0
 800f04c:	701a      	strb	r2, [r3, #0]
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f00a ffc8 	bl	8019fe4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f054:	bf00      	nop
 800f056:	3708      	adds	r7, #8
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	2000f3f0 	.word	0x2000f3f0
 800f060:	0800effd 	.word	0x0800effd

0800f064 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f064:	b480      	push	{r7}
 800f066:	b085      	sub	sp, #20
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	4611      	mov	r1, r2
 800f070:	461a      	mov	r2, r3
 800f072:	460b      	mov	r3, r1
 800f074:	80fb      	strh	r3, [r7, #6]
 800f076:	4613      	mov	r3, r2
 800f078:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2200      	movs	r2, #0
 800f07e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	68ba      	ldr	r2, [r7, #8]
 800f084:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	88fa      	ldrh	r2, [r7, #6]
 800f08a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	88ba      	ldrh	r2, [r7, #4]
 800f090:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f092:	8b3b      	ldrh	r3, [r7, #24]
 800f094:	b2da      	uxtb	r2, r3
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	7f3a      	ldrb	r2, [r7, #28]
 800f09e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	73da      	strb	r2, [r3, #15]
}
 800f0ac:	bf00      	nop
 800f0ae:	3714      	adds	r7, #20
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr

0800f0b8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b08c      	sub	sp, #48	; 0x30
 800f0bc:	af02      	add	r7, sp, #8
 800f0be:	4603      	mov	r3, r0
 800f0c0:	71fb      	strb	r3, [r7, #7]
 800f0c2:	460b      	mov	r3, r1
 800f0c4:	80bb      	strh	r3, [r7, #4]
 800f0c6:	4613      	mov	r3, r2
 800f0c8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f0ca:	79fb      	ldrb	r3, [r7, #7]
 800f0cc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f0ce:	887b      	ldrh	r3, [r7, #2]
 800f0d0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f0d4:	d07f      	beq.n	800f1d6 <pbuf_alloc+0x11e>
 800f0d6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f0da:	f300 80c8 	bgt.w	800f26e <pbuf_alloc+0x1b6>
 800f0de:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f0e2:	d010      	beq.n	800f106 <pbuf_alloc+0x4e>
 800f0e4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f0e8:	f300 80c1 	bgt.w	800f26e <pbuf_alloc+0x1b6>
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d002      	beq.n	800f0f6 <pbuf_alloc+0x3e>
 800f0f0:	2b41      	cmp	r3, #65	; 0x41
 800f0f2:	f040 80bc 	bne.w	800f26e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f0f6:	887a      	ldrh	r2, [r7, #2]
 800f0f8:	88bb      	ldrh	r3, [r7, #4]
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	2000      	movs	r0, #0
 800f0fe:	f000 f8d1 	bl	800f2a4 <pbuf_alloc_reference>
 800f102:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800f104:	e0bd      	b.n	800f282 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f106:	2300      	movs	r3, #0
 800f108:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800f10a:	2300      	movs	r3, #0
 800f10c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f10e:	88bb      	ldrh	r3, [r7, #4]
 800f110:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f112:	200c      	movs	r0, #12
 800f114:	f7ff fbb2 	bl	800e87c <memp_malloc>
 800f118:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d109      	bne.n	800f134 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800f120:	f7ff ff76 	bl	800f010 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f126:	2b00      	cmp	r3, #0
 800f128:	d002      	beq.n	800f130 <pbuf_alloc+0x78>
            pbuf_free(p);
 800f12a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f12c:	f000 faa8 	bl	800f680 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f130:	2300      	movs	r3, #0
 800f132:	e0a7      	b.n	800f284 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f134:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f136:	3303      	adds	r3, #3
 800f138:	b29b      	uxth	r3, r3
 800f13a:	f023 0303 	bic.w	r3, r3, #3
 800f13e:	b29b      	uxth	r3, r3
 800f140:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800f144:	b29b      	uxth	r3, r3
 800f146:	8b7a      	ldrh	r2, [r7, #26]
 800f148:	4293      	cmp	r3, r2
 800f14a:	bf28      	it	cs
 800f14c:	4613      	movcs	r3, r2
 800f14e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f150:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f152:	3310      	adds	r3, #16
 800f154:	693a      	ldr	r2, [r7, #16]
 800f156:	4413      	add	r3, r2
 800f158:	3303      	adds	r3, #3
 800f15a:	f023 0303 	bic.w	r3, r3, #3
 800f15e:	4618      	mov	r0, r3
 800f160:	89f9      	ldrh	r1, [r7, #14]
 800f162:	8b7a      	ldrh	r2, [r7, #26]
 800f164:	2300      	movs	r3, #0
 800f166:	9301      	str	r3, [sp, #4]
 800f168:	887b      	ldrh	r3, [r7, #2]
 800f16a:	9300      	str	r3, [sp, #0]
 800f16c:	460b      	mov	r3, r1
 800f16e:	4601      	mov	r1, r0
 800f170:	6938      	ldr	r0, [r7, #16]
 800f172:	f7ff ff77 	bl	800f064 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	f003 0303 	and.w	r3, r3, #3
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d006      	beq.n	800f190 <pbuf_alloc+0xd8>
 800f182:	4b42      	ldr	r3, [pc, #264]	; (800f28c <pbuf_alloc+0x1d4>)
 800f184:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f188:	4941      	ldr	r1, [pc, #260]	; (800f290 <pbuf_alloc+0x1d8>)
 800f18a:	4842      	ldr	r0, [pc, #264]	; (800f294 <pbuf_alloc+0x1dc>)
 800f18c:	f00b fc6c 	bl	801aa68 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f190:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f192:	3303      	adds	r3, #3
 800f194:	f023 0303 	bic.w	r3, r3, #3
 800f198:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f19c:	d106      	bne.n	800f1ac <pbuf_alloc+0xf4>
 800f19e:	4b3b      	ldr	r3, [pc, #236]	; (800f28c <pbuf_alloc+0x1d4>)
 800f1a0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f1a4:	493c      	ldr	r1, [pc, #240]	; (800f298 <pbuf_alloc+0x1e0>)
 800f1a6:	483b      	ldr	r0, [pc, #236]	; (800f294 <pbuf_alloc+0x1dc>)
 800f1a8:	f00b fc5e 	bl	801aa68 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d102      	bne.n	800f1b8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	627b      	str	r3, [r7, #36]	; 0x24
 800f1b6:	e002      	b.n	800f1be <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	693a      	ldr	r2, [r7, #16]
 800f1bc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f1c2:	8b7a      	ldrh	r2, [r7, #26]
 800f1c4:	89fb      	ldrh	r3, [r7, #14]
 800f1c6:	1ad3      	subs	r3, r2, r3
 800f1c8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800f1ce:	8b7b      	ldrh	r3, [r7, #26]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d19e      	bne.n	800f112 <pbuf_alloc+0x5a>
      break;
 800f1d4:	e055      	b.n	800f282 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f1d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f1d8:	3303      	adds	r3, #3
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	f023 0303 	bic.w	r3, r3, #3
 800f1e0:	b29a      	uxth	r2, r3
 800f1e2:	88bb      	ldrh	r3, [r7, #4]
 800f1e4:	3303      	adds	r3, #3
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	f023 0303 	bic.w	r3, r3, #3
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	4413      	add	r3, r2
 800f1f0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f1f2:	8b3b      	ldrh	r3, [r7, #24]
 800f1f4:	3310      	adds	r3, #16
 800f1f6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f1f8:	8b3a      	ldrh	r2, [r7, #24]
 800f1fa:	88bb      	ldrh	r3, [r7, #4]
 800f1fc:	3303      	adds	r3, #3
 800f1fe:	f023 0303 	bic.w	r3, r3, #3
 800f202:	429a      	cmp	r2, r3
 800f204:	d306      	bcc.n	800f214 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f206:	8afa      	ldrh	r2, [r7, #22]
 800f208:	88bb      	ldrh	r3, [r7, #4]
 800f20a:	3303      	adds	r3, #3
 800f20c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f210:	429a      	cmp	r2, r3
 800f212:	d201      	bcs.n	800f218 <pbuf_alloc+0x160>
        return NULL;
 800f214:	2300      	movs	r3, #0
 800f216:	e035      	b.n	800f284 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f218:	8afb      	ldrh	r3, [r7, #22]
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7ff f9ac 	bl	800e578 <mem_malloc>
 800f220:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800f222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f224:	2b00      	cmp	r3, #0
 800f226:	d101      	bne.n	800f22c <pbuf_alloc+0x174>
        return NULL;
 800f228:	2300      	movs	r3, #0
 800f22a:	e02b      	b.n	800f284 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f22c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f22e:	3310      	adds	r3, #16
 800f230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f232:	4413      	add	r3, r2
 800f234:	3303      	adds	r3, #3
 800f236:	f023 0303 	bic.w	r3, r3, #3
 800f23a:	4618      	mov	r0, r3
 800f23c:	88b9      	ldrh	r1, [r7, #4]
 800f23e:	88ba      	ldrh	r2, [r7, #4]
 800f240:	2300      	movs	r3, #0
 800f242:	9301      	str	r3, [sp, #4]
 800f244:	887b      	ldrh	r3, [r7, #2]
 800f246:	9300      	str	r3, [sp, #0]
 800f248:	460b      	mov	r3, r1
 800f24a:	4601      	mov	r1, r0
 800f24c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f24e:	f7ff ff09 	bl	800f064 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f254:	685b      	ldr	r3, [r3, #4]
 800f256:	f003 0303 	and.w	r3, r3, #3
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d010      	beq.n	800f280 <pbuf_alloc+0x1c8>
 800f25e:	4b0b      	ldr	r3, [pc, #44]	; (800f28c <pbuf_alloc+0x1d4>)
 800f260:	f44f 7291 	mov.w	r2, #290	; 0x122
 800f264:	490d      	ldr	r1, [pc, #52]	; (800f29c <pbuf_alloc+0x1e4>)
 800f266:	480b      	ldr	r0, [pc, #44]	; (800f294 <pbuf_alloc+0x1dc>)
 800f268:	f00b fbfe 	bl	801aa68 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f26c:	e008      	b.n	800f280 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f26e:	4b07      	ldr	r3, [pc, #28]	; (800f28c <pbuf_alloc+0x1d4>)
 800f270:	f240 1227 	movw	r2, #295	; 0x127
 800f274:	490a      	ldr	r1, [pc, #40]	; (800f2a0 <pbuf_alloc+0x1e8>)
 800f276:	4807      	ldr	r0, [pc, #28]	; (800f294 <pbuf_alloc+0x1dc>)
 800f278:	f00b fbf6 	bl	801aa68 <iprintf>
      return NULL;
 800f27c:	2300      	movs	r3, #0
 800f27e:	e001      	b.n	800f284 <pbuf_alloc+0x1cc>
      break;
 800f280:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f284:	4618      	mov	r0, r3
 800f286:	3728      	adds	r7, #40	; 0x28
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	0801c7cc 	.word	0x0801c7cc
 800f290:	0801c7fc 	.word	0x0801c7fc
 800f294:	0801c82c 	.word	0x0801c82c
 800f298:	0801c854 	.word	0x0801c854
 800f29c:	0801c888 	.word	0x0801c888
 800f2a0:	0801c8b4 	.word	0x0801c8b4

0800f2a4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b086      	sub	sp, #24
 800f2a8:	af02      	add	r7, sp, #8
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	807b      	strh	r3, [r7, #2]
 800f2b0:	4613      	mov	r3, r2
 800f2b2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f2b4:	883b      	ldrh	r3, [r7, #0]
 800f2b6:	2b41      	cmp	r3, #65	; 0x41
 800f2b8:	d009      	beq.n	800f2ce <pbuf_alloc_reference+0x2a>
 800f2ba:	883b      	ldrh	r3, [r7, #0]
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d006      	beq.n	800f2ce <pbuf_alloc_reference+0x2a>
 800f2c0:	4b0f      	ldr	r3, [pc, #60]	; (800f300 <pbuf_alloc_reference+0x5c>)
 800f2c2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800f2c6:	490f      	ldr	r1, [pc, #60]	; (800f304 <pbuf_alloc_reference+0x60>)
 800f2c8:	480f      	ldr	r0, [pc, #60]	; (800f308 <pbuf_alloc_reference+0x64>)
 800f2ca:	f00b fbcd 	bl	801aa68 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f2ce:	200b      	movs	r0, #11
 800f2d0:	f7ff fad4 	bl	800e87c <memp_malloc>
 800f2d4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d101      	bne.n	800f2e0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	e00b      	b.n	800f2f8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f2e0:	8879      	ldrh	r1, [r7, #2]
 800f2e2:	887a      	ldrh	r2, [r7, #2]
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	9301      	str	r3, [sp, #4]
 800f2e8:	883b      	ldrh	r3, [r7, #0]
 800f2ea:	9300      	str	r3, [sp, #0]
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	6879      	ldr	r1, [r7, #4]
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	f7ff feb7 	bl	800f064 <pbuf_init_alloced_pbuf>
  return p;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	0801c7cc 	.word	0x0801c7cc
 800f304:	0801c8d0 	.word	0x0801c8d0
 800f308:	0801c82c 	.word	0x0801c82c

0800f30c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b088      	sub	sp, #32
 800f310:	af02      	add	r7, sp, #8
 800f312:	607b      	str	r3, [r7, #4]
 800f314:	4603      	mov	r3, r0
 800f316:	73fb      	strb	r3, [r7, #15]
 800f318:	460b      	mov	r3, r1
 800f31a:	81bb      	strh	r3, [r7, #12]
 800f31c:	4613      	mov	r3, r2
 800f31e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f320:	7bfb      	ldrb	r3, [r7, #15]
 800f322:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f324:	8a7b      	ldrh	r3, [r7, #18]
 800f326:	3303      	adds	r3, #3
 800f328:	f023 0203 	bic.w	r2, r3, #3
 800f32c:	89bb      	ldrh	r3, [r7, #12]
 800f32e:	441a      	add	r2, r3
 800f330:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f332:	429a      	cmp	r2, r3
 800f334:	d901      	bls.n	800f33a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f336:	2300      	movs	r3, #0
 800f338:	e018      	b.n	800f36c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f33a:	6a3b      	ldr	r3, [r7, #32]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d007      	beq.n	800f350 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f340:	8a7b      	ldrh	r3, [r7, #18]
 800f342:	3303      	adds	r3, #3
 800f344:	f023 0303 	bic.w	r3, r3, #3
 800f348:	6a3a      	ldr	r2, [r7, #32]
 800f34a:	4413      	add	r3, r2
 800f34c:	617b      	str	r3, [r7, #20]
 800f34e:	e001      	b.n	800f354 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f350:	2300      	movs	r3, #0
 800f352:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	89b9      	ldrh	r1, [r7, #12]
 800f358:	89ba      	ldrh	r2, [r7, #12]
 800f35a:	2302      	movs	r3, #2
 800f35c:	9301      	str	r3, [sp, #4]
 800f35e:	897b      	ldrh	r3, [r7, #10]
 800f360:	9300      	str	r3, [sp, #0]
 800f362:	460b      	mov	r3, r1
 800f364:	6979      	ldr	r1, [r7, #20]
 800f366:	f7ff fe7d 	bl	800f064 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f36a:	687b      	ldr	r3, [r7, #4]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3718      	adds	r7, #24
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	460b      	mov	r3, r1
 800f37e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d106      	bne.n	800f394 <pbuf_realloc+0x20>
 800f386:	4b3a      	ldr	r3, [pc, #232]	; (800f470 <pbuf_realloc+0xfc>)
 800f388:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f38c:	4939      	ldr	r1, [pc, #228]	; (800f474 <pbuf_realloc+0x100>)
 800f38e:	483a      	ldr	r0, [pc, #232]	; (800f478 <pbuf_realloc+0x104>)
 800f390:	f00b fb6a 	bl	801aa68 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	891b      	ldrh	r3, [r3, #8]
 800f398:	887a      	ldrh	r2, [r7, #2]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d263      	bcs.n	800f466 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	891a      	ldrh	r2, [r3, #8]
 800f3a2:	887b      	ldrh	r3, [r7, #2]
 800f3a4:	1ad3      	subs	r3, r2, r3
 800f3a6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f3a8:	887b      	ldrh	r3, [r7, #2]
 800f3aa:	817b      	strh	r3, [r7, #10]
  q = p;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f3b0:	e018      	b.n	800f3e4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	895b      	ldrh	r3, [r3, #10]
 800f3b6:	897a      	ldrh	r2, [r7, #10]
 800f3b8:	1ad3      	subs	r3, r2, r3
 800f3ba:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	891a      	ldrh	r2, [r3, #8]
 800f3c0:	893b      	ldrh	r3, [r7, #8]
 800f3c2:	1ad3      	subs	r3, r2, r3
 800f3c4:	b29a      	uxth	r2, r3
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d106      	bne.n	800f3e4 <pbuf_realloc+0x70>
 800f3d6:	4b26      	ldr	r3, [pc, #152]	; (800f470 <pbuf_realloc+0xfc>)
 800f3d8:	f240 12af 	movw	r2, #431	; 0x1af
 800f3dc:	4927      	ldr	r1, [pc, #156]	; (800f47c <pbuf_realloc+0x108>)
 800f3de:	4826      	ldr	r0, [pc, #152]	; (800f478 <pbuf_realloc+0x104>)
 800f3e0:	f00b fb42 	bl	801aa68 <iprintf>
  while (rem_len > q->len) {
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	895b      	ldrh	r3, [r3, #10]
 800f3e8:	897a      	ldrh	r2, [r7, #10]
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d8e1      	bhi.n	800f3b2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	7b1b      	ldrb	r3, [r3, #12]
 800f3f2:	f003 030f 	and.w	r3, r3, #15
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d121      	bne.n	800f43e <pbuf_realloc+0xca>
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	895b      	ldrh	r3, [r3, #10]
 800f3fe:	897a      	ldrh	r2, [r7, #10]
 800f400:	429a      	cmp	r2, r3
 800f402:	d01c      	beq.n	800f43e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	7b5b      	ldrb	r3, [r3, #13]
 800f408:	f003 0302 	and.w	r3, r3, #2
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d116      	bne.n	800f43e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	685a      	ldr	r2, [r3, #4]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	1ad3      	subs	r3, r2, r3
 800f418:	b29a      	uxth	r2, r3
 800f41a:	897b      	ldrh	r3, [r7, #10]
 800f41c:	4413      	add	r3, r2
 800f41e:	b29b      	uxth	r3, r3
 800f420:	4619      	mov	r1, r3
 800f422:	68f8      	ldr	r0, [r7, #12]
 800f424:	f7fe ff9e 	bl	800e364 <mem_trim>
 800f428:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d106      	bne.n	800f43e <pbuf_realloc+0xca>
 800f430:	4b0f      	ldr	r3, [pc, #60]	; (800f470 <pbuf_realloc+0xfc>)
 800f432:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f436:	4912      	ldr	r1, [pc, #72]	; (800f480 <pbuf_realloc+0x10c>)
 800f438:	480f      	ldr	r0, [pc, #60]	; (800f478 <pbuf_realloc+0x104>)
 800f43a:	f00b fb15 	bl	801aa68 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	897a      	ldrh	r2, [r7, #10]
 800f442:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	895a      	ldrh	r2, [r3, #10]
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d004      	beq.n	800f45e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	4618      	mov	r0, r3
 800f45a:	f000 f911 	bl	800f680 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2200      	movs	r2, #0
 800f462:	601a      	str	r2, [r3, #0]
 800f464:	e000      	b.n	800f468 <pbuf_realloc+0xf4>
    return;
 800f466:	bf00      	nop

}
 800f468:	3710      	adds	r7, #16
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	0801c7cc 	.word	0x0801c7cc
 800f474:	0801c8e4 	.word	0x0801c8e4
 800f478:	0801c82c 	.word	0x0801c82c
 800f47c:	0801c8fc 	.word	0x0801c8fc
 800f480:	0801c914 	.word	0x0801c914

0800f484 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b086      	sub	sp, #24
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	4613      	mov	r3, r2
 800f490:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d106      	bne.n	800f4a6 <pbuf_add_header_impl+0x22>
 800f498:	4b2b      	ldr	r3, [pc, #172]	; (800f548 <pbuf_add_header_impl+0xc4>)
 800f49a:	f240 12df 	movw	r2, #479	; 0x1df
 800f49e:	492b      	ldr	r1, [pc, #172]	; (800f54c <pbuf_add_header_impl+0xc8>)
 800f4a0:	482b      	ldr	r0, [pc, #172]	; (800f550 <pbuf_add_header_impl+0xcc>)
 800f4a2:	f00b fae1 	bl	801aa68 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d003      	beq.n	800f4b4 <pbuf_add_header_impl+0x30>
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4b2:	d301      	bcc.n	800f4b8 <pbuf_add_header_impl+0x34>
    return 1;
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	e043      	b.n	800f540 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d101      	bne.n	800f4c2 <pbuf_add_header_impl+0x3e>
    return 0;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	e03e      	b.n	800f540 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	891a      	ldrh	r2, [r3, #8]
 800f4ca:	8a7b      	ldrh	r3, [r7, #18]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	8a7a      	ldrh	r2, [r7, #18]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d901      	bls.n	800f4da <pbuf_add_header_impl+0x56>
    return 1;
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	e032      	b.n	800f540 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	7b1b      	ldrb	r3, [r3, #12]
 800f4de:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f4e0:	8a3b      	ldrh	r3, [r7, #16]
 800f4e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00c      	beq.n	800f504 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	685a      	ldr	r2, [r3, #4]
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	425b      	negs	r3, r3
 800f4f2:	4413      	add	r3, r2
 800f4f4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	3310      	adds	r3, #16
 800f4fa:	697a      	ldr	r2, [r7, #20]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d20d      	bcs.n	800f51c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f500:	2301      	movs	r3, #1
 800f502:	e01d      	b.n	800f540 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f504:	79fb      	ldrb	r3, [r7, #7]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d006      	beq.n	800f518 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	685a      	ldr	r2, [r3, #4]
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	425b      	negs	r3, r3
 800f512:	4413      	add	r3, r2
 800f514:	617b      	str	r3, [r7, #20]
 800f516:	e001      	b.n	800f51c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f518:	2301      	movs	r3, #1
 800f51a:	e011      	b.n	800f540 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	697a      	ldr	r2, [r7, #20]
 800f520:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	895a      	ldrh	r2, [r3, #10]
 800f526:	8a7b      	ldrh	r3, [r7, #18]
 800f528:	4413      	add	r3, r2
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	891a      	ldrh	r2, [r3, #8]
 800f534:	8a7b      	ldrh	r3, [r7, #18]
 800f536:	4413      	add	r3, r2
 800f538:	b29a      	uxth	r2, r3
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	811a      	strh	r2, [r3, #8]


  return 0;
 800f53e:	2300      	movs	r3, #0
}
 800f540:	4618      	mov	r0, r3
 800f542:	3718      	adds	r7, #24
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	0801c7cc 	.word	0x0801c7cc
 800f54c:	0801c930 	.word	0x0801c930
 800f550:	0801c82c 	.word	0x0801c82c

0800f554 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f55e:	2200      	movs	r2, #0
 800f560:	6839      	ldr	r1, [r7, #0]
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7ff ff8e 	bl	800f484 <pbuf_add_header_impl>
 800f568:	4603      	mov	r3, r0
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3708      	adds	r7, #8
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
	...

0800f574 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b084      	sub	sp, #16
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d106      	bne.n	800f592 <pbuf_remove_header+0x1e>
 800f584:	4b20      	ldr	r3, [pc, #128]	; (800f608 <pbuf_remove_header+0x94>)
 800f586:	f240 224b 	movw	r2, #587	; 0x24b
 800f58a:	4920      	ldr	r1, [pc, #128]	; (800f60c <pbuf_remove_header+0x98>)
 800f58c:	4820      	ldr	r0, [pc, #128]	; (800f610 <pbuf_remove_header+0x9c>)
 800f58e:	f00b fa6b 	bl	801aa68 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d003      	beq.n	800f5a0 <pbuf_remove_header+0x2c>
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f59e:	d301      	bcc.n	800f5a4 <pbuf_remove_header+0x30>
    return 1;
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	e02c      	b.n	800f5fe <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d101      	bne.n	800f5ae <pbuf_remove_header+0x3a>
    return 0;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	e027      	b.n	800f5fe <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	895b      	ldrh	r3, [r3, #10]
 800f5b6:	89fa      	ldrh	r2, [r7, #14]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d908      	bls.n	800f5ce <pbuf_remove_header+0x5a>
 800f5bc:	4b12      	ldr	r3, [pc, #72]	; (800f608 <pbuf_remove_header+0x94>)
 800f5be:	f240 2255 	movw	r2, #597	; 0x255
 800f5c2:	4914      	ldr	r1, [pc, #80]	; (800f614 <pbuf_remove_header+0xa0>)
 800f5c4:	4812      	ldr	r0, [pc, #72]	; (800f610 <pbuf_remove_header+0x9c>)
 800f5c6:	f00b fa4f 	bl	801aa68 <iprintf>
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e017      	b.n	800f5fe <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	685a      	ldr	r2, [r3, #4]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	441a      	add	r2, r3
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	895a      	ldrh	r2, [r3, #10]
 800f5e4:	89fb      	ldrh	r3, [r7, #14]
 800f5e6:	1ad3      	subs	r3, r2, r3
 800f5e8:	b29a      	uxth	r2, r3
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	891a      	ldrh	r2, [r3, #8]
 800f5f2:	89fb      	ldrh	r3, [r7, #14]
 800f5f4:	1ad3      	subs	r3, r2, r3
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f5fc:	2300      	movs	r3, #0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3710      	adds	r7, #16
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	0801c7cc 	.word	0x0801c7cc
 800f60c:	0801c930 	.word	0x0801c930
 800f610:	0801c82c 	.word	0x0801c82c
 800f614:	0801c93c 	.word	0x0801c93c

0800f618 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
 800f620:	460b      	mov	r3, r1
 800f622:	807b      	strh	r3, [r7, #2]
 800f624:	4613      	mov	r3, r2
 800f626:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f628:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	da08      	bge.n	800f642 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f630:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f634:	425b      	negs	r3, r3
 800f636:	4619      	mov	r1, r3
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f7ff ff9b 	bl	800f574 <pbuf_remove_header>
 800f63e:	4603      	mov	r3, r0
 800f640:	e007      	b.n	800f652 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f642:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f646:	787a      	ldrb	r2, [r7, #1]
 800f648:	4619      	mov	r1, r3
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f7ff ff1a 	bl	800f484 <pbuf_add_header_impl>
 800f650:	4603      	mov	r3, r0
  }
}
 800f652:	4618      	mov	r0, r3
 800f654:	3708      	adds	r7, #8
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}

0800f65a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f65a:	b580      	push	{r7, lr}
 800f65c:	b082      	sub	sp, #8
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
 800f662:	460b      	mov	r3, r1
 800f664:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f666:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f66a:	2201      	movs	r2, #1
 800f66c:	4619      	mov	r1, r3
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f7ff ffd2 	bl	800f618 <pbuf_header_impl>
 800f674:	4603      	mov	r3, r0
}
 800f676:	4618      	mov	r0, r3
 800f678:	3708      	adds	r7, #8
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
	...

0800f680 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b088      	sub	sp, #32
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d10b      	bne.n	800f6a6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d106      	bne.n	800f6a2 <pbuf_free+0x22>
 800f694:	4b3b      	ldr	r3, [pc, #236]	; (800f784 <pbuf_free+0x104>)
 800f696:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f69a:	493b      	ldr	r1, [pc, #236]	; (800f788 <pbuf_free+0x108>)
 800f69c:	483b      	ldr	r0, [pc, #236]	; (800f78c <pbuf_free+0x10c>)
 800f69e:	f00b f9e3 	bl	801aa68 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	e069      	b.n	800f77a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f6aa:	e062      	b.n	800f772 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f6ac:	f00a fc8c 	bl	8019fc8 <sys_arch_protect>
 800f6b0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	7b9b      	ldrb	r3, [r3, #14]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d106      	bne.n	800f6c8 <pbuf_free+0x48>
 800f6ba:	4b32      	ldr	r3, [pc, #200]	; (800f784 <pbuf_free+0x104>)
 800f6bc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f6c0:	4933      	ldr	r1, [pc, #204]	; (800f790 <pbuf_free+0x110>)
 800f6c2:	4832      	ldr	r0, [pc, #200]	; (800f78c <pbuf_free+0x10c>)
 800f6c4:	f00b f9d0 	bl	801aa68 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	7b9b      	ldrb	r3, [r3, #14]
 800f6cc:	3b01      	subs	r3, #1
 800f6ce:	b2da      	uxtb	r2, r3
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	739a      	strb	r2, [r3, #14]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	7b9b      	ldrb	r3, [r3, #14]
 800f6d8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f6da:	69b8      	ldr	r0, [r7, #24]
 800f6dc:	f00a fc82 	bl	8019fe4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f6e0:	7dfb      	ldrb	r3, [r7, #23]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d143      	bne.n	800f76e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	7b1b      	ldrb	r3, [r3, #12]
 800f6f0:	f003 030f 	and.w	r3, r3, #15
 800f6f4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	7b5b      	ldrb	r3, [r3, #13]
 800f6fa:	f003 0302 	and.w	r3, r3, #2
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d011      	beq.n	800f726 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	691b      	ldr	r3, [r3, #16]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d106      	bne.n	800f71c <pbuf_free+0x9c>
 800f70e:	4b1d      	ldr	r3, [pc, #116]	; (800f784 <pbuf_free+0x104>)
 800f710:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f714:	491f      	ldr	r1, [pc, #124]	; (800f794 <pbuf_free+0x114>)
 800f716:	481d      	ldr	r0, [pc, #116]	; (800f78c <pbuf_free+0x10c>)
 800f718:	f00b f9a6 	bl	801aa68 <iprintf>
        pc->custom_free_function(p);
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	691b      	ldr	r3, [r3, #16]
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	4798      	blx	r3
 800f724:	e01d      	b.n	800f762 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f726:	7bfb      	ldrb	r3, [r7, #15]
 800f728:	2b02      	cmp	r3, #2
 800f72a:	d104      	bne.n	800f736 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f72c:	6879      	ldr	r1, [r7, #4]
 800f72e:	200c      	movs	r0, #12
 800f730:	f7ff f8f6 	bl	800e920 <memp_free>
 800f734:	e015      	b.n	800f762 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f736:	7bfb      	ldrb	r3, [r7, #15]
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d104      	bne.n	800f746 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f73c:	6879      	ldr	r1, [r7, #4]
 800f73e:	200b      	movs	r0, #11
 800f740:	f7ff f8ee 	bl	800e920 <memp_free>
 800f744:	e00d      	b.n	800f762 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f746:	7bfb      	ldrb	r3, [r7, #15]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d103      	bne.n	800f754 <pbuf_free+0xd4>
          mem_free(p);
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f7fe fd79 	bl	800e244 <mem_free>
 800f752:	e006      	b.n	800f762 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f754:	4b0b      	ldr	r3, [pc, #44]	; (800f784 <pbuf_free+0x104>)
 800f756:	f240 320f 	movw	r2, #783	; 0x30f
 800f75a:	490f      	ldr	r1, [pc, #60]	; (800f798 <pbuf_free+0x118>)
 800f75c:	480b      	ldr	r0, [pc, #44]	; (800f78c <pbuf_free+0x10c>)
 800f75e:	f00b f983 	bl	801aa68 <iprintf>
        }
      }
      count++;
 800f762:	7ffb      	ldrb	r3, [r7, #31]
 800f764:	3301      	adds	r3, #1
 800f766:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	607b      	str	r3, [r7, #4]
 800f76c:	e001      	b.n	800f772 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f76e:	2300      	movs	r3, #0
 800f770:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d199      	bne.n	800f6ac <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f778:	7ffb      	ldrb	r3, [r7, #31]
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3720      	adds	r7, #32
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
 800f782:	bf00      	nop
 800f784:	0801c7cc 	.word	0x0801c7cc
 800f788:	0801c930 	.word	0x0801c930
 800f78c:	0801c82c 	.word	0x0801c82c
 800f790:	0801c95c 	.word	0x0801c95c
 800f794:	0801c974 	.word	0x0801c974
 800f798:	0801c998 	.word	0x0801c998

0800f79c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f79c:	b480      	push	{r7}
 800f79e:	b085      	sub	sp, #20
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f7a8:	e005      	b.n	800f7b6 <pbuf_clen+0x1a>
    ++len;
 800f7aa:	89fb      	ldrh	r3, [r7, #14]
 800f7ac:	3301      	adds	r3, #1
 800f7ae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d1f6      	bne.n	800f7aa <pbuf_clen+0xe>
  }
  return len;
 800f7bc:	89fb      	ldrh	r3, [r7, #14]
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3714      	adds	r7, #20
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr
	...

0800f7cc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d016      	beq.n	800f808 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f7da:	f00a fbf5 	bl	8019fc8 <sys_arch_protect>
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	7b9b      	ldrb	r3, [r3, #14]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	b2da      	uxtb	r2, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	739a      	strb	r2, [r3, #14]
 800f7ec:	68f8      	ldr	r0, [r7, #12]
 800f7ee:	f00a fbf9 	bl	8019fe4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	7b9b      	ldrb	r3, [r3, #14]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d106      	bne.n	800f808 <pbuf_ref+0x3c>
 800f7fa:	4b05      	ldr	r3, [pc, #20]	; (800f810 <pbuf_ref+0x44>)
 800f7fc:	f240 3242 	movw	r2, #834	; 0x342
 800f800:	4904      	ldr	r1, [pc, #16]	; (800f814 <pbuf_ref+0x48>)
 800f802:	4805      	ldr	r0, [pc, #20]	; (800f818 <pbuf_ref+0x4c>)
 800f804:	f00b f930 	bl	801aa68 <iprintf>
  }
}
 800f808:	bf00      	nop
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	0801c7cc 	.word	0x0801c7cc
 800f814:	0801c9ac 	.word	0x0801c9ac
 800f818:	0801c82c 	.word	0x0801c82c

0800f81c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d002      	beq.n	800f832 <pbuf_cat+0x16>
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d107      	bne.n	800f842 <pbuf_cat+0x26>
 800f832:	4b20      	ldr	r3, [pc, #128]	; (800f8b4 <pbuf_cat+0x98>)
 800f834:	f240 3259 	movw	r2, #857	; 0x359
 800f838:	491f      	ldr	r1, [pc, #124]	; (800f8b8 <pbuf_cat+0x9c>)
 800f83a:	4820      	ldr	r0, [pc, #128]	; (800f8bc <pbuf_cat+0xa0>)
 800f83c:	f00b f914 	bl	801aa68 <iprintf>
 800f840:	e034      	b.n	800f8ac <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	60fb      	str	r3, [r7, #12]
 800f846:	e00a      	b.n	800f85e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	891a      	ldrh	r2, [r3, #8]
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	891b      	ldrh	r3, [r3, #8]
 800f850:	4413      	add	r3, r2
 800f852:	b29a      	uxth	r2, r3
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	60fb      	str	r3, [r7, #12]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d1f0      	bne.n	800f848 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	891a      	ldrh	r2, [r3, #8]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	895b      	ldrh	r3, [r3, #10]
 800f86e:	429a      	cmp	r2, r3
 800f870:	d006      	beq.n	800f880 <pbuf_cat+0x64>
 800f872:	4b10      	ldr	r3, [pc, #64]	; (800f8b4 <pbuf_cat+0x98>)
 800f874:	f240 3262 	movw	r2, #866	; 0x362
 800f878:	4911      	ldr	r1, [pc, #68]	; (800f8c0 <pbuf_cat+0xa4>)
 800f87a:	4810      	ldr	r0, [pc, #64]	; (800f8bc <pbuf_cat+0xa0>)
 800f87c:	f00b f8f4 	bl	801aa68 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d006      	beq.n	800f896 <pbuf_cat+0x7a>
 800f888:	4b0a      	ldr	r3, [pc, #40]	; (800f8b4 <pbuf_cat+0x98>)
 800f88a:	f240 3263 	movw	r2, #867	; 0x363
 800f88e:	490d      	ldr	r1, [pc, #52]	; (800f8c4 <pbuf_cat+0xa8>)
 800f890:	480a      	ldr	r0, [pc, #40]	; (800f8bc <pbuf_cat+0xa0>)
 800f892:	f00b f8e9 	bl	801aa68 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	891a      	ldrh	r2, [r3, #8]
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	891b      	ldrh	r3, [r3, #8]
 800f89e:	4413      	add	r3, r2
 800f8a0:	b29a      	uxth	r2, r3
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	683a      	ldr	r2, [r7, #0]
 800f8aa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f8ac:	3710      	adds	r7, #16
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	0801c7cc 	.word	0x0801c7cc
 800f8b8:	0801c9c0 	.word	0x0801c9c0
 800f8bc:	0801c82c 	.word	0x0801c82c
 800f8c0:	0801c9f8 	.word	0x0801c9f8
 800f8c4:	0801ca28 	.word	0x0801ca28

0800f8c8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f8d2:	6839      	ldr	r1, [r7, #0]
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7ff ffa1 	bl	800f81c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f8da:	6838      	ldr	r0, [r7, #0]
 800f8dc:	f7ff ff76 	bl	800f7cc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f8e0:	bf00      	nop
 800f8e2:	3708      	adds	r7, #8
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b086      	sub	sp, #24
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	617b      	str	r3, [r7, #20]
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d008      	beq.n	800f912 <pbuf_copy+0x2a>
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d005      	beq.n	800f912 <pbuf_copy+0x2a>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	891a      	ldrh	r2, [r3, #8]
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	891b      	ldrh	r3, [r3, #8]
 800f90e:	429a      	cmp	r2, r3
 800f910:	d209      	bcs.n	800f926 <pbuf_copy+0x3e>
 800f912:	4b57      	ldr	r3, [pc, #348]	; (800fa70 <pbuf_copy+0x188>)
 800f914:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f918:	4956      	ldr	r1, [pc, #344]	; (800fa74 <pbuf_copy+0x18c>)
 800f91a:	4857      	ldr	r0, [pc, #348]	; (800fa78 <pbuf_copy+0x190>)
 800f91c:	f00b f8a4 	bl	801aa68 <iprintf>
 800f920:	f06f 030f 	mvn.w	r3, #15
 800f924:	e09f      	b.n	800fa66 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	895b      	ldrh	r3, [r3, #10]
 800f92a:	461a      	mov	r2, r3
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	1ad2      	subs	r2, r2, r3
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	895b      	ldrh	r3, [r3, #10]
 800f934:	4619      	mov	r1, r3
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	1acb      	subs	r3, r1, r3
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d306      	bcc.n	800f94c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	895b      	ldrh	r3, [r3, #10]
 800f942:	461a      	mov	r2, r3
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	1ad3      	subs	r3, r2, r3
 800f948:	60fb      	str	r3, [r7, #12]
 800f94a:	e005      	b.n	800f958 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	895b      	ldrh	r3, [r3, #10]
 800f950:	461a      	mov	r2, r3
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	1ad3      	subs	r3, r2, r3
 800f956:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	685a      	ldr	r2, [r3, #4]
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	18d0      	adds	r0, r2, r3
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	685a      	ldr	r2, [r3, #4]
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	4413      	add	r3, r2
 800f968:	68fa      	ldr	r2, [r7, #12]
 800f96a:	4619      	mov	r1, r3
 800f96c:	f00a ffbc 	bl	801a8e8 <memcpy>
    offset_to += len;
 800f970:	697a      	ldr	r2, [r7, #20]
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	4413      	add	r3, r2
 800f976:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f978:	693a      	ldr	r2, [r7, #16]
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	4413      	add	r3, r2
 800f97e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	895b      	ldrh	r3, [r3, #10]
 800f984:	461a      	mov	r2, r3
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	4293      	cmp	r3, r2
 800f98a:	d906      	bls.n	800f99a <pbuf_copy+0xb2>
 800f98c:	4b38      	ldr	r3, [pc, #224]	; (800fa70 <pbuf_copy+0x188>)
 800f98e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f992:	493a      	ldr	r1, [pc, #232]	; (800fa7c <pbuf_copy+0x194>)
 800f994:	4838      	ldr	r0, [pc, #224]	; (800fa78 <pbuf_copy+0x190>)
 800f996:	f00b f867 	bl	801aa68 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	895b      	ldrh	r3, [r3, #10]
 800f99e:	461a      	mov	r2, r3
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d906      	bls.n	800f9b4 <pbuf_copy+0xcc>
 800f9a6:	4b32      	ldr	r3, [pc, #200]	; (800fa70 <pbuf_copy+0x188>)
 800f9a8:	f240 32da 	movw	r2, #986	; 0x3da
 800f9ac:	4934      	ldr	r1, [pc, #208]	; (800fa80 <pbuf_copy+0x198>)
 800f9ae:	4832      	ldr	r0, [pc, #200]	; (800fa78 <pbuf_copy+0x190>)
 800f9b0:	f00b f85a 	bl	801aa68 <iprintf>
    if (offset_from >= p_from->len) {
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	895b      	ldrh	r3, [r3, #10]
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d304      	bcc.n	800f9ca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	895b      	ldrh	r3, [r3, #10]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d114      	bne.n	800fa00 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d10c      	bne.n	800fa00 <pbuf_copy+0x118>
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d009      	beq.n	800fa00 <pbuf_copy+0x118>
 800f9ec:	4b20      	ldr	r3, [pc, #128]	; (800fa70 <pbuf_copy+0x188>)
 800f9ee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f9f2:	4924      	ldr	r1, [pc, #144]	; (800fa84 <pbuf_copy+0x19c>)
 800f9f4:	4820      	ldr	r0, [pc, #128]	; (800fa78 <pbuf_copy+0x190>)
 800f9f6:	f00b f837 	bl	801aa68 <iprintf>
 800f9fa:	f06f 030f 	mvn.w	r3, #15
 800f9fe:	e032      	b.n	800fa66 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d013      	beq.n	800fa2e <pbuf_copy+0x146>
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	895a      	ldrh	r2, [r3, #10]
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	891b      	ldrh	r3, [r3, #8]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d10d      	bne.n	800fa2e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d009      	beq.n	800fa2e <pbuf_copy+0x146>
 800fa1a:	4b15      	ldr	r3, [pc, #84]	; (800fa70 <pbuf_copy+0x188>)
 800fa1c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800fa20:	4919      	ldr	r1, [pc, #100]	; (800fa88 <pbuf_copy+0x1a0>)
 800fa22:	4815      	ldr	r0, [pc, #84]	; (800fa78 <pbuf_copy+0x190>)
 800fa24:	f00b f820 	bl	801aa68 <iprintf>
 800fa28:	f06f 0305 	mvn.w	r3, #5
 800fa2c:	e01b      	b.n	800fa66 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d013      	beq.n	800fa5c <pbuf_copy+0x174>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	895a      	ldrh	r2, [r3, #10]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	891b      	ldrh	r3, [r3, #8]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d10d      	bne.n	800fa5c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d009      	beq.n	800fa5c <pbuf_copy+0x174>
 800fa48:	4b09      	ldr	r3, [pc, #36]	; (800fa70 <pbuf_copy+0x188>)
 800fa4a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800fa4e:	490e      	ldr	r1, [pc, #56]	; (800fa88 <pbuf_copy+0x1a0>)
 800fa50:	4809      	ldr	r0, [pc, #36]	; (800fa78 <pbuf_copy+0x190>)
 800fa52:	f00b f809 	bl	801aa68 <iprintf>
 800fa56:	f06f 0305 	mvn.w	r3, #5
 800fa5a:	e004      	b.n	800fa66 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f47f af61 	bne.w	800f926 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800fa64:	2300      	movs	r3, #0
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3718      	adds	r7, #24
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	0801c7cc 	.word	0x0801c7cc
 800fa74:	0801ca74 	.word	0x0801ca74
 800fa78:	0801c82c 	.word	0x0801c82c
 800fa7c:	0801caa4 	.word	0x0801caa4
 800fa80:	0801cabc 	.word	0x0801cabc
 800fa84:	0801cad8 	.word	0x0801cad8
 800fa88:	0801cae8 	.word	0x0801cae8

0800fa8c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b088      	sub	sp, #32
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	4611      	mov	r1, r2
 800fa98:	461a      	mov	r2, r3
 800fa9a:	460b      	mov	r3, r1
 800fa9c:	80fb      	strh	r3, [r7, #6]
 800fa9e:	4613      	mov	r3, r2
 800faa0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800faa2:	2300      	movs	r3, #0
 800faa4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800faa6:	2300      	movs	r3, #0
 800faa8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d108      	bne.n	800fac2 <pbuf_copy_partial+0x36>
 800fab0:	4b2b      	ldr	r3, [pc, #172]	; (800fb60 <pbuf_copy_partial+0xd4>)
 800fab2:	f240 420a 	movw	r2, #1034	; 0x40a
 800fab6:	492b      	ldr	r1, [pc, #172]	; (800fb64 <pbuf_copy_partial+0xd8>)
 800fab8:	482b      	ldr	r0, [pc, #172]	; (800fb68 <pbuf_copy_partial+0xdc>)
 800faba:	f00a ffd5 	bl	801aa68 <iprintf>
 800fabe:	2300      	movs	r3, #0
 800fac0:	e04a      	b.n	800fb58 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d108      	bne.n	800fada <pbuf_copy_partial+0x4e>
 800fac8:	4b25      	ldr	r3, [pc, #148]	; (800fb60 <pbuf_copy_partial+0xd4>)
 800faca:	f240 420b 	movw	r2, #1035	; 0x40b
 800face:	4927      	ldr	r1, [pc, #156]	; (800fb6c <pbuf_copy_partial+0xe0>)
 800fad0:	4825      	ldr	r0, [pc, #148]	; (800fb68 <pbuf_copy_partial+0xdc>)
 800fad2:	f00a ffc9 	bl	801aa68 <iprintf>
 800fad6:	2300      	movs	r3, #0
 800fad8:	e03e      	b.n	800fb58 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	61fb      	str	r3, [r7, #28]
 800fade:	e034      	b.n	800fb4a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800fae0:	88bb      	ldrh	r3, [r7, #4]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d00a      	beq.n	800fafc <pbuf_copy_partial+0x70>
 800fae6:	69fb      	ldr	r3, [r7, #28]
 800fae8:	895b      	ldrh	r3, [r3, #10]
 800faea:	88ba      	ldrh	r2, [r7, #4]
 800faec:	429a      	cmp	r2, r3
 800faee:	d305      	bcc.n	800fafc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800faf0:	69fb      	ldr	r3, [r7, #28]
 800faf2:	895b      	ldrh	r3, [r3, #10]
 800faf4:	88ba      	ldrh	r2, [r7, #4]
 800faf6:	1ad3      	subs	r3, r2, r3
 800faf8:	80bb      	strh	r3, [r7, #4]
 800fafa:	e023      	b.n	800fb44 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	895a      	ldrh	r2, [r3, #10]
 800fb00:	88bb      	ldrh	r3, [r7, #4]
 800fb02:	1ad3      	subs	r3, r2, r3
 800fb04:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800fb06:	8b3a      	ldrh	r2, [r7, #24]
 800fb08:	88fb      	ldrh	r3, [r7, #6]
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d901      	bls.n	800fb12 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800fb0e:	88fb      	ldrh	r3, [r7, #6]
 800fb10:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800fb12:	8b7b      	ldrh	r3, [r7, #26]
 800fb14:	68ba      	ldr	r2, [r7, #8]
 800fb16:	18d0      	adds	r0, r2, r3
 800fb18:	69fb      	ldr	r3, [r7, #28]
 800fb1a:	685a      	ldr	r2, [r3, #4]
 800fb1c:	88bb      	ldrh	r3, [r7, #4]
 800fb1e:	4413      	add	r3, r2
 800fb20:	8b3a      	ldrh	r2, [r7, #24]
 800fb22:	4619      	mov	r1, r3
 800fb24:	f00a fee0 	bl	801a8e8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800fb28:	8afa      	ldrh	r2, [r7, #22]
 800fb2a:	8b3b      	ldrh	r3, [r7, #24]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800fb30:	8b7a      	ldrh	r2, [r7, #26]
 800fb32:	8b3b      	ldrh	r3, [r7, #24]
 800fb34:	4413      	add	r3, r2
 800fb36:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800fb38:	88fa      	ldrh	r2, [r7, #6]
 800fb3a:	8b3b      	ldrh	r3, [r7, #24]
 800fb3c:	1ad3      	subs	r3, r2, r3
 800fb3e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800fb40:	2300      	movs	r3, #0
 800fb42:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fb44:	69fb      	ldr	r3, [r7, #28]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	61fb      	str	r3, [r7, #28]
 800fb4a:	88fb      	ldrh	r3, [r7, #6]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d002      	beq.n	800fb56 <pbuf_copy_partial+0xca>
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d1c4      	bne.n	800fae0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800fb56:	8afb      	ldrh	r3, [r7, #22]
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3720      	adds	r7, #32
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	0801c7cc 	.word	0x0801c7cc
 800fb64:	0801cb14 	.word	0x0801cb14
 800fb68:	0801c82c 	.word	0x0801c82c
 800fb6c:	0801cb34 	.word	0x0801cb34

0800fb70 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	4603      	mov	r3, r0
 800fb78:	603a      	str	r2, [r7, #0]
 800fb7a:	71fb      	strb	r3, [r7, #7]
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	8919      	ldrh	r1, [r3, #8]
 800fb84:	88ba      	ldrh	r2, [r7, #4]
 800fb86:	79fb      	ldrb	r3, [r7, #7]
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7ff fa95 	bl	800f0b8 <pbuf_alloc>
 800fb8e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d101      	bne.n	800fb9a <pbuf_clone+0x2a>
    return NULL;
 800fb96:	2300      	movs	r3, #0
 800fb98:	e011      	b.n	800fbbe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800fb9a:	6839      	ldr	r1, [r7, #0]
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f7ff fea3 	bl	800f8e8 <pbuf_copy>
 800fba2:	4603      	mov	r3, r0
 800fba4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800fba6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d006      	beq.n	800fbbc <pbuf_clone+0x4c>
 800fbae:	4b06      	ldr	r3, [pc, #24]	; (800fbc8 <pbuf_clone+0x58>)
 800fbb0:	f240 5224 	movw	r2, #1316	; 0x524
 800fbb4:	4905      	ldr	r1, [pc, #20]	; (800fbcc <pbuf_clone+0x5c>)
 800fbb6:	4806      	ldr	r0, [pc, #24]	; (800fbd0 <pbuf_clone+0x60>)
 800fbb8:	f00a ff56 	bl	801aa68 <iprintf>
  return q;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	0801c7cc 	.word	0x0801c7cc
 800fbcc:	0801cc40 	.word	0x0801cc40
 800fbd0:	0801c82c 	.word	0x0801c82c

0800fbd4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fbd8:	f00a ffea 	bl	801abb0 <rand>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	b29b      	uxth	r3, r3
 800fbe0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fbea:	b29a      	uxth	r2, r3
 800fbec:	4b01      	ldr	r3, [pc, #4]	; (800fbf4 <tcp_init+0x20>)
 800fbee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fbf0:	bf00      	nop
 800fbf2:	bd80      	pop	{r7, pc}
 800fbf4:	20000030 	.word	0x20000030

0800fbf8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	7d1b      	ldrb	r3, [r3, #20]
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d105      	bne.n	800fc14 <tcp_free+0x1c>
 800fc08:	4b06      	ldr	r3, [pc, #24]	; (800fc24 <tcp_free+0x2c>)
 800fc0a:	22d4      	movs	r2, #212	; 0xd4
 800fc0c:	4906      	ldr	r1, [pc, #24]	; (800fc28 <tcp_free+0x30>)
 800fc0e:	4807      	ldr	r0, [pc, #28]	; (800fc2c <tcp_free+0x34>)
 800fc10:	f00a ff2a 	bl	801aa68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800fc14:	6879      	ldr	r1, [r7, #4]
 800fc16:	2001      	movs	r0, #1
 800fc18:	f7fe fe82 	bl	800e920 <memp_free>
}
 800fc1c:	bf00      	nop
 800fc1e:	3708      	adds	r7, #8
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	0801cccc 	.word	0x0801cccc
 800fc28:	0801ccfc 	.word	0x0801ccfc
 800fc2c:	0801cd10 	.word	0x0801cd10

0800fc30 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	7d1b      	ldrb	r3, [r3, #20]
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d105      	bne.n	800fc4c <tcp_free_listen+0x1c>
 800fc40:	4b06      	ldr	r3, [pc, #24]	; (800fc5c <tcp_free_listen+0x2c>)
 800fc42:	22df      	movs	r2, #223	; 0xdf
 800fc44:	4906      	ldr	r1, [pc, #24]	; (800fc60 <tcp_free_listen+0x30>)
 800fc46:	4807      	ldr	r0, [pc, #28]	; (800fc64 <tcp_free_listen+0x34>)
 800fc48:	f00a ff0e 	bl	801aa68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fc4c:	6879      	ldr	r1, [r7, #4]
 800fc4e:	2002      	movs	r0, #2
 800fc50:	f7fe fe66 	bl	800e920 <memp_free>
}
 800fc54:	bf00      	nop
 800fc56:	3708      	adds	r7, #8
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	0801cccc 	.word	0x0801cccc
 800fc60:	0801cd38 	.word	0x0801cd38
 800fc64:	0801cd10 	.word	0x0801cd10

0800fc68 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800fc6c:	f000 fea2 	bl	80109b4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800fc70:	4b07      	ldr	r3, [pc, #28]	; (800fc90 <tcp_tmr+0x28>)
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	3301      	adds	r3, #1
 800fc76:	b2da      	uxtb	r2, r3
 800fc78:	4b05      	ldr	r3, [pc, #20]	; (800fc90 <tcp_tmr+0x28>)
 800fc7a:	701a      	strb	r2, [r3, #0]
 800fc7c:	4b04      	ldr	r3, [pc, #16]	; (800fc90 <tcp_tmr+0x28>)
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	f003 0301 	and.w	r3, r3, #1
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d001      	beq.n	800fc8c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fc88:	f000 fb54 	bl	8010334 <tcp_slowtmr>
  }
}
 800fc8c:	bf00      	nop
 800fc8e:	bd80      	pop	{r7, pc}
 800fc90:	20008535 	.word	0x20008535

0800fc94 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d105      	bne.n	800fcb0 <tcp_remove_listener+0x1c>
 800fca4:	4b0d      	ldr	r3, [pc, #52]	; (800fcdc <tcp_remove_listener+0x48>)
 800fca6:	22ff      	movs	r2, #255	; 0xff
 800fca8:	490d      	ldr	r1, [pc, #52]	; (800fce0 <tcp_remove_listener+0x4c>)
 800fcaa:	480e      	ldr	r0, [pc, #56]	; (800fce4 <tcp_remove_listener+0x50>)
 800fcac:	f00a fedc 	bl	801aa68 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	60fb      	str	r3, [r7, #12]
 800fcb4:	e00a      	b.n	800fccc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fcba:	683a      	ldr	r2, [r7, #0]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d102      	bne.n	800fcc6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	68db      	ldr	r3, [r3, #12]
 800fcca:	60fb      	str	r3, [r7, #12]
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d1f1      	bne.n	800fcb6 <tcp_remove_listener+0x22>
    }
  }
}
 800fcd2:	bf00      	nop
 800fcd4:	bf00      	nop
 800fcd6:	3710      	adds	r7, #16
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}
 800fcdc:	0801cccc 	.word	0x0801cccc
 800fce0:	0801cd54 	.word	0x0801cd54
 800fce4:	0801cd10 	.word	0x0801cd10

0800fce8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d106      	bne.n	800fd04 <tcp_listen_closed+0x1c>
 800fcf6:	4b14      	ldr	r3, [pc, #80]	; (800fd48 <tcp_listen_closed+0x60>)
 800fcf8:	f240 1211 	movw	r2, #273	; 0x111
 800fcfc:	4913      	ldr	r1, [pc, #76]	; (800fd4c <tcp_listen_closed+0x64>)
 800fcfe:	4814      	ldr	r0, [pc, #80]	; (800fd50 <tcp_listen_closed+0x68>)
 800fd00:	f00a feb2 	bl	801aa68 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	7d1b      	ldrb	r3, [r3, #20]
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	d006      	beq.n	800fd1a <tcp_listen_closed+0x32>
 800fd0c:	4b0e      	ldr	r3, [pc, #56]	; (800fd48 <tcp_listen_closed+0x60>)
 800fd0e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800fd12:	4910      	ldr	r1, [pc, #64]	; (800fd54 <tcp_listen_closed+0x6c>)
 800fd14:	480e      	ldr	r0, [pc, #56]	; (800fd50 <tcp_listen_closed+0x68>)
 800fd16:	f00a fea7 	bl	801aa68 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	60fb      	str	r3, [r7, #12]
 800fd1e:	e00b      	b.n	800fd38 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fd20:	4a0d      	ldr	r2, [pc, #52]	; (800fd58 <tcp_listen_closed+0x70>)
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	6879      	ldr	r1, [r7, #4]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7ff ffb1 	bl	800fc94 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	3301      	adds	r3, #1
 800fd36:	60fb      	str	r3, [r7, #12]
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2b03      	cmp	r3, #3
 800fd3c:	d9f0      	bls.n	800fd20 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fd3e:	bf00      	nop
 800fd40:	bf00      	nop
 800fd42:	3710      	adds	r7, #16
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	0801cccc 	.word	0x0801cccc
 800fd4c:	0801cd7c 	.word	0x0801cd7c
 800fd50:	0801cd10 	.word	0x0801cd10
 800fd54:	0801cd88 	.word	0x0801cd88
 800fd58:	0801f094 	.word	0x0801f094

0800fd5c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fd5c:	b5b0      	push	{r4, r5, r7, lr}
 800fd5e:	b088      	sub	sp, #32
 800fd60:	af04      	add	r7, sp, #16
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	460b      	mov	r3, r1
 800fd66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d106      	bne.n	800fd7c <tcp_close_shutdown+0x20>
 800fd6e:	4b63      	ldr	r3, [pc, #396]	; (800fefc <tcp_close_shutdown+0x1a0>)
 800fd70:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800fd74:	4962      	ldr	r1, [pc, #392]	; (800ff00 <tcp_close_shutdown+0x1a4>)
 800fd76:	4863      	ldr	r0, [pc, #396]	; (800ff04 <tcp_close_shutdown+0x1a8>)
 800fd78:	f00a fe76 	bl	801aa68 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fd7c:	78fb      	ldrb	r3, [r7, #3]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d066      	beq.n	800fe50 <tcp_close_shutdown+0xf4>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	7d1b      	ldrb	r3, [r3, #20]
 800fd86:	2b04      	cmp	r3, #4
 800fd88:	d003      	beq.n	800fd92 <tcp_close_shutdown+0x36>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	7d1b      	ldrb	r3, [r3, #20]
 800fd8e:	2b07      	cmp	r3, #7
 800fd90:	d15e      	bne.n	800fe50 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d104      	bne.n	800fda4 <tcp_close_shutdown+0x48>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fda2:	d055      	beq.n	800fe50 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	8b5b      	ldrh	r3, [r3, #26]
 800fda8:	f003 0310 	and.w	r3, r3, #16
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d106      	bne.n	800fdbe <tcp_close_shutdown+0x62>
 800fdb0:	4b52      	ldr	r3, [pc, #328]	; (800fefc <tcp_close_shutdown+0x1a0>)
 800fdb2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800fdb6:	4954      	ldr	r1, [pc, #336]	; (800ff08 <tcp_close_shutdown+0x1ac>)
 800fdb8:	4852      	ldr	r0, [pc, #328]	; (800ff04 <tcp_close_shutdown+0x1a8>)
 800fdba:	f00a fe55 	bl	801aa68 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fdc6:	687d      	ldr	r5, [r7, #4]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	3304      	adds	r3, #4
 800fdcc:	687a      	ldr	r2, [r7, #4]
 800fdce:	8ad2      	ldrh	r2, [r2, #22]
 800fdd0:	6879      	ldr	r1, [r7, #4]
 800fdd2:	8b09      	ldrh	r1, [r1, #24]
 800fdd4:	9102      	str	r1, [sp, #8]
 800fdd6:	9201      	str	r2, [sp, #4]
 800fdd8:	9300      	str	r3, [sp, #0]
 800fdda:	462b      	mov	r3, r5
 800fddc:	4622      	mov	r2, r4
 800fdde:	4601      	mov	r1, r0
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f004 fe8d 	bl	8014b00 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f001 f8c6 	bl	8010f78 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fdec:	4b47      	ldr	r3, [pc, #284]	; (800ff0c <tcp_close_shutdown+0x1b0>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	687a      	ldr	r2, [r7, #4]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d105      	bne.n	800fe02 <tcp_close_shutdown+0xa6>
 800fdf6:	4b45      	ldr	r3, [pc, #276]	; (800ff0c <tcp_close_shutdown+0x1b0>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	4a43      	ldr	r2, [pc, #268]	; (800ff0c <tcp_close_shutdown+0x1b0>)
 800fdfe:	6013      	str	r3, [r2, #0]
 800fe00:	e013      	b.n	800fe2a <tcp_close_shutdown+0xce>
 800fe02:	4b42      	ldr	r3, [pc, #264]	; (800ff0c <tcp_close_shutdown+0x1b0>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	60fb      	str	r3, [r7, #12]
 800fe08:	e00c      	b.n	800fe24 <tcp_close_shutdown+0xc8>
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	68db      	ldr	r3, [r3, #12]
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d104      	bne.n	800fe1e <tcp_close_shutdown+0xc2>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	68da      	ldr	r2, [r3, #12]
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	60da      	str	r2, [r3, #12]
 800fe1c:	e005      	b.n	800fe2a <tcp_close_shutdown+0xce>
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	68db      	ldr	r3, [r3, #12]
 800fe22:	60fb      	str	r3, [r7, #12]
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1ef      	bne.n	800fe0a <tcp_close_shutdown+0xae>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	60da      	str	r2, [r3, #12]
 800fe30:	4b37      	ldr	r3, [pc, #220]	; (800ff10 <tcp_close_shutdown+0x1b4>)
 800fe32:	2201      	movs	r2, #1
 800fe34:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fe36:	4b37      	ldr	r3, [pc, #220]	; (800ff14 <tcp_close_shutdown+0x1b8>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d102      	bne.n	800fe46 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fe40:	f003 fd5a 	bl	80138f8 <tcp_trigger_input_pcb_close>
 800fe44:	e002      	b.n	800fe4c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f7ff fed6 	bl	800fbf8 <tcp_free>
      }
      return ERR_OK;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	e050      	b.n	800fef2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	7d1b      	ldrb	r3, [r3, #20]
 800fe54:	2b02      	cmp	r3, #2
 800fe56:	d03b      	beq.n	800fed0 <tcp_close_shutdown+0x174>
 800fe58:	2b02      	cmp	r3, #2
 800fe5a:	dc44      	bgt.n	800fee6 <tcp_close_shutdown+0x18a>
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d002      	beq.n	800fe66 <tcp_close_shutdown+0x10a>
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	d02a      	beq.n	800feba <tcp_close_shutdown+0x15e>
 800fe64:	e03f      	b.n	800fee6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	8adb      	ldrh	r3, [r3, #22]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d021      	beq.n	800feb2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fe6e:	4b2a      	ldr	r3, [pc, #168]	; (800ff18 <tcp_close_shutdown+0x1bc>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d105      	bne.n	800fe84 <tcp_close_shutdown+0x128>
 800fe78:	4b27      	ldr	r3, [pc, #156]	; (800ff18 <tcp_close_shutdown+0x1bc>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	68db      	ldr	r3, [r3, #12]
 800fe7e:	4a26      	ldr	r2, [pc, #152]	; (800ff18 <tcp_close_shutdown+0x1bc>)
 800fe80:	6013      	str	r3, [r2, #0]
 800fe82:	e013      	b.n	800feac <tcp_close_shutdown+0x150>
 800fe84:	4b24      	ldr	r3, [pc, #144]	; (800ff18 <tcp_close_shutdown+0x1bc>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	60bb      	str	r3, [r7, #8]
 800fe8a:	e00c      	b.n	800fea6 <tcp_close_shutdown+0x14a>
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	68db      	ldr	r3, [r3, #12]
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d104      	bne.n	800fea0 <tcp_close_shutdown+0x144>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	68da      	ldr	r2, [r3, #12]
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	60da      	str	r2, [r3, #12]
 800fe9e:	e005      	b.n	800feac <tcp_close_shutdown+0x150>
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	60bb      	str	r3, [r7, #8]
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d1ef      	bne.n	800fe8c <tcp_close_shutdown+0x130>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2200      	movs	r2, #0
 800feb0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f7ff fea0 	bl	800fbf8 <tcp_free>
      break;
 800feb8:	e01a      	b.n	800fef0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f7ff ff14 	bl	800fce8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fec0:	6879      	ldr	r1, [r7, #4]
 800fec2:	4816      	ldr	r0, [pc, #88]	; (800ff1c <tcp_close_shutdown+0x1c0>)
 800fec4:	f001 f8a8 	bl	8011018 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f7ff feb1 	bl	800fc30 <tcp_free_listen>
      break;
 800fece:	e00f      	b.n	800fef0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fed0:	6879      	ldr	r1, [r7, #4]
 800fed2:	480e      	ldr	r0, [pc, #56]	; (800ff0c <tcp_close_shutdown+0x1b0>)
 800fed4:	f001 f8a0 	bl	8011018 <tcp_pcb_remove>
 800fed8:	4b0d      	ldr	r3, [pc, #52]	; (800ff10 <tcp_close_shutdown+0x1b4>)
 800feda:	2201      	movs	r2, #1
 800fedc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f7ff fe8a 	bl	800fbf8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fee4:	e004      	b.n	800fef0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f000 f81a 	bl	800ff20 <tcp_close_shutdown_fin>
 800feec:	4603      	mov	r3, r0
 800feee:	e000      	b.n	800fef2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800fef0:	2300      	movs	r3, #0
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3710      	adds	r7, #16
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bdb0      	pop	{r4, r5, r7, pc}
 800fefa:	bf00      	nop
 800fefc:	0801cccc 	.word	0x0801cccc
 800ff00:	0801cda0 	.word	0x0801cda0
 800ff04:	0801cd10 	.word	0x0801cd10
 800ff08:	0801cdc0 	.word	0x0801cdc0
 800ff0c:	2000f3f8 	.word	0x2000f3f8
 800ff10:	2000f3f4 	.word	0x2000f3f4
 800ff14:	2000f40c 	.word	0x2000f40c
 800ff18:	2000f404 	.word	0x2000f404
 800ff1c:	2000f400 	.word	0x2000f400

0800ff20 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d106      	bne.n	800ff3c <tcp_close_shutdown_fin+0x1c>
 800ff2e:	4b2e      	ldr	r3, [pc, #184]	; (800ffe8 <tcp_close_shutdown_fin+0xc8>)
 800ff30:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ff34:	492d      	ldr	r1, [pc, #180]	; (800ffec <tcp_close_shutdown_fin+0xcc>)
 800ff36:	482e      	ldr	r0, [pc, #184]	; (800fff0 <tcp_close_shutdown_fin+0xd0>)
 800ff38:	f00a fd96 	bl	801aa68 <iprintf>

  switch (pcb->state) {
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	7d1b      	ldrb	r3, [r3, #20]
 800ff40:	2b07      	cmp	r3, #7
 800ff42:	d020      	beq.n	800ff86 <tcp_close_shutdown_fin+0x66>
 800ff44:	2b07      	cmp	r3, #7
 800ff46:	dc2b      	bgt.n	800ffa0 <tcp_close_shutdown_fin+0x80>
 800ff48:	2b03      	cmp	r3, #3
 800ff4a:	d002      	beq.n	800ff52 <tcp_close_shutdown_fin+0x32>
 800ff4c:	2b04      	cmp	r3, #4
 800ff4e:	d00d      	beq.n	800ff6c <tcp_close_shutdown_fin+0x4c>
 800ff50:	e026      	b.n	800ffa0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f003 fee2 	bl	8013d1c <tcp_send_fin>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ff5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d11f      	bne.n	800ffa4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2205      	movs	r2, #5
 800ff68:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff6a:	e01b      	b.n	800ffa4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f003 fed5 	bl	8013d1c <tcp_send_fin>
 800ff72:	4603      	mov	r3, r0
 800ff74:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ff76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d114      	bne.n	800ffa8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2205      	movs	r2, #5
 800ff82:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff84:	e010      	b.n	800ffa8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f003 fec8 	bl	8013d1c <tcp_send_fin>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ff90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d109      	bne.n	800ffac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2209      	movs	r2, #9
 800ff9c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff9e:	e005      	b.n	800ffac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	e01c      	b.n	800ffde <tcp_close_shutdown_fin+0xbe>
      break;
 800ffa4:	bf00      	nop
 800ffa6:	e002      	b.n	800ffae <tcp_close_shutdown_fin+0x8e>
      break;
 800ffa8:	bf00      	nop
 800ffaa:	e000      	b.n	800ffae <tcp_close_shutdown_fin+0x8e>
      break;
 800ffac:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ffae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d103      	bne.n	800ffbe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f003 ffee 	bl	8013f98 <tcp_output>
 800ffbc:	e00d      	b.n	800ffda <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ffbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffc6:	d108      	bne.n	800ffda <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	8b5b      	ldrh	r3, [r3, #26]
 800ffcc:	f043 0308 	orr.w	r3, r3, #8
 800ffd0:	b29a      	uxth	r2, r3
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	e001      	b.n	800ffde <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ffda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3710      	adds	r7, #16
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	0801cccc 	.word	0x0801cccc
 800ffec:	0801cd7c 	.word	0x0801cd7c
 800fff0:	0801cd10 	.word	0x0801cd10

0800fff4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d109      	bne.n	8010016 <tcp_close+0x22>
 8010002:	4b0f      	ldr	r3, [pc, #60]	; (8010040 <tcp_close+0x4c>)
 8010004:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010008:	490e      	ldr	r1, [pc, #56]	; (8010044 <tcp_close+0x50>)
 801000a:	480f      	ldr	r0, [pc, #60]	; (8010048 <tcp_close+0x54>)
 801000c:	f00a fd2c 	bl	801aa68 <iprintf>
 8010010:	f06f 030f 	mvn.w	r3, #15
 8010014:	e00f      	b.n	8010036 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	7d1b      	ldrb	r3, [r3, #20]
 801001a:	2b01      	cmp	r3, #1
 801001c:	d006      	beq.n	801002c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	8b5b      	ldrh	r3, [r3, #26]
 8010022:	f043 0310 	orr.w	r3, r3, #16
 8010026:	b29a      	uxth	r2, r3
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801002c:	2101      	movs	r1, #1
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f7ff fe94 	bl	800fd5c <tcp_close_shutdown>
 8010034:	4603      	mov	r3, r0
}
 8010036:	4618      	mov	r0, r3
 8010038:	3708      	adds	r7, #8
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	0801cccc 	.word	0x0801cccc
 8010044:	0801cddc 	.word	0x0801cddc
 8010048:	0801cd10 	.word	0x0801cd10

0801004c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b08e      	sub	sp, #56	; 0x38
 8010050:	af04      	add	r7, sp, #16
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d107      	bne.n	801006c <tcp_abandon+0x20>
 801005c:	4b52      	ldr	r3, [pc, #328]	; (80101a8 <tcp_abandon+0x15c>)
 801005e:	f240 223d 	movw	r2, #573	; 0x23d
 8010062:	4952      	ldr	r1, [pc, #328]	; (80101ac <tcp_abandon+0x160>)
 8010064:	4852      	ldr	r0, [pc, #328]	; (80101b0 <tcp_abandon+0x164>)
 8010066:	f00a fcff 	bl	801aa68 <iprintf>
 801006a:	e099      	b.n	80101a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	7d1b      	ldrb	r3, [r3, #20]
 8010070:	2b01      	cmp	r3, #1
 8010072:	d106      	bne.n	8010082 <tcp_abandon+0x36>
 8010074:	4b4c      	ldr	r3, [pc, #304]	; (80101a8 <tcp_abandon+0x15c>)
 8010076:	f44f 7210 	mov.w	r2, #576	; 0x240
 801007a:	494e      	ldr	r1, [pc, #312]	; (80101b4 <tcp_abandon+0x168>)
 801007c:	484c      	ldr	r0, [pc, #304]	; (80101b0 <tcp_abandon+0x164>)
 801007e:	f00a fcf3 	bl	801aa68 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	7d1b      	ldrb	r3, [r3, #20]
 8010086:	2b0a      	cmp	r3, #10
 8010088:	d107      	bne.n	801009a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801008a:	6879      	ldr	r1, [r7, #4]
 801008c:	484a      	ldr	r0, [pc, #296]	; (80101b8 <tcp_abandon+0x16c>)
 801008e:	f000 ffc3 	bl	8011018 <tcp_pcb_remove>
    tcp_free(pcb);
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f7ff fdb0 	bl	800fbf8 <tcp_free>
 8010098:	e082      	b.n	80101a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801009a:	2300      	movs	r3, #0
 801009c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801009e:	2300      	movs	r3, #0
 80100a0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	691b      	ldr	r3, [r3, #16]
 80100ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	7d1b      	ldrb	r3, [r3, #20]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d126      	bne.n	8010112 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	8adb      	ldrh	r3, [r3, #22]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d02e      	beq.n	801012a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80100cc:	4b3b      	ldr	r3, [pc, #236]	; (80101bc <tcp_abandon+0x170>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d105      	bne.n	80100e2 <tcp_abandon+0x96>
 80100d6:	4b39      	ldr	r3, [pc, #228]	; (80101bc <tcp_abandon+0x170>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	4a37      	ldr	r2, [pc, #220]	; (80101bc <tcp_abandon+0x170>)
 80100de:	6013      	str	r3, [r2, #0]
 80100e0:	e013      	b.n	801010a <tcp_abandon+0xbe>
 80100e2:	4b36      	ldr	r3, [pc, #216]	; (80101bc <tcp_abandon+0x170>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	61fb      	str	r3, [r7, #28]
 80100e8:	e00c      	b.n	8010104 <tcp_abandon+0xb8>
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	68db      	ldr	r3, [r3, #12]
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d104      	bne.n	80100fe <tcp_abandon+0xb2>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	68da      	ldr	r2, [r3, #12]
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	60da      	str	r2, [r3, #12]
 80100fc:	e005      	b.n	801010a <tcp_abandon+0xbe>
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	61fb      	str	r3, [r7, #28]
 8010104:	69fb      	ldr	r3, [r7, #28]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d1ef      	bne.n	80100ea <tcp_abandon+0x9e>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	60da      	str	r2, [r3, #12]
 8010110:	e00b      	b.n	801012a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	8adb      	ldrh	r3, [r3, #22]
 801011a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801011c:	6879      	ldr	r1, [r7, #4]
 801011e:	4828      	ldr	r0, [pc, #160]	; (80101c0 <tcp_abandon+0x174>)
 8010120:	f000 ff7a 	bl	8011018 <tcp_pcb_remove>
 8010124:	4b27      	ldr	r3, [pc, #156]	; (80101c4 <tcp_abandon+0x178>)
 8010126:	2201      	movs	r2, #1
 8010128:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801012e:	2b00      	cmp	r3, #0
 8010130:	d004      	beq.n	801013c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010136:	4618      	mov	r0, r3
 8010138:	f000 fd1c 	bl	8010b74 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010140:	2b00      	cmp	r3, #0
 8010142:	d004      	beq.n	801014e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010148:	4618      	mov	r0, r3
 801014a:	f000 fd13 	bl	8010b74 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010152:	2b00      	cmp	r3, #0
 8010154:	d004      	beq.n	8010160 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801015a:	4618      	mov	r0, r3
 801015c:	f000 fd0a 	bl	8010b74 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010162:	2b00      	cmp	r3, #0
 8010164:	d00e      	beq.n	8010184 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010166:	6879      	ldr	r1, [r7, #4]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	3304      	adds	r3, #4
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	8b12      	ldrh	r2, [r2, #24]
 8010170:	9202      	str	r2, [sp, #8]
 8010172:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010174:	9201      	str	r2, [sp, #4]
 8010176:	9300      	str	r3, [sp, #0]
 8010178:	460b      	mov	r3, r1
 801017a:	697a      	ldr	r2, [r7, #20]
 801017c:	69b9      	ldr	r1, [r7, #24]
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f004 fcbe 	bl	8014b00 <tcp_rst>
    }
    last_state = pcb->state;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	7d1b      	ldrb	r3, [r3, #20]
 8010188:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f7ff fd34 	bl	800fbf8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010190:	693b      	ldr	r3, [r7, #16]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d004      	beq.n	80101a0 <tcp_abandon+0x154>
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	f06f 010c 	mvn.w	r1, #12
 801019c:	68f8      	ldr	r0, [r7, #12]
 801019e:	4798      	blx	r3
  }
}
 80101a0:	3728      	adds	r7, #40	; 0x28
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	0801cccc 	.word	0x0801cccc
 80101ac:	0801ce10 	.word	0x0801ce10
 80101b0:	0801cd10 	.word	0x0801cd10
 80101b4:	0801ce2c 	.word	0x0801ce2c
 80101b8:	2000f408 	.word	0x2000f408
 80101bc:	2000f404 	.word	0x2000f404
 80101c0:	2000f3f8 	.word	0x2000f3f8
 80101c4:	2000f3f4 	.word	0x2000f3f4

080101c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80101d0:	2101      	movs	r1, #1
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f7ff ff3a 	bl	801004c <tcp_abandon>
}
 80101d8:	bf00      	nop
 80101da:	3708      	adds	r7, #8
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d106      	bne.n	80101fc <tcp_update_rcv_ann_wnd+0x1c>
 80101ee:	4b25      	ldr	r3, [pc, #148]	; (8010284 <tcp_update_rcv_ann_wnd+0xa4>)
 80101f0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80101f4:	4924      	ldr	r1, [pc, #144]	; (8010288 <tcp_update_rcv_ann_wnd+0xa8>)
 80101f6:	4825      	ldr	r0, [pc, #148]	; (801028c <tcp_update_rcv_ann_wnd+0xac>)
 80101f8:	f00a fc36 	bl	801aa68 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010204:	4413      	add	r3, r2
 8010206:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801020c:	687a      	ldr	r2, [r7, #4]
 801020e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010210:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010214:	bf28      	it	cs
 8010216:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801021a:	b292      	uxth	r2, r2
 801021c:	4413      	add	r3, r2
 801021e:	68fa      	ldr	r2, [r7, #12]
 8010220:	1ad3      	subs	r3, r2, r3
 8010222:	2b00      	cmp	r3, #0
 8010224:	db08      	blt.n	8010238 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010232:	68fa      	ldr	r2, [r7, #12]
 8010234:	1ad3      	subs	r3, r2, r3
 8010236:	e020      	b.n	801027a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	2b00      	cmp	r3, #0
 8010244:	dd03      	ble.n	801024e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2200      	movs	r2, #0
 801024a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801024c:	e014      	b.n	8010278 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010256:	1ad3      	subs	r3, r2, r3
 8010258:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010260:	d306      	bcc.n	8010270 <tcp_update_rcv_ann_wnd+0x90>
 8010262:	4b08      	ldr	r3, [pc, #32]	; (8010284 <tcp_update_rcv_ann_wnd+0xa4>)
 8010264:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010268:	4909      	ldr	r1, [pc, #36]	; (8010290 <tcp_update_rcv_ann_wnd+0xb0>)
 801026a:	4808      	ldr	r0, [pc, #32]	; (801028c <tcp_update_rcv_ann_wnd+0xac>)
 801026c:	f00a fbfc 	bl	801aa68 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	b29a      	uxth	r2, r3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010278:	2300      	movs	r3, #0
  }
}
 801027a:	4618      	mov	r0, r3
 801027c:	3710      	adds	r7, #16
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	0801cccc 	.word	0x0801cccc
 8010288:	0801cf28 	.word	0x0801cf28
 801028c:	0801cd10 	.word	0x0801cd10
 8010290:	0801cf4c 	.word	0x0801cf4c

08010294 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	460b      	mov	r3, r1
 801029e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d107      	bne.n	80102b6 <tcp_recved+0x22>
 80102a6:	4b1f      	ldr	r3, [pc, #124]	; (8010324 <tcp_recved+0x90>)
 80102a8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80102ac:	491e      	ldr	r1, [pc, #120]	; (8010328 <tcp_recved+0x94>)
 80102ae:	481f      	ldr	r0, [pc, #124]	; (801032c <tcp_recved+0x98>)
 80102b0:	f00a fbda 	bl	801aa68 <iprintf>
 80102b4:	e032      	b.n	801031c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	7d1b      	ldrb	r3, [r3, #20]
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	d106      	bne.n	80102cc <tcp_recved+0x38>
 80102be:	4b19      	ldr	r3, [pc, #100]	; (8010324 <tcp_recved+0x90>)
 80102c0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80102c4:	491a      	ldr	r1, [pc, #104]	; (8010330 <tcp_recved+0x9c>)
 80102c6:	4819      	ldr	r0, [pc, #100]	; (801032c <tcp_recved+0x98>)
 80102c8:	f00a fbce 	bl	801aa68 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80102d0:	887b      	ldrh	r3, [r7, #2]
 80102d2:	4413      	add	r3, r2
 80102d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80102d6:	89fb      	ldrh	r3, [r7, #14]
 80102d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80102dc:	d804      	bhi.n	80102e8 <tcp_recved+0x54>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80102e2:	89fa      	ldrh	r2, [r7, #14]
 80102e4:	429a      	cmp	r2, r3
 80102e6:	d204      	bcs.n	80102f2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80102ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80102f0:	e002      	b.n	80102f8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	89fa      	ldrh	r2, [r7, #14]
 80102f6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f7ff ff71 	bl	80101e0 <tcp_update_rcv_ann_wnd>
 80102fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010306:	d309      	bcc.n	801031c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	8b5b      	ldrh	r3, [r3, #26]
 801030c:	f043 0302 	orr.w	r3, r3, #2
 8010310:	b29a      	uxth	r2, r3
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f003 fe3e 	bl	8013f98 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801031c:	3710      	adds	r7, #16
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	0801cccc 	.word	0x0801cccc
 8010328:	0801cf68 	.word	0x0801cf68
 801032c:	0801cd10 	.word	0x0801cd10
 8010330:	0801cf80 	.word	0x0801cf80

08010334 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010334:	b5b0      	push	{r4, r5, r7, lr}
 8010336:	b090      	sub	sp, #64	; 0x40
 8010338:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801033a:	2300      	movs	r3, #0
 801033c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010340:	4b94      	ldr	r3, [pc, #592]	; (8010594 <tcp_slowtmr+0x260>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	3301      	adds	r3, #1
 8010346:	4a93      	ldr	r2, [pc, #588]	; (8010594 <tcp_slowtmr+0x260>)
 8010348:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801034a:	4b93      	ldr	r3, [pc, #588]	; (8010598 <tcp_slowtmr+0x264>)
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	3301      	adds	r3, #1
 8010350:	b2da      	uxtb	r2, r3
 8010352:	4b91      	ldr	r3, [pc, #580]	; (8010598 <tcp_slowtmr+0x264>)
 8010354:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010356:	2300      	movs	r3, #0
 8010358:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801035a:	4b90      	ldr	r3, [pc, #576]	; (801059c <tcp_slowtmr+0x268>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010360:	e29f      	b.n	80108a2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010364:	7d1b      	ldrb	r3, [r3, #20]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d106      	bne.n	8010378 <tcp_slowtmr+0x44>
 801036a:	4b8d      	ldr	r3, [pc, #564]	; (80105a0 <tcp_slowtmr+0x26c>)
 801036c:	f240 42be 	movw	r2, #1214	; 0x4be
 8010370:	498c      	ldr	r1, [pc, #560]	; (80105a4 <tcp_slowtmr+0x270>)
 8010372:	488d      	ldr	r0, [pc, #564]	; (80105a8 <tcp_slowtmr+0x274>)
 8010374:	f00a fb78 	bl	801aa68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801037a:	7d1b      	ldrb	r3, [r3, #20]
 801037c:	2b01      	cmp	r3, #1
 801037e:	d106      	bne.n	801038e <tcp_slowtmr+0x5a>
 8010380:	4b87      	ldr	r3, [pc, #540]	; (80105a0 <tcp_slowtmr+0x26c>)
 8010382:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010386:	4989      	ldr	r1, [pc, #548]	; (80105ac <tcp_slowtmr+0x278>)
 8010388:	4887      	ldr	r0, [pc, #540]	; (80105a8 <tcp_slowtmr+0x274>)
 801038a:	f00a fb6d 	bl	801aa68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801038e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010390:	7d1b      	ldrb	r3, [r3, #20]
 8010392:	2b0a      	cmp	r3, #10
 8010394:	d106      	bne.n	80103a4 <tcp_slowtmr+0x70>
 8010396:	4b82      	ldr	r3, [pc, #520]	; (80105a0 <tcp_slowtmr+0x26c>)
 8010398:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801039c:	4984      	ldr	r1, [pc, #528]	; (80105b0 <tcp_slowtmr+0x27c>)
 801039e:	4882      	ldr	r0, [pc, #520]	; (80105a8 <tcp_slowtmr+0x274>)
 80103a0:	f00a fb62 	bl	801aa68 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80103a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a6:	7f9a      	ldrb	r2, [r3, #30]
 80103a8:	4b7b      	ldr	r3, [pc, #492]	; (8010598 <tcp_slowtmr+0x264>)
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d105      	bne.n	80103bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80103b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80103b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b6:	68db      	ldr	r3, [r3, #12]
 80103b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80103ba:	e272      	b.n	80108a2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80103bc:	4b76      	ldr	r3, [pc, #472]	; (8010598 <tcp_slowtmr+0x264>)
 80103be:	781a      	ldrb	r2, [r3, #0]
 80103c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80103c4:	2300      	movs	r3, #0
 80103c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80103ca:	2300      	movs	r3, #0
 80103cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80103d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d2:	7d1b      	ldrb	r3, [r3, #20]
 80103d4:	2b02      	cmp	r3, #2
 80103d6:	d10a      	bne.n	80103ee <tcp_slowtmr+0xba>
 80103d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103de:	2b05      	cmp	r3, #5
 80103e0:	d905      	bls.n	80103ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 80103e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103e6:	3301      	adds	r3, #1
 80103e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80103ec:	e11e      	b.n	801062c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80103ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103f4:	2b0b      	cmp	r3, #11
 80103f6:	d905      	bls.n	8010404 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80103f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103fc:	3301      	adds	r3, #1
 80103fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010402:	e113      	b.n	801062c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010406:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801040a:	2b00      	cmp	r3, #0
 801040c:	d075      	beq.n	80104fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801040e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010412:	2b00      	cmp	r3, #0
 8010414:	d006      	beq.n	8010424 <tcp_slowtmr+0xf0>
 8010416:	4b62      	ldr	r3, [pc, #392]	; (80105a0 <tcp_slowtmr+0x26c>)
 8010418:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801041c:	4965      	ldr	r1, [pc, #404]	; (80105b4 <tcp_slowtmr+0x280>)
 801041e:	4862      	ldr	r0, [pc, #392]	; (80105a8 <tcp_slowtmr+0x274>)
 8010420:	f00a fb22 	bl	801aa68 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010428:	2b00      	cmp	r3, #0
 801042a:	d106      	bne.n	801043a <tcp_slowtmr+0x106>
 801042c:	4b5c      	ldr	r3, [pc, #368]	; (80105a0 <tcp_slowtmr+0x26c>)
 801042e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010432:	4961      	ldr	r1, [pc, #388]	; (80105b8 <tcp_slowtmr+0x284>)
 8010434:	485c      	ldr	r0, [pc, #368]	; (80105a8 <tcp_slowtmr+0x274>)
 8010436:	f00a fb17 	bl	801aa68 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801043a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801043c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010440:	2b0b      	cmp	r3, #11
 8010442:	d905      	bls.n	8010450 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010448:	3301      	adds	r3, #1
 801044a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801044e:	e0ed      	b.n	801062c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010452:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010456:	3b01      	subs	r3, #1
 8010458:	4a58      	ldr	r2, [pc, #352]	; (80105bc <tcp_slowtmr+0x288>)
 801045a:	5cd3      	ldrb	r3, [r2, r3]
 801045c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801045e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010460:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010464:	7c7a      	ldrb	r2, [r7, #17]
 8010466:	429a      	cmp	r2, r3
 8010468:	d907      	bls.n	801047a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801046a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010470:	3301      	adds	r3, #1
 8010472:	b2da      	uxtb	r2, r3
 8010474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010476:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010480:	7c7a      	ldrb	r2, [r7, #17]
 8010482:	429a      	cmp	r2, r3
 8010484:	f200 80d2 	bhi.w	801062c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010488:	2301      	movs	r3, #1
 801048a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801048c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010492:	2b00      	cmp	r3, #0
 8010494:	d108      	bne.n	80104a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010498:	f004 fc26 	bl	8014ce8 <tcp_zero_window_probe>
 801049c:	4603      	mov	r3, r0
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d014      	beq.n	80104cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80104a2:	2300      	movs	r3, #0
 80104a4:	623b      	str	r3, [r7, #32]
 80104a6:	e011      	b.n	80104cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80104a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104ae:	4619      	mov	r1, r3
 80104b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104b2:	f003 faeb 	bl	8013a8c <tcp_split_unsent_seg>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d107      	bne.n	80104cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80104bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104be:	f003 fd6b 	bl	8013f98 <tcp_output>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d101      	bne.n	80104cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80104c8:	2300      	movs	r3, #0
 80104ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80104cc:	6a3b      	ldr	r3, [r7, #32]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	f000 80ac 	beq.w	801062c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80104d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d6:	2200      	movs	r2, #0
 80104d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80104dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80104e2:	2b06      	cmp	r3, #6
 80104e4:	f200 80a2 	bhi.w	801062c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80104e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80104ee:	3301      	adds	r3, #1
 80104f0:	b2da      	uxtb	r2, r3
 80104f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80104f8:	e098      	b.n	801062c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80104fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010500:	2b00      	cmp	r3, #0
 8010502:	db0f      	blt.n	8010524 <tcp_slowtmr+0x1f0>
 8010504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010506:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801050a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801050e:	4293      	cmp	r3, r2
 8010510:	d008      	beq.n	8010524 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8010512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010514:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010518:	b29b      	uxth	r3, r3
 801051a:	3301      	adds	r3, #1
 801051c:	b29b      	uxth	r3, r3
 801051e:	b21a      	sxth	r2, r3
 8010520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010522:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010526:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801052a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801052c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010530:	429a      	cmp	r2, r3
 8010532:	db7b      	blt.n	801062c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010536:	f004 f821 	bl	801457c <tcp_rexmit_rto_prepare>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d007      	beq.n	8010550 <tcp_slowtmr+0x21c>
 8010540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010544:	2b00      	cmp	r3, #0
 8010546:	d171      	bne.n	801062c <tcp_slowtmr+0x2f8>
 8010548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801054a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801054c:	2b00      	cmp	r3, #0
 801054e:	d06d      	beq.n	801062c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010552:	7d1b      	ldrb	r3, [r3, #20]
 8010554:	2b02      	cmp	r3, #2
 8010556:	d03a      	beq.n	80105ce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801055e:	2b0c      	cmp	r3, #12
 8010560:	bf28      	it	cs
 8010562:	230c      	movcs	r3, #12
 8010564:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010568:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801056c:	10db      	asrs	r3, r3, #3
 801056e:	b21b      	sxth	r3, r3
 8010570:	461a      	mov	r2, r3
 8010572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010574:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010578:	4413      	add	r3, r2
 801057a:	7efa      	ldrb	r2, [r7, #27]
 801057c:	4910      	ldr	r1, [pc, #64]	; (80105c0 <tcp_slowtmr+0x28c>)
 801057e:	5c8a      	ldrb	r2, [r1, r2]
 8010580:	4093      	lsls	r3, r2
 8010582:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801058a:	4293      	cmp	r3, r2
 801058c:	dc1a      	bgt.n	80105c4 <tcp_slowtmr+0x290>
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	b21a      	sxth	r2, r3
 8010592:	e019      	b.n	80105c8 <tcp_slowtmr+0x294>
 8010594:	2000f3fc 	.word	0x2000f3fc
 8010598:	20008536 	.word	0x20008536
 801059c:	2000f3f8 	.word	0x2000f3f8
 80105a0:	0801cccc 	.word	0x0801cccc
 80105a4:	0801d010 	.word	0x0801d010
 80105a8:	0801cd10 	.word	0x0801cd10
 80105ac:	0801d03c 	.word	0x0801d03c
 80105b0:	0801d068 	.word	0x0801d068
 80105b4:	0801d098 	.word	0x0801d098
 80105b8:	0801d0cc 	.word	0x0801d0cc
 80105bc:	0801f08c 	.word	0x0801f08c
 80105c0:	0801f07c 	.word	0x0801f07c
 80105c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80105c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80105ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d0:	2200      	movs	r2, #0
 80105d2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80105d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80105da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80105e0:	4293      	cmp	r3, r2
 80105e2:	bf28      	it	cs
 80105e4:	4613      	movcs	r3, r2
 80105e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80105e8:	8a7b      	ldrh	r3, [r7, #18]
 80105ea:	085b      	lsrs	r3, r3, #1
 80105ec:	b29a      	uxth	r2, r3
 80105ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80105f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80105fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105fe:	005b      	lsls	r3, r3, #1
 8010600:	b29b      	uxth	r3, r3
 8010602:	429a      	cmp	r2, r3
 8010604:	d206      	bcs.n	8010614 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801060a:	005b      	lsls	r3, r3, #1
 801060c:	b29a      	uxth	r2, r3
 801060e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010610:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010616:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010620:	2200      	movs	r2, #0
 8010622:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8010626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010628:	f004 f818 	bl	801465c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062e:	7d1b      	ldrb	r3, [r3, #20]
 8010630:	2b06      	cmp	r3, #6
 8010632:	d111      	bne.n	8010658 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010636:	8b5b      	ldrh	r3, [r3, #26]
 8010638:	f003 0310 	and.w	r3, r3, #16
 801063c:	2b00      	cmp	r3, #0
 801063e:	d00b      	beq.n	8010658 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010640:	4b9d      	ldr	r3, [pc, #628]	; (80108b8 <tcp_slowtmr+0x584>)
 8010642:	681a      	ldr	r2, [r3, #0]
 8010644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010646:	6a1b      	ldr	r3, [r3, #32]
 8010648:	1ad3      	subs	r3, r2, r3
 801064a:	2b28      	cmp	r3, #40	; 0x28
 801064c:	d904      	bls.n	8010658 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801064e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010652:	3301      	adds	r3, #1
 8010654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065a:	7a5b      	ldrb	r3, [r3, #9]
 801065c:	f003 0308 	and.w	r3, r3, #8
 8010660:	2b00      	cmp	r3, #0
 8010662:	d04c      	beq.n	80106fe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010666:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010668:	2b04      	cmp	r3, #4
 801066a:	d003      	beq.n	8010674 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801066c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010670:	2b07      	cmp	r3, #7
 8010672:	d144      	bne.n	80106fe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010674:	4b90      	ldr	r3, [pc, #576]	; (80108b8 <tcp_slowtmr+0x584>)
 8010676:	681a      	ldr	r2, [r3, #0]
 8010678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067a:	6a1b      	ldr	r3, [r3, #32]
 801067c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801067e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010684:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8010688:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801068c:	498b      	ldr	r1, [pc, #556]	; (80108bc <tcp_slowtmr+0x588>)
 801068e:	fba1 1303 	umull	r1, r3, r1, r3
 8010692:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010694:	429a      	cmp	r2, r3
 8010696:	d90a      	bls.n	80106ae <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801069c:	3301      	adds	r3, #1
 801069e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80106a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80106a6:	3301      	adds	r3, #1
 80106a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80106ac:	e027      	b.n	80106fe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80106ae:	4b82      	ldr	r3, [pc, #520]	; (80108b8 <tcp_slowtmr+0x584>)
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b4:	6a1b      	ldr	r3, [r3, #32]
 80106b6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80106b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80106be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80106c4:	4618      	mov	r0, r3
 80106c6:	4b7e      	ldr	r3, [pc, #504]	; (80108c0 <tcp_slowtmr+0x58c>)
 80106c8:	fb03 f300 	mul.w	r3, r3, r0
 80106cc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80106ce:	497b      	ldr	r1, [pc, #492]	; (80108bc <tcp_slowtmr+0x588>)
 80106d0:	fba1 1303 	umull	r1, r3, r1, r3
 80106d4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d911      	bls.n	80106fe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80106da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106dc:	f004 fac4 	bl	8014c68 <tcp_keepalive>
 80106e0:	4603      	mov	r3, r0
 80106e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80106e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d107      	bne.n	80106fe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80106ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80106f4:	3301      	adds	r3, #1
 80106f6:	b2da      	uxtb	r2, r3
 80106f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80106fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010702:	2b00      	cmp	r3, #0
 8010704:	d011      	beq.n	801072a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010706:	4b6c      	ldr	r3, [pc, #432]	; (80108b8 <tcp_slowtmr+0x584>)
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070c:	6a1b      	ldr	r3, [r3, #32]
 801070e:	1ad2      	subs	r2, r2, r3
 8010710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010712:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010716:	4619      	mov	r1, r3
 8010718:	460b      	mov	r3, r1
 801071a:	005b      	lsls	r3, r3, #1
 801071c:	440b      	add	r3, r1
 801071e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010720:	429a      	cmp	r2, r3
 8010722:	d302      	bcc.n	801072a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010726:	f000 fddb 	bl	80112e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072c:	7d1b      	ldrb	r3, [r3, #20]
 801072e:	2b03      	cmp	r3, #3
 8010730:	d10b      	bne.n	801074a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010732:	4b61      	ldr	r3, [pc, #388]	; (80108b8 <tcp_slowtmr+0x584>)
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010738:	6a1b      	ldr	r3, [r3, #32]
 801073a:	1ad3      	subs	r3, r2, r3
 801073c:	2b28      	cmp	r3, #40	; 0x28
 801073e:	d904      	bls.n	801074a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010744:	3301      	adds	r3, #1
 8010746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801074a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801074c:	7d1b      	ldrb	r3, [r3, #20]
 801074e:	2b09      	cmp	r3, #9
 8010750:	d10b      	bne.n	801076a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010752:	4b59      	ldr	r3, [pc, #356]	; (80108b8 <tcp_slowtmr+0x584>)
 8010754:	681a      	ldr	r2, [r3, #0]
 8010756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010758:	6a1b      	ldr	r3, [r3, #32]
 801075a:	1ad3      	subs	r3, r2, r3
 801075c:	2bf0      	cmp	r3, #240	; 0xf0
 801075e:	d904      	bls.n	801076a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010764:	3301      	adds	r3, #1
 8010766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801076a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801076e:	2b00      	cmp	r3, #0
 8010770:	d060      	beq.n	8010834 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010778:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801077a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801077c:	f000 fbfc 	bl	8010f78 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010782:	2b00      	cmp	r3, #0
 8010784:	d010      	beq.n	80107a8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010786:	4b4f      	ldr	r3, [pc, #316]	; (80108c4 <tcp_slowtmr+0x590>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801078c:	429a      	cmp	r2, r3
 801078e:	d106      	bne.n	801079e <tcp_slowtmr+0x46a>
 8010790:	4b4d      	ldr	r3, [pc, #308]	; (80108c8 <tcp_slowtmr+0x594>)
 8010792:	f240 526d 	movw	r2, #1389	; 0x56d
 8010796:	494d      	ldr	r1, [pc, #308]	; (80108cc <tcp_slowtmr+0x598>)
 8010798:	484d      	ldr	r0, [pc, #308]	; (80108d0 <tcp_slowtmr+0x59c>)
 801079a:	f00a f965 	bl	801aa68 <iprintf>
        prev->next = pcb->next;
 801079e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a0:	68da      	ldr	r2, [r3, #12]
 80107a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a4:	60da      	str	r2, [r3, #12]
 80107a6:	e00f      	b.n	80107c8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80107a8:	4b46      	ldr	r3, [pc, #280]	; (80108c4 <tcp_slowtmr+0x590>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d006      	beq.n	80107c0 <tcp_slowtmr+0x48c>
 80107b2:	4b45      	ldr	r3, [pc, #276]	; (80108c8 <tcp_slowtmr+0x594>)
 80107b4:	f240 5271 	movw	r2, #1393	; 0x571
 80107b8:	4946      	ldr	r1, [pc, #280]	; (80108d4 <tcp_slowtmr+0x5a0>)
 80107ba:	4845      	ldr	r0, [pc, #276]	; (80108d0 <tcp_slowtmr+0x59c>)
 80107bc:	f00a f954 	bl	801aa68 <iprintf>
        tcp_active_pcbs = pcb->next;
 80107c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c2:	68db      	ldr	r3, [r3, #12]
 80107c4:	4a3f      	ldr	r2, [pc, #252]	; (80108c4 <tcp_slowtmr+0x590>)
 80107c6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80107c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d013      	beq.n	80107f8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80107d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80107d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80107d8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80107da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107dc:	3304      	adds	r3, #4
 80107de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107e0:	8ad2      	ldrh	r2, [r2, #22]
 80107e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107e4:	8b09      	ldrh	r1, [r1, #24]
 80107e6:	9102      	str	r1, [sp, #8]
 80107e8:	9201      	str	r2, [sp, #4]
 80107ea:	9300      	str	r3, [sp, #0]
 80107ec:	462b      	mov	r3, r5
 80107ee:	4622      	mov	r2, r4
 80107f0:	4601      	mov	r1, r0
 80107f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107f4:	f004 f984 	bl	8014b00 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fa:	691b      	ldr	r3, [r3, #16]
 80107fc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80107fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010800:	7d1b      	ldrb	r3, [r3, #20]
 8010802:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010806:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801080a:	68db      	ldr	r3, [r3, #12]
 801080c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801080e:	6838      	ldr	r0, [r7, #0]
 8010810:	f7ff f9f2 	bl	800fbf8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8010814:	4b30      	ldr	r3, [pc, #192]	; (80108d8 <tcp_slowtmr+0x5a4>)
 8010816:	2200      	movs	r2, #0
 8010818:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d004      	beq.n	801082a <tcp_slowtmr+0x4f6>
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f06f 010c 	mvn.w	r1, #12
 8010826:	68b8      	ldr	r0, [r7, #8]
 8010828:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801082a:	4b2b      	ldr	r3, [pc, #172]	; (80108d8 <tcp_slowtmr+0x5a4>)
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d037      	beq.n	80108a2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8010832:	e590      	b.n	8010356 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010836:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010840:	7f1b      	ldrb	r3, [r3, #28]
 8010842:	3301      	adds	r3, #1
 8010844:	b2da      	uxtb	r2, r3
 8010846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010848:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801084a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084c:	7f1a      	ldrb	r2, [r3, #28]
 801084e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010850:	7f5b      	ldrb	r3, [r3, #29]
 8010852:	429a      	cmp	r2, r3
 8010854:	d325      	bcc.n	80108a2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8010856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010858:	2200      	movs	r2, #0
 801085a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801085c:	4b1e      	ldr	r3, [pc, #120]	; (80108d8 <tcp_slowtmr+0x5a4>)
 801085e:	2200      	movs	r2, #0
 8010860:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010868:	2b00      	cmp	r3, #0
 801086a:	d00b      	beq.n	8010884 <tcp_slowtmr+0x550>
 801086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010874:	6912      	ldr	r2, [r2, #16]
 8010876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010878:	4610      	mov	r0, r2
 801087a:	4798      	blx	r3
 801087c:	4603      	mov	r3, r0
 801087e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010882:	e002      	b.n	801088a <tcp_slowtmr+0x556>
 8010884:	2300      	movs	r3, #0
 8010886:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801088a:	4b13      	ldr	r3, [pc, #76]	; (80108d8 <tcp_slowtmr+0x5a4>)
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d000      	beq.n	8010894 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8010892:	e560      	b.n	8010356 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010894:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010898:	2b00      	cmp	r3, #0
 801089a:	d102      	bne.n	80108a2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801089c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801089e:	f003 fb7b 	bl	8013f98 <tcp_output>
  while (pcb != NULL) {
 80108a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	f47f ad5c 	bne.w	8010362 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80108aa:	2300      	movs	r3, #0
 80108ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80108ae:	4b0b      	ldr	r3, [pc, #44]	; (80108dc <tcp_slowtmr+0x5a8>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80108b4:	e067      	b.n	8010986 <tcp_slowtmr+0x652>
 80108b6:	bf00      	nop
 80108b8:	2000f3fc 	.word	0x2000f3fc
 80108bc:	10624dd3 	.word	0x10624dd3
 80108c0:	000124f8 	.word	0x000124f8
 80108c4:	2000f3f8 	.word	0x2000f3f8
 80108c8:	0801cccc 	.word	0x0801cccc
 80108cc:	0801d104 	.word	0x0801d104
 80108d0:	0801cd10 	.word	0x0801cd10
 80108d4:	0801d130 	.word	0x0801d130
 80108d8:	2000f3f4 	.word	0x2000f3f4
 80108dc:	2000f408 	.word	0x2000f408
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80108e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e2:	7d1b      	ldrb	r3, [r3, #20]
 80108e4:	2b0a      	cmp	r3, #10
 80108e6:	d006      	beq.n	80108f6 <tcp_slowtmr+0x5c2>
 80108e8:	4b2b      	ldr	r3, [pc, #172]	; (8010998 <tcp_slowtmr+0x664>)
 80108ea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80108ee:	492b      	ldr	r1, [pc, #172]	; (801099c <tcp_slowtmr+0x668>)
 80108f0:	482b      	ldr	r0, [pc, #172]	; (80109a0 <tcp_slowtmr+0x66c>)
 80108f2:	f00a f8b9 	bl	801aa68 <iprintf>
    pcb_remove = 0;
 80108f6:	2300      	movs	r3, #0
 80108f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80108fc:	4b29      	ldr	r3, [pc, #164]	; (80109a4 <tcp_slowtmr+0x670>)
 80108fe:	681a      	ldr	r2, [r3, #0]
 8010900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010902:	6a1b      	ldr	r3, [r3, #32]
 8010904:	1ad3      	subs	r3, r2, r3
 8010906:	2bf0      	cmp	r3, #240	; 0xf0
 8010908:	d904      	bls.n	8010914 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801090a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801090e:	3301      	adds	r3, #1
 8010910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010918:	2b00      	cmp	r3, #0
 801091a:	d02f      	beq.n	801097c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801091c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801091e:	f000 fb2b 	bl	8010f78 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010924:	2b00      	cmp	r3, #0
 8010926:	d010      	beq.n	801094a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010928:	4b1f      	ldr	r3, [pc, #124]	; (80109a8 <tcp_slowtmr+0x674>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801092e:	429a      	cmp	r2, r3
 8010930:	d106      	bne.n	8010940 <tcp_slowtmr+0x60c>
 8010932:	4b19      	ldr	r3, [pc, #100]	; (8010998 <tcp_slowtmr+0x664>)
 8010934:	f240 52af 	movw	r2, #1455	; 0x5af
 8010938:	491c      	ldr	r1, [pc, #112]	; (80109ac <tcp_slowtmr+0x678>)
 801093a:	4819      	ldr	r0, [pc, #100]	; (80109a0 <tcp_slowtmr+0x66c>)
 801093c:	f00a f894 	bl	801aa68 <iprintf>
        prev->next = pcb->next;
 8010940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010942:	68da      	ldr	r2, [r3, #12]
 8010944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010946:	60da      	str	r2, [r3, #12]
 8010948:	e00f      	b.n	801096a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801094a:	4b17      	ldr	r3, [pc, #92]	; (80109a8 <tcp_slowtmr+0x674>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010950:	429a      	cmp	r2, r3
 8010952:	d006      	beq.n	8010962 <tcp_slowtmr+0x62e>
 8010954:	4b10      	ldr	r3, [pc, #64]	; (8010998 <tcp_slowtmr+0x664>)
 8010956:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801095a:	4915      	ldr	r1, [pc, #84]	; (80109b0 <tcp_slowtmr+0x67c>)
 801095c:	4810      	ldr	r0, [pc, #64]	; (80109a0 <tcp_slowtmr+0x66c>)
 801095e:	f00a f883 	bl	801aa68 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010964:	68db      	ldr	r3, [r3, #12]
 8010966:	4a10      	ldr	r2, [pc, #64]	; (80109a8 <tcp_slowtmr+0x674>)
 8010968:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801096a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801096c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010970:	68db      	ldr	r3, [r3, #12]
 8010972:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010974:	69f8      	ldr	r0, [r7, #28]
 8010976:	f7ff f93f 	bl	800fbf8 <tcp_free>
 801097a:	e004      	b.n	8010986 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801097c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010982:	68db      	ldr	r3, [r3, #12]
 8010984:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010988:	2b00      	cmp	r3, #0
 801098a:	d1a9      	bne.n	80108e0 <tcp_slowtmr+0x5ac>
    }
  }
}
 801098c:	bf00      	nop
 801098e:	bf00      	nop
 8010990:	3730      	adds	r7, #48	; 0x30
 8010992:	46bd      	mov	sp, r7
 8010994:	bdb0      	pop	{r4, r5, r7, pc}
 8010996:	bf00      	nop
 8010998:	0801cccc 	.word	0x0801cccc
 801099c:	0801d15c 	.word	0x0801d15c
 80109a0:	0801cd10 	.word	0x0801cd10
 80109a4:	2000f3fc 	.word	0x2000f3fc
 80109a8:	2000f408 	.word	0x2000f408
 80109ac:	0801d18c 	.word	0x0801d18c
 80109b0:	0801d1b4 	.word	0x0801d1b4

080109b4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80109ba:	4b2d      	ldr	r3, [pc, #180]	; (8010a70 <tcp_fasttmr+0xbc>)
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	3301      	adds	r3, #1
 80109c0:	b2da      	uxtb	r2, r3
 80109c2:	4b2b      	ldr	r3, [pc, #172]	; (8010a70 <tcp_fasttmr+0xbc>)
 80109c4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80109c6:	4b2b      	ldr	r3, [pc, #172]	; (8010a74 <tcp_fasttmr+0xc0>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80109cc:	e048      	b.n	8010a60 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	7f9a      	ldrb	r2, [r3, #30]
 80109d2:	4b27      	ldr	r3, [pc, #156]	; (8010a70 <tcp_fasttmr+0xbc>)
 80109d4:	781b      	ldrb	r3, [r3, #0]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d03f      	beq.n	8010a5a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80109da:	4b25      	ldr	r3, [pc, #148]	; (8010a70 <tcp_fasttmr+0xbc>)
 80109dc:	781a      	ldrb	r2, [r3, #0]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	8b5b      	ldrh	r3, [r3, #26]
 80109e6:	f003 0301 	and.w	r3, r3, #1
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d010      	beq.n	8010a10 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	8b5b      	ldrh	r3, [r3, #26]
 80109f2:	f043 0302 	orr.w	r3, r3, #2
 80109f6:	b29a      	uxth	r2, r3
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f003 facb 	bl	8013f98 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	8b5b      	ldrh	r3, [r3, #26]
 8010a06:	f023 0303 	bic.w	r3, r3, #3
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	8b5b      	ldrh	r3, [r3, #26]
 8010a14:	f003 0308 	and.w	r3, r3, #8
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d009      	beq.n	8010a30 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	8b5b      	ldrh	r3, [r3, #26]
 8010a20:	f023 0308 	bic.w	r3, r3, #8
 8010a24:	b29a      	uxth	r2, r3
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7ff fa78 	bl	800ff20 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	68db      	ldr	r3, [r3, #12]
 8010a34:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d00a      	beq.n	8010a54 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010a3e:	4b0e      	ldr	r3, [pc, #56]	; (8010a78 <tcp_fasttmr+0xc4>)
 8010a40:	2200      	movs	r2, #0
 8010a42:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f000 f819 	bl	8010a7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010a4a:	4b0b      	ldr	r3, [pc, #44]	; (8010a78 <tcp_fasttmr+0xc4>)
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d000      	beq.n	8010a54 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010a52:	e7b8      	b.n	80109c6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	607b      	str	r3, [r7, #4]
 8010a58:	e002      	b.n	8010a60 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	68db      	ldr	r3, [r3, #12]
 8010a5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d1b3      	bne.n	80109ce <tcp_fasttmr+0x1a>
    }
  }
}
 8010a66:	bf00      	nop
 8010a68:	bf00      	nop
 8010a6a:	3708      	adds	r7, #8
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	20008536 	.word	0x20008536
 8010a74:	2000f3f8 	.word	0x2000f3f8
 8010a78:	2000f3f4 	.word	0x2000f3f4

08010a7c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010a7c:	b590      	push	{r4, r7, lr}
 8010a7e:	b085      	sub	sp, #20
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d109      	bne.n	8010a9e <tcp_process_refused_data+0x22>
 8010a8a:	4b37      	ldr	r3, [pc, #220]	; (8010b68 <tcp_process_refused_data+0xec>)
 8010a8c:	f240 6209 	movw	r2, #1545	; 0x609
 8010a90:	4936      	ldr	r1, [pc, #216]	; (8010b6c <tcp_process_refused_data+0xf0>)
 8010a92:	4837      	ldr	r0, [pc, #220]	; (8010b70 <tcp_process_refused_data+0xf4>)
 8010a94:	f009 ffe8 	bl	801aa68 <iprintf>
 8010a98:	f06f 030f 	mvn.w	r3, #15
 8010a9c:	e060      	b.n	8010b60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010aa2:	7b5b      	ldrb	r3, [r3, #13]
 8010aa4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010aaa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d00b      	beq.n	8010ad4 <tcp_process_refused_data+0x58>
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6918      	ldr	r0, [r3, #16]
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	68ba      	ldr	r2, [r7, #8]
 8010aca:	6879      	ldr	r1, [r7, #4]
 8010acc:	47a0      	blx	r4
 8010ace:	4603      	mov	r3, r0
 8010ad0:	73fb      	strb	r3, [r7, #15]
 8010ad2:	e007      	b.n	8010ae4 <tcp_process_refused_data+0x68>
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	68ba      	ldr	r2, [r7, #8]
 8010ad8:	6879      	ldr	r1, [r7, #4]
 8010ada:	2000      	movs	r0, #0
 8010adc:	f000 f8a4 	bl	8010c28 <tcp_recv_null>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d12a      	bne.n	8010b42 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010aec:	7bbb      	ldrb	r3, [r7, #14]
 8010aee:	f003 0320 	and.w	r3, r3, #32
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d033      	beq.n	8010b5e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010afa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010afe:	d005      	beq.n	8010b0c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b04:	3301      	adds	r3, #1
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d00b      	beq.n	8010b2e <tcp_process_refused_data+0xb2>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6918      	ldr	r0, [r3, #16]
 8010b20:	2300      	movs	r3, #0
 8010b22:	2200      	movs	r2, #0
 8010b24:	6879      	ldr	r1, [r7, #4]
 8010b26:	47a0      	blx	r4
 8010b28:	4603      	mov	r3, r0
 8010b2a:	73fb      	strb	r3, [r7, #15]
 8010b2c:	e001      	b.n	8010b32 <tcp_process_refused_data+0xb6>
 8010b2e:	2300      	movs	r3, #0
 8010b30:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b36:	f113 0f0d 	cmn.w	r3, #13
 8010b3a:	d110      	bne.n	8010b5e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010b3c:	f06f 030c 	mvn.w	r3, #12
 8010b40:	e00e      	b.n	8010b60 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b46:	f113 0f0d 	cmn.w	r3, #13
 8010b4a:	d102      	bne.n	8010b52 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010b4c:	f06f 030c 	mvn.w	r3, #12
 8010b50:	e006      	b.n	8010b60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	68ba      	ldr	r2, [r7, #8]
 8010b56:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010b58:	f06f 0304 	mvn.w	r3, #4
 8010b5c:	e000      	b.n	8010b60 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010b5e:	2300      	movs	r3, #0
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3714      	adds	r7, #20
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd90      	pop	{r4, r7, pc}
 8010b68:	0801cccc 	.word	0x0801cccc
 8010b6c:	0801d1dc 	.word	0x0801d1dc
 8010b70:	0801cd10 	.word	0x0801cd10

08010b74 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010b7c:	e007      	b.n	8010b8e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f000 f80a 	bl	8010b9e <tcp_seg_free>
    seg = next;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d1f4      	bne.n	8010b7e <tcp_segs_free+0xa>
  }
}
 8010b94:	bf00      	nop
 8010b96:	bf00      	nop
 8010b98:	3710      	adds	r7, #16
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}

08010b9e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b082      	sub	sp, #8
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d00c      	beq.n	8010bc6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	685b      	ldr	r3, [r3, #4]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d004      	beq.n	8010bbe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	685b      	ldr	r3, [r3, #4]
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7fe fd61 	bl	800f680 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010bbe:	6879      	ldr	r1, [r7, #4]
 8010bc0:	2003      	movs	r0, #3
 8010bc2:	f7fd fead 	bl	800e920 <memp_free>
  }
}
 8010bc6:	bf00      	nop
 8010bc8:	3708      	adds	r7, #8
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
	...

08010bd0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b084      	sub	sp, #16
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d106      	bne.n	8010bec <tcp_seg_copy+0x1c>
 8010bde:	4b0f      	ldr	r3, [pc, #60]	; (8010c1c <tcp_seg_copy+0x4c>)
 8010be0:	f240 6282 	movw	r2, #1666	; 0x682
 8010be4:	490e      	ldr	r1, [pc, #56]	; (8010c20 <tcp_seg_copy+0x50>)
 8010be6:	480f      	ldr	r0, [pc, #60]	; (8010c24 <tcp_seg_copy+0x54>)
 8010be8:	f009 ff3e 	bl	801aa68 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010bec:	2003      	movs	r0, #3
 8010bee:	f7fd fe45 	bl	800e87c <memp_malloc>
 8010bf2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d101      	bne.n	8010bfe <tcp_seg_copy+0x2e>
    return NULL;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	e00a      	b.n	8010c14 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010bfe:	2210      	movs	r2, #16
 8010c00:	6879      	ldr	r1, [r7, #4]
 8010c02:	68f8      	ldr	r0, [r7, #12]
 8010c04:	f009 fe70 	bl	801a8e8 <memcpy>
  pbuf_ref(cseg->p);
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7fe fddd 	bl	800f7cc <pbuf_ref>
  return cseg;
 8010c12:	68fb      	ldr	r3, [r7, #12]
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3710      	adds	r7, #16
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}
 8010c1c:	0801cccc 	.word	0x0801cccc
 8010c20:	0801d220 	.word	0x0801d220
 8010c24:	0801cd10 	.word	0x0801cd10

08010c28 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b084      	sub	sp, #16
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	607a      	str	r2, [r7, #4]
 8010c34:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d109      	bne.n	8010c50 <tcp_recv_null+0x28>
 8010c3c:	4b12      	ldr	r3, [pc, #72]	; (8010c88 <tcp_recv_null+0x60>)
 8010c3e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010c42:	4912      	ldr	r1, [pc, #72]	; (8010c8c <tcp_recv_null+0x64>)
 8010c44:	4812      	ldr	r0, [pc, #72]	; (8010c90 <tcp_recv_null+0x68>)
 8010c46:	f009 ff0f 	bl	801aa68 <iprintf>
 8010c4a:	f06f 030f 	mvn.w	r3, #15
 8010c4e:	e016      	b.n	8010c7e <tcp_recv_null+0x56>

  if (p != NULL) {
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d009      	beq.n	8010c6a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	891b      	ldrh	r3, [r3, #8]
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	68b8      	ldr	r0, [r7, #8]
 8010c5e:	f7ff fb19 	bl	8010294 <tcp_recved>
    pbuf_free(p);
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f7fe fd0c 	bl	800f680 <pbuf_free>
 8010c68:	e008      	b.n	8010c7c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d104      	bne.n	8010c7c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010c72:	68b8      	ldr	r0, [r7, #8]
 8010c74:	f7ff f9be 	bl	800fff4 <tcp_close>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	e000      	b.n	8010c7e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010c7c:	2300      	movs	r3, #0
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3710      	adds	r7, #16
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}
 8010c86:	bf00      	nop
 8010c88:	0801cccc 	.word	0x0801cccc
 8010c8c:	0801d23c 	.word	0x0801d23c
 8010c90:	0801cd10 	.word	0x0801cd10

08010c94 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b086      	sub	sp, #24
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	db01      	blt.n	8010caa <tcp_kill_prio+0x16>
 8010ca6:	79fb      	ldrb	r3, [r7, #7]
 8010ca8:	e000      	b.n	8010cac <tcp_kill_prio+0x18>
 8010caa:	237f      	movs	r3, #127	; 0x7f
 8010cac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010cae:	7afb      	ldrb	r3, [r7, #11]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d034      	beq.n	8010d1e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010cb4:	7afb      	ldrb	r3, [r7, #11]
 8010cb6:	3b01      	subs	r3, #1
 8010cb8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cc2:	4b19      	ldr	r3, [pc, #100]	; (8010d28 <tcp_kill_prio+0x94>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	617b      	str	r3, [r7, #20]
 8010cc8:	e01f      	b.n	8010d0a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	7d5b      	ldrb	r3, [r3, #21]
 8010cce:	7afa      	ldrb	r2, [r7, #11]
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d80c      	bhi.n	8010cee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010cd8:	7afa      	ldrb	r2, [r7, #11]
 8010cda:	429a      	cmp	r2, r3
 8010cdc:	d112      	bne.n	8010d04 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010cde:	4b13      	ldr	r3, [pc, #76]	; (8010d2c <tcp_kill_prio+0x98>)
 8010ce0:	681a      	ldr	r2, [r3, #0]
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	6a1b      	ldr	r3, [r3, #32]
 8010ce6:	1ad3      	subs	r3, r2, r3
 8010ce8:	68fa      	ldr	r2, [r7, #12]
 8010cea:	429a      	cmp	r2, r3
 8010cec:	d80a      	bhi.n	8010d04 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010cee:	4b0f      	ldr	r3, [pc, #60]	; (8010d2c <tcp_kill_prio+0x98>)
 8010cf0:	681a      	ldr	r2, [r3, #0]
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	6a1b      	ldr	r3, [r3, #32]
 8010cf6:	1ad3      	subs	r3, r2, r3
 8010cf8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	7d5b      	ldrb	r3, [r3, #21]
 8010d02:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	68db      	ldr	r3, [r3, #12]
 8010d08:	617b      	str	r3, [r7, #20]
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d1dc      	bne.n	8010cca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d004      	beq.n	8010d20 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010d16:	6938      	ldr	r0, [r7, #16]
 8010d18:	f7ff fa56 	bl	80101c8 <tcp_abort>
 8010d1c:	e000      	b.n	8010d20 <tcp_kill_prio+0x8c>
    return;
 8010d1e:	bf00      	nop
  }
}
 8010d20:	3718      	adds	r7, #24
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop
 8010d28:	2000f3f8 	.word	0x2000f3f8
 8010d2c:	2000f3fc 	.word	0x2000f3fc

08010d30 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b086      	sub	sp, #24
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	4603      	mov	r3, r0
 8010d38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010d3a:	79fb      	ldrb	r3, [r7, #7]
 8010d3c:	2b08      	cmp	r3, #8
 8010d3e:	d009      	beq.n	8010d54 <tcp_kill_state+0x24>
 8010d40:	79fb      	ldrb	r3, [r7, #7]
 8010d42:	2b09      	cmp	r3, #9
 8010d44:	d006      	beq.n	8010d54 <tcp_kill_state+0x24>
 8010d46:	4b1a      	ldr	r3, [pc, #104]	; (8010db0 <tcp_kill_state+0x80>)
 8010d48:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010d4c:	4919      	ldr	r1, [pc, #100]	; (8010db4 <tcp_kill_state+0x84>)
 8010d4e:	481a      	ldr	r0, [pc, #104]	; (8010db8 <tcp_kill_state+0x88>)
 8010d50:	f009 fe8a 	bl	801aa68 <iprintf>

  inactivity = 0;
 8010d54:	2300      	movs	r3, #0
 8010d56:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d5c:	4b17      	ldr	r3, [pc, #92]	; (8010dbc <tcp_kill_state+0x8c>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	617b      	str	r3, [r7, #20]
 8010d62:	e017      	b.n	8010d94 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	7d1b      	ldrb	r3, [r3, #20]
 8010d68:	79fa      	ldrb	r2, [r7, #7]
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d10f      	bne.n	8010d8e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010d6e:	4b14      	ldr	r3, [pc, #80]	; (8010dc0 <tcp_kill_state+0x90>)
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	6a1b      	ldr	r3, [r3, #32]
 8010d76:	1ad3      	subs	r3, r2, r3
 8010d78:	68fa      	ldr	r2, [r7, #12]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d807      	bhi.n	8010d8e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010d7e:	4b10      	ldr	r3, [pc, #64]	; (8010dc0 <tcp_kill_state+0x90>)
 8010d80:	681a      	ldr	r2, [r3, #0]
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	6a1b      	ldr	r3, [r3, #32]
 8010d86:	1ad3      	subs	r3, r2, r3
 8010d88:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	68db      	ldr	r3, [r3, #12]
 8010d92:	617b      	str	r3, [r7, #20]
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d1e4      	bne.n	8010d64 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d003      	beq.n	8010da8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010da0:	2100      	movs	r1, #0
 8010da2:	6938      	ldr	r0, [r7, #16]
 8010da4:	f7ff f952 	bl	801004c <tcp_abandon>
  }
}
 8010da8:	bf00      	nop
 8010daa:	3718      	adds	r7, #24
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	0801cccc 	.word	0x0801cccc
 8010db4:	0801d258 	.word	0x0801d258
 8010db8:	0801cd10 	.word	0x0801cd10
 8010dbc:	2000f3f8 	.word	0x2000f3f8
 8010dc0:	2000f3fc 	.word	0x2000f3fc

08010dc4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dd2:	4b12      	ldr	r3, [pc, #72]	; (8010e1c <tcp_kill_timewait+0x58>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	60fb      	str	r3, [r7, #12]
 8010dd8:	e012      	b.n	8010e00 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010dda:	4b11      	ldr	r3, [pc, #68]	; (8010e20 <tcp_kill_timewait+0x5c>)
 8010ddc:	681a      	ldr	r2, [r3, #0]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	6a1b      	ldr	r3, [r3, #32]
 8010de2:	1ad3      	subs	r3, r2, r3
 8010de4:	687a      	ldr	r2, [r7, #4]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d807      	bhi.n	8010dfa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010dea:	4b0d      	ldr	r3, [pc, #52]	; (8010e20 <tcp_kill_timewait+0x5c>)
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	6a1b      	ldr	r3, [r3, #32]
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	68db      	ldr	r3, [r3, #12]
 8010dfe:	60fb      	str	r3, [r7, #12]
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d1e9      	bne.n	8010dda <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d002      	beq.n	8010e12 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010e0c:	68b8      	ldr	r0, [r7, #8]
 8010e0e:	f7ff f9db 	bl	80101c8 <tcp_abort>
  }
}
 8010e12:	bf00      	nop
 8010e14:	3710      	adds	r7, #16
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	2000f408 	.word	0x2000f408
 8010e20:	2000f3fc 	.word	0x2000f3fc

08010e24 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b082      	sub	sp, #8
 8010e28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010e2a:	4b10      	ldr	r3, [pc, #64]	; (8010e6c <tcp_handle_closepend+0x48>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010e30:	e014      	b.n	8010e5c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	68db      	ldr	r3, [r3, #12]
 8010e36:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	8b5b      	ldrh	r3, [r3, #26]
 8010e3c:	f003 0308 	and.w	r3, r3, #8
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d009      	beq.n	8010e58 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	8b5b      	ldrh	r3, [r3, #26]
 8010e48:	f023 0308 	bic.w	r3, r3, #8
 8010e4c:	b29a      	uxth	r2, r3
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f7ff f864 	bl	800ff20 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d1e7      	bne.n	8010e32 <tcp_handle_closepend+0xe>
  }
}
 8010e62:	bf00      	nop
 8010e64:	bf00      	nop
 8010e66:	3708      	adds	r7, #8
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	2000f3f8 	.word	0x2000f3f8

08010e70 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b084      	sub	sp, #16
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	4603      	mov	r3, r0
 8010e78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010e7a:	2001      	movs	r0, #1
 8010e7c:	f7fd fcfe 	bl	800e87c <memp_malloc>
 8010e80:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d126      	bne.n	8010ed6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010e88:	f7ff ffcc 	bl	8010e24 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010e8c:	f7ff ff9a 	bl	8010dc4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010e90:	2001      	movs	r0, #1
 8010e92:	f7fd fcf3 	bl	800e87c <memp_malloc>
 8010e96:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d11b      	bne.n	8010ed6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010e9e:	2009      	movs	r0, #9
 8010ea0:	f7ff ff46 	bl	8010d30 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010ea4:	2001      	movs	r0, #1
 8010ea6:	f7fd fce9 	bl	800e87c <memp_malloc>
 8010eaa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d111      	bne.n	8010ed6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010eb2:	2008      	movs	r0, #8
 8010eb4:	f7ff ff3c 	bl	8010d30 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010eb8:	2001      	movs	r0, #1
 8010eba:	f7fd fcdf 	bl	800e87c <memp_malloc>
 8010ebe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d107      	bne.n	8010ed6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010ec6:	79fb      	ldrb	r3, [r7, #7]
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f7ff fee3 	bl	8010c94 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010ece:	2001      	movs	r0, #1
 8010ed0:	f7fd fcd4 	bl	800e87c <memp_malloc>
 8010ed4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d03f      	beq.n	8010f5c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010edc:	229c      	movs	r2, #156	; 0x9c
 8010ede:	2100      	movs	r1, #0
 8010ee0:	68f8      	ldr	r0, [r7, #12]
 8010ee2:	f009 fd0f 	bl	801a904 <memset>
    pcb->prio = prio;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	79fa      	ldrb	r2, [r7, #7]
 8010eea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010ef2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010efc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	22ff      	movs	r2, #255	; 0xff
 8010f0a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010f12:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	2206      	movs	r2, #6
 8010f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	2206      	movs	r2, #6
 8010f20:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f28:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010f32:	4b0d      	ldr	r3, [pc, #52]	; (8010f68 <tcp_alloc+0xf8>)
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010f3a:	4b0c      	ldr	r3, [pc, #48]	; (8010f6c <tcp_alloc+0xfc>)
 8010f3c:	781a      	ldrb	r2, [r3, #0]
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010f48:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	4a08      	ldr	r2, [pc, #32]	; (8010f70 <tcp_alloc+0x100>)
 8010f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	4a07      	ldr	r2, [pc, #28]	; (8010f74 <tcp_alloc+0x104>)
 8010f58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3710      	adds	r7, #16
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}
 8010f66:	bf00      	nop
 8010f68:	2000f3fc 	.word	0x2000f3fc
 8010f6c:	20008536 	.word	0x20008536
 8010f70:	08010c29 	.word	0x08010c29
 8010f74:	006ddd00 	.word	0x006ddd00

08010f78 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d107      	bne.n	8010f96 <tcp_pcb_purge+0x1e>
 8010f86:	4b21      	ldr	r3, [pc, #132]	; (801100c <tcp_pcb_purge+0x94>)
 8010f88:	f640 0251 	movw	r2, #2129	; 0x851
 8010f8c:	4920      	ldr	r1, [pc, #128]	; (8011010 <tcp_pcb_purge+0x98>)
 8010f8e:	4821      	ldr	r0, [pc, #132]	; (8011014 <tcp_pcb_purge+0x9c>)
 8010f90:	f009 fd6a 	bl	801aa68 <iprintf>
 8010f94:	e037      	b.n	8011006 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	7d1b      	ldrb	r3, [r3, #20]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d033      	beq.n	8011006 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010fa2:	2b0a      	cmp	r3, #10
 8010fa4:	d02f      	beq.n	8011006 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d02b      	beq.n	8011006 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d007      	beq.n	8010fc6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7fe fb60 	bl	800f680 <pbuf_free>
      pcb->refused_data = NULL;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d002      	beq.n	8010fd4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f000 f986 	bl	80112e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010fda:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7ff fdc7 	bl	8010b74 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7ff fdc2 	bl	8010b74 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	66da      	str	r2, [r3, #108]	; 0x6c
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2200      	movs	r2, #0
 8011002:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	0801cccc 	.word	0x0801cccc
 8011010:	0801d318 	.word	0x0801d318
 8011014:	0801cd10 	.word	0x0801cd10

08011018 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b084      	sub	sp, #16
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d106      	bne.n	8011036 <tcp_pcb_remove+0x1e>
 8011028:	4b3e      	ldr	r3, [pc, #248]	; (8011124 <tcp_pcb_remove+0x10c>)
 801102a:	f640 0283 	movw	r2, #2179	; 0x883
 801102e:	493e      	ldr	r1, [pc, #248]	; (8011128 <tcp_pcb_remove+0x110>)
 8011030:	483e      	ldr	r0, [pc, #248]	; (801112c <tcp_pcb_remove+0x114>)
 8011032:	f009 fd19 	bl	801aa68 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d106      	bne.n	801104a <tcp_pcb_remove+0x32>
 801103c:	4b39      	ldr	r3, [pc, #228]	; (8011124 <tcp_pcb_remove+0x10c>)
 801103e:	f640 0284 	movw	r2, #2180	; 0x884
 8011042:	493b      	ldr	r1, [pc, #236]	; (8011130 <tcp_pcb_remove+0x118>)
 8011044:	4839      	ldr	r0, [pc, #228]	; (801112c <tcp_pcb_remove+0x114>)
 8011046:	f009 fd0f 	bl	801aa68 <iprintf>

  TCP_RMV(pcblist, pcb);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	683a      	ldr	r2, [r7, #0]
 8011050:	429a      	cmp	r2, r3
 8011052:	d105      	bne.n	8011060 <tcp_pcb_remove+0x48>
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	68da      	ldr	r2, [r3, #12]
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	601a      	str	r2, [r3, #0]
 801105e:	e013      	b.n	8011088 <tcp_pcb_remove+0x70>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	60fb      	str	r3, [r7, #12]
 8011066:	e00c      	b.n	8011082 <tcp_pcb_remove+0x6a>
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	68db      	ldr	r3, [r3, #12]
 801106c:	683a      	ldr	r2, [r7, #0]
 801106e:	429a      	cmp	r2, r3
 8011070:	d104      	bne.n	801107c <tcp_pcb_remove+0x64>
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	68da      	ldr	r2, [r3, #12]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	60da      	str	r2, [r3, #12]
 801107a:	e005      	b.n	8011088 <tcp_pcb_remove+0x70>
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	68db      	ldr	r3, [r3, #12]
 8011080:	60fb      	str	r3, [r7, #12]
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d1ef      	bne.n	8011068 <tcp_pcb_remove+0x50>
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	2200      	movs	r2, #0
 801108c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801108e:	6838      	ldr	r0, [r7, #0]
 8011090:	f7ff ff72 	bl	8010f78 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	7d1b      	ldrb	r3, [r3, #20]
 8011098:	2b0a      	cmp	r3, #10
 801109a:	d013      	beq.n	80110c4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80110a0:	2b01      	cmp	r3, #1
 80110a2:	d00f      	beq.n	80110c4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	8b5b      	ldrh	r3, [r3, #26]
 80110a8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d009      	beq.n	80110c4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	8b5b      	ldrh	r3, [r3, #26]
 80110b4:	f043 0302 	orr.w	r3, r3, #2
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80110be:	6838      	ldr	r0, [r7, #0]
 80110c0:	f002 ff6a 	bl	8013f98 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	7d1b      	ldrb	r3, [r3, #20]
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d020      	beq.n	801110e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d006      	beq.n	80110e2 <tcp_pcb_remove+0xca>
 80110d4:	4b13      	ldr	r3, [pc, #76]	; (8011124 <tcp_pcb_remove+0x10c>)
 80110d6:	f640 0293 	movw	r2, #2195	; 0x893
 80110da:	4916      	ldr	r1, [pc, #88]	; (8011134 <tcp_pcb_remove+0x11c>)
 80110dc:	4813      	ldr	r0, [pc, #76]	; (801112c <tcp_pcb_remove+0x114>)
 80110de:	f009 fcc3 	bl	801aa68 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d006      	beq.n	80110f8 <tcp_pcb_remove+0xe0>
 80110ea:	4b0e      	ldr	r3, [pc, #56]	; (8011124 <tcp_pcb_remove+0x10c>)
 80110ec:	f640 0294 	movw	r2, #2196	; 0x894
 80110f0:	4911      	ldr	r1, [pc, #68]	; (8011138 <tcp_pcb_remove+0x120>)
 80110f2:	480e      	ldr	r0, [pc, #56]	; (801112c <tcp_pcb_remove+0x114>)
 80110f4:	f009 fcb8 	bl	801aa68 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d006      	beq.n	801110e <tcp_pcb_remove+0xf6>
 8011100:	4b08      	ldr	r3, [pc, #32]	; (8011124 <tcp_pcb_remove+0x10c>)
 8011102:	f640 0296 	movw	r2, #2198	; 0x896
 8011106:	490d      	ldr	r1, [pc, #52]	; (801113c <tcp_pcb_remove+0x124>)
 8011108:	4808      	ldr	r0, [pc, #32]	; (801112c <tcp_pcb_remove+0x114>)
 801110a:	f009 fcad 	bl	801aa68 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	2200      	movs	r2, #0
 8011112:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	2200      	movs	r2, #0
 8011118:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801111a:	bf00      	nop
 801111c:	3710      	adds	r7, #16
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}
 8011122:	bf00      	nop
 8011124:	0801cccc 	.word	0x0801cccc
 8011128:	0801d334 	.word	0x0801d334
 801112c:	0801cd10 	.word	0x0801cd10
 8011130:	0801d350 	.word	0x0801d350
 8011134:	0801d370 	.word	0x0801d370
 8011138:	0801d388 	.word	0x0801d388
 801113c:	0801d3a4 	.word	0x0801d3a4

08011140 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d106      	bne.n	801115c <tcp_next_iss+0x1c>
 801114e:	4b0a      	ldr	r3, [pc, #40]	; (8011178 <tcp_next_iss+0x38>)
 8011150:	f640 02af 	movw	r2, #2223	; 0x8af
 8011154:	4909      	ldr	r1, [pc, #36]	; (801117c <tcp_next_iss+0x3c>)
 8011156:	480a      	ldr	r0, [pc, #40]	; (8011180 <tcp_next_iss+0x40>)
 8011158:	f009 fc86 	bl	801aa68 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801115c:	4b09      	ldr	r3, [pc, #36]	; (8011184 <tcp_next_iss+0x44>)
 801115e:	681a      	ldr	r2, [r3, #0]
 8011160:	4b09      	ldr	r3, [pc, #36]	; (8011188 <tcp_next_iss+0x48>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	4413      	add	r3, r2
 8011166:	4a07      	ldr	r2, [pc, #28]	; (8011184 <tcp_next_iss+0x44>)
 8011168:	6013      	str	r3, [r2, #0]
  return iss;
 801116a:	4b06      	ldr	r3, [pc, #24]	; (8011184 <tcp_next_iss+0x44>)
 801116c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801116e:	4618      	mov	r0, r3
 8011170:	3708      	adds	r7, #8
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	0801cccc 	.word	0x0801cccc
 801117c:	0801d3bc 	.word	0x0801d3bc
 8011180:	0801cd10 	.word	0x0801cd10
 8011184:	20000034 	.word	0x20000034
 8011188:	2000f3fc 	.word	0x2000f3fc

0801118c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b086      	sub	sp, #24
 8011190:	af00      	add	r7, sp, #0
 8011192:	4603      	mov	r3, r0
 8011194:	60b9      	str	r1, [r7, #8]
 8011196:	607a      	str	r2, [r7, #4]
 8011198:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d106      	bne.n	80111ae <tcp_eff_send_mss_netif+0x22>
 80111a0:	4b14      	ldr	r3, [pc, #80]	; (80111f4 <tcp_eff_send_mss_netif+0x68>)
 80111a2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80111a6:	4914      	ldr	r1, [pc, #80]	; (80111f8 <tcp_eff_send_mss_netif+0x6c>)
 80111a8:	4814      	ldr	r0, [pc, #80]	; (80111fc <tcp_eff_send_mss_netif+0x70>)
 80111aa:	f009 fc5d 	bl	801aa68 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d101      	bne.n	80111b8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80111b4:	89fb      	ldrh	r3, [r7, #14]
 80111b6:	e019      	b.n	80111ec <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111bc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80111be:	8afb      	ldrh	r3, [r7, #22]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d012      	beq.n	80111ea <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80111c4:	2328      	movs	r3, #40	; 0x28
 80111c6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80111c8:	8afa      	ldrh	r2, [r7, #22]
 80111ca:	8abb      	ldrh	r3, [r7, #20]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d904      	bls.n	80111da <tcp_eff_send_mss_netif+0x4e>
 80111d0:	8afa      	ldrh	r2, [r7, #22]
 80111d2:	8abb      	ldrh	r3, [r7, #20]
 80111d4:	1ad3      	subs	r3, r2, r3
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	e000      	b.n	80111dc <tcp_eff_send_mss_netif+0x50>
 80111da:	2300      	movs	r3, #0
 80111dc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80111de:	8a7a      	ldrh	r2, [r7, #18]
 80111e0:	89fb      	ldrh	r3, [r7, #14]
 80111e2:	4293      	cmp	r3, r2
 80111e4:	bf28      	it	cs
 80111e6:	4613      	movcs	r3, r2
 80111e8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80111ea:	89fb      	ldrh	r3, [r7, #14]
}
 80111ec:	4618      	mov	r0, r3
 80111ee:	3718      	adds	r7, #24
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	0801cccc 	.word	0x0801cccc
 80111f8:	0801d3d8 	.word	0x0801d3d8
 80111fc:	0801cd10 	.word	0x0801cd10

08011200 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b084      	sub	sp, #16
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
 8011208:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d119      	bne.n	8011248 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011214:	4b10      	ldr	r3, [pc, #64]	; (8011258 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011216:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801121a:	4910      	ldr	r1, [pc, #64]	; (801125c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801121c:	4810      	ldr	r0, [pc, #64]	; (8011260 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801121e:	f009 fc23 	bl	801aa68 <iprintf>

  while (pcb != NULL) {
 8011222:	e011      	b.n	8011248 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	681a      	ldr	r2, [r3, #0]
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	429a      	cmp	r2, r3
 801122e:	d108      	bne.n	8011242 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	68db      	ldr	r3, [r3, #12]
 8011234:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011236:	68f8      	ldr	r0, [r7, #12]
 8011238:	f7fe ffc6 	bl	80101c8 <tcp_abort>
      pcb = next;
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	60fb      	str	r3, [r7, #12]
 8011240:	e002      	b.n	8011248 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	68db      	ldr	r3, [r3, #12]
 8011246:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d1ea      	bne.n	8011224 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801124e:	bf00      	nop
 8011250:	bf00      	nop
 8011252:	3710      	adds	r7, #16
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	0801cccc 	.word	0x0801cccc
 801125c:	0801d400 	.word	0x0801d400
 8011260:	0801cd10 	.word	0x0801cd10

08011264 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b084      	sub	sp, #16
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d02a      	beq.n	80112ca <tcp_netif_ip_addr_changed+0x66>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d026      	beq.n	80112ca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801127c:	4b15      	ldr	r3, [pc, #84]	; (80112d4 <tcp_netif_ip_addr_changed+0x70>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	4619      	mov	r1, r3
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f7ff ffbc 	bl	8011200 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011288:	4b13      	ldr	r3, [pc, #76]	; (80112d8 <tcp_netif_ip_addr_changed+0x74>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	4619      	mov	r1, r3
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f7ff ffb6 	bl	8011200 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d017      	beq.n	80112ca <tcp_netif_ip_addr_changed+0x66>
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d013      	beq.n	80112ca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80112a2:	4b0e      	ldr	r3, [pc, #56]	; (80112dc <tcp_netif_ip_addr_changed+0x78>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	60fb      	str	r3, [r7, #12]
 80112a8:	e00c      	b.n	80112c4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d103      	bne.n	80112be <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	681a      	ldr	r2, [r3, #0]
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	68db      	ldr	r3, [r3, #12]
 80112c2:	60fb      	str	r3, [r7, #12]
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d1ef      	bne.n	80112aa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80112ca:	bf00      	nop
 80112cc:	3710      	adds	r7, #16
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}
 80112d2:	bf00      	nop
 80112d4:	2000f3f8 	.word	0x2000f3f8
 80112d8:	2000f404 	.word	0x2000f404
 80112dc:	2000f400 	.word	0x2000f400

080112e0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b082      	sub	sp, #8
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d007      	beq.n	8011300 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7ff fc3d 	bl	8010b74 <tcp_segs_free>
    pcb->ooseq = NULL;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2200      	movs	r2, #0
 80112fe:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011300:	bf00      	nop
 8011302:	3708      	adds	r7, #8
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011308:	b590      	push	{r4, r7, lr}
 801130a:	b08d      	sub	sp, #52	; 0x34
 801130c:	af04      	add	r7, sp, #16
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d105      	bne.n	8011324 <tcp_input+0x1c>
 8011318:	4b9b      	ldr	r3, [pc, #620]	; (8011588 <tcp_input+0x280>)
 801131a:	2283      	movs	r2, #131	; 0x83
 801131c:	499b      	ldr	r1, [pc, #620]	; (801158c <tcp_input+0x284>)
 801131e:	489c      	ldr	r0, [pc, #624]	; (8011590 <tcp_input+0x288>)
 8011320:	f009 fba2 	bl	801aa68 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	4a9a      	ldr	r2, [pc, #616]	; (8011594 <tcp_input+0x28c>)
 801132a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	895b      	ldrh	r3, [r3, #10]
 8011330:	2b13      	cmp	r3, #19
 8011332:	f240 83c4 	bls.w	8011abe <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011336:	4b98      	ldr	r3, [pc, #608]	; (8011598 <tcp_input+0x290>)
 8011338:	695b      	ldr	r3, [r3, #20]
 801133a:	4a97      	ldr	r2, [pc, #604]	; (8011598 <tcp_input+0x290>)
 801133c:	6812      	ldr	r2, [r2, #0]
 801133e:	4611      	mov	r1, r2
 8011340:	4618      	mov	r0, r3
 8011342:	f007 fdf9 	bl	8018f38 <ip4_addr_isbroadcast_u32>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	f040 83ba 	bne.w	8011ac2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801134e:	4b92      	ldr	r3, [pc, #584]	; (8011598 <tcp_input+0x290>)
 8011350:	695b      	ldr	r3, [r3, #20]
 8011352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011356:	2be0      	cmp	r3, #224	; 0xe0
 8011358:	f000 83b3 	beq.w	8011ac2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801135c:	4b8d      	ldr	r3, [pc, #564]	; (8011594 <tcp_input+0x28c>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	899b      	ldrh	r3, [r3, #12]
 8011362:	b29b      	uxth	r3, r3
 8011364:	4618      	mov	r0, r3
 8011366:	f7fc fdd3 	bl	800df10 <lwip_htons>
 801136a:	4603      	mov	r3, r0
 801136c:	0b1b      	lsrs	r3, r3, #12
 801136e:	b29b      	uxth	r3, r3
 8011370:	b2db      	uxtb	r3, r3
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011376:	7cbb      	ldrb	r3, [r7, #18]
 8011378:	2b13      	cmp	r3, #19
 801137a:	f240 83a4 	bls.w	8011ac6 <tcp_input+0x7be>
 801137e:	7cbb      	ldrb	r3, [r7, #18]
 8011380:	b29a      	uxth	r2, r3
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	891b      	ldrh	r3, [r3, #8]
 8011386:	429a      	cmp	r2, r3
 8011388:	f200 839d 	bhi.w	8011ac6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801138c:	7cbb      	ldrb	r3, [r7, #18]
 801138e:	b29b      	uxth	r3, r3
 8011390:	3b14      	subs	r3, #20
 8011392:	b29a      	uxth	r2, r3
 8011394:	4b81      	ldr	r3, [pc, #516]	; (801159c <tcp_input+0x294>)
 8011396:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011398:	4b81      	ldr	r3, [pc, #516]	; (80115a0 <tcp_input+0x298>)
 801139a:	2200      	movs	r2, #0
 801139c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	895a      	ldrh	r2, [r3, #10]
 80113a2:	7cbb      	ldrb	r3, [r7, #18]
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d309      	bcc.n	80113be <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80113aa:	4b7c      	ldr	r3, [pc, #496]	; (801159c <tcp_input+0x294>)
 80113ac:	881a      	ldrh	r2, [r3, #0]
 80113ae:	4b7d      	ldr	r3, [pc, #500]	; (80115a4 <tcp_input+0x29c>)
 80113b0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80113b2:	7cbb      	ldrb	r3, [r7, #18]
 80113b4:	4619      	mov	r1, r3
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f7fe f8dc 	bl	800f574 <pbuf_remove_header>
 80113bc:	e04e      	b.n	801145c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d105      	bne.n	80113d2 <tcp_input+0xca>
 80113c6:	4b70      	ldr	r3, [pc, #448]	; (8011588 <tcp_input+0x280>)
 80113c8:	22c2      	movs	r2, #194	; 0xc2
 80113ca:	4977      	ldr	r1, [pc, #476]	; (80115a8 <tcp_input+0x2a0>)
 80113cc:	4870      	ldr	r0, [pc, #448]	; (8011590 <tcp_input+0x288>)
 80113ce:	f009 fb4b 	bl	801aa68 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80113d2:	2114      	movs	r1, #20
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f7fe f8cd 	bl	800f574 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	895a      	ldrh	r2, [r3, #10]
 80113de:	4b71      	ldr	r3, [pc, #452]	; (80115a4 <tcp_input+0x29c>)
 80113e0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80113e2:	4b6e      	ldr	r3, [pc, #440]	; (801159c <tcp_input+0x294>)
 80113e4:	881a      	ldrh	r2, [r3, #0]
 80113e6:	4b6f      	ldr	r3, [pc, #444]	; (80115a4 <tcp_input+0x29c>)
 80113e8:	881b      	ldrh	r3, [r3, #0]
 80113ea:	1ad3      	subs	r3, r2, r3
 80113ec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80113ee:	4b6d      	ldr	r3, [pc, #436]	; (80115a4 <tcp_input+0x29c>)
 80113f0:	881b      	ldrh	r3, [r3, #0]
 80113f2:	4619      	mov	r1, r3
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f7fe f8bd 	bl	800f574 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	895b      	ldrh	r3, [r3, #10]
 8011400:	8a3a      	ldrh	r2, [r7, #16]
 8011402:	429a      	cmp	r2, r3
 8011404:	f200 8361 	bhi.w	8011aca <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	4a64      	ldr	r2, [pc, #400]	; (80115a0 <tcp_input+0x298>)
 8011410:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	8a3a      	ldrh	r2, [r7, #16]
 8011418:	4611      	mov	r1, r2
 801141a:	4618      	mov	r0, r3
 801141c:	f7fe f8aa 	bl	800f574 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	891a      	ldrh	r2, [r3, #8]
 8011424:	8a3b      	ldrh	r3, [r7, #16]
 8011426:	1ad3      	subs	r3, r2, r3
 8011428:	b29a      	uxth	r2, r3
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	895b      	ldrh	r3, [r3, #10]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d005      	beq.n	8011442 <tcp_input+0x13a>
 8011436:	4b54      	ldr	r3, [pc, #336]	; (8011588 <tcp_input+0x280>)
 8011438:	22df      	movs	r2, #223	; 0xdf
 801143a:	495c      	ldr	r1, [pc, #368]	; (80115ac <tcp_input+0x2a4>)
 801143c:	4854      	ldr	r0, [pc, #336]	; (8011590 <tcp_input+0x288>)
 801143e:	f009 fb13 	bl	801aa68 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	891a      	ldrh	r2, [r3, #8]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	891b      	ldrh	r3, [r3, #8]
 801144c:	429a      	cmp	r2, r3
 801144e:	d005      	beq.n	801145c <tcp_input+0x154>
 8011450:	4b4d      	ldr	r3, [pc, #308]	; (8011588 <tcp_input+0x280>)
 8011452:	22e0      	movs	r2, #224	; 0xe0
 8011454:	4956      	ldr	r1, [pc, #344]	; (80115b0 <tcp_input+0x2a8>)
 8011456:	484e      	ldr	r0, [pc, #312]	; (8011590 <tcp_input+0x288>)
 8011458:	f009 fb06 	bl	801aa68 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801145c:	4b4d      	ldr	r3, [pc, #308]	; (8011594 <tcp_input+0x28c>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	881b      	ldrh	r3, [r3, #0]
 8011462:	b29b      	uxth	r3, r3
 8011464:	4a4b      	ldr	r2, [pc, #300]	; (8011594 <tcp_input+0x28c>)
 8011466:	6814      	ldr	r4, [r2, #0]
 8011468:	4618      	mov	r0, r3
 801146a:	f7fc fd51 	bl	800df10 <lwip_htons>
 801146e:	4603      	mov	r3, r0
 8011470:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011472:	4b48      	ldr	r3, [pc, #288]	; (8011594 <tcp_input+0x28c>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	885b      	ldrh	r3, [r3, #2]
 8011478:	b29b      	uxth	r3, r3
 801147a:	4a46      	ldr	r2, [pc, #280]	; (8011594 <tcp_input+0x28c>)
 801147c:	6814      	ldr	r4, [r2, #0]
 801147e:	4618      	mov	r0, r3
 8011480:	f7fc fd46 	bl	800df10 <lwip_htons>
 8011484:	4603      	mov	r3, r0
 8011486:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011488:	4b42      	ldr	r3, [pc, #264]	; (8011594 <tcp_input+0x28c>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	4a41      	ldr	r2, [pc, #260]	; (8011594 <tcp_input+0x28c>)
 8011490:	6814      	ldr	r4, [r2, #0]
 8011492:	4618      	mov	r0, r3
 8011494:	f7fc fd51 	bl	800df3a <lwip_htonl>
 8011498:	4603      	mov	r3, r0
 801149a:	6063      	str	r3, [r4, #4]
 801149c:	6863      	ldr	r3, [r4, #4]
 801149e:	4a45      	ldr	r2, [pc, #276]	; (80115b4 <tcp_input+0x2ac>)
 80114a0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80114a2:	4b3c      	ldr	r3, [pc, #240]	; (8011594 <tcp_input+0x28c>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	689b      	ldr	r3, [r3, #8]
 80114a8:	4a3a      	ldr	r2, [pc, #232]	; (8011594 <tcp_input+0x28c>)
 80114aa:	6814      	ldr	r4, [r2, #0]
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7fc fd44 	bl	800df3a <lwip_htonl>
 80114b2:	4603      	mov	r3, r0
 80114b4:	60a3      	str	r3, [r4, #8]
 80114b6:	68a3      	ldr	r3, [r4, #8]
 80114b8:	4a3f      	ldr	r2, [pc, #252]	; (80115b8 <tcp_input+0x2b0>)
 80114ba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80114bc:	4b35      	ldr	r3, [pc, #212]	; (8011594 <tcp_input+0x28c>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	89db      	ldrh	r3, [r3, #14]
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	4a33      	ldr	r2, [pc, #204]	; (8011594 <tcp_input+0x28c>)
 80114c6:	6814      	ldr	r4, [r2, #0]
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7fc fd21 	bl	800df10 <lwip_htons>
 80114ce:	4603      	mov	r3, r0
 80114d0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80114d2:	4b30      	ldr	r3, [pc, #192]	; (8011594 <tcp_input+0x28c>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	899b      	ldrh	r3, [r3, #12]
 80114d8:	b29b      	uxth	r3, r3
 80114da:	4618      	mov	r0, r3
 80114dc:	f7fc fd18 	bl	800df10 <lwip_htons>
 80114e0:	4603      	mov	r3, r0
 80114e2:	b2db      	uxtb	r3, r3
 80114e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114e8:	b2da      	uxtb	r2, r3
 80114ea:	4b34      	ldr	r3, [pc, #208]	; (80115bc <tcp_input+0x2b4>)
 80114ec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	891a      	ldrh	r2, [r3, #8]
 80114f2:	4b33      	ldr	r3, [pc, #204]	; (80115c0 <tcp_input+0x2b8>)
 80114f4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80114f6:	4b31      	ldr	r3, [pc, #196]	; (80115bc <tcp_input+0x2b4>)
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	f003 0303 	and.w	r3, r3, #3
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d00c      	beq.n	801151c <tcp_input+0x214>
    tcplen++;
 8011502:	4b2f      	ldr	r3, [pc, #188]	; (80115c0 <tcp_input+0x2b8>)
 8011504:	881b      	ldrh	r3, [r3, #0]
 8011506:	3301      	adds	r3, #1
 8011508:	b29a      	uxth	r2, r3
 801150a:	4b2d      	ldr	r3, [pc, #180]	; (80115c0 <tcp_input+0x2b8>)
 801150c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	891a      	ldrh	r2, [r3, #8]
 8011512:	4b2b      	ldr	r3, [pc, #172]	; (80115c0 <tcp_input+0x2b8>)
 8011514:	881b      	ldrh	r3, [r3, #0]
 8011516:	429a      	cmp	r2, r3
 8011518:	f200 82d9 	bhi.w	8011ace <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801151c:	2300      	movs	r3, #0
 801151e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011520:	4b28      	ldr	r3, [pc, #160]	; (80115c4 <tcp_input+0x2bc>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	61fb      	str	r3, [r7, #28]
 8011526:	e09d      	b.n	8011664 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011528:	69fb      	ldr	r3, [r7, #28]
 801152a:	7d1b      	ldrb	r3, [r3, #20]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d105      	bne.n	801153c <tcp_input+0x234>
 8011530:	4b15      	ldr	r3, [pc, #84]	; (8011588 <tcp_input+0x280>)
 8011532:	22fb      	movs	r2, #251	; 0xfb
 8011534:	4924      	ldr	r1, [pc, #144]	; (80115c8 <tcp_input+0x2c0>)
 8011536:	4816      	ldr	r0, [pc, #88]	; (8011590 <tcp_input+0x288>)
 8011538:	f009 fa96 	bl	801aa68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	7d1b      	ldrb	r3, [r3, #20]
 8011540:	2b0a      	cmp	r3, #10
 8011542:	d105      	bne.n	8011550 <tcp_input+0x248>
 8011544:	4b10      	ldr	r3, [pc, #64]	; (8011588 <tcp_input+0x280>)
 8011546:	22fc      	movs	r2, #252	; 0xfc
 8011548:	4920      	ldr	r1, [pc, #128]	; (80115cc <tcp_input+0x2c4>)
 801154a:	4811      	ldr	r0, [pc, #68]	; (8011590 <tcp_input+0x288>)
 801154c:	f009 fa8c 	bl	801aa68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011550:	69fb      	ldr	r3, [r7, #28]
 8011552:	7d1b      	ldrb	r3, [r3, #20]
 8011554:	2b01      	cmp	r3, #1
 8011556:	d105      	bne.n	8011564 <tcp_input+0x25c>
 8011558:	4b0b      	ldr	r3, [pc, #44]	; (8011588 <tcp_input+0x280>)
 801155a:	22fd      	movs	r2, #253	; 0xfd
 801155c:	491c      	ldr	r1, [pc, #112]	; (80115d0 <tcp_input+0x2c8>)
 801155e:	480c      	ldr	r0, [pc, #48]	; (8011590 <tcp_input+0x288>)
 8011560:	f009 fa82 	bl	801aa68 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011564:	69fb      	ldr	r3, [r7, #28]
 8011566:	7a1b      	ldrb	r3, [r3, #8]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d033      	beq.n	80115d4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801156c:	69fb      	ldr	r3, [r7, #28]
 801156e:	7a1a      	ldrb	r2, [r3, #8]
 8011570:	4b09      	ldr	r3, [pc, #36]	; (8011598 <tcp_input+0x290>)
 8011572:	685b      	ldr	r3, [r3, #4]
 8011574:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011578:	3301      	adds	r3, #1
 801157a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801157c:	429a      	cmp	r2, r3
 801157e:	d029      	beq.n	80115d4 <tcp_input+0x2cc>
      prev = pcb;
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	61bb      	str	r3, [r7, #24]
      continue;
 8011584:	e06b      	b.n	801165e <tcp_input+0x356>
 8011586:	bf00      	nop
 8011588:	0801d434 	.word	0x0801d434
 801158c:	0801d468 	.word	0x0801d468
 8011590:	0801d480 	.word	0x0801d480
 8011594:	20008548 	.word	0x20008548
 8011598:	2000bcc4 	.word	0x2000bcc4
 801159c:	2000854c 	.word	0x2000854c
 80115a0:	20008550 	.word	0x20008550
 80115a4:	2000854e 	.word	0x2000854e
 80115a8:	0801d4a8 	.word	0x0801d4a8
 80115ac:	0801d4b8 	.word	0x0801d4b8
 80115b0:	0801d4c4 	.word	0x0801d4c4
 80115b4:	20008558 	.word	0x20008558
 80115b8:	2000855c 	.word	0x2000855c
 80115bc:	20008564 	.word	0x20008564
 80115c0:	20008562 	.word	0x20008562
 80115c4:	2000f3f8 	.word	0x2000f3f8
 80115c8:	0801d4e4 	.word	0x0801d4e4
 80115cc:	0801d50c 	.word	0x0801d50c
 80115d0:	0801d538 	.word	0x0801d538
    }

    if (pcb->remote_port == tcphdr->src &&
 80115d4:	69fb      	ldr	r3, [r7, #28]
 80115d6:	8b1a      	ldrh	r2, [r3, #24]
 80115d8:	4b94      	ldr	r3, [pc, #592]	; (801182c <tcp_input+0x524>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	881b      	ldrh	r3, [r3, #0]
 80115de:	b29b      	uxth	r3, r3
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d13a      	bne.n	801165a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80115e4:	69fb      	ldr	r3, [r7, #28]
 80115e6:	8ada      	ldrh	r2, [r3, #22]
 80115e8:	4b90      	ldr	r3, [pc, #576]	; (801182c <tcp_input+0x524>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	885b      	ldrh	r3, [r3, #2]
 80115ee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d132      	bne.n	801165a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80115f4:	69fb      	ldr	r3, [r7, #28]
 80115f6:	685a      	ldr	r2, [r3, #4]
 80115f8:	4b8d      	ldr	r3, [pc, #564]	; (8011830 <tcp_input+0x528>)
 80115fa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80115fc:	429a      	cmp	r2, r3
 80115fe:	d12c      	bne.n	801165a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011600:	69fb      	ldr	r3, [r7, #28]
 8011602:	681a      	ldr	r2, [r3, #0]
 8011604:	4b8a      	ldr	r3, [pc, #552]	; (8011830 <tcp_input+0x528>)
 8011606:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011608:	429a      	cmp	r2, r3
 801160a:	d126      	bne.n	801165a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801160c:	69fb      	ldr	r3, [r7, #28]
 801160e:	68db      	ldr	r3, [r3, #12]
 8011610:	69fa      	ldr	r2, [r7, #28]
 8011612:	429a      	cmp	r2, r3
 8011614:	d106      	bne.n	8011624 <tcp_input+0x31c>
 8011616:	4b87      	ldr	r3, [pc, #540]	; (8011834 <tcp_input+0x52c>)
 8011618:	f240 120d 	movw	r2, #269	; 0x10d
 801161c:	4986      	ldr	r1, [pc, #536]	; (8011838 <tcp_input+0x530>)
 801161e:	4887      	ldr	r0, [pc, #540]	; (801183c <tcp_input+0x534>)
 8011620:	f009 fa22 	bl	801aa68 <iprintf>
      if (prev != NULL) {
 8011624:	69bb      	ldr	r3, [r7, #24]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d00a      	beq.n	8011640 <tcp_input+0x338>
        prev->next = pcb->next;
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	68da      	ldr	r2, [r3, #12]
 801162e:	69bb      	ldr	r3, [r7, #24]
 8011630:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011632:	4b83      	ldr	r3, [pc, #524]	; (8011840 <tcp_input+0x538>)
 8011634:	681a      	ldr	r2, [r3, #0]
 8011636:	69fb      	ldr	r3, [r7, #28]
 8011638:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801163a:	4a81      	ldr	r2, [pc, #516]	; (8011840 <tcp_input+0x538>)
 801163c:	69fb      	ldr	r3, [r7, #28]
 801163e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011640:	69fb      	ldr	r3, [r7, #28]
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	69fa      	ldr	r2, [r7, #28]
 8011646:	429a      	cmp	r2, r3
 8011648:	d111      	bne.n	801166e <tcp_input+0x366>
 801164a:	4b7a      	ldr	r3, [pc, #488]	; (8011834 <tcp_input+0x52c>)
 801164c:	f240 1215 	movw	r2, #277	; 0x115
 8011650:	497c      	ldr	r1, [pc, #496]	; (8011844 <tcp_input+0x53c>)
 8011652:	487a      	ldr	r0, [pc, #488]	; (801183c <tcp_input+0x534>)
 8011654:	f009 fa08 	bl	801aa68 <iprintf>
      break;
 8011658:	e009      	b.n	801166e <tcp_input+0x366>
    }
    prev = pcb;
 801165a:	69fb      	ldr	r3, [r7, #28]
 801165c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801165e:	69fb      	ldr	r3, [r7, #28]
 8011660:	68db      	ldr	r3, [r3, #12]
 8011662:	61fb      	str	r3, [r7, #28]
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	2b00      	cmp	r3, #0
 8011668:	f47f af5e 	bne.w	8011528 <tcp_input+0x220>
 801166c:	e000      	b.n	8011670 <tcp_input+0x368>
      break;
 801166e:	bf00      	nop
  }

  if (pcb == NULL) {
 8011670:	69fb      	ldr	r3, [r7, #28]
 8011672:	2b00      	cmp	r3, #0
 8011674:	f040 8095 	bne.w	80117a2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011678:	4b73      	ldr	r3, [pc, #460]	; (8011848 <tcp_input+0x540>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	61fb      	str	r3, [r7, #28]
 801167e:	e03f      	b.n	8011700 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011680:	69fb      	ldr	r3, [r7, #28]
 8011682:	7d1b      	ldrb	r3, [r3, #20]
 8011684:	2b0a      	cmp	r3, #10
 8011686:	d006      	beq.n	8011696 <tcp_input+0x38e>
 8011688:	4b6a      	ldr	r3, [pc, #424]	; (8011834 <tcp_input+0x52c>)
 801168a:	f240 121f 	movw	r2, #287	; 0x11f
 801168e:	496f      	ldr	r1, [pc, #444]	; (801184c <tcp_input+0x544>)
 8011690:	486a      	ldr	r0, [pc, #424]	; (801183c <tcp_input+0x534>)
 8011692:	f009 f9e9 	bl	801aa68 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011696:	69fb      	ldr	r3, [r7, #28]
 8011698:	7a1b      	ldrb	r3, [r3, #8]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d009      	beq.n	80116b2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	7a1a      	ldrb	r2, [r3, #8]
 80116a2:	4b63      	ldr	r3, [pc, #396]	; (8011830 <tcp_input+0x528>)
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80116aa:	3301      	adds	r3, #1
 80116ac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d122      	bne.n	80116f8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80116b2:	69fb      	ldr	r3, [r7, #28]
 80116b4:	8b1a      	ldrh	r2, [r3, #24]
 80116b6:	4b5d      	ldr	r3, [pc, #372]	; (801182c <tcp_input+0x524>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	881b      	ldrh	r3, [r3, #0]
 80116bc:	b29b      	uxth	r3, r3
 80116be:	429a      	cmp	r2, r3
 80116c0:	d11b      	bne.n	80116fa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80116c2:	69fb      	ldr	r3, [r7, #28]
 80116c4:	8ada      	ldrh	r2, [r3, #22]
 80116c6:	4b59      	ldr	r3, [pc, #356]	; (801182c <tcp_input+0x524>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	885b      	ldrh	r3, [r3, #2]
 80116cc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80116ce:	429a      	cmp	r2, r3
 80116d0:	d113      	bne.n	80116fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80116d2:	69fb      	ldr	r3, [r7, #28]
 80116d4:	685a      	ldr	r2, [r3, #4]
 80116d6:	4b56      	ldr	r3, [pc, #344]	; (8011830 <tcp_input+0x528>)
 80116d8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80116da:	429a      	cmp	r2, r3
 80116dc:	d10d      	bne.n	80116fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80116de:	69fb      	ldr	r3, [r7, #28]
 80116e0:	681a      	ldr	r2, [r3, #0]
 80116e2:	4b53      	ldr	r3, [pc, #332]	; (8011830 <tcp_input+0x528>)
 80116e4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d107      	bne.n	80116fa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80116ea:	69f8      	ldr	r0, [r7, #28]
 80116ec:	f000 fb54 	bl	8011d98 <tcp_timewait_input>
        }
        pbuf_free(p);
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f7fd ffc5 	bl	800f680 <pbuf_free>
        return;
 80116f6:	e1f0      	b.n	8011ada <tcp_input+0x7d2>
        continue;
 80116f8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80116fa:	69fb      	ldr	r3, [r7, #28]
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	61fb      	str	r3, [r7, #28]
 8011700:	69fb      	ldr	r3, [r7, #28]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d1bc      	bne.n	8011680 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011706:	2300      	movs	r3, #0
 8011708:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801170a:	4b51      	ldr	r3, [pc, #324]	; (8011850 <tcp_input+0x548>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	617b      	str	r3, [r7, #20]
 8011710:	e02a      	b.n	8011768 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	7a1b      	ldrb	r3, [r3, #8]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d00c      	beq.n	8011734 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	7a1a      	ldrb	r2, [r3, #8]
 801171e:	4b44      	ldr	r3, [pc, #272]	; (8011830 <tcp_input+0x528>)
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011726:	3301      	adds	r3, #1
 8011728:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801172a:	429a      	cmp	r2, r3
 801172c:	d002      	beq.n	8011734 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	61bb      	str	r3, [r7, #24]
        continue;
 8011732:	e016      	b.n	8011762 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	8ada      	ldrh	r2, [r3, #22]
 8011738:	4b3c      	ldr	r3, [pc, #240]	; (801182c <tcp_input+0x524>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	885b      	ldrh	r3, [r3, #2]
 801173e:	b29b      	uxth	r3, r3
 8011740:	429a      	cmp	r2, r3
 8011742:	d10c      	bne.n	801175e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	681a      	ldr	r2, [r3, #0]
 8011748:	4b39      	ldr	r3, [pc, #228]	; (8011830 <tcp_input+0x528>)
 801174a:	695b      	ldr	r3, [r3, #20]
 801174c:	429a      	cmp	r2, r3
 801174e:	d00f      	beq.n	8011770 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d00d      	beq.n	8011772 <tcp_input+0x46a>
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d009      	beq.n	8011772 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011762:	697b      	ldr	r3, [r7, #20]
 8011764:	68db      	ldr	r3, [r3, #12]
 8011766:	617b      	str	r3, [r7, #20]
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d1d1      	bne.n	8011712 <tcp_input+0x40a>
 801176e:	e000      	b.n	8011772 <tcp_input+0x46a>
            break;
 8011770:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d014      	beq.n	80117a2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011778:	69bb      	ldr	r3, [r7, #24]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d00a      	beq.n	8011794 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	68da      	ldr	r2, [r3, #12]
 8011782:	69bb      	ldr	r3, [r7, #24]
 8011784:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011786:	4b32      	ldr	r3, [pc, #200]	; (8011850 <tcp_input+0x548>)
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801178e:	4a30      	ldr	r2, [pc, #192]	; (8011850 <tcp_input+0x548>)
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011794:	6978      	ldr	r0, [r7, #20]
 8011796:	f000 fa01 	bl	8011b9c <tcp_listen_input>
      }
      pbuf_free(p);
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f7fd ff70 	bl	800f680 <pbuf_free>
      return;
 80117a0:	e19b      	b.n	8011ada <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80117a2:	69fb      	ldr	r3, [r7, #28]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	f000 8160 	beq.w	8011a6a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80117aa:	4b2a      	ldr	r3, [pc, #168]	; (8011854 <tcp_input+0x54c>)
 80117ac:	2200      	movs	r2, #0
 80117ae:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	891a      	ldrh	r2, [r3, #8]
 80117b4:	4b27      	ldr	r3, [pc, #156]	; (8011854 <tcp_input+0x54c>)
 80117b6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80117b8:	4a26      	ldr	r2, [pc, #152]	; (8011854 <tcp_input+0x54c>)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80117be:	4b1b      	ldr	r3, [pc, #108]	; (801182c <tcp_input+0x524>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	4a24      	ldr	r2, [pc, #144]	; (8011854 <tcp_input+0x54c>)
 80117c4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80117c6:	4b24      	ldr	r3, [pc, #144]	; (8011858 <tcp_input+0x550>)
 80117c8:	2200      	movs	r2, #0
 80117ca:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80117cc:	4b23      	ldr	r3, [pc, #140]	; (801185c <tcp_input+0x554>)
 80117ce:	2200      	movs	r2, #0
 80117d0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80117d2:	4b23      	ldr	r3, [pc, #140]	; (8011860 <tcp_input+0x558>)
 80117d4:	2200      	movs	r2, #0
 80117d6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80117d8:	4b22      	ldr	r3, [pc, #136]	; (8011864 <tcp_input+0x55c>)
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	f003 0308 	and.w	r3, r3, #8
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d006      	beq.n	80117f2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	7b5b      	ldrb	r3, [r3, #13]
 80117e8:	f043 0301 	orr.w	r3, r3, #1
 80117ec:	b2da      	uxtb	r2, r3
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80117f2:	69fb      	ldr	r3, [r7, #28]
 80117f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d038      	beq.n	801186c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80117fa:	69f8      	ldr	r0, [r7, #28]
 80117fc:	f7ff f93e 	bl	8010a7c <tcp_process_refused_data>
 8011800:	4603      	mov	r3, r0
 8011802:	f113 0f0d 	cmn.w	r3, #13
 8011806:	d007      	beq.n	8011818 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011808:	69fb      	ldr	r3, [r7, #28]
 801180a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801180c:	2b00      	cmp	r3, #0
 801180e:	d02d      	beq.n	801186c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011810:	4b15      	ldr	r3, [pc, #84]	; (8011868 <tcp_input+0x560>)
 8011812:	881b      	ldrh	r3, [r3, #0]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d029      	beq.n	801186c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011818:	69fb      	ldr	r3, [r7, #28]
 801181a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801181c:	2b00      	cmp	r3, #0
 801181e:	f040 8104 	bne.w	8011a2a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011822:	69f8      	ldr	r0, [r7, #28]
 8011824:	f003 f9be 	bl	8014ba4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011828:	e0ff      	b.n	8011a2a <tcp_input+0x722>
 801182a:	bf00      	nop
 801182c:	20008548 	.word	0x20008548
 8011830:	2000bcc4 	.word	0x2000bcc4
 8011834:	0801d434 	.word	0x0801d434
 8011838:	0801d560 	.word	0x0801d560
 801183c:	0801d480 	.word	0x0801d480
 8011840:	2000f3f8 	.word	0x2000f3f8
 8011844:	0801d58c 	.word	0x0801d58c
 8011848:	2000f408 	.word	0x2000f408
 801184c:	0801d5b8 	.word	0x0801d5b8
 8011850:	2000f400 	.word	0x2000f400
 8011854:	20008538 	.word	0x20008538
 8011858:	20008568 	.word	0x20008568
 801185c:	20008565 	.word	0x20008565
 8011860:	20008560 	.word	0x20008560
 8011864:	20008564 	.word	0x20008564
 8011868:	20008562 	.word	0x20008562
      }
    }
    tcp_input_pcb = pcb;
 801186c:	4a9c      	ldr	r2, [pc, #624]	; (8011ae0 <tcp_input+0x7d8>)
 801186e:	69fb      	ldr	r3, [r7, #28]
 8011870:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011872:	69f8      	ldr	r0, [r7, #28]
 8011874:	f000 fb0a 	bl	8011e8c <tcp_process>
 8011878:	4603      	mov	r3, r0
 801187a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801187c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011880:	f113 0f0d 	cmn.w	r3, #13
 8011884:	f000 80d3 	beq.w	8011a2e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8011888:	4b96      	ldr	r3, [pc, #600]	; (8011ae4 <tcp_input+0x7dc>)
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	f003 0308 	and.w	r3, r3, #8
 8011890:	2b00      	cmp	r3, #0
 8011892:	d015      	beq.n	80118c0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011894:	69fb      	ldr	r3, [r7, #28]
 8011896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801189a:	2b00      	cmp	r3, #0
 801189c:	d008      	beq.n	80118b0 <tcp_input+0x5a8>
 801189e:	69fb      	ldr	r3, [r7, #28]
 80118a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118a4:	69fa      	ldr	r2, [r7, #28]
 80118a6:	6912      	ldr	r2, [r2, #16]
 80118a8:	f06f 010d 	mvn.w	r1, #13
 80118ac:	4610      	mov	r0, r2
 80118ae:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80118b0:	69f9      	ldr	r1, [r7, #28]
 80118b2:	488d      	ldr	r0, [pc, #564]	; (8011ae8 <tcp_input+0x7e0>)
 80118b4:	f7ff fbb0 	bl	8011018 <tcp_pcb_remove>
        tcp_free(pcb);
 80118b8:	69f8      	ldr	r0, [r7, #28]
 80118ba:	f7fe f99d 	bl	800fbf8 <tcp_free>
 80118be:	e0c1      	b.n	8011a44 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80118c0:	2300      	movs	r3, #0
 80118c2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80118c4:	4b89      	ldr	r3, [pc, #548]	; (8011aec <tcp_input+0x7e4>)
 80118c6:	881b      	ldrh	r3, [r3, #0]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d01d      	beq.n	8011908 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80118cc:	4b87      	ldr	r3, [pc, #540]	; (8011aec <tcp_input+0x7e4>)
 80118ce:	881b      	ldrh	r3, [r3, #0]
 80118d0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d00a      	beq.n	80118f2 <tcp_input+0x5ea>
 80118dc:	69fb      	ldr	r3, [r7, #28]
 80118de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80118e2:	69fa      	ldr	r2, [r7, #28]
 80118e4:	6910      	ldr	r0, [r2, #16]
 80118e6:	89fa      	ldrh	r2, [r7, #14]
 80118e8:	69f9      	ldr	r1, [r7, #28]
 80118ea:	4798      	blx	r3
 80118ec:	4603      	mov	r3, r0
 80118ee:	74fb      	strb	r3, [r7, #19]
 80118f0:	e001      	b.n	80118f6 <tcp_input+0x5ee>
 80118f2:	2300      	movs	r3, #0
 80118f4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80118f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118fa:	f113 0f0d 	cmn.w	r3, #13
 80118fe:	f000 8098 	beq.w	8011a32 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011902:	4b7a      	ldr	r3, [pc, #488]	; (8011aec <tcp_input+0x7e4>)
 8011904:	2200      	movs	r2, #0
 8011906:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011908:	69f8      	ldr	r0, [r7, #28]
 801190a:	f000 f907 	bl	8011b1c <tcp_input_delayed_close>
 801190e:	4603      	mov	r3, r0
 8011910:	2b00      	cmp	r3, #0
 8011912:	f040 8090 	bne.w	8011a36 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011916:	4b76      	ldr	r3, [pc, #472]	; (8011af0 <tcp_input+0x7e8>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d041      	beq.n	80119a2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801191e:	69fb      	ldr	r3, [r7, #28]
 8011920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011922:	2b00      	cmp	r3, #0
 8011924:	d006      	beq.n	8011934 <tcp_input+0x62c>
 8011926:	4b73      	ldr	r3, [pc, #460]	; (8011af4 <tcp_input+0x7ec>)
 8011928:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801192c:	4972      	ldr	r1, [pc, #456]	; (8011af8 <tcp_input+0x7f0>)
 801192e:	4873      	ldr	r0, [pc, #460]	; (8011afc <tcp_input+0x7f4>)
 8011930:	f009 f89a 	bl	801aa68 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011934:	69fb      	ldr	r3, [r7, #28]
 8011936:	8b5b      	ldrh	r3, [r3, #26]
 8011938:	f003 0310 	and.w	r3, r3, #16
 801193c:	2b00      	cmp	r3, #0
 801193e:	d008      	beq.n	8011952 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011940:	4b6b      	ldr	r3, [pc, #428]	; (8011af0 <tcp_input+0x7e8>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	4618      	mov	r0, r3
 8011946:	f7fd fe9b 	bl	800f680 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801194a:	69f8      	ldr	r0, [r7, #28]
 801194c:	f7fe fc3c 	bl	80101c8 <tcp_abort>
            goto aborted;
 8011950:	e078      	b.n	8011a44 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011952:	69fb      	ldr	r3, [r7, #28]
 8011954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011958:	2b00      	cmp	r3, #0
 801195a:	d00c      	beq.n	8011976 <tcp_input+0x66e>
 801195c:	69fb      	ldr	r3, [r7, #28]
 801195e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011962:	69fb      	ldr	r3, [r7, #28]
 8011964:	6918      	ldr	r0, [r3, #16]
 8011966:	4b62      	ldr	r3, [pc, #392]	; (8011af0 <tcp_input+0x7e8>)
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	2300      	movs	r3, #0
 801196c:	69f9      	ldr	r1, [r7, #28]
 801196e:	47a0      	blx	r4
 8011970:	4603      	mov	r3, r0
 8011972:	74fb      	strb	r3, [r7, #19]
 8011974:	e008      	b.n	8011988 <tcp_input+0x680>
 8011976:	4b5e      	ldr	r3, [pc, #376]	; (8011af0 <tcp_input+0x7e8>)
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	2300      	movs	r3, #0
 801197c:	69f9      	ldr	r1, [r7, #28]
 801197e:	2000      	movs	r0, #0
 8011980:	f7ff f952 	bl	8010c28 <tcp_recv_null>
 8011984:	4603      	mov	r3, r0
 8011986:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011988:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801198c:	f113 0f0d 	cmn.w	r3, #13
 8011990:	d053      	beq.n	8011a3a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011992:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d003      	beq.n	80119a2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801199a:	4b55      	ldr	r3, [pc, #340]	; (8011af0 <tcp_input+0x7e8>)
 801199c:	681a      	ldr	r2, [r3, #0]
 801199e:	69fb      	ldr	r3, [r7, #28]
 80119a0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80119a2:	4b50      	ldr	r3, [pc, #320]	; (8011ae4 <tcp_input+0x7dc>)
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	f003 0320 	and.w	r3, r3, #32
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d030      	beq.n	8011a10 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d009      	beq.n	80119ca <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80119b6:	69fb      	ldr	r3, [r7, #28]
 80119b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80119ba:	7b5a      	ldrb	r2, [r3, #13]
 80119bc:	69fb      	ldr	r3, [r7, #28]
 80119be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80119c0:	f042 0220 	orr.w	r2, r2, #32
 80119c4:	b2d2      	uxtb	r2, r2
 80119c6:	735a      	strb	r2, [r3, #13]
 80119c8:	e022      	b.n	8011a10 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80119ca:	69fb      	ldr	r3, [r7, #28]
 80119cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119ce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80119d2:	d005      	beq.n	80119e0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119d8:	3301      	adds	r3, #1
 80119da:	b29a      	uxth	r2, r3
 80119dc:	69fb      	ldr	r3, [r7, #28]
 80119de:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80119e0:	69fb      	ldr	r3, [r7, #28]
 80119e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d00b      	beq.n	8011a02 <tcp_input+0x6fa>
 80119ea:	69fb      	ldr	r3, [r7, #28]
 80119ec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80119f0:	69fb      	ldr	r3, [r7, #28]
 80119f2:	6918      	ldr	r0, [r3, #16]
 80119f4:	2300      	movs	r3, #0
 80119f6:	2200      	movs	r2, #0
 80119f8:	69f9      	ldr	r1, [r7, #28]
 80119fa:	47a0      	blx	r4
 80119fc:	4603      	mov	r3, r0
 80119fe:	74fb      	strb	r3, [r7, #19]
 8011a00:	e001      	b.n	8011a06 <tcp_input+0x6fe>
 8011a02:	2300      	movs	r3, #0
 8011a04:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011a06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a0a:	f113 0f0d 	cmn.w	r3, #13
 8011a0e:	d016      	beq.n	8011a3e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011a10:	4b33      	ldr	r3, [pc, #204]	; (8011ae0 <tcp_input+0x7d8>)
 8011a12:	2200      	movs	r2, #0
 8011a14:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011a16:	69f8      	ldr	r0, [r7, #28]
 8011a18:	f000 f880 	bl	8011b1c <tcp_input_delayed_close>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d10f      	bne.n	8011a42 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011a22:	69f8      	ldr	r0, [r7, #28]
 8011a24:	f002 fab8 	bl	8013f98 <tcp_output>
 8011a28:	e00c      	b.n	8011a44 <tcp_input+0x73c>
        goto aborted;
 8011a2a:	bf00      	nop
 8011a2c:	e00a      	b.n	8011a44 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011a2e:	bf00      	nop
 8011a30:	e008      	b.n	8011a44 <tcp_input+0x73c>
              goto aborted;
 8011a32:	bf00      	nop
 8011a34:	e006      	b.n	8011a44 <tcp_input+0x73c>
          goto aborted;
 8011a36:	bf00      	nop
 8011a38:	e004      	b.n	8011a44 <tcp_input+0x73c>
            goto aborted;
 8011a3a:	bf00      	nop
 8011a3c:	e002      	b.n	8011a44 <tcp_input+0x73c>
              goto aborted;
 8011a3e:	bf00      	nop
 8011a40:	e000      	b.n	8011a44 <tcp_input+0x73c>
          goto aborted;
 8011a42:	bf00      	nop
    tcp_input_pcb = NULL;
 8011a44:	4b26      	ldr	r3, [pc, #152]	; (8011ae0 <tcp_input+0x7d8>)
 8011a46:	2200      	movs	r2, #0
 8011a48:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011a4a:	4b29      	ldr	r3, [pc, #164]	; (8011af0 <tcp_input+0x7e8>)
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011a50:	4b2b      	ldr	r3, [pc, #172]	; (8011b00 <tcp_input+0x7f8>)
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d03f      	beq.n	8011ad8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8011a58:	4b29      	ldr	r3, [pc, #164]	; (8011b00 <tcp_input+0x7f8>)
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7fd fe0f 	bl	800f680 <pbuf_free>
      inseg.p = NULL;
 8011a62:	4b27      	ldr	r3, [pc, #156]	; (8011b00 <tcp_input+0x7f8>)
 8011a64:	2200      	movs	r2, #0
 8011a66:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011a68:	e036      	b.n	8011ad8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011a6a:	4b26      	ldr	r3, [pc, #152]	; (8011b04 <tcp_input+0x7fc>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	899b      	ldrh	r3, [r3, #12]
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7fc fa4c 	bl	800df10 <lwip_htons>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	b2db      	uxtb	r3, r3
 8011a7c:	f003 0304 	and.w	r3, r3, #4
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d118      	bne.n	8011ab6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a84:	4b20      	ldr	r3, [pc, #128]	; (8011b08 <tcp_input+0x800>)
 8011a86:	6819      	ldr	r1, [r3, #0]
 8011a88:	4b20      	ldr	r3, [pc, #128]	; (8011b0c <tcp_input+0x804>)
 8011a8a:	881b      	ldrh	r3, [r3, #0]
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	4b20      	ldr	r3, [pc, #128]	; (8011b10 <tcp_input+0x808>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a94:	4b1b      	ldr	r3, [pc, #108]	; (8011b04 <tcp_input+0x7fc>)
 8011a96:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a98:	885b      	ldrh	r3, [r3, #2]
 8011a9a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a9c:	4a19      	ldr	r2, [pc, #100]	; (8011b04 <tcp_input+0x7fc>)
 8011a9e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011aa0:	8812      	ldrh	r2, [r2, #0]
 8011aa2:	b292      	uxth	r2, r2
 8011aa4:	9202      	str	r2, [sp, #8]
 8011aa6:	9301      	str	r3, [sp, #4]
 8011aa8:	4b1a      	ldr	r3, [pc, #104]	; (8011b14 <tcp_input+0x80c>)
 8011aaa:	9300      	str	r3, [sp, #0]
 8011aac:	4b1a      	ldr	r3, [pc, #104]	; (8011b18 <tcp_input+0x810>)
 8011aae:	4602      	mov	r2, r0
 8011ab0:	2000      	movs	r0, #0
 8011ab2:	f003 f825 	bl	8014b00 <tcp_rst>
    pbuf_free(p);
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f7fd fde2 	bl	800f680 <pbuf_free>
  return;
 8011abc:	e00c      	b.n	8011ad8 <tcp_input+0x7d0>
    goto dropped;
 8011abe:	bf00      	nop
 8011ac0:	e006      	b.n	8011ad0 <tcp_input+0x7c8>
    goto dropped;
 8011ac2:	bf00      	nop
 8011ac4:	e004      	b.n	8011ad0 <tcp_input+0x7c8>
    goto dropped;
 8011ac6:	bf00      	nop
 8011ac8:	e002      	b.n	8011ad0 <tcp_input+0x7c8>
      goto dropped;
 8011aca:	bf00      	nop
 8011acc:	e000      	b.n	8011ad0 <tcp_input+0x7c8>
      goto dropped;
 8011ace:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f7fd fdd5 	bl	800f680 <pbuf_free>
 8011ad6:	e000      	b.n	8011ada <tcp_input+0x7d2>
  return;
 8011ad8:	bf00      	nop
}
 8011ada:	3724      	adds	r7, #36	; 0x24
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd90      	pop	{r4, r7, pc}
 8011ae0:	2000f40c 	.word	0x2000f40c
 8011ae4:	20008565 	.word	0x20008565
 8011ae8:	2000f3f8 	.word	0x2000f3f8
 8011aec:	20008560 	.word	0x20008560
 8011af0:	20008568 	.word	0x20008568
 8011af4:	0801d434 	.word	0x0801d434
 8011af8:	0801d5e8 	.word	0x0801d5e8
 8011afc:	0801d480 	.word	0x0801d480
 8011b00:	20008538 	.word	0x20008538
 8011b04:	20008548 	.word	0x20008548
 8011b08:	2000855c 	.word	0x2000855c
 8011b0c:	20008562 	.word	0x20008562
 8011b10:	20008558 	.word	0x20008558
 8011b14:	2000bcd4 	.word	0x2000bcd4
 8011b18:	2000bcd8 	.word	0x2000bcd8

08011b1c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b082      	sub	sp, #8
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d106      	bne.n	8011b38 <tcp_input_delayed_close+0x1c>
 8011b2a:	4b17      	ldr	r3, [pc, #92]	; (8011b88 <tcp_input_delayed_close+0x6c>)
 8011b2c:	f240 225a 	movw	r2, #602	; 0x25a
 8011b30:	4916      	ldr	r1, [pc, #88]	; (8011b8c <tcp_input_delayed_close+0x70>)
 8011b32:	4817      	ldr	r0, [pc, #92]	; (8011b90 <tcp_input_delayed_close+0x74>)
 8011b34:	f008 ff98 	bl	801aa68 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011b38:	4b16      	ldr	r3, [pc, #88]	; (8011b94 <tcp_input_delayed_close+0x78>)
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	f003 0310 	and.w	r3, r3, #16
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d01c      	beq.n	8011b7e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	8b5b      	ldrh	r3, [r3, #26]
 8011b48:	f003 0310 	and.w	r3, r3, #16
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d10d      	bne.n	8011b6c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d008      	beq.n	8011b6c <tcp_input_delayed_close+0x50>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b60:	687a      	ldr	r2, [r7, #4]
 8011b62:	6912      	ldr	r2, [r2, #16]
 8011b64:	f06f 010e 	mvn.w	r1, #14
 8011b68:	4610      	mov	r0, r2
 8011b6a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011b6c:	6879      	ldr	r1, [r7, #4]
 8011b6e:	480a      	ldr	r0, [pc, #40]	; (8011b98 <tcp_input_delayed_close+0x7c>)
 8011b70:	f7ff fa52 	bl	8011018 <tcp_pcb_remove>
    tcp_free(pcb);
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f7fe f83f 	bl	800fbf8 <tcp_free>
    return 1;
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e000      	b.n	8011b80 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011b7e:	2300      	movs	r3, #0
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3708      	adds	r7, #8
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}
 8011b88:	0801d434 	.word	0x0801d434
 8011b8c:	0801d604 	.word	0x0801d604
 8011b90:	0801d480 	.word	0x0801d480
 8011b94:	20008565 	.word	0x20008565
 8011b98:	2000f3f8 	.word	0x2000f3f8

08011b9c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011b9c:	b590      	push	{r4, r7, lr}
 8011b9e:	b08b      	sub	sp, #44	; 0x2c
 8011ba0:	af04      	add	r7, sp, #16
 8011ba2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011ba4:	4b6f      	ldr	r3, [pc, #444]	; (8011d64 <tcp_listen_input+0x1c8>)
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	f003 0304 	and.w	r3, r3, #4
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	f040 80d2 	bne.w	8011d56 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d106      	bne.n	8011bc6 <tcp_listen_input+0x2a>
 8011bb8:	4b6b      	ldr	r3, [pc, #428]	; (8011d68 <tcp_listen_input+0x1cc>)
 8011bba:	f240 2281 	movw	r2, #641	; 0x281
 8011bbe:	496b      	ldr	r1, [pc, #428]	; (8011d6c <tcp_listen_input+0x1d0>)
 8011bc0:	486b      	ldr	r0, [pc, #428]	; (8011d70 <tcp_listen_input+0x1d4>)
 8011bc2:	f008 ff51 	bl	801aa68 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011bc6:	4b67      	ldr	r3, [pc, #412]	; (8011d64 <tcp_listen_input+0x1c8>)
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	f003 0310 	and.w	r3, r3, #16
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d019      	beq.n	8011c06 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bd2:	4b68      	ldr	r3, [pc, #416]	; (8011d74 <tcp_listen_input+0x1d8>)
 8011bd4:	6819      	ldr	r1, [r3, #0]
 8011bd6:	4b68      	ldr	r3, [pc, #416]	; (8011d78 <tcp_listen_input+0x1dc>)
 8011bd8:	881b      	ldrh	r3, [r3, #0]
 8011bda:	461a      	mov	r2, r3
 8011bdc:	4b67      	ldr	r3, [pc, #412]	; (8011d7c <tcp_listen_input+0x1e0>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011be2:	4b67      	ldr	r3, [pc, #412]	; (8011d80 <tcp_listen_input+0x1e4>)
 8011be4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011be6:	885b      	ldrh	r3, [r3, #2]
 8011be8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011bea:	4a65      	ldr	r2, [pc, #404]	; (8011d80 <tcp_listen_input+0x1e4>)
 8011bec:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bee:	8812      	ldrh	r2, [r2, #0]
 8011bf0:	b292      	uxth	r2, r2
 8011bf2:	9202      	str	r2, [sp, #8]
 8011bf4:	9301      	str	r3, [sp, #4]
 8011bf6:	4b63      	ldr	r3, [pc, #396]	; (8011d84 <tcp_listen_input+0x1e8>)
 8011bf8:	9300      	str	r3, [sp, #0]
 8011bfa:	4b63      	ldr	r3, [pc, #396]	; (8011d88 <tcp_listen_input+0x1ec>)
 8011bfc:	4602      	mov	r2, r0
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f002 ff7e 	bl	8014b00 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011c04:	e0a9      	b.n	8011d5a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011c06:	4b57      	ldr	r3, [pc, #348]	; (8011d64 <tcp_listen_input+0x1c8>)
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	f003 0302 	and.w	r3, r3, #2
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	f000 80a3 	beq.w	8011d5a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	7d5b      	ldrb	r3, [r3, #21]
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7ff f929 	bl	8010e70 <tcp_alloc>
 8011c1e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d111      	bne.n	8011c4a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	699b      	ldr	r3, [r3, #24]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d00a      	beq.n	8011c44 <tcp_listen_input+0xa8>
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	699b      	ldr	r3, [r3, #24]
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	6910      	ldr	r0, [r2, #16]
 8011c36:	f04f 32ff 	mov.w	r2, #4294967295
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	4798      	blx	r3
 8011c3e:	4603      	mov	r3, r0
 8011c40:	73bb      	strb	r3, [r7, #14]
      return;
 8011c42:	e08b      	b.n	8011d5c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011c44:	23f0      	movs	r3, #240	; 0xf0
 8011c46:	73bb      	strb	r3, [r7, #14]
      return;
 8011c48:	e088      	b.n	8011d5c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011c4a:	4b50      	ldr	r3, [pc, #320]	; (8011d8c <tcp_listen_input+0x1f0>)
 8011c4c:	695a      	ldr	r2, [r3, #20]
 8011c4e:	697b      	ldr	r3, [r7, #20]
 8011c50:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011c52:	4b4e      	ldr	r3, [pc, #312]	; (8011d8c <tcp_listen_input+0x1f0>)
 8011c54:	691a      	ldr	r2, [r3, #16]
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	8ada      	ldrh	r2, [r3, #22]
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011c62:	4b47      	ldr	r3, [pc, #284]	; (8011d80 <tcp_listen_input+0x1e4>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	881b      	ldrh	r3, [r3, #0]
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	2203      	movs	r2, #3
 8011c72:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011c74:	4b41      	ldr	r3, [pc, #260]	; (8011d7c <tcp_listen_input+0x1e0>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	1c5a      	adds	r2, r3, #1
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011c86:	6978      	ldr	r0, [r7, #20]
 8011c88:	f7ff fa5a 	bl	8011140 <tcp_next_iss>
 8011c8c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	693a      	ldr	r2, [r7, #16]
 8011c92:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	693a      	ldr	r2, [r7, #16]
 8011c98:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	693a      	ldr	r2, [r7, #16]
 8011c9e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	693a      	ldr	r2, [r7, #16]
 8011ca4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011ca6:	4b35      	ldr	r3, [pc, #212]	; (8011d7c <tcp_listen_input+0x1e0>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	1e5a      	subs	r2, r3, #1
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	691a      	ldr	r2, [r3, #16]
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	687a      	ldr	r2, [r7, #4]
 8011cbc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	7a5b      	ldrb	r3, [r3, #9]
 8011cc2:	f003 030c 	and.w	r3, r3, #12
 8011cc6:	b2da      	uxtb	r2, r3
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	7a1a      	ldrb	r2, [r3, #8]
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011cd4:	4b2e      	ldr	r3, [pc, #184]	; (8011d90 <tcp_listen_input+0x1f4>)
 8011cd6:	681a      	ldr	r2, [r3, #0]
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	60da      	str	r2, [r3, #12]
 8011cdc:	4a2c      	ldr	r2, [pc, #176]	; (8011d90 <tcp_listen_input+0x1f4>)
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	6013      	str	r3, [r2, #0]
 8011ce2:	f003 f8cf 	bl	8014e84 <tcp_timer_needed>
 8011ce6:	4b2b      	ldr	r3, [pc, #172]	; (8011d94 <tcp_listen_input+0x1f8>)
 8011ce8:	2201      	movs	r2, #1
 8011cea:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011cec:	6978      	ldr	r0, [r7, #20]
 8011cee:	f001 fd8d 	bl	801380c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011cf2:	4b23      	ldr	r3, [pc, #140]	; (8011d80 <tcp_listen_input+0x1e4>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	89db      	ldrh	r3, [r3, #14]
 8011cf8:	b29a      	uxth	r2, r3
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011d10:	697b      	ldr	r3, [r7, #20]
 8011d12:	3304      	adds	r3, #4
 8011d14:	4618      	mov	r0, r3
 8011d16:	f006 fe5b 	bl	80189d0 <ip4_route>
 8011d1a:	4601      	mov	r1, r0
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	3304      	adds	r3, #4
 8011d20:	461a      	mov	r2, r3
 8011d22:	4620      	mov	r0, r4
 8011d24:	f7ff fa32 	bl	801118c <tcp_eff_send_mss_netif>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011d30:	2112      	movs	r1, #18
 8011d32:	6978      	ldr	r0, [r7, #20]
 8011d34:	f002 f842 	bl	8013dbc <tcp_enqueue_flags>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d004      	beq.n	8011d4e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011d44:	2100      	movs	r1, #0
 8011d46:	6978      	ldr	r0, [r7, #20]
 8011d48:	f7fe f980 	bl	801004c <tcp_abandon>
      return;
 8011d4c:	e006      	b.n	8011d5c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011d4e:	6978      	ldr	r0, [r7, #20]
 8011d50:	f002 f922 	bl	8013f98 <tcp_output>
  return;
 8011d54:	e001      	b.n	8011d5a <tcp_listen_input+0x1be>
    return;
 8011d56:	bf00      	nop
 8011d58:	e000      	b.n	8011d5c <tcp_listen_input+0x1c0>
  return;
 8011d5a:	bf00      	nop
}
 8011d5c:	371c      	adds	r7, #28
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd90      	pop	{r4, r7, pc}
 8011d62:	bf00      	nop
 8011d64:	20008564 	.word	0x20008564
 8011d68:	0801d434 	.word	0x0801d434
 8011d6c:	0801d62c 	.word	0x0801d62c
 8011d70:	0801d480 	.word	0x0801d480
 8011d74:	2000855c 	.word	0x2000855c
 8011d78:	20008562 	.word	0x20008562
 8011d7c:	20008558 	.word	0x20008558
 8011d80:	20008548 	.word	0x20008548
 8011d84:	2000bcd4 	.word	0x2000bcd4
 8011d88:	2000bcd8 	.word	0x2000bcd8
 8011d8c:	2000bcc4 	.word	0x2000bcc4
 8011d90:	2000f3f8 	.word	0x2000f3f8
 8011d94:	2000f3f4 	.word	0x2000f3f4

08011d98 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b086      	sub	sp, #24
 8011d9c:	af04      	add	r7, sp, #16
 8011d9e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011da0:	4b2f      	ldr	r3, [pc, #188]	; (8011e60 <tcp_timewait_input+0xc8>)
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	f003 0304 	and.w	r3, r3, #4
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d153      	bne.n	8011e54 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d106      	bne.n	8011dc0 <tcp_timewait_input+0x28>
 8011db2:	4b2c      	ldr	r3, [pc, #176]	; (8011e64 <tcp_timewait_input+0xcc>)
 8011db4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011db8:	492b      	ldr	r1, [pc, #172]	; (8011e68 <tcp_timewait_input+0xd0>)
 8011dba:	482c      	ldr	r0, [pc, #176]	; (8011e6c <tcp_timewait_input+0xd4>)
 8011dbc:	f008 fe54 	bl	801aa68 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011dc0:	4b27      	ldr	r3, [pc, #156]	; (8011e60 <tcp_timewait_input+0xc8>)
 8011dc2:	781b      	ldrb	r3, [r3, #0]
 8011dc4:	f003 0302 	and.w	r3, r3, #2
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d02a      	beq.n	8011e22 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011dcc:	4b28      	ldr	r3, [pc, #160]	; (8011e70 <tcp_timewait_input+0xd8>)
 8011dce:	681a      	ldr	r2, [r3, #0]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dd4:	1ad3      	subs	r3, r2, r3
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	db2d      	blt.n	8011e36 <tcp_timewait_input+0x9e>
 8011dda:	4b25      	ldr	r3, [pc, #148]	; (8011e70 <tcp_timewait_input+0xd8>)
 8011ddc:	681a      	ldr	r2, [r3, #0]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de2:	6879      	ldr	r1, [r7, #4]
 8011de4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011de6:	440b      	add	r3, r1
 8011de8:	1ad3      	subs	r3, r2, r3
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	dc23      	bgt.n	8011e36 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011dee:	4b21      	ldr	r3, [pc, #132]	; (8011e74 <tcp_timewait_input+0xdc>)
 8011df0:	6819      	ldr	r1, [r3, #0]
 8011df2:	4b21      	ldr	r3, [pc, #132]	; (8011e78 <tcp_timewait_input+0xe0>)
 8011df4:	881b      	ldrh	r3, [r3, #0]
 8011df6:	461a      	mov	r2, r3
 8011df8:	4b1d      	ldr	r3, [pc, #116]	; (8011e70 <tcp_timewait_input+0xd8>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011dfe:	4b1f      	ldr	r3, [pc, #124]	; (8011e7c <tcp_timewait_input+0xe4>)
 8011e00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e02:	885b      	ldrh	r3, [r3, #2]
 8011e04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e06:	4a1d      	ldr	r2, [pc, #116]	; (8011e7c <tcp_timewait_input+0xe4>)
 8011e08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e0a:	8812      	ldrh	r2, [r2, #0]
 8011e0c:	b292      	uxth	r2, r2
 8011e0e:	9202      	str	r2, [sp, #8]
 8011e10:	9301      	str	r3, [sp, #4]
 8011e12:	4b1b      	ldr	r3, [pc, #108]	; (8011e80 <tcp_timewait_input+0xe8>)
 8011e14:	9300      	str	r3, [sp, #0]
 8011e16:	4b1b      	ldr	r3, [pc, #108]	; (8011e84 <tcp_timewait_input+0xec>)
 8011e18:	4602      	mov	r2, r0
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f002 fe70 	bl	8014b00 <tcp_rst>
      return;
 8011e20:	e01b      	b.n	8011e5a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011e22:	4b0f      	ldr	r3, [pc, #60]	; (8011e60 <tcp_timewait_input+0xc8>)
 8011e24:	781b      	ldrb	r3, [r3, #0]
 8011e26:	f003 0301 	and.w	r3, r3, #1
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d003      	beq.n	8011e36 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011e2e:	4b16      	ldr	r3, [pc, #88]	; (8011e88 <tcp_timewait_input+0xf0>)
 8011e30:	681a      	ldr	r2, [r3, #0]
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011e36:	4b10      	ldr	r3, [pc, #64]	; (8011e78 <tcp_timewait_input+0xe0>)
 8011e38:	881b      	ldrh	r3, [r3, #0]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d00c      	beq.n	8011e58 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	8b5b      	ldrh	r3, [r3, #26]
 8011e42:	f043 0302 	orr.w	r3, r3, #2
 8011e46:	b29a      	uxth	r2, r3
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f002 f8a3 	bl	8013f98 <tcp_output>
  }
  return;
 8011e52:	e001      	b.n	8011e58 <tcp_timewait_input+0xc0>
    return;
 8011e54:	bf00      	nop
 8011e56:	e000      	b.n	8011e5a <tcp_timewait_input+0xc2>
  return;
 8011e58:	bf00      	nop
}
 8011e5a:	3708      	adds	r7, #8
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	20008564 	.word	0x20008564
 8011e64:	0801d434 	.word	0x0801d434
 8011e68:	0801d64c 	.word	0x0801d64c
 8011e6c:	0801d480 	.word	0x0801d480
 8011e70:	20008558 	.word	0x20008558
 8011e74:	2000855c 	.word	0x2000855c
 8011e78:	20008562 	.word	0x20008562
 8011e7c:	20008548 	.word	0x20008548
 8011e80:	2000bcd4 	.word	0x2000bcd4
 8011e84:	2000bcd8 	.word	0x2000bcd8
 8011e88:	2000f3fc 	.word	0x2000f3fc

08011e8c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011e8c:	b590      	push	{r4, r7, lr}
 8011e8e:	b08d      	sub	sp, #52	; 0x34
 8011e90:	af04      	add	r7, sp, #16
 8011e92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011e94:	2300      	movs	r3, #0
 8011e96:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d106      	bne.n	8011eb0 <tcp_process+0x24>
 8011ea2:	4ba5      	ldr	r3, [pc, #660]	; (8012138 <tcp_process+0x2ac>)
 8011ea4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011ea8:	49a4      	ldr	r1, [pc, #656]	; (801213c <tcp_process+0x2b0>)
 8011eaa:	48a5      	ldr	r0, [pc, #660]	; (8012140 <tcp_process+0x2b4>)
 8011eac:	f008 fddc 	bl	801aa68 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011eb0:	4ba4      	ldr	r3, [pc, #656]	; (8012144 <tcp_process+0x2b8>)
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	f003 0304 	and.w	r3, r3, #4
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d04e      	beq.n	8011f5a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	7d1b      	ldrb	r3, [r3, #20]
 8011ec0:	2b02      	cmp	r3, #2
 8011ec2:	d108      	bne.n	8011ed6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ec8:	4b9f      	ldr	r3, [pc, #636]	; (8012148 <tcp_process+0x2bc>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d123      	bne.n	8011f18 <tcp_process+0x8c>
        acceptable = 1;
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	76fb      	strb	r3, [r7, #27]
 8011ed4:	e020      	b.n	8011f18 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011eda:	4b9c      	ldr	r3, [pc, #624]	; (801214c <tcp_process+0x2c0>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d102      	bne.n	8011ee8 <tcp_process+0x5c>
        acceptable = 1;
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	76fb      	strb	r3, [r7, #27]
 8011ee6:	e017      	b.n	8011f18 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011ee8:	4b98      	ldr	r3, [pc, #608]	; (801214c <tcp_process+0x2c0>)
 8011eea:	681a      	ldr	r2, [r3, #0]
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ef0:	1ad3      	subs	r3, r2, r3
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	db10      	blt.n	8011f18 <tcp_process+0x8c>
 8011ef6:	4b95      	ldr	r3, [pc, #596]	; (801214c <tcp_process+0x2c0>)
 8011ef8:	681a      	ldr	r2, [r3, #0]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011efe:	6879      	ldr	r1, [r7, #4]
 8011f00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011f02:	440b      	add	r3, r1
 8011f04:	1ad3      	subs	r3, r2, r3
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	dc06      	bgt.n	8011f18 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	8b5b      	ldrh	r3, [r3, #26]
 8011f0e:	f043 0302 	orr.w	r3, r3, #2
 8011f12:	b29a      	uxth	r2, r3
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011f18:	7efb      	ldrb	r3, [r7, #27]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d01b      	beq.n	8011f56 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	7d1b      	ldrb	r3, [r3, #20]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d106      	bne.n	8011f34 <tcp_process+0xa8>
 8011f26:	4b84      	ldr	r3, [pc, #528]	; (8012138 <tcp_process+0x2ac>)
 8011f28:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011f2c:	4988      	ldr	r1, [pc, #544]	; (8012150 <tcp_process+0x2c4>)
 8011f2e:	4884      	ldr	r0, [pc, #528]	; (8012140 <tcp_process+0x2b4>)
 8011f30:	f008 fd9a 	bl	801aa68 <iprintf>
      recv_flags |= TF_RESET;
 8011f34:	4b87      	ldr	r3, [pc, #540]	; (8012154 <tcp_process+0x2c8>)
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	f043 0308 	orr.w	r3, r3, #8
 8011f3c:	b2da      	uxtb	r2, r3
 8011f3e:	4b85      	ldr	r3, [pc, #532]	; (8012154 <tcp_process+0x2c8>)
 8011f40:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	8b5b      	ldrh	r3, [r3, #26]
 8011f46:	f023 0301 	bic.w	r3, r3, #1
 8011f4a:	b29a      	uxth	r2, r3
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011f50:	f06f 030d 	mvn.w	r3, #13
 8011f54:	e37a      	b.n	801264c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011f56:	2300      	movs	r3, #0
 8011f58:	e378      	b.n	801264c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011f5a:	4b7a      	ldr	r3, [pc, #488]	; (8012144 <tcp_process+0x2b8>)
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	f003 0302 	and.w	r3, r3, #2
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d010      	beq.n	8011f88 <tcp_process+0xfc>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	7d1b      	ldrb	r3, [r3, #20]
 8011f6a:	2b02      	cmp	r3, #2
 8011f6c:	d00c      	beq.n	8011f88 <tcp_process+0xfc>
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	7d1b      	ldrb	r3, [r3, #20]
 8011f72:	2b03      	cmp	r3, #3
 8011f74:	d008      	beq.n	8011f88 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	8b5b      	ldrh	r3, [r3, #26]
 8011f7a:	f043 0302 	orr.w	r3, r3, #2
 8011f7e:	b29a      	uxth	r2, r3
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011f84:	2300      	movs	r3, #0
 8011f86:	e361      	b.n	801264c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	8b5b      	ldrh	r3, [r3, #26]
 8011f8c:	f003 0310 	and.w	r3, r3, #16
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d103      	bne.n	8011f9c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011f94:	4b70      	ldr	r3, [pc, #448]	; (8012158 <tcp_process+0x2cc>)
 8011f96:	681a      	ldr	r2, [r3, #0]
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f001 fc2d 	bl	801380c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	7d1b      	ldrb	r3, [r3, #20]
 8011fb6:	3b02      	subs	r3, #2
 8011fb8:	2b07      	cmp	r3, #7
 8011fba:	f200 8337 	bhi.w	801262c <tcp_process+0x7a0>
 8011fbe:	a201      	add	r2, pc, #4	; (adr r2, 8011fc4 <tcp_process+0x138>)
 8011fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fc4:	08011fe5 	.word	0x08011fe5
 8011fc8:	08012215 	.word	0x08012215
 8011fcc:	0801238d 	.word	0x0801238d
 8011fd0:	080123b7 	.word	0x080123b7
 8011fd4:	080124db 	.word	0x080124db
 8011fd8:	0801238d 	.word	0x0801238d
 8011fdc:	08012567 	.word	0x08012567
 8011fe0:	080125f7 	.word	0x080125f7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011fe4:	4b57      	ldr	r3, [pc, #348]	; (8012144 <tcp_process+0x2b8>)
 8011fe6:	781b      	ldrb	r3, [r3, #0]
 8011fe8:	f003 0310 	and.w	r3, r3, #16
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	f000 80e4 	beq.w	80121ba <tcp_process+0x32e>
 8011ff2:	4b54      	ldr	r3, [pc, #336]	; (8012144 <tcp_process+0x2b8>)
 8011ff4:	781b      	ldrb	r3, [r3, #0]
 8011ff6:	f003 0302 	and.w	r3, r3, #2
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	f000 80dd 	beq.w	80121ba <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012004:	1c5a      	adds	r2, r3, #1
 8012006:	4b50      	ldr	r3, [pc, #320]	; (8012148 <tcp_process+0x2bc>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	429a      	cmp	r2, r3
 801200c:	f040 80d5 	bne.w	80121ba <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012010:	4b4e      	ldr	r3, [pc, #312]	; (801214c <tcp_process+0x2c0>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	1c5a      	adds	r2, r3, #1
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012022:	4b49      	ldr	r3, [pc, #292]	; (8012148 <tcp_process+0x2bc>)
 8012024:	681a      	ldr	r2, [r3, #0]
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801202a:	4b4c      	ldr	r3, [pc, #304]	; (801215c <tcp_process+0x2d0>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	89db      	ldrh	r3, [r3, #14]
 8012030:	b29a      	uxth	r2, r3
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012044:	4b41      	ldr	r3, [pc, #260]	; (801214c <tcp_process+0x2c0>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	1e5a      	subs	r2, r3, #1
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2204      	movs	r2, #4
 8012052:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	3304      	adds	r3, #4
 801205c:	4618      	mov	r0, r3
 801205e:	f006 fcb7 	bl	80189d0 <ip4_route>
 8012062:	4601      	mov	r1, r0
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	3304      	adds	r3, #4
 8012068:	461a      	mov	r2, r3
 801206a:	4620      	mov	r0, r4
 801206c:	f7ff f88e 	bl	801118c <tcp_eff_send_mss_netif>
 8012070:	4603      	mov	r3, r0
 8012072:	461a      	mov	r2, r3
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801207c:	009a      	lsls	r2, r3, #2
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012082:	005b      	lsls	r3, r3, #1
 8012084:	f241 111c 	movw	r1, #4380	; 0x111c
 8012088:	428b      	cmp	r3, r1
 801208a:	bf38      	it	cc
 801208c:	460b      	movcc	r3, r1
 801208e:	429a      	cmp	r2, r3
 8012090:	d204      	bcs.n	801209c <tcp_process+0x210>
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012096:	009b      	lsls	r3, r3, #2
 8012098:	b29b      	uxth	r3, r3
 801209a:	e00d      	b.n	80120b8 <tcp_process+0x22c>
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120a0:	005b      	lsls	r3, r3, #1
 80120a2:	f241 121c 	movw	r2, #4380	; 0x111c
 80120a6:	4293      	cmp	r3, r2
 80120a8:	d904      	bls.n	80120b4 <tcp_process+0x228>
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120ae:	005b      	lsls	r3, r3, #1
 80120b0:	b29b      	uxth	r3, r3
 80120b2:	e001      	b.n	80120b8 <tcp_process+0x22c>
 80120b4:	f241 131c 	movw	r3, #4380	; 0x111c
 80120b8:	687a      	ldr	r2, [r7, #4]
 80120ba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d106      	bne.n	80120d6 <tcp_process+0x24a>
 80120c8:	4b1b      	ldr	r3, [pc, #108]	; (8012138 <tcp_process+0x2ac>)
 80120ca:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80120ce:	4924      	ldr	r1, [pc, #144]	; (8012160 <tcp_process+0x2d4>)
 80120d0:	481b      	ldr	r0, [pc, #108]	; (8012140 <tcp_process+0x2b4>)
 80120d2:	f008 fcc9 	bl	801aa68 <iprintf>
        --pcb->snd_queuelen;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120dc:	3b01      	subs	r3, #1
 80120de:	b29a      	uxth	r2, r3
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120ea:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80120ec:	69fb      	ldr	r3, [r7, #28]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d111      	bne.n	8012116 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120f6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80120f8:	69fb      	ldr	r3, [r7, #28]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d106      	bne.n	801210c <tcp_process+0x280>
 80120fe:	4b0e      	ldr	r3, [pc, #56]	; (8012138 <tcp_process+0x2ac>)
 8012100:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012104:	4917      	ldr	r1, [pc, #92]	; (8012164 <tcp_process+0x2d8>)
 8012106:	480e      	ldr	r0, [pc, #56]	; (8012140 <tcp_process+0x2b4>)
 8012108:	f008 fcae 	bl	801aa68 <iprintf>
          pcb->unsent = rseg->next;
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	681a      	ldr	r2, [r3, #0]
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	66da      	str	r2, [r3, #108]	; 0x6c
 8012114:	e003      	b.n	801211e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8012116:	69fb      	ldr	r3, [r7, #28]
 8012118:	681a      	ldr	r2, [r3, #0]
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801211e:	69f8      	ldr	r0, [r7, #28]
 8012120:	f7fe fd3d 	bl	8010b9e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012128:	2b00      	cmp	r3, #0
 801212a:	d11d      	bne.n	8012168 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012132:	861a      	strh	r2, [r3, #48]	; 0x30
 8012134:	e01f      	b.n	8012176 <tcp_process+0x2ea>
 8012136:	bf00      	nop
 8012138:	0801d434 	.word	0x0801d434
 801213c:	0801d66c 	.word	0x0801d66c
 8012140:	0801d480 	.word	0x0801d480
 8012144:	20008564 	.word	0x20008564
 8012148:	2000855c 	.word	0x2000855c
 801214c:	20008558 	.word	0x20008558
 8012150:	0801d688 	.word	0x0801d688
 8012154:	20008565 	.word	0x20008565
 8012158:	2000f3fc 	.word	0x2000f3fc
 801215c:	20008548 	.word	0x20008548
 8012160:	0801d6a8 	.word	0x0801d6a8
 8012164:	0801d6c0 	.word	0x0801d6c0
        } else {
          pcb->rtime = 0;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2200      	movs	r2, #0
 801216c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2200      	movs	r2, #0
 8012172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801217c:	2b00      	cmp	r3, #0
 801217e:	d00a      	beq.n	8012196 <tcp_process+0x30a>
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	6910      	ldr	r0, [r2, #16]
 801218a:	2200      	movs	r2, #0
 801218c:	6879      	ldr	r1, [r7, #4]
 801218e:	4798      	blx	r3
 8012190:	4603      	mov	r3, r0
 8012192:	76bb      	strb	r3, [r7, #26]
 8012194:	e001      	b.n	801219a <tcp_process+0x30e>
 8012196:	2300      	movs	r3, #0
 8012198:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801219a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801219e:	f113 0f0d 	cmn.w	r3, #13
 80121a2:	d102      	bne.n	80121aa <tcp_process+0x31e>
          return ERR_ABRT;
 80121a4:	f06f 030c 	mvn.w	r3, #12
 80121a8:	e250      	b.n	801264c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	8b5b      	ldrh	r3, [r3, #26]
 80121ae:	f043 0302 	orr.w	r3, r3, #2
 80121b2:	b29a      	uxth	r2, r3
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80121b8:	e23a      	b.n	8012630 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80121ba:	4b9d      	ldr	r3, [pc, #628]	; (8012430 <tcp_process+0x5a4>)
 80121bc:	781b      	ldrb	r3, [r3, #0]
 80121be:	f003 0310 	and.w	r3, r3, #16
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	f000 8234 	beq.w	8012630 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121c8:	4b9a      	ldr	r3, [pc, #616]	; (8012434 <tcp_process+0x5a8>)
 80121ca:	6819      	ldr	r1, [r3, #0]
 80121cc:	4b9a      	ldr	r3, [pc, #616]	; (8012438 <tcp_process+0x5ac>)
 80121ce:	881b      	ldrh	r3, [r3, #0]
 80121d0:	461a      	mov	r2, r3
 80121d2:	4b9a      	ldr	r3, [pc, #616]	; (801243c <tcp_process+0x5b0>)
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121d8:	4b99      	ldr	r3, [pc, #612]	; (8012440 <tcp_process+0x5b4>)
 80121da:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121dc:	885b      	ldrh	r3, [r3, #2]
 80121de:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121e0:	4a97      	ldr	r2, [pc, #604]	; (8012440 <tcp_process+0x5b4>)
 80121e2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121e4:	8812      	ldrh	r2, [r2, #0]
 80121e6:	b292      	uxth	r2, r2
 80121e8:	9202      	str	r2, [sp, #8]
 80121ea:	9301      	str	r3, [sp, #4]
 80121ec:	4b95      	ldr	r3, [pc, #596]	; (8012444 <tcp_process+0x5b8>)
 80121ee:	9300      	str	r3, [sp, #0]
 80121f0:	4b95      	ldr	r3, [pc, #596]	; (8012448 <tcp_process+0x5bc>)
 80121f2:	4602      	mov	r2, r0
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f002 fc83 	bl	8014b00 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012200:	2b05      	cmp	r3, #5
 8012202:	f200 8215 	bhi.w	8012630 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2200      	movs	r2, #0
 801220a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f002 fa4d 	bl	80146ac <tcp_rexmit_rto>
      break;
 8012212:	e20d      	b.n	8012630 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012214:	4b86      	ldr	r3, [pc, #536]	; (8012430 <tcp_process+0x5a4>)
 8012216:	781b      	ldrb	r3, [r3, #0]
 8012218:	f003 0310 	and.w	r3, r3, #16
 801221c:	2b00      	cmp	r3, #0
 801221e:	f000 80a1 	beq.w	8012364 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012222:	4b84      	ldr	r3, [pc, #528]	; (8012434 <tcp_process+0x5a8>)
 8012224:	681a      	ldr	r2, [r3, #0]
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801222a:	1ad3      	subs	r3, r2, r3
 801222c:	3b01      	subs	r3, #1
 801222e:	2b00      	cmp	r3, #0
 8012230:	db7e      	blt.n	8012330 <tcp_process+0x4a4>
 8012232:	4b80      	ldr	r3, [pc, #512]	; (8012434 <tcp_process+0x5a8>)
 8012234:	681a      	ldr	r2, [r3, #0]
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801223a:	1ad3      	subs	r3, r2, r3
 801223c:	2b00      	cmp	r3, #0
 801223e:	dc77      	bgt.n	8012330 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2204      	movs	r2, #4
 8012244:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801224a:	2b00      	cmp	r3, #0
 801224c:	d102      	bne.n	8012254 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801224e:	23fa      	movs	r3, #250	; 0xfa
 8012250:	76bb      	strb	r3, [r7, #26]
 8012252:	e01d      	b.n	8012290 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012258:	699b      	ldr	r3, [r3, #24]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d106      	bne.n	801226c <tcp_process+0x3e0>
 801225e:	4b7b      	ldr	r3, [pc, #492]	; (801244c <tcp_process+0x5c0>)
 8012260:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012264:	497a      	ldr	r1, [pc, #488]	; (8012450 <tcp_process+0x5c4>)
 8012266:	487b      	ldr	r0, [pc, #492]	; (8012454 <tcp_process+0x5c8>)
 8012268:	f008 fbfe 	bl	801aa68 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012270:	699b      	ldr	r3, [r3, #24]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d00a      	beq.n	801228c <tcp_process+0x400>
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801227a:	699b      	ldr	r3, [r3, #24]
 801227c:	687a      	ldr	r2, [r7, #4]
 801227e:	6910      	ldr	r0, [r2, #16]
 8012280:	2200      	movs	r2, #0
 8012282:	6879      	ldr	r1, [r7, #4]
 8012284:	4798      	blx	r3
 8012286:	4603      	mov	r3, r0
 8012288:	76bb      	strb	r3, [r7, #26]
 801228a:	e001      	b.n	8012290 <tcp_process+0x404>
 801228c:	23f0      	movs	r3, #240	; 0xf0
 801228e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012290:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d00a      	beq.n	80122ae <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012298:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801229c:	f113 0f0d 	cmn.w	r3, #13
 80122a0:	d002      	beq.n	80122a8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f7fd ff90 	bl	80101c8 <tcp_abort>
            }
            return ERR_ABRT;
 80122a8:	f06f 030c 	mvn.w	r3, #12
 80122ac:	e1ce      	b.n	801264c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f000 fae0 	bl	8012874 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80122b4:	4b68      	ldr	r3, [pc, #416]	; (8012458 <tcp_process+0x5cc>)
 80122b6:	881b      	ldrh	r3, [r3, #0]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d005      	beq.n	80122c8 <tcp_process+0x43c>
            recv_acked--;
 80122bc:	4b66      	ldr	r3, [pc, #408]	; (8012458 <tcp_process+0x5cc>)
 80122be:	881b      	ldrh	r3, [r3, #0]
 80122c0:	3b01      	subs	r3, #1
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	4b64      	ldr	r3, [pc, #400]	; (8012458 <tcp_process+0x5cc>)
 80122c6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122cc:	009a      	lsls	r2, r3, #2
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122d2:	005b      	lsls	r3, r3, #1
 80122d4:	f241 111c 	movw	r1, #4380	; 0x111c
 80122d8:	428b      	cmp	r3, r1
 80122da:	bf38      	it	cc
 80122dc:	460b      	movcc	r3, r1
 80122de:	429a      	cmp	r2, r3
 80122e0:	d204      	bcs.n	80122ec <tcp_process+0x460>
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122e6:	009b      	lsls	r3, r3, #2
 80122e8:	b29b      	uxth	r3, r3
 80122ea:	e00d      	b.n	8012308 <tcp_process+0x47c>
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122f0:	005b      	lsls	r3, r3, #1
 80122f2:	f241 121c 	movw	r2, #4380	; 0x111c
 80122f6:	4293      	cmp	r3, r2
 80122f8:	d904      	bls.n	8012304 <tcp_process+0x478>
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122fe:	005b      	lsls	r3, r3, #1
 8012300:	b29b      	uxth	r3, r3
 8012302:	e001      	b.n	8012308 <tcp_process+0x47c>
 8012304:	f241 131c 	movw	r3, #4380	; 0x111c
 8012308:	687a      	ldr	r2, [r7, #4]
 801230a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801230e:	4b53      	ldr	r3, [pc, #332]	; (801245c <tcp_process+0x5d0>)
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	f003 0320 	and.w	r3, r3, #32
 8012316:	2b00      	cmp	r3, #0
 8012318:	d037      	beq.n	801238a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	8b5b      	ldrh	r3, [r3, #26]
 801231e:	f043 0302 	orr.w	r3, r3, #2
 8012322:	b29a      	uxth	r2, r3
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2207      	movs	r2, #7
 801232c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801232e:	e02c      	b.n	801238a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012330:	4b40      	ldr	r3, [pc, #256]	; (8012434 <tcp_process+0x5a8>)
 8012332:	6819      	ldr	r1, [r3, #0]
 8012334:	4b40      	ldr	r3, [pc, #256]	; (8012438 <tcp_process+0x5ac>)
 8012336:	881b      	ldrh	r3, [r3, #0]
 8012338:	461a      	mov	r2, r3
 801233a:	4b40      	ldr	r3, [pc, #256]	; (801243c <tcp_process+0x5b0>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012340:	4b3f      	ldr	r3, [pc, #252]	; (8012440 <tcp_process+0x5b4>)
 8012342:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012344:	885b      	ldrh	r3, [r3, #2]
 8012346:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012348:	4a3d      	ldr	r2, [pc, #244]	; (8012440 <tcp_process+0x5b4>)
 801234a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801234c:	8812      	ldrh	r2, [r2, #0]
 801234e:	b292      	uxth	r2, r2
 8012350:	9202      	str	r2, [sp, #8]
 8012352:	9301      	str	r3, [sp, #4]
 8012354:	4b3b      	ldr	r3, [pc, #236]	; (8012444 <tcp_process+0x5b8>)
 8012356:	9300      	str	r3, [sp, #0]
 8012358:	4b3b      	ldr	r3, [pc, #236]	; (8012448 <tcp_process+0x5bc>)
 801235a:	4602      	mov	r2, r0
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f002 fbcf 	bl	8014b00 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012362:	e167      	b.n	8012634 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012364:	4b32      	ldr	r3, [pc, #200]	; (8012430 <tcp_process+0x5a4>)
 8012366:	781b      	ldrb	r3, [r3, #0]
 8012368:	f003 0302 	and.w	r3, r3, #2
 801236c:	2b00      	cmp	r3, #0
 801236e:	f000 8161 	beq.w	8012634 <tcp_process+0x7a8>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012376:	1e5a      	subs	r2, r3, #1
 8012378:	4b30      	ldr	r3, [pc, #192]	; (801243c <tcp_process+0x5b0>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	429a      	cmp	r2, r3
 801237e:	f040 8159 	bne.w	8012634 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f002 f9b4 	bl	80146f0 <tcp_rexmit>
      break;
 8012388:	e154      	b.n	8012634 <tcp_process+0x7a8>
 801238a:	e153      	b.n	8012634 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f000 fa71 	bl	8012874 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012392:	4b32      	ldr	r3, [pc, #200]	; (801245c <tcp_process+0x5d0>)
 8012394:	781b      	ldrb	r3, [r3, #0]
 8012396:	f003 0320 	and.w	r3, r3, #32
 801239a:	2b00      	cmp	r3, #0
 801239c:	f000 814c 	beq.w	8012638 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	8b5b      	ldrh	r3, [r3, #26]
 80123a4:	f043 0302 	orr.w	r3, r3, #2
 80123a8:	b29a      	uxth	r2, r3
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2207      	movs	r2, #7
 80123b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80123b4:	e140      	b.n	8012638 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f000 fa5c 	bl	8012874 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80123bc:	4b27      	ldr	r3, [pc, #156]	; (801245c <tcp_process+0x5d0>)
 80123be:	781b      	ldrb	r3, [r3, #0]
 80123c0:	f003 0320 	and.w	r3, r3, #32
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d071      	beq.n	80124ac <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80123c8:	4b19      	ldr	r3, [pc, #100]	; (8012430 <tcp_process+0x5a4>)
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	f003 0310 	and.w	r3, r3, #16
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d060      	beq.n	8012496 <tcp_process+0x60a>
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80123d8:	4b16      	ldr	r3, [pc, #88]	; (8012434 <tcp_process+0x5a8>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	429a      	cmp	r2, r3
 80123de:	d15a      	bne.n	8012496 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d156      	bne.n	8012496 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	8b5b      	ldrh	r3, [r3, #26]
 80123ec:	f043 0302 	orr.w	r3, r3, #2
 80123f0:	b29a      	uxth	r2, r3
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f7fe fdbe 	bl	8010f78 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80123fc:	4b18      	ldr	r3, [pc, #96]	; (8012460 <tcp_process+0x5d4>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	429a      	cmp	r2, r3
 8012404:	d105      	bne.n	8012412 <tcp_process+0x586>
 8012406:	4b16      	ldr	r3, [pc, #88]	; (8012460 <tcp_process+0x5d4>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	4a14      	ldr	r2, [pc, #80]	; (8012460 <tcp_process+0x5d4>)
 801240e:	6013      	str	r3, [r2, #0]
 8012410:	e02e      	b.n	8012470 <tcp_process+0x5e4>
 8012412:	4b13      	ldr	r3, [pc, #76]	; (8012460 <tcp_process+0x5d4>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	617b      	str	r3, [r7, #20]
 8012418:	e027      	b.n	801246a <tcp_process+0x5de>
 801241a:	697b      	ldr	r3, [r7, #20]
 801241c:	68db      	ldr	r3, [r3, #12]
 801241e:	687a      	ldr	r2, [r7, #4]
 8012420:	429a      	cmp	r2, r3
 8012422:	d11f      	bne.n	8012464 <tcp_process+0x5d8>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	68da      	ldr	r2, [r3, #12]
 8012428:	697b      	ldr	r3, [r7, #20]
 801242a:	60da      	str	r2, [r3, #12]
 801242c:	e020      	b.n	8012470 <tcp_process+0x5e4>
 801242e:	bf00      	nop
 8012430:	20008564 	.word	0x20008564
 8012434:	2000855c 	.word	0x2000855c
 8012438:	20008562 	.word	0x20008562
 801243c:	20008558 	.word	0x20008558
 8012440:	20008548 	.word	0x20008548
 8012444:	2000bcd4 	.word	0x2000bcd4
 8012448:	2000bcd8 	.word	0x2000bcd8
 801244c:	0801d434 	.word	0x0801d434
 8012450:	0801d6d4 	.word	0x0801d6d4
 8012454:	0801d480 	.word	0x0801d480
 8012458:	20008560 	.word	0x20008560
 801245c:	20008565 	.word	0x20008565
 8012460:	2000f3f8 	.word	0x2000f3f8
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	68db      	ldr	r3, [r3, #12]
 8012468:	617b      	str	r3, [r7, #20]
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d1d4      	bne.n	801241a <tcp_process+0x58e>
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	60da      	str	r2, [r3, #12]
 8012476:	4b77      	ldr	r3, [pc, #476]	; (8012654 <tcp_process+0x7c8>)
 8012478:	2201      	movs	r2, #1
 801247a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	220a      	movs	r2, #10
 8012480:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012482:	4b75      	ldr	r3, [pc, #468]	; (8012658 <tcp_process+0x7cc>)
 8012484:	681a      	ldr	r2, [r3, #0]
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	60da      	str	r2, [r3, #12]
 801248a:	4a73      	ldr	r2, [pc, #460]	; (8012658 <tcp_process+0x7cc>)
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6013      	str	r3, [r2, #0]
 8012490:	f002 fcf8 	bl	8014e84 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012494:	e0d2      	b.n	801263c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	8b5b      	ldrh	r3, [r3, #26]
 801249a:	f043 0302 	orr.w	r3, r3, #2
 801249e:	b29a      	uxth	r2, r3
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2208      	movs	r2, #8
 80124a8:	751a      	strb	r2, [r3, #20]
      break;
 80124aa:	e0c7      	b.n	801263c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80124ac:	4b6b      	ldr	r3, [pc, #428]	; (801265c <tcp_process+0x7d0>)
 80124ae:	781b      	ldrb	r3, [r3, #0]
 80124b0:	f003 0310 	and.w	r3, r3, #16
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	f000 80c1 	beq.w	801263c <tcp_process+0x7b0>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80124be:	4b68      	ldr	r3, [pc, #416]	; (8012660 <tcp_process+0x7d4>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	429a      	cmp	r2, r3
 80124c4:	f040 80ba 	bne.w	801263c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	f040 80b5 	bne.w	801263c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2206      	movs	r2, #6
 80124d6:	751a      	strb	r2, [r3, #20]
      break;
 80124d8:	e0b0      	b.n	801263c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f000 f9ca 	bl	8012874 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80124e0:	4b60      	ldr	r3, [pc, #384]	; (8012664 <tcp_process+0x7d8>)
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	f003 0320 	and.w	r3, r3, #32
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	f000 80a9 	beq.w	8012640 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	8b5b      	ldrh	r3, [r3, #26]
 80124f2:	f043 0302 	orr.w	r3, r3, #2
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f7fe fd3b 	bl	8010f78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012502:	4b59      	ldr	r3, [pc, #356]	; (8012668 <tcp_process+0x7dc>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	687a      	ldr	r2, [r7, #4]
 8012508:	429a      	cmp	r2, r3
 801250a:	d105      	bne.n	8012518 <tcp_process+0x68c>
 801250c:	4b56      	ldr	r3, [pc, #344]	; (8012668 <tcp_process+0x7dc>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	68db      	ldr	r3, [r3, #12]
 8012512:	4a55      	ldr	r2, [pc, #340]	; (8012668 <tcp_process+0x7dc>)
 8012514:	6013      	str	r3, [r2, #0]
 8012516:	e013      	b.n	8012540 <tcp_process+0x6b4>
 8012518:	4b53      	ldr	r3, [pc, #332]	; (8012668 <tcp_process+0x7dc>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	613b      	str	r3, [r7, #16]
 801251e:	e00c      	b.n	801253a <tcp_process+0x6ae>
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	68db      	ldr	r3, [r3, #12]
 8012524:	687a      	ldr	r2, [r7, #4]
 8012526:	429a      	cmp	r2, r3
 8012528:	d104      	bne.n	8012534 <tcp_process+0x6a8>
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	68da      	ldr	r2, [r3, #12]
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	60da      	str	r2, [r3, #12]
 8012532:	e005      	b.n	8012540 <tcp_process+0x6b4>
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	68db      	ldr	r3, [r3, #12]
 8012538:	613b      	str	r3, [r7, #16]
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d1ef      	bne.n	8012520 <tcp_process+0x694>
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2200      	movs	r2, #0
 8012544:	60da      	str	r2, [r3, #12]
 8012546:	4b43      	ldr	r3, [pc, #268]	; (8012654 <tcp_process+0x7c8>)
 8012548:	2201      	movs	r2, #1
 801254a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	220a      	movs	r2, #10
 8012550:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012552:	4b41      	ldr	r3, [pc, #260]	; (8012658 <tcp_process+0x7cc>)
 8012554:	681a      	ldr	r2, [r3, #0]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	60da      	str	r2, [r3, #12]
 801255a:	4a3f      	ldr	r2, [pc, #252]	; (8012658 <tcp_process+0x7cc>)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6013      	str	r3, [r2, #0]
 8012560:	f002 fc90 	bl	8014e84 <tcp_timer_needed>
      }
      break;
 8012564:	e06c      	b.n	8012640 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f000 f984 	bl	8012874 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801256c:	4b3b      	ldr	r3, [pc, #236]	; (801265c <tcp_process+0x7d0>)
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	f003 0310 	and.w	r3, r3, #16
 8012574:	2b00      	cmp	r3, #0
 8012576:	d065      	beq.n	8012644 <tcp_process+0x7b8>
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801257c:	4b38      	ldr	r3, [pc, #224]	; (8012660 <tcp_process+0x7d4>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	429a      	cmp	r2, r3
 8012582:	d15f      	bne.n	8012644 <tcp_process+0x7b8>
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012588:	2b00      	cmp	r3, #0
 801258a:	d15b      	bne.n	8012644 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f7fe fcf3 	bl	8010f78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012592:	4b35      	ldr	r3, [pc, #212]	; (8012668 <tcp_process+0x7dc>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	687a      	ldr	r2, [r7, #4]
 8012598:	429a      	cmp	r2, r3
 801259a:	d105      	bne.n	80125a8 <tcp_process+0x71c>
 801259c:	4b32      	ldr	r3, [pc, #200]	; (8012668 <tcp_process+0x7dc>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	68db      	ldr	r3, [r3, #12]
 80125a2:	4a31      	ldr	r2, [pc, #196]	; (8012668 <tcp_process+0x7dc>)
 80125a4:	6013      	str	r3, [r2, #0]
 80125a6:	e013      	b.n	80125d0 <tcp_process+0x744>
 80125a8:	4b2f      	ldr	r3, [pc, #188]	; (8012668 <tcp_process+0x7dc>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	60fb      	str	r3, [r7, #12]
 80125ae:	e00c      	b.n	80125ca <tcp_process+0x73e>
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	68db      	ldr	r3, [r3, #12]
 80125b4:	687a      	ldr	r2, [r7, #4]
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d104      	bne.n	80125c4 <tcp_process+0x738>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	68da      	ldr	r2, [r3, #12]
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	60da      	str	r2, [r3, #12]
 80125c2:	e005      	b.n	80125d0 <tcp_process+0x744>
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	68db      	ldr	r3, [r3, #12]
 80125c8:	60fb      	str	r3, [r7, #12]
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d1ef      	bne.n	80125b0 <tcp_process+0x724>
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2200      	movs	r2, #0
 80125d4:	60da      	str	r2, [r3, #12]
 80125d6:	4b1f      	ldr	r3, [pc, #124]	; (8012654 <tcp_process+0x7c8>)
 80125d8:	2201      	movs	r2, #1
 80125da:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	220a      	movs	r2, #10
 80125e0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80125e2:	4b1d      	ldr	r3, [pc, #116]	; (8012658 <tcp_process+0x7cc>)
 80125e4:	681a      	ldr	r2, [r3, #0]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	60da      	str	r2, [r3, #12]
 80125ea:	4a1b      	ldr	r2, [pc, #108]	; (8012658 <tcp_process+0x7cc>)
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6013      	str	r3, [r2, #0]
 80125f0:	f002 fc48 	bl	8014e84 <tcp_timer_needed>
      }
      break;
 80125f4:	e026      	b.n	8012644 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f000 f93c 	bl	8012874 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80125fc:	4b17      	ldr	r3, [pc, #92]	; (801265c <tcp_process+0x7d0>)
 80125fe:	781b      	ldrb	r3, [r3, #0]
 8012600:	f003 0310 	and.w	r3, r3, #16
 8012604:	2b00      	cmp	r3, #0
 8012606:	d01f      	beq.n	8012648 <tcp_process+0x7bc>
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801260c:	4b14      	ldr	r3, [pc, #80]	; (8012660 <tcp_process+0x7d4>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	429a      	cmp	r2, r3
 8012612:	d119      	bne.n	8012648 <tcp_process+0x7bc>
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012618:	2b00      	cmp	r3, #0
 801261a:	d115      	bne.n	8012648 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801261c:	4b11      	ldr	r3, [pc, #68]	; (8012664 <tcp_process+0x7d8>)
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	f043 0310 	orr.w	r3, r3, #16
 8012624:	b2da      	uxtb	r2, r3
 8012626:	4b0f      	ldr	r3, [pc, #60]	; (8012664 <tcp_process+0x7d8>)
 8012628:	701a      	strb	r2, [r3, #0]
      }
      break;
 801262a:	e00d      	b.n	8012648 <tcp_process+0x7bc>
    default:
      break;
 801262c:	bf00      	nop
 801262e:	e00c      	b.n	801264a <tcp_process+0x7be>
      break;
 8012630:	bf00      	nop
 8012632:	e00a      	b.n	801264a <tcp_process+0x7be>
      break;
 8012634:	bf00      	nop
 8012636:	e008      	b.n	801264a <tcp_process+0x7be>
      break;
 8012638:	bf00      	nop
 801263a:	e006      	b.n	801264a <tcp_process+0x7be>
      break;
 801263c:	bf00      	nop
 801263e:	e004      	b.n	801264a <tcp_process+0x7be>
      break;
 8012640:	bf00      	nop
 8012642:	e002      	b.n	801264a <tcp_process+0x7be>
      break;
 8012644:	bf00      	nop
 8012646:	e000      	b.n	801264a <tcp_process+0x7be>
      break;
 8012648:	bf00      	nop
  }
  return ERR_OK;
 801264a:	2300      	movs	r3, #0
}
 801264c:	4618      	mov	r0, r3
 801264e:	3724      	adds	r7, #36	; 0x24
 8012650:	46bd      	mov	sp, r7
 8012652:	bd90      	pop	{r4, r7, pc}
 8012654:	2000f3f4 	.word	0x2000f3f4
 8012658:	2000f408 	.word	0x2000f408
 801265c:	20008564 	.word	0x20008564
 8012660:	2000855c 	.word	0x2000855c
 8012664:	20008565 	.word	0x20008565
 8012668:	2000f3f8 	.word	0x2000f3f8

0801266c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801266c:	b590      	push	{r4, r7, lr}
 801266e:	b085      	sub	sp, #20
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d106      	bne.n	801268a <tcp_oos_insert_segment+0x1e>
 801267c:	4b3b      	ldr	r3, [pc, #236]	; (801276c <tcp_oos_insert_segment+0x100>)
 801267e:	f240 421f 	movw	r2, #1055	; 0x41f
 8012682:	493b      	ldr	r1, [pc, #236]	; (8012770 <tcp_oos_insert_segment+0x104>)
 8012684:	483b      	ldr	r0, [pc, #236]	; (8012774 <tcp_oos_insert_segment+0x108>)
 8012686:	f008 f9ef 	bl	801aa68 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	68db      	ldr	r3, [r3, #12]
 801268e:	899b      	ldrh	r3, [r3, #12]
 8012690:	b29b      	uxth	r3, r3
 8012692:	4618      	mov	r0, r3
 8012694:	f7fb fc3c 	bl	800df10 <lwip_htons>
 8012698:	4603      	mov	r3, r0
 801269a:	b2db      	uxtb	r3, r3
 801269c:	f003 0301 	and.w	r3, r3, #1
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d028      	beq.n	80126f6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80126a4:	6838      	ldr	r0, [r7, #0]
 80126a6:	f7fe fa65 	bl	8010b74 <tcp_segs_free>
    next = NULL;
 80126aa:	2300      	movs	r3, #0
 80126ac:	603b      	str	r3, [r7, #0]
 80126ae:	e056      	b.n	801275e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	68db      	ldr	r3, [r3, #12]
 80126b4:	899b      	ldrh	r3, [r3, #12]
 80126b6:	b29b      	uxth	r3, r3
 80126b8:	4618      	mov	r0, r3
 80126ba:	f7fb fc29 	bl	800df10 <lwip_htons>
 80126be:	4603      	mov	r3, r0
 80126c0:	b2db      	uxtb	r3, r3
 80126c2:	f003 0301 	and.w	r3, r3, #1
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d00d      	beq.n	80126e6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	68db      	ldr	r3, [r3, #12]
 80126ce:	899b      	ldrh	r3, [r3, #12]
 80126d0:	b29c      	uxth	r4, r3
 80126d2:	2001      	movs	r0, #1
 80126d4:	f7fb fc1c 	bl	800df10 <lwip_htons>
 80126d8:	4603      	mov	r3, r0
 80126da:	461a      	mov	r2, r3
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	68db      	ldr	r3, [r3, #12]
 80126e0:	4322      	orrs	r2, r4
 80126e2:	b292      	uxth	r2, r2
 80126e4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80126f0:	68f8      	ldr	r0, [r7, #12]
 80126f2:	f7fe fa54 	bl	8010b9e <tcp_seg_free>
    while (next &&
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d00e      	beq.n	801271a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	891b      	ldrh	r3, [r3, #8]
 8012700:	461a      	mov	r2, r3
 8012702:	4b1d      	ldr	r3, [pc, #116]	; (8012778 <tcp_oos_insert_segment+0x10c>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	441a      	add	r2, r3
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	68db      	ldr	r3, [r3, #12]
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	6839      	ldr	r1, [r7, #0]
 8012710:	8909      	ldrh	r1, [r1, #8]
 8012712:	440b      	add	r3, r1
 8012714:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012716:	2b00      	cmp	r3, #0
 8012718:	daca      	bge.n	80126b0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d01e      	beq.n	801275e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	891b      	ldrh	r3, [r3, #8]
 8012724:	461a      	mov	r2, r3
 8012726:	4b14      	ldr	r3, [pc, #80]	; (8012778 <tcp_oos_insert_segment+0x10c>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	441a      	add	r2, r3
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	68db      	ldr	r3, [r3, #12]
 8012730:	685b      	ldr	r3, [r3, #4]
 8012732:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012734:	2b00      	cmp	r3, #0
 8012736:	dd12      	ble.n	801275e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	68db      	ldr	r3, [r3, #12]
 801273c:	685b      	ldr	r3, [r3, #4]
 801273e:	b29a      	uxth	r2, r3
 8012740:	4b0d      	ldr	r3, [pc, #52]	; (8012778 <tcp_oos_insert_segment+0x10c>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	b29b      	uxth	r3, r3
 8012746:	1ad3      	subs	r3, r2, r3
 8012748:	b29a      	uxth	r2, r3
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	685a      	ldr	r2, [r3, #4]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	891b      	ldrh	r3, [r3, #8]
 8012756:	4619      	mov	r1, r3
 8012758:	4610      	mov	r0, r2
 801275a:	f7fc fe0b 	bl	800f374 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	683a      	ldr	r2, [r7, #0]
 8012762:	601a      	str	r2, [r3, #0]
}
 8012764:	bf00      	nop
 8012766:	3714      	adds	r7, #20
 8012768:	46bd      	mov	sp, r7
 801276a:	bd90      	pop	{r4, r7, pc}
 801276c:	0801d434 	.word	0x0801d434
 8012770:	0801d6f4 	.word	0x0801d6f4
 8012774:	0801d480 	.word	0x0801d480
 8012778:	20008558 	.word	0x20008558

0801277c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801277c:	b5b0      	push	{r4, r5, r7, lr}
 801277e:	b086      	sub	sp, #24
 8012780:	af00      	add	r7, sp, #0
 8012782:	60f8      	str	r0, [r7, #12]
 8012784:	60b9      	str	r1, [r7, #8]
 8012786:	607a      	str	r2, [r7, #4]
 8012788:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801278a:	e03e      	b.n	801280a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801278c:	68bb      	ldr	r3, [r7, #8]
 801278e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	685b      	ldr	r3, [r3, #4]
 801279a:	4618      	mov	r0, r3
 801279c:	f7fc fffe 	bl	800f79c <pbuf_clen>
 80127a0:	4603      	mov	r3, r0
 80127a2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80127aa:	8a7a      	ldrh	r2, [r7, #18]
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d906      	bls.n	80127be <tcp_free_acked_segments+0x42>
 80127b0:	4b2a      	ldr	r3, [pc, #168]	; (801285c <tcp_free_acked_segments+0xe0>)
 80127b2:	f240 4257 	movw	r2, #1111	; 0x457
 80127b6:	492a      	ldr	r1, [pc, #168]	; (8012860 <tcp_free_acked_segments+0xe4>)
 80127b8:	482a      	ldr	r0, [pc, #168]	; (8012864 <tcp_free_acked_segments+0xe8>)
 80127ba:	f008 f955 	bl	801aa68 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80127c4:	8a7b      	ldrh	r3, [r7, #18]
 80127c6:	1ad3      	subs	r3, r2, r3
 80127c8:	b29a      	uxth	r2, r3
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	891a      	ldrh	r2, [r3, #8]
 80127d4:	4b24      	ldr	r3, [pc, #144]	; (8012868 <tcp_free_acked_segments+0xec>)
 80127d6:	881b      	ldrh	r3, [r3, #0]
 80127d8:	4413      	add	r3, r2
 80127da:	b29a      	uxth	r2, r3
 80127dc:	4b22      	ldr	r3, [pc, #136]	; (8012868 <tcp_free_acked_segments+0xec>)
 80127de:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80127e0:	6978      	ldr	r0, [r7, #20]
 80127e2:	f7fe f9dc 	bl	8010b9e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d00c      	beq.n	801280a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d109      	bne.n	801280a <tcp_free_acked_segments+0x8e>
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d106      	bne.n	801280a <tcp_free_acked_segments+0x8e>
 80127fc:	4b17      	ldr	r3, [pc, #92]	; (801285c <tcp_free_acked_segments+0xe0>)
 80127fe:	f240 4261 	movw	r2, #1121	; 0x461
 8012802:	491a      	ldr	r1, [pc, #104]	; (801286c <tcp_free_acked_segments+0xf0>)
 8012804:	4817      	ldr	r0, [pc, #92]	; (8012864 <tcp_free_acked_segments+0xe8>)
 8012806:	f008 f92f 	bl	801aa68 <iprintf>
  while (seg_list != NULL &&
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d020      	beq.n	8012852 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	68db      	ldr	r3, [r3, #12]
 8012814:	685b      	ldr	r3, [r3, #4]
 8012816:	4618      	mov	r0, r3
 8012818:	f7fb fb8f 	bl	800df3a <lwip_htonl>
 801281c:	4604      	mov	r4, r0
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	891b      	ldrh	r3, [r3, #8]
 8012822:	461d      	mov	r5, r3
 8012824:	68bb      	ldr	r3, [r7, #8]
 8012826:	68db      	ldr	r3, [r3, #12]
 8012828:	899b      	ldrh	r3, [r3, #12]
 801282a:	b29b      	uxth	r3, r3
 801282c:	4618      	mov	r0, r3
 801282e:	f7fb fb6f 	bl	800df10 <lwip_htons>
 8012832:	4603      	mov	r3, r0
 8012834:	b2db      	uxtb	r3, r3
 8012836:	f003 0303 	and.w	r3, r3, #3
 801283a:	2b00      	cmp	r3, #0
 801283c:	d001      	beq.n	8012842 <tcp_free_acked_segments+0xc6>
 801283e:	2301      	movs	r3, #1
 8012840:	e000      	b.n	8012844 <tcp_free_acked_segments+0xc8>
 8012842:	2300      	movs	r3, #0
 8012844:	442b      	add	r3, r5
 8012846:	18e2      	adds	r2, r4, r3
 8012848:	4b09      	ldr	r3, [pc, #36]	; (8012870 <tcp_free_acked_segments+0xf4>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801284e:	2b00      	cmp	r3, #0
 8012850:	dd9c      	ble.n	801278c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012852:	68bb      	ldr	r3, [r7, #8]
}
 8012854:	4618      	mov	r0, r3
 8012856:	3718      	adds	r7, #24
 8012858:	46bd      	mov	sp, r7
 801285a:	bdb0      	pop	{r4, r5, r7, pc}
 801285c:	0801d434 	.word	0x0801d434
 8012860:	0801d71c 	.word	0x0801d71c
 8012864:	0801d480 	.word	0x0801d480
 8012868:	20008560 	.word	0x20008560
 801286c:	0801d744 	.word	0x0801d744
 8012870:	2000855c 	.word	0x2000855c

08012874 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012874:	b5b0      	push	{r4, r5, r7, lr}
 8012876:	b094      	sub	sp, #80	; 0x50
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801287c:	2300      	movs	r3, #0
 801287e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d106      	bne.n	8012894 <tcp_receive+0x20>
 8012886:	4ba6      	ldr	r3, [pc, #664]	; (8012b20 <tcp_receive+0x2ac>)
 8012888:	f240 427b 	movw	r2, #1147	; 0x47b
 801288c:	49a5      	ldr	r1, [pc, #660]	; (8012b24 <tcp_receive+0x2b0>)
 801288e:	48a6      	ldr	r0, [pc, #664]	; (8012b28 <tcp_receive+0x2b4>)
 8012890:	f008 f8ea 	bl	801aa68 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	7d1b      	ldrb	r3, [r3, #20]
 8012898:	2b03      	cmp	r3, #3
 801289a:	d806      	bhi.n	80128aa <tcp_receive+0x36>
 801289c:	4ba0      	ldr	r3, [pc, #640]	; (8012b20 <tcp_receive+0x2ac>)
 801289e:	f240 427c 	movw	r2, #1148	; 0x47c
 80128a2:	49a2      	ldr	r1, [pc, #648]	; (8012b2c <tcp_receive+0x2b8>)
 80128a4:	48a0      	ldr	r0, [pc, #640]	; (8012b28 <tcp_receive+0x2b4>)
 80128a6:	f008 f8df 	bl	801aa68 <iprintf>

  if (flags & TCP_ACK) {
 80128aa:	4ba1      	ldr	r3, [pc, #644]	; (8012b30 <tcp_receive+0x2bc>)
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	f003 0310 	and.w	r3, r3, #16
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	f000 8263 	beq.w	8012d7e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80128be:	461a      	mov	r2, r3
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80128c4:	4413      	add	r3, r2
 80128c6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80128cc:	4b99      	ldr	r3, [pc, #612]	; (8012b34 <tcp_receive+0x2c0>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	1ad3      	subs	r3, r2, r3
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	db1b      	blt.n	801290e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80128da:	4b96      	ldr	r3, [pc, #600]	; (8012b34 <tcp_receive+0x2c0>)
 80128dc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80128de:	429a      	cmp	r2, r3
 80128e0:	d106      	bne.n	80128f0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80128e6:	4b94      	ldr	r3, [pc, #592]	; (8012b38 <tcp_receive+0x2c4>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	1ad3      	subs	r3, r2, r3
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	db0e      	blt.n	801290e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80128f4:	4b90      	ldr	r3, [pc, #576]	; (8012b38 <tcp_receive+0x2c4>)
 80128f6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d125      	bne.n	8012948 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80128fc:	4b8f      	ldr	r3, [pc, #572]	; (8012b3c <tcp_receive+0x2c8>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	89db      	ldrh	r3, [r3, #14]
 8012902:	b29a      	uxth	r2, r3
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801290a:	429a      	cmp	r2, r3
 801290c:	d91c      	bls.n	8012948 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801290e:	4b8b      	ldr	r3, [pc, #556]	; (8012b3c <tcp_receive+0x2c8>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	89db      	ldrh	r3, [r3, #14]
 8012914:	b29a      	uxth	r2, r3
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012928:	429a      	cmp	r2, r3
 801292a:	d205      	bcs.n	8012938 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012938:	4b7e      	ldr	r3, [pc, #504]	; (8012b34 <tcp_receive+0x2c0>)
 801293a:	681a      	ldr	r2, [r3, #0]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012940:	4b7d      	ldr	r3, [pc, #500]	; (8012b38 <tcp_receive+0x2c4>)
 8012942:	681a      	ldr	r2, [r3, #0]
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012948:	4b7b      	ldr	r3, [pc, #492]	; (8012b38 <tcp_receive+0x2c4>)
 801294a:	681a      	ldr	r2, [r3, #0]
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012950:	1ad3      	subs	r3, r2, r3
 8012952:	2b00      	cmp	r3, #0
 8012954:	dc58      	bgt.n	8012a08 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012956:	4b7a      	ldr	r3, [pc, #488]	; (8012b40 <tcp_receive+0x2cc>)
 8012958:	881b      	ldrh	r3, [r3, #0]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d14b      	bne.n	80129f6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012962:	687a      	ldr	r2, [r7, #4]
 8012964:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012968:	4413      	add	r3, r2
 801296a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801296c:	429a      	cmp	r2, r3
 801296e:	d142      	bne.n	80129f6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012976:	2b00      	cmp	r3, #0
 8012978:	db3d      	blt.n	80129f6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801297e:	4b6e      	ldr	r3, [pc, #440]	; (8012b38 <tcp_receive+0x2c4>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	429a      	cmp	r2, r3
 8012984:	d137      	bne.n	80129f6 <tcp_receive+0x182>
              found_dupack = 1;
 8012986:	2301      	movs	r3, #1
 8012988:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012990:	2bff      	cmp	r3, #255	; 0xff
 8012992:	d007      	beq.n	80129a4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801299a:	3301      	adds	r3, #1
 801299c:	b2da      	uxtb	r2, r3
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80129aa:	2b03      	cmp	r3, #3
 80129ac:	d91b      	bls.n	80129e6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129b8:	4413      	add	r3, r2
 80129ba:	b29a      	uxth	r2, r3
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d30a      	bcc.n	80129dc <tcp_receive+0x168>
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129d0:	4413      	add	r3, r2
 80129d2:	b29a      	uxth	r2, r3
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80129da:	e004      	b.n	80129e6 <tcp_receive+0x172>
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80129e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80129ec:	2b02      	cmp	r3, #2
 80129ee:	d902      	bls.n	80129f6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f001 fee9 	bl	80147c8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80129f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	f040 8160 	bne.w	8012cbe <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2200      	movs	r2, #0
 8012a02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012a06:	e15a      	b.n	8012cbe <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012a08:	4b4b      	ldr	r3, [pc, #300]	; (8012b38 <tcp_receive+0x2c4>)
 8012a0a:	681a      	ldr	r2, [r3, #0]
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a10:	1ad3      	subs	r3, r2, r3
 8012a12:	3b01      	subs	r3, #1
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	f2c0 814d 	blt.w	8012cb4 <tcp_receive+0x440>
 8012a1a:	4b47      	ldr	r3, [pc, #284]	; (8012b38 <tcp_receive+0x2c4>)
 8012a1c:	681a      	ldr	r2, [r3, #0]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a22:	1ad3      	subs	r3, r2, r3
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	f300 8145 	bgt.w	8012cb4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	8b5b      	ldrh	r3, [r3, #26]
 8012a2e:	f003 0304 	and.w	r3, r3, #4
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d010      	beq.n	8012a58 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	8b5b      	ldrh	r3, [r3, #26]
 8012a3a:	f023 0304 	bic.w	r3, r3, #4
 8012a3e:	b29a      	uxth	r2, r3
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2200      	movs	r2, #0
 8012a54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012a66:	10db      	asrs	r3, r3, #3
 8012a68:	b21b      	sxth	r3, r3
 8012a6a:	b29a      	uxth	r2, r3
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012a72:	b29b      	uxth	r3, r3
 8012a74:	4413      	add	r3, r2
 8012a76:	b29b      	uxth	r3, r3
 8012a78:	b21a      	sxth	r2, r3
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012a80:	4b2d      	ldr	r3, [pc, #180]	; (8012b38 <tcp_receive+0x2c4>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	b29a      	uxth	r2, r3
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	1ad3      	subs	r3, r2, r3
 8012a8e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2200      	movs	r2, #0
 8012a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012a98:	4b27      	ldr	r3, [pc, #156]	; (8012b38 <tcp_receive+0x2c4>)
 8012a9a:	681a      	ldr	r2, [r3, #0]
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	7d1b      	ldrb	r3, [r3, #20]
 8012aa4:	2b03      	cmp	r3, #3
 8012aa6:	f240 8096 	bls.w	8012bd6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d244      	bcs.n	8012b44 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	8b5b      	ldrh	r3, [r3, #26]
 8012abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d001      	beq.n	8012aca <tcp_receive+0x256>
 8012ac6:	2301      	movs	r3, #1
 8012ac8:	e000      	b.n	8012acc <tcp_receive+0x258>
 8012aca:	2302      	movs	r3, #2
 8012acc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012ad0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012ad4:	b29a      	uxth	r2, r3
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ada:	fb12 f303 	smulbb	r3, r2, r3
 8012ade:	b29b      	uxth	r3, r3
 8012ae0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012ae2:	4293      	cmp	r3, r2
 8012ae4:	bf28      	it	cs
 8012ae6:	4613      	movcs	r3, r2
 8012ae8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012af0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012af2:	4413      	add	r3, r2
 8012af4:	b29a      	uxth	r2, r3
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012afc:	429a      	cmp	r2, r3
 8012afe:	d309      	bcc.n	8012b14 <tcp_receive+0x2a0>
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012b06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012b08:	4413      	add	r3, r2
 8012b0a:	b29a      	uxth	r2, r3
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012b12:	e060      	b.n	8012bd6 <tcp_receive+0x362>
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012b1e:	e05a      	b.n	8012bd6 <tcp_receive+0x362>
 8012b20:	0801d434 	.word	0x0801d434
 8012b24:	0801d764 	.word	0x0801d764
 8012b28:	0801d480 	.word	0x0801d480
 8012b2c:	0801d780 	.word	0x0801d780
 8012b30:	20008564 	.word	0x20008564
 8012b34:	20008558 	.word	0x20008558
 8012b38:	2000855c 	.word	0x2000855c
 8012b3c:	20008548 	.word	0x20008548
 8012b40:	20008562 	.word	0x20008562
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012b4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012b4c:	4413      	add	r3, r2
 8012b4e:	b29a      	uxth	r2, r3
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d309      	bcc.n	8012b6e <tcp_receive+0x2fa>
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012b60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012b62:	4413      	add	r3, r2
 8012b64:	b29a      	uxth	r2, r3
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012b6c:	e004      	b.n	8012b78 <tcp_receive+0x304>
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d326      	bcc.n	8012bd6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012b94:	1ad3      	subs	r3, r2, r3
 8012b96:	b29a      	uxth	r2, r3
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ba8:	4413      	add	r3, r2
 8012baa:	b29a      	uxth	r2, r3
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d30a      	bcc.n	8012bcc <tcp_receive+0x358>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bc0:	4413      	add	r3, r2
 8012bc2:	b29a      	uxth	r2, r3
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012bca:	e004      	b.n	8012bd6 <tcp_receive+0x362>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012bd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bde:	4a98      	ldr	r2, [pc, #608]	; (8012e40 <tcp_receive+0x5cc>)
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	f7ff fdcb 	bl	801277c <tcp_free_acked_segments>
 8012be6:	4602      	mov	r2, r0
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bf4:	4a93      	ldr	r2, [pc, #588]	; (8012e44 <tcp_receive+0x5d0>)
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f7ff fdc0 	bl	801277c <tcp_free_acked_segments>
 8012bfc:	4602      	mov	r2, r0
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d104      	bne.n	8012c14 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c10:	861a      	strh	r2, [r3, #48]	; 0x30
 8012c12:	e002      	b.n	8012c1a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2200      	movs	r2, #0
 8012c18:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d103      	bne.n	8012c30 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012c36:	4b84      	ldr	r3, [pc, #528]	; (8012e48 <tcp_receive+0x5d4>)
 8012c38:	881b      	ldrh	r3, [r3, #0]
 8012c3a:	4413      	add	r3, r2
 8012c3c:	b29a      	uxth	r2, r3
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	8b5b      	ldrh	r3, [r3, #26]
 8012c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d035      	beq.n	8012cbc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d118      	bne.n	8012c8a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d00c      	beq.n	8012c7a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c68:	68db      	ldr	r3, [r3, #12]
 8012c6a:	685b      	ldr	r3, [r3, #4]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7fb f964 	bl	800df3a <lwip_htonl>
 8012c72:	4603      	mov	r3, r0
 8012c74:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	dc20      	bgt.n	8012cbc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	8b5b      	ldrh	r3, [r3, #26]
 8012c7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012c82:	b29a      	uxth	r2, r3
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012c88:	e018      	b.n	8012cbc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c92:	68db      	ldr	r3, [r3, #12]
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	4618      	mov	r0, r3
 8012c98:	f7fb f94f 	bl	800df3a <lwip_htonl>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	1ae3      	subs	r3, r4, r3
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	dc0b      	bgt.n	8012cbc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	8b5b      	ldrh	r3, [r3, #26]
 8012ca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012cac:	b29a      	uxth	r2, r3
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012cb2:	e003      	b.n	8012cbc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f001 ff75 	bl	8014ba4 <tcp_send_empty_ack>
 8012cba:	e000      	b.n	8012cbe <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012cbc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d05b      	beq.n	8012d7e <tcp_receive+0x50a>
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012cca:	4b60      	ldr	r3, [pc, #384]	; (8012e4c <tcp_receive+0x5d8>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	1ad3      	subs	r3, r2, r3
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	da54      	bge.n	8012d7e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012cd4:	4b5e      	ldr	r3, [pc, #376]	; (8012e50 <tcp_receive+0x5dc>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	b29a      	uxth	r2, r3
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	1ad3      	subs	r3, r2, r3
 8012ce2:	b29b      	uxth	r3, r3
 8012ce4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012ce8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012cf2:	10db      	asrs	r3, r3, #3
 8012cf4:	b21b      	sxth	r3, r3
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	1ad3      	subs	r3, r2, r3
 8012cfa:	b29b      	uxth	r3, r3
 8012cfc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012d06:	b29a      	uxth	r2, r3
 8012d08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012d0c:	4413      	add	r3, r2
 8012d0e:	b29b      	uxth	r3, r3
 8012d10:	b21a      	sxth	r2, r3
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012d16:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	da05      	bge.n	8012d2a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8012d1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012d22:	425b      	negs	r3, r3
 8012d24:	b29b      	uxth	r3, r3
 8012d26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012d2a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012d34:	109b      	asrs	r3, r3, #2
 8012d36:	b21b      	sxth	r3, r3
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	1ad3      	subs	r3, r2, r3
 8012d3c:	b29b      	uxth	r3, r3
 8012d3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012d48:	b29a      	uxth	r2, r3
 8012d4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012d4e:	4413      	add	r3, r2
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	b21a      	sxth	r2, r3
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012d5e:	10db      	asrs	r3, r3, #3
 8012d60:	b21b      	sxth	r3, r3
 8012d62:	b29a      	uxth	r2, r3
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012d6a:	b29b      	uxth	r3, r3
 8012d6c:	4413      	add	r3, r2
 8012d6e:	b29b      	uxth	r3, r3
 8012d70:	b21a      	sxth	r2, r3
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012d7e:	4b35      	ldr	r3, [pc, #212]	; (8012e54 <tcp_receive+0x5e0>)
 8012d80:	881b      	ldrh	r3, [r3, #0]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	f000 84e1 	beq.w	801374a <tcp_receive+0xed6>
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	7d1b      	ldrb	r3, [r3, #20]
 8012d8c:	2b06      	cmp	r3, #6
 8012d8e:	f200 84dc 	bhi.w	801374a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d96:	4b30      	ldr	r3, [pc, #192]	; (8012e58 <tcp_receive+0x5e4>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	1ad3      	subs	r3, r2, r3
 8012d9c:	3b01      	subs	r3, #1
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	f2c0 808e 	blt.w	8012ec0 <tcp_receive+0x64c>
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012da8:	4b2a      	ldr	r3, [pc, #168]	; (8012e54 <tcp_receive+0x5e0>)
 8012daa:	881b      	ldrh	r3, [r3, #0]
 8012dac:	4619      	mov	r1, r3
 8012dae:	4b2a      	ldr	r3, [pc, #168]	; (8012e58 <tcp_receive+0x5e4>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	440b      	add	r3, r1
 8012db4:	1ad3      	subs	r3, r2, r3
 8012db6:	3301      	adds	r3, #1
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	f300 8081 	bgt.w	8012ec0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012dbe:	4b27      	ldr	r3, [pc, #156]	; (8012e5c <tcp_receive+0x5e8>)
 8012dc0:	685b      	ldr	r3, [r3, #4]
 8012dc2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012dc8:	4b23      	ldr	r3, [pc, #140]	; (8012e58 <tcp_receive+0x5e4>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	1ad3      	subs	r3, r2, r3
 8012dce:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012dd0:	4b22      	ldr	r3, [pc, #136]	; (8012e5c <tcp_receive+0x5e8>)
 8012dd2:	685b      	ldr	r3, [r3, #4]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d106      	bne.n	8012de6 <tcp_receive+0x572>
 8012dd8:	4b21      	ldr	r3, [pc, #132]	; (8012e60 <tcp_receive+0x5ec>)
 8012dda:	f240 5294 	movw	r2, #1428	; 0x594
 8012dde:	4921      	ldr	r1, [pc, #132]	; (8012e64 <tcp_receive+0x5f0>)
 8012de0:	4821      	ldr	r0, [pc, #132]	; (8012e68 <tcp_receive+0x5f4>)
 8012de2:	f007 fe41 	bl	801aa68 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012dec:	4293      	cmp	r3, r2
 8012dee:	d906      	bls.n	8012dfe <tcp_receive+0x58a>
 8012df0:	4b1b      	ldr	r3, [pc, #108]	; (8012e60 <tcp_receive+0x5ec>)
 8012df2:	f240 5295 	movw	r2, #1429	; 0x595
 8012df6:	491d      	ldr	r1, [pc, #116]	; (8012e6c <tcp_receive+0x5f8>)
 8012df8:	481b      	ldr	r0, [pc, #108]	; (8012e68 <tcp_receive+0x5f4>)
 8012dfa:	f007 fe35 	bl	801aa68 <iprintf>
      off = (u16_t)off32;
 8012dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012e04:	4b15      	ldr	r3, [pc, #84]	; (8012e5c <tcp_receive+0x5e8>)
 8012e06:	685b      	ldr	r3, [r3, #4]
 8012e08:	891b      	ldrh	r3, [r3, #8]
 8012e0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d906      	bls.n	8012e20 <tcp_receive+0x5ac>
 8012e12:	4b13      	ldr	r3, [pc, #76]	; (8012e60 <tcp_receive+0x5ec>)
 8012e14:	f240 5297 	movw	r2, #1431	; 0x597
 8012e18:	4915      	ldr	r1, [pc, #84]	; (8012e70 <tcp_receive+0x5fc>)
 8012e1a:	4813      	ldr	r0, [pc, #76]	; (8012e68 <tcp_receive+0x5f4>)
 8012e1c:	f007 fe24 	bl	801aa68 <iprintf>
      inseg.len -= off;
 8012e20:	4b0e      	ldr	r3, [pc, #56]	; (8012e5c <tcp_receive+0x5e8>)
 8012e22:	891a      	ldrh	r2, [r3, #8]
 8012e24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e28:	1ad3      	subs	r3, r2, r3
 8012e2a:	b29a      	uxth	r2, r3
 8012e2c:	4b0b      	ldr	r3, [pc, #44]	; (8012e5c <tcp_receive+0x5e8>)
 8012e2e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012e30:	4b0a      	ldr	r3, [pc, #40]	; (8012e5c <tcp_receive+0x5e8>)
 8012e32:	685b      	ldr	r3, [r3, #4]
 8012e34:	891a      	ldrh	r2, [r3, #8]
 8012e36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e3a:	1ad3      	subs	r3, r2, r3
 8012e3c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012e3e:	e029      	b.n	8012e94 <tcp_receive+0x620>
 8012e40:	0801d79c 	.word	0x0801d79c
 8012e44:	0801d7a4 	.word	0x0801d7a4
 8012e48:	20008560 	.word	0x20008560
 8012e4c:	2000855c 	.word	0x2000855c
 8012e50:	2000f3fc 	.word	0x2000f3fc
 8012e54:	20008562 	.word	0x20008562
 8012e58:	20008558 	.word	0x20008558
 8012e5c:	20008538 	.word	0x20008538
 8012e60:	0801d434 	.word	0x0801d434
 8012e64:	0801d7ac 	.word	0x0801d7ac
 8012e68:	0801d480 	.word	0x0801d480
 8012e6c:	0801d7bc 	.word	0x0801d7bc
 8012e70:	0801d7cc 	.word	0x0801d7cc
        off -= p->len;
 8012e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e76:	895b      	ldrh	r3, [r3, #10]
 8012e78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e84:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012e86:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e96:	895b      	ldrh	r3, [r3, #10]
 8012e98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d8e9      	bhi.n	8012e74 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012ea0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012ea8:	f7fc fb64 	bl	800f574 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb0:	4a91      	ldr	r2, [pc, #580]	; (80130f8 <tcp_receive+0x884>)
 8012eb2:	6013      	str	r3, [r2, #0]
 8012eb4:	4b91      	ldr	r3, [pc, #580]	; (80130fc <tcp_receive+0x888>)
 8012eb6:	68db      	ldr	r3, [r3, #12]
 8012eb8:	4a8f      	ldr	r2, [pc, #572]	; (80130f8 <tcp_receive+0x884>)
 8012eba:	6812      	ldr	r2, [r2, #0]
 8012ebc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012ebe:	e00d      	b.n	8012edc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012ec0:	4b8d      	ldr	r3, [pc, #564]	; (80130f8 <tcp_receive+0x884>)
 8012ec2:	681a      	ldr	r2, [r3, #0]
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec8:	1ad3      	subs	r3, r2, r3
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	da06      	bge.n	8012edc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	8b5b      	ldrh	r3, [r3, #26]
 8012ed2:	f043 0302 	orr.w	r3, r3, #2
 8012ed6:	b29a      	uxth	r2, r3
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012edc:	4b86      	ldr	r3, [pc, #536]	; (80130f8 <tcp_receive+0x884>)
 8012ede:	681a      	ldr	r2, [r3, #0]
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ee4:	1ad3      	subs	r3, r2, r3
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	f2c0 842a 	blt.w	8013740 <tcp_receive+0xecc>
 8012eec:	4b82      	ldr	r3, [pc, #520]	; (80130f8 <tcp_receive+0x884>)
 8012eee:	681a      	ldr	r2, [r3, #0]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ef4:	6879      	ldr	r1, [r7, #4]
 8012ef6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012ef8:	440b      	add	r3, r1
 8012efa:	1ad3      	subs	r3, r2, r3
 8012efc:	3301      	adds	r3, #1
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	f300 841e 	bgt.w	8013740 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f08:	4b7b      	ldr	r3, [pc, #492]	; (80130f8 <tcp_receive+0x884>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	f040 829a 	bne.w	8013446 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012f12:	4b7a      	ldr	r3, [pc, #488]	; (80130fc <tcp_receive+0x888>)
 8012f14:	891c      	ldrh	r4, [r3, #8]
 8012f16:	4b79      	ldr	r3, [pc, #484]	; (80130fc <tcp_receive+0x888>)
 8012f18:	68db      	ldr	r3, [r3, #12]
 8012f1a:	899b      	ldrh	r3, [r3, #12]
 8012f1c:	b29b      	uxth	r3, r3
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7fa fff6 	bl	800df10 <lwip_htons>
 8012f24:	4603      	mov	r3, r0
 8012f26:	b2db      	uxtb	r3, r3
 8012f28:	f003 0303 	and.w	r3, r3, #3
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d001      	beq.n	8012f34 <tcp_receive+0x6c0>
 8012f30:	2301      	movs	r3, #1
 8012f32:	e000      	b.n	8012f36 <tcp_receive+0x6c2>
 8012f34:	2300      	movs	r3, #0
 8012f36:	4423      	add	r3, r4
 8012f38:	b29a      	uxth	r2, r3
 8012f3a:	4b71      	ldr	r3, [pc, #452]	; (8013100 <tcp_receive+0x88c>)
 8012f3c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012f42:	4b6f      	ldr	r3, [pc, #444]	; (8013100 <tcp_receive+0x88c>)
 8012f44:	881b      	ldrh	r3, [r3, #0]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d275      	bcs.n	8013036 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012f4a:	4b6c      	ldr	r3, [pc, #432]	; (80130fc <tcp_receive+0x888>)
 8012f4c:	68db      	ldr	r3, [r3, #12]
 8012f4e:	899b      	ldrh	r3, [r3, #12]
 8012f50:	b29b      	uxth	r3, r3
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fa ffdc 	bl	800df10 <lwip_htons>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	b2db      	uxtb	r3, r3
 8012f5c:	f003 0301 	and.w	r3, r3, #1
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d01f      	beq.n	8012fa4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012f64:	4b65      	ldr	r3, [pc, #404]	; (80130fc <tcp_receive+0x888>)
 8012f66:	68db      	ldr	r3, [r3, #12]
 8012f68:	899b      	ldrh	r3, [r3, #12]
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	b21b      	sxth	r3, r3
 8012f6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012f72:	b21c      	sxth	r4, r3
 8012f74:	4b61      	ldr	r3, [pc, #388]	; (80130fc <tcp_receive+0x888>)
 8012f76:	68db      	ldr	r3, [r3, #12]
 8012f78:	899b      	ldrh	r3, [r3, #12]
 8012f7a:	b29b      	uxth	r3, r3
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f7fa ffc7 	bl	800df10 <lwip_htons>
 8012f82:	4603      	mov	r3, r0
 8012f84:	b2db      	uxtb	r3, r3
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7fa ffbe 	bl	800df10 <lwip_htons>
 8012f94:	4603      	mov	r3, r0
 8012f96:	b21b      	sxth	r3, r3
 8012f98:	4323      	orrs	r3, r4
 8012f9a:	b21a      	sxth	r2, r3
 8012f9c:	4b57      	ldr	r3, [pc, #348]	; (80130fc <tcp_receive+0x888>)
 8012f9e:	68db      	ldr	r3, [r3, #12]
 8012fa0:	b292      	uxth	r2, r2
 8012fa2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012fa8:	4b54      	ldr	r3, [pc, #336]	; (80130fc <tcp_receive+0x888>)
 8012faa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012fac:	4b53      	ldr	r3, [pc, #332]	; (80130fc <tcp_receive+0x888>)
 8012fae:	68db      	ldr	r3, [r3, #12]
 8012fb0:	899b      	ldrh	r3, [r3, #12]
 8012fb2:	b29b      	uxth	r3, r3
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7fa ffab 	bl	800df10 <lwip_htons>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	b2db      	uxtb	r3, r3
 8012fbe:	f003 0302 	and.w	r3, r3, #2
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d005      	beq.n	8012fd2 <tcp_receive+0x75e>
            inseg.len -= 1;
 8012fc6:	4b4d      	ldr	r3, [pc, #308]	; (80130fc <tcp_receive+0x888>)
 8012fc8:	891b      	ldrh	r3, [r3, #8]
 8012fca:	3b01      	subs	r3, #1
 8012fcc:	b29a      	uxth	r2, r3
 8012fce:	4b4b      	ldr	r3, [pc, #300]	; (80130fc <tcp_receive+0x888>)
 8012fd0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012fd2:	4b4a      	ldr	r3, [pc, #296]	; (80130fc <tcp_receive+0x888>)
 8012fd4:	685b      	ldr	r3, [r3, #4]
 8012fd6:	4a49      	ldr	r2, [pc, #292]	; (80130fc <tcp_receive+0x888>)
 8012fd8:	8912      	ldrh	r2, [r2, #8]
 8012fda:	4611      	mov	r1, r2
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7fc f9c9 	bl	800f374 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012fe2:	4b46      	ldr	r3, [pc, #280]	; (80130fc <tcp_receive+0x888>)
 8012fe4:	891c      	ldrh	r4, [r3, #8]
 8012fe6:	4b45      	ldr	r3, [pc, #276]	; (80130fc <tcp_receive+0x888>)
 8012fe8:	68db      	ldr	r3, [r3, #12]
 8012fea:	899b      	ldrh	r3, [r3, #12]
 8012fec:	b29b      	uxth	r3, r3
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f7fa ff8e 	bl	800df10 <lwip_htons>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	b2db      	uxtb	r3, r3
 8012ff8:	f003 0303 	and.w	r3, r3, #3
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d001      	beq.n	8013004 <tcp_receive+0x790>
 8013000:	2301      	movs	r3, #1
 8013002:	e000      	b.n	8013006 <tcp_receive+0x792>
 8013004:	2300      	movs	r3, #0
 8013006:	4423      	add	r3, r4
 8013008:	b29a      	uxth	r2, r3
 801300a:	4b3d      	ldr	r3, [pc, #244]	; (8013100 <tcp_receive+0x88c>)
 801300c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801300e:	4b3c      	ldr	r3, [pc, #240]	; (8013100 <tcp_receive+0x88c>)
 8013010:	881b      	ldrh	r3, [r3, #0]
 8013012:	461a      	mov	r2, r3
 8013014:	4b38      	ldr	r3, [pc, #224]	; (80130f8 <tcp_receive+0x884>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	441a      	add	r2, r3
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801301e:	6879      	ldr	r1, [r7, #4]
 8013020:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013022:	440b      	add	r3, r1
 8013024:	429a      	cmp	r2, r3
 8013026:	d006      	beq.n	8013036 <tcp_receive+0x7c2>
 8013028:	4b36      	ldr	r3, [pc, #216]	; (8013104 <tcp_receive+0x890>)
 801302a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801302e:	4936      	ldr	r1, [pc, #216]	; (8013108 <tcp_receive+0x894>)
 8013030:	4836      	ldr	r0, [pc, #216]	; (801310c <tcp_receive+0x898>)
 8013032:	f007 fd19 	bl	801aa68 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801303a:	2b00      	cmp	r3, #0
 801303c:	f000 80e7 	beq.w	801320e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013040:	4b2e      	ldr	r3, [pc, #184]	; (80130fc <tcp_receive+0x888>)
 8013042:	68db      	ldr	r3, [r3, #12]
 8013044:	899b      	ldrh	r3, [r3, #12]
 8013046:	b29b      	uxth	r3, r3
 8013048:	4618      	mov	r0, r3
 801304a:	f7fa ff61 	bl	800df10 <lwip_htons>
 801304e:	4603      	mov	r3, r0
 8013050:	b2db      	uxtb	r3, r3
 8013052:	f003 0301 	and.w	r3, r3, #1
 8013056:	2b00      	cmp	r3, #0
 8013058:	d010      	beq.n	801307c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801305a:	e00a      	b.n	8013072 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013060:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013066:	681a      	ldr	r2, [r3, #0]
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801306c:	68f8      	ldr	r0, [r7, #12]
 801306e:	f7fd fd96 	bl	8010b9e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013076:	2b00      	cmp	r3, #0
 8013078:	d1f0      	bne.n	801305c <tcp_receive+0x7e8>
 801307a:	e0c8      	b.n	801320e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013080:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013082:	e052      	b.n	801312a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013086:	68db      	ldr	r3, [r3, #12]
 8013088:	899b      	ldrh	r3, [r3, #12]
 801308a:	b29b      	uxth	r3, r3
 801308c:	4618      	mov	r0, r3
 801308e:	f7fa ff3f 	bl	800df10 <lwip_htons>
 8013092:	4603      	mov	r3, r0
 8013094:	b2db      	uxtb	r3, r3
 8013096:	f003 0301 	and.w	r3, r3, #1
 801309a:	2b00      	cmp	r3, #0
 801309c:	d03d      	beq.n	801311a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801309e:	4b17      	ldr	r3, [pc, #92]	; (80130fc <tcp_receive+0x888>)
 80130a0:	68db      	ldr	r3, [r3, #12]
 80130a2:	899b      	ldrh	r3, [r3, #12]
 80130a4:	b29b      	uxth	r3, r3
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7fa ff32 	bl	800df10 <lwip_htons>
 80130ac:	4603      	mov	r3, r0
 80130ae:	b2db      	uxtb	r3, r3
 80130b0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d130      	bne.n	801311a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80130b8:	4b10      	ldr	r3, [pc, #64]	; (80130fc <tcp_receive+0x888>)
 80130ba:	68db      	ldr	r3, [r3, #12]
 80130bc:	899b      	ldrh	r3, [r3, #12]
 80130be:	b29c      	uxth	r4, r3
 80130c0:	2001      	movs	r0, #1
 80130c2:	f7fa ff25 	bl	800df10 <lwip_htons>
 80130c6:	4603      	mov	r3, r0
 80130c8:	461a      	mov	r2, r3
 80130ca:	4b0c      	ldr	r3, [pc, #48]	; (80130fc <tcp_receive+0x888>)
 80130cc:	68db      	ldr	r3, [r3, #12]
 80130ce:	4322      	orrs	r2, r4
 80130d0:	b292      	uxth	r2, r2
 80130d2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80130d4:	4b09      	ldr	r3, [pc, #36]	; (80130fc <tcp_receive+0x888>)
 80130d6:	891c      	ldrh	r4, [r3, #8]
 80130d8:	4b08      	ldr	r3, [pc, #32]	; (80130fc <tcp_receive+0x888>)
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	899b      	ldrh	r3, [r3, #12]
 80130de:	b29b      	uxth	r3, r3
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7fa ff15 	bl	800df10 <lwip_htons>
 80130e6:	4603      	mov	r3, r0
 80130e8:	b2db      	uxtb	r3, r3
 80130ea:	f003 0303 	and.w	r3, r3, #3
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d00e      	beq.n	8013110 <tcp_receive+0x89c>
 80130f2:	2301      	movs	r3, #1
 80130f4:	e00d      	b.n	8013112 <tcp_receive+0x89e>
 80130f6:	bf00      	nop
 80130f8:	20008558 	.word	0x20008558
 80130fc:	20008538 	.word	0x20008538
 8013100:	20008562 	.word	0x20008562
 8013104:	0801d434 	.word	0x0801d434
 8013108:	0801d7dc 	.word	0x0801d7dc
 801310c:	0801d480 	.word	0x0801d480
 8013110:	2300      	movs	r3, #0
 8013112:	4423      	add	r3, r4
 8013114:	b29a      	uxth	r2, r3
 8013116:	4b98      	ldr	r3, [pc, #608]	; (8013378 <tcp_receive+0xb04>)
 8013118:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801311a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801311c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801311e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013124:	6938      	ldr	r0, [r7, #16]
 8013126:	f7fd fd3a 	bl	8010b9e <tcp_seg_free>
            while (next &&
 801312a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801312c:	2b00      	cmp	r3, #0
 801312e:	d00e      	beq.n	801314e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013130:	4b91      	ldr	r3, [pc, #580]	; (8013378 <tcp_receive+0xb04>)
 8013132:	881b      	ldrh	r3, [r3, #0]
 8013134:	461a      	mov	r2, r3
 8013136:	4b91      	ldr	r3, [pc, #580]	; (801337c <tcp_receive+0xb08>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	441a      	add	r2, r3
 801313c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801313e:	68db      	ldr	r3, [r3, #12]
 8013140:	685b      	ldr	r3, [r3, #4]
 8013142:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013144:	8909      	ldrh	r1, [r1, #8]
 8013146:	440b      	add	r3, r1
 8013148:	1ad3      	subs	r3, r2, r3
            while (next &&
 801314a:	2b00      	cmp	r3, #0
 801314c:	da9a      	bge.n	8013084 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801314e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013150:	2b00      	cmp	r3, #0
 8013152:	d059      	beq.n	8013208 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013154:	4b88      	ldr	r3, [pc, #544]	; (8013378 <tcp_receive+0xb04>)
 8013156:	881b      	ldrh	r3, [r3, #0]
 8013158:	461a      	mov	r2, r3
 801315a:	4b88      	ldr	r3, [pc, #544]	; (801337c <tcp_receive+0xb08>)
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	441a      	add	r2, r3
 8013160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013162:	68db      	ldr	r3, [r3, #12]
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013168:	2b00      	cmp	r3, #0
 801316a:	dd4d      	ble.n	8013208 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801316c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801316e:	68db      	ldr	r3, [r3, #12]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	b29a      	uxth	r2, r3
 8013174:	4b81      	ldr	r3, [pc, #516]	; (801337c <tcp_receive+0xb08>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	b29b      	uxth	r3, r3
 801317a:	1ad3      	subs	r3, r2, r3
 801317c:	b29a      	uxth	r2, r3
 801317e:	4b80      	ldr	r3, [pc, #512]	; (8013380 <tcp_receive+0xb0c>)
 8013180:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013182:	4b7f      	ldr	r3, [pc, #508]	; (8013380 <tcp_receive+0xb0c>)
 8013184:	68db      	ldr	r3, [r3, #12]
 8013186:	899b      	ldrh	r3, [r3, #12]
 8013188:	b29b      	uxth	r3, r3
 801318a:	4618      	mov	r0, r3
 801318c:	f7fa fec0 	bl	800df10 <lwip_htons>
 8013190:	4603      	mov	r3, r0
 8013192:	b2db      	uxtb	r3, r3
 8013194:	f003 0302 	and.w	r3, r3, #2
 8013198:	2b00      	cmp	r3, #0
 801319a:	d005      	beq.n	80131a8 <tcp_receive+0x934>
                inseg.len -= 1;
 801319c:	4b78      	ldr	r3, [pc, #480]	; (8013380 <tcp_receive+0xb0c>)
 801319e:	891b      	ldrh	r3, [r3, #8]
 80131a0:	3b01      	subs	r3, #1
 80131a2:	b29a      	uxth	r2, r3
 80131a4:	4b76      	ldr	r3, [pc, #472]	; (8013380 <tcp_receive+0xb0c>)
 80131a6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80131a8:	4b75      	ldr	r3, [pc, #468]	; (8013380 <tcp_receive+0xb0c>)
 80131aa:	685b      	ldr	r3, [r3, #4]
 80131ac:	4a74      	ldr	r2, [pc, #464]	; (8013380 <tcp_receive+0xb0c>)
 80131ae:	8912      	ldrh	r2, [r2, #8]
 80131b0:	4611      	mov	r1, r2
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7fc f8de 	bl	800f374 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80131b8:	4b71      	ldr	r3, [pc, #452]	; (8013380 <tcp_receive+0xb0c>)
 80131ba:	891c      	ldrh	r4, [r3, #8]
 80131bc:	4b70      	ldr	r3, [pc, #448]	; (8013380 <tcp_receive+0xb0c>)
 80131be:	68db      	ldr	r3, [r3, #12]
 80131c0:	899b      	ldrh	r3, [r3, #12]
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7fa fea3 	bl	800df10 <lwip_htons>
 80131ca:	4603      	mov	r3, r0
 80131cc:	b2db      	uxtb	r3, r3
 80131ce:	f003 0303 	and.w	r3, r3, #3
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d001      	beq.n	80131da <tcp_receive+0x966>
 80131d6:	2301      	movs	r3, #1
 80131d8:	e000      	b.n	80131dc <tcp_receive+0x968>
 80131da:	2300      	movs	r3, #0
 80131dc:	4423      	add	r3, r4
 80131de:	b29a      	uxth	r2, r3
 80131e0:	4b65      	ldr	r3, [pc, #404]	; (8013378 <tcp_receive+0xb04>)
 80131e2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80131e4:	4b64      	ldr	r3, [pc, #400]	; (8013378 <tcp_receive+0xb04>)
 80131e6:	881b      	ldrh	r3, [r3, #0]
 80131e8:	461a      	mov	r2, r3
 80131ea:	4b64      	ldr	r3, [pc, #400]	; (801337c <tcp_receive+0xb08>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	441a      	add	r2, r3
 80131f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131f2:	68db      	ldr	r3, [r3, #12]
 80131f4:	685b      	ldr	r3, [r3, #4]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d006      	beq.n	8013208 <tcp_receive+0x994>
 80131fa:	4b62      	ldr	r3, [pc, #392]	; (8013384 <tcp_receive+0xb10>)
 80131fc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013200:	4961      	ldr	r1, [pc, #388]	; (8013388 <tcp_receive+0xb14>)
 8013202:	4862      	ldr	r0, [pc, #392]	; (801338c <tcp_receive+0xb18>)
 8013204:	f007 fc30 	bl	801aa68 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801320c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801320e:	4b5a      	ldr	r3, [pc, #360]	; (8013378 <tcp_receive+0xb04>)
 8013210:	881b      	ldrh	r3, [r3, #0]
 8013212:	461a      	mov	r2, r3
 8013214:	4b59      	ldr	r3, [pc, #356]	; (801337c <tcp_receive+0xb08>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	441a      	add	r2, r3
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013222:	4b55      	ldr	r3, [pc, #340]	; (8013378 <tcp_receive+0xb04>)
 8013224:	881b      	ldrh	r3, [r3, #0]
 8013226:	429a      	cmp	r2, r3
 8013228:	d206      	bcs.n	8013238 <tcp_receive+0x9c4>
 801322a:	4b56      	ldr	r3, [pc, #344]	; (8013384 <tcp_receive+0xb10>)
 801322c:	f240 6207 	movw	r2, #1543	; 0x607
 8013230:	4957      	ldr	r1, [pc, #348]	; (8013390 <tcp_receive+0xb1c>)
 8013232:	4856      	ldr	r0, [pc, #344]	; (801338c <tcp_receive+0xb18>)
 8013234:	f007 fc18 	bl	801aa68 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801323c:	4b4e      	ldr	r3, [pc, #312]	; (8013378 <tcp_receive+0xb04>)
 801323e:	881b      	ldrh	r3, [r3, #0]
 8013240:	1ad3      	subs	r3, r2, r3
 8013242:	b29a      	uxth	r2, r3
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f7fc ffc9 	bl	80101e0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801324e:	4b4c      	ldr	r3, [pc, #304]	; (8013380 <tcp_receive+0xb0c>)
 8013250:	685b      	ldr	r3, [r3, #4]
 8013252:	891b      	ldrh	r3, [r3, #8]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d006      	beq.n	8013266 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8013258:	4b49      	ldr	r3, [pc, #292]	; (8013380 <tcp_receive+0xb0c>)
 801325a:	685b      	ldr	r3, [r3, #4]
 801325c:	4a4d      	ldr	r2, [pc, #308]	; (8013394 <tcp_receive+0xb20>)
 801325e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013260:	4b47      	ldr	r3, [pc, #284]	; (8013380 <tcp_receive+0xb0c>)
 8013262:	2200      	movs	r2, #0
 8013264:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013266:	4b46      	ldr	r3, [pc, #280]	; (8013380 <tcp_receive+0xb0c>)
 8013268:	68db      	ldr	r3, [r3, #12]
 801326a:	899b      	ldrh	r3, [r3, #12]
 801326c:	b29b      	uxth	r3, r3
 801326e:	4618      	mov	r0, r3
 8013270:	f7fa fe4e 	bl	800df10 <lwip_htons>
 8013274:	4603      	mov	r3, r0
 8013276:	b2db      	uxtb	r3, r3
 8013278:	f003 0301 	and.w	r3, r3, #1
 801327c:	2b00      	cmp	r3, #0
 801327e:	f000 80b8 	beq.w	80133f2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013282:	4b45      	ldr	r3, [pc, #276]	; (8013398 <tcp_receive+0xb24>)
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	f043 0320 	orr.w	r3, r3, #32
 801328a:	b2da      	uxtb	r2, r3
 801328c:	4b42      	ldr	r3, [pc, #264]	; (8013398 <tcp_receive+0xb24>)
 801328e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013290:	e0af      	b.n	80133f2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013296:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801329c:	68db      	ldr	r3, [r3, #12]
 801329e:	685b      	ldr	r3, [r3, #4]
 80132a0:	4a36      	ldr	r2, [pc, #216]	; (801337c <tcp_receive+0xb08>)
 80132a2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	891b      	ldrh	r3, [r3, #8]
 80132a8:	461c      	mov	r4, r3
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	68db      	ldr	r3, [r3, #12]
 80132ae:	899b      	ldrh	r3, [r3, #12]
 80132b0:	b29b      	uxth	r3, r3
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7fa fe2c 	bl	800df10 <lwip_htons>
 80132b8:	4603      	mov	r3, r0
 80132ba:	b2db      	uxtb	r3, r3
 80132bc:	f003 0303 	and.w	r3, r3, #3
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d001      	beq.n	80132c8 <tcp_receive+0xa54>
 80132c4:	2301      	movs	r3, #1
 80132c6:	e000      	b.n	80132ca <tcp_receive+0xa56>
 80132c8:	2300      	movs	r3, #0
 80132ca:	191a      	adds	r2, r3, r4
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132d0:	441a      	add	r2, r3
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132da:	461c      	mov	r4, r3
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	891b      	ldrh	r3, [r3, #8]
 80132e0:	461d      	mov	r5, r3
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	68db      	ldr	r3, [r3, #12]
 80132e6:	899b      	ldrh	r3, [r3, #12]
 80132e8:	b29b      	uxth	r3, r3
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7fa fe10 	bl	800df10 <lwip_htons>
 80132f0:	4603      	mov	r3, r0
 80132f2:	b2db      	uxtb	r3, r3
 80132f4:	f003 0303 	and.w	r3, r3, #3
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d001      	beq.n	8013300 <tcp_receive+0xa8c>
 80132fc:	2301      	movs	r3, #1
 80132fe:	e000      	b.n	8013302 <tcp_receive+0xa8e>
 8013300:	2300      	movs	r3, #0
 8013302:	442b      	add	r3, r5
 8013304:	429c      	cmp	r4, r3
 8013306:	d206      	bcs.n	8013316 <tcp_receive+0xaa2>
 8013308:	4b1e      	ldr	r3, [pc, #120]	; (8013384 <tcp_receive+0xb10>)
 801330a:	f240 622b 	movw	r2, #1579	; 0x62b
 801330e:	4923      	ldr	r1, [pc, #140]	; (801339c <tcp_receive+0xb28>)
 8013310:	481e      	ldr	r0, [pc, #120]	; (801338c <tcp_receive+0xb18>)
 8013312:	f007 fba9 	bl	801aa68 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	891b      	ldrh	r3, [r3, #8]
 801331a:	461c      	mov	r4, r3
 801331c:	68bb      	ldr	r3, [r7, #8]
 801331e:	68db      	ldr	r3, [r3, #12]
 8013320:	899b      	ldrh	r3, [r3, #12]
 8013322:	b29b      	uxth	r3, r3
 8013324:	4618      	mov	r0, r3
 8013326:	f7fa fdf3 	bl	800df10 <lwip_htons>
 801332a:	4603      	mov	r3, r0
 801332c:	b2db      	uxtb	r3, r3
 801332e:	f003 0303 	and.w	r3, r3, #3
 8013332:	2b00      	cmp	r3, #0
 8013334:	d001      	beq.n	801333a <tcp_receive+0xac6>
 8013336:	2301      	movs	r3, #1
 8013338:	e000      	b.n	801333c <tcp_receive+0xac8>
 801333a:	2300      	movs	r3, #0
 801333c:	1919      	adds	r1, r3, r4
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013342:	b28b      	uxth	r3, r1
 8013344:	1ad3      	subs	r3, r2, r3
 8013346:	b29a      	uxth	r2, r3
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f7fc ff47 	bl	80101e0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	685b      	ldr	r3, [r3, #4]
 8013356:	891b      	ldrh	r3, [r3, #8]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d028      	beq.n	80133ae <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801335c:	4b0d      	ldr	r3, [pc, #52]	; (8013394 <tcp_receive+0xb20>)
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d01d      	beq.n	80133a0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013364:	4b0b      	ldr	r3, [pc, #44]	; (8013394 <tcp_receive+0xb20>)
 8013366:	681a      	ldr	r2, [r3, #0]
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	685b      	ldr	r3, [r3, #4]
 801336c:	4619      	mov	r1, r3
 801336e:	4610      	mov	r0, r2
 8013370:	f7fc fa54 	bl	800f81c <pbuf_cat>
 8013374:	e018      	b.n	80133a8 <tcp_receive+0xb34>
 8013376:	bf00      	nop
 8013378:	20008562 	.word	0x20008562
 801337c:	20008558 	.word	0x20008558
 8013380:	20008538 	.word	0x20008538
 8013384:	0801d434 	.word	0x0801d434
 8013388:	0801d814 	.word	0x0801d814
 801338c:	0801d480 	.word	0x0801d480
 8013390:	0801d850 	.word	0x0801d850
 8013394:	20008568 	.word	0x20008568
 8013398:	20008565 	.word	0x20008565
 801339c:	0801d870 	.word	0x0801d870
            } else {
              recv_data = cseg->p;
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	685b      	ldr	r3, [r3, #4]
 80133a4:	4a70      	ldr	r2, [pc, #448]	; (8013568 <tcp_receive+0xcf4>)
 80133a6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	2200      	movs	r2, #0
 80133ac:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	68db      	ldr	r3, [r3, #12]
 80133b2:	899b      	ldrh	r3, [r3, #12]
 80133b4:	b29b      	uxth	r3, r3
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7fa fdaa 	bl	800df10 <lwip_htons>
 80133bc:	4603      	mov	r3, r0
 80133be:	b2db      	uxtb	r3, r3
 80133c0:	f003 0301 	and.w	r3, r3, #1
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d00d      	beq.n	80133e4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80133c8:	4b68      	ldr	r3, [pc, #416]	; (801356c <tcp_receive+0xcf8>)
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	f043 0320 	orr.w	r3, r3, #32
 80133d0:	b2da      	uxtb	r2, r3
 80133d2:	4b66      	ldr	r3, [pc, #408]	; (801356c <tcp_receive+0xcf8>)
 80133d4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	7d1b      	ldrb	r3, [r3, #20]
 80133da:	2b04      	cmp	r3, #4
 80133dc:	d102      	bne.n	80133e4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	2207      	movs	r2, #7
 80133e2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80133e4:	68bb      	ldr	r3, [r7, #8]
 80133e6:	681a      	ldr	r2, [r3, #0]
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80133ec:	68b8      	ldr	r0, [r7, #8]
 80133ee:	f7fd fbd6 	bl	8010b9e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d008      	beq.n	801340c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133fe:	68db      	ldr	r3, [r3, #12]
 8013400:	685a      	ldr	r2, [r3, #4]
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013406:	429a      	cmp	r2, r3
 8013408:	f43f af43 	beq.w	8013292 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	8b5b      	ldrh	r3, [r3, #26]
 8013410:	f003 0301 	and.w	r3, r3, #1
 8013414:	2b00      	cmp	r3, #0
 8013416:	d00e      	beq.n	8013436 <tcp_receive+0xbc2>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	8b5b      	ldrh	r3, [r3, #26]
 801341c:	f023 0301 	bic.w	r3, r3, #1
 8013420:	b29a      	uxth	r2, r3
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	835a      	strh	r2, [r3, #26]
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	8b5b      	ldrh	r3, [r3, #26]
 801342a:	f043 0302 	orr.w	r3, r3, #2
 801342e:	b29a      	uxth	r2, r3
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013434:	e188      	b.n	8013748 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	8b5b      	ldrh	r3, [r3, #26]
 801343a:	f043 0301 	orr.w	r3, r3, #1
 801343e:	b29a      	uxth	r2, r3
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013444:	e180      	b.n	8013748 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801344a:	2b00      	cmp	r3, #0
 801344c:	d106      	bne.n	801345c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801344e:	4848      	ldr	r0, [pc, #288]	; (8013570 <tcp_receive+0xcfc>)
 8013450:	f7fd fbbe 	bl	8010bd0 <tcp_seg_copy>
 8013454:	4602      	mov	r2, r0
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	675a      	str	r2, [r3, #116]	; 0x74
 801345a:	e16d      	b.n	8013738 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801345c:	2300      	movs	r3, #0
 801345e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013464:	63bb      	str	r3, [r7, #56]	; 0x38
 8013466:	e157      	b.n	8013718 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8013468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801346a:	68db      	ldr	r3, [r3, #12]
 801346c:	685a      	ldr	r2, [r3, #4]
 801346e:	4b41      	ldr	r3, [pc, #260]	; (8013574 <tcp_receive+0xd00>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	429a      	cmp	r2, r3
 8013474:	d11d      	bne.n	80134b2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013476:	4b3e      	ldr	r3, [pc, #248]	; (8013570 <tcp_receive+0xcfc>)
 8013478:	891a      	ldrh	r2, [r3, #8]
 801347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801347c:	891b      	ldrh	r3, [r3, #8]
 801347e:	429a      	cmp	r2, r3
 8013480:	f240 814f 	bls.w	8013722 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013484:	483a      	ldr	r0, [pc, #232]	; (8013570 <tcp_receive+0xcfc>)
 8013486:	f7fd fba3 	bl	8010bd0 <tcp_seg_copy>
 801348a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801348c:	697b      	ldr	r3, [r7, #20]
 801348e:	2b00      	cmp	r3, #0
 8013490:	f000 8149 	beq.w	8013726 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8013494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013496:	2b00      	cmp	r3, #0
 8013498:	d003      	beq.n	80134a2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801349a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801349c:	697a      	ldr	r2, [r7, #20]
 801349e:	601a      	str	r2, [r3, #0]
 80134a0:	e002      	b.n	80134a8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	697a      	ldr	r2, [r7, #20]
 80134a6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80134a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80134aa:	6978      	ldr	r0, [r7, #20]
 80134ac:	f7ff f8de 	bl	801266c <tcp_oos_insert_segment>
                }
                break;
 80134b0:	e139      	b.n	8013726 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80134b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d117      	bne.n	80134e8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80134b8:	4b2e      	ldr	r3, [pc, #184]	; (8013574 <tcp_receive+0xd00>)
 80134ba:	681a      	ldr	r2, [r3, #0]
 80134bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134be:	68db      	ldr	r3, [r3, #12]
 80134c0:	685b      	ldr	r3, [r3, #4]
 80134c2:	1ad3      	subs	r3, r2, r3
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	da57      	bge.n	8013578 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80134c8:	4829      	ldr	r0, [pc, #164]	; (8013570 <tcp_receive+0xcfc>)
 80134ca:	f7fd fb81 	bl	8010bd0 <tcp_seg_copy>
 80134ce:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80134d0:	69bb      	ldr	r3, [r7, #24]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	f000 8129 	beq.w	801372a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	69ba      	ldr	r2, [r7, #24]
 80134dc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80134de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80134e0:	69b8      	ldr	r0, [r7, #24]
 80134e2:	f7ff f8c3 	bl	801266c <tcp_oos_insert_segment>
                  }
                  break;
 80134e6:	e120      	b.n	801372a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80134e8:	4b22      	ldr	r3, [pc, #136]	; (8013574 <tcp_receive+0xd00>)
 80134ea:	681a      	ldr	r2, [r3, #0]
 80134ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134ee:	68db      	ldr	r3, [r3, #12]
 80134f0:	685b      	ldr	r3, [r3, #4]
 80134f2:	1ad3      	subs	r3, r2, r3
 80134f4:	3b01      	subs	r3, #1
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	db3e      	blt.n	8013578 <tcp_receive+0xd04>
 80134fa:	4b1e      	ldr	r3, [pc, #120]	; (8013574 <tcp_receive+0xd00>)
 80134fc:	681a      	ldr	r2, [r3, #0]
 80134fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013500:	68db      	ldr	r3, [r3, #12]
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	1ad3      	subs	r3, r2, r3
 8013506:	3301      	adds	r3, #1
 8013508:	2b00      	cmp	r3, #0
 801350a:	dc35      	bgt.n	8013578 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801350c:	4818      	ldr	r0, [pc, #96]	; (8013570 <tcp_receive+0xcfc>)
 801350e:	f7fd fb5f 	bl	8010bd0 <tcp_seg_copy>
 8013512:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013514:	69fb      	ldr	r3, [r7, #28]
 8013516:	2b00      	cmp	r3, #0
 8013518:	f000 8109 	beq.w	801372e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801351c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801351e:	68db      	ldr	r3, [r3, #12]
 8013520:	685b      	ldr	r3, [r3, #4]
 8013522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013524:	8912      	ldrh	r2, [r2, #8]
 8013526:	441a      	add	r2, r3
 8013528:	4b12      	ldr	r3, [pc, #72]	; (8013574 <tcp_receive+0xd00>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	1ad3      	subs	r3, r2, r3
 801352e:	2b00      	cmp	r3, #0
 8013530:	dd12      	ble.n	8013558 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013532:	4b10      	ldr	r3, [pc, #64]	; (8013574 <tcp_receive+0xd00>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	b29a      	uxth	r2, r3
 8013538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801353a:	68db      	ldr	r3, [r3, #12]
 801353c:	685b      	ldr	r3, [r3, #4]
 801353e:	b29b      	uxth	r3, r3
 8013540:	1ad3      	subs	r3, r2, r3
 8013542:	b29a      	uxth	r2, r3
 8013544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013546:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801354a:	685a      	ldr	r2, [r3, #4]
 801354c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801354e:	891b      	ldrh	r3, [r3, #8]
 8013550:	4619      	mov	r1, r3
 8013552:	4610      	mov	r0, r2
 8013554:	f7fb ff0e 	bl	800f374 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801355a:	69fa      	ldr	r2, [r7, #28]
 801355c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801355e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013560:	69f8      	ldr	r0, [r7, #28]
 8013562:	f7ff f883 	bl	801266c <tcp_oos_insert_segment>
                  }
                  break;
 8013566:	e0e2      	b.n	801372e <tcp_receive+0xeba>
 8013568:	20008568 	.word	0x20008568
 801356c:	20008565 	.word	0x20008565
 8013570:	20008538 	.word	0x20008538
 8013574:	20008558 	.word	0x20008558
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801357a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801357c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	2b00      	cmp	r3, #0
 8013582:	f040 80c6 	bne.w	8013712 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013586:	4b80      	ldr	r3, [pc, #512]	; (8013788 <tcp_receive+0xf14>)
 8013588:	681a      	ldr	r2, [r3, #0]
 801358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801358c:	68db      	ldr	r3, [r3, #12]
 801358e:	685b      	ldr	r3, [r3, #4]
 8013590:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013592:	2b00      	cmp	r3, #0
 8013594:	f340 80bd 	ble.w	8013712 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801359a:	68db      	ldr	r3, [r3, #12]
 801359c:	899b      	ldrh	r3, [r3, #12]
 801359e:	b29b      	uxth	r3, r3
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7fa fcb5 	bl	800df10 <lwip_htons>
 80135a6:	4603      	mov	r3, r0
 80135a8:	b2db      	uxtb	r3, r3
 80135aa:	f003 0301 	and.w	r3, r3, #1
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	f040 80bf 	bne.w	8013732 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80135b4:	4875      	ldr	r0, [pc, #468]	; (801378c <tcp_receive+0xf18>)
 80135b6:	f7fd fb0b 	bl	8010bd0 <tcp_seg_copy>
 80135ba:	4602      	mov	r2, r0
 80135bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135be:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80135c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	f000 80b6 	beq.w	8013736 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80135ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135cc:	68db      	ldr	r3, [r3, #12]
 80135ce:	685b      	ldr	r3, [r3, #4]
 80135d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80135d2:	8912      	ldrh	r2, [r2, #8]
 80135d4:	441a      	add	r2, r3
 80135d6:	4b6c      	ldr	r3, [pc, #432]	; (8013788 <tcp_receive+0xf14>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	1ad3      	subs	r3, r2, r3
 80135dc:	2b00      	cmp	r3, #0
 80135de:	dd12      	ble.n	8013606 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80135e0:	4b69      	ldr	r3, [pc, #420]	; (8013788 <tcp_receive+0xf14>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	b29a      	uxth	r2, r3
 80135e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e8:	68db      	ldr	r3, [r3, #12]
 80135ea:	685b      	ldr	r3, [r3, #4]
 80135ec:	b29b      	uxth	r3, r3
 80135ee:	1ad3      	subs	r3, r2, r3
 80135f0:	b29a      	uxth	r2, r3
 80135f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135f4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80135f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135f8:	685a      	ldr	r2, [r3, #4]
 80135fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135fc:	891b      	ldrh	r3, [r3, #8]
 80135fe:	4619      	mov	r1, r3
 8013600:	4610      	mov	r0, r2
 8013602:	f7fb feb7 	bl	800f374 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013606:	4b62      	ldr	r3, [pc, #392]	; (8013790 <tcp_receive+0xf1c>)
 8013608:	881b      	ldrh	r3, [r3, #0]
 801360a:	461a      	mov	r2, r3
 801360c:	4b5e      	ldr	r3, [pc, #376]	; (8013788 <tcp_receive+0xf14>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	441a      	add	r2, r3
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013616:	6879      	ldr	r1, [r7, #4]
 8013618:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801361a:	440b      	add	r3, r1
 801361c:	1ad3      	subs	r3, r2, r3
 801361e:	2b00      	cmp	r3, #0
 8013620:	f340 8089 	ble.w	8013736 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	68db      	ldr	r3, [r3, #12]
 801362a:	899b      	ldrh	r3, [r3, #12]
 801362c:	b29b      	uxth	r3, r3
 801362e:	4618      	mov	r0, r3
 8013630:	f7fa fc6e 	bl	800df10 <lwip_htons>
 8013634:	4603      	mov	r3, r0
 8013636:	b2db      	uxtb	r3, r3
 8013638:	f003 0301 	and.w	r3, r3, #1
 801363c:	2b00      	cmp	r3, #0
 801363e:	d022      	beq.n	8013686 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	68db      	ldr	r3, [r3, #12]
 8013646:	899b      	ldrh	r3, [r3, #12]
 8013648:	b29b      	uxth	r3, r3
 801364a:	b21b      	sxth	r3, r3
 801364c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013650:	b21c      	sxth	r4, r3
 8013652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	68db      	ldr	r3, [r3, #12]
 8013658:	899b      	ldrh	r3, [r3, #12]
 801365a:	b29b      	uxth	r3, r3
 801365c:	4618      	mov	r0, r3
 801365e:	f7fa fc57 	bl	800df10 <lwip_htons>
 8013662:	4603      	mov	r3, r0
 8013664:	b2db      	uxtb	r3, r3
 8013666:	b29b      	uxth	r3, r3
 8013668:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801366c:	b29b      	uxth	r3, r3
 801366e:	4618      	mov	r0, r3
 8013670:	f7fa fc4e 	bl	800df10 <lwip_htons>
 8013674:	4603      	mov	r3, r0
 8013676:	b21b      	sxth	r3, r3
 8013678:	4323      	orrs	r3, r4
 801367a:	b21a      	sxth	r2, r3
 801367c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	68db      	ldr	r3, [r3, #12]
 8013682:	b292      	uxth	r2, r2
 8013684:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801368a:	b29a      	uxth	r2, r3
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013690:	4413      	add	r3, r2
 8013692:	b299      	uxth	r1, r3
 8013694:	4b3c      	ldr	r3, [pc, #240]	; (8013788 <tcp_receive+0xf14>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	b29a      	uxth	r2, r3
 801369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	1a8a      	subs	r2, r1, r2
 80136a0:	b292      	uxth	r2, r2
 80136a2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80136a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	685a      	ldr	r2, [r3, #4]
 80136aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	891b      	ldrh	r3, [r3, #8]
 80136b0:	4619      	mov	r1, r3
 80136b2:	4610      	mov	r0, r2
 80136b4:	f7fb fe5e 	bl	800f374 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80136b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	891c      	ldrh	r4, [r3, #8]
 80136be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	68db      	ldr	r3, [r3, #12]
 80136c4:	899b      	ldrh	r3, [r3, #12]
 80136c6:	b29b      	uxth	r3, r3
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7fa fc21 	bl	800df10 <lwip_htons>
 80136ce:	4603      	mov	r3, r0
 80136d0:	b2db      	uxtb	r3, r3
 80136d2:	f003 0303 	and.w	r3, r3, #3
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d001      	beq.n	80136de <tcp_receive+0xe6a>
 80136da:	2301      	movs	r3, #1
 80136dc:	e000      	b.n	80136e0 <tcp_receive+0xe6c>
 80136de:	2300      	movs	r3, #0
 80136e0:	4423      	add	r3, r4
 80136e2:	b29a      	uxth	r2, r3
 80136e4:	4b2a      	ldr	r3, [pc, #168]	; (8013790 <tcp_receive+0xf1c>)
 80136e6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80136e8:	4b29      	ldr	r3, [pc, #164]	; (8013790 <tcp_receive+0xf1c>)
 80136ea:	881b      	ldrh	r3, [r3, #0]
 80136ec:	461a      	mov	r2, r3
 80136ee:	4b26      	ldr	r3, [pc, #152]	; (8013788 <tcp_receive+0xf14>)
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	441a      	add	r2, r3
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136f8:	6879      	ldr	r1, [r7, #4]
 80136fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80136fc:	440b      	add	r3, r1
 80136fe:	429a      	cmp	r2, r3
 8013700:	d019      	beq.n	8013736 <tcp_receive+0xec2>
 8013702:	4b24      	ldr	r3, [pc, #144]	; (8013794 <tcp_receive+0xf20>)
 8013704:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8013708:	4923      	ldr	r1, [pc, #140]	; (8013798 <tcp_receive+0xf24>)
 801370a:	4824      	ldr	r0, [pc, #144]	; (801379c <tcp_receive+0xf28>)
 801370c:	f007 f9ac 	bl	801aa68 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013710:	e011      	b.n	8013736 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	63bb      	str	r3, [r7, #56]	; 0x38
 8013718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801371a:	2b00      	cmp	r3, #0
 801371c:	f47f aea4 	bne.w	8013468 <tcp_receive+0xbf4>
 8013720:	e00a      	b.n	8013738 <tcp_receive+0xec4>
                break;
 8013722:	bf00      	nop
 8013724:	e008      	b.n	8013738 <tcp_receive+0xec4>
                break;
 8013726:	bf00      	nop
 8013728:	e006      	b.n	8013738 <tcp_receive+0xec4>
                  break;
 801372a:	bf00      	nop
 801372c:	e004      	b.n	8013738 <tcp_receive+0xec4>
                  break;
 801372e:	bf00      	nop
 8013730:	e002      	b.n	8013738 <tcp_receive+0xec4>
                  break;
 8013732:	bf00      	nop
 8013734:	e000      	b.n	8013738 <tcp_receive+0xec4>
                break;
 8013736:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013738:	6878      	ldr	r0, [r7, #4]
 801373a:	f001 fa33 	bl	8014ba4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801373e:	e003      	b.n	8013748 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	f001 fa2f 	bl	8014ba4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013746:	e01a      	b.n	801377e <tcp_receive+0xf0a>
 8013748:	e019      	b.n	801377e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801374a:	4b0f      	ldr	r3, [pc, #60]	; (8013788 <tcp_receive+0xf14>)
 801374c:	681a      	ldr	r2, [r3, #0]
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013752:	1ad3      	subs	r3, r2, r3
 8013754:	2b00      	cmp	r3, #0
 8013756:	db0a      	blt.n	801376e <tcp_receive+0xefa>
 8013758:	4b0b      	ldr	r3, [pc, #44]	; (8013788 <tcp_receive+0xf14>)
 801375a:	681a      	ldr	r2, [r3, #0]
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013760:	6879      	ldr	r1, [r7, #4]
 8013762:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013764:	440b      	add	r3, r1
 8013766:	1ad3      	subs	r3, r2, r3
 8013768:	3301      	adds	r3, #1
 801376a:	2b00      	cmp	r3, #0
 801376c:	dd07      	ble.n	801377e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	8b5b      	ldrh	r3, [r3, #26]
 8013772:	f043 0302 	orr.w	r3, r3, #2
 8013776:	b29a      	uxth	r2, r3
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801377c:	e7ff      	b.n	801377e <tcp_receive+0xf0a>
 801377e:	bf00      	nop
 8013780:	3750      	adds	r7, #80	; 0x50
 8013782:	46bd      	mov	sp, r7
 8013784:	bdb0      	pop	{r4, r5, r7, pc}
 8013786:	bf00      	nop
 8013788:	20008558 	.word	0x20008558
 801378c:	20008538 	.word	0x20008538
 8013790:	20008562 	.word	0x20008562
 8013794:	0801d434 	.word	0x0801d434
 8013798:	0801d7dc 	.word	0x0801d7dc
 801379c:	0801d480 	.word	0x0801d480

080137a0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80137a0:	b480      	push	{r7}
 80137a2:	b083      	sub	sp, #12
 80137a4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80137a6:	4b15      	ldr	r3, [pc, #84]	; (80137fc <tcp_get_next_optbyte+0x5c>)
 80137a8:	881b      	ldrh	r3, [r3, #0]
 80137aa:	1c5a      	adds	r2, r3, #1
 80137ac:	b291      	uxth	r1, r2
 80137ae:	4a13      	ldr	r2, [pc, #76]	; (80137fc <tcp_get_next_optbyte+0x5c>)
 80137b0:	8011      	strh	r1, [r2, #0]
 80137b2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80137b4:	4b12      	ldr	r3, [pc, #72]	; (8013800 <tcp_get_next_optbyte+0x60>)
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d004      	beq.n	80137c6 <tcp_get_next_optbyte+0x26>
 80137bc:	4b11      	ldr	r3, [pc, #68]	; (8013804 <tcp_get_next_optbyte+0x64>)
 80137be:	881b      	ldrh	r3, [r3, #0]
 80137c0:	88fa      	ldrh	r2, [r7, #6]
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d208      	bcs.n	80137d8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80137c6:	4b10      	ldr	r3, [pc, #64]	; (8013808 <tcp_get_next_optbyte+0x68>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	3314      	adds	r3, #20
 80137cc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80137ce:	88fb      	ldrh	r3, [r7, #6]
 80137d0:	683a      	ldr	r2, [r7, #0]
 80137d2:	4413      	add	r3, r2
 80137d4:	781b      	ldrb	r3, [r3, #0]
 80137d6:	e00b      	b.n	80137f0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80137d8:	88fb      	ldrh	r3, [r7, #6]
 80137da:	b2da      	uxtb	r2, r3
 80137dc:	4b09      	ldr	r3, [pc, #36]	; (8013804 <tcp_get_next_optbyte+0x64>)
 80137de:	881b      	ldrh	r3, [r3, #0]
 80137e0:	b2db      	uxtb	r3, r3
 80137e2:	1ad3      	subs	r3, r2, r3
 80137e4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80137e6:	4b06      	ldr	r3, [pc, #24]	; (8013800 <tcp_get_next_optbyte+0x60>)
 80137e8:	681a      	ldr	r2, [r3, #0]
 80137ea:	797b      	ldrb	r3, [r7, #5]
 80137ec:	4413      	add	r3, r2
 80137ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80137f0:	4618      	mov	r0, r3
 80137f2:	370c      	adds	r7, #12
 80137f4:	46bd      	mov	sp, r7
 80137f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fa:	4770      	bx	lr
 80137fc:	20008554 	.word	0x20008554
 8013800:	20008550 	.word	0x20008550
 8013804:	2000854e 	.word	0x2000854e
 8013808:	20008548 	.word	0x20008548

0801380c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b084      	sub	sp, #16
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d106      	bne.n	8013828 <tcp_parseopt+0x1c>
 801381a:	4b32      	ldr	r3, [pc, #200]	; (80138e4 <tcp_parseopt+0xd8>)
 801381c:	f240 727d 	movw	r2, #1917	; 0x77d
 8013820:	4931      	ldr	r1, [pc, #196]	; (80138e8 <tcp_parseopt+0xdc>)
 8013822:	4832      	ldr	r0, [pc, #200]	; (80138ec <tcp_parseopt+0xe0>)
 8013824:	f007 f920 	bl	801aa68 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013828:	4b31      	ldr	r3, [pc, #196]	; (80138f0 <tcp_parseopt+0xe4>)
 801382a:	881b      	ldrh	r3, [r3, #0]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d055      	beq.n	80138dc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013830:	4b30      	ldr	r3, [pc, #192]	; (80138f4 <tcp_parseopt+0xe8>)
 8013832:	2200      	movs	r2, #0
 8013834:	801a      	strh	r2, [r3, #0]
 8013836:	e045      	b.n	80138c4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8013838:	f7ff ffb2 	bl	80137a0 <tcp_get_next_optbyte>
 801383c:	4603      	mov	r3, r0
 801383e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013840:	7bfb      	ldrb	r3, [r7, #15]
 8013842:	2b02      	cmp	r3, #2
 8013844:	d006      	beq.n	8013854 <tcp_parseopt+0x48>
 8013846:	2b02      	cmp	r3, #2
 8013848:	dc2b      	bgt.n	80138a2 <tcp_parseopt+0x96>
 801384a:	2b00      	cmp	r3, #0
 801384c:	d041      	beq.n	80138d2 <tcp_parseopt+0xc6>
 801384e:	2b01      	cmp	r3, #1
 8013850:	d127      	bne.n	80138a2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013852:	e037      	b.n	80138c4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013854:	f7ff ffa4 	bl	80137a0 <tcp_get_next_optbyte>
 8013858:	4603      	mov	r3, r0
 801385a:	2b04      	cmp	r3, #4
 801385c:	d13b      	bne.n	80138d6 <tcp_parseopt+0xca>
 801385e:	4b25      	ldr	r3, [pc, #148]	; (80138f4 <tcp_parseopt+0xe8>)
 8013860:	881b      	ldrh	r3, [r3, #0]
 8013862:	3301      	adds	r3, #1
 8013864:	4a22      	ldr	r2, [pc, #136]	; (80138f0 <tcp_parseopt+0xe4>)
 8013866:	8812      	ldrh	r2, [r2, #0]
 8013868:	4293      	cmp	r3, r2
 801386a:	da34      	bge.n	80138d6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801386c:	f7ff ff98 	bl	80137a0 <tcp_get_next_optbyte>
 8013870:	4603      	mov	r3, r0
 8013872:	b29b      	uxth	r3, r3
 8013874:	021b      	lsls	r3, r3, #8
 8013876:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013878:	f7ff ff92 	bl	80137a0 <tcp_get_next_optbyte>
 801387c:	4603      	mov	r3, r0
 801387e:	b29a      	uxth	r2, r3
 8013880:	89bb      	ldrh	r3, [r7, #12]
 8013882:	4313      	orrs	r3, r2
 8013884:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013886:	89bb      	ldrh	r3, [r7, #12]
 8013888:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801388c:	d804      	bhi.n	8013898 <tcp_parseopt+0x8c>
 801388e:	89bb      	ldrh	r3, [r7, #12]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d001      	beq.n	8013898 <tcp_parseopt+0x8c>
 8013894:	89ba      	ldrh	r2, [r7, #12]
 8013896:	e001      	b.n	801389c <tcp_parseopt+0x90>
 8013898:	f44f 7206 	mov.w	r2, #536	; 0x218
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80138a0:	e010      	b.n	80138c4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80138a2:	f7ff ff7d 	bl	80137a0 <tcp_get_next_optbyte>
 80138a6:	4603      	mov	r3, r0
 80138a8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80138aa:	7afb      	ldrb	r3, [r7, #11]
 80138ac:	2b01      	cmp	r3, #1
 80138ae:	d914      	bls.n	80138da <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80138b0:	7afb      	ldrb	r3, [r7, #11]
 80138b2:	b29a      	uxth	r2, r3
 80138b4:	4b0f      	ldr	r3, [pc, #60]	; (80138f4 <tcp_parseopt+0xe8>)
 80138b6:	881b      	ldrh	r3, [r3, #0]
 80138b8:	4413      	add	r3, r2
 80138ba:	b29b      	uxth	r3, r3
 80138bc:	3b02      	subs	r3, #2
 80138be:	b29a      	uxth	r2, r3
 80138c0:	4b0c      	ldr	r3, [pc, #48]	; (80138f4 <tcp_parseopt+0xe8>)
 80138c2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80138c4:	4b0b      	ldr	r3, [pc, #44]	; (80138f4 <tcp_parseopt+0xe8>)
 80138c6:	881a      	ldrh	r2, [r3, #0]
 80138c8:	4b09      	ldr	r3, [pc, #36]	; (80138f0 <tcp_parseopt+0xe4>)
 80138ca:	881b      	ldrh	r3, [r3, #0]
 80138cc:	429a      	cmp	r2, r3
 80138ce:	d3b3      	bcc.n	8013838 <tcp_parseopt+0x2c>
 80138d0:	e004      	b.n	80138dc <tcp_parseopt+0xd0>
          return;
 80138d2:	bf00      	nop
 80138d4:	e002      	b.n	80138dc <tcp_parseopt+0xd0>
            return;
 80138d6:	bf00      	nop
 80138d8:	e000      	b.n	80138dc <tcp_parseopt+0xd0>
            return;
 80138da:	bf00      	nop
      }
    }
  }
}
 80138dc:	3710      	adds	r7, #16
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	0801d434 	.word	0x0801d434
 80138e8:	0801d898 	.word	0x0801d898
 80138ec:	0801d480 	.word	0x0801d480
 80138f0:	2000854c 	.word	0x2000854c
 80138f4:	20008554 	.word	0x20008554

080138f8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80138f8:	b480      	push	{r7}
 80138fa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80138fc:	4b05      	ldr	r3, [pc, #20]	; (8013914 <tcp_trigger_input_pcb_close+0x1c>)
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	f043 0310 	orr.w	r3, r3, #16
 8013904:	b2da      	uxtb	r2, r3
 8013906:	4b03      	ldr	r3, [pc, #12]	; (8013914 <tcp_trigger_input_pcb_close+0x1c>)
 8013908:	701a      	strb	r2, [r3, #0]
}
 801390a:	bf00      	nop
 801390c:	46bd      	mov	sp, r7
 801390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013912:	4770      	bx	lr
 8013914:	20008565 	.word	0x20008565

08013918 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b084      	sub	sp, #16
 801391c:	af00      	add	r7, sp, #0
 801391e:	60f8      	str	r0, [r7, #12]
 8013920:	60b9      	str	r1, [r7, #8]
 8013922:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d00a      	beq.n	8013940 <tcp_route+0x28>
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	7a1b      	ldrb	r3, [r3, #8]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d006      	beq.n	8013940 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	7a1b      	ldrb	r3, [r3, #8]
 8013936:	4618      	mov	r0, r3
 8013938:	f7fb fb14 	bl	800ef64 <netif_get_by_index>
 801393c:	4603      	mov	r3, r0
 801393e:	e003      	b.n	8013948 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f005 f845 	bl	80189d0 <ip4_route>
 8013946:	4603      	mov	r3, r0
  }
}
 8013948:	4618      	mov	r0, r3
 801394a:	3710      	adds	r7, #16
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}

08013950 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013950:	b590      	push	{r4, r7, lr}
 8013952:	b087      	sub	sp, #28
 8013954:	af00      	add	r7, sp, #0
 8013956:	60f8      	str	r0, [r7, #12]
 8013958:	60b9      	str	r1, [r7, #8]
 801395a:	603b      	str	r3, [r7, #0]
 801395c:	4613      	mov	r3, r2
 801395e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d105      	bne.n	8013972 <tcp_create_segment+0x22>
 8013966:	4b44      	ldr	r3, [pc, #272]	; (8013a78 <tcp_create_segment+0x128>)
 8013968:	22a3      	movs	r2, #163	; 0xa3
 801396a:	4944      	ldr	r1, [pc, #272]	; (8013a7c <tcp_create_segment+0x12c>)
 801396c:	4844      	ldr	r0, [pc, #272]	; (8013a80 <tcp_create_segment+0x130>)
 801396e:	f007 f87b 	bl	801aa68 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013972:	68bb      	ldr	r3, [r7, #8]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d105      	bne.n	8013984 <tcp_create_segment+0x34>
 8013978:	4b3f      	ldr	r3, [pc, #252]	; (8013a78 <tcp_create_segment+0x128>)
 801397a:	22a4      	movs	r2, #164	; 0xa4
 801397c:	4941      	ldr	r1, [pc, #260]	; (8013a84 <tcp_create_segment+0x134>)
 801397e:	4840      	ldr	r0, [pc, #256]	; (8013a80 <tcp_create_segment+0x130>)
 8013980:	f007 f872 	bl	801aa68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013984:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013988:	009b      	lsls	r3, r3, #2
 801398a:	b2db      	uxtb	r3, r3
 801398c:	f003 0304 	and.w	r3, r3, #4
 8013990:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013992:	2003      	movs	r0, #3
 8013994:	f7fa ff72 	bl	800e87c <memp_malloc>
 8013998:	6138      	str	r0, [r7, #16]
 801399a:	693b      	ldr	r3, [r7, #16]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d104      	bne.n	80139aa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80139a0:	68b8      	ldr	r0, [r7, #8]
 80139a2:	f7fb fe6d 	bl	800f680 <pbuf_free>
    return NULL;
 80139a6:	2300      	movs	r3, #0
 80139a8:	e061      	b.n	8013a6e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80139aa:	693b      	ldr	r3, [r7, #16]
 80139ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80139b0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80139b2:	693b      	ldr	r3, [r7, #16]
 80139b4:	2200      	movs	r2, #0
 80139b6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80139b8:	693b      	ldr	r3, [r7, #16]
 80139ba:	68ba      	ldr	r2, [r7, #8]
 80139bc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80139be:	68bb      	ldr	r3, [r7, #8]
 80139c0:	891a      	ldrh	r2, [r3, #8]
 80139c2:	7dfb      	ldrb	r3, [r7, #23]
 80139c4:	b29b      	uxth	r3, r3
 80139c6:	429a      	cmp	r2, r3
 80139c8:	d205      	bcs.n	80139d6 <tcp_create_segment+0x86>
 80139ca:	4b2b      	ldr	r3, [pc, #172]	; (8013a78 <tcp_create_segment+0x128>)
 80139cc:	22b0      	movs	r2, #176	; 0xb0
 80139ce:	492e      	ldr	r1, [pc, #184]	; (8013a88 <tcp_create_segment+0x138>)
 80139d0:	482b      	ldr	r0, [pc, #172]	; (8013a80 <tcp_create_segment+0x130>)
 80139d2:	f007 f849 	bl	801aa68 <iprintf>
  seg->len = p->tot_len - optlen;
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	891a      	ldrh	r2, [r3, #8]
 80139da:	7dfb      	ldrb	r3, [r7, #23]
 80139dc:	b29b      	uxth	r3, r3
 80139de:	1ad3      	subs	r3, r2, r3
 80139e0:	b29a      	uxth	r2, r3
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80139e6:	2114      	movs	r1, #20
 80139e8:	68b8      	ldr	r0, [r7, #8]
 80139ea:	f7fb fdb3 	bl	800f554 <pbuf_add_header>
 80139ee:	4603      	mov	r3, r0
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d004      	beq.n	80139fe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80139f4:	6938      	ldr	r0, [r7, #16]
 80139f6:	f7fd f8d2 	bl	8010b9e <tcp_seg_free>
    return NULL;
 80139fa:	2300      	movs	r3, #0
 80139fc:	e037      	b.n	8013a6e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80139fe:	693b      	ldr	r3, [r7, #16]
 8013a00:	685b      	ldr	r3, [r3, #4]
 8013a02:	685a      	ldr	r2, [r3, #4]
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	8ada      	ldrh	r2, [r3, #22]
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	68dc      	ldr	r4, [r3, #12]
 8013a10:	4610      	mov	r0, r2
 8013a12:	f7fa fa7d 	bl	800df10 <lwip_htons>
 8013a16:	4603      	mov	r3, r0
 8013a18:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	8b1a      	ldrh	r2, [r3, #24]
 8013a1e:	693b      	ldr	r3, [r7, #16]
 8013a20:	68dc      	ldr	r4, [r3, #12]
 8013a22:	4610      	mov	r0, r2
 8013a24:	f7fa fa74 	bl	800df10 <lwip_htons>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013a2c:	693b      	ldr	r3, [r7, #16]
 8013a2e:	68dc      	ldr	r4, [r3, #12]
 8013a30:	6838      	ldr	r0, [r7, #0]
 8013a32:	f7fa fa82 	bl	800df3a <lwip_htonl>
 8013a36:	4603      	mov	r3, r0
 8013a38:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013a3a:	7dfb      	ldrb	r3, [r7, #23]
 8013a3c:	089b      	lsrs	r3, r3, #2
 8013a3e:	b2db      	uxtb	r3, r3
 8013a40:	b29b      	uxth	r3, r3
 8013a42:	3305      	adds	r3, #5
 8013a44:	b29b      	uxth	r3, r3
 8013a46:	031b      	lsls	r3, r3, #12
 8013a48:	b29a      	uxth	r2, r3
 8013a4a:	79fb      	ldrb	r3, [r7, #7]
 8013a4c:	b29b      	uxth	r3, r3
 8013a4e:	4313      	orrs	r3, r2
 8013a50:	b29a      	uxth	r2, r3
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	68dc      	ldr	r4, [r3, #12]
 8013a56:	4610      	mov	r0, r2
 8013a58:	f7fa fa5a 	bl	800df10 <lwip_htons>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013a60:	693b      	ldr	r3, [r7, #16]
 8013a62:	68db      	ldr	r3, [r3, #12]
 8013a64:	2200      	movs	r2, #0
 8013a66:	749a      	strb	r2, [r3, #18]
 8013a68:	2200      	movs	r2, #0
 8013a6a:	74da      	strb	r2, [r3, #19]
  return seg;
 8013a6c:	693b      	ldr	r3, [r7, #16]
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	371c      	adds	r7, #28
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd90      	pop	{r4, r7, pc}
 8013a76:	bf00      	nop
 8013a78:	0801d8b4 	.word	0x0801d8b4
 8013a7c:	0801d8e8 	.word	0x0801d8e8
 8013a80:	0801d908 	.word	0x0801d908
 8013a84:	0801d930 	.word	0x0801d930
 8013a88:	0801d954 	.word	0x0801d954

08013a8c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013a8c:	b590      	push	{r4, r7, lr}
 8013a8e:	b08b      	sub	sp, #44	; 0x2c
 8013a90:	af02      	add	r7, sp, #8
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	460b      	mov	r3, r1
 8013a96:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013a98:	2300      	movs	r3, #0
 8013a9a:	61fb      	str	r3, [r7, #28]
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d106      	bne.n	8013ab8 <tcp_split_unsent_seg+0x2c>
 8013aaa:	4b95      	ldr	r3, [pc, #596]	; (8013d00 <tcp_split_unsent_seg+0x274>)
 8013aac:	f240 324b 	movw	r2, #843	; 0x34b
 8013ab0:	4994      	ldr	r1, [pc, #592]	; (8013d04 <tcp_split_unsent_seg+0x278>)
 8013ab2:	4895      	ldr	r0, [pc, #596]	; (8013d08 <tcp_split_unsent_seg+0x27c>)
 8013ab4:	f006 ffd8 	bl	801aa68 <iprintf>

  useg = pcb->unsent;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013abc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d102      	bne.n	8013aca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ac8:	e116      	b.n	8013cf8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013aca:	887b      	ldrh	r3, [r7, #2]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d109      	bne.n	8013ae4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013ad0:	4b8b      	ldr	r3, [pc, #556]	; (8013d00 <tcp_split_unsent_seg+0x274>)
 8013ad2:	f240 3253 	movw	r2, #851	; 0x353
 8013ad6:	498d      	ldr	r1, [pc, #564]	; (8013d0c <tcp_split_unsent_seg+0x280>)
 8013ad8:	488b      	ldr	r0, [pc, #556]	; (8013d08 <tcp_split_unsent_seg+0x27c>)
 8013ada:	f006 ffc5 	bl	801aa68 <iprintf>
    return ERR_VAL;
 8013ade:	f06f 0305 	mvn.w	r3, #5
 8013ae2:	e109      	b.n	8013cf8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013ae4:	697b      	ldr	r3, [r7, #20]
 8013ae6:	891b      	ldrh	r3, [r3, #8]
 8013ae8:	887a      	ldrh	r2, [r7, #2]
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d301      	bcc.n	8013af2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013aee:	2300      	movs	r3, #0
 8013af0:	e102      	b.n	8013cf8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013af6:	887a      	ldrh	r2, [r7, #2]
 8013af8:	429a      	cmp	r2, r3
 8013afa:	d906      	bls.n	8013b0a <tcp_split_unsent_seg+0x7e>
 8013afc:	4b80      	ldr	r3, [pc, #512]	; (8013d00 <tcp_split_unsent_seg+0x274>)
 8013afe:	f240 325b 	movw	r2, #859	; 0x35b
 8013b02:	4983      	ldr	r1, [pc, #524]	; (8013d10 <tcp_split_unsent_seg+0x284>)
 8013b04:	4880      	ldr	r0, [pc, #512]	; (8013d08 <tcp_split_unsent_seg+0x27c>)
 8013b06:	f006 ffaf 	bl	801aa68 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	891b      	ldrh	r3, [r3, #8]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d106      	bne.n	8013b20 <tcp_split_unsent_seg+0x94>
 8013b12:	4b7b      	ldr	r3, [pc, #492]	; (8013d00 <tcp_split_unsent_seg+0x274>)
 8013b14:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013b18:	497e      	ldr	r1, [pc, #504]	; (8013d14 <tcp_split_unsent_seg+0x288>)
 8013b1a:	487b      	ldr	r0, [pc, #492]	; (8013d08 <tcp_split_unsent_seg+0x27c>)
 8013b1c:	f006 ffa4 	bl	801aa68 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	7a9b      	ldrb	r3, [r3, #10]
 8013b24:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013b26:	7bfb      	ldrb	r3, [r7, #15]
 8013b28:	009b      	lsls	r3, r3, #2
 8013b2a:	b2db      	uxtb	r3, r3
 8013b2c:	f003 0304 	and.w	r3, r3, #4
 8013b30:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	891a      	ldrh	r2, [r3, #8]
 8013b36:	887b      	ldrh	r3, [r7, #2]
 8013b38:	1ad3      	subs	r3, r2, r3
 8013b3a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013b3c:	7bbb      	ldrb	r3, [r7, #14]
 8013b3e:	b29a      	uxth	r2, r3
 8013b40:	89bb      	ldrh	r3, [r7, #12]
 8013b42:	4413      	add	r3, r2
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	2036      	movs	r0, #54	; 0x36
 8013b4e:	f7fb fab3 	bl	800f0b8 <pbuf_alloc>
 8013b52:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013b54:	693b      	ldr	r3, [r7, #16]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	f000 80b7 	beq.w	8013cca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	685b      	ldr	r3, [r3, #4]
 8013b60:	891a      	ldrh	r2, [r3, #8]
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	891b      	ldrh	r3, [r3, #8]
 8013b66:	1ad3      	subs	r3, r2, r3
 8013b68:	b29a      	uxth	r2, r3
 8013b6a:	887b      	ldrh	r3, [r7, #2]
 8013b6c:	4413      	add	r3, r2
 8013b6e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013b70:	697b      	ldr	r3, [r7, #20]
 8013b72:	6858      	ldr	r0, [r3, #4]
 8013b74:	693b      	ldr	r3, [r7, #16]
 8013b76:	685a      	ldr	r2, [r3, #4]
 8013b78:	7bbb      	ldrb	r3, [r7, #14]
 8013b7a:	18d1      	adds	r1, r2, r3
 8013b7c:	897b      	ldrh	r3, [r7, #10]
 8013b7e:	89ba      	ldrh	r2, [r7, #12]
 8013b80:	f7fb ff84 	bl	800fa8c <pbuf_copy_partial>
 8013b84:	4603      	mov	r3, r0
 8013b86:	461a      	mov	r2, r3
 8013b88:	89bb      	ldrh	r3, [r7, #12]
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	f040 809f 	bne.w	8013cce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013b90:	697b      	ldr	r3, [r7, #20]
 8013b92:	68db      	ldr	r3, [r3, #12]
 8013b94:	899b      	ldrh	r3, [r3, #12]
 8013b96:	b29b      	uxth	r3, r3
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7fa f9b9 	bl	800df10 <lwip_htons>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	b2db      	uxtb	r3, r3
 8013ba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013ba6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013ba8:	2300      	movs	r3, #0
 8013baa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013bac:	7efb      	ldrb	r3, [r7, #27]
 8013bae:	f003 0308 	and.w	r3, r3, #8
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d007      	beq.n	8013bc6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013bb6:	7efb      	ldrb	r3, [r7, #27]
 8013bb8:	f023 0308 	bic.w	r3, r3, #8
 8013bbc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013bbe:	7ebb      	ldrb	r3, [r7, #26]
 8013bc0:	f043 0308 	orr.w	r3, r3, #8
 8013bc4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013bc6:	7efb      	ldrb	r3, [r7, #27]
 8013bc8:	f003 0301 	and.w	r3, r3, #1
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d007      	beq.n	8013be0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013bd0:	7efb      	ldrb	r3, [r7, #27]
 8013bd2:	f023 0301 	bic.w	r3, r3, #1
 8013bd6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013bd8:	7ebb      	ldrb	r3, [r7, #26]
 8013bda:	f043 0301 	orr.w	r3, r3, #1
 8013bde:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	68db      	ldr	r3, [r3, #12]
 8013be4:	685b      	ldr	r3, [r3, #4]
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7fa f9a7 	bl	800df3a <lwip_htonl>
 8013bec:	4602      	mov	r2, r0
 8013bee:	887b      	ldrh	r3, [r7, #2]
 8013bf0:	18d1      	adds	r1, r2, r3
 8013bf2:	7eba      	ldrb	r2, [r7, #26]
 8013bf4:	7bfb      	ldrb	r3, [r7, #15]
 8013bf6:	9300      	str	r3, [sp, #0]
 8013bf8:	460b      	mov	r3, r1
 8013bfa:	6939      	ldr	r1, [r7, #16]
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f7ff fea7 	bl	8013950 <tcp_create_segment>
 8013c02:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013c04:	69fb      	ldr	r3, [r7, #28]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d063      	beq.n	8013cd2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	685b      	ldr	r3, [r3, #4]
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f7fb fdc4 	bl	800f79c <pbuf_clen>
 8013c14:	4603      	mov	r3, r0
 8013c16:	461a      	mov	r2, r3
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c1e:	1a9b      	subs	r3, r3, r2
 8013c20:	b29a      	uxth	r2, r3
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	6858      	ldr	r0, [r3, #4]
 8013c2c:	697b      	ldr	r3, [r7, #20]
 8013c2e:	685b      	ldr	r3, [r3, #4]
 8013c30:	891a      	ldrh	r2, [r3, #8]
 8013c32:	89bb      	ldrh	r3, [r7, #12]
 8013c34:	1ad3      	subs	r3, r2, r3
 8013c36:	b29b      	uxth	r3, r3
 8013c38:	4619      	mov	r1, r3
 8013c3a:	f7fb fb9b 	bl	800f374 <pbuf_realloc>
  useg->len -= remainder;
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	891a      	ldrh	r2, [r3, #8]
 8013c42:	89bb      	ldrh	r3, [r7, #12]
 8013c44:	1ad3      	subs	r3, r2, r3
 8013c46:	b29a      	uxth	r2, r3
 8013c48:	697b      	ldr	r3, [r7, #20]
 8013c4a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013c4c:	697b      	ldr	r3, [r7, #20]
 8013c4e:	68db      	ldr	r3, [r3, #12]
 8013c50:	899b      	ldrh	r3, [r3, #12]
 8013c52:	b29c      	uxth	r4, r3
 8013c54:	7efb      	ldrb	r3, [r7, #27]
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f7fa f959 	bl	800df10 <lwip_htons>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	461a      	mov	r2, r3
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	68db      	ldr	r3, [r3, #12]
 8013c66:	4322      	orrs	r2, r4
 8013c68:	b292      	uxth	r2, r2
 8013c6a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	685b      	ldr	r3, [r3, #4]
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7fb fd93 	bl	800f79c <pbuf_clen>
 8013c76:	4603      	mov	r3, r0
 8013c78:	461a      	mov	r2, r3
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c80:	4413      	add	r3, r2
 8013c82:	b29a      	uxth	r2, r3
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013c8a:	69fb      	ldr	r3, [r7, #28]
 8013c8c:	685b      	ldr	r3, [r3, #4]
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7fb fd84 	bl	800f79c <pbuf_clen>
 8013c94:	4603      	mov	r3, r0
 8013c96:	461a      	mov	r2, r3
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c9e:	4413      	add	r3, r2
 8013ca0:	b29a      	uxth	r2, r3
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	681a      	ldr	r2, [r3, #0]
 8013cac:	69fb      	ldr	r3, [r7, #28]
 8013cae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	69fa      	ldr	r2, [r7, #28]
 8013cb4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013cb6:	69fb      	ldr	r3, [r7, #28]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d103      	bne.n	8013cc6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	e016      	b.n	8013cf8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013cca:	bf00      	nop
 8013ccc:	e002      	b.n	8013cd4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013cce:	bf00      	nop
 8013cd0:	e000      	b.n	8013cd4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013cd2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013cd4:	69fb      	ldr	r3, [r7, #28]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d006      	beq.n	8013ce8 <tcp_split_unsent_seg+0x25c>
 8013cda:	4b09      	ldr	r3, [pc, #36]	; (8013d00 <tcp_split_unsent_seg+0x274>)
 8013cdc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013ce0:	490d      	ldr	r1, [pc, #52]	; (8013d18 <tcp_split_unsent_seg+0x28c>)
 8013ce2:	4809      	ldr	r0, [pc, #36]	; (8013d08 <tcp_split_unsent_seg+0x27c>)
 8013ce4:	f006 fec0 	bl	801aa68 <iprintf>
  if (p != NULL) {
 8013ce8:	693b      	ldr	r3, [r7, #16]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d002      	beq.n	8013cf4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013cee:	6938      	ldr	r0, [r7, #16]
 8013cf0:	f7fb fcc6 	bl	800f680 <pbuf_free>
  }

  return ERR_MEM;
 8013cf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	3724      	adds	r7, #36	; 0x24
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd90      	pop	{r4, r7, pc}
 8013d00:	0801d8b4 	.word	0x0801d8b4
 8013d04:	0801dc48 	.word	0x0801dc48
 8013d08:	0801d908 	.word	0x0801d908
 8013d0c:	0801dc6c 	.word	0x0801dc6c
 8013d10:	0801dc90 	.word	0x0801dc90
 8013d14:	0801dca0 	.word	0x0801dca0
 8013d18:	0801dcb0 	.word	0x0801dcb0

08013d1c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013d1c:	b590      	push	{r4, r7, lr}
 8013d1e:	b085      	sub	sp, #20
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d106      	bne.n	8013d38 <tcp_send_fin+0x1c>
 8013d2a:	4b21      	ldr	r3, [pc, #132]	; (8013db0 <tcp_send_fin+0x94>)
 8013d2c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013d30:	4920      	ldr	r1, [pc, #128]	; (8013db4 <tcp_send_fin+0x98>)
 8013d32:	4821      	ldr	r0, [pc, #132]	; (8013db8 <tcp_send_fin+0x9c>)
 8013d34:	f006 fe98 	bl	801aa68 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d02e      	beq.n	8013d9e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d44:	60fb      	str	r3, [r7, #12]
 8013d46:	e002      	b.n	8013d4e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d1f8      	bne.n	8013d48 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	68db      	ldr	r3, [r3, #12]
 8013d5a:	899b      	ldrh	r3, [r3, #12]
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7fa f8d6 	bl	800df10 <lwip_htons>
 8013d64:	4603      	mov	r3, r0
 8013d66:	b2db      	uxtb	r3, r3
 8013d68:	f003 0307 	and.w	r3, r3, #7
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d116      	bne.n	8013d9e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	899b      	ldrh	r3, [r3, #12]
 8013d76:	b29c      	uxth	r4, r3
 8013d78:	2001      	movs	r0, #1
 8013d7a:	f7fa f8c9 	bl	800df10 <lwip_htons>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	461a      	mov	r2, r3
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	68db      	ldr	r3, [r3, #12]
 8013d86:	4322      	orrs	r2, r4
 8013d88:	b292      	uxth	r2, r2
 8013d8a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	8b5b      	ldrh	r3, [r3, #26]
 8013d90:	f043 0320 	orr.w	r3, r3, #32
 8013d94:	b29a      	uxth	r2, r3
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	e004      	b.n	8013da8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013d9e:	2101      	movs	r1, #1
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f000 f80b 	bl	8013dbc <tcp_enqueue_flags>
 8013da6:	4603      	mov	r3, r0
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	3714      	adds	r7, #20
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd90      	pop	{r4, r7, pc}
 8013db0:	0801d8b4 	.word	0x0801d8b4
 8013db4:	0801dcbc 	.word	0x0801dcbc
 8013db8:	0801d908 	.word	0x0801d908

08013dbc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b08a      	sub	sp, #40	; 0x28
 8013dc0:	af02      	add	r7, sp, #8
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	460b      	mov	r3, r1
 8013dc6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013dd0:	78fb      	ldrb	r3, [r7, #3]
 8013dd2:	f003 0303 	and.w	r3, r3, #3
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d106      	bne.n	8013de8 <tcp_enqueue_flags+0x2c>
 8013dda:	4b67      	ldr	r3, [pc, #412]	; (8013f78 <tcp_enqueue_flags+0x1bc>)
 8013ddc:	f240 4211 	movw	r2, #1041	; 0x411
 8013de0:	4966      	ldr	r1, [pc, #408]	; (8013f7c <tcp_enqueue_flags+0x1c0>)
 8013de2:	4867      	ldr	r0, [pc, #412]	; (8013f80 <tcp_enqueue_flags+0x1c4>)
 8013de4:	f006 fe40 	bl	801aa68 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d106      	bne.n	8013dfc <tcp_enqueue_flags+0x40>
 8013dee:	4b62      	ldr	r3, [pc, #392]	; (8013f78 <tcp_enqueue_flags+0x1bc>)
 8013df0:	f240 4213 	movw	r2, #1043	; 0x413
 8013df4:	4963      	ldr	r1, [pc, #396]	; (8013f84 <tcp_enqueue_flags+0x1c8>)
 8013df6:	4862      	ldr	r0, [pc, #392]	; (8013f80 <tcp_enqueue_flags+0x1c4>)
 8013df8:	f006 fe36 	bl	801aa68 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013dfc:	78fb      	ldrb	r3, [r7, #3]
 8013dfe:	f003 0302 	and.w	r3, r3, #2
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d001      	beq.n	8013e0a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013e06:	2301      	movs	r3, #1
 8013e08:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013e0a:	7ffb      	ldrb	r3, [r7, #31]
 8013e0c:	009b      	lsls	r3, r3, #2
 8013e0e:	b2db      	uxtb	r3, r3
 8013e10:	f003 0304 	and.w	r3, r3, #4
 8013e14:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013e16:	7dfb      	ldrb	r3, [r7, #23]
 8013e18:	b29b      	uxth	r3, r3
 8013e1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e1e:	4619      	mov	r1, r3
 8013e20:	2036      	movs	r0, #54	; 0x36
 8013e22:	f7fb f949 	bl	800f0b8 <pbuf_alloc>
 8013e26:	6138      	str	r0, [r7, #16]
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d109      	bne.n	8013e42 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	8b5b      	ldrh	r3, [r3, #26]
 8013e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e36:	b29a      	uxth	r2, r3
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8013e40:	e095      	b.n	8013f6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013e42:	693b      	ldr	r3, [r7, #16]
 8013e44:	895a      	ldrh	r2, [r3, #10]
 8013e46:	7dfb      	ldrb	r3, [r7, #23]
 8013e48:	b29b      	uxth	r3, r3
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	d206      	bcs.n	8013e5c <tcp_enqueue_flags+0xa0>
 8013e4e:	4b4a      	ldr	r3, [pc, #296]	; (8013f78 <tcp_enqueue_flags+0x1bc>)
 8013e50:	f240 4239 	movw	r2, #1081	; 0x439
 8013e54:	494c      	ldr	r1, [pc, #304]	; (8013f88 <tcp_enqueue_flags+0x1cc>)
 8013e56:	484a      	ldr	r0, [pc, #296]	; (8013f80 <tcp_enqueue_flags+0x1c4>)
 8013e58:	f006 fe06 	bl	801aa68 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013e60:	78fa      	ldrb	r2, [r7, #3]
 8013e62:	7ffb      	ldrb	r3, [r7, #31]
 8013e64:	9300      	str	r3, [sp, #0]
 8013e66:	460b      	mov	r3, r1
 8013e68:	6939      	ldr	r1, [r7, #16]
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f7ff fd70 	bl	8013950 <tcp_create_segment>
 8013e70:	60f8      	str	r0, [r7, #12]
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d109      	bne.n	8013e8c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	8b5b      	ldrh	r3, [r3, #26]
 8013e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e80:	b29a      	uxth	r2, r3
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013e86:	f04f 33ff 	mov.w	r3, #4294967295
 8013e8a:	e070      	b.n	8013f6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	68db      	ldr	r3, [r3, #12]
 8013e90:	f003 0303 	and.w	r3, r3, #3
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d006      	beq.n	8013ea6 <tcp_enqueue_flags+0xea>
 8013e98:	4b37      	ldr	r3, [pc, #220]	; (8013f78 <tcp_enqueue_flags+0x1bc>)
 8013e9a:	f240 4242 	movw	r2, #1090	; 0x442
 8013e9e:	493b      	ldr	r1, [pc, #236]	; (8013f8c <tcp_enqueue_flags+0x1d0>)
 8013ea0:	4837      	ldr	r0, [pc, #220]	; (8013f80 <tcp_enqueue_flags+0x1c4>)
 8013ea2:	f006 fde1 	bl	801aa68 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	891b      	ldrh	r3, [r3, #8]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d006      	beq.n	8013ebc <tcp_enqueue_flags+0x100>
 8013eae:	4b32      	ldr	r3, [pc, #200]	; (8013f78 <tcp_enqueue_flags+0x1bc>)
 8013eb0:	f240 4243 	movw	r2, #1091	; 0x443
 8013eb4:	4936      	ldr	r1, [pc, #216]	; (8013f90 <tcp_enqueue_flags+0x1d4>)
 8013eb6:	4832      	ldr	r0, [pc, #200]	; (8013f80 <tcp_enqueue_flags+0x1c4>)
 8013eb8:	f006 fdd6 	bl	801aa68 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d103      	bne.n	8013ecc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	68fa      	ldr	r2, [r7, #12]
 8013ec8:	66da      	str	r2, [r3, #108]	; 0x6c
 8013eca:	e00d      	b.n	8013ee8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ed0:	61bb      	str	r3, [r7, #24]
 8013ed2:	e002      	b.n	8013eda <tcp_enqueue_flags+0x11e>
 8013ed4:	69bb      	ldr	r3, [r7, #24]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	61bb      	str	r3, [r7, #24]
 8013eda:	69bb      	ldr	r3, [r7, #24]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d1f8      	bne.n	8013ed4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013ee2:	69bb      	ldr	r3, [r7, #24]
 8013ee4:	68fa      	ldr	r2, [r7, #12]
 8013ee6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	2200      	movs	r2, #0
 8013eec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013ef0:	78fb      	ldrb	r3, [r7, #3]
 8013ef2:	f003 0302 	and.w	r3, r3, #2
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d104      	bne.n	8013f04 <tcp_enqueue_flags+0x148>
 8013efa:	78fb      	ldrb	r3, [r7, #3]
 8013efc:	f003 0301 	and.w	r3, r3, #1
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d004      	beq.n	8013f0e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f08:	1c5a      	adds	r2, r3, #1
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013f0e:	78fb      	ldrb	r3, [r7, #3]
 8013f10:	f003 0301 	and.w	r3, r3, #1
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d006      	beq.n	8013f26 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	8b5b      	ldrh	r3, [r3, #26]
 8013f1c:	f043 0320 	orr.w	r3, r3, #32
 8013f20:	b29a      	uxth	r2, r3
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	685b      	ldr	r3, [r3, #4]
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f7fb fc36 	bl	800f79c <pbuf_clen>
 8013f30:	4603      	mov	r3, r0
 8013f32:	461a      	mov	r2, r3
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013f3a:	4413      	add	r3, r2
 8013f3c:	b29a      	uxth	r2, r3
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d00e      	beq.n	8013f6c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d10a      	bne.n	8013f6c <tcp_enqueue_flags+0x1b0>
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d106      	bne.n	8013f6c <tcp_enqueue_flags+0x1b0>
 8013f5e:	4b06      	ldr	r3, [pc, #24]	; (8013f78 <tcp_enqueue_flags+0x1bc>)
 8013f60:	f240 4265 	movw	r2, #1125	; 0x465
 8013f64:	490b      	ldr	r1, [pc, #44]	; (8013f94 <tcp_enqueue_flags+0x1d8>)
 8013f66:	4806      	ldr	r0, [pc, #24]	; (8013f80 <tcp_enqueue_flags+0x1c4>)
 8013f68:	f006 fd7e 	bl	801aa68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013f6c:	2300      	movs	r3, #0
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	3720      	adds	r7, #32
 8013f72:	46bd      	mov	sp, r7
 8013f74:	bd80      	pop	{r7, pc}
 8013f76:	bf00      	nop
 8013f78:	0801d8b4 	.word	0x0801d8b4
 8013f7c:	0801dcd8 	.word	0x0801dcd8
 8013f80:	0801d908 	.word	0x0801d908
 8013f84:	0801dd30 	.word	0x0801dd30
 8013f88:	0801dd50 	.word	0x0801dd50
 8013f8c:	0801dd8c 	.word	0x0801dd8c
 8013f90:	0801dda4 	.word	0x0801dda4
 8013f94:	0801ddd0 	.word	0x0801ddd0

08013f98 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013f98:	b5b0      	push	{r4, r5, r7, lr}
 8013f9a:	b08a      	sub	sp, #40	; 0x28
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d106      	bne.n	8013fb4 <tcp_output+0x1c>
 8013fa6:	4b9e      	ldr	r3, [pc, #632]	; (8014220 <tcp_output+0x288>)
 8013fa8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013fac:	499d      	ldr	r1, [pc, #628]	; (8014224 <tcp_output+0x28c>)
 8013fae:	489e      	ldr	r0, [pc, #632]	; (8014228 <tcp_output+0x290>)
 8013fb0:	f006 fd5a 	bl	801aa68 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	7d1b      	ldrb	r3, [r3, #20]
 8013fb8:	2b01      	cmp	r3, #1
 8013fba:	d106      	bne.n	8013fca <tcp_output+0x32>
 8013fbc:	4b98      	ldr	r3, [pc, #608]	; (8014220 <tcp_output+0x288>)
 8013fbe:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013fc2:	499a      	ldr	r1, [pc, #616]	; (801422c <tcp_output+0x294>)
 8013fc4:	4898      	ldr	r0, [pc, #608]	; (8014228 <tcp_output+0x290>)
 8013fc6:	f006 fd4f 	bl	801aa68 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013fca:	4b99      	ldr	r3, [pc, #612]	; (8014230 <tcp_output+0x298>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	687a      	ldr	r2, [r7, #4]
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d101      	bne.n	8013fd8 <tcp_output+0x40>
    return ERR_OK;
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	e1ce      	b.n	8014376 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013fe4:	4293      	cmp	r3, r2
 8013fe6:	bf28      	it	cs
 8013fe8:	4613      	movcs	r3, r2
 8013fea:	b29b      	uxth	r3, r3
 8013fec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ff2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d10b      	bne.n	8014012 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	8b5b      	ldrh	r3, [r3, #26]
 8013ffe:	f003 0302 	and.w	r3, r3, #2
 8014002:	2b00      	cmp	r3, #0
 8014004:	f000 81aa 	beq.w	801435c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f000 fdcb 	bl	8014ba4 <tcp_send_empty_ack>
 801400e:	4603      	mov	r3, r0
 8014010:	e1b1      	b.n	8014376 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014012:	6879      	ldr	r1, [r7, #4]
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	3304      	adds	r3, #4
 8014018:	461a      	mov	r2, r3
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f7ff fc7c 	bl	8013918 <tcp_route>
 8014020:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d102      	bne.n	801402e <tcp_output+0x96>
    return ERR_RTE;
 8014028:	f06f 0303 	mvn.w	r3, #3
 801402c:	e1a3      	b.n	8014376 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d003      	beq.n	801403c <tcp_output+0xa4>
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d111      	bne.n	8014060 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d002      	beq.n	8014048 <tcp_output+0xb0>
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	3304      	adds	r3, #4
 8014046:	e000      	b.n	801404a <tcp_output+0xb2>
 8014048:	2300      	movs	r3, #0
 801404a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801404c:	693b      	ldr	r3, [r7, #16]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d102      	bne.n	8014058 <tcp_output+0xc0>
      return ERR_RTE;
 8014052:	f06f 0303 	mvn.w	r3, #3
 8014056:	e18e      	b.n	8014376 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014058:	693b      	ldr	r3, [r7, #16]
 801405a:	681a      	ldr	r2, [r3, #0]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014062:	68db      	ldr	r3, [r3, #12]
 8014064:	685b      	ldr	r3, [r3, #4]
 8014066:	4618      	mov	r0, r3
 8014068:	f7f9 ff67 	bl	800df3a <lwip_htonl>
 801406c:	4602      	mov	r2, r0
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014072:	1ad3      	subs	r3, r2, r3
 8014074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014076:	8912      	ldrh	r2, [r2, #8]
 8014078:	4413      	add	r3, r2
 801407a:	69ba      	ldr	r2, [r7, #24]
 801407c:	429a      	cmp	r2, r3
 801407e:	d227      	bcs.n	80140d0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014086:	461a      	mov	r2, r3
 8014088:	69bb      	ldr	r3, [r7, #24]
 801408a:	4293      	cmp	r3, r2
 801408c:	d114      	bne.n	80140b8 <tcp_output+0x120>
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014092:	2b00      	cmp	r3, #0
 8014094:	d110      	bne.n	80140b8 <tcp_output+0x120>
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801409c:	2b00      	cmp	r3, #0
 801409e:	d10b      	bne.n	80140b8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	2200      	movs	r2, #0
 80140a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	2201      	movs	r2, #1
 80140ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2200      	movs	r2, #0
 80140b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	8b5b      	ldrh	r3, [r3, #26]
 80140bc:	f003 0302 	and.w	r3, r3, #2
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f000 814d 	beq.w	8014360 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80140c6:	6878      	ldr	r0, [r7, #4]
 80140c8:	f000 fd6c 	bl	8014ba4 <tcp_send_empty_ack>
 80140cc:	4603      	mov	r3, r0
 80140ce:	e152      	b.n	8014376 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	2200      	movs	r2, #0
 80140d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140dc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80140de:	6a3b      	ldr	r3, [r7, #32]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	f000 811c 	beq.w	801431e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80140e6:	e002      	b.n	80140ee <tcp_output+0x156>
 80140e8:	6a3b      	ldr	r3, [r7, #32]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	623b      	str	r3, [r7, #32]
 80140ee:	6a3b      	ldr	r3, [r7, #32]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d1f8      	bne.n	80140e8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80140f6:	e112      	b.n	801431e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80140f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140fa:	68db      	ldr	r3, [r3, #12]
 80140fc:	899b      	ldrh	r3, [r3, #12]
 80140fe:	b29b      	uxth	r3, r3
 8014100:	4618      	mov	r0, r3
 8014102:	f7f9 ff05 	bl	800df10 <lwip_htons>
 8014106:	4603      	mov	r3, r0
 8014108:	b2db      	uxtb	r3, r3
 801410a:	f003 0304 	and.w	r3, r3, #4
 801410e:	2b00      	cmp	r3, #0
 8014110:	d006      	beq.n	8014120 <tcp_output+0x188>
 8014112:	4b43      	ldr	r3, [pc, #268]	; (8014220 <tcp_output+0x288>)
 8014114:	f240 5236 	movw	r2, #1334	; 0x536
 8014118:	4946      	ldr	r1, [pc, #280]	; (8014234 <tcp_output+0x29c>)
 801411a:	4843      	ldr	r0, [pc, #268]	; (8014228 <tcp_output+0x290>)
 801411c:	f006 fca4 	bl	801aa68 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014124:	2b00      	cmp	r3, #0
 8014126:	d01f      	beq.n	8014168 <tcp_output+0x1d0>
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	8b5b      	ldrh	r3, [r3, #26]
 801412c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014130:	2b00      	cmp	r3, #0
 8014132:	d119      	bne.n	8014168 <tcp_output+0x1d0>
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014138:	2b00      	cmp	r3, #0
 801413a:	d00b      	beq.n	8014154 <tcp_output+0x1bc>
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d110      	bne.n	8014168 <tcp_output+0x1d0>
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801414a:	891a      	ldrh	r2, [r3, #8]
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014150:	429a      	cmp	r2, r3
 8014152:	d209      	bcs.n	8014168 <tcp_output+0x1d0>
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801415a:	2b00      	cmp	r3, #0
 801415c:	d004      	beq.n	8014168 <tcp_output+0x1d0>
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014164:	2b08      	cmp	r3, #8
 8014166:	d901      	bls.n	801416c <tcp_output+0x1d4>
 8014168:	2301      	movs	r3, #1
 801416a:	e000      	b.n	801416e <tcp_output+0x1d6>
 801416c:	2300      	movs	r3, #0
 801416e:	2b00      	cmp	r3, #0
 8014170:	d106      	bne.n	8014180 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	8b5b      	ldrh	r3, [r3, #26]
 8014176:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801417a:	2b00      	cmp	r3, #0
 801417c:	f000 80e4 	beq.w	8014348 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	7d1b      	ldrb	r3, [r3, #20]
 8014184:	2b02      	cmp	r3, #2
 8014186:	d00d      	beq.n	80141a4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801418a:	68db      	ldr	r3, [r3, #12]
 801418c:	899b      	ldrh	r3, [r3, #12]
 801418e:	b29c      	uxth	r4, r3
 8014190:	2010      	movs	r0, #16
 8014192:	f7f9 febd 	bl	800df10 <lwip_htons>
 8014196:	4603      	mov	r3, r0
 8014198:	461a      	mov	r2, r3
 801419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801419c:	68db      	ldr	r3, [r3, #12]
 801419e:	4322      	orrs	r2, r4
 80141a0:	b292      	uxth	r2, r2
 80141a2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80141a4:	697a      	ldr	r2, [r7, #20]
 80141a6:	6879      	ldr	r1, [r7, #4]
 80141a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141aa:	f000 f909 	bl	80143c0 <tcp_output_segment>
 80141ae:	4603      	mov	r3, r0
 80141b0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80141b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d009      	beq.n	80141ce <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	8b5b      	ldrh	r3, [r3, #26]
 80141be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80141c2:	b29a      	uxth	r2, r3
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	835a      	strh	r2, [r3, #26]
      return err;
 80141c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141cc:	e0d3      	b.n	8014376 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80141ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d0:	681a      	ldr	r2, [r3, #0]
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	7d1b      	ldrb	r3, [r3, #20]
 80141da:	2b02      	cmp	r3, #2
 80141dc:	d006      	beq.n	80141ec <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	8b5b      	ldrh	r3, [r3, #26]
 80141e2:	f023 0303 	bic.w	r3, r3, #3
 80141e6:	b29a      	uxth	r2, r3
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80141ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ee:	68db      	ldr	r3, [r3, #12]
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	4618      	mov	r0, r3
 80141f4:	f7f9 fea1 	bl	800df3a <lwip_htonl>
 80141f8:	4604      	mov	r4, r0
 80141fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141fc:	891b      	ldrh	r3, [r3, #8]
 80141fe:	461d      	mov	r5, r3
 8014200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014202:	68db      	ldr	r3, [r3, #12]
 8014204:	899b      	ldrh	r3, [r3, #12]
 8014206:	b29b      	uxth	r3, r3
 8014208:	4618      	mov	r0, r3
 801420a:	f7f9 fe81 	bl	800df10 <lwip_htons>
 801420e:	4603      	mov	r3, r0
 8014210:	b2db      	uxtb	r3, r3
 8014212:	f003 0303 	and.w	r3, r3, #3
 8014216:	2b00      	cmp	r3, #0
 8014218:	d00e      	beq.n	8014238 <tcp_output+0x2a0>
 801421a:	2301      	movs	r3, #1
 801421c:	e00d      	b.n	801423a <tcp_output+0x2a2>
 801421e:	bf00      	nop
 8014220:	0801d8b4 	.word	0x0801d8b4
 8014224:	0801ddf8 	.word	0x0801ddf8
 8014228:	0801d908 	.word	0x0801d908
 801422c:	0801de10 	.word	0x0801de10
 8014230:	2000f40c 	.word	0x2000f40c
 8014234:	0801de38 	.word	0x0801de38
 8014238:	2300      	movs	r3, #0
 801423a:	442b      	add	r3, r5
 801423c:	4423      	add	r3, r4
 801423e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014244:	68bb      	ldr	r3, [r7, #8]
 8014246:	1ad3      	subs	r3, r2, r3
 8014248:	2b00      	cmp	r3, #0
 801424a:	da02      	bge.n	8014252 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	68ba      	ldr	r2, [r7, #8]
 8014250:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014254:	891b      	ldrh	r3, [r3, #8]
 8014256:	461c      	mov	r4, r3
 8014258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801425a:	68db      	ldr	r3, [r3, #12]
 801425c:	899b      	ldrh	r3, [r3, #12]
 801425e:	b29b      	uxth	r3, r3
 8014260:	4618      	mov	r0, r3
 8014262:	f7f9 fe55 	bl	800df10 <lwip_htons>
 8014266:	4603      	mov	r3, r0
 8014268:	b2db      	uxtb	r3, r3
 801426a:	f003 0303 	and.w	r3, r3, #3
 801426e:	2b00      	cmp	r3, #0
 8014270:	d001      	beq.n	8014276 <tcp_output+0x2de>
 8014272:	2301      	movs	r3, #1
 8014274:	e000      	b.n	8014278 <tcp_output+0x2e0>
 8014276:	2300      	movs	r3, #0
 8014278:	4423      	add	r3, r4
 801427a:	2b00      	cmp	r3, #0
 801427c:	d049      	beq.n	8014312 <tcp_output+0x37a>
      seg->next = NULL;
 801427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014280:	2200      	movs	r2, #0
 8014282:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014288:	2b00      	cmp	r3, #0
 801428a:	d105      	bne.n	8014298 <tcp_output+0x300>
        pcb->unacked = seg;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014290:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014294:	623b      	str	r3, [r7, #32]
 8014296:	e03f      	b.n	8014318 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429a:	68db      	ldr	r3, [r3, #12]
 801429c:	685b      	ldr	r3, [r3, #4]
 801429e:	4618      	mov	r0, r3
 80142a0:	f7f9 fe4b 	bl	800df3a <lwip_htonl>
 80142a4:	4604      	mov	r4, r0
 80142a6:	6a3b      	ldr	r3, [r7, #32]
 80142a8:	68db      	ldr	r3, [r3, #12]
 80142aa:	685b      	ldr	r3, [r3, #4]
 80142ac:	4618      	mov	r0, r3
 80142ae:	f7f9 fe44 	bl	800df3a <lwip_htonl>
 80142b2:	4603      	mov	r3, r0
 80142b4:	1ae3      	subs	r3, r4, r3
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	da24      	bge.n	8014304 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	3370      	adds	r3, #112	; 0x70
 80142be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80142c0:	e002      	b.n	80142c8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80142c2:	69fb      	ldr	r3, [r7, #28]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80142c8:	69fb      	ldr	r3, [r7, #28]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d011      	beq.n	80142f4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80142d0:	69fb      	ldr	r3, [r7, #28]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	68db      	ldr	r3, [r3, #12]
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	4618      	mov	r0, r3
 80142da:	f7f9 fe2e 	bl	800df3a <lwip_htonl>
 80142de:	4604      	mov	r4, r0
 80142e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e2:	68db      	ldr	r3, [r3, #12]
 80142e4:	685b      	ldr	r3, [r3, #4]
 80142e6:	4618      	mov	r0, r3
 80142e8:	f7f9 fe27 	bl	800df3a <lwip_htonl>
 80142ec:	4603      	mov	r3, r0
 80142ee:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	dbe6      	blt.n	80142c2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80142f4:	69fb      	ldr	r3, [r7, #28]
 80142f6:	681a      	ldr	r2, [r3, #0]
 80142f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80142fc:	69fb      	ldr	r3, [r7, #28]
 80142fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014300:	601a      	str	r2, [r3, #0]
 8014302:	e009      	b.n	8014318 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014304:	6a3b      	ldr	r3, [r7, #32]
 8014306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014308:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801430a:	6a3b      	ldr	r3, [r7, #32]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	623b      	str	r3, [r7, #32]
 8014310:	e002      	b.n	8014318 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014314:	f7fc fc43 	bl	8010b9e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801431c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014320:	2b00      	cmp	r3, #0
 8014322:	d012      	beq.n	801434a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014326:	68db      	ldr	r3, [r3, #12]
 8014328:	685b      	ldr	r3, [r3, #4]
 801432a:	4618      	mov	r0, r3
 801432c:	f7f9 fe05 	bl	800df3a <lwip_htonl>
 8014330:	4602      	mov	r2, r0
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014336:	1ad3      	subs	r3, r2, r3
 8014338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801433a:	8912      	ldrh	r2, [r2, #8]
 801433c:	4413      	add	r3, r2
  while (seg != NULL &&
 801433e:	69ba      	ldr	r2, [r7, #24]
 8014340:	429a      	cmp	r2, r3
 8014342:	f4bf aed9 	bcs.w	80140f8 <tcp_output+0x160>
 8014346:	e000      	b.n	801434a <tcp_output+0x3b2>
      break;
 8014348:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801434e:	2b00      	cmp	r3, #0
 8014350:	d108      	bne.n	8014364 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	2200      	movs	r2, #0
 8014356:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801435a:	e004      	b.n	8014366 <tcp_output+0x3ce>
    goto output_done;
 801435c:	bf00      	nop
 801435e:	e002      	b.n	8014366 <tcp_output+0x3ce>
    goto output_done;
 8014360:	bf00      	nop
 8014362:	e000      	b.n	8014366 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014364:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	8b5b      	ldrh	r3, [r3, #26]
 801436a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801436e:	b29a      	uxth	r2, r3
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014374:	2300      	movs	r3, #0
}
 8014376:	4618      	mov	r0, r3
 8014378:	3728      	adds	r7, #40	; 0x28
 801437a:	46bd      	mov	sp, r7
 801437c:	bdb0      	pop	{r4, r5, r7, pc}
 801437e:	bf00      	nop

08014380 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b082      	sub	sp, #8
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d106      	bne.n	801439c <tcp_output_segment_busy+0x1c>
 801438e:	4b09      	ldr	r3, [pc, #36]	; (80143b4 <tcp_output_segment_busy+0x34>)
 8014390:	f240 529a 	movw	r2, #1434	; 0x59a
 8014394:	4908      	ldr	r1, [pc, #32]	; (80143b8 <tcp_output_segment_busy+0x38>)
 8014396:	4809      	ldr	r0, [pc, #36]	; (80143bc <tcp_output_segment_busy+0x3c>)
 8014398:	f006 fb66 	bl	801aa68 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	685b      	ldr	r3, [r3, #4]
 80143a0:	7b9b      	ldrb	r3, [r3, #14]
 80143a2:	2b01      	cmp	r3, #1
 80143a4:	d001      	beq.n	80143aa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80143a6:	2301      	movs	r3, #1
 80143a8:	e000      	b.n	80143ac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80143aa:	2300      	movs	r3, #0
}
 80143ac:	4618      	mov	r0, r3
 80143ae:	3708      	adds	r7, #8
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}
 80143b4:	0801d8b4 	.word	0x0801d8b4
 80143b8:	0801de50 	.word	0x0801de50
 80143bc:	0801d908 	.word	0x0801d908

080143c0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80143c0:	b5b0      	push	{r4, r5, r7, lr}
 80143c2:	b08c      	sub	sp, #48	; 0x30
 80143c4:	af04      	add	r7, sp, #16
 80143c6:	60f8      	str	r0, [r7, #12]
 80143c8:	60b9      	str	r1, [r7, #8]
 80143ca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d106      	bne.n	80143e0 <tcp_output_segment+0x20>
 80143d2:	4b63      	ldr	r3, [pc, #396]	; (8014560 <tcp_output_segment+0x1a0>)
 80143d4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80143d8:	4962      	ldr	r1, [pc, #392]	; (8014564 <tcp_output_segment+0x1a4>)
 80143da:	4863      	ldr	r0, [pc, #396]	; (8014568 <tcp_output_segment+0x1a8>)
 80143dc:	f006 fb44 	bl	801aa68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80143e0:	68bb      	ldr	r3, [r7, #8]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d106      	bne.n	80143f4 <tcp_output_segment+0x34>
 80143e6:	4b5e      	ldr	r3, [pc, #376]	; (8014560 <tcp_output_segment+0x1a0>)
 80143e8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80143ec:	495f      	ldr	r1, [pc, #380]	; (801456c <tcp_output_segment+0x1ac>)
 80143ee:	485e      	ldr	r0, [pc, #376]	; (8014568 <tcp_output_segment+0x1a8>)
 80143f0:	f006 fb3a 	bl	801aa68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d106      	bne.n	8014408 <tcp_output_segment+0x48>
 80143fa:	4b59      	ldr	r3, [pc, #356]	; (8014560 <tcp_output_segment+0x1a0>)
 80143fc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014400:	495b      	ldr	r1, [pc, #364]	; (8014570 <tcp_output_segment+0x1b0>)
 8014402:	4859      	ldr	r0, [pc, #356]	; (8014568 <tcp_output_segment+0x1a8>)
 8014404:	f006 fb30 	bl	801aa68 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014408:	68f8      	ldr	r0, [r7, #12]
 801440a:	f7ff ffb9 	bl	8014380 <tcp_output_segment_busy>
 801440e:	4603      	mov	r3, r0
 8014410:	2b00      	cmp	r3, #0
 8014412:	d001      	beq.n	8014418 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014414:	2300      	movs	r3, #0
 8014416:	e09f      	b.n	8014558 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014418:	68bb      	ldr	r3, [r7, #8]
 801441a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	68dc      	ldr	r4, [r3, #12]
 8014420:	4610      	mov	r0, r2
 8014422:	f7f9 fd8a 	bl	800df3a <lwip_htonl>
 8014426:	4603      	mov	r3, r0
 8014428:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801442a:	68bb      	ldr	r3, [r7, #8]
 801442c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	68dc      	ldr	r4, [r3, #12]
 8014432:	4610      	mov	r0, r2
 8014434:	f7f9 fd6c 	bl	800df10 <lwip_htons>
 8014438:	4603      	mov	r3, r0
 801443a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801443c:	68bb      	ldr	r3, [r7, #8]
 801443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014440:	68ba      	ldr	r2, [r7, #8]
 8014442:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014444:	441a      	add	r2, r3
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	68db      	ldr	r3, [r3, #12]
 801444e:	3314      	adds	r3, #20
 8014450:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	7a9b      	ldrb	r3, [r3, #10]
 8014456:	f003 0301 	and.w	r3, r3, #1
 801445a:	2b00      	cmp	r3, #0
 801445c:	d015      	beq.n	801448a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	3304      	adds	r3, #4
 8014462:	461a      	mov	r2, r3
 8014464:	6879      	ldr	r1, [r7, #4]
 8014466:	f44f 7006 	mov.w	r0, #536	; 0x218
 801446a:	f7fc fe8f 	bl	801118c <tcp_eff_send_mss_netif>
 801446e:	4603      	mov	r3, r0
 8014470:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014472:	8b7b      	ldrh	r3, [r7, #26]
 8014474:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014478:	4618      	mov	r0, r3
 801447a:	f7f9 fd5e 	bl	800df3a <lwip_htonl>
 801447e:	4602      	mov	r2, r0
 8014480:	69fb      	ldr	r3, [r7, #28]
 8014482:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014484:	69fb      	ldr	r3, [r7, #28]
 8014486:	3304      	adds	r3, #4
 8014488:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014490:	2b00      	cmp	r3, #0
 8014492:	da02      	bge.n	801449a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	2200      	movs	r2, #0
 8014498:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d10c      	bne.n	80144bc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80144a2:	4b34      	ldr	r3, [pc, #208]	; (8014574 <tcp_output_segment+0x1b4>)
 80144a4:	681a      	ldr	r2, [r3, #0]
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	68db      	ldr	r3, [r3, #12]
 80144ae:	685b      	ldr	r3, [r3, #4]
 80144b0:	4618      	mov	r0, r3
 80144b2:	f7f9 fd42 	bl	800df3a <lwip_htonl>
 80144b6:	4602      	mov	r2, r0
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	68da      	ldr	r2, [r3, #12]
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	685b      	ldr	r3, [r3, #4]
 80144c4:	685b      	ldr	r3, [r3, #4]
 80144c6:	1ad3      	subs	r3, r2, r3
 80144c8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	8959      	ldrh	r1, [r3, #10]
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	685b      	ldr	r3, [r3, #4]
 80144d4:	8b3a      	ldrh	r2, [r7, #24]
 80144d6:	1a8a      	subs	r2, r1, r2
 80144d8:	b292      	uxth	r2, r2
 80144da:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	685b      	ldr	r3, [r3, #4]
 80144e0:	8919      	ldrh	r1, [r3, #8]
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	685b      	ldr	r3, [r3, #4]
 80144e6:	8b3a      	ldrh	r2, [r7, #24]
 80144e8:	1a8a      	subs	r2, r1, r2
 80144ea:	b292      	uxth	r2, r2
 80144ec:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	685b      	ldr	r3, [r3, #4]
 80144f2:	68fa      	ldr	r2, [r7, #12]
 80144f4:	68d2      	ldr	r2, [r2, #12]
 80144f6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	68db      	ldr	r3, [r3, #12]
 80144fc:	2200      	movs	r2, #0
 80144fe:	741a      	strb	r2, [r3, #16]
 8014500:	2200      	movs	r2, #0
 8014502:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	68db      	ldr	r3, [r3, #12]
 8014508:	f103 0214 	add.w	r2, r3, #20
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	7a9b      	ldrb	r3, [r3, #10]
 8014510:	009b      	lsls	r3, r3, #2
 8014512:	f003 0304 	and.w	r3, r3, #4
 8014516:	4413      	add	r3, r2
 8014518:	69fa      	ldr	r2, [r7, #28]
 801451a:	429a      	cmp	r2, r3
 801451c:	d006      	beq.n	801452c <tcp_output_segment+0x16c>
 801451e:	4b10      	ldr	r3, [pc, #64]	; (8014560 <tcp_output_segment+0x1a0>)
 8014520:	f240 621c 	movw	r2, #1564	; 0x61c
 8014524:	4914      	ldr	r1, [pc, #80]	; (8014578 <tcp_output_segment+0x1b8>)
 8014526:	4810      	ldr	r0, [pc, #64]	; (8014568 <tcp_output_segment+0x1a8>)
 8014528:	f006 fa9e 	bl	801aa68 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	6858      	ldr	r0, [r3, #4]
 8014530:	68b9      	ldr	r1, [r7, #8]
 8014532:	68bb      	ldr	r3, [r7, #8]
 8014534:	1d1c      	adds	r4, r3, #4
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	7add      	ldrb	r5, [r3, #11]
 801453a:	68bb      	ldr	r3, [r7, #8]
 801453c:	7a9b      	ldrb	r3, [r3, #10]
 801453e:	687a      	ldr	r2, [r7, #4]
 8014540:	9202      	str	r2, [sp, #8]
 8014542:	2206      	movs	r2, #6
 8014544:	9201      	str	r2, [sp, #4]
 8014546:	9300      	str	r3, [sp, #0]
 8014548:	462b      	mov	r3, r5
 801454a:	4622      	mov	r2, r4
 801454c:	f004 fc1c 	bl	8018d88 <ip4_output_if>
 8014550:	4603      	mov	r3, r0
 8014552:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014554:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014558:	4618      	mov	r0, r3
 801455a:	3720      	adds	r7, #32
 801455c:	46bd      	mov	sp, r7
 801455e:	bdb0      	pop	{r4, r5, r7, pc}
 8014560:	0801d8b4 	.word	0x0801d8b4
 8014564:	0801de78 	.word	0x0801de78
 8014568:	0801d908 	.word	0x0801d908
 801456c:	0801de98 	.word	0x0801de98
 8014570:	0801deb8 	.word	0x0801deb8
 8014574:	2000f3fc 	.word	0x2000f3fc
 8014578:	0801dedc 	.word	0x0801dedc

0801457c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801457c:	b5b0      	push	{r4, r5, r7, lr}
 801457e:	b084      	sub	sp, #16
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d106      	bne.n	8014598 <tcp_rexmit_rto_prepare+0x1c>
 801458a:	4b31      	ldr	r3, [pc, #196]	; (8014650 <tcp_rexmit_rto_prepare+0xd4>)
 801458c:	f240 6263 	movw	r2, #1635	; 0x663
 8014590:	4930      	ldr	r1, [pc, #192]	; (8014654 <tcp_rexmit_rto_prepare+0xd8>)
 8014592:	4831      	ldr	r0, [pc, #196]	; (8014658 <tcp_rexmit_rto_prepare+0xdc>)
 8014594:	f006 fa68 	bl	801aa68 <iprintf>

  if (pcb->unacked == NULL) {
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801459c:	2b00      	cmp	r3, #0
 801459e:	d102      	bne.n	80145a6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80145a0:	f06f 0305 	mvn.w	r3, #5
 80145a4:	e050      	b.n	8014648 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145aa:	60fb      	str	r3, [r7, #12]
 80145ac:	e00b      	b.n	80145c6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80145ae:	68f8      	ldr	r0, [r7, #12]
 80145b0:	f7ff fee6 	bl	8014380 <tcp_output_segment_busy>
 80145b4:	4603      	mov	r3, r0
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d002      	beq.n	80145c0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80145ba:	f06f 0305 	mvn.w	r3, #5
 80145be:	e043      	b.n	8014648 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	60fb      	str	r3, [r7, #12]
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d1ef      	bne.n	80145ae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80145ce:	68f8      	ldr	r0, [r7, #12]
 80145d0:	f7ff fed6 	bl	8014380 <tcp_output_segment_busy>
 80145d4:	4603      	mov	r3, r0
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d002      	beq.n	80145e0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80145da:	f06f 0305 	mvn.w	r3, #5
 80145de:	e033      	b.n	8014648 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2200      	movs	r2, #0
 80145f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	8b5b      	ldrh	r3, [r3, #26]
 80145fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80145fe:	b29a      	uxth	r2, r3
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	68db      	ldr	r3, [r3, #12]
 8014608:	685b      	ldr	r3, [r3, #4]
 801460a:	4618      	mov	r0, r3
 801460c:	f7f9 fc95 	bl	800df3a <lwip_htonl>
 8014610:	4604      	mov	r4, r0
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	891b      	ldrh	r3, [r3, #8]
 8014616:	461d      	mov	r5, r3
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	68db      	ldr	r3, [r3, #12]
 801461c:	899b      	ldrh	r3, [r3, #12]
 801461e:	b29b      	uxth	r3, r3
 8014620:	4618      	mov	r0, r3
 8014622:	f7f9 fc75 	bl	800df10 <lwip_htons>
 8014626:	4603      	mov	r3, r0
 8014628:	b2db      	uxtb	r3, r3
 801462a:	f003 0303 	and.w	r3, r3, #3
 801462e:	2b00      	cmp	r3, #0
 8014630:	d001      	beq.n	8014636 <tcp_rexmit_rto_prepare+0xba>
 8014632:	2301      	movs	r3, #1
 8014634:	e000      	b.n	8014638 <tcp_rexmit_rto_prepare+0xbc>
 8014636:	2300      	movs	r3, #0
 8014638:	442b      	add	r3, r5
 801463a:	18e2      	adds	r2, r4, r3
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2200      	movs	r2, #0
 8014644:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014646:	2300      	movs	r3, #0
}
 8014648:	4618      	mov	r0, r3
 801464a:	3710      	adds	r7, #16
 801464c:	46bd      	mov	sp, r7
 801464e:	bdb0      	pop	{r4, r5, r7, pc}
 8014650:	0801d8b4 	.word	0x0801d8b4
 8014654:	0801def0 	.word	0x0801def0
 8014658:	0801d908 	.word	0x0801d908

0801465c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b082      	sub	sp, #8
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d106      	bne.n	8014678 <tcp_rexmit_rto_commit+0x1c>
 801466a:	4b0d      	ldr	r3, [pc, #52]	; (80146a0 <tcp_rexmit_rto_commit+0x44>)
 801466c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014670:	490c      	ldr	r1, [pc, #48]	; (80146a4 <tcp_rexmit_rto_commit+0x48>)
 8014672:	480d      	ldr	r0, [pc, #52]	; (80146a8 <tcp_rexmit_rto_commit+0x4c>)
 8014674:	f006 f9f8 	bl	801aa68 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801467e:	2bff      	cmp	r3, #255	; 0xff
 8014680:	d007      	beq.n	8014692 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014688:	3301      	adds	r3, #1
 801468a:	b2da      	uxtb	r2, r3
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014692:	6878      	ldr	r0, [r7, #4]
 8014694:	f7ff fc80 	bl	8013f98 <tcp_output>
}
 8014698:	bf00      	nop
 801469a:	3708      	adds	r7, #8
 801469c:	46bd      	mov	sp, r7
 801469e:	bd80      	pop	{r7, pc}
 80146a0:	0801d8b4 	.word	0x0801d8b4
 80146a4:	0801df14 	.word	0x0801df14
 80146a8:	0801d908 	.word	0x0801d908

080146ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b082      	sub	sp, #8
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d106      	bne.n	80146c8 <tcp_rexmit_rto+0x1c>
 80146ba:	4b0a      	ldr	r3, [pc, #40]	; (80146e4 <tcp_rexmit_rto+0x38>)
 80146bc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80146c0:	4909      	ldr	r1, [pc, #36]	; (80146e8 <tcp_rexmit_rto+0x3c>)
 80146c2:	480a      	ldr	r0, [pc, #40]	; (80146ec <tcp_rexmit_rto+0x40>)
 80146c4:	f006 f9d0 	bl	801aa68 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f7ff ff57 	bl	801457c <tcp_rexmit_rto_prepare>
 80146ce:	4603      	mov	r3, r0
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d102      	bne.n	80146da <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	f7ff ffc1 	bl	801465c <tcp_rexmit_rto_commit>
  }
}
 80146da:	bf00      	nop
 80146dc:	3708      	adds	r7, #8
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd80      	pop	{r7, pc}
 80146e2:	bf00      	nop
 80146e4:	0801d8b4 	.word	0x0801d8b4
 80146e8:	0801df38 	.word	0x0801df38
 80146ec:	0801d908 	.word	0x0801d908

080146f0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80146f0:	b590      	push	{r4, r7, lr}
 80146f2:	b085      	sub	sp, #20
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d106      	bne.n	801470c <tcp_rexmit+0x1c>
 80146fe:	4b2f      	ldr	r3, [pc, #188]	; (80147bc <tcp_rexmit+0xcc>)
 8014700:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014704:	492e      	ldr	r1, [pc, #184]	; (80147c0 <tcp_rexmit+0xd0>)
 8014706:	482f      	ldr	r0, [pc, #188]	; (80147c4 <tcp_rexmit+0xd4>)
 8014708:	f006 f9ae 	bl	801aa68 <iprintf>

  if (pcb->unacked == NULL) {
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014710:	2b00      	cmp	r3, #0
 8014712:	d102      	bne.n	801471a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014714:	f06f 0305 	mvn.w	r3, #5
 8014718:	e04c      	b.n	80147b4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801471e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014720:	68b8      	ldr	r0, [r7, #8]
 8014722:	f7ff fe2d 	bl	8014380 <tcp_output_segment_busy>
 8014726:	4603      	mov	r3, r0
 8014728:	2b00      	cmp	r3, #0
 801472a:	d002      	beq.n	8014732 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801472c:	f06f 0305 	mvn.w	r3, #5
 8014730:	e040      	b.n	80147b4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014732:	68bb      	ldr	r3, [r7, #8]
 8014734:	681a      	ldr	r2, [r3, #0]
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	336c      	adds	r3, #108	; 0x6c
 801473e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014740:	e002      	b.n	8014748 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d011      	beq.n	8014774 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	68db      	ldr	r3, [r3, #12]
 8014756:	685b      	ldr	r3, [r3, #4]
 8014758:	4618      	mov	r0, r3
 801475a:	f7f9 fbee 	bl	800df3a <lwip_htonl>
 801475e:	4604      	mov	r4, r0
 8014760:	68bb      	ldr	r3, [r7, #8]
 8014762:	68db      	ldr	r3, [r3, #12]
 8014764:	685b      	ldr	r3, [r3, #4]
 8014766:	4618      	mov	r0, r3
 8014768:	f7f9 fbe7 	bl	800df3a <lwip_htonl>
 801476c:	4603      	mov	r3, r0
 801476e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014770:	2b00      	cmp	r3, #0
 8014772:	dbe6      	blt.n	8014742 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	681a      	ldr	r2, [r3, #0]
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	68ba      	ldr	r2, [r7, #8]
 8014780:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d103      	bne.n	8014792 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2200      	movs	r2, #0
 801478e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014798:	2bff      	cmp	r3, #255	; 0xff
 801479a:	d007      	beq.n	80147ac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80147a2:	3301      	adds	r3, #1
 80147a4:	b2da      	uxtb	r2, r3
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2200      	movs	r2, #0
 80147b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80147b2:	2300      	movs	r3, #0
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	3714      	adds	r7, #20
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd90      	pop	{r4, r7, pc}
 80147bc:	0801d8b4 	.word	0x0801d8b4
 80147c0:	0801df54 	.word	0x0801df54
 80147c4:	0801d908 	.word	0x0801d908

080147c8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b082      	sub	sp, #8
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d106      	bne.n	80147e4 <tcp_rexmit_fast+0x1c>
 80147d6:	4b2a      	ldr	r3, [pc, #168]	; (8014880 <tcp_rexmit_fast+0xb8>)
 80147d8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80147dc:	4929      	ldr	r1, [pc, #164]	; (8014884 <tcp_rexmit_fast+0xbc>)
 80147de:	482a      	ldr	r0, [pc, #168]	; (8014888 <tcp_rexmit_fast+0xc0>)
 80147e0:	f006 f942 	bl	801aa68 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d044      	beq.n	8014876 <tcp_rexmit_fast+0xae>
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	8b5b      	ldrh	r3, [r3, #26]
 80147f0:	f003 0304 	and.w	r3, r3, #4
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d13e      	bne.n	8014876 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f7ff ff79 	bl	80146f0 <tcp_rexmit>
 80147fe:	4603      	mov	r3, r0
 8014800:	2b00      	cmp	r3, #0
 8014802:	d138      	bne.n	8014876 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014810:	4293      	cmp	r3, r2
 8014812:	bf28      	it	cs
 8014814:	4613      	movcs	r3, r2
 8014816:	b29b      	uxth	r3, r3
 8014818:	0fda      	lsrs	r2, r3, #31
 801481a:	4413      	add	r3, r2
 801481c:	105b      	asrs	r3, r3, #1
 801481e:	b29a      	uxth	r2, r3
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801482c:	461a      	mov	r2, r3
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014832:	005b      	lsls	r3, r3, #1
 8014834:	429a      	cmp	r2, r3
 8014836:	d206      	bcs.n	8014846 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801483c:	005b      	lsls	r3, r3, #1
 801483e:	b29a      	uxth	r2, r3
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014850:	4619      	mov	r1, r3
 8014852:	0049      	lsls	r1, r1, #1
 8014854:	440b      	add	r3, r1
 8014856:	b29b      	uxth	r3, r3
 8014858:	4413      	add	r3, r2
 801485a:	b29a      	uxth	r2, r3
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	8b5b      	ldrh	r3, [r3, #26]
 8014866:	f043 0304 	orr.w	r3, r3, #4
 801486a:	b29a      	uxth	r2, r3
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2200      	movs	r2, #0
 8014874:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014876:	bf00      	nop
 8014878:	3708      	adds	r7, #8
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}
 801487e:	bf00      	nop
 8014880:	0801d8b4 	.word	0x0801d8b4
 8014884:	0801df6c 	.word	0x0801df6c
 8014888:	0801d908 	.word	0x0801d908

0801488c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b086      	sub	sp, #24
 8014890:	af00      	add	r7, sp, #0
 8014892:	60f8      	str	r0, [r7, #12]
 8014894:	607b      	str	r3, [r7, #4]
 8014896:	460b      	mov	r3, r1
 8014898:	817b      	strh	r3, [r7, #10]
 801489a:	4613      	mov	r3, r2
 801489c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801489e:	897a      	ldrh	r2, [r7, #10]
 80148a0:	893b      	ldrh	r3, [r7, #8]
 80148a2:	4413      	add	r3, r2
 80148a4:	b29b      	uxth	r3, r3
 80148a6:	3314      	adds	r3, #20
 80148a8:	b29b      	uxth	r3, r3
 80148aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80148ae:	4619      	mov	r1, r3
 80148b0:	2022      	movs	r0, #34	; 0x22
 80148b2:	f7fa fc01 	bl	800f0b8 <pbuf_alloc>
 80148b6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d04d      	beq.n	801495a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80148be:	897b      	ldrh	r3, [r7, #10]
 80148c0:	3313      	adds	r3, #19
 80148c2:	697a      	ldr	r2, [r7, #20]
 80148c4:	8952      	ldrh	r2, [r2, #10]
 80148c6:	4293      	cmp	r3, r2
 80148c8:	db06      	blt.n	80148d8 <tcp_output_alloc_header_common+0x4c>
 80148ca:	4b26      	ldr	r3, [pc, #152]	; (8014964 <tcp_output_alloc_header_common+0xd8>)
 80148cc:	f240 7223 	movw	r2, #1827	; 0x723
 80148d0:	4925      	ldr	r1, [pc, #148]	; (8014968 <tcp_output_alloc_header_common+0xdc>)
 80148d2:	4826      	ldr	r0, [pc, #152]	; (801496c <tcp_output_alloc_header_common+0xe0>)
 80148d4:	f006 f8c8 	bl	801aa68 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80148d8:	697b      	ldr	r3, [r7, #20]
 80148da:	685b      	ldr	r3, [r3, #4]
 80148dc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80148de:	8c3b      	ldrh	r3, [r7, #32]
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7f9 fb15 	bl	800df10 <lwip_htons>
 80148e6:	4603      	mov	r3, r0
 80148e8:	461a      	mov	r2, r3
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80148ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7f9 fb0d 	bl	800df10 <lwip_htons>
 80148f6:	4603      	mov	r3, r0
 80148f8:	461a      	mov	r2, r3
 80148fa:	693b      	ldr	r3, [r7, #16]
 80148fc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80148fe:	693b      	ldr	r3, [r7, #16]
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014904:	68f8      	ldr	r0, [r7, #12]
 8014906:	f7f9 fb18 	bl	800df3a <lwip_htonl>
 801490a:	4602      	mov	r2, r0
 801490c:	693b      	ldr	r3, [r7, #16]
 801490e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014910:	897b      	ldrh	r3, [r7, #10]
 8014912:	089b      	lsrs	r3, r3, #2
 8014914:	b29b      	uxth	r3, r3
 8014916:	3305      	adds	r3, #5
 8014918:	b29b      	uxth	r3, r3
 801491a:	031b      	lsls	r3, r3, #12
 801491c:	b29a      	uxth	r2, r3
 801491e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014922:	b29b      	uxth	r3, r3
 8014924:	4313      	orrs	r3, r2
 8014926:	b29b      	uxth	r3, r3
 8014928:	4618      	mov	r0, r3
 801492a:	f7f9 faf1 	bl	800df10 <lwip_htons>
 801492e:	4603      	mov	r3, r0
 8014930:	461a      	mov	r2, r3
 8014932:	693b      	ldr	r3, [r7, #16]
 8014934:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014936:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014938:	4618      	mov	r0, r3
 801493a:	f7f9 fae9 	bl	800df10 <lwip_htons>
 801493e:	4603      	mov	r3, r0
 8014940:	461a      	mov	r2, r3
 8014942:	693b      	ldr	r3, [r7, #16]
 8014944:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	2200      	movs	r2, #0
 801494a:	741a      	strb	r2, [r3, #16]
 801494c:	2200      	movs	r2, #0
 801494e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014950:	693b      	ldr	r3, [r7, #16]
 8014952:	2200      	movs	r2, #0
 8014954:	749a      	strb	r2, [r3, #18]
 8014956:	2200      	movs	r2, #0
 8014958:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801495a:	697b      	ldr	r3, [r7, #20]
}
 801495c:	4618      	mov	r0, r3
 801495e:	3718      	adds	r7, #24
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}
 8014964:	0801d8b4 	.word	0x0801d8b4
 8014968:	0801df8c 	.word	0x0801df8c
 801496c:	0801d908 	.word	0x0801d908

08014970 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014970:	b5b0      	push	{r4, r5, r7, lr}
 8014972:	b08a      	sub	sp, #40	; 0x28
 8014974:	af04      	add	r7, sp, #16
 8014976:	60f8      	str	r0, [r7, #12]
 8014978:	607b      	str	r3, [r7, #4]
 801497a:	460b      	mov	r3, r1
 801497c:	817b      	strh	r3, [r7, #10]
 801497e:	4613      	mov	r3, r2
 8014980:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d106      	bne.n	8014996 <tcp_output_alloc_header+0x26>
 8014988:	4b15      	ldr	r3, [pc, #84]	; (80149e0 <tcp_output_alloc_header+0x70>)
 801498a:	f240 7242 	movw	r2, #1858	; 0x742
 801498e:	4915      	ldr	r1, [pc, #84]	; (80149e4 <tcp_output_alloc_header+0x74>)
 8014990:	4815      	ldr	r0, [pc, #84]	; (80149e8 <tcp_output_alloc_header+0x78>)
 8014992:	f006 f869 	bl	801aa68 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	8adb      	ldrh	r3, [r3, #22]
 801499e:	68fa      	ldr	r2, [r7, #12]
 80149a0:	8b12      	ldrh	r2, [r2, #24]
 80149a2:	68f9      	ldr	r1, [r7, #12]
 80149a4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80149a6:	893d      	ldrh	r5, [r7, #8]
 80149a8:	897c      	ldrh	r4, [r7, #10]
 80149aa:	9103      	str	r1, [sp, #12]
 80149ac:	2110      	movs	r1, #16
 80149ae:	9102      	str	r1, [sp, #8]
 80149b0:	9201      	str	r2, [sp, #4]
 80149b2:	9300      	str	r3, [sp, #0]
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	462a      	mov	r2, r5
 80149b8:	4621      	mov	r1, r4
 80149ba:	f7ff ff67 	bl	801488c <tcp_output_alloc_header_common>
 80149be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80149c0:	697b      	ldr	r3, [r7, #20]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d006      	beq.n	80149d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ca:	68fa      	ldr	r2, [r7, #12]
 80149cc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80149ce:	441a      	add	r2, r3
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80149d4:	697b      	ldr	r3, [r7, #20]
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3718      	adds	r7, #24
 80149da:	46bd      	mov	sp, r7
 80149dc:	bdb0      	pop	{r4, r5, r7, pc}
 80149de:	bf00      	nop
 80149e0:	0801d8b4 	.word	0x0801d8b4
 80149e4:	0801dfbc 	.word	0x0801dfbc
 80149e8:	0801d908 	.word	0x0801d908

080149ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b088      	sub	sp, #32
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	60f8      	str	r0, [r7, #12]
 80149f4:	60b9      	str	r1, [r7, #8]
 80149f6:	4611      	mov	r1, r2
 80149f8:	461a      	mov	r2, r3
 80149fa:	460b      	mov	r3, r1
 80149fc:	71fb      	strb	r3, [r7, #7]
 80149fe:	4613      	mov	r3, r2
 8014a00:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014a02:	2300      	movs	r3, #0
 8014a04:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d106      	bne.n	8014a1a <tcp_output_fill_options+0x2e>
 8014a0c:	4b13      	ldr	r3, [pc, #76]	; (8014a5c <tcp_output_fill_options+0x70>)
 8014a0e:	f240 7256 	movw	r2, #1878	; 0x756
 8014a12:	4913      	ldr	r1, [pc, #76]	; (8014a60 <tcp_output_fill_options+0x74>)
 8014a14:	4813      	ldr	r0, [pc, #76]	; (8014a64 <tcp_output_fill_options+0x78>)
 8014a16:	f006 f827 	bl	801aa68 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	685b      	ldr	r3, [r3, #4]
 8014a1e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014a20:	69bb      	ldr	r3, [r7, #24]
 8014a22:	3314      	adds	r3, #20
 8014a24:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014a26:	69bb      	ldr	r3, [r7, #24]
 8014a28:	f103 0214 	add.w	r2, r3, #20
 8014a2c:	8bfb      	ldrh	r3, [r7, #30]
 8014a2e:	009b      	lsls	r3, r3, #2
 8014a30:	4619      	mov	r1, r3
 8014a32:	79fb      	ldrb	r3, [r7, #7]
 8014a34:	009b      	lsls	r3, r3, #2
 8014a36:	f003 0304 	and.w	r3, r3, #4
 8014a3a:	440b      	add	r3, r1
 8014a3c:	4413      	add	r3, r2
 8014a3e:	697a      	ldr	r2, [r7, #20]
 8014a40:	429a      	cmp	r2, r3
 8014a42:	d006      	beq.n	8014a52 <tcp_output_fill_options+0x66>
 8014a44:	4b05      	ldr	r3, [pc, #20]	; (8014a5c <tcp_output_fill_options+0x70>)
 8014a46:	f240 7275 	movw	r2, #1909	; 0x775
 8014a4a:	4907      	ldr	r1, [pc, #28]	; (8014a68 <tcp_output_fill_options+0x7c>)
 8014a4c:	4805      	ldr	r0, [pc, #20]	; (8014a64 <tcp_output_fill_options+0x78>)
 8014a4e:	f006 f80b 	bl	801aa68 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014a52:	bf00      	nop
 8014a54:	3720      	adds	r7, #32
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}
 8014a5a:	bf00      	nop
 8014a5c:	0801d8b4 	.word	0x0801d8b4
 8014a60:	0801dfe4 	.word	0x0801dfe4
 8014a64:	0801d908 	.word	0x0801d908
 8014a68:	0801dedc 	.word	0x0801dedc

08014a6c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b08a      	sub	sp, #40	; 0x28
 8014a70:	af04      	add	r7, sp, #16
 8014a72:	60f8      	str	r0, [r7, #12]
 8014a74:	60b9      	str	r1, [r7, #8]
 8014a76:	607a      	str	r2, [r7, #4]
 8014a78:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d106      	bne.n	8014a8e <tcp_output_control_segment+0x22>
 8014a80:	4b1c      	ldr	r3, [pc, #112]	; (8014af4 <tcp_output_control_segment+0x88>)
 8014a82:	f240 7287 	movw	r2, #1927	; 0x787
 8014a86:	491c      	ldr	r1, [pc, #112]	; (8014af8 <tcp_output_control_segment+0x8c>)
 8014a88:	481c      	ldr	r0, [pc, #112]	; (8014afc <tcp_output_control_segment+0x90>)
 8014a8a:	f005 ffed 	bl	801aa68 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014a8e:	683a      	ldr	r2, [r7, #0]
 8014a90:	6879      	ldr	r1, [r7, #4]
 8014a92:	68f8      	ldr	r0, [r7, #12]
 8014a94:	f7fe ff40 	bl	8013918 <tcp_route>
 8014a98:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014a9a:	693b      	ldr	r3, [r7, #16]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d102      	bne.n	8014aa6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014aa0:	23fc      	movs	r3, #252	; 0xfc
 8014aa2:	75fb      	strb	r3, [r7, #23]
 8014aa4:	e01c      	b.n	8014ae0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d006      	beq.n	8014aba <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	7adb      	ldrb	r3, [r3, #11]
 8014ab0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	7a9b      	ldrb	r3, [r3, #10]
 8014ab6:	757b      	strb	r3, [r7, #21]
 8014ab8:	e003      	b.n	8014ac2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014aba:	23ff      	movs	r3, #255	; 0xff
 8014abc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014ac2:	7dba      	ldrb	r2, [r7, #22]
 8014ac4:	693b      	ldr	r3, [r7, #16]
 8014ac6:	9302      	str	r3, [sp, #8]
 8014ac8:	2306      	movs	r3, #6
 8014aca:	9301      	str	r3, [sp, #4]
 8014acc:	7d7b      	ldrb	r3, [r7, #21]
 8014ace:	9300      	str	r3, [sp, #0]
 8014ad0:	4613      	mov	r3, r2
 8014ad2:	683a      	ldr	r2, [r7, #0]
 8014ad4:	6879      	ldr	r1, [r7, #4]
 8014ad6:	68b8      	ldr	r0, [r7, #8]
 8014ad8:	f004 f956 	bl	8018d88 <ip4_output_if>
 8014adc:	4603      	mov	r3, r0
 8014ade:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014ae0:	68b8      	ldr	r0, [r7, #8]
 8014ae2:	f7fa fdcd 	bl	800f680 <pbuf_free>
  return err;
 8014ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014aea:	4618      	mov	r0, r3
 8014aec:	3718      	adds	r7, #24
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}
 8014af2:	bf00      	nop
 8014af4:	0801d8b4 	.word	0x0801d8b4
 8014af8:	0801e00c 	.word	0x0801e00c
 8014afc:	0801d908 	.word	0x0801d908

08014b00 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014b00:	b590      	push	{r4, r7, lr}
 8014b02:	b08b      	sub	sp, #44	; 0x2c
 8014b04:	af04      	add	r7, sp, #16
 8014b06:	60f8      	str	r0, [r7, #12]
 8014b08:	60b9      	str	r1, [r7, #8]
 8014b0a:	607a      	str	r2, [r7, #4]
 8014b0c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d106      	bne.n	8014b22 <tcp_rst+0x22>
 8014b14:	4b1f      	ldr	r3, [pc, #124]	; (8014b94 <tcp_rst+0x94>)
 8014b16:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014b1a:	491f      	ldr	r1, [pc, #124]	; (8014b98 <tcp_rst+0x98>)
 8014b1c:	481f      	ldr	r0, [pc, #124]	; (8014b9c <tcp_rst+0x9c>)
 8014b1e:	f005 ffa3 	bl	801aa68 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d106      	bne.n	8014b36 <tcp_rst+0x36>
 8014b28:	4b1a      	ldr	r3, [pc, #104]	; (8014b94 <tcp_rst+0x94>)
 8014b2a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014b2e:	491c      	ldr	r1, [pc, #112]	; (8014ba0 <tcp_rst+0xa0>)
 8014b30:	481a      	ldr	r0, [pc, #104]	; (8014b9c <tcp_rst+0x9c>)
 8014b32:	f005 ff99 	bl	801aa68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b36:	2300      	movs	r3, #0
 8014b38:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014b3a:	f246 0308 	movw	r3, #24584	; 0x6008
 8014b3e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014b40:	7dfb      	ldrb	r3, [r7, #23]
 8014b42:	b29c      	uxth	r4, r3
 8014b44:	68b8      	ldr	r0, [r7, #8]
 8014b46:	f7f9 f9f8 	bl	800df3a <lwip_htonl>
 8014b4a:	4602      	mov	r2, r0
 8014b4c:	8abb      	ldrh	r3, [r7, #20]
 8014b4e:	9303      	str	r3, [sp, #12]
 8014b50:	2314      	movs	r3, #20
 8014b52:	9302      	str	r3, [sp, #8]
 8014b54:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014b56:	9301      	str	r3, [sp, #4]
 8014b58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014b5a:	9300      	str	r3, [sp, #0]
 8014b5c:	4613      	mov	r3, r2
 8014b5e:	2200      	movs	r2, #0
 8014b60:	4621      	mov	r1, r4
 8014b62:	6878      	ldr	r0, [r7, #4]
 8014b64:	f7ff fe92 	bl	801488c <tcp_output_alloc_header_common>
 8014b68:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014b6a:	693b      	ldr	r3, [r7, #16]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d00c      	beq.n	8014b8a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014b70:	7dfb      	ldrb	r3, [r7, #23]
 8014b72:	2200      	movs	r2, #0
 8014b74:	6939      	ldr	r1, [r7, #16]
 8014b76:	68f8      	ldr	r0, [r7, #12]
 8014b78:	f7ff ff38 	bl	80149ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b7e:	683a      	ldr	r2, [r7, #0]
 8014b80:	6939      	ldr	r1, [r7, #16]
 8014b82:	68f8      	ldr	r0, [r7, #12]
 8014b84:	f7ff ff72 	bl	8014a6c <tcp_output_control_segment>
 8014b88:	e000      	b.n	8014b8c <tcp_rst+0x8c>
    return;
 8014b8a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014b8c:	371c      	adds	r7, #28
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd90      	pop	{r4, r7, pc}
 8014b92:	bf00      	nop
 8014b94:	0801d8b4 	.word	0x0801d8b4
 8014b98:	0801e038 	.word	0x0801e038
 8014b9c:	0801d908 	.word	0x0801d908
 8014ba0:	0801e054 	.word	0x0801e054

08014ba4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014ba4:	b590      	push	{r4, r7, lr}
 8014ba6:	b087      	sub	sp, #28
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014bac:	2300      	movs	r3, #0
 8014bae:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d106      	bne.n	8014bc8 <tcp_send_empty_ack+0x24>
 8014bba:	4b28      	ldr	r3, [pc, #160]	; (8014c5c <tcp_send_empty_ack+0xb8>)
 8014bbc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014bc0:	4927      	ldr	r1, [pc, #156]	; (8014c60 <tcp_send_empty_ack+0xbc>)
 8014bc2:	4828      	ldr	r0, [pc, #160]	; (8014c64 <tcp_send_empty_ack+0xc0>)
 8014bc4:	f005 ff50 	bl	801aa68 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014bc8:	7dfb      	ldrb	r3, [r7, #23]
 8014bca:	009b      	lsls	r3, r3, #2
 8014bcc:	b2db      	uxtb	r3, r3
 8014bce:	f003 0304 	and.w	r3, r3, #4
 8014bd2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014bd4:	7d7b      	ldrb	r3, [r7, #21]
 8014bd6:	b29c      	uxth	r4, r3
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7f9 f9ac 	bl	800df3a <lwip_htonl>
 8014be2:	4603      	mov	r3, r0
 8014be4:	2200      	movs	r2, #0
 8014be6:	4621      	mov	r1, r4
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f7ff fec1 	bl	8014970 <tcp_output_alloc_header>
 8014bee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014bf0:	693b      	ldr	r3, [r7, #16]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d109      	bne.n	8014c0a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	8b5b      	ldrh	r3, [r3, #26]
 8014bfa:	f043 0303 	orr.w	r3, r3, #3
 8014bfe:	b29a      	uxth	r2, r3
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014c04:	f06f 0301 	mvn.w	r3, #1
 8014c08:	e023      	b.n	8014c52 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014c0a:	7dbb      	ldrb	r3, [r7, #22]
 8014c0c:	7dfa      	ldrb	r2, [r7, #23]
 8014c0e:	6939      	ldr	r1, [r7, #16]
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f7ff feeb 	bl	80149ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014c16:	687a      	ldr	r2, [r7, #4]
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	3304      	adds	r3, #4
 8014c1c:	6939      	ldr	r1, [r7, #16]
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f7ff ff24 	bl	8014a6c <tcp_output_control_segment>
 8014c24:	4603      	mov	r3, r0
 8014c26:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d007      	beq.n	8014c40 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	8b5b      	ldrh	r3, [r3, #26]
 8014c34:	f043 0303 	orr.w	r3, r3, #3
 8014c38:	b29a      	uxth	r2, r3
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	835a      	strh	r2, [r3, #26]
 8014c3e:	e006      	b.n	8014c4e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	8b5b      	ldrh	r3, [r3, #26]
 8014c44:	f023 0303 	bic.w	r3, r3, #3
 8014c48:	b29a      	uxth	r2, r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014c52:	4618      	mov	r0, r3
 8014c54:	371c      	adds	r7, #28
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd90      	pop	{r4, r7, pc}
 8014c5a:	bf00      	nop
 8014c5c:	0801d8b4 	.word	0x0801d8b4
 8014c60:	0801e070 	.word	0x0801e070
 8014c64:	0801d908 	.word	0x0801d908

08014c68 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014c68:	b590      	push	{r4, r7, lr}
 8014c6a:	b087      	sub	sp, #28
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014c70:	2300      	movs	r3, #0
 8014c72:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d106      	bne.n	8014c88 <tcp_keepalive+0x20>
 8014c7a:	4b18      	ldr	r3, [pc, #96]	; (8014cdc <tcp_keepalive+0x74>)
 8014c7c:	f640 0224 	movw	r2, #2084	; 0x824
 8014c80:	4917      	ldr	r1, [pc, #92]	; (8014ce0 <tcp_keepalive+0x78>)
 8014c82:	4818      	ldr	r0, [pc, #96]	; (8014ce4 <tcp_keepalive+0x7c>)
 8014c84:	f005 fef0 	bl	801aa68 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014c88:	7dfb      	ldrb	r3, [r7, #23]
 8014c8a:	b29c      	uxth	r4, r3
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c90:	3b01      	subs	r3, #1
 8014c92:	4618      	mov	r0, r3
 8014c94:	f7f9 f951 	bl	800df3a <lwip_htonl>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	4621      	mov	r1, r4
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	f7ff fe66 	bl	8014970 <tcp_output_alloc_header>
 8014ca4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d102      	bne.n	8014cb2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014cac:	f04f 33ff 	mov.w	r3, #4294967295
 8014cb0:	e010      	b.n	8014cd4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014cb2:	7dfb      	ldrb	r3, [r7, #23]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	6939      	ldr	r1, [r7, #16]
 8014cb8:	6878      	ldr	r0, [r7, #4]
 8014cba:	f7ff fe97 	bl	80149ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014cbe:	687a      	ldr	r2, [r7, #4]
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	3304      	adds	r3, #4
 8014cc4:	6939      	ldr	r1, [r7, #16]
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	f7ff fed0 	bl	8014a6c <tcp_output_control_segment>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	371c      	adds	r7, #28
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd90      	pop	{r4, r7, pc}
 8014cdc:	0801d8b4 	.word	0x0801d8b4
 8014ce0:	0801e090 	.word	0x0801e090
 8014ce4:	0801d908 	.word	0x0801d908

08014ce8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014ce8:	b590      	push	{r4, r7, lr}
 8014cea:	b08b      	sub	sp, #44	; 0x2c
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d106      	bne.n	8014d0a <tcp_zero_window_probe+0x22>
 8014cfc:	4b4c      	ldr	r3, [pc, #304]	; (8014e30 <tcp_zero_window_probe+0x148>)
 8014cfe:	f640 024f 	movw	r2, #2127	; 0x84f
 8014d02:	494c      	ldr	r1, [pc, #304]	; (8014e34 <tcp_zero_window_probe+0x14c>)
 8014d04:	484c      	ldr	r0, [pc, #304]	; (8014e38 <tcp_zero_window_probe+0x150>)
 8014d06:	f005 feaf 	bl	801aa68 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d0e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014d10:	6a3b      	ldr	r3, [r7, #32]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d101      	bne.n	8014d1a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014d16:	2300      	movs	r3, #0
 8014d18:	e086      	b.n	8014e28 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014d20:	2bff      	cmp	r3, #255	; 0xff
 8014d22:	d007      	beq.n	8014d34 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014d2a:	3301      	adds	r3, #1
 8014d2c:	b2da      	uxtb	r2, r3
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014d34:	6a3b      	ldr	r3, [r7, #32]
 8014d36:	68db      	ldr	r3, [r3, #12]
 8014d38:	899b      	ldrh	r3, [r3, #12]
 8014d3a:	b29b      	uxth	r3, r3
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7f9 f8e7 	bl	800df10 <lwip_htons>
 8014d42:	4603      	mov	r3, r0
 8014d44:	b2db      	uxtb	r3, r3
 8014d46:	f003 0301 	and.w	r3, r3, #1
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d005      	beq.n	8014d5a <tcp_zero_window_probe+0x72>
 8014d4e:	6a3b      	ldr	r3, [r7, #32]
 8014d50:	891b      	ldrh	r3, [r3, #8]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d101      	bne.n	8014d5a <tcp_zero_window_probe+0x72>
 8014d56:	2301      	movs	r3, #1
 8014d58:	e000      	b.n	8014d5c <tcp_zero_window_probe+0x74>
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014d5e:	7ffb      	ldrb	r3, [r7, #31]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	bf0c      	ite	eq
 8014d64:	2301      	moveq	r3, #1
 8014d66:	2300      	movne	r3, #0
 8014d68:	b2db      	uxtb	r3, r3
 8014d6a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d70:	b299      	uxth	r1, r3
 8014d72:	6a3b      	ldr	r3, [r7, #32]
 8014d74:	68db      	ldr	r3, [r3, #12]
 8014d76:	685b      	ldr	r3, [r3, #4]
 8014d78:	8bba      	ldrh	r2, [r7, #28]
 8014d7a:	6878      	ldr	r0, [r7, #4]
 8014d7c:	f7ff fdf8 	bl	8014970 <tcp_output_alloc_header>
 8014d80:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014d82:	69bb      	ldr	r3, [r7, #24]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d102      	bne.n	8014d8e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014d88:	f04f 33ff 	mov.w	r3, #4294967295
 8014d8c:	e04c      	b.n	8014e28 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014d8e:	69bb      	ldr	r3, [r7, #24]
 8014d90:	685b      	ldr	r3, [r3, #4]
 8014d92:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014d94:	7ffb      	ldrb	r3, [r7, #31]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d011      	beq.n	8014dbe <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014d9a:	697b      	ldr	r3, [r7, #20]
 8014d9c:	899b      	ldrh	r3, [r3, #12]
 8014d9e:	b29b      	uxth	r3, r3
 8014da0:	b21b      	sxth	r3, r3
 8014da2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014da6:	b21c      	sxth	r4, r3
 8014da8:	2011      	movs	r0, #17
 8014daa:	f7f9 f8b1 	bl	800df10 <lwip_htons>
 8014dae:	4603      	mov	r3, r0
 8014db0:	b21b      	sxth	r3, r3
 8014db2:	4323      	orrs	r3, r4
 8014db4:	b21b      	sxth	r3, r3
 8014db6:	b29a      	uxth	r2, r3
 8014db8:	697b      	ldr	r3, [r7, #20]
 8014dba:	819a      	strh	r2, [r3, #12]
 8014dbc:	e010      	b.n	8014de0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014dbe:	69bb      	ldr	r3, [r7, #24]
 8014dc0:	685b      	ldr	r3, [r3, #4]
 8014dc2:	3314      	adds	r3, #20
 8014dc4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014dc6:	6a3b      	ldr	r3, [r7, #32]
 8014dc8:	6858      	ldr	r0, [r3, #4]
 8014dca:	6a3b      	ldr	r3, [r7, #32]
 8014dcc:	685b      	ldr	r3, [r3, #4]
 8014dce:	891a      	ldrh	r2, [r3, #8]
 8014dd0:	6a3b      	ldr	r3, [r7, #32]
 8014dd2:	891b      	ldrh	r3, [r3, #8]
 8014dd4:	1ad3      	subs	r3, r2, r3
 8014dd6:	b29b      	uxth	r3, r3
 8014dd8:	2201      	movs	r2, #1
 8014dda:	6939      	ldr	r1, [r7, #16]
 8014ddc:	f7fa fe56 	bl	800fa8c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014de0:	6a3b      	ldr	r3, [r7, #32]
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	685b      	ldr	r3, [r3, #4]
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7f9 f8a7 	bl	800df3a <lwip_htonl>
 8014dec:	4603      	mov	r3, r0
 8014dee:	3301      	adds	r3, #1
 8014df0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	1ad3      	subs	r3, r2, r3
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	da02      	bge.n	8014e04 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	68fa      	ldr	r2, [r7, #12]
 8014e02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e08:	2200      	movs	r2, #0
 8014e0a:	69b9      	ldr	r1, [r7, #24]
 8014e0c:	6878      	ldr	r0, [r7, #4]
 8014e0e:	f7ff fded 	bl	80149ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014e12:	687a      	ldr	r2, [r7, #4]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	3304      	adds	r3, #4
 8014e18:	69b9      	ldr	r1, [r7, #24]
 8014e1a:	6878      	ldr	r0, [r7, #4]
 8014e1c:	f7ff fe26 	bl	8014a6c <tcp_output_control_segment>
 8014e20:	4603      	mov	r3, r0
 8014e22:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014e24:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014e28:	4618      	mov	r0, r3
 8014e2a:	372c      	adds	r7, #44	; 0x2c
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd90      	pop	{r4, r7, pc}
 8014e30:	0801d8b4 	.word	0x0801d8b4
 8014e34:	0801e0ac 	.word	0x0801e0ac
 8014e38:	0801d908 	.word	0x0801d908

08014e3c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b082      	sub	sp, #8
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014e44:	f7fa ff10 	bl	800fc68 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014e48:	4b0a      	ldr	r3, [pc, #40]	; (8014e74 <tcpip_tcp_timer+0x38>)
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d103      	bne.n	8014e58 <tcpip_tcp_timer+0x1c>
 8014e50:	4b09      	ldr	r3, [pc, #36]	; (8014e78 <tcpip_tcp_timer+0x3c>)
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d005      	beq.n	8014e64 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014e58:	2200      	movs	r2, #0
 8014e5a:	4908      	ldr	r1, [pc, #32]	; (8014e7c <tcpip_tcp_timer+0x40>)
 8014e5c:	20fa      	movs	r0, #250	; 0xfa
 8014e5e:	f000 f8f3 	bl	8015048 <sys_timeout>
 8014e62:	e003      	b.n	8014e6c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014e64:	4b06      	ldr	r3, [pc, #24]	; (8014e80 <tcpip_tcp_timer+0x44>)
 8014e66:	2200      	movs	r2, #0
 8014e68:	601a      	str	r2, [r3, #0]
  }
}
 8014e6a:	bf00      	nop
 8014e6c:	bf00      	nop
 8014e6e:	3708      	adds	r7, #8
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}
 8014e74:	2000f3f8 	.word	0x2000f3f8
 8014e78:	2000f408 	.word	0x2000f408
 8014e7c:	08014e3d 	.word	0x08014e3d
 8014e80:	20008574 	.word	0x20008574

08014e84 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014e88:	4b0a      	ldr	r3, [pc, #40]	; (8014eb4 <tcp_timer_needed+0x30>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d10f      	bne.n	8014eb0 <tcp_timer_needed+0x2c>
 8014e90:	4b09      	ldr	r3, [pc, #36]	; (8014eb8 <tcp_timer_needed+0x34>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d103      	bne.n	8014ea0 <tcp_timer_needed+0x1c>
 8014e98:	4b08      	ldr	r3, [pc, #32]	; (8014ebc <tcp_timer_needed+0x38>)
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d007      	beq.n	8014eb0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014ea0:	4b04      	ldr	r3, [pc, #16]	; (8014eb4 <tcp_timer_needed+0x30>)
 8014ea2:	2201      	movs	r2, #1
 8014ea4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	4905      	ldr	r1, [pc, #20]	; (8014ec0 <tcp_timer_needed+0x3c>)
 8014eaa:	20fa      	movs	r0, #250	; 0xfa
 8014eac:	f000 f8cc 	bl	8015048 <sys_timeout>
  }
}
 8014eb0:	bf00      	nop
 8014eb2:	bd80      	pop	{r7, pc}
 8014eb4:	20008574 	.word	0x20008574
 8014eb8:	2000f3f8 	.word	0x2000f3f8
 8014ebc:	2000f408 	.word	0x2000f408
 8014ec0:	08014e3d 	.word	0x08014e3d

08014ec4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b086      	sub	sp, #24
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	60f8      	str	r0, [r7, #12]
 8014ecc:	60b9      	str	r1, [r7, #8]
 8014ece:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014ed0:	200a      	movs	r0, #10
 8014ed2:	f7f9 fcd3 	bl	800e87c <memp_malloc>
 8014ed6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d109      	bne.n	8014ef2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014ede:	693b      	ldr	r3, [r7, #16]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d151      	bne.n	8014f88 <sys_timeout_abs+0xc4>
 8014ee4:	4b2a      	ldr	r3, [pc, #168]	; (8014f90 <sys_timeout_abs+0xcc>)
 8014ee6:	22be      	movs	r2, #190	; 0xbe
 8014ee8:	492a      	ldr	r1, [pc, #168]	; (8014f94 <sys_timeout_abs+0xd0>)
 8014eea:	482b      	ldr	r0, [pc, #172]	; (8014f98 <sys_timeout_abs+0xd4>)
 8014eec:	f005 fdbc 	bl	801aa68 <iprintf>
    return;
 8014ef0:	e04a      	b.n	8014f88 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014ef2:	693b      	ldr	r3, [r7, #16]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014ef8:	693b      	ldr	r3, [r7, #16]
 8014efa:	68ba      	ldr	r2, [r7, #8]
 8014efc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014efe:	693b      	ldr	r3, [r7, #16]
 8014f00:	687a      	ldr	r2, [r7, #4]
 8014f02:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014f04:	693b      	ldr	r3, [r7, #16]
 8014f06:	68fa      	ldr	r2, [r7, #12]
 8014f08:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014f0a:	4b24      	ldr	r3, [pc, #144]	; (8014f9c <sys_timeout_abs+0xd8>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d103      	bne.n	8014f1a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014f12:	4a22      	ldr	r2, [pc, #136]	; (8014f9c <sys_timeout_abs+0xd8>)
 8014f14:	693b      	ldr	r3, [r7, #16]
 8014f16:	6013      	str	r3, [r2, #0]
    return;
 8014f18:	e037      	b.n	8014f8a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014f1a:	693b      	ldr	r3, [r7, #16]
 8014f1c:	685a      	ldr	r2, [r3, #4]
 8014f1e:	4b1f      	ldr	r3, [pc, #124]	; (8014f9c <sys_timeout_abs+0xd8>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	685b      	ldr	r3, [r3, #4]
 8014f24:	1ad3      	subs	r3, r2, r3
 8014f26:	0fdb      	lsrs	r3, r3, #31
 8014f28:	f003 0301 	and.w	r3, r3, #1
 8014f2c:	b2db      	uxtb	r3, r3
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d007      	beq.n	8014f42 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014f32:	4b1a      	ldr	r3, [pc, #104]	; (8014f9c <sys_timeout_abs+0xd8>)
 8014f34:	681a      	ldr	r2, [r3, #0]
 8014f36:	693b      	ldr	r3, [r7, #16]
 8014f38:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014f3a:	4a18      	ldr	r2, [pc, #96]	; (8014f9c <sys_timeout_abs+0xd8>)
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	6013      	str	r3, [r2, #0]
 8014f40:	e023      	b.n	8014f8a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014f42:	4b16      	ldr	r3, [pc, #88]	; (8014f9c <sys_timeout_abs+0xd8>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	617b      	str	r3, [r7, #20]
 8014f48:	e01a      	b.n	8014f80 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014f4a:	697b      	ldr	r3, [r7, #20]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d00b      	beq.n	8014f6a <sys_timeout_abs+0xa6>
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	685a      	ldr	r2, [r3, #4]
 8014f56:	697b      	ldr	r3, [r7, #20]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	685b      	ldr	r3, [r3, #4]
 8014f5c:	1ad3      	subs	r3, r2, r3
 8014f5e:	0fdb      	lsrs	r3, r3, #31
 8014f60:	f003 0301 	and.w	r3, r3, #1
 8014f64:	b2db      	uxtb	r3, r3
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d007      	beq.n	8014f7a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014f6a:	697b      	ldr	r3, [r7, #20]
 8014f6c:	681a      	ldr	r2, [r3, #0]
 8014f6e:	693b      	ldr	r3, [r7, #16]
 8014f70:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014f72:	697b      	ldr	r3, [r7, #20]
 8014f74:	693a      	ldr	r2, [r7, #16]
 8014f76:	601a      	str	r2, [r3, #0]
        break;
 8014f78:	e007      	b.n	8014f8a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014f7a:	697b      	ldr	r3, [r7, #20]
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	617b      	str	r3, [r7, #20]
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d1e1      	bne.n	8014f4a <sys_timeout_abs+0x86>
 8014f86:	e000      	b.n	8014f8a <sys_timeout_abs+0xc6>
    return;
 8014f88:	bf00      	nop
      }
    }
  }
}
 8014f8a:	3718      	adds	r7, #24
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}
 8014f90:	0801e0d0 	.word	0x0801e0d0
 8014f94:	0801e104 	.word	0x0801e104
 8014f98:	0801e144 	.word	0x0801e144
 8014f9c:	2000856c 	.word	0x2000856c

08014fa0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b086      	sub	sp, #24
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	685b      	ldr	r3, [r3, #4]
 8014fb0:	4798      	blx	r3

  now = sys_now();
 8014fb2:	f7f2 f8b1 	bl	8007118 <sys_now>
 8014fb6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014fb8:	697b      	ldr	r3, [r7, #20]
 8014fba:	681a      	ldr	r2, [r3, #0]
 8014fbc:	4b0f      	ldr	r3, [pc, #60]	; (8014ffc <lwip_cyclic_timer+0x5c>)
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	4413      	add	r3, r2
 8014fc2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014fc4:	68fa      	ldr	r2, [r7, #12]
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	1ad3      	subs	r3, r2, r3
 8014fca:	0fdb      	lsrs	r3, r3, #31
 8014fcc:	f003 0301 	and.w	r3, r3, #1
 8014fd0:	b2db      	uxtb	r3, r3
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d009      	beq.n	8014fea <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014fd6:	697b      	ldr	r3, [r7, #20]
 8014fd8:	681a      	ldr	r2, [r3, #0]
 8014fda:	693b      	ldr	r3, [r7, #16]
 8014fdc:	4413      	add	r3, r2
 8014fde:	687a      	ldr	r2, [r7, #4]
 8014fe0:	4907      	ldr	r1, [pc, #28]	; (8015000 <lwip_cyclic_timer+0x60>)
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7ff ff6e 	bl	8014ec4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014fe8:	e004      	b.n	8014ff4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014fea:	687a      	ldr	r2, [r7, #4]
 8014fec:	4904      	ldr	r1, [pc, #16]	; (8015000 <lwip_cyclic_timer+0x60>)
 8014fee:	68f8      	ldr	r0, [r7, #12]
 8014ff0:	f7ff ff68 	bl	8014ec4 <sys_timeout_abs>
}
 8014ff4:	bf00      	nop
 8014ff6:	3718      	adds	r7, #24
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}
 8014ffc:	20008570 	.word	0x20008570
 8015000:	08014fa1 	.word	0x08014fa1

08015004 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b082      	sub	sp, #8
 8015008:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801500a:	2301      	movs	r3, #1
 801500c:	607b      	str	r3, [r7, #4]
 801500e:	e00e      	b.n	801502e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015010:	4a0b      	ldr	r2, [pc, #44]	; (8015040 <sys_timeouts_init+0x3c>)
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	00db      	lsls	r3, r3, #3
 801501c:	4a08      	ldr	r2, [pc, #32]	; (8015040 <sys_timeouts_init+0x3c>)
 801501e:	4413      	add	r3, r2
 8015020:	461a      	mov	r2, r3
 8015022:	4908      	ldr	r1, [pc, #32]	; (8015044 <sys_timeouts_init+0x40>)
 8015024:	f000 f810 	bl	8015048 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	3301      	adds	r3, #1
 801502c:	607b      	str	r3, [r7, #4]
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	2b04      	cmp	r3, #4
 8015032:	d9ed      	bls.n	8015010 <sys_timeouts_init+0xc>
  }
}
 8015034:	bf00      	nop
 8015036:	bf00      	nop
 8015038:	3708      	adds	r7, #8
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}
 801503e:	bf00      	nop
 8015040:	0801f0a4 	.word	0x0801f0a4
 8015044:	08014fa1 	.word	0x08014fa1

08015048 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b086      	sub	sp, #24
 801504c:	af00      	add	r7, sp, #0
 801504e:	60f8      	str	r0, [r7, #12]
 8015050:	60b9      	str	r1, [r7, #8]
 8015052:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801505a:	d306      	bcc.n	801506a <sys_timeout+0x22>
 801505c:	4b0a      	ldr	r3, [pc, #40]	; (8015088 <sys_timeout+0x40>)
 801505e:	f240 1229 	movw	r2, #297	; 0x129
 8015062:	490a      	ldr	r1, [pc, #40]	; (801508c <sys_timeout+0x44>)
 8015064:	480a      	ldr	r0, [pc, #40]	; (8015090 <sys_timeout+0x48>)
 8015066:	f005 fcff 	bl	801aa68 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801506a:	f7f2 f855 	bl	8007118 <sys_now>
 801506e:	4602      	mov	r2, r0
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	4413      	add	r3, r2
 8015074:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015076:	687a      	ldr	r2, [r7, #4]
 8015078:	68b9      	ldr	r1, [r7, #8]
 801507a:	6978      	ldr	r0, [r7, #20]
 801507c:	f7ff ff22 	bl	8014ec4 <sys_timeout_abs>
#endif
}
 8015080:	bf00      	nop
 8015082:	3718      	adds	r7, #24
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}
 8015088:	0801e0d0 	.word	0x0801e0d0
 801508c:	0801e16c 	.word	0x0801e16c
 8015090:	0801e144 	.word	0x0801e144

08015094 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b084      	sub	sp, #16
 8015098:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801509a:	f7f2 f83d 	bl	8007118 <sys_now>
 801509e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80150a0:	4b17      	ldr	r3, [pc, #92]	; (8015100 <sys_check_timeouts+0x6c>)
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80150a6:	68bb      	ldr	r3, [r7, #8]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d022      	beq.n	80150f2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80150ac:	68bb      	ldr	r3, [r7, #8]
 80150ae:	685b      	ldr	r3, [r3, #4]
 80150b0:	68fa      	ldr	r2, [r7, #12]
 80150b2:	1ad3      	subs	r3, r2, r3
 80150b4:	0fdb      	lsrs	r3, r3, #31
 80150b6:	f003 0301 	and.w	r3, r3, #1
 80150ba:	b2db      	uxtb	r3, r3
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d11a      	bne.n	80150f6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80150c0:	68bb      	ldr	r3, [r7, #8]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	4a0e      	ldr	r2, [pc, #56]	; (8015100 <sys_check_timeouts+0x6c>)
 80150c6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80150c8:	68bb      	ldr	r3, [r7, #8]
 80150ca:	689b      	ldr	r3, [r3, #8]
 80150cc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	68db      	ldr	r3, [r3, #12]
 80150d2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80150d4:	68bb      	ldr	r3, [r7, #8]
 80150d6:	685b      	ldr	r3, [r3, #4]
 80150d8:	4a0a      	ldr	r2, [pc, #40]	; (8015104 <sys_check_timeouts+0x70>)
 80150da:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80150dc:	68b9      	ldr	r1, [r7, #8]
 80150de:	200a      	movs	r0, #10
 80150e0:	f7f9 fc1e 	bl	800e920 <memp_free>
    if (handler != NULL) {
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d0da      	beq.n	80150a0 <sys_check_timeouts+0xc>
      handler(arg);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	6838      	ldr	r0, [r7, #0]
 80150ee:	4798      	blx	r3
  do {
 80150f0:	e7d6      	b.n	80150a0 <sys_check_timeouts+0xc>
      return;
 80150f2:	bf00      	nop
 80150f4:	e000      	b.n	80150f8 <sys_check_timeouts+0x64>
      return;
 80150f6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80150f8:	3710      	adds	r7, #16
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}
 80150fe:	bf00      	nop
 8015100:	2000856c 	.word	0x2000856c
 8015104:	20008570 	.word	0x20008570

08015108 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801510e:	4b16      	ldr	r3, [pc, #88]	; (8015168 <sys_timeouts_sleeptime+0x60>)
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d102      	bne.n	801511c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015116:	f04f 33ff 	mov.w	r3, #4294967295
 801511a:	e020      	b.n	801515e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801511c:	f7f1 fffc 	bl	8007118 <sys_now>
 8015120:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015122:	4b11      	ldr	r3, [pc, #68]	; (8015168 <sys_timeouts_sleeptime+0x60>)
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	685a      	ldr	r2, [r3, #4]
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	1ad3      	subs	r3, r2, r3
 801512c:	0fdb      	lsrs	r3, r3, #31
 801512e:	f003 0301 	and.w	r3, r3, #1
 8015132:	b2db      	uxtb	r3, r3
 8015134:	2b00      	cmp	r3, #0
 8015136:	d001      	beq.n	801513c <sys_timeouts_sleeptime+0x34>
    return 0;
 8015138:	2300      	movs	r3, #0
 801513a:	e010      	b.n	801515e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801513c:	4b0a      	ldr	r3, [pc, #40]	; (8015168 <sys_timeouts_sleeptime+0x60>)
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	685a      	ldr	r2, [r3, #4]
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	1ad3      	subs	r3, r2, r3
 8015146:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	2b00      	cmp	r3, #0
 801514c:	da06      	bge.n	801515c <sys_timeouts_sleeptime+0x54>
 801514e:	4b07      	ldr	r3, [pc, #28]	; (801516c <sys_timeouts_sleeptime+0x64>)
 8015150:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015154:	4906      	ldr	r1, [pc, #24]	; (8015170 <sys_timeouts_sleeptime+0x68>)
 8015156:	4807      	ldr	r0, [pc, #28]	; (8015174 <sys_timeouts_sleeptime+0x6c>)
 8015158:	f005 fc86 	bl	801aa68 <iprintf>
    return ret;
 801515c:	683b      	ldr	r3, [r7, #0]
  }
}
 801515e:	4618      	mov	r0, r3
 8015160:	3708      	adds	r7, #8
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}
 8015166:	bf00      	nop
 8015168:	2000856c 	.word	0x2000856c
 801516c:	0801e0d0 	.word	0x0801e0d0
 8015170:	0801e1a4 	.word	0x0801e1a4
 8015174:	0801e144 	.word	0x0801e144

08015178 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801517c:	f005 fd18 	bl	801abb0 <rand>
 8015180:	4603      	mov	r3, r0
 8015182:	b29b      	uxth	r3, r3
 8015184:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015188:	b29b      	uxth	r3, r3
 801518a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801518e:	b29a      	uxth	r2, r3
 8015190:	4b01      	ldr	r3, [pc, #4]	; (8015198 <udp_init+0x20>)
 8015192:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015194:	bf00      	nop
 8015196:	bd80      	pop	{r7, pc}
 8015198:	20000038 	.word	0x20000038

0801519c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801519c:	b480      	push	{r7}
 801519e:	b083      	sub	sp, #12
 80151a0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80151a2:	2300      	movs	r3, #0
 80151a4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80151a6:	4b17      	ldr	r3, [pc, #92]	; (8015204 <udp_new_port+0x68>)
 80151a8:	881b      	ldrh	r3, [r3, #0]
 80151aa:	1c5a      	adds	r2, r3, #1
 80151ac:	b291      	uxth	r1, r2
 80151ae:	4a15      	ldr	r2, [pc, #84]	; (8015204 <udp_new_port+0x68>)
 80151b0:	8011      	strh	r1, [r2, #0]
 80151b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80151b6:	4293      	cmp	r3, r2
 80151b8:	d103      	bne.n	80151c2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80151ba:	4b12      	ldr	r3, [pc, #72]	; (8015204 <udp_new_port+0x68>)
 80151bc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80151c0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80151c2:	4b11      	ldr	r3, [pc, #68]	; (8015208 <udp_new_port+0x6c>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	603b      	str	r3, [r7, #0]
 80151c8:	e011      	b.n	80151ee <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	8a5a      	ldrh	r2, [r3, #18]
 80151ce:	4b0d      	ldr	r3, [pc, #52]	; (8015204 <udp_new_port+0x68>)
 80151d0:	881b      	ldrh	r3, [r3, #0]
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d108      	bne.n	80151e8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80151d6:	88fb      	ldrh	r3, [r7, #6]
 80151d8:	3301      	adds	r3, #1
 80151da:	80fb      	strh	r3, [r7, #6]
 80151dc:	88fb      	ldrh	r3, [r7, #6]
 80151de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80151e2:	d3e0      	bcc.n	80151a6 <udp_new_port+0xa>
        return 0;
 80151e4:	2300      	movs	r3, #0
 80151e6:	e007      	b.n	80151f8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	68db      	ldr	r3, [r3, #12]
 80151ec:	603b      	str	r3, [r7, #0]
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d1ea      	bne.n	80151ca <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80151f4:	4b03      	ldr	r3, [pc, #12]	; (8015204 <udp_new_port+0x68>)
 80151f6:	881b      	ldrh	r3, [r3, #0]
}
 80151f8:	4618      	mov	r0, r3
 80151fa:	370c      	adds	r7, #12
 80151fc:	46bd      	mov	sp, r7
 80151fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015202:	4770      	bx	lr
 8015204:	20000038 	.word	0x20000038
 8015208:	2000f410 	.word	0x2000f410

0801520c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b084      	sub	sp, #16
 8015210:	af00      	add	r7, sp, #0
 8015212:	60f8      	str	r0, [r7, #12]
 8015214:	60b9      	str	r1, [r7, #8]
 8015216:	4613      	mov	r3, r2
 8015218:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d105      	bne.n	801522c <udp_input_local_match+0x20>
 8015220:	4b27      	ldr	r3, [pc, #156]	; (80152c0 <udp_input_local_match+0xb4>)
 8015222:	2287      	movs	r2, #135	; 0x87
 8015224:	4927      	ldr	r1, [pc, #156]	; (80152c4 <udp_input_local_match+0xb8>)
 8015226:	4828      	ldr	r0, [pc, #160]	; (80152c8 <udp_input_local_match+0xbc>)
 8015228:	f005 fc1e 	bl	801aa68 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801522c:	68bb      	ldr	r3, [r7, #8]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d105      	bne.n	801523e <udp_input_local_match+0x32>
 8015232:	4b23      	ldr	r3, [pc, #140]	; (80152c0 <udp_input_local_match+0xb4>)
 8015234:	2288      	movs	r2, #136	; 0x88
 8015236:	4925      	ldr	r1, [pc, #148]	; (80152cc <udp_input_local_match+0xc0>)
 8015238:	4823      	ldr	r0, [pc, #140]	; (80152c8 <udp_input_local_match+0xbc>)
 801523a:	f005 fc15 	bl	801aa68 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	7a1b      	ldrb	r3, [r3, #8]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d00b      	beq.n	801525e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	7a1a      	ldrb	r2, [r3, #8]
 801524a:	4b21      	ldr	r3, [pc, #132]	; (80152d0 <udp_input_local_match+0xc4>)
 801524c:	685b      	ldr	r3, [r3, #4]
 801524e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015252:	3301      	adds	r3, #1
 8015254:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015256:	429a      	cmp	r2, r3
 8015258:	d001      	beq.n	801525e <udp_input_local_match+0x52>
    return 0;
 801525a:	2300      	movs	r3, #0
 801525c:	e02b      	b.n	80152b6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801525e:	79fb      	ldrb	r3, [r7, #7]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d018      	beq.n	8015296 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d013      	beq.n	8015292 <udp_input_local_match+0x86>
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d00f      	beq.n	8015292 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015272:	4b17      	ldr	r3, [pc, #92]	; (80152d0 <udp_input_local_match+0xc4>)
 8015274:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801527a:	d00a      	beq.n	8015292 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	681a      	ldr	r2, [r3, #0]
 8015280:	4b13      	ldr	r3, [pc, #76]	; (80152d0 <udp_input_local_match+0xc4>)
 8015282:	695b      	ldr	r3, [r3, #20]
 8015284:	405a      	eors	r2, r3
 8015286:	68bb      	ldr	r3, [r7, #8]
 8015288:	3308      	adds	r3, #8
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801528e:	2b00      	cmp	r3, #0
 8015290:	d110      	bne.n	80152b4 <udp_input_local_match+0xa8>
          return 1;
 8015292:	2301      	movs	r3, #1
 8015294:	e00f      	b.n	80152b6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d009      	beq.n	80152b0 <udp_input_local_match+0xa4>
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d005      	beq.n	80152b0 <udp_input_local_match+0xa4>
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	681a      	ldr	r2, [r3, #0]
 80152a8:	4b09      	ldr	r3, [pc, #36]	; (80152d0 <udp_input_local_match+0xc4>)
 80152aa:	695b      	ldr	r3, [r3, #20]
 80152ac:	429a      	cmp	r2, r3
 80152ae:	d101      	bne.n	80152b4 <udp_input_local_match+0xa8>
        return 1;
 80152b0:	2301      	movs	r3, #1
 80152b2:	e000      	b.n	80152b6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80152b4:	2300      	movs	r3, #0
}
 80152b6:	4618      	mov	r0, r3
 80152b8:	3710      	adds	r7, #16
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd80      	pop	{r7, pc}
 80152be:	bf00      	nop
 80152c0:	0801e1b8 	.word	0x0801e1b8
 80152c4:	0801e1e8 	.word	0x0801e1e8
 80152c8:	0801e20c 	.word	0x0801e20c
 80152cc:	0801e234 	.word	0x0801e234
 80152d0:	2000bcc4 	.word	0x2000bcc4

080152d4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80152d4:	b590      	push	{r4, r7, lr}
 80152d6:	b08d      	sub	sp, #52	; 0x34
 80152d8:	af02      	add	r7, sp, #8
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80152de:	2300      	movs	r3, #0
 80152e0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d105      	bne.n	80152f4 <udp_input+0x20>
 80152e8:	4b7c      	ldr	r3, [pc, #496]	; (80154dc <udp_input+0x208>)
 80152ea:	22cf      	movs	r2, #207	; 0xcf
 80152ec:	497c      	ldr	r1, [pc, #496]	; (80154e0 <udp_input+0x20c>)
 80152ee:	487d      	ldr	r0, [pc, #500]	; (80154e4 <udp_input+0x210>)
 80152f0:	f005 fbba 	bl	801aa68 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80152f4:	683b      	ldr	r3, [r7, #0]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d105      	bne.n	8015306 <udp_input+0x32>
 80152fa:	4b78      	ldr	r3, [pc, #480]	; (80154dc <udp_input+0x208>)
 80152fc:	22d0      	movs	r2, #208	; 0xd0
 80152fe:	497a      	ldr	r1, [pc, #488]	; (80154e8 <udp_input+0x214>)
 8015300:	4878      	ldr	r0, [pc, #480]	; (80154e4 <udp_input+0x210>)
 8015302:	f005 fbb1 	bl	801aa68 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	895b      	ldrh	r3, [r3, #10]
 801530a:	2b07      	cmp	r3, #7
 801530c:	d803      	bhi.n	8015316 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801530e:	6878      	ldr	r0, [r7, #4]
 8015310:	f7fa f9b6 	bl	800f680 <pbuf_free>
    goto end;
 8015314:	e0de      	b.n	80154d4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	685b      	ldr	r3, [r3, #4]
 801531a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801531c:	4b73      	ldr	r3, [pc, #460]	; (80154ec <udp_input+0x218>)
 801531e:	695b      	ldr	r3, [r3, #20]
 8015320:	4a72      	ldr	r2, [pc, #456]	; (80154ec <udp_input+0x218>)
 8015322:	6812      	ldr	r2, [r2, #0]
 8015324:	4611      	mov	r1, r2
 8015326:	4618      	mov	r0, r3
 8015328:	f003 fe06 	bl	8018f38 <ip4_addr_isbroadcast_u32>
 801532c:	4603      	mov	r3, r0
 801532e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015330:	697b      	ldr	r3, [r7, #20]
 8015332:	881b      	ldrh	r3, [r3, #0]
 8015334:	b29b      	uxth	r3, r3
 8015336:	4618      	mov	r0, r3
 8015338:	f7f8 fdea 	bl	800df10 <lwip_htons>
 801533c:	4603      	mov	r3, r0
 801533e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015340:	697b      	ldr	r3, [r7, #20]
 8015342:	885b      	ldrh	r3, [r3, #2]
 8015344:	b29b      	uxth	r3, r3
 8015346:	4618      	mov	r0, r3
 8015348:	f7f8 fde2 	bl	800df10 <lwip_htons>
 801534c:	4603      	mov	r3, r0
 801534e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015350:	2300      	movs	r3, #0
 8015352:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015354:	2300      	movs	r3, #0
 8015356:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015358:	2300      	movs	r3, #0
 801535a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801535c:	4b64      	ldr	r3, [pc, #400]	; (80154f0 <udp_input+0x21c>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	627b      	str	r3, [r7, #36]	; 0x24
 8015362:	e054      	b.n	801540e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015366:	8a5b      	ldrh	r3, [r3, #18]
 8015368:	89fa      	ldrh	r2, [r7, #14]
 801536a:	429a      	cmp	r2, r3
 801536c:	d14a      	bne.n	8015404 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801536e:	7cfb      	ldrb	r3, [r7, #19]
 8015370:	461a      	mov	r2, r3
 8015372:	6839      	ldr	r1, [r7, #0]
 8015374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015376:	f7ff ff49 	bl	801520c <udp_input_local_match>
 801537a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801537c:	2b00      	cmp	r3, #0
 801537e:	d041      	beq.n	8015404 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015382:	7c1b      	ldrb	r3, [r3, #16]
 8015384:	f003 0304 	and.w	r3, r3, #4
 8015388:	2b00      	cmp	r3, #0
 801538a:	d11d      	bne.n	80153c8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801538c:	69fb      	ldr	r3, [r7, #28]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d102      	bne.n	8015398 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015394:	61fb      	str	r3, [r7, #28]
 8015396:	e017      	b.n	80153c8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015398:	7cfb      	ldrb	r3, [r7, #19]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d014      	beq.n	80153c8 <udp_input+0xf4>
 801539e:	4b53      	ldr	r3, [pc, #332]	; (80154ec <udp_input+0x218>)
 80153a0:	695b      	ldr	r3, [r3, #20]
 80153a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153a6:	d10f      	bne.n	80153c8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80153a8:	69fb      	ldr	r3, [r7, #28]
 80153aa:	681a      	ldr	r2, [r3, #0]
 80153ac:	683b      	ldr	r3, [r7, #0]
 80153ae:	3304      	adds	r3, #4
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	429a      	cmp	r2, r3
 80153b4:	d008      	beq.n	80153c8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80153b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153b8:	681a      	ldr	r2, [r3, #0]
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	3304      	adds	r3, #4
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d101      	bne.n	80153c8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80153c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153c6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80153c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ca:	8a9b      	ldrh	r3, [r3, #20]
 80153cc:	8a3a      	ldrh	r2, [r7, #16]
 80153ce:	429a      	cmp	r2, r3
 80153d0:	d118      	bne.n	8015404 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80153d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d005      	beq.n	80153e6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80153da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153dc:	685a      	ldr	r2, [r3, #4]
 80153de:	4b43      	ldr	r3, [pc, #268]	; (80154ec <udp_input+0x218>)
 80153e0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80153e2:	429a      	cmp	r2, r3
 80153e4:	d10e      	bne.n	8015404 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80153e6:	6a3b      	ldr	r3, [r7, #32]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d014      	beq.n	8015416 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80153ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ee:	68da      	ldr	r2, [r3, #12]
 80153f0:	6a3b      	ldr	r3, [r7, #32]
 80153f2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80153f4:	4b3e      	ldr	r3, [pc, #248]	; (80154f0 <udp_input+0x21c>)
 80153f6:	681a      	ldr	r2, [r3, #0]
 80153f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153fa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80153fc:	4a3c      	ldr	r2, [pc, #240]	; (80154f0 <udp_input+0x21c>)
 80153fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015400:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015402:	e008      	b.n	8015416 <udp_input+0x142>
      }
    }

    prev = pcb;
 8015404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015406:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801540a:	68db      	ldr	r3, [r3, #12]
 801540c:	627b      	str	r3, [r7, #36]	; 0x24
 801540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015410:	2b00      	cmp	r3, #0
 8015412:	d1a7      	bne.n	8015364 <udp_input+0x90>
 8015414:	e000      	b.n	8015418 <udp_input+0x144>
        break;
 8015416:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801541a:	2b00      	cmp	r3, #0
 801541c:	d101      	bne.n	8015422 <udp_input+0x14e>
    pcb = uncon_pcb;
 801541e:	69fb      	ldr	r3, [r7, #28]
 8015420:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015424:	2b00      	cmp	r3, #0
 8015426:	d002      	beq.n	801542e <udp_input+0x15a>
    for_us = 1;
 8015428:	2301      	movs	r3, #1
 801542a:	76fb      	strb	r3, [r7, #27]
 801542c:	e00a      	b.n	8015444 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801542e:	683b      	ldr	r3, [r7, #0]
 8015430:	3304      	adds	r3, #4
 8015432:	681a      	ldr	r2, [r3, #0]
 8015434:	4b2d      	ldr	r3, [pc, #180]	; (80154ec <udp_input+0x218>)
 8015436:	695b      	ldr	r3, [r3, #20]
 8015438:	429a      	cmp	r2, r3
 801543a:	bf0c      	ite	eq
 801543c:	2301      	moveq	r3, #1
 801543e:	2300      	movne	r3, #0
 8015440:	b2db      	uxtb	r3, r3
 8015442:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015444:	7efb      	ldrb	r3, [r7, #27]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d041      	beq.n	80154ce <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801544a:	2108      	movs	r1, #8
 801544c:	6878      	ldr	r0, [r7, #4]
 801544e:	f7fa f891 	bl	800f574 <pbuf_remove_header>
 8015452:	4603      	mov	r3, r0
 8015454:	2b00      	cmp	r3, #0
 8015456:	d00a      	beq.n	801546e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015458:	4b20      	ldr	r3, [pc, #128]	; (80154dc <udp_input+0x208>)
 801545a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801545e:	4925      	ldr	r1, [pc, #148]	; (80154f4 <udp_input+0x220>)
 8015460:	4820      	ldr	r0, [pc, #128]	; (80154e4 <udp_input+0x210>)
 8015462:	f005 fb01 	bl	801aa68 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015466:	6878      	ldr	r0, [r7, #4]
 8015468:	f7fa f90a 	bl	800f680 <pbuf_free>
      goto end;
 801546c:	e032      	b.n	80154d4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015470:	2b00      	cmp	r3, #0
 8015472:	d012      	beq.n	801549a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015476:	699b      	ldr	r3, [r3, #24]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d00a      	beq.n	8015492 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801547e:	699c      	ldr	r4, [r3, #24]
 8015480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015482:	69d8      	ldr	r0, [r3, #28]
 8015484:	8a3b      	ldrh	r3, [r7, #16]
 8015486:	9300      	str	r3, [sp, #0]
 8015488:	4b1b      	ldr	r3, [pc, #108]	; (80154f8 <udp_input+0x224>)
 801548a:	687a      	ldr	r2, [r7, #4]
 801548c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801548e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015490:	e021      	b.n	80154d6 <udp_input+0x202>
        pbuf_free(p);
 8015492:	6878      	ldr	r0, [r7, #4]
 8015494:	f7fa f8f4 	bl	800f680 <pbuf_free>
        goto end;
 8015498:	e01c      	b.n	80154d4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801549a:	7cfb      	ldrb	r3, [r7, #19]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d112      	bne.n	80154c6 <udp_input+0x1f2>
 80154a0:	4b12      	ldr	r3, [pc, #72]	; (80154ec <udp_input+0x218>)
 80154a2:	695b      	ldr	r3, [r3, #20]
 80154a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80154a8:	2be0      	cmp	r3, #224	; 0xe0
 80154aa:	d00c      	beq.n	80154c6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80154ac:	4b0f      	ldr	r3, [pc, #60]	; (80154ec <udp_input+0x218>)
 80154ae:	899b      	ldrh	r3, [r3, #12]
 80154b0:	3308      	adds	r3, #8
 80154b2:	b29b      	uxth	r3, r3
 80154b4:	b21b      	sxth	r3, r3
 80154b6:	4619      	mov	r1, r3
 80154b8:	6878      	ldr	r0, [r7, #4]
 80154ba:	f7fa f8ce 	bl	800f65a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80154be:	2103      	movs	r1, #3
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	f003 f9fb 	bl	80188bc <icmp_dest_unreach>
      pbuf_free(p);
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f7fa f8da 	bl	800f680 <pbuf_free>
  return;
 80154cc:	e003      	b.n	80154d6 <udp_input+0x202>
    pbuf_free(p);
 80154ce:	6878      	ldr	r0, [r7, #4]
 80154d0:	f7fa f8d6 	bl	800f680 <pbuf_free>
  return;
 80154d4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80154d6:	372c      	adds	r7, #44	; 0x2c
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd90      	pop	{r4, r7, pc}
 80154dc:	0801e1b8 	.word	0x0801e1b8
 80154e0:	0801e25c 	.word	0x0801e25c
 80154e4:	0801e20c 	.word	0x0801e20c
 80154e8:	0801e274 	.word	0x0801e274
 80154ec:	2000bcc4 	.word	0x2000bcc4
 80154f0:	2000f410 	.word	0x2000f410
 80154f4:	0801e290 	.word	0x0801e290
 80154f8:	2000bcd4 	.word	0x2000bcd4

080154fc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b088      	sub	sp, #32
 8015500:	af02      	add	r7, sp, #8
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	607a      	str	r2, [r7, #4]
 8015508:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d109      	bne.n	8015524 <udp_sendto_if+0x28>
 8015510:	4b2e      	ldr	r3, [pc, #184]	; (80155cc <udp_sendto_if+0xd0>)
 8015512:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015516:	492e      	ldr	r1, [pc, #184]	; (80155d0 <udp_sendto_if+0xd4>)
 8015518:	482e      	ldr	r0, [pc, #184]	; (80155d4 <udp_sendto_if+0xd8>)
 801551a:	f005 faa5 	bl	801aa68 <iprintf>
 801551e:	f06f 030f 	mvn.w	r3, #15
 8015522:	e04f      	b.n	80155c4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015524:	68bb      	ldr	r3, [r7, #8]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d109      	bne.n	801553e <udp_sendto_if+0x42>
 801552a:	4b28      	ldr	r3, [pc, #160]	; (80155cc <udp_sendto_if+0xd0>)
 801552c:	f240 2281 	movw	r2, #641	; 0x281
 8015530:	4929      	ldr	r1, [pc, #164]	; (80155d8 <udp_sendto_if+0xdc>)
 8015532:	4828      	ldr	r0, [pc, #160]	; (80155d4 <udp_sendto_if+0xd8>)
 8015534:	f005 fa98 	bl	801aa68 <iprintf>
 8015538:	f06f 030f 	mvn.w	r3, #15
 801553c:	e042      	b.n	80155c4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d109      	bne.n	8015558 <udp_sendto_if+0x5c>
 8015544:	4b21      	ldr	r3, [pc, #132]	; (80155cc <udp_sendto_if+0xd0>)
 8015546:	f240 2282 	movw	r2, #642	; 0x282
 801554a:	4924      	ldr	r1, [pc, #144]	; (80155dc <udp_sendto_if+0xe0>)
 801554c:	4821      	ldr	r0, [pc, #132]	; (80155d4 <udp_sendto_if+0xd8>)
 801554e:	f005 fa8b 	bl	801aa68 <iprintf>
 8015552:	f06f 030f 	mvn.w	r3, #15
 8015556:	e035      	b.n	80155c4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015558:	6a3b      	ldr	r3, [r7, #32]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d109      	bne.n	8015572 <udp_sendto_if+0x76>
 801555e:	4b1b      	ldr	r3, [pc, #108]	; (80155cc <udp_sendto_if+0xd0>)
 8015560:	f240 2283 	movw	r2, #643	; 0x283
 8015564:	491e      	ldr	r1, [pc, #120]	; (80155e0 <udp_sendto_if+0xe4>)
 8015566:	481b      	ldr	r0, [pc, #108]	; (80155d4 <udp_sendto_if+0xd8>)
 8015568:	f005 fa7e 	bl	801aa68 <iprintf>
 801556c:	f06f 030f 	mvn.w	r3, #15
 8015570:	e028      	b.n	80155c4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d009      	beq.n	801558c <udp_sendto_if+0x90>
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d005      	beq.n	801558c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015588:	2be0      	cmp	r3, #224	; 0xe0
 801558a:	d103      	bne.n	8015594 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801558c:	6a3b      	ldr	r3, [r7, #32]
 801558e:	3304      	adds	r3, #4
 8015590:	617b      	str	r3, [r7, #20]
 8015592:	e00b      	b.n	80155ac <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	681a      	ldr	r2, [r3, #0]
 8015598:	6a3b      	ldr	r3, [r7, #32]
 801559a:	3304      	adds	r3, #4
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	429a      	cmp	r2, r3
 80155a0:	d002      	beq.n	80155a8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80155a2:	f06f 0303 	mvn.w	r3, #3
 80155a6:	e00d      	b.n	80155c4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80155ac:	887a      	ldrh	r2, [r7, #2]
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	9301      	str	r3, [sp, #4]
 80155b2:	6a3b      	ldr	r3, [r7, #32]
 80155b4:	9300      	str	r3, [sp, #0]
 80155b6:	4613      	mov	r3, r2
 80155b8:	687a      	ldr	r2, [r7, #4]
 80155ba:	68b9      	ldr	r1, [r7, #8]
 80155bc:	68f8      	ldr	r0, [r7, #12]
 80155be:	f000 f811 	bl	80155e4 <udp_sendto_if_src>
 80155c2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80155c4:	4618      	mov	r0, r3
 80155c6:	3718      	adds	r7, #24
 80155c8:	46bd      	mov	sp, r7
 80155ca:	bd80      	pop	{r7, pc}
 80155cc:	0801e1b8 	.word	0x0801e1b8
 80155d0:	0801e32c 	.word	0x0801e32c
 80155d4:	0801e20c 	.word	0x0801e20c
 80155d8:	0801e348 	.word	0x0801e348
 80155dc:	0801e364 	.word	0x0801e364
 80155e0:	0801e384 	.word	0x0801e384

080155e4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b08c      	sub	sp, #48	; 0x30
 80155e8:	af04      	add	r7, sp, #16
 80155ea:	60f8      	str	r0, [r7, #12]
 80155ec:	60b9      	str	r1, [r7, #8]
 80155ee:	607a      	str	r2, [r7, #4]
 80155f0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d109      	bne.n	801560c <udp_sendto_if_src+0x28>
 80155f8:	4b65      	ldr	r3, [pc, #404]	; (8015790 <udp_sendto_if_src+0x1ac>)
 80155fa:	f240 22d1 	movw	r2, #721	; 0x2d1
 80155fe:	4965      	ldr	r1, [pc, #404]	; (8015794 <udp_sendto_if_src+0x1b0>)
 8015600:	4865      	ldr	r0, [pc, #404]	; (8015798 <udp_sendto_if_src+0x1b4>)
 8015602:	f005 fa31 	bl	801aa68 <iprintf>
 8015606:	f06f 030f 	mvn.w	r3, #15
 801560a:	e0bc      	b.n	8015786 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801560c:	68bb      	ldr	r3, [r7, #8]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d109      	bne.n	8015626 <udp_sendto_if_src+0x42>
 8015612:	4b5f      	ldr	r3, [pc, #380]	; (8015790 <udp_sendto_if_src+0x1ac>)
 8015614:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015618:	4960      	ldr	r1, [pc, #384]	; (801579c <udp_sendto_if_src+0x1b8>)
 801561a:	485f      	ldr	r0, [pc, #380]	; (8015798 <udp_sendto_if_src+0x1b4>)
 801561c:	f005 fa24 	bl	801aa68 <iprintf>
 8015620:	f06f 030f 	mvn.w	r3, #15
 8015624:	e0af      	b.n	8015786 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d109      	bne.n	8015640 <udp_sendto_if_src+0x5c>
 801562c:	4b58      	ldr	r3, [pc, #352]	; (8015790 <udp_sendto_if_src+0x1ac>)
 801562e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015632:	495b      	ldr	r1, [pc, #364]	; (80157a0 <udp_sendto_if_src+0x1bc>)
 8015634:	4858      	ldr	r0, [pc, #352]	; (8015798 <udp_sendto_if_src+0x1b4>)
 8015636:	f005 fa17 	bl	801aa68 <iprintf>
 801563a:	f06f 030f 	mvn.w	r3, #15
 801563e:	e0a2      	b.n	8015786 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015642:	2b00      	cmp	r3, #0
 8015644:	d109      	bne.n	801565a <udp_sendto_if_src+0x76>
 8015646:	4b52      	ldr	r3, [pc, #328]	; (8015790 <udp_sendto_if_src+0x1ac>)
 8015648:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801564c:	4955      	ldr	r1, [pc, #340]	; (80157a4 <udp_sendto_if_src+0x1c0>)
 801564e:	4852      	ldr	r0, [pc, #328]	; (8015798 <udp_sendto_if_src+0x1b4>)
 8015650:	f005 fa0a 	bl	801aa68 <iprintf>
 8015654:	f06f 030f 	mvn.w	r3, #15
 8015658:	e095      	b.n	8015786 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801565c:	2b00      	cmp	r3, #0
 801565e:	d109      	bne.n	8015674 <udp_sendto_if_src+0x90>
 8015660:	4b4b      	ldr	r3, [pc, #300]	; (8015790 <udp_sendto_if_src+0x1ac>)
 8015662:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015666:	4950      	ldr	r1, [pc, #320]	; (80157a8 <udp_sendto_if_src+0x1c4>)
 8015668:	484b      	ldr	r0, [pc, #300]	; (8015798 <udp_sendto_if_src+0x1b4>)
 801566a:	f005 f9fd 	bl	801aa68 <iprintf>
 801566e:	f06f 030f 	mvn.w	r3, #15
 8015672:	e088      	b.n	8015786 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	8a5b      	ldrh	r3, [r3, #18]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d10f      	bne.n	801569c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801567c:	68f9      	ldr	r1, [r7, #12]
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	8a5b      	ldrh	r3, [r3, #18]
 8015682:	461a      	mov	r2, r3
 8015684:	68f8      	ldr	r0, [r7, #12]
 8015686:	f000 f893 	bl	80157b0 <udp_bind>
 801568a:	4603      	mov	r3, r0
 801568c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801568e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d002      	beq.n	801569c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015696:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801569a:	e074      	b.n	8015786 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	891b      	ldrh	r3, [r3, #8]
 80156a0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80156a4:	4293      	cmp	r3, r2
 80156a6:	d902      	bls.n	80156ae <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80156a8:	f04f 33ff 	mov.w	r3, #4294967295
 80156ac:	e06b      	b.n	8015786 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80156ae:	2108      	movs	r1, #8
 80156b0:	68b8      	ldr	r0, [r7, #8]
 80156b2:	f7f9 ff4f 	bl	800f554 <pbuf_add_header>
 80156b6:	4603      	mov	r3, r0
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d015      	beq.n	80156e8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80156bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80156c0:	2108      	movs	r1, #8
 80156c2:	2022      	movs	r0, #34	; 0x22
 80156c4:	f7f9 fcf8 	bl	800f0b8 <pbuf_alloc>
 80156c8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80156ca:	69fb      	ldr	r3, [r7, #28]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d102      	bne.n	80156d6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80156d0:	f04f 33ff 	mov.w	r3, #4294967295
 80156d4:	e057      	b.n	8015786 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80156d6:	68bb      	ldr	r3, [r7, #8]
 80156d8:	891b      	ldrh	r3, [r3, #8]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d006      	beq.n	80156ec <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80156de:	68b9      	ldr	r1, [r7, #8]
 80156e0:	69f8      	ldr	r0, [r7, #28]
 80156e2:	f7fa f8f1 	bl	800f8c8 <pbuf_chain>
 80156e6:	e001      	b.n	80156ec <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80156ec:	69fb      	ldr	r3, [r7, #28]
 80156ee:	895b      	ldrh	r3, [r3, #10]
 80156f0:	2b07      	cmp	r3, #7
 80156f2:	d806      	bhi.n	8015702 <udp_sendto_if_src+0x11e>
 80156f4:	4b26      	ldr	r3, [pc, #152]	; (8015790 <udp_sendto_if_src+0x1ac>)
 80156f6:	f240 320d 	movw	r2, #781	; 0x30d
 80156fa:	492c      	ldr	r1, [pc, #176]	; (80157ac <udp_sendto_if_src+0x1c8>)
 80156fc:	4826      	ldr	r0, [pc, #152]	; (8015798 <udp_sendto_if_src+0x1b4>)
 80156fe:	f005 f9b3 	bl	801aa68 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015702:	69fb      	ldr	r3, [r7, #28]
 8015704:	685b      	ldr	r3, [r3, #4]
 8015706:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	8a5b      	ldrh	r3, [r3, #18]
 801570c:	4618      	mov	r0, r3
 801570e:	f7f8 fbff 	bl	800df10 <lwip_htons>
 8015712:	4603      	mov	r3, r0
 8015714:	461a      	mov	r2, r3
 8015716:	697b      	ldr	r3, [r7, #20]
 8015718:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801571a:	887b      	ldrh	r3, [r7, #2]
 801571c:	4618      	mov	r0, r3
 801571e:	f7f8 fbf7 	bl	800df10 <lwip_htons>
 8015722:	4603      	mov	r3, r0
 8015724:	461a      	mov	r2, r3
 8015726:	697b      	ldr	r3, [r7, #20]
 8015728:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801572a:	697b      	ldr	r3, [r7, #20]
 801572c:	2200      	movs	r2, #0
 801572e:	719a      	strb	r2, [r3, #6]
 8015730:	2200      	movs	r2, #0
 8015732:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015734:	69fb      	ldr	r3, [r7, #28]
 8015736:	891b      	ldrh	r3, [r3, #8]
 8015738:	4618      	mov	r0, r3
 801573a:	f7f8 fbe9 	bl	800df10 <lwip_htons>
 801573e:	4603      	mov	r3, r0
 8015740:	461a      	mov	r2, r3
 8015742:	697b      	ldr	r3, [r7, #20]
 8015744:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015746:	2311      	movs	r3, #17
 8015748:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	7adb      	ldrb	r3, [r3, #11]
 801574e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	7a9b      	ldrb	r3, [r3, #10]
 8015754:	7cb9      	ldrb	r1, [r7, #18]
 8015756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015758:	9202      	str	r2, [sp, #8]
 801575a:	7cfa      	ldrb	r2, [r7, #19]
 801575c:	9201      	str	r2, [sp, #4]
 801575e:	9300      	str	r3, [sp, #0]
 8015760:	460b      	mov	r3, r1
 8015762:	687a      	ldr	r2, [r7, #4]
 8015764:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015766:	69f8      	ldr	r0, [r7, #28]
 8015768:	f003 fb38 	bl	8018ddc <ip4_output_if_src>
 801576c:	4603      	mov	r3, r0
 801576e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015770:	69fa      	ldr	r2, [r7, #28]
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	429a      	cmp	r2, r3
 8015776:	d004      	beq.n	8015782 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015778:	69f8      	ldr	r0, [r7, #28]
 801577a:	f7f9 ff81 	bl	800f680 <pbuf_free>
    q = NULL;
 801577e:	2300      	movs	r3, #0
 8015780:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015782:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015786:	4618      	mov	r0, r3
 8015788:	3720      	adds	r7, #32
 801578a:	46bd      	mov	sp, r7
 801578c:	bd80      	pop	{r7, pc}
 801578e:	bf00      	nop
 8015790:	0801e1b8 	.word	0x0801e1b8
 8015794:	0801e3a4 	.word	0x0801e3a4
 8015798:	0801e20c 	.word	0x0801e20c
 801579c:	0801e3c4 	.word	0x0801e3c4
 80157a0:	0801e3e4 	.word	0x0801e3e4
 80157a4:	0801e408 	.word	0x0801e408
 80157a8:	0801e42c 	.word	0x0801e42c
 80157ac:	0801e450 	.word	0x0801e450

080157b0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b086      	sub	sp, #24
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	60f8      	str	r0, [r7, #12]
 80157b8:	60b9      	str	r1, [r7, #8]
 80157ba:	4613      	mov	r3, r2
 80157bc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d101      	bne.n	80157c8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80157c4:	4b39      	ldr	r3, [pc, #228]	; (80158ac <udp_bind+0xfc>)
 80157c6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d109      	bne.n	80157e2 <udp_bind+0x32>
 80157ce:	4b38      	ldr	r3, [pc, #224]	; (80158b0 <udp_bind+0x100>)
 80157d0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80157d4:	4937      	ldr	r1, [pc, #220]	; (80158b4 <udp_bind+0x104>)
 80157d6:	4838      	ldr	r0, [pc, #224]	; (80158b8 <udp_bind+0x108>)
 80157d8:	f005 f946 	bl	801aa68 <iprintf>
 80157dc:	f06f 030f 	mvn.w	r3, #15
 80157e0:	e060      	b.n	80158a4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80157e2:	2300      	movs	r3, #0
 80157e4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157e6:	4b35      	ldr	r3, [pc, #212]	; (80158bc <udp_bind+0x10c>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	617b      	str	r3, [r7, #20]
 80157ec:	e009      	b.n	8015802 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80157ee:	68fa      	ldr	r2, [r7, #12]
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d102      	bne.n	80157fc <udp_bind+0x4c>
      rebind = 1;
 80157f6:	2301      	movs	r3, #1
 80157f8:	74fb      	strb	r3, [r7, #19]
      break;
 80157fa:	e005      	b.n	8015808 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157fc:	697b      	ldr	r3, [r7, #20]
 80157fe:	68db      	ldr	r3, [r3, #12]
 8015800:	617b      	str	r3, [r7, #20]
 8015802:	697b      	ldr	r3, [r7, #20]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d1f2      	bne.n	80157ee <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015808:	88fb      	ldrh	r3, [r7, #6]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d109      	bne.n	8015822 <udp_bind+0x72>
    port = udp_new_port();
 801580e:	f7ff fcc5 	bl	801519c <udp_new_port>
 8015812:	4603      	mov	r3, r0
 8015814:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015816:	88fb      	ldrh	r3, [r7, #6]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d12c      	bne.n	8015876 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801581c:	f06f 0307 	mvn.w	r3, #7
 8015820:	e040      	b.n	80158a4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015822:	4b26      	ldr	r3, [pc, #152]	; (80158bc <udp_bind+0x10c>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	617b      	str	r3, [r7, #20]
 8015828:	e022      	b.n	8015870 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801582a:	68fa      	ldr	r2, [r7, #12]
 801582c:	697b      	ldr	r3, [r7, #20]
 801582e:	429a      	cmp	r2, r3
 8015830:	d01b      	beq.n	801586a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	8a5b      	ldrh	r3, [r3, #18]
 8015836:	88fa      	ldrh	r2, [r7, #6]
 8015838:	429a      	cmp	r2, r3
 801583a:	d116      	bne.n	801586a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801583c:	697b      	ldr	r3, [r7, #20]
 801583e:	681a      	ldr	r2, [r3, #0]
 8015840:	68bb      	ldr	r3, [r7, #8]
 8015842:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015844:	429a      	cmp	r2, r3
 8015846:	d00d      	beq.n	8015864 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d00a      	beq.n	8015864 <udp_bind+0xb4>
 801584e:	68bb      	ldr	r3, [r7, #8]
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d006      	beq.n	8015864 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015856:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015858:	2b00      	cmp	r3, #0
 801585a:	d003      	beq.n	8015864 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801585c:	697b      	ldr	r3, [r7, #20]
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d102      	bne.n	801586a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015864:	f06f 0307 	mvn.w	r3, #7
 8015868:	e01c      	b.n	80158a4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801586a:	697b      	ldr	r3, [r7, #20]
 801586c:	68db      	ldr	r3, [r3, #12]
 801586e:	617b      	str	r3, [r7, #20]
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d1d9      	bne.n	801582a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d002      	beq.n	8015882 <udp_bind+0xd2>
 801587c:	68bb      	ldr	r3, [r7, #8]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	e000      	b.n	8015884 <udp_bind+0xd4>
 8015882:	2300      	movs	r3, #0
 8015884:	68fa      	ldr	r2, [r7, #12]
 8015886:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	88fa      	ldrh	r2, [r7, #6]
 801588c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801588e:	7cfb      	ldrb	r3, [r7, #19]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d106      	bne.n	80158a2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015894:	4b09      	ldr	r3, [pc, #36]	; (80158bc <udp_bind+0x10c>)
 8015896:	681a      	ldr	r2, [r3, #0]
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801589c:	4a07      	ldr	r2, [pc, #28]	; (80158bc <udp_bind+0x10c>)
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80158a2:	2300      	movs	r3, #0
}
 80158a4:	4618      	mov	r0, r3
 80158a6:	3718      	adds	r7, #24
 80158a8:	46bd      	mov	sp, r7
 80158aa:	bd80      	pop	{r7, pc}
 80158ac:	0801f0cc 	.word	0x0801f0cc
 80158b0:	0801e1b8 	.word	0x0801e1b8
 80158b4:	0801e480 	.word	0x0801e480
 80158b8:	0801e20c 	.word	0x0801e20c
 80158bc:	2000f410 	.word	0x2000f410

080158c0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b086      	sub	sp, #24
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	60f8      	str	r0, [r7, #12]
 80158c8:	60b9      	str	r1, [r7, #8]
 80158ca:	4613      	mov	r3, r2
 80158cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d109      	bne.n	80158e8 <udp_connect+0x28>
 80158d4:	4b2c      	ldr	r3, [pc, #176]	; (8015988 <udp_connect+0xc8>)
 80158d6:	f240 4235 	movw	r2, #1077	; 0x435
 80158da:	492c      	ldr	r1, [pc, #176]	; (801598c <udp_connect+0xcc>)
 80158dc:	482c      	ldr	r0, [pc, #176]	; (8015990 <udp_connect+0xd0>)
 80158de:	f005 f8c3 	bl	801aa68 <iprintf>
 80158e2:	f06f 030f 	mvn.w	r3, #15
 80158e6:	e04b      	b.n	8015980 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d109      	bne.n	8015902 <udp_connect+0x42>
 80158ee:	4b26      	ldr	r3, [pc, #152]	; (8015988 <udp_connect+0xc8>)
 80158f0:	f240 4236 	movw	r2, #1078	; 0x436
 80158f4:	4927      	ldr	r1, [pc, #156]	; (8015994 <udp_connect+0xd4>)
 80158f6:	4826      	ldr	r0, [pc, #152]	; (8015990 <udp_connect+0xd0>)
 80158f8:	f005 f8b6 	bl	801aa68 <iprintf>
 80158fc:	f06f 030f 	mvn.w	r3, #15
 8015900:	e03e      	b.n	8015980 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	8a5b      	ldrh	r3, [r3, #18]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d10f      	bne.n	801592a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801590a:	68f9      	ldr	r1, [r7, #12]
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	8a5b      	ldrh	r3, [r3, #18]
 8015910:	461a      	mov	r2, r3
 8015912:	68f8      	ldr	r0, [r7, #12]
 8015914:	f7ff ff4c 	bl	80157b0 <udp_bind>
 8015918:	4603      	mov	r3, r0
 801591a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801591c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d002      	beq.n	801592a <udp_connect+0x6a>
      return err;
 8015924:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015928:	e02a      	b.n	8015980 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d002      	beq.n	8015936 <udp_connect+0x76>
 8015930:	68bb      	ldr	r3, [r7, #8]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	e000      	b.n	8015938 <udp_connect+0x78>
 8015936:	2300      	movs	r3, #0
 8015938:	68fa      	ldr	r2, [r7, #12]
 801593a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	88fa      	ldrh	r2, [r7, #6]
 8015940:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	7c1b      	ldrb	r3, [r3, #16]
 8015946:	f043 0304 	orr.w	r3, r3, #4
 801594a:	b2da      	uxtb	r2, r3
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015950:	4b11      	ldr	r3, [pc, #68]	; (8015998 <udp_connect+0xd8>)
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	617b      	str	r3, [r7, #20]
 8015956:	e008      	b.n	801596a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015958:	68fa      	ldr	r2, [r7, #12]
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	429a      	cmp	r2, r3
 801595e:	d101      	bne.n	8015964 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015960:	2300      	movs	r3, #0
 8015962:	e00d      	b.n	8015980 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015964:	697b      	ldr	r3, [r7, #20]
 8015966:	68db      	ldr	r3, [r3, #12]
 8015968:	617b      	str	r3, [r7, #20]
 801596a:	697b      	ldr	r3, [r7, #20]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d1f3      	bne.n	8015958 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015970:	4b09      	ldr	r3, [pc, #36]	; (8015998 <udp_connect+0xd8>)
 8015972:	681a      	ldr	r2, [r3, #0]
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015978:	4a07      	ldr	r2, [pc, #28]	; (8015998 <udp_connect+0xd8>)
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801597e:	2300      	movs	r3, #0
}
 8015980:	4618      	mov	r0, r3
 8015982:	3718      	adds	r7, #24
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}
 8015988:	0801e1b8 	.word	0x0801e1b8
 801598c:	0801e498 	.word	0x0801e498
 8015990:	0801e20c 	.word	0x0801e20c
 8015994:	0801e4b4 	.word	0x0801e4b4
 8015998:	2000f410 	.word	0x2000f410

0801599c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b084      	sub	sp, #16
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	60f8      	str	r0, [r7, #12]
 80159a4:	60b9      	str	r1, [r7, #8]
 80159a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d107      	bne.n	80159be <udp_recv+0x22>
 80159ae:	4b08      	ldr	r3, [pc, #32]	; (80159d0 <udp_recv+0x34>)
 80159b0:	f240 428a 	movw	r2, #1162	; 0x48a
 80159b4:	4907      	ldr	r1, [pc, #28]	; (80159d4 <udp_recv+0x38>)
 80159b6:	4808      	ldr	r0, [pc, #32]	; (80159d8 <udp_recv+0x3c>)
 80159b8:	f005 f856 	bl	801aa68 <iprintf>
 80159bc:	e005      	b.n	80159ca <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	68ba      	ldr	r2, [r7, #8]
 80159c2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	687a      	ldr	r2, [r7, #4]
 80159c8:	61da      	str	r2, [r3, #28]
}
 80159ca:	3710      	adds	r7, #16
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}
 80159d0:	0801e1b8 	.word	0x0801e1b8
 80159d4:	0801e4ec 	.word	0x0801e4ec
 80159d8:	0801e20c 	.word	0x0801e20c

080159dc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b084      	sub	sp, #16
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d107      	bne.n	80159fa <udp_remove+0x1e>
 80159ea:	4b19      	ldr	r3, [pc, #100]	; (8015a50 <udp_remove+0x74>)
 80159ec:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80159f0:	4918      	ldr	r1, [pc, #96]	; (8015a54 <udp_remove+0x78>)
 80159f2:	4819      	ldr	r0, [pc, #100]	; (8015a58 <udp_remove+0x7c>)
 80159f4:	f005 f838 	bl	801aa68 <iprintf>
 80159f8:	e026      	b.n	8015a48 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80159fa:	4b18      	ldr	r3, [pc, #96]	; (8015a5c <udp_remove+0x80>)
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	687a      	ldr	r2, [r7, #4]
 8015a00:	429a      	cmp	r2, r3
 8015a02:	d105      	bne.n	8015a10 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015a04:	4b15      	ldr	r3, [pc, #84]	; (8015a5c <udp_remove+0x80>)
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	4a14      	ldr	r2, [pc, #80]	; (8015a5c <udp_remove+0x80>)
 8015a0c:	6013      	str	r3, [r2, #0]
 8015a0e:	e017      	b.n	8015a40 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015a10:	4b12      	ldr	r3, [pc, #72]	; (8015a5c <udp_remove+0x80>)
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	60fb      	str	r3, [r7, #12]
 8015a16:	e010      	b.n	8015a3a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	68db      	ldr	r3, [r3, #12]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d009      	beq.n	8015a34 <udp_remove+0x58>
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	68db      	ldr	r3, [r3, #12]
 8015a24:	687a      	ldr	r2, [r7, #4]
 8015a26:	429a      	cmp	r2, r3
 8015a28:	d104      	bne.n	8015a34 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	68da      	ldr	r2, [r3, #12]
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	60da      	str	r2, [r3, #12]
        break;
 8015a32:	e005      	b.n	8015a40 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	60fb      	str	r3, [r7, #12]
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d1eb      	bne.n	8015a18 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015a40:	6879      	ldr	r1, [r7, #4]
 8015a42:	2000      	movs	r0, #0
 8015a44:	f7f8 ff6c 	bl	800e920 <memp_free>
}
 8015a48:	3710      	adds	r7, #16
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	bd80      	pop	{r7, pc}
 8015a4e:	bf00      	nop
 8015a50:	0801e1b8 	.word	0x0801e1b8
 8015a54:	0801e504 	.word	0x0801e504
 8015a58:	0801e20c 	.word	0x0801e20c
 8015a5c:	2000f410 	.word	0x2000f410

08015a60 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b082      	sub	sp, #8
 8015a64:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015a66:	2000      	movs	r0, #0
 8015a68:	f7f8 ff08 	bl	800e87c <memp_malloc>
 8015a6c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d007      	beq.n	8015a84 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015a74:	2220      	movs	r2, #32
 8015a76:	2100      	movs	r1, #0
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f004 ff43 	bl	801a904 <memset>
    pcb->ttl = UDP_TTL;
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	22ff      	movs	r2, #255	; 0xff
 8015a82:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015a84:	687b      	ldr	r3, [r7, #4]
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	3708      	adds	r7, #8
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}
	...

08015a90 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015a90:	b480      	push	{r7}
 8015a92:	b085      	sub	sp, #20
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
 8015a98:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d01e      	beq.n	8015ade <udp_netif_ip_addr_changed+0x4e>
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d01a      	beq.n	8015ade <udp_netif_ip_addr_changed+0x4e>
 8015aa8:	683b      	ldr	r3, [r7, #0]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d017      	beq.n	8015ade <udp_netif_ip_addr_changed+0x4e>
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d013      	beq.n	8015ade <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015ab6:	4b0d      	ldr	r3, [pc, #52]	; (8015aec <udp_netif_ip_addr_changed+0x5c>)
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	60fb      	str	r3, [r7, #12]
 8015abc:	e00c      	b.n	8015ad8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	681a      	ldr	r2, [r3, #0]
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d103      	bne.n	8015ad2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	681a      	ldr	r2, [r3, #0]
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	68db      	ldr	r3, [r3, #12]
 8015ad6:	60fb      	str	r3, [r7, #12]
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d1ef      	bne.n	8015abe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015ade:	bf00      	nop
 8015ae0:	3714      	adds	r7, #20
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae8:	4770      	bx	lr
 8015aea:	bf00      	nop
 8015aec:	2000f410 	.word	0x2000f410

08015af0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8015af4:	4b20      	ldr	r3, [pc, #128]	; (8015b78 <dhcp_inc_pcb_refcount+0x88>)
 8015af6:	781b      	ldrb	r3, [r3, #0]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d133      	bne.n	8015b64 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8015afc:	4b1f      	ldr	r3, [pc, #124]	; (8015b7c <dhcp_inc_pcb_refcount+0x8c>)
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d005      	beq.n	8015b10 <dhcp_inc_pcb_refcount+0x20>
 8015b04:	4b1e      	ldr	r3, [pc, #120]	; (8015b80 <dhcp_inc_pcb_refcount+0x90>)
 8015b06:	22e5      	movs	r2, #229	; 0xe5
 8015b08:	491e      	ldr	r1, [pc, #120]	; (8015b84 <dhcp_inc_pcb_refcount+0x94>)
 8015b0a:	481f      	ldr	r0, [pc, #124]	; (8015b88 <dhcp_inc_pcb_refcount+0x98>)
 8015b0c:	f004 ffac 	bl	801aa68 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015b10:	f7ff ffa6 	bl	8015a60 <udp_new>
 8015b14:	4603      	mov	r3, r0
 8015b16:	4a19      	ldr	r2, [pc, #100]	; (8015b7c <dhcp_inc_pcb_refcount+0x8c>)
 8015b18:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8015b1a:	4b18      	ldr	r3, [pc, #96]	; (8015b7c <dhcp_inc_pcb_refcount+0x8c>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d102      	bne.n	8015b28 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015b22:	f04f 33ff 	mov.w	r3, #4294967295
 8015b26:	e024      	b.n	8015b72 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015b28:	4b14      	ldr	r3, [pc, #80]	; (8015b7c <dhcp_inc_pcb_refcount+0x8c>)
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	7a5a      	ldrb	r2, [r3, #9]
 8015b2e:	4b13      	ldr	r3, [pc, #76]	; (8015b7c <dhcp_inc_pcb_refcount+0x8c>)
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	f042 0220 	orr.w	r2, r2, #32
 8015b36:	b2d2      	uxtb	r2, r2
 8015b38:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8015b3a:	4b10      	ldr	r3, [pc, #64]	; (8015b7c <dhcp_inc_pcb_refcount+0x8c>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	2244      	movs	r2, #68	; 0x44
 8015b40:	4912      	ldr	r1, [pc, #72]	; (8015b8c <dhcp_inc_pcb_refcount+0x9c>)
 8015b42:	4618      	mov	r0, r3
 8015b44:	f7ff fe34 	bl	80157b0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8015b48:	4b0c      	ldr	r3, [pc, #48]	; (8015b7c <dhcp_inc_pcb_refcount+0x8c>)
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	2243      	movs	r2, #67	; 0x43
 8015b4e:	490f      	ldr	r1, [pc, #60]	; (8015b8c <dhcp_inc_pcb_refcount+0x9c>)
 8015b50:	4618      	mov	r0, r3
 8015b52:	f7ff feb5 	bl	80158c0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8015b56:	4b09      	ldr	r3, [pc, #36]	; (8015b7c <dhcp_inc_pcb_refcount+0x8c>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	490c      	ldr	r1, [pc, #48]	; (8015b90 <dhcp_inc_pcb_refcount+0xa0>)
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f7ff ff1c 	bl	801599c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015b64:	4b04      	ldr	r3, [pc, #16]	; (8015b78 <dhcp_inc_pcb_refcount+0x88>)
 8015b66:	781b      	ldrb	r3, [r3, #0]
 8015b68:	3301      	adds	r3, #1
 8015b6a:	b2da      	uxtb	r2, r3
 8015b6c:	4b02      	ldr	r3, [pc, #8]	; (8015b78 <dhcp_inc_pcb_refcount+0x88>)
 8015b6e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8015b70:	2300      	movs	r3, #0
}
 8015b72:	4618      	mov	r0, r3
 8015b74:	bd80      	pop	{r7, pc}
 8015b76:	bf00      	nop
 8015b78:	2000857c 	.word	0x2000857c
 8015b7c:	20008578 	.word	0x20008578
 8015b80:	0801e51c 	.word	0x0801e51c
 8015b84:	0801e554 	.word	0x0801e554
 8015b88:	0801e57c 	.word	0x0801e57c
 8015b8c:	0801f0cc 	.word	0x0801f0cc
 8015b90:	08017425 	.word	0x08017425

08015b94 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015b98:	4b0e      	ldr	r3, [pc, #56]	; (8015bd4 <dhcp_dec_pcb_refcount+0x40>)
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d105      	bne.n	8015bac <dhcp_dec_pcb_refcount+0x18>
 8015ba0:	4b0d      	ldr	r3, [pc, #52]	; (8015bd8 <dhcp_dec_pcb_refcount+0x44>)
 8015ba2:	22ff      	movs	r2, #255	; 0xff
 8015ba4:	490d      	ldr	r1, [pc, #52]	; (8015bdc <dhcp_dec_pcb_refcount+0x48>)
 8015ba6:	480e      	ldr	r0, [pc, #56]	; (8015be0 <dhcp_dec_pcb_refcount+0x4c>)
 8015ba8:	f004 ff5e 	bl	801aa68 <iprintf>
  dhcp_pcb_refcount--;
 8015bac:	4b09      	ldr	r3, [pc, #36]	; (8015bd4 <dhcp_dec_pcb_refcount+0x40>)
 8015bae:	781b      	ldrb	r3, [r3, #0]
 8015bb0:	3b01      	subs	r3, #1
 8015bb2:	b2da      	uxtb	r2, r3
 8015bb4:	4b07      	ldr	r3, [pc, #28]	; (8015bd4 <dhcp_dec_pcb_refcount+0x40>)
 8015bb6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8015bb8:	4b06      	ldr	r3, [pc, #24]	; (8015bd4 <dhcp_dec_pcb_refcount+0x40>)
 8015bba:	781b      	ldrb	r3, [r3, #0]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d107      	bne.n	8015bd0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8015bc0:	4b08      	ldr	r3, [pc, #32]	; (8015be4 <dhcp_dec_pcb_refcount+0x50>)
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	f7ff ff09 	bl	80159dc <udp_remove>
    dhcp_pcb = NULL;
 8015bca:	4b06      	ldr	r3, [pc, #24]	; (8015be4 <dhcp_dec_pcb_refcount+0x50>)
 8015bcc:	2200      	movs	r2, #0
 8015bce:	601a      	str	r2, [r3, #0]
  }
}
 8015bd0:	bf00      	nop
 8015bd2:	bd80      	pop	{r7, pc}
 8015bd4:	2000857c 	.word	0x2000857c
 8015bd8:	0801e51c 	.word	0x0801e51c
 8015bdc:	0801e5a4 	.word	0x0801e5a4
 8015be0:	0801e57c 	.word	0x0801e57c
 8015be4:	20008578 	.word	0x20008578

08015be8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b084      	sub	sp, #16
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bf4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015bf6:	210c      	movs	r1, #12
 8015bf8:	68f8      	ldr	r0, [r7, #12]
 8015bfa:	f001 f855 	bl	8016ca8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015bfe:	4b06      	ldr	r3, [pc, #24]	; (8015c18 <dhcp_handle_nak+0x30>)
 8015c00:	4a05      	ldr	r2, [pc, #20]	; (8015c18 <dhcp_handle_nak+0x30>)
 8015c02:	4905      	ldr	r1, [pc, #20]	; (8015c18 <dhcp_handle_nak+0x30>)
 8015c04:	6878      	ldr	r0, [r7, #4]
 8015c06:	f7f9 f82d 	bl	800ec64 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8015c0a:	6878      	ldr	r0, [r7, #4]
 8015c0c:	f000 fc48 	bl	80164a0 <dhcp_discover>
}
 8015c10:	bf00      	nop
 8015c12:	3710      	adds	r7, #16
 8015c14:	46bd      	mov	sp, r7
 8015c16:	bd80      	pop	{r7, pc}
 8015c18:	0801f0cc 	.word	0x0801f0cc

08015c1c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b084      	sub	sp, #16
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c28:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8015c2a:	2108      	movs	r1, #8
 8015c2c:	68f8      	ldr	r0, [r7, #12]
 8015c2e:	f001 f83b 	bl	8016ca8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	331c      	adds	r3, #28
 8015c36:	2200      	movs	r2, #0
 8015c38:	4619      	mov	r1, r3
 8015c3a:	6878      	ldr	r0, [r7, #4]
 8015c3c:	f002 fb3c 	bl	80182b8 <etharp_query>
 8015c40:	4603      	mov	r3, r0
 8015c42:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	799b      	ldrb	r3, [r3, #6]
 8015c48:	2bff      	cmp	r3, #255	; 0xff
 8015c4a:	d005      	beq.n	8015c58 <dhcp_check+0x3c>
    dhcp->tries++;
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	799b      	ldrb	r3, [r3, #6]
 8015c50:	3301      	adds	r3, #1
 8015c52:	b2da      	uxtb	r2, r3
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015c58:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8015c5c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015c5e:	893b      	ldrh	r3, [r7, #8]
 8015c60:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015c64:	4a06      	ldr	r2, [pc, #24]	; (8015c80 <dhcp_check+0x64>)
 8015c66:	fb82 1203 	smull	r1, r2, r2, r3
 8015c6a:	1152      	asrs	r2, r2, #5
 8015c6c:	17db      	asrs	r3, r3, #31
 8015c6e:	1ad3      	subs	r3, r2, r3
 8015c70:	b29a      	uxth	r2, r3
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8015c76:	bf00      	nop
 8015c78:	3710      	adds	r7, #16
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd80      	pop	{r7, pc}
 8015c7e:	bf00      	nop
 8015c80:	10624dd3 	.word	0x10624dd3

08015c84 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b084      	sub	sp, #16
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
 8015c8c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c92:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015c94:	4b0c      	ldr	r3, [pc, #48]	; (8015cc8 <dhcp_handle_offer+0x44>)
 8015c96:	789b      	ldrb	r3, [r3, #2]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d011      	beq.n	8015cc0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8015ca2:	4b0a      	ldr	r3, [pc, #40]	; (8015ccc <dhcp_handle_offer+0x48>)
 8015ca4:	689b      	ldr	r3, [r3, #8]
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7f8 f947 	bl	800df3a <lwip_htonl>
 8015cac:	4602      	mov	r2, r0
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015cb2:	683b      	ldr	r3, [r7, #0]
 8015cb4:	691a      	ldr	r2, [r3, #16]
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f000 f808 	bl	8015cd0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8015cc0:	bf00      	nop
 8015cc2:	3710      	adds	r7, #16
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	2000f414 	.word	0x2000f414
 8015ccc:	2000f41c 	.word	0x2000f41c

08015cd0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015cd0:	b5b0      	push	{r4, r5, r7, lr}
 8015cd2:	b08a      	sub	sp, #40	; 0x28
 8015cd4:	af02      	add	r7, sp, #8
 8015cd6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d109      	bne.n	8015cf2 <dhcp_select+0x22>
 8015cde:	4b71      	ldr	r3, [pc, #452]	; (8015ea4 <dhcp_select+0x1d4>)
 8015ce0:	f240 1277 	movw	r2, #375	; 0x177
 8015ce4:	4970      	ldr	r1, [pc, #448]	; (8015ea8 <dhcp_select+0x1d8>)
 8015ce6:	4871      	ldr	r0, [pc, #452]	; (8015eac <dhcp_select+0x1dc>)
 8015ce8:	f004 febe 	bl	801aa68 <iprintf>
 8015cec:	f06f 030f 	mvn.w	r3, #15
 8015cf0:	e0d3      	b.n	8015e9a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cf6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015cf8:	69bb      	ldr	r3, [r7, #24]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d109      	bne.n	8015d12 <dhcp_select+0x42>
 8015cfe:	4b69      	ldr	r3, [pc, #420]	; (8015ea4 <dhcp_select+0x1d4>)
 8015d00:	f240 1279 	movw	r2, #377	; 0x179
 8015d04:	496a      	ldr	r1, [pc, #424]	; (8015eb0 <dhcp_select+0x1e0>)
 8015d06:	4869      	ldr	r0, [pc, #420]	; (8015eac <dhcp_select+0x1dc>)
 8015d08:	f004 feae 	bl	801aa68 <iprintf>
 8015d0c:	f06f 0305 	mvn.w	r3, #5
 8015d10:	e0c3      	b.n	8015e9a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8015d12:	2101      	movs	r1, #1
 8015d14:	69b8      	ldr	r0, [r7, #24]
 8015d16:	f000 ffc7 	bl	8016ca8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015d1a:	f107 030c 	add.w	r3, r7, #12
 8015d1e:	2203      	movs	r2, #3
 8015d20:	69b9      	ldr	r1, [r7, #24]
 8015d22:	6878      	ldr	r0, [r7, #4]
 8015d24:	f001 fc4c 	bl	80175c0 <dhcp_create_msg>
 8015d28:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015d2a:	697b      	ldr	r3, [r7, #20]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	f000 8085 	beq.w	8015e3c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015d32:	697b      	ldr	r3, [r7, #20]
 8015d34:	685b      	ldr	r3, [r3, #4]
 8015d36:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015d38:	89b8      	ldrh	r0, [r7, #12]
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d40:	2302      	movs	r3, #2
 8015d42:	2239      	movs	r2, #57	; 0x39
 8015d44:	f000 ffca 	bl	8016cdc <dhcp_option>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015d4c:	89b8      	ldrh	r0, [r7, #12]
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d58:	461a      	mov	r2, r3
 8015d5a:	f001 f819 	bl	8016d90 <dhcp_option_short>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015d62:	89b8      	ldrh	r0, [r7, #12]
 8015d64:	693b      	ldr	r3, [r7, #16]
 8015d66:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d6a:	2304      	movs	r3, #4
 8015d6c:	2232      	movs	r2, #50	; 0x32
 8015d6e:	f000 ffb5 	bl	8016cdc <dhcp_option>
 8015d72:	4603      	mov	r3, r0
 8015d74:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015d76:	89bc      	ldrh	r4, [r7, #12]
 8015d78:	693b      	ldr	r3, [r7, #16]
 8015d7a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015d7e:	69bb      	ldr	r3, [r7, #24]
 8015d80:	69db      	ldr	r3, [r3, #28]
 8015d82:	4618      	mov	r0, r3
 8015d84:	f7f8 f8d9 	bl	800df3a <lwip_htonl>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	461a      	mov	r2, r3
 8015d8c:	4629      	mov	r1, r5
 8015d8e:	4620      	mov	r0, r4
 8015d90:	f001 f830 	bl	8016df4 <dhcp_option_long>
 8015d94:	4603      	mov	r3, r0
 8015d96:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015d98:	89b8      	ldrh	r0, [r7, #12]
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015da0:	2304      	movs	r3, #4
 8015da2:	2236      	movs	r2, #54	; 0x36
 8015da4:	f000 ff9a 	bl	8016cdc <dhcp_option>
 8015da8:	4603      	mov	r3, r0
 8015daa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015dac:	89bc      	ldrh	r4, [r7, #12]
 8015dae:	693b      	ldr	r3, [r7, #16]
 8015db0:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015db4:	69bb      	ldr	r3, [r7, #24]
 8015db6:	699b      	ldr	r3, [r3, #24]
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7f8 f8be 	bl	800df3a <lwip_htonl>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	461a      	mov	r2, r3
 8015dc2:	4629      	mov	r1, r5
 8015dc4:	4620      	mov	r0, r4
 8015dc6:	f001 f815 	bl	8016df4 <dhcp_option_long>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015dce:	89b8      	ldrh	r0, [r7, #12]
 8015dd0:	693b      	ldr	r3, [r7, #16]
 8015dd2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015dd6:	2303      	movs	r3, #3
 8015dd8:	2237      	movs	r2, #55	; 0x37
 8015dda:	f000 ff7f 	bl	8016cdc <dhcp_option>
 8015dde:	4603      	mov	r3, r0
 8015de0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015de2:	2300      	movs	r3, #0
 8015de4:	77bb      	strb	r3, [r7, #30]
 8015de6:	e00e      	b.n	8015e06 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015de8:	89b8      	ldrh	r0, [r7, #12]
 8015dea:	693b      	ldr	r3, [r7, #16]
 8015dec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015df0:	7fbb      	ldrb	r3, [r7, #30]
 8015df2:	4a30      	ldr	r2, [pc, #192]	; (8015eb4 <dhcp_select+0x1e4>)
 8015df4:	5cd3      	ldrb	r3, [r2, r3]
 8015df6:	461a      	mov	r2, r3
 8015df8:	f000 ffa4 	bl	8016d44 <dhcp_option_byte>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015e00:	7fbb      	ldrb	r3, [r7, #30]
 8015e02:	3301      	adds	r3, #1
 8015e04:	77bb      	strb	r3, [r7, #30]
 8015e06:	7fbb      	ldrb	r3, [r7, #30]
 8015e08:	2b02      	cmp	r3, #2
 8015e0a:	d9ed      	bls.n	8015de8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015e0c:	89b8      	ldrh	r0, [r7, #12]
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	33f0      	adds	r3, #240	; 0xf0
 8015e12:	697a      	ldr	r2, [r7, #20]
 8015e14:	4619      	mov	r1, r3
 8015e16:	f001 fca9 	bl	801776c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015e1a:	4b27      	ldr	r3, [pc, #156]	; (8015eb8 <dhcp_select+0x1e8>)
 8015e1c:	6818      	ldr	r0, [r3, #0]
 8015e1e:	4b27      	ldr	r3, [pc, #156]	; (8015ebc <dhcp_select+0x1ec>)
 8015e20:	9301      	str	r3, [sp, #4]
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	9300      	str	r3, [sp, #0]
 8015e26:	2343      	movs	r3, #67	; 0x43
 8015e28:	4a25      	ldr	r2, [pc, #148]	; (8015ec0 <dhcp_select+0x1f0>)
 8015e2a:	6979      	ldr	r1, [r7, #20]
 8015e2c:	f7ff fbda 	bl	80155e4 <udp_sendto_if_src>
 8015e30:	4603      	mov	r3, r0
 8015e32:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015e34:	6978      	ldr	r0, [r7, #20]
 8015e36:	f7f9 fc23 	bl	800f680 <pbuf_free>
 8015e3a:	e001      	b.n	8015e40 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015e3c:	23ff      	movs	r3, #255	; 0xff
 8015e3e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015e40:	69bb      	ldr	r3, [r7, #24]
 8015e42:	799b      	ldrb	r3, [r3, #6]
 8015e44:	2bff      	cmp	r3, #255	; 0xff
 8015e46:	d005      	beq.n	8015e54 <dhcp_select+0x184>
    dhcp->tries++;
 8015e48:	69bb      	ldr	r3, [r7, #24]
 8015e4a:	799b      	ldrb	r3, [r3, #6]
 8015e4c:	3301      	adds	r3, #1
 8015e4e:	b2da      	uxtb	r2, r3
 8015e50:	69bb      	ldr	r3, [r7, #24]
 8015e52:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015e54:	69bb      	ldr	r3, [r7, #24]
 8015e56:	799b      	ldrb	r3, [r3, #6]
 8015e58:	2b05      	cmp	r3, #5
 8015e5a:	d80d      	bhi.n	8015e78 <dhcp_select+0x1a8>
 8015e5c:	69bb      	ldr	r3, [r7, #24]
 8015e5e:	799b      	ldrb	r3, [r3, #6]
 8015e60:	461a      	mov	r2, r3
 8015e62:	2301      	movs	r3, #1
 8015e64:	4093      	lsls	r3, r2
 8015e66:	b29b      	uxth	r3, r3
 8015e68:	461a      	mov	r2, r3
 8015e6a:	0152      	lsls	r2, r2, #5
 8015e6c:	1ad2      	subs	r2, r2, r3
 8015e6e:	0092      	lsls	r2, r2, #2
 8015e70:	4413      	add	r3, r2
 8015e72:	00db      	lsls	r3, r3, #3
 8015e74:	b29b      	uxth	r3, r3
 8015e76:	e001      	b.n	8015e7c <dhcp_select+0x1ac>
 8015e78:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015e7c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015e7e:	89fb      	ldrh	r3, [r7, #14]
 8015e80:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015e84:	4a0f      	ldr	r2, [pc, #60]	; (8015ec4 <dhcp_select+0x1f4>)
 8015e86:	fb82 1203 	smull	r1, r2, r2, r3
 8015e8a:	1152      	asrs	r2, r2, #5
 8015e8c:	17db      	asrs	r3, r3, #31
 8015e8e:	1ad3      	subs	r3, r2, r3
 8015e90:	b29a      	uxth	r2, r3
 8015e92:	69bb      	ldr	r3, [r7, #24]
 8015e94:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015e96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	3720      	adds	r7, #32
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8015ea2:	bf00      	nop
 8015ea4:	0801e51c 	.word	0x0801e51c
 8015ea8:	0801e5c8 	.word	0x0801e5c8
 8015eac:	0801e57c 	.word	0x0801e57c
 8015eb0:	0801e5e4 	.word	0x0801e5e4
 8015eb4:	2000003c 	.word	0x2000003c
 8015eb8:	20008578 	.word	0x20008578
 8015ebc:	0801f0cc 	.word	0x0801f0cc
 8015ec0:	0801f0d0 	.word	0x0801f0d0
 8015ec4:	10624dd3 	.word	0x10624dd3

08015ec8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	b082      	sub	sp, #8
 8015ecc:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8015ece:	4b27      	ldr	r3, [pc, #156]	; (8015f6c <dhcp_coarse_tmr+0xa4>)
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	607b      	str	r3, [r7, #4]
 8015ed4:	e042      	b.n	8015f5c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eda:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015edc:	683b      	ldr	r3, [r7, #0]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d039      	beq.n	8015f56 <dhcp_coarse_tmr+0x8e>
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	795b      	ldrb	r3, [r3, #5]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d035      	beq.n	8015f56 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	8a9b      	ldrh	r3, [r3, #20]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d012      	beq.n	8015f18 <dhcp_coarse_tmr+0x50>
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	8a5b      	ldrh	r3, [r3, #18]
 8015ef6:	3301      	adds	r3, #1
 8015ef8:	b29a      	uxth	r2, r3
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	825a      	strh	r2, [r3, #18]
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	8a5a      	ldrh	r2, [r3, #18]
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	8a9b      	ldrh	r3, [r3, #20]
 8015f06:	429a      	cmp	r2, r3
 8015f08:	d106      	bne.n	8015f18 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	f000 fe32 	bl	8016b74 <dhcp_release_and_stop>
        dhcp_start(netif);
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f000 f969 	bl	80161e8 <dhcp_start>
 8015f16:	e01e      	b.n	8015f56 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015f18:	683b      	ldr	r3, [r7, #0]
 8015f1a:	8a1b      	ldrh	r3, [r3, #16]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d00b      	beq.n	8015f38 <dhcp_coarse_tmr+0x70>
 8015f20:	683b      	ldr	r3, [r7, #0]
 8015f22:	8a1b      	ldrh	r3, [r3, #16]
 8015f24:	1e5a      	subs	r2, r3, #1
 8015f26:	b291      	uxth	r1, r2
 8015f28:	683a      	ldr	r2, [r7, #0]
 8015f2a:	8211      	strh	r1, [r2, #16]
 8015f2c:	2b01      	cmp	r3, #1
 8015f2e:	d103      	bne.n	8015f38 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f000 f8c6 	bl	80160c2 <dhcp_t2_timeout>
 8015f36:	e00e      	b.n	8015f56 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	89db      	ldrh	r3, [r3, #14]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d00a      	beq.n	8015f56 <dhcp_coarse_tmr+0x8e>
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	89db      	ldrh	r3, [r3, #14]
 8015f44:	1e5a      	subs	r2, r3, #1
 8015f46:	b291      	uxth	r1, r2
 8015f48:	683a      	ldr	r2, [r7, #0]
 8015f4a:	81d1      	strh	r1, [r2, #14]
 8015f4c:	2b01      	cmp	r3, #1
 8015f4e:	d102      	bne.n	8015f56 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f000 f888 	bl	8016066 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	607b      	str	r3, [r7, #4]
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d1b9      	bne.n	8015ed6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8015f62:	bf00      	nop
 8015f64:	bf00      	nop
 8015f66:	3708      	adds	r7, #8
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bd80      	pop	{r7, pc}
 8015f6c:	2000f3e8 	.word	0x2000f3e8

08015f70 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b082      	sub	sp, #8
 8015f74:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8015f76:	4b16      	ldr	r3, [pc, #88]	; (8015fd0 <dhcp_fine_tmr+0x60>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	607b      	str	r3, [r7, #4]
 8015f7c:	e020      	b.n	8015fc0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f82:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015f84:	683b      	ldr	r3, [r7, #0]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d017      	beq.n	8015fba <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8015f8a:	683b      	ldr	r3, [r7, #0]
 8015f8c:	891b      	ldrh	r3, [r3, #8]
 8015f8e:	2b01      	cmp	r3, #1
 8015f90:	d906      	bls.n	8015fa0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8015f92:	683b      	ldr	r3, [r7, #0]
 8015f94:	891b      	ldrh	r3, [r3, #8]
 8015f96:	3b01      	subs	r3, #1
 8015f98:	b29a      	uxth	r2, r3
 8015f9a:	683b      	ldr	r3, [r7, #0]
 8015f9c:	811a      	strh	r2, [r3, #8]
 8015f9e:	e00c      	b.n	8015fba <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8015fa0:	683b      	ldr	r3, [r7, #0]
 8015fa2:	891b      	ldrh	r3, [r3, #8]
 8015fa4:	2b01      	cmp	r3, #1
 8015fa6:	d108      	bne.n	8015fba <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8015fa8:	683b      	ldr	r3, [r7, #0]
 8015faa:	891b      	ldrh	r3, [r3, #8]
 8015fac:	3b01      	subs	r3, #1
 8015fae:	b29a      	uxth	r2, r3
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	f000 f80d 	bl	8015fd4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	607b      	str	r3, [r7, #4]
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d1db      	bne.n	8015f7e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8015fc6:	bf00      	nop
 8015fc8:	bf00      	nop
 8015fca:	3708      	adds	r7, #8
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}
 8015fd0:	2000f3e8 	.word	0x2000f3e8

08015fd4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b084      	sub	sp, #16
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fe0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	795b      	ldrb	r3, [r3, #5]
 8015fe6:	2b0c      	cmp	r3, #12
 8015fe8:	d003      	beq.n	8015ff2 <dhcp_timeout+0x1e>
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	795b      	ldrb	r3, [r3, #5]
 8015fee:	2b06      	cmp	r3, #6
 8015ff0:	d103      	bne.n	8015ffa <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8015ff2:	6878      	ldr	r0, [r7, #4]
 8015ff4:	f000 fa54 	bl	80164a0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8015ff8:	e031      	b.n	801605e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	795b      	ldrb	r3, [r3, #5]
 8015ffe:	2b01      	cmp	r3, #1
 8016000:	d10e      	bne.n	8016020 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	799b      	ldrb	r3, [r3, #6]
 8016006:	2b05      	cmp	r3, #5
 8016008:	d803      	bhi.n	8016012 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f7ff fe60 	bl	8015cd0 <dhcp_select>
}
 8016010:	e025      	b.n	801605e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8016012:	6878      	ldr	r0, [r7, #4]
 8016014:	f000 fdae 	bl	8016b74 <dhcp_release_and_stop>
      dhcp_start(netif);
 8016018:	6878      	ldr	r0, [r7, #4]
 801601a:	f000 f8e5 	bl	80161e8 <dhcp_start>
}
 801601e:	e01e      	b.n	801605e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	795b      	ldrb	r3, [r3, #5]
 8016024:	2b08      	cmp	r3, #8
 8016026:	d10b      	bne.n	8016040 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	799b      	ldrb	r3, [r3, #6]
 801602c:	2b01      	cmp	r3, #1
 801602e:	d803      	bhi.n	8016038 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	f7ff fdf3 	bl	8015c1c <dhcp_check>
}
 8016036:	e012      	b.n	801605e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f000 fad3 	bl	80165e4 <dhcp_bind>
}
 801603e:	e00e      	b.n	801605e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	795b      	ldrb	r3, [r3, #5]
 8016044:	2b03      	cmp	r3, #3
 8016046:	d10a      	bne.n	801605e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	799b      	ldrb	r3, [r3, #6]
 801604c:	2b01      	cmp	r3, #1
 801604e:	d803      	bhi.n	8016058 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f000 fcd9 	bl	8016a08 <dhcp_reboot>
}
 8016056:	e002      	b.n	801605e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f000 fa21 	bl	80164a0 <dhcp_discover>
}
 801605e:	bf00      	nop
 8016060:	3710      	adds	r7, #16
 8016062:	46bd      	mov	sp, r7
 8016064:	bd80      	pop	{r7, pc}

08016066 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8016066:	b580      	push	{r7, lr}
 8016068:	b084      	sub	sp, #16
 801606a:	af00      	add	r7, sp, #0
 801606c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016072:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	795b      	ldrb	r3, [r3, #5]
 8016078:	2b01      	cmp	r3, #1
 801607a:	d007      	beq.n	801608c <dhcp_t1_timeout+0x26>
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	795b      	ldrb	r3, [r3, #5]
 8016080:	2b0a      	cmp	r3, #10
 8016082:	d003      	beq.n	801608c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016088:	2b05      	cmp	r3, #5
 801608a:	d116      	bne.n	80160ba <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f000 fb83 	bl	8016798 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	899b      	ldrh	r3, [r3, #12]
 8016096:	461a      	mov	r2, r3
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	8a5b      	ldrh	r3, [r3, #18]
 801609c:	1ad3      	subs	r3, r2, r3
 801609e:	2b01      	cmp	r3, #1
 80160a0:	dd0b      	ble.n	80160ba <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	899b      	ldrh	r3, [r3, #12]
 80160a6:	461a      	mov	r2, r3
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	8a5b      	ldrh	r3, [r3, #18]
 80160ac:	1ad3      	subs	r3, r2, r3
 80160ae:	0fda      	lsrs	r2, r3, #31
 80160b0:	4413      	add	r3, r2
 80160b2:	105b      	asrs	r3, r3, #1
 80160b4:	b29a      	uxth	r2, r3
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80160ba:	bf00      	nop
 80160bc:	3710      	adds	r7, #16
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}

080160c2 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80160c2:	b580      	push	{r7, lr}
 80160c4:	b084      	sub	sp, #16
 80160c6:	af00      	add	r7, sp, #0
 80160c8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160ce:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	795b      	ldrb	r3, [r3, #5]
 80160d4:	2b01      	cmp	r3, #1
 80160d6:	d00b      	beq.n	80160f0 <dhcp_t2_timeout+0x2e>
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	795b      	ldrb	r3, [r3, #5]
 80160dc:	2b0a      	cmp	r3, #10
 80160de:	d007      	beq.n	80160f0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80160e4:	2b05      	cmp	r3, #5
 80160e6:	d003      	beq.n	80160f0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	795b      	ldrb	r3, [r3, #5]
 80160ec:	2b04      	cmp	r3, #4
 80160ee:	d116      	bne.n	801611e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f000 fbed 	bl	80168d0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	8a9b      	ldrh	r3, [r3, #20]
 80160fa:	461a      	mov	r2, r3
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	8a5b      	ldrh	r3, [r3, #18]
 8016100:	1ad3      	subs	r3, r2, r3
 8016102:	2b01      	cmp	r3, #1
 8016104:	dd0b      	ble.n	801611e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	8a9b      	ldrh	r3, [r3, #20]
 801610a:	461a      	mov	r2, r3
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	8a5b      	ldrh	r3, [r3, #18]
 8016110:	1ad3      	subs	r3, r2, r3
 8016112:	0fda      	lsrs	r2, r3, #31
 8016114:	4413      	add	r3, r2
 8016116:	105b      	asrs	r3, r3, #1
 8016118:	b29a      	uxth	r2, r3
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801611e:	bf00      	nop
 8016120:	3710      	adds	r7, #16
 8016122:	46bd      	mov	sp, r7
 8016124:	bd80      	pop	{r7, pc}
	...

08016128 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b084      	sub	sp, #16
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
 8016130:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016136:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	2200      	movs	r2, #0
 801613c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	2200      	movs	r2, #0
 8016142:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8016144:	4b26      	ldr	r3, [pc, #152]	; (80161e0 <dhcp_handle_ack+0xb8>)
 8016146:	78db      	ldrb	r3, [r3, #3]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d003      	beq.n	8016154 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801614c:	4b25      	ldr	r3, [pc, #148]	; (80161e4 <dhcp_handle_ack+0xbc>)
 801614e:	68da      	ldr	r2, [r3, #12]
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8016154:	4b22      	ldr	r3, [pc, #136]	; (80161e0 <dhcp_handle_ack+0xb8>)
 8016156:	791b      	ldrb	r3, [r3, #4]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d004      	beq.n	8016166 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801615c:	4b21      	ldr	r3, [pc, #132]	; (80161e4 <dhcp_handle_ack+0xbc>)
 801615e:	691a      	ldr	r2, [r3, #16]
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	62da      	str	r2, [r3, #44]	; 0x2c
 8016164:	e004      	b.n	8016170 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801616a:	085a      	lsrs	r2, r3, #1
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8016170:	4b1b      	ldr	r3, [pc, #108]	; (80161e0 <dhcp_handle_ack+0xb8>)
 8016172:	795b      	ldrb	r3, [r3, #5]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d004      	beq.n	8016182 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8016178:	4b1a      	ldr	r3, [pc, #104]	; (80161e4 <dhcp_handle_ack+0xbc>)
 801617a:	695a      	ldr	r2, [r3, #20]
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	631a      	str	r2, [r3, #48]	; 0x30
 8016180:	e007      	b.n	8016192 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016186:	4613      	mov	r3, r2
 8016188:	00db      	lsls	r3, r3, #3
 801618a:	1a9b      	subs	r3, r3, r2
 801618c:	08da      	lsrs	r2, r3, #3
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016192:	683b      	ldr	r3, [r7, #0]
 8016194:	691a      	ldr	r2, [r3, #16]
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801619a:	4b11      	ldr	r3, [pc, #68]	; (80161e0 <dhcp_handle_ack+0xb8>)
 801619c:	799b      	ldrb	r3, [r3, #6]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d00b      	beq.n	80161ba <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80161a2:	4b10      	ldr	r3, [pc, #64]	; (80161e4 <dhcp_handle_ack+0xbc>)
 80161a4:	699b      	ldr	r3, [r3, #24]
 80161a6:	4618      	mov	r0, r3
 80161a8:	f7f7 fec7 	bl	800df3a <lwip_htonl>
 80161ac:	4602      	mov	r2, r0
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	2201      	movs	r2, #1
 80161b6:	71da      	strb	r2, [r3, #7]
 80161b8:	e002      	b.n	80161c0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	2200      	movs	r2, #0
 80161be:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80161c0:	4b07      	ldr	r3, [pc, #28]	; (80161e0 <dhcp_handle_ack+0xb8>)
 80161c2:	79db      	ldrb	r3, [r3, #7]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d007      	beq.n	80161d8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80161c8:	4b06      	ldr	r3, [pc, #24]	; (80161e4 <dhcp_handle_ack+0xbc>)
 80161ca:	69db      	ldr	r3, [r3, #28]
 80161cc:	4618      	mov	r0, r3
 80161ce:	f7f7 feb4 	bl	800df3a <lwip_htonl>
 80161d2:	4602      	mov	r2, r0
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80161d8:	bf00      	nop
 80161da:	3710      	adds	r7, #16
 80161dc:	46bd      	mov	sp, r7
 80161de:	bd80      	pop	{r7, pc}
 80161e0:	2000f414 	.word	0x2000f414
 80161e4:	2000f41c 	.word	0x2000f41c

080161e8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b084      	sub	sp, #16
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d109      	bne.n	801620a <dhcp_start+0x22>
 80161f6:	4b37      	ldr	r3, [pc, #220]	; (80162d4 <dhcp_start+0xec>)
 80161f8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80161fc:	4936      	ldr	r1, [pc, #216]	; (80162d8 <dhcp_start+0xf0>)
 80161fe:	4837      	ldr	r0, [pc, #220]	; (80162dc <dhcp_start+0xf4>)
 8016200:	f004 fc32 	bl	801aa68 <iprintf>
 8016204:	f06f 030f 	mvn.w	r3, #15
 8016208:	e060      	b.n	80162cc <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016210:	f003 0301 	and.w	r3, r3, #1
 8016214:	2b00      	cmp	r3, #0
 8016216:	d109      	bne.n	801622c <dhcp_start+0x44>
 8016218:	4b2e      	ldr	r3, [pc, #184]	; (80162d4 <dhcp_start+0xec>)
 801621a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801621e:	4930      	ldr	r1, [pc, #192]	; (80162e0 <dhcp_start+0xf8>)
 8016220:	482e      	ldr	r0, [pc, #184]	; (80162dc <dhcp_start+0xf4>)
 8016222:	f004 fc21 	bl	801aa68 <iprintf>
 8016226:	f06f 030f 	mvn.w	r3, #15
 801622a:	e04f      	b.n	80162cc <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016230:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016236:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801623a:	d202      	bcs.n	8016242 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801623c:	f04f 33ff 	mov.w	r3, #4294967295
 8016240:	e044      	b.n	80162cc <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d10d      	bne.n	8016264 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8016248:	2034      	movs	r0, #52	; 0x34
 801624a:	f7f8 f995 	bl	800e578 <mem_malloc>
 801624e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d102      	bne.n	801625c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8016256:	f04f 33ff 	mov.w	r3, #4294967295
 801625a:	e037      	b.n	80162cc <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	68fa      	ldr	r2, [r7, #12]
 8016260:	625a      	str	r2, [r3, #36]	; 0x24
 8016262:	e005      	b.n	8016270 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	791b      	ldrb	r3, [r3, #4]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d001      	beq.n	8016270 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801626c:	f7ff fc92 	bl	8015b94 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8016270:	2234      	movs	r2, #52	; 0x34
 8016272:	2100      	movs	r1, #0
 8016274:	68f8      	ldr	r0, [r7, #12]
 8016276:	f004 fb45 	bl	801a904 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801627a:	f7ff fc39 	bl	8015af0 <dhcp_inc_pcb_refcount>
 801627e:	4603      	mov	r3, r0
 8016280:	2b00      	cmp	r3, #0
 8016282:	d002      	beq.n	801628a <dhcp_start+0xa2>
    return ERR_MEM;
 8016284:	f04f 33ff 	mov.w	r3, #4294967295
 8016288:	e020      	b.n	80162cc <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	2201      	movs	r2, #1
 801628e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016296:	f003 0304 	and.w	r3, r3, #4
 801629a:	2b00      	cmp	r3, #0
 801629c:	d105      	bne.n	80162aa <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801629e:	2102      	movs	r1, #2
 80162a0:	68f8      	ldr	r0, [r7, #12]
 80162a2:	f000 fd01 	bl	8016ca8 <dhcp_set_state>
    return ERR_OK;
 80162a6:	2300      	movs	r3, #0
 80162a8:	e010      	b.n	80162cc <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80162aa:	6878      	ldr	r0, [r7, #4]
 80162ac:	f000 f8f8 	bl	80164a0 <dhcp_discover>
 80162b0:	4603      	mov	r3, r0
 80162b2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80162b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d005      	beq.n	80162c8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f000 fc59 	bl	8016b74 <dhcp_release_and_stop>
    return ERR_MEM;
 80162c2:	f04f 33ff 	mov.w	r3, #4294967295
 80162c6:	e001      	b.n	80162cc <dhcp_start+0xe4>
  }
  return result;
 80162c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80162cc:	4618      	mov	r0, r3
 80162ce:	3710      	adds	r7, #16
 80162d0:	46bd      	mov	sp, r7
 80162d2:	bd80      	pop	{r7, pc}
 80162d4:	0801e51c 	.word	0x0801e51c
 80162d8:	0801e600 	.word	0x0801e600
 80162dc:	0801e57c 	.word	0x0801e57c
 80162e0:	0801e644 	.word	0x0801e644

080162e4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80162e4:	b580      	push	{r7, lr}
 80162e6:	b084      	sub	sp, #16
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162f0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d025      	beq.n	8016344 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	795b      	ldrb	r3, [r3, #5]
 80162fc:	2b0a      	cmp	r3, #10
 80162fe:	d008      	beq.n	8016312 <dhcp_network_changed+0x2e>
 8016300:	2b0a      	cmp	r3, #10
 8016302:	dc0d      	bgt.n	8016320 <dhcp_network_changed+0x3c>
 8016304:	2b00      	cmp	r3, #0
 8016306:	d01f      	beq.n	8016348 <dhcp_network_changed+0x64>
 8016308:	2b00      	cmp	r3, #0
 801630a:	db09      	blt.n	8016320 <dhcp_network_changed+0x3c>
 801630c:	3b03      	subs	r3, #3
 801630e:	2b02      	cmp	r3, #2
 8016310:	d806      	bhi.n	8016320 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	2200      	movs	r2, #0
 8016316:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8016318:	6878      	ldr	r0, [r7, #4]
 801631a:	f000 fb75 	bl	8016a08 <dhcp_reboot>
      break;
 801631e:	e014      	b.n	801634a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	795b      	ldrb	r3, [r3, #5]
 8016324:	2b0c      	cmp	r3, #12
 8016326:	d906      	bls.n	8016336 <dhcp_network_changed+0x52>
 8016328:	4b09      	ldr	r3, [pc, #36]	; (8016350 <dhcp_network_changed+0x6c>)
 801632a:	f240 326d 	movw	r2, #877	; 0x36d
 801632e:	4909      	ldr	r1, [pc, #36]	; (8016354 <dhcp_network_changed+0x70>)
 8016330:	4809      	ldr	r0, [pc, #36]	; (8016358 <dhcp_network_changed+0x74>)
 8016332:	f004 fb99 	bl	801aa68 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	2200      	movs	r2, #0
 801633a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	f000 f8af 	bl	80164a0 <dhcp_discover>
      break;
 8016342:	e002      	b.n	801634a <dhcp_network_changed+0x66>
    return;
 8016344:	bf00      	nop
 8016346:	e000      	b.n	801634a <dhcp_network_changed+0x66>
      break;
 8016348:	bf00      	nop
  }
}
 801634a:	3710      	adds	r7, #16
 801634c:	46bd      	mov	sp, r7
 801634e:	bd80      	pop	{r7, pc}
 8016350:	0801e51c 	.word	0x0801e51c
 8016354:	0801e668 	.word	0x0801e668
 8016358:	0801e57c 	.word	0x0801e57c

0801635c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b084      	sub	sp, #16
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d107      	bne.n	801637c <dhcp_arp_reply+0x20>
 801636c:	4b0e      	ldr	r3, [pc, #56]	; (80163a8 <dhcp_arp_reply+0x4c>)
 801636e:	f240 328b 	movw	r2, #907	; 0x38b
 8016372:	490e      	ldr	r1, [pc, #56]	; (80163ac <dhcp_arp_reply+0x50>)
 8016374:	480e      	ldr	r0, [pc, #56]	; (80163b0 <dhcp_arp_reply+0x54>)
 8016376:	f004 fb77 	bl	801aa68 <iprintf>
 801637a:	e012      	b.n	80163a2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016380:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d00c      	beq.n	80163a2 <dhcp_arp_reply+0x46>
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	795b      	ldrb	r3, [r3, #5]
 801638c:	2b08      	cmp	r3, #8
 801638e:	d108      	bne.n	80163a2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	681a      	ldr	r2, [r3, #0]
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	69db      	ldr	r3, [r3, #28]
 8016398:	429a      	cmp	r2, r3
 801639a:	d102      	bne.n	80163a2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	f000 f809 	bl	80163b4 <dhcp_decline>
    }
  }
}
 80163a2:	3710      	adds	r7, #16
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd80      	pop	{r7, pc}
 80163a8:	0801e51c 	.word	0x0801e51c
 80163ac:	0801e600 	.word	0x0801e600
 80163b0:	0801e57c 	.word	0x0801e57c

080163b4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80163b4:	b5b0      	push	{r4, r5, r7, lr}
 80163b6:	b08a      	sub	sp, #40	; 0x28
 80163b8:	af02      	add	r7, sp, #8
 80163ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163c0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80163c2:	210c      	movs	r1, #12
 80163c4:	69b8      	ldr	r0, [r7, #24]
 80163c6:	f000 fc6f 	bl	8016ca8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80163ca:	f107 030c 	add.w	r3, r7, #12
 80163ce:	2204      	movs	r2, #4
 80163d0:	69b9      	ldr	r1, [r7, #24]
 80163d2:	6878      	ldr	r0, [r7, #4]
 80163d4:	f001 f8f4 	bl	80175c0 <dhcp_create_msg>
 80163d8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80163da:	697b      	ldr	r3, [r7, #20]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d035      	beq.n	801644c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80163e0:	697b      	ldr	r3, [r7, #20]
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80163e6:	89b8      	ldrh	r0, [r7, #12]
 80163e8:	693b      	ldr	r3, [r7, #16]
 80163ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80163ee:	2304      	movs	r3, #4
 80163f0:	2232      	movs	r2, #50	; 0x32
 80163f2:	f000 fc73 	bl	8016cdc <dhcp_option>
 80163f6:	4603      	mov	r3, r0
 80163f8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80163fa:	89bc      	ldrh	r4, [r7, #12]
 80163fc:	693b      	ldr	r3, [r7, #16]
 80163fe:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016402:	69bb      	ldr	r3, [r7, #24]
 8016404:	69db      	ldr	r3, [r3, #28]
 8016406:	4618      	mov	r0, r3
 8016408:	f7f7 fd97 	bl	800df3a <lwip_htonl>
 801640c:	4603      	mov	r3, r0
 801640e:	461a      	mov	r2, r3
 8016410:	4629      	mov	r1, r5
 8016412:	4620      	mov	r0, r4
 8016414:	f000 fcee 	bl	8016df4 <dhcp_option_long>
 8016418:	4603      	mov	r3, r0
 801641a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801641c:	89b8      	ldrh	r0, [r7, #12]
 801641e:	693b      	ldr	r3, [r7, #16]
 8016420:	33f0      	adds	r3, #240	; 0xf0
 8016422:	697a      	ldr	r2, [r7, #20]
 8016424:	4619      	mov	r1, r3
 8016426:	f001 f9a1 	bl	801776c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801642a:	4b19      	ldr	r3, [pc, #100]	; (8016490 <dhcp_decline+0xdc>)
 801642c:	6818      	ldr	r0, [r3, #0]
 801642e:	4b19      	ldr	r3, [pc, #100]	; (8016494 <dhcp_decline+0xe0>)
 8016430:	9301      	str	r3, [sp, #4]
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	9300      	str	r3, [sp, #0]
 8016436:	2343      	movs	r3, #67	; 0x43
 8016438:	4a17      	ldr	r2, [pc, #92]	; (8016498 <dhcp_decline+0xe4>)
 801643a:	6979      	ldr	r1, [r7, #20]
 801643c:	f7ff f8d2 	bl	80155e4 <udp_sendto_if_src>
 8016440:	4603      	mov	r3, r0
 8016442:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016444:	6978      	ldr	r0, [r7, #20]
 8016446:	f7f9 f91b 	bl	800f680 <pbuf_free>
 801644a:	e001      	b.n	8016450 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801644c:	23ff      	movs	r3, #255	; 0xff
 801644e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016450:	69bb      	ldr	r3, [r7, #24]
 8016452:	799b      	ldrb	r3, [r3, #6]
 8016454:	2bff      	cmp	r3, #255	; 0xff
 8016456:	d005      	beq.n	8016464 <dhcp_decline+0xb0>
    dhcp->tries++;
 8016458:	69bb      	ldr	r3, [r7, #24]
 801645a:	799b      	ldrb	r3, [r3, #6]
 801645c:	3301      	adds	r3, #1
 801645e:	b2da      	uxtb	r2, r3
 8016460:	69bb      	ldr	r3, [r7, #24]
 8016462:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016464:	f242 7310 	movw	r3, #10000	; 0x2710
 8016468:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801646a:	89fb      	ldrh	r3, [r7, #14]
 801646c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016470:	4a0a      	ldr	r2, [pc, #40]	; (801649c <dhcp_decline+0xe8>)
 8016472:	fb82 1203 	smull	r1, r2, r2, r3
 8016476:	1152      	asrs	r2, r2, #5
 8016478:	17db      	asrs	r3, r3, #31
 801647a:	1ad3      	subs	r3, r2, r3
 801647c:	b29a      	uxth	r2, r3
 801647e:	69bb      	ldr	r3, [r7, #24]
 8016480:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016482:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016486:	4618      	mov	r0, r3
 8016488:	3720      	adds	r7, #32
 801648a:	46bd      	mov	sp, r7
 801648c:	bdb0      	pop	{r4, r5, r7, pc}
 801648e:	bf00      	nop
 8016490:	20008578 	.word	0x20008578
 8016494:	0801f0cc 	.word	0x0801f0cc
 8016498:	0801f0d0 	.word	0x0801f0d0
 801649c:	10624dd3 	.word	0x10624dd3

080164a0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b08a      	sub	sp, #40	; 0x28
 80164a4:	af02      	add	r7, sp, #8
 80164a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164ac:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80164ae:	2300      	movs	r3, #0
 80164b0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80164b2:	69bb      	ldr	r3, [r7, #24]
 80164b4:	2200      	movs	r2, #0
 80164b6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80164b8:	2106      	movs	r1, #6
 80164ba:	69b8      	ldr	r0, [r7, #24]
 80164bc:	f000 fbf4 	bl	8016ca8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80164c0:	f107 0308 	add.w	r3, r7, #8
 80164c4:	2201      	movs	r2, #1
 80164c6:	69b9      	ldr	r1, [r7, #24]
 80164c8:	6878      	ldr	r0, [r7, #4]
 80164ca:	f001 f879 	bl	80175c0 <dhcp_create_msg>
 80164ce:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80164d0:	693b      	ldr	r3, [r7, #16]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d04b      	beq.n	801656e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80164d6:	693b      	ldr	r3, [r7, #16]
 80164d8:	685b      	ldr	r3, [r3, #4]
 80164da:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80164dc:	8938      	ldrh	r0, [r7, #8]
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80164e4:	2302      	movs	r3, #2
 80164e6:	2239      	movs	r2, #57	; 0x39
 80164e8:	f000 fbf8 	bl	8016cdc <dhcp_option>
 80164ec:	4603      	mov	r3, r0
 80164ee:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80164f0:	8938      	ldrh	r0, [r7, #8]
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80164fc:	461a      	mov	r2, r3
 80164fe:	f000 fc47 	bl	8016d90 <dhcp_option_short>
 8016502:	4603      	mov	r3, r0
 8016504:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016506:	8938      	ldrh	r0, [r7, #8]
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801650e:	2303      	movs	r3, #3
 8016510:	2237      	movs	r2, #55	; 0x37
 8016512:	f000 fbe3 	bl	8016cdc <dhcp_option>
 8016516:	4603      	mov	r3, r0
 8016518:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801651a:	2300      	movs	r3, #0
 801651c:	77fb      	strb	r3, [r7, #31]
 801651e:	e00e      	b.n	801653e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016520:	8938      	ldrh	r0, [r7, #8]
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016528:	7ffb      	ldrb	r3, [r7, #31]
 801652a:	4a29      	ldr	r2, [pc, #164]	; (80165d0 <dhcp_discover+0x130>)
 801652c:	5cd3      	ldrb	r3, [r2, r3]
 801652e:	461a      	mov	r2, r3
 8016530:	f000 fc08 	bl	8016d44 <dhcp_option_byte>
 8016534:	4603      	mov	r3, r0
 8016536:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016538:	7ffb      	ldrb	r3, [r7, #31]
 801653a:	3301      	adds	r3, #1
 801653c:	77fb      	strb	r3, [r7, #31]
 801653e:	7ffb      	ldrb	r3, [r7, #31]
 8016540:	2b02      	cmp	r3, #2
 8016542:	d9ed      	bls.n	8016520 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016544:	8938      	ldrh	r0, [r7, #8]
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	33f0      	adds	r3, #240	; 0xf0
 801654a:	693a      	ldr	r2, [r7, #16]
 801654c:	4619      	mov	r1, r3
 801654e:	f001 f90d 	bl	801776c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016552:	4b20      	ldr	r3, [pc, #128]	; (80165d4 <dhcp_discover+0x134>)
 8016554:	6818      	ldr	r0, [r3, #0]
 8016556:	4b20      	ldr	r3, [pc, #128]	; (80165d8 <dhcp_discover+0x138>)
 8016558:	9301      	str	r3, [sp, #4]
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	9300      	str	r3, [sp, #0]
 801655e:	2343      	movs	r3, #67	; 0x43
 8016560:	4a1e      	ldr	r2, [pc, #120]	; (80165dc <dhcp_discover+0x13c>)
 8016562:	6939      	ldr	r1, [r7, #16]
 8016564:	f7ff f83e 	bl	80155e4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8016568:	6938      	ldr	r0, [r7, #16]
 801656a:	f7f9 f889 	bl	800f680 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801656e:	69bb      	ldr	r3, [r7, #24]
 8016570:	799b      	ldrb	r3, [r3, #6]
 8016572:	2bff      	cmp	r3, #255	; 0xff
 8016574:	d005      	beq.n	8016582 <dhcp_discover+0xe2>
    dhcp->tries++;
 8016576:	69bb      	ldr	r3, [r7, #24]
 8016578:	799b      	ldrb	r3, [r3, #6]
 801657a:	3301      	adds	r3, #1
 801657c:	b2da      	uxtb	r2, r3
 801657e:	69bb      	ldr	r3, [r7, #24]
 8016580:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016582:	69bb      	ldr	r3, [r7, #24]
 8016584:	799b      	ldrb	r3, [r3, #6]
 8016586:	2b05      	cmp	r3, #5
 8016588:	d80d      	bhi.n	80165a6 <dhcp_discover+0x106>
 801658a:	69bb      	ldr	r3, [r7, #24]
 801658c:	799b      	ldrb	r3, [r3, #6]
 801658e:	461a      	mov	r2, r3
 8016590:	2301      	movs	r3, #1
 8016592:	4093      	lsls	r3, r2
 8016594:	b29b      	uxth	r3, r3
 8016596:	461a      	mov	r2, r3
 8016598:	0152      	lsls	r2, r2, #5
 801659a:	1ad2      	subs	r2, r2, r3
 801659c:	0092      	lsls	r2, r2, #2
 801659e:	4413      	add	r3, r2
 80165a0:	00db      	lsls	r3, r3, #3
 80165a2:	b29b      	uxth	r3, r3
 80165a4:	e001      	b.n	80165aa <dhcp_discover+0x10a>
 80165a6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80165aa:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80165ac:	897b      	ldrh	r3, [r7, #10]
 80165ae:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80165b2:	4a0b      	ldr	r2, [pc, #44]	; (80165e0 <dhcp_discover+0x140>)
 80165b4:	fb82 1203 	smull	r1, r2, r2, r3
 80165b8:	1152      	asrs	r2, r2, #5
 80165ba:	17db      	asrs	r3, r3, #31
 80165bc:	1ad3      	subs	r3, r2, r3
 80165be:	b29a      	uxth	r2, r3
 80165c0:	69bb      	ldr	r3, [r7, #24]
 80165c2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80165c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	3720      	adds	r7, #32
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}
 80165d0:	2000003c 	.word	0x2000003c
 80165d4:	20008578 	.word	0x20008578
 80165d8:	0801f0cc 	.word	0x0801f0cc
 80165dc:	0801f0d0 	.word	0x0801f0d0
 80165e0:	10624dd3 	.word	0x10624dd3

080165e4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b088      	sub	sp, #32
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d107      	bne.n	8016602 <dhcp_bind+0x1e>
 80165f2:	4b64      	ldr	r3, [pc, #400]	; (8016784 <dhcp_bind+0x1a0>)
 80165f4:	f240 4215 	movw	r2, #1045	; 0x415
 80165f8:	4963      	ldr	r1, [pc, #396]	; (8016788 <dhcp_bind+0x1a4>)
 80165fa:	4864      	ldr	r0, [pc, #400]	; (801678c <dhcp_bind+0x1a8>)
 80165fc:	f004 fa34 	bl	801aa68 <iprintf>
 8016600:	e0bc      	b.n	801677c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016606:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8016608:	69bb      	ldr	r3, [r7, #24]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d107      	bne.n	801661e <dhcp_bind+0x3a>
 801660e:	4b5d      	ldr	r3, [pc, #372]	; (8016784 <dhcp_bind+0x1a0>)
 8016610:	f240 4217 	movw	r2, #1047	; 0x417
 8016614:	495e      	ldr	r1, [pc, #376]	; (8016790 <dhcp_bind+0x1ac>)
 8016616:	485d      	ldr	r0, [pc, #372]	; (801678c <dhcp_bind+0x1a8>)
 8016618:	f004 fa26 	bl	801aa68 <iprintf>
 801661c:	e0ae      	b.n	801677c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801661e:	69bb      	ldr	r3, [r7, #24]
 8016620:	2200      	movs	r2, #0
 8016622:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8016624:	69bb      	ldr	r3, [r7, #24]
 8016626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016628:	f1b3 3fff 	cmp.w	r3, #4294967295
 801662c:	d019      	beq.n	8016662 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801662e:	69bb      	ldr	r3, [r7, #24]
 8016630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016632:	331e      	adds	r3, #30
 8016634:	4a57      	ldr	r2, [pc, #348]	; (8016794 <dhcp_bind+0x1b0>)
 8016636:	fba2 2303 	umull	r2, r3, r2, r3
 801663a:	095b      	lsrs	r3, r3, #5
 801663c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801663e:	69fb      	ldr	r3, [r7, #28]
 8016640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016644:	d302      	bcc.n	801664c <dhcp_bind+0x68>
      timeout = 0xffff;
 8016646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801664a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801664c:	69fb      	ldr	r3, [r7, #28]
 801664e:	b29a      	uxth	r2, r3
 8016650:	69bb      	ldr	r3, [r7, #24]
 8016652:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8016654:	69bb      	ldr	r3, [r7, #24]
 8016656:	8a9b      	ldrh	r3, [r3, #20]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d102      	bne.n	8016662 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801665c:	69bb      	ldr	r3, [r7, #24]
 801665e:	2201      	movs	r2, #1
 8016660:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8016662:	69bb      	ldr	r3, [r7, #24]
 8016664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801666a:	d01d      	beq.n	80166a8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801666c:	69bb      	ldr	r3, [r7, #24]
 801666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016670:	331e      	adds	r3, #30
 8016672:	4a48      	ldr	r2, [pc, #288]	; (8016794 <dhcp_bind+0x1b0>)
 8016674:	fba2 2303 	umull	r2, r3, r2, r3
 8016678:	095b      	lsrs	r3, r3, #5
 801667a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801667c:	69fb      	ldr	r3, [r7, #28]
 801667e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016682:	d302      	bcc.n	801668a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8016684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016688:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801668a:	69fb      	ldr	r3, [r7, #28]
 801668c:	b29a      	uxth	r2, r3
 801668e:	69bb      	ldr	r3, [r7, #24]
 8016690:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016692:	69bb      	ldr	r3, [r7, #24]
 8016694:	895b      	ldrh	r3, [r3, #10]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d102      	bne.n	80166a0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801669a:	69bb      	ldr	r3, [r7, #24]
 801669c:	2201      	movs	r2, #1
 801669e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80166a0:	69bb      	ldr	r3, [r7, #24]
 80166a2:	895a      	ldrh	r2, [r3, #10]
 80166a4:	69bb      	ldr	r3, [r7, #24]
 80166a6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80166a8:	69bb      	ldr	r3, [r7, #24]
 80166aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166b0:	d01d      	beq.n	80166ee <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80166b2:	69bb      	ldr	r3, [r7, #24]
 80166b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166b6:	331e      	adds	r3, #30
 80166b8:	4a36      	ldr	r2, [pc, #216]	; (8016794 <dhcp_bind+0x1b0>)
 80166ba:	fba2 2303 	umull	r2, r3, r2, r3
 80166be:	095b      	lsrs	r3, r3, #5
 80166c0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80166c2:	69fb      	ldr	r3, [r7, #28]
 80166c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80166c8:	d302      	bcc.n	80166d0 <dhcp_bind+0xec>
      timeout = 0xffff;
 80166ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80166ce:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80166d0:	69fb      	ldr	r3, [r7, #28]
 80166d2:	b29a      	uxth	r2, r3
 80166d4:	69bb      	ldr	r3, [r7, #24]
 80166d6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80166d8:	69bb      	ldr	r3, [r7, #24]
 80166da:	899b      	ldrh	r3, [r3, #12]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d102      	bne.n	80166e6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80166e0:	69bb      	ldr	r3, [r7, #24]
 80166e2:	2201      	movs	r2, #1
 80166e4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80166e6:	69bb      	ldr	r3, [r7, #24]
 80166e8:	899a      	ldrh	r2, [r3, #12]
 80166ea:	69bb      	ldr	r3, [r7, #24]
 80166ec:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80166ee:	69bb      	ldr	r3, [r7, #24]
 80166f0:	895a      	ldrh	r2, [r3, #10]
 80166f2:	69bb      	ldr	r3, [r7, #24]
 80166f4:	899b      	ldrh	r3, [r3, #12]
 80166f6:	429a      	cmp	r2, r3
 80166f8:	d306      	bcc.n	8016708 <dhcp_bind+0x124>
 80166fa:	69bb      	ldr	r3, [r7, #24]
 80166fc:	899b      	ldrh	r3, [r3, #12]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d002      	beq.n	8016708 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8016702:	69bb      	ldr	r3, [r7, #24]
 8016704:	2200      	movs	r2, #0
 8016706:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8016708:	69bb      	ldr	r3, [r7, #24]
 801670a:	79db      	ldrb	r3, [r3, #7]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d003      	beq.n	8016718 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8016710:	69bb      	ldr	r3, [r7, #24]
 8016712:	6a1b      	ldr	r3, [r3, #32]
 8016714:	613b      	str	r3, [r7, #16]
 8016716:	e014      	b.n	8016742 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8016718:	69bb      	ldr	r3, [r7, #24]
 801671a:	331c      	adds	r3, #28
 801671c:	781b      	ldrb	r3, [r3, #0]
 801671e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8016720:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016724:	2b00      	cmp	r3, #0
 8016726:	db02      	blt.n	801672e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8016728:	23ff      	movs	r3, #255	; 0xff
 801672a:	613b      	str	r3, [r7, #16]
 801672c:	e009      	b.n	8016742 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801672e:	7dfb      	ldrb	r3, [r7, #23]
 8016730:	2bbf      	cmp	r3, #191	; 0xbf
 8016732:	d903      	bls.n	801673c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8016734:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8016738:	613b      	str	r3, [r7, #16]
 801673a:	e002      	b.n	8016742 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801673c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016740:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8016742:	69bb      	ldr	r3, [r7, #24]
 8016744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016746:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d108      	bne.n	8016760 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801674e:	69bb      	ldr	r3, [r7, #24]
 8016750:	69da      	ldr	r2, [r3, #28]
 8016752:	693b      	ldr	r3, [r7, #16]
 8016754:	4013      	ands	r3, r2
 8016756:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801675e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8016760:	210a      	movs	r1, #10
 8016762:	69b8      	ldr	r0, [r7, #24]
 8016764:	f000 faa0 	bl	8016ca8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8016768:	69bb      	ldr	r3, [r7, #24]
 801676a:	f103 011c 	add.w	r1, r3, #28
 801676e:	f107 030c 	add.w	r3, r7, #12
 8016772:	f107 0210 	add.w	r2, r7, #16
 8016776:	6878      	ldr	r0, [r7, #4]
 8016778:	f7f8 fa74 	bl	800ec64 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801677c:	3720      	adds	r7, #32
 801677e:	46bd      	mov	sp, r7
 8016780:	bd80      	pop	{r7, pc}
 8016782:	bf00      	nop
 8016784:	0801e51c 	.word	0x0801e51c
 8016788:	0801e67c 	.word	0x0801e67c
 801678c:	0801e57c 	.word	0x0801e57c
 8016790:	0801e698 	.word	0x0801e698
 8016794:	88888889 	.word	0x88888889

08016798 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b08a      	sub	sp, #40	; 0x28
 801679c:	af02      	add	r7, sp, #8
 801679e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167a4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80167a6:	2105      	movs	r1, #5
 80167a8:	69b8      	ldr	r0, [r7, #24]
 80167aa:	f000 fa7d 	bl	8016ca8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80167ae:	f107 030c 	add.w	r3, r7, #12
 80167b2:	2203      	movs	r2, #3
 80167b4:	69b9      	ldr	r1, [r7, #24]
 80167b6:	6878      	ldr	r0, [r7, #4]
 80167b8:	f000 ff02 	bl	80175c0 <dhcp_create_msg>
 80167bc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80167be:	697b      	ldr	r3, [r7, #20]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d04e      	beq.n	8016862 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80167c4:	697b      	ldr	r3, [r7, #20]
 80167c6:	685b      	ldr	r3, [r3, #4]
 80167c8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80167ca:	89b8      	ldrh	r0, [r7, #12]
 80167cc:	693b      	ldr	r3, [r7, #16]
 80167ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167d2:	2302      	movs	r3, #2
 80167d4:	2239      	movs	r2, #57	; 0x39
 80167d6:	f000 fa81 	bl	8016cdc <dhcp_option>
 80167da:	4603      	mov	r3, r0
 80167dc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80167de:	89b8      	ldrh	r0, [r7, #12]
 80167e0:	693b      	ldr	r3, [r7, #16]
 80167e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80167ea:	461a      	mov	r2, r3
 80167ec:	f000 fad0 	bl	8016d90 <dhcp_option_short>
 80167f0:	4603      	mov	r3, r0
 80167f2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80167f4:	89b8      	ldrh	r0, [r7, #12]
 80167f6:	693b      	ldr	r3, [r7, #16]
 80167f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167fc:	2303      	movs	r3, #3
 80167fe:	2237      	movs	r2, #55	; 0x37
 8016800:	f000 fa6c 	bl	8016cdc <dhcp_option>
 8016804:	4603      	mov	r3, r0
 8016806:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016808:	2300      	movs	r3, #0
 801680a:	77bb      	strb	r3, [r7, #30]
 801680c:	e00e      	b.n	801682c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801680e:	89b8      	ldrh	r0, [r7, #12]
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016816:	7fbb      	ldrb	r3, [r7, #30]
 8016818:	4a2a      	ldr	r2, [pc, #168]	; (80168c4 <dhcp_renew+0x12c>)
 801681a:	5cd3      	ldrb	r3, [r2, r3]
 801681c:	461a      	mov	r2, r3
 801681e:	f000 fa91 	bl	8016d44 <dhcp_option_byte>
 8016822:	4603      	mov	r3, r0
 8016824:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016826:	7fbb      	ldrb	r3, [r7, #30]
 8016828:	3301      	adds	r3, #1
 801682a:	77bb      	strb	r3, [r7, #30]
 801682c:	7fbb      	ldrb	r3, [r7, #30]
 801682e:	2b02      	cmp	r3, #2
 8016830:	d9ed      	bls.n	801680e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016832:	89b8      	ldrh	r0, [r7, #12]
 8016834:	693b      	ldr	r3, [r7, #16]
 8016836:	33f0      	adds	r3, #240	; 0xf0
 8016838:	697a      	ldr	r2, [r7, #20]
 801683a:	4619      	mov	r1, r3
 801683c:	f000 ff96 	bl	801776c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016840:	4b21      	ldr	r3, [pc, #132]	; (80168c8 <dhcp_renew+0x130>)
 8016842:	6818      	ldr	r0, [r3, #0]
 8016844:	69bb      	ldr	r3, [r7, #24]
 8016846:	f103 0218 	add.w	r2, r3, #24
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	9300      	str	r3, [sp, #0]
 801684e:	2343      	movs	r3, #67	; 0x43
 8016850:	6979      	ldr	r1, [r7, #20]
 8016852:	f7fe fe53 	bl	80154fc <udp_sendto_if>
 8016856:	4603      	mov	r3, r0
 8016858:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801685a:	6978      	ldr	r0, [r7, #20]
 801685c:	f7f8 ff10 	bl	800f680 <pbuf_free>
 8016860:	e001      	b.n	8016866 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016862:	23ff      	movs	r3, #255	; 0xff
 8016864:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016866:	69bb      	ldr	r3, [r7, #24]
 8016868:	799b      	ldrb	r3, [r3, #6]
 801686a:	2bff      	cmp	r3, #255	; 0xff
 801686c:	d005      	beq.n	801687a <dhcp_renew+0xe2>
    dhcp->tries++;
 801686e:	69bb      	ldr	r3, [r7, #24]
 8016870:	799b      	ldrb	r3, [r3, #6]
 8016872:	3301      	adds	r3, #1
 8016874:	b2da      	uxtb	r2, r3
 8016876:	69bb      	ldr	r3, [r7, #24]
 8016878:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801687a:	69bb      	ldr	r3, [r7, #24]
 801687c:	799b      	ldrb	r3, [r3, #6]
 801687e:	2b09      	cmp	r3, #9
 8016880:	d80a      	bhi.n	8016898 <dhcp_renew+0x100>
 8016882:	69bb      	ldr	r3, [r7, #24]
 8016884:	799b      	ldrb	r3, [r3, #6]
 8016886:	b29b      	uxth	r3, r3
 8016888:	461a      	mov	r2, r3
 801688a:	0152      	lsls	r2, r2, #5
 801688c:	1ad2      	subs	r2, r2, r3
 801688e:	0092      	lsls	r2, r2, #2
 8016890:	4413      	add	r3, r2
 8016892:	011b      	lsls	r3, r3, #4
 8016894:	b29b      	uxth	r3, r3
 8016896:	e001      	b.n	801689c <dhcp_renew+0x104>
 8016898:	f644 6320 	movw	r3, #20000	; 0x4e20
 801689c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801689e:	89fb      	ldrh	r3, [r7, #14]
 80168a0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80168a4:	4a09      	ldr	r2, [pc, #36]	; (80168cc <dhcp_renew+0x134>)
 80168a6:	fb82 1203 	smull	r1, r2, r2, r3
 80168aa:	1152      	asrs	r2, r2, #5
 80168ac:	17db      	asrs	r3, r3, #31
 80168ae:	1ad3      	subs	r3, r2, r3
 80168b0:	b29a      	uxth	r2, r3
 80168b2:	69bb      	ldr	r3, [r7, #24]
 80168b4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80168b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80168ba:	4618      	mov	r0, r3
 80168bc:	3720      	adds	r7, #32
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}
 80168c2:	bf00      	nop
 80168c4:	2000003c 	.word	0x2000003c
 80168c8:	20008578 	.word	0x20008578
 80168cc:	10624dd3 	.word	0x10624dd3

080168d0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b08a      	sub	sp, #40	; 0x28
 80168d4:	af02      	add	r7, sp, #8
 80168d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168dc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80168de:	2104      	movs	r1, #4
 80168e0:	69b8      	ldr	r0, [r7, #24]
 80168e2:	f000 f9e1 	bl	8016ca8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80168e6:	f107 030c 	add.w	r3, r7, #12
 80168ea:	2203      	movs	r2, #3
 80168ec:	69b9      	ldr	r1, [r7, #24]
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f000 fe66 	bl	80175c0 <dhcp_create_msg>
 80168f4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80168f6:	697b      	ldr	r3, [r7, #20]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d04c      	beq.n	8016996 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80168fc:	697b      	ldr	r3, [r7, #20]
 80168fe:	685b      	ldr	r3, [r3, #4]
 8016900:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016902:	89b8      	ldrh	r0, [r7, #12]
 8016904:	693b      	ldr	r3, [r7, #16]
 8016906:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801690a:	2302      	movs	r3, #2
 801690c:	2239      	movs	r2, #57	; 0x39
 801690e:	f000 f9e5 	bl	8016cdc <dhcp_option>
 8016912:	4603      	mov	r3, r0
 8016914:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016916:	89b8      	ldrh	r0, [r7, #12]
 8016918:	693b      	ldr	r3, [r7, #16]
 801691a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016922:	461a      	mov	r2, r3
 8016924:	f000 fa34 	bl	8016d90 <dhcp_option_short>
 8016928:	4603      	mov	r3, r0
 801692a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801692c:	89b8      	ldrh	r0, [r7, #12]
 801692e:	693b      	ldr	r3, [r7, #16]
 8016930:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016934:	2303      	movs	r3, #3
 8016936:	2237      	movs	r2, #55	; 0x37
 8016938:	f000 f9d0 	bl	8016cdc <dhcp_option>
 801693c:	4603      	mov	r3, r0
 801693e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016940:	2300      	movs	r3, #0
 8016942:	77bb      	strb	r3, [r7, #30]
 8016944:	e00e      	b.n	8016964 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016946:	89b8      	ldrh	r0, [r7, #12]
 8016948:	693b      	ldr	r3, [r7, #16]
 801694a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801694e:	7fbb      	ldrb	r3, [r7, #30]
 8016950:	4a29      	ldr	r2, [pc, #164]	; (80169f8 <dhcp_rebind+0x128>)
 8016952:	5cd3      	ldrb	r3, [r2, r3]
 8016954:	461a      	mov	r2, r3
 8016956:	f000 f9f5 	bl	8016d44 <dhcp_option_byte>
 801695a:	4603      	mov	r3, r0
 801695c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801695e:	7fbb      	ldrb	r3, [r7, #30]
 8016960:	3301      	adds	r3, #1
 8016962:	77bb      	strb	r3, [r7, #30]
 8016964:	7fbb      	ldrb	r3, [r7, #30]
 8016966:	2b02      	cmp	r3, #2
 8016968:	d9ed      	bls.n	8016946 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801696a:	89b8      	ldrh	r0, [r7, #12]
 801696c:	693b      	ldr	r3, [r7, #16]
 801696e:	33f0      	adds	r3, #240	; 0xf0
 8016970:	697a      	ldr	r2, [r7, #20]
 8016972:	4619      	mov	r1, r3
 8016974:	f000 fefa 	bl	801776c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016978:	4b20      	ldr	r3, [pc, #128]	; (80169fc <dhcp_rebind+0x12c>)
 801697a:	6818      	ldr	r0, [r3, #0]
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	9300      	str	r3, [sp, #0]
 8016980:	2343      	movs	r3, #67	; 0x43
 8016982:	4a1f      	ldr	r2, [pc, #124]	; (8016a00 <dhcp_rebind+0x130>)
 8016984:	6979      	ldr	r1, [r7, #20]
 8016986:	f7fe fdb9 	bl	80154fc <udp_sendto_if>
 801698a:	4603      	mov	r3, r0
 801698c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801698e:	6978      	ldr	r0, [r7, #20]
 8016990:	f7f8 fe76 	bl	800f680 <pbuf_free>
 8016994:	e001      	b.n	801699a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016996:	23ff      	movs	r3, #255	; 0xff
 8016998:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801699a:	69bb      	ldr	r3, [r7, #24]
 801699c:	799b      	ldrb	r3, [r3, #6]
 801699e:	2bff      	cmp	r3, #255	; 0xff
 80169a0:	d005      	beq.n	80169ae <dhcp_rebind+0xde>
    dhcp->tries++;
 80169a2:	69bb      	ldr	r3, [r7, #24]
 80169a4:	799b      	ldrb	r3, [r3, #6]
 80169a6:	3301      	adds	r3, #1
 80169a8:	b2da      	uxtb	r2, r3
 80169aa:	69bb      	ldr	r3, [r7, #24]
 80169ac:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80169ae:	69bb      	ldr	r3, [r7, #24]
 80169b0:	799b      	ldrb	r3, [r3, #6]
 80169b2:	2b09      	cmp	r3, #9
 80169b4:	d80a      	bhi.n	80169cc <dhcp_rebind+0xfc>
 80169b6:	69bb      	ldr	r3, [r7, #24]
 80169b8:	799b      	ldrb	r3, [r3, #6]
 80169ba:	b29b      	uxth	r3, r3
 80169bc:	461a      	mov	r2, r3
 80169be:	0152      	lsls	r2, r2, #5
 80169c0:	1ad2      	subs	r2, r2, r3
 80169c2:	0092      	lsls	r2, r2, #2
 80169c4:	4413      	add	r3, r2
 80169c6:	00db      	lsls	r3, r3, #3
 80169c8:	b29b      	uxth	r3, r3
 80169ca:	e001      	b.n	80169d0 <dhcp_rebind+0x100>
 80169cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80169d0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80169d2:	89fb      	ldrh	r3, [r7, #14]
 80169d4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80169d8:	4a0a      	ldr	r2, [pc, #40]	; (8016a04 <dhcp_rebind+0x134>)
 80169da:	fb82 1203 	smull	r1, r2, r2, r3
 80169de:	1152      	asrs	r2, r2, #5
 80169e0:	17db      	asrs	r3, r3, #31
 80169e2:	1ad3      	subs	r3, r2, r3
 80169e4:	b29a      	uxth	r2, r3
 80169e6:	69bb      	ldr	r3, [r7, #24]
 80169e8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80169ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80169ee:	4618      	mov	r0, r3
 80169f0:	3720      	adds	r7, #32
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bd80      	pop	{r7, pc}
 80169f6:	bf00      	nop
 80169f8:	2000003c 	.word	0x2000003c
 80169fc:	20008578 	.word	0x20008578
 8016a00:	0801f0d0 	.word	0x0801f0d0
 8016a04:	10624dd3 	.word	0x10624dd3

08016a08 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8016a08:	b5b0      	push	{r4, r5, r7, lr}
 8016a0a:	b08a      	sub	sp, #40	; 0x28
 8016a0c:	af02      	add	r7, sp, #8
 8016a0e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a14:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8016a16:	2103      	movs	r1, #3
 8016a18:	69b8      	ldr	r0, [r7, #24]
 8016a1a:	f000 f945 	bl	8016ca8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016a1e:	f107 030c 	add.w	r3, r7, #12
 8016a22:	2203      	movs	r2, #3
 8016a24:	69b9      	ldr	r1, [r7, #24]
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	f000 fdca 	bl	80175c0 <dhcp_create_msg>
 8016a2c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016a2e:	697b      	ldr	r3, [r7, #20]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d066      	beq.n	8016b02 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016a34:	697b      	ldr	r3, [r7, #20]
 8016a36:	685b      	ldr	r3, [r3, #4]
 8016a38:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016a3a:	89b8      	ldrh	r0, [r7, #12]
 8016a3c:	693b      	ldr	r3, [r7, #16]
 8016a3e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016a42:	2302      	movs	r3, #2
 8016a44:	2239      	movs	r2, #57	; 0x39
 8016a46:	f000 f949 	bl	8016cdc <dhcp_option>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8016a4e:	89b8      	ldrh	r0, [r7, #12]
 8016a50:	693b      	ldr	r3, [r7, #16]
 8016a52:	33f0      	adds	r3, #240	; 0xf0
 8016a54:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016a58:	4619      	mov	r1, r3
 8016a5a:	f000 f999 	bl	8016d90 <dhcp_option_short>
 8016a5e:	4603      	mov	r3, r0
 8016a60:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016a62:	89b8      	ldrh	r0, [r7, #12]
 8016a64:	693b      	ldr	r3, [r7, #16]
 8016a66:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016a6a:	2304      	movs	r3, #4
 8016a6c:	2232      	movs	r2, #50	; 0x32
 8016a6e:	f000 f935 	bl	8016cdc <dhcp_option>
 8016a72:	4603      	mov	r3, r0
 8016a74:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016a76:	89bc      	ldrh	r4, [r7, #12]
 8016a78:	693b      	ldr	r3, [r7, #16]
 8016a7a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016a7e:	69bb      	ldr	r3, [r7, #24]
 8016a80:	69db      	ldr	r3, [r3, #28]
 8016a82:	4618      	mov	r0, r3
 8016a84:	f7f7 fa59 	bl	800df3a <lwip_htonl>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	461a      	mov	r2, r3
 8016a8c:	4629      	mov	r1, r5
 8016a8e:	4620      	mov	r0, r4
 8016a90:	f000 f9b0 	bl	8016df4 <dhcp_option_long>
 8016a94:	4603      	mov	r3, r0
 8016a96:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016a98:	89b8      	ldrh	r0, [r7, #12]
 8016a9a:	693b      	ldr	r3, [r7, #16]
 8016a9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016aa0:	2303      	movs	r3, #3
 8016aa2:	2237      	movs	r2, #55	; 0x37
 8016aa4:	f000 f91a 	bl	8016cdc <dhcp_option>
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016aac:	2300      	movs	r3, #0
 8016aae:	77bb      	strb	r3, [r7, #30]
 8016ab0:	e00e      	b.n	8016ad0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016ab2:	89b8      	ldrh	r0, [r7, #12]
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016aba:	7fbb      	ldrb	r3, [r7, #30]
 8016abc:	4a29      	ldr	r2, [pc, #164]	; (8016b64 <dhcp_reboot+0x15c>)
 8016abe:	5cd3      	ldrb	r3, [r2, r3]
 8016ac0:	461a      	mov	r2, r3
 8016ac2:	f000 f93f 	bl	8016d44 <dhcp_option_byte>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016aca:	7fbb      	ldrb	r3, [r7, #30]
 8016acc:	3301      	adds	r3, #1
 8016ace:	77bb      	strb	r3, [r7, #30]
 8016ad0:	7fbb      	ldrb	r3, [r7, #30]
 8016ad2:	2b02      	cmp	r3, #2
 8016ad4:	d9ed      	bls.n	8016ab2 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016ad6:	89b8      	ldrh	r0, [r7, #12]
 8016ad8:	693b      	ldr	r3, [r7, #16]
 8016ada:	33f0      	adds	r3, #240	; 0xf0
 8016adc:	697a      	ldr	r2, [r7, #20]
 8016ade:	4619      	mov	r1, r3
 8016ae0:	f000 fe44 	bl	801776c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016ae4:	4b20      	ldr	r3, [pc, #128]	; (8016b68 <dhcp_reboot+0x160>)
 8016ae6:	6818      	ldr	r0, [r3, #0]
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	9300      	str	r3, [sp, #0]
 8016aec:	2343      	movs	r3, #67	; 0x43
 8016aee:	4a1f      	ldr	r2, [pc, #124]	; (8016b6c <dhcp_reboot+0x164>)
 8016af0:	6979      	ldr	r1, [r7, #20]
 8016af2:	f7fe fd03 	bl	80154fc <udp_sendto_if>
 8016af6:	4603      	mov	r3, r0
 8016af8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016afa:	6978      	ldr	r0, [r7, #20]
 8016afc:	f7f8 fdc0 	bl	800f680 <pbuf_free>
 8016b00:	e001      	b.n	8016b06 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016b02:	23ff      	movs	r3, #255	; 0xff
 8016b04:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016b06:	69bb      	ldr	r3, [r7, #24]
 8016b08:	799b      	ldrb	r3, [r3, #6]
 8016b0a:	2bff      	cmp	r3, #255	; 0xff
 8016b0c:	d005      	beq.n	8016b1a <dhcp_reboot+0x112>
    dhcp->tries++;
 8016b0e:	69bb      	ldr	r3, [r7, #24]
 8016b10:	799b      	ldrb	r3, [r3, #6]
 8016b12:	3301      	adds	r3, #1
 8016b14:	b2da      	uxtb	r2, r3
 8016b16:	69bb      	ldr	r3, [r7, #24]
 8016b18:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016b1a:	69bb      	ldr	r3, [r7, #24]
 8016b1c:	799b      	ldrb	r3, [r3, #6]
 8016b1e:	2b09      	cmp	r3, #9
 8016b20:	d80a      	bhi.n	8016b38 <dhcp_reboot+0x130>
 8016b22:	69bb      	ldr	r3, [r7, #24]
 8016b24:	799b      	ldrb	r3, [r3, #6]
 8016b26:	b29b      	uxth	r3, r3
 8016b28:	461a      	mov	r2, r3
 8016b2a:	0152      	lsls	r2, r2, #5
 8016b2c:	1ad2      	subs	r2, r2, r3
 8016b2e:	0092      	lsls	r2, r2, #2
 8016b30:	4413      	add	r3, r2
 8016b32:	00db      	lsls	r3, r3, #3
 8016b34:	b29b      	uxth	r3, r3
 8016b36:	e001      	b.n	8016b3c <dhcp_reboot+0x134>
 8016b38:	f242 7310 	movw	r3, #10000	; 0x2710
 8016b3c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016b3e:	89fb      	ldrh	r3, [r7, #14]
 8016b40:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016b44:	4a0a      	ldr	r2, [pc, #40]	; (8016b70 <dhcp_reboot+0x168>)
 8016b46:	fb82 1203 	smull	r1, r2, r2, r3
 8016b4a:	1152      	asrs	r2, r2, #5
 8016b4c:	17db      	asrs	r3, r3, #31
 8016b4e:	1ad3      	subs	r3, r2, r3
 8016b50:	b29a      	uxth	r2, r3
 8016b52:	69bb      	ldr	r3, [r7, #24]
 8016b54:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016b56:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	3720      	adds	r7, #32
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bdb0      	pop	{r4, r5, r7, pc}
 8016b62:	bf00      	nop
 8016b64:	2000003c 	.word	0x2000003c
 8016b68:	20008578 	.word	0x20008578
 8016b6c:	0801f0d0 	.word	0x0801f0d0
 8016b70:	10624dd3 	.word	0x10624dd3

08016b74 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8016b74:	b5b0      	push	{r4, r5, r7, lr}
 8016b76:	b08a      	sub	sp, #40	; 0x28
 8016b78:	af02      	add	r7, sp, #8
 8016b7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b80:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8016b82:	69fb      	ldr	r3, [r7, #28]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	f000 8084 	beq.w	8016c92 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8016b8a:	69fb      	ldr	r3, [r7, #28]
 8016b8c:	795b      	ldrb	r3, [r3, #5]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	f000 8081 	beq.w	8016c96 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016b94:	69fb      	ldr	r3, [r7, #28]
 8016b96:	699b      	ldr	r3, [r3, #24]
 8016b98:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8016b9a:	69fb      	ldr	r3, [r7, #28]
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8016ba0:	69fb      	ldr	r3, [r7, #28]
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016ba6:	69fb      	ldr	r3, [r7, #28]
 8016ba8:	2200      	movs	r2, #0
 8016baa:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016bac:	69fb      	ldr	r3, [r7, #28]
 8016bae:	2200      	movs	r2, #0
 8016bb0:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8016bb2:	69fb      	ldr	r3, [r7, #28]
 8016bb4:	2200      	movs	r2, #0
 8016bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8016bb8:	69fb      	ldr	r3, [r7, #28]
 8016bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016bbc:	69fb      	ldr	r3, [r7, #28]
 8016bbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8016bc0:	69fb      	ldr	r3, [r7, #28]
 8016bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bc4:	69fb      	ldr	r3, [r7, #28]
 8016bc6:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8016bc8:	69fb      	ldr	r3, [r7, #28]
 8016bca:	2200      	movs	r2, #0
 8016bcc:	829a      	strh	r2, [r3, #20]
 8016bce:	69fb      	ldr	r3, [r7, #28]
 8016bd0:	8a9a      	ldrh	r2, [r3, #20]
 8016bd2:	69fb      	ldr	r3, [r7, #28]
 8016bd4:	825a      	strh	r2, [r3, #18]
 8016bd6:	69fb      	ldr	r3, [r7, #28]
 8016bd8:	8a5a      	ldrh	r2, [r3, #18]
 8016bda:	69fb      	ldr	r3, [r7, #28]
 8016bdc:	821a      	strh	r2, [r3, #16]
 8016bde:	69fb      	ldr	r3, [r7, #28]
 8016be0:	8a1a      	ldrh	r2, [r3, #16]
 8016be2:	69fb      	ldr	r3, [r7, #28]
 8016be4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	f000 fdee 	bl	80177c8 <dhcp_supplied_address>
 8016bec:	4603      	mov	r3, r0
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d03b      	beq.n	8016c6a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8016bf2:	f107 030e 	add.w	r3, r7, #14
 8016bf6:	2207      	movs	r2, #7
 8016bf8:	69f9      	ldr	r1, [r7, #28]
 8016bfa:	6878      	ldr	r0, [r7, #4]
 8016bfc:	f000 fce0 	bl	80175c0 <dhcp_create_msg>
 8016c00:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8016c02:	69bb      	ldr	r3, [r7, #24]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d030      	beq.n	8016c6a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016c08:	69bb      	ldr	r3, [r7, #24]
 8016c0a:	685b      	ldr	r3, [r3, #4]
 8016c0c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8016c0e:	89f8      	ldrh	r0, [r7, #14]
 8016c10:	697b      	ldr	r3, [r7, #20]
 8016c12:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016c16:	2304      	movs	r3, #4
 8016c18:	2236      	movs	r2, #54	; 0x36
 8016c1a:	f000 f85f 	bl	8016cdc <dhcp_option>
 8016c1e:	4603      	mov	r3, r0
 8016c20:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8016c22:	89fc      	ldrh	r4, [r7, #14]
 8016c24:	697b      	ldr	r3, [r7, #20]
 8016c26:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016c2a:	693b      	ldr	r3, [r7, #16]
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	f7f7 f984 	bl	800df3a <lwip_htonl>
 8016c32:	4603      	mov	r3, r0
 8016c34:	461a      	mov	r2, r3
 8016c36:	4629      	mov	r1, r5
 8016c38:	4620      	mov	r0, r4
 8016c3a:	f000 f8db 	bl	8016df4 <dhcp_option_long>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016c42:	89f8      	ldrh	r0, [r7, #14]
 8016c44:	697b      	ldr	r3, [r7, #20]
 8016c46:	33f0      	adds	r3, #240	; 0xf0
 8016c48:	69ba      	ldr	r2, [r7, #24]
 8016c4a:	4619      	mov	r1, r3
 8016c4c:	f000 fd8e 	bl	801776c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016c50:	4b13      	ldr	r3, [pc, #76]	; (8016ca0 <dhcp_release_and_stop+0x12c>)
 8016c52:	6818      	ldr	r0, [r3, #0]
 8016c54:	f107 0210 	add.w	r2, r7, #16
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	9300      	str	r3, [sp, #0]
 8016c5c:	2343      	movs	r3, #67	; 0x43
 8016c5e:	69b9      	ldr	r1, [r7, #24]
 8016c60:	f7fe fc4c 	bl	80154fc <udp_sendto_if>
      pbuf_free(p_out);
 8016c64:	69b8      	ldr	r0, [r7, #24]
 8016c66:	f7f8 fd0b 	bl	800f680 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016c6a:	4b0e      	ldr	r3, [pc, #56]	; (8016ca4 <dhcp_release_and_stop+0x130>)
 8016c6c:	4a0d      	ldr	r2, [pc, #52]	; (8016ca4 <dhcp_release_and_stop+0x130>)
 8016c6e:	490d      	ldr	r1, [pc, #52]	; (8016ca4 <dhcp_release_and_stop+0x130>)
 8016c70:	6878      	ldr	r0, [r7, #4]
 8016c72:	f7f7 fff7 	bl	800ec64 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8016c76:	2100      	movs	r1, #0
 8016c78:	69f8      	ldr	r0, [r7, #28]
 8016c7a:	f000 f815 	bl	8016ca8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8016c7e:	69fb      	ldr	r3, [r7, #28]
 8016c80:	791b      	ldrb	r3, [r3, #4]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d008      	beq.n	8016c98 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016c86:	f7fe ff85 	bl	8015b94 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8016c8a:	69fb      	ldr	r3, [r7, #28]
 8016c8c:	2200      	movs	r2, #0
 8016c8e:	711a      	strb	r2, [r3, #4]
 8016c90:	e002      	b.n	8016c98 <dhcp_release_and_stop+0x124>
    return;
 8016c92:	bf00      	nop
 8016c94:	e000      	b.n	8016c98 <dhcp_release_and_stop+0x124>
    return;
 8016c96:	bf00      	nop
  }
}
 8016c98:	3720      	adds	r7, #32
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8016c9e:	bf00      	nop
 8016ca0:	20008578 	.word	0x20008578
 8016ca4:	0801f0cc 	.word	0x0801f0cc

08016ca8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016ca8:	b480      	push	{r7}
 8016caa:	b083      	sub	sp, #12
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
 8016cb0:	460b      	mov	r3, r1
 8016cb2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	795b      	ldrb	r3, [r3, #5]
 8016cb8:	78fa      	ldrb	r2, [r7, #3]
 8016cba:	429a      	cmp	r2, r3
 8016cbc:	d008      	beq.n	8016cd0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	78fa      	ldrb	r2, [r7, #3]
 8016cc2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	2200      	movs	r2, #0
 8016cce:	811a      	strh	r2, [r3, #8]
  }
}
 8016cd0:	bf00      	nop
 8016cd2:	370c      	adds	r7, #12
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cda:	4770      	bx	lr

08016cdc <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b082      	sub	sp, #8
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6039      	str	r1, [r7, #0]
 8016ce4:	4611      	mov	r1, r2
 8016ce6:	461a      	mov	r2, r3
 8016ce8:	4603      	mov	r3, r0
 8016cea:	80fb      	strh	r3, [r7, #6]
 8016cec:	460b      	mov	r3, r1
 8016cee:	717b      	strb	r3, [r7, #5]
 8016cf0:	4613      	mov	r3, r2
 8016cf2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8016cf4:	88fa      	ldrh	r2, [r7, #6]
 8016cf6:	793b      	ldrb	r3, [r7, #4]
 8016cf8:	4413      	add	r3, r2
 8016cfa:	3302      	adds	r3, #2
 8016cfc:	2b44      	cmp	r3, #68	; 0x44
 8016cfe:	d906      	bls.n	8016d0e <dhcp_option+0x32>
 8016d00:	4b0d      	ldr	r3, [pc, #52]	; (8016d38 <dhcp_option+0x5c>)
 8016d02:	f240 529a 	movw	r2, #1434	; 0x59a
 8016d06:	490d      	ldr	r1, [pc, #52]	; (8016d3c <dhcp_option+0x60>)
 8016d08:	480d      	ldr	r0, [pc, #52]	; (8016d40 <dhcp_option+0x64>)
 8016d0a:	f003 fead 	bl	801aa68 <iprintf>
  options[options_out_len++] = option_type;
 8016d0e:	88fb      	ldrh	r3, [r7, #6]
 8016d10:	1c5a      	adds	r2, r3, #1
 8016d12:	80fa      	strh	r2, [r7, #6]
 8016d14:	461a      	mov	r2, r3
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	4413      	add	r3, r2
 8016d1a:	797a      	ldrb	r2, [r7, #5]
 8016d1c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8016d1e:	88fb      	ldrh	r3, [r7, #6]
 8016d20:	1c5a      	adds	r2, r3, #1
 8016d22:	80fa      	strh	r2, [r7, #6]
 8016d24:	461a      	mov	r2, r3
 8016d26:	683b      	ldr	r3, [r7, #0]
 8016d28:	4413      	add	r3, r2
 8016d2a:	793a      	ldrb	r2, [r7, #4]
 8016d2c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016d2e:	88fb      	ldrh	r3, [r7, #6]
}
 8016d30:	4618      	mov	r0, r3
 8016d32:	3708      	adds	r7, #8
 8016d34:	46bd      	mov	sp, r7
 8016d36:	bd80      	pop	{r7, pc}
 8016d38:	0801e51c 	.word	0x0801e51c
 8016d3c:	0801e6b0 	.word	0x0801e6b0
 8016d40:	0801e57c 	.word	0x0801e57c

08016d44 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b082      	sub	sp, #8
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	6039      	str	r1, [r7, #0]
 8016d4e:	80fb      	strh	r3, [r7, #6]
 8016d50:	4613      	mov	r3, r2
 8016d52:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016d54:	88fb      	ldrh	r3, [r7, #6]
 8016d56:	2b43      	cmp	r3, #67	; 0x43
 8016d58:	d906      	bls.n	8016d68 <dhcp_option_byte+0x24>
 8016d5a:	4b0a      	ldr	r3, [pc, #40]	; (8016d84 <dhcp_option_byte+0x40>)
 8016d5c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8016d60:	4909      	ldr	r1, [pc, #36]	; (8016d88 <dhcp_option_byte+0x44>)
 8016d62:	480a      	ldr	r0, [pc, #40]	; (8016d8c <dhcp_option_byte+0x48>)
 8016d64:	f003 fe80 	bl	801aa68 <iprintf>
  options[options_out_len++] = value;
 8016d68:	88fb      	ldrh	r3, [r7, #6]
 8016d6a:	1c5a      	adds	r2, r3, #1
 8016d6c:	80fa      	strh	r2, [r7, #6]
 8016d6e:	461a      	mov	r2, r3
 8016d70:	683b      	ldr	r3, [r7, #0]
 8016d72:	4413      	add	r3, r2
 8016d74:	797a      	ldrb	r2, [r7, #5]
 8016d76:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016d78:	88fb      	ldrh	r3, [r7, #6]
}
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	3708      	adds	r7, #8
 8016d7e:	46bd      	mov	sp, r7
 8016d80:	bd80      	pop	{r7, pc}
 8016d82:	bf00      	nop
 8016d84:	0801e51c 	.word	0x0801e51c
 8016d88:	0801e6f4 	.word	0x0801e6f4
 8016d8c:	0801e57c 	.word	0x0801e57c

08016d90 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b082      	sub	sp, #8
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	4603      	mov	r3, r0
 8016d98:	6039      	str	r1, [r7, #0]
 8016d9a:	80fb      	strh	r3, [r7, #6]
 8016d9c:	4613      	mov	r3, r2
 8016d9e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016da0:	88fb      	ldrh	r3, [r7, #6]
 8016da2:	3302      	adds	r3, #2
 8016da4:	2b44      	cmp	r3, #68	; 0x44
 8016da6:	d906      	bls.n	8016db6 <dhcp_option_short+0x26>
 8016da8:	4b0f      	ldr	r3, [pc, #60]	; (8016de8 <dhcp_option_short+0x58>)
 8016daa:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8016dae:	490f      	ldr	r1, [pc, #60]	; (8016dec <dhcp_option_short+0x5c>)
 8016db0:	480f      	ldr	r0, [pc, #60]	; (8016df0 <dhcp_option_short+0x60>)
 8016db2:	f003 fe59 	bl	801aa68 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016db6:	88bb      	ldrh	r3, [r7, #4]
 8016db8:	0a1b      	lsrs	r3, r3, #8
 8016dba:	b29a      	uxth	r2, r3
 8016dbc:	88fb      	ldrh	r3, [r7, #6]
 8016dbe:	1c59      	adds	r1, r3, #1
 8016dc0:	80f9      	strh	r1, [r7, #6]
 8016dc2:	4619      	mov	r1, r3
 8016dc4:	683b      	ldr	r3, [r7, #0]
 8016dc6:	440b      	add	r3, r1
 8016dc8:	b2d2      	uxtb	r2, r2
 8016dca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8016dcc:	88fb      	ldrh	r3, [r7, #6]
 8016dce:	1c5a      	adds	r2, r3, #1
 8016dd0:	80fa      	strh	r2, [r7, #6]
 8016dd2:	461a      	mov	r2, r3
 8016dd4:	683b      	ldr	r3, [r7, #0]
 8016dd6:	4413      	add	r3, r2
 8016dd8:	88ba      	ldrh	r2, [r7, #4]
 8016dda:	b2d2      	uxtb	r2, r2
 8016ddc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016dde:	88fb      	ldrh	r3, [r7, #6]
}
 8016de0:	4618      	mov	r0, r3
 8016de2:	3708      	adds	r7, #8
 8016de4:	46bd      	mov	sp, r7
 8016de6:	bd80      	pop	{r7, pc}
 8016de8:	0801e51c 	.word	0x0801e51c
 8016dec:	0801e72c 	.word	0x0801e72c
 8016df0:	0801e57c 	.word	0x0801e57c

08016df4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b084      	sub	sp, #16
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	60b9      	str	r1, [r7, #8]
 8016dfe:	607a      	str	r2, [r7, #4]
 8016e00:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8016e02:	89fb      	ldrh	r3, [r7, #14]
 8016e04:	3304      	adds	r3, #4
 8016e06:	2b44      	cmp	r3, #68	; 0x44
 8016e08:	d906      	bls.n	8016e18 <dhcp_option_long+0x24>
 8016e0a:	4b19      	ldr	r3, [pc, #100]	; (8016e70 <dhcp_option_long+0x7c>)
 8016e0c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8016e10:	4918      	ldr	r1, [pc, #96]	; (8016e74 <dhcp_option_long+0x80>)
 8016e12:	4819      	ldr	r0, [pc, #100]	; (8016e78 <dhcp_option_long+0x84>)
 8016e14:	f003 fe28 	bl	801aa68 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	0e1a      	lsrs	r2, r3, #24
 8016e1c:	89fb      	ldrh	r3, [r7, #14]
 8016e1e:	1c59      	adds	r1, r3, #1
 8016e20:	81f9      	strh	r1, [r7, #14]
 8016e22:	4619      	mov	r1, r3
 8016e24:	68bb      	ldr	r3, [r7, #8]
 8016e26:	440b      	add	r3, r1
 8016e28:	b2d2      	uxtb	r2, r2
 8016e2a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	0c1a      	lsrs	r2, r3, #16
 8016e30:	89fb      	ldrh	r3, [r7, #14]
 8016e32:	1c59      	adds	r1, r3, #1
 8016e34:	81f9      	strh	r1, [r7, #14]
 8016e36:	4619      	mov	r1, r3
 8016e38:	68bb      	ldr	r3, [r7, #8]
 8016e3a:	440b      	add	r3, r1
 8016e3c:	b2d2      	uxtb	r2, r2
 8016e3e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	0a1a      	lsrs	r2, r3, #8
 8016e44:	89fb      	ldrh	r3, [r7, #14]
 8016e46:	1c59      	adds	r1, r3, #1
 8016e48:	81f9      	strh	r1, [r7, #14]
 8016e4a:	4619      	mov	r1, r3
 8016e4c:	68bb      	ldr	r3, [r7, #8]
 8016e4e:	440b      	add	r3, r1
 8016e50:	b2d2      	uxtb	r2, r2
 8016e52:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016e54:	89fb      	ldrh	r3, [r7, #14]
 8016e56:	1c5a      	adds	r2, r3, #1
 8016e58:	81fa      	strh	r2, [r7, #14]
 8016e5a:	461a      	mov	r2, r3
 8016e5c:	68bb      	ldr	r3, [r7, #8]
 8016e5e:	4413      	add	r3, r2
 8016e60:	687a      	ldr	r2, [r7, #4]
 8016e62:	b2d2      	uxtb	r2, r2
 8016e64:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016e66:	89fb      	ldrh	r3, [r7, #14]
}
 8016e68:	4618      	mov	r0, r3
 8016e6a:	3710      	adds	r7, #16
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	bd80      	pop	{r7, pc}
 8016e70:	0801e51c 	.word	0x0801e51c
 8016e74:	0801e768 	.word	0x0801e768
 8016e78:	0801e57c 	.word	0x0801e57c

08016e7c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b090      	sub	sp, #64	; 0x40
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
 8016e84:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8016e86:	2300      	movs	r3, #0
 8016e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8016e8e:	2208      	movs	r2, #8
 8016e90:	2100      	movs	r1, #0
 8016e92:	48be      	ldr	r0, [pc, #760]	; (801718c <dhcp_parse_reply+0x310>)
 8016e94:	f003 fd36 	bl	801a904 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	895b      	ldrh	r3, [r3, #10]
 8016e9c:	2b2b      	cmp	r3, #43	; 0x2b
 8016e9e:	d802      	bhi.n	8016ea6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8016ea0:	f06f 0301 	mvn.w	r3, #1
 8016ea4:	e2a8      	b.n	80173f8 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	685b      	ldr	r3, [r3, #4]
 8016eaa:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016eac:	23f0      	movs	r3, #240	; 0xf0
 8016eae:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	891b      	ldrh	r3, [r3, #8]
 8016eb4:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8016eba:	e00c      	b.n	8016ed6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8016ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ebe:	895b      	ldrh	r3, [r3, #10]
 8016ec0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016ec2:	1ad3      	subs	r3, r2, r3
 8016ec4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8016ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ec8:	895b      	ldrh	r3, [r3, #10]
 8016eca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8016ecc:	1ad3      	subs	r3, r2, r3
 8016ece:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8016ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8016ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d004      	beq.n	8016ee6 <dhcp_parse_reply+0x6a>
 8016edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ede:	895b      	ldrh	r3, [r3, #10]
 8016ee0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016ee2:	429a      	cmp	r2, r3
 8016ee4:	d2ea      	bcs.n	8016ebc <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8016ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d102      	bne.n	8016ef2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8016eec:	f06f 0301 	mvn.w	r3, #1
 8016ef0:	e282      	b.n	80173f8 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8016ef2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016ef4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8016ef6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016ef8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8016efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016efc:	685b      	ldr	r3, [r3, #4]
 8016efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016f00:	e23a      	b.n	8017378 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8016f02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016f06:	4413      	add	r3, r2
 8016f08:	781b      	ldrb	r3, [r3, #0]
 8016f0a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8016f12:	f04f 33ff 	mov.w	r3, #4294967295
 8016f16:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8016f18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016f1a:	3302      	adds	r3, #2
 8016f1c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8016f1e:	8bfa      	ldrh	r2, [r7, #30]
 8016f20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016f22:	429a      	cmp	r2, r3
 8016f24:	d202      	bcs.n	8016f2c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8016f26:	f06f 0301 	mvn.w	r3, #1
 8016f2a:	e265      	b.n	80173f8 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8016f2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016f2e:	3301      	adds	r3, #1
 8016f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f32:	8952      	ldrh	r2, [r2, #10]
 8016f34:	4293      	cmp	r3, r2
 8016f36:	da07      	bge.n	8016f48 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8016f38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016f3a:	3301      	adds	r3, #1
 8016f3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016f3e:	4413      	add	r3, r2
 8016f40:	781b      	ldrb	r3, [r3, #0]
 8016f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016f46:	e00b      	b.n	8016f60 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8016f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d004      	beq.n	8016f5a <dhcp_parse_reply+0xde>
 8016f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	685b      	ldr	r3, [r3, #4]
 8016f56:	781b      	ldrb	r3, [r3, #0]
 8016f58:	e000      	b.n	8016f5c <dhcp_parse_reply+0xe0>
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8016f68:	7dfb      	ldrb	r3, [r7, #23]
 8016f6a:	2b3b      	cmp	r3, #59	; 0x3b
 8016f6c:	f200 812d 	bhi.w	80171ca <dhcp_parse_reply+0x34e>
 8016f70:	a201      	add	r2, pc, #4	; (adr r2, 8016f78 <dhcp_parse_reply+0xfc>)
 8016f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f76:	bf00      	nop
 8016f78:	08017069 	.word	0x08017069
 8016f7c:	08017079 	.word	0x08017079
 8016f80:	080171cb 	.word	0x080171cb
 8016f84:	0801709b 	.word	0x0801709b
 8016f88:	080171cb 	.word	0x080171cb
 8016f8c:	080171cb 	.word	0x080171cb
 8016f90:	080171cb 	.word	0x080171cb
 8016f94:	080171cb 	.word	0x080171cb
 8016f98:	080171cb 	.word	0x080171cb
 8016f9c:	080171cb 	.word	0x080171cb
 8016fa0:	080171cb 	.word	0x080171cb
 8016fa4:	080171cb 	.word	0x080171cb
 8016fa8:	080171cb 	.word	0x080171cb
 8016fac:	080171cb 	.word	0x080171cb
 8016fb0:	080171cb 	.word	0x080171cb
 8016fb4:	080171cb 	.word	0x080171cb
 8016fb8:	080171cb 	.word	0x080171cb
 8016fbc:	080171cb 	.word	0x080171cb
 8016fc0:	080171cb 	.word	0x080171cb
 8016fc4:	080171cb 	.word	0x080171cb
 8016fc8:	080171cb 	.word	0x080171cb
 8016fcc:	080171cb 	.word	0x080171cb
 8016fd0:	080171cb 	.word	0x080171cb
 8016fd4:	080171cb 	.word	0x080171cb
 8016fd8:	080171cb 	.word	0x080171cb
 8016fdc:	080171cb 	.word	0x080171cb
 8016fe0:	080171cb 	.word	0x080171cb
 8016fe4:	080171cb 	.word	0x080171cb
 8016fe8:	080171cb 	.word	0x080171cb
 8016fec:	080171cb 	.word	0x080171cb
 8016ff0:	080171cb 	.word	0x080171cb
 8016ff4:	080171cb 	.word	0x080171cb
 8016ff8:	080171cb 	.word	0x080171cb
 8016ffc:	080171cb 	.word	0x080171cb
 8017000:	080171cb 	.word	0x080171cb
 8017004:	080171cb 	.word	0x080171cb
 8017008:	080171cb 	.word	0x080171cb
 801700c:	080171cb 	.word	0x080171cb
 8017010:	080171cb 	.word	0x080171cb
 8017014:	080171cb 	.word	0x080171cb
 8017018:	080171cb 	.word	0x080171cb
 801701c:	080171cb 	.word	0x080171cb
 8017020:	080171cb 	.word	0x080171cb
 8017024:	080171cb 	.word	0x080171cb
 8017028:	080171cb 	.word	0x080171cb
 801702c:	080171cb 	.word	0x080171cb
 8017030:	080171cb 	.word	0x080171cb
 8017034:	080171cb 	.word	0x080171cb
 8017038:	080171cb 	.word	0x080171cb
 801703c:	080171cb 	.word	0x080171cb
 8017040:	080171cb 	.word	0x080171cb
 8017044:	080170c7 	.word	0x080170c7
 8017048:	080170e9 	.word	0x080170e9
 801704c:	08017125 	.word	0x08017125
 8017050:	08017147 	.word	0x08017147
 8017054:	080171cb 	.word	0x080171cb
 8017058:	080171cb 	.word	0x080171cb
 801705c:	080171cb 	.word	0x080171cb
 8017060:	08017169 	.word	0x08017169
 8017064:	080171a9 	.word	0x080171a9
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8017068:	2300      	movs	r3, #0
 801706a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801706e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017072:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8017076:	e0ac      	b.n	80171d2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801707c:	2b04      	cmp	r3, #4
 801707e:	d009      	beq.n	8017094 <dhcp_parse_reply+0x218>
 8017080:	4b43      	ldr	r3, [pc, #268]	; (8017190 <dhcp_parse_reply+0x314>)
 8017082:	f240 622e 	movw	r2, #1582	; 0x62e
 8017086:	4943      	ldr	r1, [pc, #268]	; (8017194 <dhcp_parse_reply+0x318>)
 8017088:	4843      	ldr	r0, [pc, #268]	; (8017198 <dhcp_parse_reply+0x31c>)
 801708a:	f003 fced 	bl	801aa68 <iprintf>
 801708e:	f06f 0305 	mvn.w	r3, #5
 8017092:	e1b1      	b.n	80173f8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8017094:	2306      	movs	r3, #6
 8017096:	623b      	str	r3, [r7, #32]
        break;
 8017098:	e09b      	b.n	80171d2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801709a:	2304      	movs	r3, #4
 801709c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80170a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80170a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80170a8:	429a      	cmp	r2, r3
 80170aa:	d209      	bcs.n	80170c0 <dhcp_parse_reply+0x244>
 80170ac:	4b38      	ldr	r3, [pc, #224]	; (8017190 <dhcp_parse_reply+0x314>)
 80170ae:	f240 6233 	movw	r2, #1587	; 0x633
 80170b2:	493a      	ldr	r1, [pc, #232]	; (801719c <dhcp_parse_reply+0x320>)
 80170b4:	4838      	ldr	r0, [pc, #224]	; (8017198 <dhcp_parse_reply+0x31c>)
 80170b6:	f003 fcd7 	bl	801aa68 <iprintf>
 80170ba:	f06f 0305 	mvn.w	r3, #5
 80170be:	e19b      	b.n	80173f8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80170c0:	2307      	movs	r3, #7
 80170c2:	623b      	str	r3, [r7, #32]
        break;
 80170c4:	e085      	b.n	80171d2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80170c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170ca:	2b04      	cmp	r3, #4
 80170cc:	d009      	beq.n	80170e2 <dhcp_parse_reply+0x266>
 80170ce:	4b30      	ldr	r3, [pc, #192]	; (8017190 <dhcp_parse_reply+0x314>)
 80170d0:	f240 6241 	movw	r2, #1601	; 0x641
 80170d4:	492f      	ldr	r1, [pc, #188]	; (8017194 <dhcp_parse_reply+0x318>)
 80170d6:	4830      	ldr	r0, [pc, #192]	; (8017198 <dhcp_parse_reply+0x31c>)
 80170d8:	f003 fcc6 	bl	801aa68 <iprintf>
 80170dc:	f06f 0305 	mvn.w	r3, #5
 80170e0:	e18a      	b.n	80173f8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80170e2:	2303      	movs	r3, #3
 80170e4:	623b      	str	r3, [r7, #32]
        break;
 80170e6:	e074      	b.n	80171d2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80170e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170ec:	2b01      	cmp	r3, #1
 80170ee:	d009      	beq.n	8017104 <dhcp_parse_reply+0x288>
 80170f0:	4b27      	ldr	r3, [pc, #156]	; (8017190 <dhcp_parse_reply+0x314>)
 80170f2:	f240 624f 	movw	r2, #1615	; 0x64f
 80170f6:	492a      	ldr	r1, [pc, #168]	; (80171a0 <dhcp_parse_reply+0x324>)
 80170f8:	4827      	ldr	r0, [pc, #156]	; (8017198 <dhcp_parse_reply+0x31c>)
 80170fa:	f003 fcb5 	bl	801aa68 <iprintf>
 80170fe:	f06f 0305 	mvn.w	r3, #5
 8017102:	e179      	b.n	80173f8 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8017104:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017106:	2bf0      	cmp	r3, #240	; 0xf0
 8017108:	d009      	beq.n	801711e <dhcp_parse_reply+0x2a2>
 801710a:	4b21      	ldr	r3, [pc, #132]	; (8017190 <dhcp_parse_reply+0x314>)
 801710c:	f240 6251 	movw	r2, #1617	; 0x651
 8017110:	4924      	ldr	r1, [pc, #144]	; (80171a4 <dhcp_parse_reply+0x328>)
 8017112:	4821      	ldr	r0, [pc, #132]	; (8017198 <dhcp_parse_reply+0x31c>)
 8017114:	f003 fca8 	bl	801aa68 <iprintf>
 8017118:	f06f 0305 	mvn.w	r3, #5
 801711c:	e16c      	b.n	80173f8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801711e:	2300      	movs	r3, #0
 8017120:	623b      	str	r3, [r7, #32]
        break;
 8017122:	e056      	b.n	80171d2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017128:	2b01      	cmp	r3, #1
 801712a:	d009      	beq.n	8017140 <dhcp_parse_reply+0x2c4>
 801712c:	4b18      	ldr	r3, [pc, #96]	; (8017190 <dhcp_parse_reply+0x314>)
 801712e:	f240 6255 	movw	r2, #1621	; 0x655
 8017132:	491b      	ldr	r1, [pc, #108]	; (80171a0 <dhcp_parse_reply+0x324>)
 8017134:	4818      	ldr	r0, [pc, #96]	; (8017198 <dhcp_parse_reply+0x31c>)
 8017136:	f003 fc97 	bl	801aa68 <iprintf>
 801713a:	f06f 0305 	mvn.w	r3, #5
 801713e:	e15b      	b.n	80173f8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8017140:	2301      	movs	r3, #1
 8017142:	623b      	str	r3, [r7, #32]
        break;
 8017144:	e045      	b.n	80171d2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801714a:	2b04      	cmp	r3, #4
 801714c:	d009      	beq.n	8017162 <dhcp_parse_reply+0x2e6>
 801714e:	4b10      	ldr	r3, [pc, #64]	; (8017190 <dhcp_parse_reply+0x314>)
 8017150:	f240 6259 	movw	r2, #1625	; 0x659
 8017154:	490f      	ldr	r1, [pc, #60]	; (8017194 <dhcp_parse_reply+0x318>)
 8017156:	4810      	ldr	r0, [pc, #64]	; (8017198 <dhcp_parse_reply+0x31c>)
 8017158:	f003 fc86 	bl	801aa68 <iprintf>
 801715c:	f06f 0305 	mvn.w	r3, #5
 8017160:	e14a      	b.n	80173f8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8017162:	2302      	movs	r3, #2
 8017164:	623b      	str	r3, [r7, #32]
        break;
 8017166:	e034      	b.n	80171d2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801716c:	2b04      	cmp	r3, #4
 801716e:	d009      	beq.n	8017184 <dhcp_parse_reply+0x308>
 8017170:	4b07      	ldr	r3, [pc, #28]	; (8017190 <dhcp_parse_reply+0x314>)
 8017172:	f240 625d 	movw	r2, #1629	; 0x65d
 8017176:	4907      	ldr	r1, [pc, #28]	; (8017194 <dhcp_parse_reply+0x318>)
 8017178:	4807      	ldr	r0, [pc, #28]	; (8017198 <dhcp_parse_reply+0x31c>)
 801717a:	f003 fc75 	bl	801aa68 <iprintf>
 801717e:	f06f 0305 	mvn.w	r3, #5
 8017182:	e139      	b.n	80173f8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8017184:	2304      	movs	r3, #4
 8017186:	623b      	str	r3, [r7, #32]
        break;
 8017188:	e023      	b.n	80171d2 <dhcp_parse_reply+0x356>
 801718a:	bf00      	nop
 801718c:	2000f414 	.word	0x2000f414
 8017190:	0801e51c 	.word	0x0801e51c
 8017194:	0801e7a4 	.word	0x0801e7a4
 8017198:	0801e57c 	.word	0x0801e57c
 801719c:	0801e7b0 	.word	0x0801e7b0
 80171a0:	0801e7c4 	.word	0x0801e7c4
 80171a4:	0801e7d0 	.word	0x0801e7d0
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80171a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171ac:	2b04      	cmp	r3, #4
 80171ae:	d009      	beq.n	80171c4 <dhcp_parse_reply+0x348>
 80171b0:	4b93      	ldr	r3, [pc, #588]	; (8017400 <dhcp_parse_reply+0x584>)
 80171b2:	f240 6261 	movw	r2, #1633	; 0x661
 80171b6:	4993      	ldr	r1, [pc, #588]	; (8017404 <dhcp_parse_reply+0x588>)
 80171b8:	4893      	ldr	r0, [pc, #588]	; (8017408 <dhcp_parse_reply+0x58c>)
 80171ba:	f003 fc55 	bl	801aa68 <iprintf>
 80171be:	f06f 0305 	mvn.w	r3, #5
 80171c2:	e119      	b.n	80173f8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80171c4:	2305      	movs	r3, #5
 80171c6:	623b      	str	r3, [r7, #32]
        break;
 80171c8:	e003      	b.n	80171d2 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80171ca:	2300      	movs	r3, #0
 80171cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80171d0:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80171d2:	7dfb      	ldrb	r3, [r7, #23]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d103      	bne.n	80171e0 <dhcp_parse_reply+0x364>
      offset++;
 80171d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80171da:	3301      	adds	r3, #1
 80171dc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80171de:	e0a1      	b.n	8017324 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80171e0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80171e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171e6:	4413      	add	r3, r2
 80171e8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80171ec:	4293      	cmp	r3, r2
 80171ee:	dd02      	ble.n	80171f6 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 80171f0:	f06f 0301 	mvn.w	r3, #1
 80171f4:	e100      	b.n	80173f8 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 80171f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171fa:	b29a      	uxth	r2, r3
 80171fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80171fe:	4413      	add	r3, r2
 8017200:	b29b      	uxth	r3, r3
 8017202:	3302      	adds	r3, #2
 8017204:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8017206:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801720a:	2b00      	cmp	r3, #0
 801720c:	f000 808a 	beq.w	8017324 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8017210:	2300      	movs	r3, #0
 8017212:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8017214:	6a3b      	ldr	r3, [r7, #32]
 8017216:	2b00      	cmp	r3, #0
 8017218:	db02      	blt.n	8017220 <dhcp_parse_reply+0x3a4>
 801721a:	6a3b      	ldr	r3, [r7, #32]
 801721c:	2b07      	cmp	r3, #7
 801721e:	dd06      	ble.n	801722e <dhcp_parse_reply+0x3b2>
 8017220:	4b77      	ldr	r3, [pc, #476]	; (8017400 <dhcp_parse_reply+0x584>)
 8017222:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8017226:	4979      	ldr	r1, [pc, #484]	; (801740c <dhcp_parse_reply+0x590>)
 8017228:	4877      	ldr	r0, [pc, #476]	; (8017408 <dhcp_parse_reply+0x58c>)
 801722a:	f003 fc1d 	bl	801aa68 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801722e:	4a78      	ldr	r2, [pc, #480]	; (8017410 <dhcp_parse_reply+0x594>)
 8017230:	6a3b      	ldr	r3, [r7, #32]
 8017232:	4413      	add	r3, r2
 8017234:	781b      	ldrb	r3, [r3, #0]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d174      	bne.n	8017324 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801723a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801723e:	2b04      	cmp	r3, #4
 8017240:	bf28      	it	cs
 8017242:	2304      	movcs	r3, #4
 8017244:	b2db      	uxtb	r3, r3
 8017246:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017248:	8bfb      	ldrh	r3, [r7, #30]
 801724a:	8aba      	ldrh	r2, [r7, #20]
 801724c:	f107 0108 	add.w	r1, r7, #8
 8017250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017252:	f7f8 fc1b 	bl	800fa8c <pbuf_copy_partial>
 8017256:	4603      	mov	r3, r0
 8017258:	461a      	mov	r2, r3
 801725a:	8abb      	ldrh	r3, [r7, #20]
 801725c:	4293      	cmp	r3, r2
 801725e:	d002      	beq.n	8017266 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8017260:	f06f 0301 	mvn.w	r3, #1
 8017264:	e0c8      	b.n	80173f8 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8017266:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801726a:	2b04      	cmp	r3, #4
 801726c:	d933      	bls.n	80172d6 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801726e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017272:	f003 0303 	and.w	r3, r3, #3
 8017276:	b2db      	uxtb	r3, r3
 8017278:	2b00      	cmp	r3, #0
 801727a:	d009      	beq.n	8017290 <dhcp_parse_reply+0x414>
 801727c:	4b60      	ldr	r3, [pc, #384]	; (8017400 <dhcp_parse_reply+0x584>)
 801727e:	f240 6281 	movw	r2, #1665	; 0x681
 8017282:	4964      	ldr	r1, [pc, #400]	; (8017414 <dhcp_parse_reply+0x598>)
 8017284:	4860      	ldr	r0, [pc, #384]	; (8017408 <dhcp_parse_reply+0x58c>)
 8017286:	f003 fbef 	bl	801aa68 <iprintf>
 801728a:	f06f 0305 	mvn.w	r3, #5
 801728e:	e0b3      	b.n	80173f8 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8017290:	4a5f      	ldr	r2, [pc, #380]	; (8017410 <dhcp_parse_reply+0x594>)
 8017292:	6a3b      	ldr	r3, [r7, #32]
 8017294:	4413      	add	r3, r2
 8017296:	2201      	movs	r2, #1
 8017298:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801729a:	68bb      	ldr	r3, [r7, #8]
 801729c:	4618      	mov	r0, r3
 801729e:	f7f6 fe4c 	bl	800df3a <lwip_htonl>
 80172a2:	4602      	mov	r2, r0
 80172a4:	495c      	ldr	r1, [pc, #368]	; (8017418 <dhcp_parse_reply+0x59c>)
 80172a6:	6a3b      	ldr	r3, [r7, #32]
 80172a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80172ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80172b0:	3b04      	subs	r3, #4
 80172b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80172b6:	8bfb      	ldrh	r3, [r7, #30]
 80172b8:	3304      	adds	r3, #4
 80172ba:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80172bc:	8a7a      	ldrh	r2, [r7, #18]
 80172be:	8bfb      	ldrh	r3, [r7, #30]
 80172c0:	429a      	cmp	r2, r3
 80172c2:	d202      	bcs.n	80172ca <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80172c4:	f06f 0301 	mvn.w	r3, #1
 80172c8:	e096      	b.n	80173f8 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80172ca:	8a7b      	ldrh	r3, [r7, #18]
 80172cc:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80172ce:	6a3b      	ldr	r3, [r7, #32]
 80172d0:	3301      	adds	r3, #1
 80172d2:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80172d4:	e79e      	b.n	8017214 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80172d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80172da:	2b04      	cmp	r3, #4
 80172dc:	d106      	bne.n	80172ec <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80172de:	68bb      	ldr	r3, [r7, #8]
 80172e0:	4618      	mov	r0, r3
 80172e2:	f7f6 fe2a 	bl	800df3a <lwip_htonl>
 80172e6:	4603      	mov	r3, r0
 80172e8:	60bb      	str	r3, [r7, #8]
 80172ea:	e011      	b.n	8017310 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80172ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80172f0:	2b01      	cmp	r3, #1
 80172f2:	d009      	beq.n	8017308 <dhcp_parse_reply+0x48c>
 80172f4:	4b42      	ldr	r3, [pc, #264]	; (8017400 <dhcp_parse_reply+0x584>)
 80172f6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80172fa:	4948      	ldr	r1, [pc, #288]	; (801741c <dhcp_parse_reply+0x5a0>)
 80172fc:	4842      	ldr	r0, [pc, #264]	; (8017408 <dhcp_parse_reply+0x58c>)
 80172fe:	f003 fbb3 	bl	801aa68 <iprintf>
 8017302:	f06f 0305 	mvn.w	r3, #5
 8017306:	e077      	b.n	80173f8 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8017308:	f107 0308 	add.w	r3, r7, #8
 801730c:	781b      	ldrb	r3, [r3, #0]
 801730e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8017310:	4a3f      	ldr	r2, [pc, #252]	; (8017410 <dhcp_parse_reply+0x594>)
 8017312:	6a3b      	ldr	r3, [r7, #32]
 8017314:	4413      	add	r3, r2
 8017316:	2201      	movs	r2, #1
 8017318:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801731a:	68ba      	ldr	r2, [r7, #8]
 801731c:	493e      	ldr	r1, [pc, #248]	; (8017418 <dhcp_parse_reply+0x59c>)
 801731e:	6a3b      	ldr	r3, [r7, #32]
 8017320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8017324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017326:	895b      	ldrh	r3, [r3, #10]
 8017328:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801732a:	429a      	cmp	r2, r3
 801732c:	d324      	bcc.n	8017378 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 801732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017330:	895b      	ldrh	r3, [r3, #10]
 8017332:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017334:	1ad3      	subs	r3, r2, r3
 8017336:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8017338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801733a:	895b      	ldrh	r3, [r3, #10]
 801733c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801733e:	1ad3      	subs	r3, r2, r3
 8017340:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8017342:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017344:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017346:	429a      	cmp	r2, r3
 8017348:	d213      	bcs.n	8017372 <dhcp_parse_reply+0x4f6>
        q = q->next;
 801734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8017350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017352:	2b00      	cmp	r3, #0
 8017354:	d109      	bne.n	801736a <dhcp_parse_reply+0x4ee>
 8017356:	4b2a      	ldr	r3, [pc, #168]	; (8017400 <dhcp_parse_reply+0x584>)
 8017358:	f240 629d 	movw	r2, #1693	; 0x69d
 801735c:	4930      	ldr	r1, [pc, #192]	; (8017420 <dhcp_parse_reply+0x5a4>)
 801735e:	482a      	ldr	r0, [pc, #168]	; (8017408 <dhcp_parse_reply+0x58c>)
 8017360:	f003 fb82 	bl	801aa68 <iprintf>
 8017364:	f06f 0305 	mvn.w	r3, #5
 8017368:	e046      	b.n	80173f8 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801736c:	685b      	ldr	r3, [r3, #4]
 801736e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017370:	e002      	b.n	8017378 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8017372:	f06f 0301 	mvn.w	r3, #1
 8017376:	e03f      	b.n	80173f8 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801737a:	2b00      	cmp	r3, #0
 801737c:	d00a      	beq.n	8017394 <dhcp_parse_reply+0x518>
 801737e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017380:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017382:	429a      	cmp	r2, r3
 8017384:	d206      	bcs.n	8017394 <dhcp_parse_reply+0x518>
 8017386:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801738a:	4413      	add	r3, r2
 801738c:	781b      	ldrb	r3, [r3, #0]
 801738e:	2bff      	cmp	r3, #255	; 0xff
 8017390:	f47f adb7 	bne.w	8016f02 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8017394:	4b1e      	ldr	r3, [pc, #120]	; (8017410 <dhcp_parse_reply+0x594>)
 8017396:	781b      	ldrb	r3, [r3, #0]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d018      	beq.n	80173ce <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801739c:	4b1e      	ldr	r3, [pc, #120]	; (8017418 <dhcp_parse_reply+0x59c>)
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80173a2:	4b1b      	ldr	r3, [pc, #108]	; (8017410 <dhcp_parse_reply+0x594>)
 80173a4:	2200      	movs	r2, #0
 80173a6:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	2b01      	cmp	r3, #1
 80173ac:	d102      	bne.n	80173b4 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 80173ae:	2301      	movs	r3, #1
 80173b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80173b2:	e00c      	b.n	80173ce <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	2b02      	cmp	r3, #2
 80173b8:	d102      	bne.n	80173c0 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 80173ba:	2301      	movs	r3, #1
 80173bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80173be:	e006      	b.n	80173ce <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	2b03      	cmp	r3, #3
 80173c4:	d103      	bne.n	80173ce <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 80173c6:	2301      	movs	r3, #1
 80173c8:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80173ca:	2301      	movs	r3, #1
 80173cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80173ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d006      	beq.n	80173e2 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80173d4:	2300      	movs	r3, #0
 80173d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80173d8:	236c      	movs	r3, #108	; 0x6c
 80173da:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80173dc:	23ec      	movs	r3, #236	; 0xec
 80173de:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80173e0:	e569      	b.n	8016eb6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80173e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d006      	beq.n	80173f6 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 80173e8:	2300      	movs	r3, #0
 80173ea:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80173ec:	232c      	movs	r3, #44	; 0x2c
 80173ee:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80173f0:	236c      	movs	r3, #108	; 0x6c
 80173f2:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80173f4:	e55f      	b.n	8016eb6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80173f6:	2300      	movs	r3, #0
}
 80173f8:	4618      	mov	r0, r3
 80173fa:	3740      	adds	r7, #64	; 0x40
 80173fc:	46bd      	mov	sp, r7
 80173fe:	bd80      	pop	{r7, pc}
 8017400:	0801e51c 	.word	0x0801e51c
 8017404:	0801e7a4 	.word	0x0801e7a4
 8017408:	0801e57c 	.word	0x0801e57c
 801740c:	0801e7e8 	.word	0x0801e7e8
 8017410:	2000f414 	.word	0x2000f414
 8017414:	0801e7fc 	.word	0x0801e7fc
 8017418:	2000f41c 	.word	0x2000f41c
 801741c:	0801e814 	.word	0x0801e814
 8017420:	0801e828 	.word	0x0801e828

08017424 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b08a      	sub	sp, #40	; 0x28
 8017428:	af00      	add	r7, sp, #0
 801742a:	60f8      	str	r0, [r7, #12]
 801742c:	60b9      	str	r1, [r7, #8]
 801742e:	607a      	str	r2, [r7, #4]
 8017430:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8017432:	4b60      	ldr	r3, [pc, #384]	; (80175b4 <dhcp_recv+0x190>)
 8017434:	685b      	ldr	r3, [r3, #4]
 8017436:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017438:	6a3b      	ldr	r3, [r7, #32]
 801743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801743c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	685b      	ldr	r3, [r3, #4]
 8017442:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8017444:	69fb      	ldr	r3, [r7, #28]
 8017446:	2b00      	cmp	r3, #0
 8017448:	f000 809d 	beq.w	8017586 <dhcp_recv+0x162>
 801744c:	69fb      	ldr	r3, [r7, #28]
 801744e:	791b      	ldrb	r3, [r3, #4]
 8017450:	2b00      	cmp	r3, #0
 8017452:	f000 8098 	beq.w	8017586 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	895b      	ldrh	r3, [r3, #10]
 801745a:	2b2b      	cmp	r3, #43	; 0x2b
 801745c:	f240 8095 	bls.w	801758a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8017460:	69bb      	ldr	r3, [r7, #24]
 8017462:	781b      	ldrb	r3, [r3, #0]
 8017464:	2b02      	cmp	r3, #2
 8017466:	f040 8092 	bne.w	801758e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801746a:	2300      	movs	r3, #0
 801746c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017470:	e012      	b.n	8017498 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8017472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017476:	6a3a      	ldr	r2, [r7, #32]
 8017478:	4413      	add	r3, r2
 801747a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801747e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017482:	69b9      	ldr	r1, [r7, #24]
 8017484:	440b      	add	r3, r1
 8017486:	7f1b      	ldrb	r3, [r3, #28]
 8017488:	429a      	cmp	r2, r3
 801748a:	f040 8082 	bne.w	8017592 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801748e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017492:	3301      	adds	r3, #1
 8017494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017498:	6a3b      	ldr	r3, [r7, #32]
 801749a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801749e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80174a2:	429a      	cmp	r2, r3
 80174a4:	d203      	bcs.n	80174ae <dhcp_recv+0x8a>
 80174a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174aa:	2b05      	cmp	r3, #5
 80174ac:	d9e1      	bls.n	8017472 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80174ae:	69bb      	ldr	r3, [r7, #24]
 80174b0:	685b      	ldr	r3, [r3, #4]
 80174b2:	4618      	mov	r0, r3
 80174b4:	f7f6 fd41 	bl	800df3a <lwip_htonl>
 80174b8:	4602      	mov	r2, r0
 80174ba:	69fb      	ldr	r3, [r7, #28]
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	429a      	cmp	r2, r3
 80174c0:	d169      	bne.n	8017596 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80174c2:	69f9      	ldr	r1, [r7, #28]
 80174c4:	6878      	ldr	r0, [r7, #4]
 80174c6:	f7ff fcd9 	bl	8016e7c <dhcp_parse_reply>
 80174ca:	4603      	mov	r3, r0
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d164      	bne.n	801759a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80174d0:	4b39      	ldr	r3, [pc, #228]	; (80175b8 <dhcp_recv+0x194>)
 80174d2:	785b      	ldrb	r3, [r3, #1]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d062      	beq.n	801759e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	685b      	ldr	r3, [r3, #4]
 80174dc:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80174de:	4b37      	ldr	r3, [pc, #220]	; (80175bc <dhcp_recv+0x198>)
 80174e0:	685b      	ldr	r3, [r3, #4]
 80174e2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80174e4:	7cfb      	ldrb	r3, [r7, #19]
 80174e6:	2b05      	cmp	r3, #5
 80174e8:	d12a      	bne.n	8017540 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80174ea:	69fb      	ldr	r3, [r7, #28]
 80174ec:	795b      	ldrb	r3, [r3, #5]
 80174ee:	2b01      	cmp	r3, #1
 80174f0:	d112      	bne.n	8017518 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80174f2:	6979      	ldr	r1, [r7, #20]
 80174f4:	6a38      	ldr	r0, [r7, #32]
 80174f6:	f7fe fe17 	bl	8016128 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80174fa:	6a3b      	ldr	r3, [r7, #32]
 80174fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017500:	f003 0308 	and.w	r3, r3, #8
 8017504:	2b00      	cmp	r3, #0
 8017506:	d003      	beq.n	8017510 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8017508:	6a38      	ldr	r0, [r7, #32]
 801750a:	f7fe fb87 	bl	8015c1c <dhcp_check>
 801750e:	e049      	b.n	80175a4 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8017510:	6a38      	ldr	r0, [r7, #32]
 8017512:	f7ff f867 	bl	80165e4 <dhcp_bind>
 8017516:	e045      	b.n	80175a4 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017518:	69fb      	ldr	r3, [r7, #28]
 801751a:	795b      	ldrb	r3, [r3, #5]
 801751c:	2b03      	cmp	r3, #3
 801751e:	d007      	beq.n	8017530 <dhcp_recv+0x10c>
 8017520:	69fb      	ldr	r3, [r7, #28]
 8017522:	795b      	ldrb	r3, [r3, #5]
 8017524:	2b04      	cmp	r3, #4
 8017526:	d003      	beq.n	8017530 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8017528:	69fb      	ldr	r3, [r7, #28]
 801752a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801752c:	2b05      	cmp	r3, #5
 801752e:	d139      	bne.n	80175a4 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8017530:	6979      	ldr	r1, [r7, #20]
 8017532:	6a38      	ldr	r0, [r7, #32]
 8017534:	f7fe fdf8 	bl	8016128 <dhcp_handle_ack>
      dhcp_bind(netif);
 8017538:	6a38      	ldr	r0, [r7, #32]
 801753a:	f7ff f853 	bl	80165e4 <dhcp_bind>
 801753e:	e031      	b.n	80175a4 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017540:	7cfb      	ldrb	r3, [r7, #19]
 8017542:	2b06      	cmp	r3, #6
 8017544:	d113      	bne.n	801756e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017546:	69fb      	ldr	r3, [r7, #28]
 8017548:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801754a:	2b03      	cmp	r3, #3
 801754c:	d00b      	beq.n	8017566 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801754e:	69fb      	ldr	r3, [r7, #28]
 8017550:	795b      	ldrb	r3, [r3, #5]
 8017552:	2b01      	cmp	r3, #1
 8017554:	d007      	beq.n	8017566 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017556:	69fb      	ldr	r3, [r7, #28]
 8017558:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801755a:	2b04      	cmp	r3, #4
 801755c:	d003      	beq.n	8017566 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801755e:	69fb      	ldr	r3, [r7, #28]
 8017560:	795b      	ldrb	r3, [r3, #5]
 8017562:	2b05      	cmp	r3, #5
 8017564:	d103      	bne.n	801756e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8017566:	6a38      	ldr	r0, [r7, #32]
 8017568:	f7fe fb3e 	bl	8015be8 <dhcp_handle_nak>
 801756c:	e01a      	b.n	80175a4 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801756e:	7cfb      	ldrb	r3, [r7, #19]
 8017570:	2b02      	cmp	r3, #2
 8017572:	d116      	bne.n	80175a2 <dhcp_recv+0x17e>
 8017574:	69fb      	ldr	r3, [r7, #28]
 8017576:	795b      	ldrb	r3, [r3, #5]
 8017578:	2b06      	cmp	r3, #6
 801757a:	d112      	bne.n	80175a2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801757c:	6979      	ldr	r1, [r7, #20]
 801757e:	6a38      	ldr	r0, [r7, #32]
 8017580:	f7fe fb80 	bl	8015c84 <dhcp_handle_offer>
 8017584:	e00e      	b.n	80175a4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017586:	bf00      	nop
 8017588:	e00c      	b.n	80175a4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801758a:	bf00      	nop
 801758c:	e00a      	b.n	80175a4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801758e:	bf00      	nop
 8017590:	e008      	b.n	80175a4 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8017592:	bf00      	nop
 8017594:	e006      	b.n	80175a4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017596:	bf00      	nop
 8017598:	e004      	b.n	80175a4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801759a:	bf00      	nop
 801759c:	e002      	b.n	80175a4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801759e:	bf00      	nop
 80175a0:	e000      	b.n	80175a4 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80175a2:	bf00      	nop
  pbuf_free(p);
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	f7f8 f86b 	bl	800f680 <pbuf_free>
}
 80175aa:	bf00      	nop
 80175ac:	3728      	adds	r7, #40	; 0x28
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd80      	pop	{r7, pc}
 80175b2:	bf00      	nop
 80175b4:	2000bcc4 	.word	0x2000bcc4
 80175b8:	2000f414 	.word	0x2000f414
 80175bc:	2000f41c 	.word	0x2000f41c

080175c0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b088      	sub	sp, #32
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	60f8      	str	r0, [r7, #12]
 80175c8:	60b9      	str	r1, [r7, #8]
 80175ca:	603b      	str	r3, [r7, #0]
 80175cc:	4613      	mov	r3, r2
 80175ce:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d108      	bne.n	80175e8 <dhcp_create_msg+0x28>
 80175d6:	4b5f      	ldr	r3, [pc, #380]	; (8017754 <dhcp_create_msg+0x194>)
 80175d8:	f240 7269 	movw	r2, #1897	; 0x769
 80175dc:	495e      	ldr	r1, [pc, #376]	; (8017758 <dhcp_create_msg+0x198>)
 80175de:	485f      	ldr	r0, [pc, #380]	; (801775c <dhcp_create_msg+0x19c>)
 80175e0:	f003 fa42 	bl	801aa68 <iprintf>
 80175e4:	2300      	movs	r3, #0
 80175e6:	e0b1      	b.n	801774c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d108      	bne.n	8017600 <dhcp_create_msg+0x40>
 80175ee:	4b59      	ldr	r3, [pc, #356]	; (8017754 <dhcp_create_msg+0x194>)
 80175f0:	f240 726a 	movw	r2, #1898	; 0x76a
 80175f4:	495a      	ldr	r1, [pc, #360]	; (8017760 <dhcp_create_msg+0x1a0>)
 80175f6:	4859      	ldr	r0, [pc, #356]	; (801775c <dhcp_create_msg+0x19c>)
 80175f8:	f003 fa36 	bl	801aa68 <iprintf>
 80175fc:	2300      	movs	r3, #0
 80175fe:	e0a5      	b.n	801774c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017600:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017604:	f44f 719a 	mov.w	r1, #308	; 0x134
 8017608:	2036      	movs	r0, #54	; 0x36
 801760a:	f7f7 fd55 	bl	800f0b8 <pbuf_alloc>
 801760e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8017610:	69bb      	ldr	r3, [r7, #24]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d101      	bne.n	801761a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8017616:	2300      	movs	r3, #0
 8017618:	e098      	b.n	801774c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801761a:	69bb      	ldr	r3, [r7, #24]
 801761c:	895b      	ldrh	r3, [r3, #10]
 801761e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8017622:	d206      	bcs.n	8017632 <dhcp_create_msg+0x72>
 8017624:	4b4b      	ldr	r3, [pc, #300]	; (8017754 <dhcp_create_msg+0x194>)
 8017626:	f240 7271 	movw	r2, #1905	; 0x771
 801762a:	494e      	ldr	r1, [pc, #312]	; (8017764 <dhcp_create_msg+0x1a4>)
 801762c:	484b      	ldr	r0, [pc, #300]	; (801775c <dhcp_create_msg+0x19c>)
 801762e:	f003 fa1b 	bl	801aa68 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017632:	79fb      	ldrb	r3, [r7, #7]
 8017634:	2b03      	cmp	r3, #3
 8017636:	d103      	bne.n	8017640 <dhcp_create_msg+0x80>
 8017638:	68bb      	ldr	r3, [r7, #8]
 801763a:	795b      	ldrb	r3, [r3, #5]
 801763c:	2b03      	cmp	r3, #3
 801763e:	d10d      	bne.n	801765c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017640:	68bb      	ldr	r3, [r7, #8]
 8017642:	799b      	ldrb	r3, [r3, #6]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d105      	bne.n	8017654 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8017648:	f003 fab2 	bl	801abb0 <rand>
 801764c:	4603      	mov	r3, r0
 801764e:	461a      	mov	r2, r3
 8017650:	4b45      	ldr	r3, [pc, #276]	; (8017768 <dhcp_create_msg+0x1a8>)
 8017652:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017654:	4b44      	ldr	r3, [pc, #272]	; (8017768 <dhcp_create_msg+0x1a8>)
 8017656:	681a      	ldr	r2, [r3, #0]
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801765c:	69bb      	ldr	r3, [r7, #24]
 801765e:	685b      	ldr	r3, [r3, #4]
 8017660:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017662:	f44f 729a 	mov.w	r2, #308	; 0x134
 8017666:	2100      	movs	r1, #0
 8017668:	6978      	ldr	r0, [r7, #20]
 801766a:	f003 f94b 	bl	801a904 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801766e:	697b      	ldr	r3, [r7, #20]
 8017670:	2201      	movs	r2, #1
 8017672:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017674:	697b      	ldr	r3, [r7, #20]
 8017676:	2201      	movs	r2, #1
 8017678:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017680:	697b      	ldr	r3, [r7, #20]
 8017682:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017684:	68bb      	ldr	r3, [r7, #8]
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	4618      	mov	r0, r3
 801768a:	f7f6 fc56 	bl	800df3a <lwip_htonl>
 801768e:	4602      	mov	r2, r0
 8017690:	697b      	ldr	r3, [r7, #20]
 8017692:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017694:	79fb      	ldrb	r3, [r7, #7]
 8017696:	2b08      	cmp	r3, #8
 8017698:	d010      	beq.n	80176bc <dhcp_create_msg+0xfc>
 801769a:	79fb      	ldrb	r3, [r7, #7]
 801769c:	2b04      	cmp	r3, #4
 801769e:	d00d      	beq.n	80176bc <dhcp_create_msg+0xfc>
 80176a0:	79fb      	ldrb	r3, [r7, #7]
 80176a2:	2b07      	cmp	r3, #7
 80176a4:	d00a      	beq.n	80176bc <dhcp_create_msg+0xfc>
 80176a6:	79fb      	ldrb	r3, [r7, #7]
 80176a8:	2b03      	cmp	r3, #3
 80176aa:	d10c      	bne.n	80176c6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80176ac:	68bb      	ldr	r3, [r7, #8]
 80176ae:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80176b0:	2b05      	cmp	r3, #5
 80176b2:	d003      	beq.n	80176bc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80176b4:	68bb      	ldr	r3, [r7, #8]
 80176b6:	795b      	ldrb	r3, [r3, #5]
 80176b8:	2b04      	cmp	r3, #4
 80176ba:	d104      	bne.n	80176c6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	3304      	adds	r3, #4
 80176c0:	681a      	ldr	r2, [r3, #0]
 80176c2:	697b      	ldr	r3, [r7, #20]
 80176c4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80176c6:	2300      	movs	r3, #0
 80176c8:	83fb      	strh	r3, [r7, #30]
 80176ca:	e00c      	b.n	80176e6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80176cc:	8bfa      	ldrh	r2, [r7, #30]
 80176ce:	8bfb      	ldrh	r3, [r7, #30]
 80176d0:	68f9      	ldr	r1, [r7, #12]
 80176d2:	440a      	add	r2, r1
 80176d4:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80176d8:	697a      	ldr	r2, [r7, #20]
 80176da:	4413      	add	r3, r2
 80176dc:	460a      	mov	r2, r1
 80176de:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80176e0:	8bfb      	ldrh	r3, [r7, #30]
 80176e2:	3301      	adds	r3, #1
 80176e4:	83fb      	strh	r3, [r7, #30]
 80176e6:	8bfb      	ldrh	r3, [r7, #30]
 80176e8:	2b05      	cmp	r3, #5
 80176ea:	d9ef      	bls.n	80176cc <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80176ec:	697b      	ldr	r3, [r7, #20]
 80176ee:	2200      	movs	r2, #0
 80176f0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80176f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80176f8:	2200      	movs	r2, #0
 80176fa:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80176fe:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8017702:	2200      	movs	r2, #0
 8017704:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8017708:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801770c:	2200      	movs	r2, #0
 801770e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017712:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8017716:	697b      	ldr	r3, [r7, #20]
 8017718:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801771c:	2301      	movs	r3, #1
 801771e:	2235      	movs	r2, #53	; 0x35
 8017720:	2000      	movs	r0, #0
 8017722:	f7ff fadb 	bl	8016cdc <dhcp_option>
 8017726:	4603      	mov	r3, r0
 8017728:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801772a:	697b      	ldr	r3, [r7, #20]
 801772c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017730:	79fa      	ldrb	r2, [r7, #7]
 8017732:	8a7b      	ldrh	r3, [r7, #18]
 8017734:	4618      	mov	r0, r3
 8017736:	f7ff fb05 	bl	8016d44 <dhcp_option_byte>
 801773a:	4603      	mov	r3, r0
 801773c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801773e:	683b      	ldr	r3, [r7, #0]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d002      	beq.n	801774a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8017744:	683b      	ldr	r3, [r7, #0]
 8017746:	8a7a      	ldrh	r2, [r7, #18]
 8017748:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801774a:	69bb      	ldr	r3, [r7, #24]
}
 801774c:	4618      	mov	r0, r3
 801774e:	3720      	adds	r7, #32
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}
 8017754:	0801e51c 	.word	0x0801e51c
 8017758:	0801e83c 	.word	0x0801e83c
 801775c:	0801e57c 	.word	0x0801e57c
 8017760:	0801e85c 	.word	0x0801e85c
 8017764:	0801e87c 	.word	0x0801e87c
 8017768:	20008580 	.word	0x20008580

0801776c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801776c:	b580      	push	{r7, lr}
 801776e:	b084      	sub	sp, #16
 8017770:	af00      	add	r7, sp, #0
 8017772:	4603      	mov	r3, r0
 8017774:	60b9      	str	r1, [r7, #8]
 8017776:	607a      	str	r2, [r7, #4]
 8017778:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801777a:	89fb      	ldrh	r3, [r7, #14]
 801777c:	1c5a      	adds	r2, r3, #1
 801777e:	81fa      	strh	r2, [r7, #14]
 8017780:	461a      	mov	r2, r3
 8017782:	68bb      	ldr	r3, [r7, #8]
 8017784:	4413      	add	r3, r2
 8017786:	22ff      	movs	r2, #255	; 0xff
 8017788:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801778a:	e007      	b.n	801779c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801778c:	89fb      	ldrh	r3, [r7, #14]
 801778e:	1c5a      	adds	r2, r3, #1
 8017790:	81fa      	strh	r2, [r7, #14]
 8017792:	461a      	mov	r2, r3
 8017794:	68bb      	ldr	r3, [r7, #8]
 8017796:	4413      	add	r3, r2
 8017798:	2200      	movs	r2, #0
 801779a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801779c:	89fb      	ldrh	r3, [r7, #14]
 801779e:	2b43      	cmp	r3, #67	; 0x43
 80177a0:	d904      	bls.n	80177ac <dhcp_option_trailer+0x40>
 80177a2:	89fb      	ldrh	r3, [r7, #14]
 80177a4:	f003 0303 	and.w	r3, r3, #3
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d002      	beq.n	80177b2 <dhcp_option_trailer+0x46>
 80177ac:	89fb      	ldrh	r3, [r7, #14]
 80177ae:	2b43      	cmp	r3, #67	; 0x43
 80177b0:	d9ec      	bls.n	801778c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80177b2:	89fb      	ldrh	r3, [r7, #14]
 80177b4:	33f0      	adds	r3, #240	; 0xf0
 80177b6:	b29b      	uxth	r3, r3
 80177b8:	4619      	mov	r1, r3
 80177ba:	6878      	ldr	r0, [r7, #4]
 80177bc:	f7f7 fdda 	bl	800f374 <pbuf_realloc>
}
 80177c0:	bf00      	nop
 80177c2:	3710      	adds	r7, #16
 80177c4:	46bd      	mov	sp, r7
 80177c6:	bd80      	pop	{r7, pc}

080177c8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80177c8:	b480      	push	{r7}
 80177ca:	b085      	sub	sp, #20
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d017      	beq.n	8017806 <dhcp_supplied_address+0x3e>
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d013      	beq.n	8017806 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177e2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	795b      	ldrb	r3, [r3, #5]
 80177e8:	2b0a      	cmp	r3, #10
 80177ea:	d007      	beq.n	80177fc <dhcp_supplied_address+0x34>
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	795b      	ldrb	r3, [r3, #5]
 80177f0:	2b05      	cmp	r3, #5
 80177f2:	d003      	beq.n	80177fc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80177f8:	2b04      	cmp	r3, #4
 80177fa:	d101      	bne.n	8017800 <dhcp_supplied_address+0x38>
 80177fc:	2301      	movs	r3, #1
 80177fe:	e000      	b.n	8017802 <dhcp_supplied_address+0x3a>
 8017800:	2300      	movs	r3, #0
 8017802:	b2db      	uxtb	r3, r3
 8017804:	e000      	b.n	8017808 <dhcp_supplied_address+0x40>
  }
  return 0;
 8017806:	2300      	movs	r3, #0
}
 8017808:	4618      	mov	r0, r3
 801780a:	3714      	adds	r7, #20
 801780c:	46bd      	mov	sp, r7
 801780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017812:	4770      	bx	lr

08017814 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b082      	sub	sp, #8
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801781c:	4915      	ldr	r1, [pc, #84]	; (8017874 <etharp_free_entry+0x60>)
 801781e:	687a      	ldr	r2, [r7, #4]
 8017820:	4613      	mov	r3, r2
 8017822:	005b      	lsls	r3, r3, #1
 8017824:	4413      	add	r3, r2
 8017826:	00db      	lsls	r3, r3, #3
 8017828:	440b      	add	r3, r1
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d013      	beq.n	8017858 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017830:	4910      	ldr	r1, [pc, #64]	; (8017874 <etharp_free_entry+0x60>)
 8017832:	687a      	ldr	r2, [r7, #4]
 8017834:	4613      	mov	r3, r2
 8017836:	005b      	lsls	r3, r3, #1
 8017838:	4413      	add	r3, r2
 801783a:	00db      	lsls	r3, r3, #3
 801783c:	440b      	add	r3, r1
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	4618      	mov	r0, r3
 8017842:	f7f7 ff1d 	bl	800f680 <pbuf_free>
    arp_table[i].q = NULL;
 8017846:	490b      	ldr	r1, [pc, #44]	; (8017874 <etharp_free_entry+0x60>)
 8017848:	687a      	ldr	r2, [r7, #4]
 801784a:	4613      	mov	r3, r2
 801784c:	005b      	lsls	r3, r3, #1
 801784e:	4413      	add	r3, r2
 8017850:	00db      	lsls	r3, r3, #3
 8017852:	440b      	add	r3, r1
 8017854:	2200      	movs	r2, #0
 8017856:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017858:	4906      	ldr	r1, [pc, #24]	; (8017874 <etharp_free_entry+0x60>)
 801785a:	687a      	ldr	r2, [r7, #4]
 801785c:	4613      	mov	r3, r2
 801785e:	005b      	lsls	r3, r3, #1
 8017860:	4413      	add	r3, r2
 8017862:	00db      	lsls	r3, r3, #3
 8017864:	440b      	add	r3, r1
 8017866:	3314      	adds	r3, #20
 8017868:	2200      	movs	r2, #0
 801786a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801786c:	bf00      	nop
 801786e:	3708      	adds	r7, #8
 8017870:	46bd      	mov	sp, r7
 8017872:	bd80      	pop	{r7, pc}
 8017874:	20008584 	.word	0x20008584

08017878 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b082      	sub	sp, #8
 801787c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801787e:	2300      	movs	r3, #0
 8017880:	607b      	str	r3, [r7, #4]
 8017882:	e096      	b.n	80179b2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017884:	494f      	ldr	r1, [pc, #316]	; (80179c4 <etharp_tmr+0x14c>)
 8017886:	687a      	ldr	r2, [r7, #4]
 8017888:	4613      	mov	r3, r2
 801788a:	005b      	lsls	r3, r3, #1
 801788c:	4413      	add	r3, r2
 801788e:	00db      	lsls	r3, r3, #3
 8017890:	440b      	add	r3, r1
 8017892:	3314      	adds	r3, #20
 8017894:	781b      	ldrb	r3, [r3, #0]
 8017896:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017898:	78fb      	ldrb	r3, [r7, #3]
 801789a:	2b00      	cmp	r3, #0
 801789c:	f000 8086 	beq.w	80179ac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80178a0:	4948      	ldr	r1, [pc, #288]	; (80179c4 <etharp_tmr+0x14c>)
 80178a2:	687a      	ldr	r2, [r7, #4]
 80178a4:	4613      	mov	r3, r2
 80178a6:	005b      	lsls	r3, r3, #1
 80178a8:	4413      	add	r3, r2
 80178aa:	00db      	lsls	r3, r3, #3
 80178ac:	440b      	add	r3, r1
 80178ae:	3312      	adds	r3, #18
 80178b0:	881b      	ldrh	r3, [r3, #0]
 80178b2:	3301      	adds	r3, #1
 80178b4:	b298      	uxth	r0, r3
 80178b6:	4943      	ldr	r1, [pc, #268]	; (80179c4 <etharp_tmr+0x14c>)
 80178b8:	687a      	ldr	r2, [r7, #4]
 80178ba:	4613      	mov	r3, r2
 80178bc:	005b      	lsls	r3, r3, #1
 80178be:	4413      	add	r3, r2
 80178c0:	00db      	lsls	r3, r3, #3
 80178c2:	440b      	add	r3, r1
 80178c4:	3312      	adds	r3, #18
 80178c6:	4602      	mov	r2, r0
 80178c8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80178ca:	493e      	ldr	r1, [pc, #248]	; (80179c4 <etharp_tmr+0x14c>)
 80178cc:	687a      	ldr	r2, [r7, #4]
 80178ce:	4613      	mov	r3, r2
 80178d0:	005b      	lsls	r3, r3, #1
 80178d2:	4413      	add	r3, r2
 80178d4:	00db      	lsls	r3, r3, #3
 80178d6:	440b      	add	r3, r1
 80178d8:	3312      	adds	r3, #18
 80178da:	881b      	ldrh	r3, [r3, #0]
 80178dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80178e0:	d215      	bcs.n	801790e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80178e2:	4938      	ldr	r1, [pc, #224]	; (80179c4 <etharp_tmr+0x14c>)
 80178e4:	687a      	ldr	r2, [r7, #4]
 80178e6:	4613      	mov	r3, r2
 80178e8:	005b      	lsls	r3, r3, #1
 80178ea:	4413      	add	r3, r2
 80178ec:	00db      	lsls	r3, r3, #3
 80178ee:	440b      	add	r3, r1
 80178f0:	3314      	adds	r3, #20
 80178f2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80178f4:	2b01      	cmp	r3, #1
 80178f6:	d10e      	bne.n	8017916 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80178f8:	4932      	ldr	r1, [pc, #200]	; (80179c4 <etharp_tmr+0x14c>)
 80178fa:	687a      	ldr	r2, [r7, #4]
 80178fc:	4613      	mov	r3, r2
 80178fe:	005b      	lsls	r3, r3, #1
 8017900:	4413      	add	r3, r2
 8017902:	00db      	lsls	r3, r3, #3
 8017904:	440b      	add	r3, r1
 8017906:	3312      	adds	r3, #18
 8017908:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801790a:	2b04      	cmp	r3, #4
 801790c:	d903      	bls.n	8017916 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801790e:	6878      	ldr	r0, [r7, #4]
 8017910:	f7ff ff80 	bl	8017814 <etharp_free_entry>
 8017914:	e04a      	b.n	80179ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017916:	492b      	ldr	r1, [pc, #172]	; (80179c4 <etharp_tmr+0x14c>)
 8017918:	687a      	ldr	r2, [r7, #4]
 801791a:	4613      	mov	r3, r2
 801791c:	005b      	lsls	r3, r3, #1
 801791e:	4413      	add	r3, r2
 8017920:	00db      	lsls	r3, r3, #3
 8017922:	440b      	add	r3, r1
 8017924:	3314      	adds	r3, #20
 8017926:	781b      	ldrb	r3, [r3, #0]
 8017928:	2b03      	cmp	r3, #3
 801792a:	d10a      	bne.n	8017942 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801792c:	4925      	ldr	r1, [pc, #148]	; (80179c4 <etharp_tmr+0x14c>)
 801792e:	687a      	ldr	r2, [r7, #4]
 8017930:	4613      	mov	r3, r2
 8017932:	005b      	lsls	r3, r3, #1
 8017934:	4413      	add	r3, r2
 8017936:	00db      	lsls	r3, r3, #3
 8017938:	440b      	add	r3, r1
 801793a:	3314      	adds	r3, #20
 801793c:	2204      	movs	r2, #4
 801793e:	701a      	strb	r2, [r3, #0]
 8017940:	e034      	b.n	80179ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017942:	4920      	ldr	r1, [pc, #128]	; (80179c4 <etharp_tmr+0x14c>)
 8017944:	687a      	ldr	r2, [r7, #4]
 8017946:	4613      	mov	r3, r2
 8017948:	005b      	lsls	r3, r3, #1
 801794a:	4413      	add	r3, r2
 801794c:	00db      	lsls	r3, r3, #3
 801794e:	440b      	add	r3, r1
 8017950:	3314      	adds	r3, #20
 8017952:	781b      	ldrb	r3, [r3, #0]
 8017954:	2b04      	cmp	r3, #4
 8017956:	d10a      	bne.n	801796e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017958:	491a      	ldr	r1, [pc, #104]	; (80179c4 <etharp_tmr+0x14c>)
 801795a:	687a      	ldr	r2, [r7, #4]
 801795c:	4613      	mov	r3, r2
 801795e:	005b      	lsls	r3, r3, #1
 8017960:	4413      	add	r3, r2
 8017962:	00db      	lsls	r3, r3, #3
 8017964:	440b      	add	r3, r1
 8017966:	3314      	adds	r3, #20
 8017968:	2202      	movs	r2, #2
 801796a:	701a      	strb	r2, [r3, #0]
 801796c:	e01e      	b.n	80179ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801796e:	4915      	ldr	r1, [pc, #84]	; (80179c4 <etharp_tmr+0x14c>)
 8017970:	687a      	ldr	r2, [r7, #4]
 8017972:	4613      	mov	r3, r2
 8017974:	005b      	lsls	r3, r3, #1
 8017976:	4413      	add	r3, r2
 8017978:	00db      	lsls	r3, r3, #3
 801797a:	440b      	add	r3, r1
 801797c:	3314      	adds	r3, #20
 801797e:	781b      	ldrb	r3, [r3, #0]
 8017980:	2b01      	cmp	r3, #1
 8017982:	d113      	bne.n	80179ac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017984:	490f      	ldr	r1, [pc, #60]	; (80179c4 <etharp_tmr+0x14c>)
 8017986:	687a      	ldr	r2, [r7, #4]
 8017988:	4613      	mov	r3, r2
 801798a:	005b      	lsls	r3, r3, #1
 801798c:	4413      	add	r3, r2
 801798e:	00db      	lsls	r3, r3, #3
 8017990:	440b      	add	r3, r1
 8017992:	3308      	adds	r3, #8
 8017994:	6818      	ldr	r0, [r3, #0]
 8017996:	687a      	ldr	r2, [r7, #4]
 8017998:	4613      	mov	r3, r2
 801799a:	005b      	lsls	r3, r3, #1
 801799c:	4413      	add	r3, r2
 801799e:	00db      	lsls	r3, r3, #3
 80179a0:	4a08      	ldr	r2, [pc, #32]	; (80179c4 <etharp_tmr+0x14c>)
 80179a2:	4413      	add	r3, r2
 80179a4:	3304      	adds	r3, #4
 80179a6:	4619      	mov	r1, r3
 80179a8:	f000 fe72 	bl	8018690 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	3301      	adds	r3, #1
 80179b0:	607b      	str	r3, [r7, #4]
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	2b09      	cmp	r3, #9
 80179b6:	f77f af65 	ble.w	8017884 <etharp_tmr+0xc>
      }
    }
  }
}
 80179ba:	bf00      	nop
 80179bc:	bf00      	nop
 80179be:	3708      	adds	r7, #8
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd80      	pop	{r7, pc}
 80179c4:	20008584 	.word	0x20008584

080179c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b08a      	sub	sp, #40	; 0x28
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	60f8      	str	r0, [r7, #12]
 80179d0:	460b      	mov	r3, r1
 80179d2:	607a      	str	r2, [r7, #4]
 80179d4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80179d6:	230a      	movs	r3, #10
 80179d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80179da:	230a      	movs	r3, #10
 80179dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80179de:	230a      	movs	r3, #10
 80179e0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80179e2:	2300      	movs	r3, #0
 80179e4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80179e6:	230a      	movs	r3, #10
 80179e8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80179ea:	2300      	movs	r3, #0
 80179ec:	83bb      	strh	r3, [r7, #28]
 80179ee:	2300      	movs	r3, #0
 80179f0:	837b      	strh	r3, [r7, #26]
 80179f2:	2300      	movs	r3, #0
 80179f4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80179f6:	2300      	movs	r3, #0
 80179f8:	843b      	strh	r3, [r7, #32]
 80179fa:	e0ae      	b.n	8017b5a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80179fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a00:	49a6      	ldr	r1, [pc, #664]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017a02:	4613      	mov	r3, r2
 8017a04:	005b      	lsls	r3, r3, #1
 8017a06:	4413      	add	r3, r2
 8017a08:	00db      	lsls	r3, r3, #3
 8017a0a:	440b      	add	r3, r1
 8017a0c:	3314      	adds	r3, #20
 8017a0e:	781b      	ldrb	r3, [r3, #0]
 8017a10:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017a12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017a16:	2b0a      	cmp	r3, #10
 8017a18:	d105      	bne.n	8017a26 <etharp_find_entry+0x5e>
 8017a1a:	7dfb      	ldrb	r3, [r7, #23]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d102      	bne.n	8017a26 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017a20:	8c3b      	ldrh	r3, [r7, #32]
 8017a22:	847b      	strh	r3, [r7, #34]	; 0x22
 8017a24:	e095      	b.n	8017b52 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017a26:	7dfb      	ldrb	r3, [r7, #23]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	f000 8092 	beq.w	8017b52 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017a2e:	7dfb      	ldrb	r3, [r7, #23]
 8017a30:	2b01      	cmp	r3, #1
 8017a32:	d009      	beq.n	8017a48 <etharp_find_entry+0x80>
 8017a34:	7dfb      	ldrb	r3, [r7, #23]
 8017a36:	2b01      	cmp	r3, #1
 8017a38:	d806      	bhi.n	8017a48 <etharp_find_entry+0x80>
 8017a3a:	4b99      	ldr	r3, [pc, #612]	; (8017ca0 <etharp_find_entry+0x2d8>)
 8017a3c:	f240 1223 	movw	r2, #291	; 0x123
 8017a40:	4998      	ldr	r1, [pc, #608]	; (8017ca4 <etharp_find_entry+0x2dc>)
 8017a42:	4899      	ldr	r0, [pc, #612]	; (8017ca8 <etharp_find_entry+0x2e0>)
 8017a44:	f003 f810 	bl	801aa68 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d020      	beq.n	8017a90 <etharp_find_entry+0xc8>
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	6819      	ldr	r1, [r3, #0]
 8017a52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a56:	4891      	ldr	r0, [pc, #580]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017a58:	4613      	mov	r3, r2
 8017a5a:	005b      	lsls	r3, r3, #1
 8017a5c:	4413      	add	r3, r2
 8017a5e:	00db      	lsls	r3, r3, #3
 8017a60:	4403      	add	r3, r0
 8017a62:	3304      	adds	r3, #4
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	4299      	cmp	r1, r3
 8017a68:	d112      	bne.n	8017a90 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d00c      	beq.n	8017a8a <etharp_find_entry+0xc2>
 8017a70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a74:	4989      	ldr	r1, [pc, #548]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017a76:	4613      	mov	r3, r2
 8017a78:	005b      	lsls	r3, r3, #1
 8017a7a:	4413      	add	r3, r2
 8017a7c:	00db      	lsls	r3, r3, #3
 8017a7e:	440b      	add	r3, r1
 8017a80:	3308      	adds	r3, #8
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	687a      	ldr	r2, [r7, #4]
 8017a86:	429a      	cmp	r2, r3
 8017a88:	d102      	bne.n	8017a90 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017a8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017a8e:	e100      	b.n	8017c92 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017a90:	7dfb      	ldrb	r3, [r7, #23]
 8017a92:	2b01      	cmp	r3, #1
 8017a94:	d140      	bne.n	8017b18 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017a96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a9a:	4980      	ldr	r1, [pc, #512]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017a9c:	4613      	mov	r3, r2
 8017a9e:	005b      	lsls	r3, r3, #1
 8017aa0:	4413      	add	r3, r2
 8017aa2:	00db      	lsls	r3, r3, #3
 8017aa4:	440b      	add	r3, r1
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d01a      	beq.n	8017ae2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017aac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017ab0:	497a      	ldr	r1, [pc, #488]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017ab2:	4613      	mov	r3, r2
 8017ab4:	005b      	lsls	r3, r3, #1
 8017ab6:	4413      	add	r3, r2
 8017ab8:	00db      	lsls	r3, r3, #3
 8017aba:	440b      	add	r3, r1
 8017abc:	3312      	adds	r3, #18
 8017abe:	881b      	ldrh	r3, [r3, #0]
 8017ac0:	8bba      	ldrh	r2, [r7, #28]
 8017ac2:	429a      	cmp	r2, r3
 8017ac4:	d845      	bhi.n	8017b52 <etharp_find_entry+0x18a>
            old_queue = i;
 8017ac6:	8c3b      	ldrh	r3, [r7, #32]
 8017ac8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017aca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017ace:	4973      	ldr	r1, [pc, #460]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017ad0:	4613      	mov	r3, r2
 8017ad2:	005b      	lsls	r3, r3, #1
 8017ad4:	4413      	add	r3, r2
 8017ad6:	00db      	lsls	r3, r3, #3
 8017ad8:	440b      	add	r3, r1
 8017ada:	3312      	adds	r3, #18
 8017adc:	881b      	ldrh	r3, [r3, #0]
 8017ade:	83bb      	strh	r3, [r7, #28]
 8017ae0:	e037      	b.n	8017b52 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017ae2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017ae6:	496d      	ldr	r1, [pc, #436]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017ae8:	4613      	mov	r3, r2
 8017aea:	005b      	lsls	r3, r3, #1
 8017aec:	4413      	add	r3, r2
 8017aee:	00db      	lsls	r3, r3, #3
 8017af0:	440b      	add	r3, r1
 8017af2:	3312      	adds	r3, #18
 8017af4:	881b      	ldrh	r3, [r3, #0]
 8017af6:	8b7a      	ldrh	r2, [r7, #26]
 8017af8:	429a      	cmp	r2, r3
 8017afa:	d82a      	bhi.n	8017b52 <etharp_find_entry+0x18a>
            old_pending = i;
 8017afc:	8c3b      	ldrh	r3, [r7, #32]
 8017afe:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017b00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017b04:	4965      	ldr	r1, [pc, #404]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017b06:	4613      	mov	r3, r2
 8017b08:	005b      	lsls	r3, r3, #1
 8017b0a:	4413      	add	r3, r2
 8017b0c:	00db      	lsls	r3, r3, #3
 8017b0e:	440b      	add	r3, r1
 8017b10:	3312      	adds	r3, #18
 8017b12:	881b      	ldrh	r3, [r3, #0]
 8017b14:	837b      	strh	r3, [r7, #26]
 8017b16:	e01c      	b.n	8017b52 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017b18:	7dfb      	ldrb	r3, [r7, #23]
 8017b1a:	2b01      	cmp	r3, #1
 8017b1c:	d919      	bls.n	8017b52 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017b1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017b22:	495e      	ldr	r1, [pc, #376]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017b24:	4613      	mov	r3, r2
 8017b26:	005b      	lsls	r3, r3, #1
 8017b28:	4413      	add	r3, r2
 8017b2a:	00db      	lsls	r3, r3, #3
 8017b2c:	440b      	add	r3, r1
 8017b2e:	3312      	adds	r3, #18
 8017b30:	881b      	ldrh	r3, [r3, #0]
 8017b32:	8b3a      	ldrh	r2, [r7, #24]
 8017b34:	429a      	cmp	r2, r3
 8017b36:	d80c      	bhi.n	8017b52 <etharp_find_entry+0x18a>
            old_stable = i;
 8017b38:	8c3b      	ldrh	r3, [r7, #32]
 8017b3a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017b3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017b40:	4956      	ldr	r1, [pc, #344]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017b42:	4613      	mov	r3, r2
 8017b44:	005b      	lsls	r3, r3, #1
 8017b46:	4413      	add	r3, r2
 8017b48:	00db      	lsls	r3, r3, #3
 8017b4a:	440b      	add	r3, r1
 8017b4c:	3312      	adds	r3, #18
 8017b4e:	881b      	ldrh	r3, [r3, #0]
 8017b50:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017b52:	8c3b      	ldrh	r3, [r7, #32]
 8017b54:	3301      	adds	r3, #1
 8017b56:	b29b      	uxth	r3, r3
 8017b58:	843b      	strh	r3, [r7, #32]
 8017b5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017b5e:	2b09      	cmp	r3, #9
 8017b60:	f77f af4c 	ble.w	80179fc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017b64:	7afb      	ldrb	r3, [r7, #11]
 8017b66:	f003 0302 	and.w	r3, r3, #2
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d108      	bne.n	8017b80 <etharp_find_entry+0x1b8>
 8017b6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017b72:	2b0a      	cmp	r3, #10
 8017b74:	d107      	bne.n	8017b86 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017b76:	7afb      	ldrb	r3, [r7, #11]
 8017b78:	f003 0301 	and.w	r3, r3, #1
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d102      	bne.n	8017b86 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017b80:	f04f 33ff 	mov.w	r3, #4294967295
 8017b84:	e085      	b.n	8017c92 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017b86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017b8a:	2b09      	cmp	r3, #9
 8017b8c:	dc02      	bgt.n	8017b94 <etharp_find_entry+0x1cc>
    i = empty;
 8017b8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b90:	843b      	strh	r3, [r7, #32]
 8017b92:	e039      	b.n	8017c08 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017b94:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017b98:	2b09      	cmp	r3, #9
 8017b9a:	dc14      	bgt.n	8017bc6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017b9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017b9e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017ba0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017ba4:	493d      	ldr	r1, [pc, #244]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017ba6:	4613      	mov	r3, r2
 8017ba8:	005b      	lsls	r3, r3, #1
 8017baa:	4413      	add	r3, r2
 8017bac:	00db      	lsls	r3, r3, #3
 8017bae:	440b      	add	r3, r1
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d018      	beq.n	8017be8 <etharp_find_entry+0x220>
 8017bb6:	4b3a      	ldr	r3, [pc, #232]	; (8017ca0 <etharp_find_entry+0x2d8>)
 8017bb8:	f240 126d 	movw	r2, #365	; 0x16d
 8017bbc:	493b      	ldr	r1, [pc, #236]	; (8017cac <etharp_find_entry+0x2e4>)
 8017bbe:	483a      	ldr	r0, [pc, #232]	; (8017ca8 <etharp_find_entry+0x2e0>)
 8017bc0:	f002 ff52 	bl	801aa68 <iprintf>
 8017bc4:	e010      	b.n	8017be8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017bc6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017bca:	2b09      	cmp	r3, #9
 8017bcc:	dc02      	bgt.n	8017bd4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017bce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017bd0:	843b      	strh	r3, [r7, #32]
 8017bd2:	e009      	b.n	8017be8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017bd4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017bd8:	2b09      	cmp	r3, #9
 8017bda:	dc02      	bgt.n	8017be2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017bdc:	8bfb      	ldrh	r3, [r7, #30]
 8017bde:	843b      	strh	r3, [r7, #32]
 8017be0:	e002      	b.n	8017be8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017be2:	f04f 33ff 	mov.w	r3, #4294967295
 8017be6:	e054      	b.n	8017c92 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017be8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017bec:	2b09      	cmp	r3, #9
 8017bee:	dd06      	ble.n	8017bfe <etharp_find_entry+0x236>
 8017bf0:	4b2b      	ldr	r3, [pc, #172]	; (8017ca0 <etharp_find_entry+0x2d8>)
 8017bf2:	f240 127f 	movw	r2, #383	; 0x17f
 8017bf6:	492e      	ldr	r1, [pc, #184]	; (8017cb0 <etharp_find_entry+0x2e8>)
 8017bf8:	482b      	ldr	r0, [pc, #172]	; (8017ca8 <etharp_find_entry+0x2e0>)
 8017bfa:	f002 ff35 	bl	801aa68 <iprintf>
    etharp_free_entry(i);
 8017bfe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017c02:	4618      	mov	r0, r3
 8017c04:	f7ff fe06 	bl	8017814 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017c08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017c0c:	2b09      	cmp	r3, #9
 8017c0e:	dd06      	ble.n	8017c1e <etharp_find_entry+0x256>
 8017c10:	4b23      	ldr	r3, [pc, #140]	; (8017ca0 <etharp_find_entry+0x2d8>)
 8017c12:	f240 1283 	movw	r2, #387	; 0x183
 8017c16:	4926      	ldr	r1, [pc, #152]	; (8017cb0 <etharp_find_entry+0x2e8>)
 8017c18:	4823      	ldr	r0, [pc, #140]	; (8017ca8 <etharp_find_entry+0x2e0>)
 8017c1a:	f002 ff25 	bl	801aa68 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017c1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c22:	491e      	ldr	r1, [pc, #120]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017c24:	4613      	mov	r3, r2
 8017c26:	005b      	lsls	r3, r3, #1
 8017c28:	4413      	add	r3, r2
 8017c2a:	00db      	lsls	r3, r3, #3
 8017c2c:	440b      	add	r3, r1
 8017c2e:	3314      	adds	r3, #20
 8017c30:	781b      	ldrb	r3, [r3, #0]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d006      	beq.n	8017c44 <etharp_find_entry+0x27c>
 8017c36:	4b1a      	ldr	r3, [pc, #104]	; (8017ca0 <etharp_find_entry+0x2d8>)
 8017c38:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017c3c:	491d      	ldr	r1, [pc, #116]	; (8017cb4 <etharp_find_entry+0x2ec>)
 8017c3e:	481a      	ldr	r0, [pc, #104]	; (8017ca8 <etharp_find_entry+0x2e0>)
 8017c40:	f002 ff12 	bl	801aa68 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d00b      	beq.n	8017c62 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017c4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	6819      	ldr	r1, [r3, #0]
 8017c52:	4812      	ldr	r0, [pc, #72]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017c54:	4613      	mov	r3, r2
 8017c56:	005b      	lsls	r3, r3, #1
 8017c58:	4413      	add	r3, r2
 8017c5a:	00db      	lsls	r3, r3, #3
 8017c5c:	4403      	add	r3, r0
 8017c5e:	3304      	adds	r3, #4
 8017c60:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017c62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c66:	490d      	ldr	r1, [pc, #52]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017c68:	4613      	mov	r3, r2
 8017c6a:	005b      	lsls	r3, r3, #1
 8017c6c:	4413      	add	r3, r2
 8017c6e:	00db      	lsls	r3, r3, #3
 8017c70:	440b      	add	r3, r1
 8017c72:	3312      	adds	r3, #18
 8017c74:	2200      	movs	r2, #0
 8017c76:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017c78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c7c:	4907      	ldr	r1, [pc, #28]	; (8017c9c <etharp_find_entry+0x2d4>)
 8017c7e:	4613      	mov	r3, r2
 8017c80:	005b      	lsls	r3, r3, #1
 8017c82:	4413      	add	r3, r2
 8017c84:	00db      	lsls	r3, r3, #3
 8017c86:	440b      	add	r3, r1
 8017c88:	3308      	adds	r3, #8
 8017c8a:	687a      	ldr	r2, [r7, #4]
 8017c8c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017c8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017c92:	4618      	mov	r0, r3
 8017c94:	3728      	adds	r7, #40	; 0x28
 8017c96:	46bd      	mov	sp, r7
 8017c98:	bd80      	pop	{r7, pc}
 8017c9a:	bf00      	nop
 8017c9c:	20008584 	.word	0x20008584
 8017ca0:	0801e8bc 	.word	0x0801e8bc
 8017ca4:	0801e8f4 	.word	0x0801e8f4
 8017ca8:	0801e934 	.word	0x0801e934
 8017cac:	0801e95c 	.word	0x0801e95c
 8017cb0:	0801e974 	.word	0x0801e974
 8017cb4:	0801e988 	.word	0x0801e988

08017cb8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b088      	sub	sp, #32
 8017cbc:	af02      	add	r7, sp, #8
 8017cbe:	60f8      	str	r0, [r7, #12]
 8017cc0:	60b9      	str	r1, [r7, #8]
 8017cc2:	607a      	str	r2, [r7, #4]
 8017cc4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017ccc:	2b06      	cmp	r3, #6
 8017cce:	d006      	beq.n	8017cde <etharp_update_arp_entry+0x26>
 8017cd0:	4b48      	ldr	r3, [pc, #288]	; (8017df4 <etharp_update_arp_entry+0x13c>)
 8017cd2:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017cd6:	4948      	ldr	r1, [pc, #288]	; (8017df8 <etharp_update_arp_entry+0x140>)
 8017cd8:	4848      	ldr	r0, [pc, #288]	; (8017dfc <etharp_update_arp_entry+0x144>)
 8017cda:	f002 fec5 	bl	801aa68 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017cde:	68bb      	ldr	r3, [r7, #8]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d012      	beq.n	8017d0a <etharp_update_arp_entry+0x52>
 8017ce4:	68bb      	ldr	r3, [r7, #8]
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d00e      	beq.n	8017d0a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017cec:	68bb      	ldr	r3, [r7, #8]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	68f9      	ldr	r1, [r7, #12]
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	f001 f920 	bl	8018f38 <ip4_addr_isbroadcast_u32>
 8017cf8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d105      	bne.n	8017d0a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017cfe:	68bb      	ldr	r3, [r7, #8]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017d06:	2be0      	cmp	r3, #224	; 0xe0
 8017d08:	d102      	bne.n	8017d10 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017d0a:	f06f 030f 	mvn.w	r3, #15
 8017d0e:	e06c      	b.n	8017dea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017d10:	78fb      	ldrb	r3, [r7, #3]
 8017d12:	68fa      	ldr	r2, [r7, #12]
 8017d14:	4619      	mov	r1, r3
 8017d16:	68b8      	ldr	r0, [r7, #8]
 8017d18:	f7ff fe56 	bl	80179c8 <etharp_find_entry>
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017d20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	da02      	bge.n	8017d2e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017d28:	8afb      	ldrh	r3, [r7, #22]
 8017d2a:	b25b      	sxtb	r3, r3
 8017d2c:	e05d      	b.n	8017dea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017d2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017d32:	4933      	ldr	r1, [pc, #204]	; (8017e00 <etharp_update_arp_entry+0x148>)
 8017d34:	4613      	mov	r3, r2
 8017d36:	005b      	lsls	r3, r3, #1
 8017d38:	4413      	add	r3, r2
 8017d3a:	00db      	lsls	r3, r3, #3
 8017d3c:	440b      	add	r3, r1
 8017d3e:	3314      	adds	r3, #20
 8017d40:	2202      	movs	r2, #2
 8017d42:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017d44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017d48:	492d      	ldr	r1, [pc, #180]	; (8017e00 <etharp_update_arp_entry+0x148>)
 8017d4a:	4613      	mov	r3, r2
 8017d4c:	005b      	lsls	r3, r3, #1
 8017d4e:	4413      	add	r3, r2
 8017d50:	00db      	lsls	r3, r3, #3
 8017d52:	440b      	add	r3, r1
 8017d54:	3308      	adds	r3, #8
 8017d56:	68fa      	ldr	r2, [r7, #12]
 8017d58:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017d5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017d5e:	4613      	mov	r3, r2
 8017d60:	005b      	lsls	r3, r3, #1
 8017d62:	4413      	add	r3, r2
 8017d64:	00db      	lsls	r3, r3, #3
 8017d66:	3308      	adds	r3, #8
 8017d68:	4a25      	ldr	r2, [pc, #148]	; (8017e00 <etharp_update_arp_entry+0x148>)
 8017d6a:	4413      	add	r3, r2
 8017d6c:	3304      	adds	r3, #4
 8017d6e:	2206      	movs	r2, #6
 8017d70:	6879      	ldr	r1, [r7, #4]
 8017d72:	4618      	mov	r0, r3
 8017d74:	f002 fdb8 	bl	801a8e8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017d78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017d7c:	4920      	ldr	r1, [pc, #128]	; (8017e00 <etharp_update_arp_entry+0x148>)
 8017d7e:	4613      	mov	r3, r2
 8017d80:	005b      	lsls	r3, r3, #1
 8017d82:	4413      	add	r3, r2
 8017d84:	00db      	lsls	r3, r3, #3
 8017d86:	440b      	add	r3, r1
 8017d88:	3312      	adds	r3, #18
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017d8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017d92:	491b      	ldr	r1, [pc, #108]	; (8017e00 <etharp_update_arp_entry+0x148>)
 8017d94:	4613      	mov	r3, r2
 8017d96:	005b      	lsls	r3, r3, #1
 8017d98:	4413      	add	r3, r2
 8017d9a:	00db      	lsls	r3, r3, #3
 8017d9c:	440b      	add	r3, r1
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d021      	beq.n	8017de8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017da4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017da8:	4915      	ldr	r1, [pc, #84]	; (8017e00 <etharp_update_arp_entry+0x148>)
 8017daa:	4613      	mov	r3, r2
 8017dac:	005b      	lsls	r3, r3, #1
 8017dae:	4413      	add	r3, r2
 8017db0:	00db      	lsls	r3, r3, #3
 8017db2:	440b      	add	r3, r1
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017db8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017dbc:	4910      	ldr	r1, [pc, #64]	; (8017e00 <etharp_update_arp_entry+0x148>)
 8017dbe:	4613      	mov	r3, r2
 8017dc0:	005b      	lsls	r3, r3, #1
 8017dc2:	4413      	add	r3, r2
 8017dc4:	00db      	lsls	r3, r3, #3
 8017dc6:	440b      	add	r3, r1
 8017dc8:	2200      	movs	r2, #0
 8017dca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017dd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017dd6:	9300      	str	r3, [sp, #0]
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	6939      	ldr	r1, [r7, #16]
 8017ddc:	68f8      	ldr	r0, [r7, #12]
 8017dde:	f001 ffb3 	bl	8019d48 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017de2:	6938      	ldr	r0, [r7, #16]
 8017de4:	f7f7 fc4c 	bl	800f680 <pbuf_free>
  }
  return ERR_OK;
 8017de8:	2300      	movs	r3, #0
}
 8017dea:	4618      	mov	r0, r3
 8017dec:	3718      	adds	r7, #24
 8017dee:	46bd      	mov	sp, r7
 8017df0:	bd80      	pop	{r7, pc}
 8017df2:	bf00      	nop
 8017df4:	0801e8bc 	.word	0x0801e8bc
 8017df8:	0801e9b4 	.word	0x0801e9b4
 8017dfc:	0801e934 	.word	0x0801e934
 8017e00:	20008584 	.word	0x20008584

08017e04 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b084      	sub	sp, #16
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	60fb      	str	r3, [r7, #12]
 8017e10:	e01e      	b.n	8017e50 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017e12:	4913      	ldr	r1, [pc, #76]	; (8017e60 <etharp_cleanup_netif+0x5c>)
 8017e14:	68fa      	ldr	r2, [r7, #12]
 8017e16:	4613      	mov	r3, r2
 8017e18:	005b      	lsls	r3, r3, #1
 8017e1a:	4413      	add	r3, r2
 8017e1c:	00db      	lsls	r3, r3, #3
 8017e1e:	440b      	add	r3, r1
 8017e20:	3314      	adds	r3, #20
 8017e22:	781b      	ldrb	r3, [r3, #0]
 8017e24:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017e26:	7afb      	ldrb	r3, [r7, #11]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d00e      	beq.n	8017e4a <etharp_cleanup_netif+0x46>
 8017e2c:	490c      	ldr	r1, [pc, #48]	; (8017e60 <etharp_cleanup_netif+0x5c>)
 8017e2e:	68fa      	ldr	r2, [r7, #12]
 8017e30:	4613      	mov	r3, r2
 8017e32:	005b      	lsls	r3, r3, #1
 8017e34:	4413      	add	r3, r2
 8017e36:	00db      	lsls	r3, r3, #3
 8017e38:	440b      	add	r3, r1
 8017e3a:	3308      	adds	r3, #8
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	687a      	ldr	r2, [r7, #4]
 8017e40:	429a      	cmp	r2, r3
 8017e42:	d102      	bne.n	8017e4a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017e44:	68f8      	ldr	r0, [r7, #12]
 8017e46:	f7ff fce5 	bl	8017814 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	3301      	adds	r3, #1
 8017e4e:	60fb      	str	r3, [r7, #12]
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	2b09      	cmp	r3, #9
 8017e54:	dddd      	ble.n	8017e12 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017e56:	bf00      	nop
 8017e58:	bf00      	nop
 8017e5a:	3710      	adds	r7, #16
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	bd80      	pop	{r7, pc}
 8017e60:	20008584 	.word	0x20008584

08017e64 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017e64:	b5b0      	push	{r4, r5, r7, lr}
 8017e66:	b08a      	sub	sp, #40	; 0x28
 8017e68:	af04      	add	r7, sp, #16
 8017e6a:	6078      	str	r0, [r7, #4]
 8017e6c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017e6e:	683b      	ldr	r3, [r7, #0]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d107      	bne.n	8017e84 <etharp_input+0x20>
 8017e74:	4b3f      	ldr	r3, [pc, #252]	; (8017f74 <etharp_input+0x110>)
 8017e76:	f240 228a 	movw	r2, #650	; 0x28a
 8017e7a:	493f      	ldr	r1, [pc, #252]	; (8017f78 <etharp_input+0x114>)
 8017e7c:	483f      	ldr	r0, [pc, #252]	; (8017f7c <etharp_input+0x118>)
 8017e7e:	f002 fdf3 	bl	801aa68 <iprintf>
 8017e82:	e074      	b.n	8017f6e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	685b      	ldr	r3, [r3, #4]
 8017e88:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017e8a:	693b      	ldr	r3, [r7, #16]
 8017e8c:	881b      	ldrh	r3, [r3, #0]
 8017e8e:	b29b      	uxth	r3, r3
 8017e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017e94:	d10c      	bne.n	8017eb0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017e96:	693b      	ldr	r3, [r7, #16]
 8017e98:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017e9a:	2b06      	cmp	r3, #6
 8017e9c:	d108      	bne.n	8017eb0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017e9e:	693b      	ldr	r3, [r7, #16]
 8017ea0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017ea2:	2b04      	cmp	r3, #4
 8017ea4:	d104      	bne.n	8017eb0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017ea6:	693b      	ldr	r3, [r7, #16]
 8017ea8:	885b      	ldrh	r3, [r3, #2]
 8017eaa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017eac:	2b08      	cmp	r3, #8
 8017eae:	d003      	beq.n	8017eb8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017eb0:	6878      	ldr	r0, [r7, #4]
 8017eb2:	f7f7 fbe5 	bl	800f680 <pbuf_free>
    return;
 8017eb6:	e05a      	b.n	8017f6e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017eb8:	693b      	ldr	r3, [r7, #16]
 8017eba:	330e      	adds	r3, #14
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017ec0:	693b      	ldr	r3, [r7, #16]
 8017ec2:	3318      	adds	r3, #24
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017ec8:	683b      	ldr	r3, [r7, #0]
 8017eca:	3304      	adds	r3, #4
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d102      	bne.n	8017ed8 <etharp_input+0x74>
    for_us = 0;
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	75fb      	strb	r3, [r7, #23]
 8017ed6:	e009      	b.n	8017eec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017ed8:	68ba      	ldr	r2, [r7, #8]
 8017eda:	683b      	ldr	r3, [r7, #0]
 8017edc:	3304      	adds	r3, #4
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	429a      	cmp	r2, r3
 8017ee2:	bf0c      	ite	eq
 8017ee4:	2301      	moveq	r3, #1
 8017ee6:	2300      	movne	r3, #0
 8017ee8:	b2db      	uxtb	r3, r3
 8017eea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017eec:	693b      	ldr	r3, [r7, #16]
 8017eee:	f103 0208 	add.w	r2, r3, #8
 8017ef2:	7dfb      	ldrb	r3, [r7, #23]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d001      	beq.n	8017efc <etharp_input+0x98>
 8017ef8:	2301      	movs	r3, #1
 8017efa:	e000      	b.n	8017efe <etharp_input+0x9a>
 8017efc:	2302      	movs	r3, #2
 8017efe:	f107 010c 	add.w	r1, r7, #12
 8017f02:	6838      	ldr	r0, [r7, #0]
 8017f04:	f7ff fed8 	bl	8017cb8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017f08:	693b      	ldr	r3, [r7, #16]
 8017f0a:	88db      	ldrh	r3, [r3, #6]
 8017f0c:	b29b      	uxth	r3, r3
 8017f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017f12:	d003      	beq.n	8017f1c <etharp_input+0xb8>
 8017f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017f18:	d01e      	beq.n	8017f58 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017f1a:	e025      	b.n	8017f68 <etharp_input+0x104>
      if (for_us) {
 8017f1c:	7dfb      	ldrb	r3, [r7, #23]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d021      	beq.n	8017f66 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017f22:	683b      	ldr	r3, [r7, #0]
 8017f24:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017f28:	693b      	ldr	r3, [r7, #16]
 8017f2a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017f2e:	683b      	ldr	r3, [r7, #0]
 8017f30:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8017f34:	683b      	ldr	r3, [r7, #0]
 8017f36:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017f38:	693a      	ldr	r2, [r7, #16]
 8017f3a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017f3c:	2102      	movs	r1, #2
 8017f3e:	9103      	str	r1, [sp, #12]
 8017f40:	f107 010c 	add.w	r1, r7, #12
 8017f44:	9102      	str	r1, [sp, #8]
 8017f46:	9201      	str	r2, [sp, #4]
 8017f48:	9300      	str	r3, [sp, #0]
 8017f4a:	462b      	mov	r3, r5
 8017f4c:	4622      	mov	r2, r4
 8017f4e:	4601      	mov	r1, r0
 8017f50:	6838      	ldr	r0, [r7, #0]
 8017f52:	f000 faef 	bl	8018534 <etharp_raw>
      break;
 8017f56:	e006      	b.n	8017f66 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8017f58:	f107 030c 	add.w	r3, r7, #12
 8017f5c:	4619      	mov	r1, r3
 8017f5e:	6838      	ldr	r0, [r7, #0]
 8017f60:	f7fe f9fc 	bl	801635c <dhcp_arp_reply>
      break;
 8017f64:	e000      	b.n	8017f68 <etharp_input+0x104>
      break;
 8017f66:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017f68:	6878      	ldr	r0, [r7, #4]
 8017f6a:	f7f7 fb89 	bl	800f680 <pbuf_free>
}
 8017f6e:	3718      	adds	r7, #24
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bdb0      	pop	{r4, r5, r7, pc}
 8017f74:	0801e8bc 	.word	0x0801e8bc
 8017f78:	0801ea0c 	.word	0x0801ea0c
 8017f7c:	0801e934 	.word	0x0801e934

08017f80 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017f80:	b580      	push	{r7, lr}
 8017f82:	b086      	sub	sp, #24
 8017f84:	af02      	add	r7, sp, #8
 8017f86:	60f8      	str	r0, [r7, #12]
 8017f88:	60b9      	str	r1, [r7, #8]
 8017f8a:	4613      	mov	r3, r2
 8017f8c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017f8e:	79fa      	ldrb	r2, [r7, #7]
 8017f90:	4944      	ldr	r1, [pc, #272]	; (80180a4 <etharp_output_to_arp_index+0x124>)
 8017f92:	4613      	mov	r3, r2
 8017f94:	005b      	lsls	r3, r3, #1
 8017f96:	4413      	add	r3, r2
 8017f98:	00db      	lsls	r3, r3, #3
 8017f9a:	440b      	add	r3, r1
 8017f9c:	3314      	adds	r3, #20
 8017f9e:	781b      	ldrb	r3, [r3, #0]
 8017fa0:	2b01      	cmp	r3, #1
 8017fa2:	d806      	bhi.n	8017fb2 <etharp_output_to_arp_index+0x32>
 8017fa4:	4b40      	ldr	r3, [pc, #256]	; (80180a8 <etharp_output_to_arp_index+0x128>)
 8017fa6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017faa:	4940      	ldr	r1, [pc, #256]	; (80180ac <etharp_output_to_arp_index+0x12c>)
 8017fac:	4840      	ldr	r0, [pc, #256]	; (80180b0 <etharp_output_to_arp_index+0x130>)
 8017fae:	f002 fd5b 	bl	801aa68 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017fb2:	79fa      	ldrb	r2, [r7, #7]
 8017fb4:	493b      	ldr	r1, [pc, #236]	; (80180a4 <etharp_output_to_arp_index+0x124>)
 8017fb6:	4613      	mov	r3, r2
 8017fb8:	005b      	lsls	r3, r3, #1
 8017fba:	4413      	add	r3, r2
 8017fbc:	00db      	lsls	r3, r3, #3
 8017fbe:	440b      	add	r3, r1
 8017fc0:	3314      	adds	r3, #20
 8017fc2:	781b      	ldrb	r3, [r3, #0]
 8017fc4:	2b02      	cmp	r3, #2
 8017fc6:	d153      	bne.n	8018070 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017fc8:	79fa      	ldrb	r2, [r7, #7]
 8017fca:	4936      	ldr	r1, [pc, #216]	; (80180a4 <etharp_output_to_arp_index+0x124>)
 8017fcc:	4613      	mov	r3, r2
 8017fce:	005b      	lsls	r3, r3, #1
 8017fd0:	4413      	add	r3, r2
 8017fd2:	00db      	lsls	r3, r3, #3
 8017fd4:	440b      	add	r3, r1
 8017fd6:	3312      	adds	r3, #18
 8017fd8:	881b      	ldrh	r3, [r3, #0]
 8017fda:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017fde:	d919      	bls.n	8018014 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017fe0:	79fa      	ldrb	r2, [r7, #7]
 8017fe2:	4613      	mov	r3, r2
 8017fe4:	005b      	lsls	r3, r3, #1
 8017fe6:	4413      	add	r3, r2
 8017fe8:	00db      	lsls	r3, r3, #3
 8017fea:	4a2e      	ldr	r2, [pc, #184]	; (80180a4 <etharp_output_to_arp_index+0x124>)
 8017fec:	4413      	add	r3, r2
 8017fee:	3304      	adds	r3, #4
 8017ff0:	4619      	mov	r1, r3
 8017ff2:	68f8      	ldr	r0, [r7, #12]
 8017ff4:	f000 fb4c 	bl	8018690 <etharp_request>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d138      	bne.n	8018070 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017ffe:	79fa      	ldrb	r2, [r7, #7]
 8018000:	4928      	ldr	r1, [pc, #160]	; (80180a4 <etharp_output_to_arp_index+0x124>)
 8018002:	4613      	mov	r3, r2
 8018004:	005b      	lsls	r3, r3, #1
 8018006:	4413      	add	r3, r2
 8018008:	00db      	lsls	r3, r3, #3
 801800a:	440b      	add	r3, r1
 801800c:	3314      	adds	r3, #20
 801800e:	2203      	movs	r2, #3
 8018010:	701a      	strb	r2, [r3, #0]
 8018012:	e02d      	b.n	8018070 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018014:	79fa      	ldrb	r2, [r7, #7]
 8018016:	4923      	ldr	r1, [pc, #140]	; (80180a4 <etharp_output_to_arp_index+0x124>)
 8018018:	4613      	mov	r3, r2
 801801a:	005b      	lsls	r3, r3, #1
 801801c:	4413      	add	r3, r2
 801801e:	00db      	lsls	r3, r3, #3
 8018020:	440b      	add	r3, r1
 8018022:	3312      	adds	r3, #18
 8018024:	881b      	ldrh	r3, [r3, #0]
 8018026:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801802a:	d321      	bcc.n	8018070 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801802c:	79fa      	ldrb	r2, [r7, #7]
 801802e:	4613      	mov	r3, r2
 8018030:	005b      	lsls	r3, r3, #1
 8018032:	4413      	add	r3, r2
 8018034:	00db      	lsls	r3, r3, #3
 8018036:	4a1b      	ldr	r2, [pc, #108]	; (80180a4 <etharp_output_to_arp_index+0x124>)
 8018038:	4413      	add	r3, r2
 801803a:	1d19      	adds	r1, r3, #4
 801803c:	79fa      	ldrb	r2, [r7, #7]
 801803e:	4613      	mov	r3, r2
 8018040:	005b      	lsls	r3, r3, #1
 8018042:	4413      	add	r3, r2
 8018044:	00db      	lsls	r3, r3, #3
 8018046:	3308      	adds	r3, #8
 8018048:	4a16      	ldr	r2, [pc, #88]	; (80180a4 <etharp_output_to_arp_index+0x124>)
 801804a:	4413      	add	r3, r2
 801804c:	3304      	adds	r3, #4
 801804e:	461a      	mov	r2, r3
 8018050:	68f8      	ldr	r0, [r7, #12]
 8018052:	f000 fafb 	bl	801864c <etharp_request_dst>
 8018056:	4603      	mov	r3, r0
 8018058:	2b00      	cmp	r3, #0
 801805a:	d109      	bne.n	8018070 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801805c:	79fa      	ldrb	r2, [r7, #7]
 801805e:	4911      	ldr	r1, [pc, #68]	; (80180a4 <etharp_output_to_arp_index+0x124>)
 8018060:	4613      	mov	r3, r2
 8018062:	005b      	lsls	r3, r3, #1
 8018064:	4413      	add	r3, r2
 8018066:	00db      	lsls	r3, r3, #3
 8018068:	440b      	add	r3, r1
 801806a:	3314      	adds	r3, #20
 801806c:	2203      	movs	r2, #3
 801806e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8018076:	79fa      	ldrb	r2, [r7, #7]
 8018078:	4613      	mov	r3, r2
 801807a:	005b      	lsls	r3, r3, #1
 801807c:	4413      	add	r3, r2
 801807e:	00db      	lsls	r3, r3, #3
 8018080:	3308      	adds	r3, #8
 8018082:	4a08      	ldr	r2, [pc, #32]	; (80180a4 <etharp_output_to_arp_index+0x124>)
 8018084:	4413      	add	r3, r2
 8018086:	3304      	adds	r3, #4
 8018088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801808c:	9200      	str	r2, [sp, #0]
 801808e:	460a      	mov	r2, r1
 8018090:	68b9      	ldr	r1, [r7, #8]
 8018092:	68f8      	ldr	r0, [r7, #12]
 8018094:	f001 fe58 	bl	8019d48 <ethernet_output>
 8018098:	4603      	mov	r3, r0
}
 801809a:	4618      	mov	r0, r3
 801809c:	3710      	adds	r7, #16
 801809e:	46bd      	mov	sp, r7
 80180a0:	bd80      	pop	{r7, pc}
 80180a2:	bf00      	nop
 80180a4:	20008584 	.word	0x20008584
 80180a8:	0801e8bc 	.word	0x0801e8bc
 80180ac:	0801ea2c 	.word	0x0801ea2c
 80180b0:	0801e934 	.word	0x0801e934

080180b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b08a      	sub	sp, #40	; 0x28
 80180b8:	af02      	add	r7, sp, #8
 80180ba:	60f8      	str	r0, [r7, #12]
 80180bc:	60b9      	str	r1, [r7, #8]
 80180be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d106      	bne.n	80180d8 <etharp_output+0x24>
 80180ca:	4b73      	ldr	r3, [pc, #460]	; (8018298 <etharp_output+0x1e4>)
 80180cc:	f240 321e 	movw	r2, #798	; 0x31e
 80180d0:	4972      	ldr	r1, [pc, #456]	; (801829c <etharp_output+0x1e8>)
 80180d2:	4873      	ldr	r0, [pc, #460]	; (80182a0 <etharp_output+0x1ec>)
 80180d4:	f002 fcc8 	bl	801aa68 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80180d8:	68bb      	ldr	r3, [r7, #8]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d106      	bne.n	80180ec <etharp_output+0x38>
 80180de:	4b6e      	ldr	r3, [pc, #440]	; (8018298 <etharp_output+0x1e4>)
 80180e0:	f240 321f 	movw	r2, #799	; 0x31f
 80180e4:	496f      	ldr	r1, [pc, #444]	; (80182a4 <etharp_output+0x1f0>)
 80180e6:	486e      	ldr	r0, [pc, #440]	; (80182a0 <etharp_output+0x1ec>)
 80180e8:	f002 fcbe 	bl	801aa68 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d106      	bne.n	8018100 <etharp_output+0x4c>
 80180f2:	4b69      	ldr	r3, [pc, #420]	; (8018298 <etharp_output+0x1e4>)
 80180f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80180f8:	496b      	ldr	r1, [pc, #428]	; (80182a8 <etharp_output+0x1f4>)
 80180fa:	4869      	ldr	r0, [pc, #420]	; (80182a0 <etharp_output+0x1ec>)
 80180fc:	f002 fcb4 	bl	801aa68 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	68f9      	ldr	r1, [r7, #12]
 8018106:	4618      	mov	r0, r3
 8018108:	f000 ff16 	bl	8018f38 <ip4_addr_isbroadcast_u32>
 801810c:	4603      	mov	r3, r0
 801810e:	2b00      	cmp	r3, #0
 8018110:	d002      	beq.n	8018118 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018112:	4b66      	ldr	r3, [pc, #408]	; (80182ac <etharp_output+0x1f8>)
 8018114:	61fb      	str	r3, [r7, #28]
 8018116:	e0af      	b.n	8018278 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018120:	2be0      	cmp	r3, #224	; 0xe0
 8018122:	d118      	bne.n	8018156 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018124:	2301      	movs	r3, #1
 8018126:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018128:	2300      	movs	r3, #0
 801812a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801812c:	235e      	movs	r3, #94	; 0x5e
 801812e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	3301      	adds	r3, #1
 8018134:	781b      	ldrb	r3, [r3, #0]
 8018136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801813a:	b2db      	uxtb	r3, r3
 801813c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	3302      	adds	r3, #2
 8018142:	781b      	ldrb	r3, [r3, #0]
 8018144:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	3303      	adds	r3, #3
 801814a:	781b      	ldrb	r3, [r3, #0]
 801814c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801814e:	f107 0310 	add.w	r3, r7, #16
 8018152:	61fb      	str	r3, [r7, #28]
 8018154:	e090      	b.n	8018278 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	681a      	ldr	r2, [r3, #0]
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	3304      	adds	r3, #4
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	405a      	eors	r2, r3
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	3308      	adds	r3, #8
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	4013      	ands	r3, r2
 801816a:	2b00      	cmp	r3, #0
 801816c:	d012      	beq.n	8018194 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018174:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018178:	4293      	cmp	r3, r2
 801817a:	d00b      	beq.n	8018194 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	330c      	adds	r3, #12
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d003      	beq.n	801818e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	330c      	adds	r3, #12
 801818a:	61bb      	str	r3, [r7, #24]
 801818c:	e002      	b.n	8018194 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801818e:	f06f 0303 	mvn.w	r3, #3
 8018192:	e07d      	b.n	8018290 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018194:	4b46      	ldr	r3, [pc, #280]	; (80182b0 <etharp_output+0x1fc>)
 8018196:	781b      	ldrb	r3, [r3, #0]
 8018198:	4619      	mov	r1, r3
 801819a:	4a46      	ldr	r2, [pc, #280]	; (80182b4 <etharp_output+0x200>)
 801819c:	460b      	mov	r3, r1
 801819e:	005b      	lsls	r3, r3, #1
 80181a0:	440b      	add	r3, r1
 80181a2:	00db      	lsls	r3, r3, #3
 80181a4:	4413      	add	r3, r2
 80181a6:	3314      	adds	r3, #20
 80181a8:	781b      	ldrb	r3, [r3, #0]
 80181aa:	2b01      	cmp	r3, #1
 80181ac:	d925      	bls.n	80181fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80181ae:	4b40      	ldr	r3, [pc, #256]	; (80182b0 <etharp_output+0x1fc>)
 80181b0:	781b      	ldrb	r3, [r3, #0]
 80181b2:	4619      	mov	r1, r3
 80181b4:	4a3f      	ldr	r2, [pc, #252]	; (80182b4 <etharp_output+0x200>)
 80181b6:	460b      	mov	r3, r1
 80181b8:	005b      	lsls	r3, r3, #1
 80181ba:	440b      	add	r3, r1
 80181bc:	00db      	lsls	r3, r3, #3
 80181be:	4413      	add	r3, r2
 80181c0:	3308      	adds	r3, #8
 80181c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80181c4:	68fa      	ldr	r2, [r7, #12]
 80181c6:	429a      	cmp	r2, r3
 80181c8:	d117      	bne.n	80181fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80181ca:	69bb      	ldr	r3, [r7, #24]
 80181cc:	681a      	ldr	r2, [r3, #0]
 80181ce:	4b38      	ldr	r3, [pc, #224]	; (80182b0 <etharp_output+0x1fc>)
 80181d0:	781b      	ldrb	r3, [r3, #0]
 80181d2:	4618      	mov	r0, r3
 80181d4:	4937      	ldr	r1, [pc, #220]	; (80182b4 <etharp_output+0x200>)
 80181d6:	4603      	mov	r3, r0
 80181d8:	005b      	lsls	r3, r3, #1
 80181da:	4403      	add	r3, r0
 80181dc:	00db      	lsls	r3, r3, #3
 80181de:	440b      	add	r3, r1
 80181e0:	3304      	adds	r3, #4
 80181e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80181e4:	429a      	cmp	r2, r3
 80181e6:	d108      	bne.n	80181fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80181e8:	4b31      	ldr	r3, [pc, #196]	; (80182b0 <etharp_output+0x1fc>)
 80181ea:	781b      	ldrb	r3, [r3, #0]
 80181ec:	461a      	mov	r2, r3
 80181ee:	68b9      	ldr	r1, [r7, #8]
 80181f0:	68f8      	ldr	r0, [r7, #12]
 80181f2:	f7ff fec5 	bl	8017f80 <etharp_output_to_arp_index>
 80181f6:	4603      	mov	r3, r0
 80181f8:	e04a      	b.n	8018290 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80181fa:	2300      	movs	r3, #0
 80181fc:	75fb      	strb	r3, [r7, #23]
 80181fe:	e031      	b.n	8018264 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018200:	7dfa      	ldrb	r2, [r7, #23]
 8018202:	492c      	ldr	r1, [pc, #176]	; (80182b4 <etharp_output+0x200>)
 8018204:	4613      	mov	r3, r2
 8018206:	005b      	lsls	r3, r3, #1
 8018208:	4413      	add	r3, r2
 801820a:	00db      	lsls	r3, r3, #3
 801820c:	440b      	add	r3, r1
 801820e:	3314      	adds	r3, #20
 8018210:	781b      	ldrb	r3, [r3, #0]
 8018212:	2b01      	cmp	r3, #1
 8018214:	d923      	bls.n	801825e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018216:	7dfa      	ldrb	r2, [r7, #23]
 8018218:	4926      	ldr	r1, [pc, #152]	; (80182b4 <etharp_output+0x200>)
 801821a:	4613      	mov	r3, r2
 801821c:	005b      	lsls	r3, r3, #1
 801821e:	4413      	add	r3, r2
 8018220:	00db      	lsls	r3, r3, #3
 8018222:	440b      	add	r3, r1
 8018224:	3308      	adds	r3, #8
 8018226:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018228:	68fa      	ldr	r2, [r7, #12]
 801822a:	429a      	cmp	r2, r3
 801822c:	d117      	bne.n	801825e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801822e:	69bb      	ldr	r3, [r7, #24]
 8018230:	6819      	ldr	r1, [r3, #0]
 8018232:	7dfa      	ldrb	r2, [r7, #23]
 8018234:	481f      	ldr	r0, [pc, #124]	; (80182b4 <etharp_output+0x200>)
 8018236:	4613      	mov	r3, r2
 8018238:	005b      	lsls	r3, r3, #1
 801823a:	4413      	add	r3, r2
 801823c:	00db      	lsls	r3, r3, #3
 801823e:	4403      	add	r3, r0
 8018240:	3304      	adds	r3, #4
 8018242:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018244:	4299      	cmp	r1, r3
 8018246:	d10a      	bne.n	801825e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018248:	4a19      	ldr	r2, [pc, #100]	; (80182b0 <etharp_output+0x1fc>)
 801824a:	7dfb      	ldrb	r3, [r7, #23]
 801824c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801824e:	7dfb      	ldrb	r3, [r7, #23]
 8018250:	461a      	mov	r2, r3
 8018252:	68b9      	ldr	r1, [r7, #8]
 8018254:	68f8      	ldr	r0, [r7, #12]
 8018256:	f7ff fe93 	bl	8017f80 <etharp_output_to_arp_index>
 801825a:	4603      	mov	r3, r0
 801825c:	e018      	b.n	8018290 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801825e:	7dfb      	ldrb	r3, [r7, #23]
 8018260:	3301      	adds	r3, #1
 8018262:	75fb      	strb	r3, [r7, #23]
 8018264:	7dfb      	ldrb	r3, [r7, #23]
 8018266:	2b09      	cmp	r3, #9
 8018268:	d9ca      	bls.n	8018200 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801826a:	68ba      	ldr	r2, [r7, #8]
 801826c:	69b9      	ldr	r1, [r7, #24]
 801826e:	68f8      	ldr	r0, [r7, #12]
 8018270:	f000 f822 	bl	80182b8 <etharp_query>
 8018274:	4603      	mov	r3, r0
 8018276:	e00b      	b.n	8018290 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801827e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018282:	9300      	str	r3, [sp, #0]
 8018284:	69fb      	ldr	r3, [r7, #28]
 8018286:	68b9      	ldr	r1, [r7, #8]
 8018288:	68f8      	ldr	r0, [r7, #12]
 801828a:	f001 fd5d 	bl	8019d48 <ethernet_output>
 801828e:	4603      	mov	r3, r0
}
 8018290:	4618      	mov	r0, r3
 8018292:	3720      	adds	r7, #32
 8018294:	46bd      	mov	sp, r7
 8018296:	bd80      	pop	{r7, pc}
 8018298:	0801e8bc 	.word	0x0801e8bc
 801829c:	0801ea0c 	.word	0x0801ea0c
 80182a0:	0801e934 	.word	0x0801e934
 80182a4:	0801ea5c 	.word	0x0801ea5c
 80182a8:	0801e9fc 	.word	0x0801e9fc
 80182ac:	0801f0d4 	.word	0x0801f0d4
 80182b0:	20008674 	.word	0x20008674
 80182b4:	20008584 	.word	0x20008584

080182b8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b08c      	sub	sp, #48	; 0x30
 80182bc:	af02      	add	r7, sp, #8
 80182be:	60f8      	str	r0, [r7, #12]
 80182c0:	60b9      	str	r1, [r7, #8]
 80182c2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	332a      	adds	r3, #42	; 0x2a
 80182c8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80182ca:	23ff      	movs	r3, #255	; 0xff
 80182cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80182d0:	2300      	movs	r3, #0
 80182d2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80182d4:	68bb      	ldr	r3, [r7, #8]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	68f9      	ldr	r1, [r7, #12]
 80182da:	4618      	mov	r0, r3
 80182dc:	f000 fe2c 	bl	8018f38 <ip4_addr_isbroadcast_u32>
 80182e0:	4603      	mov	r3, r0
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d10c      	bne.n	8018300 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80182e6:	68bb      	ldr	r3, [r7, #8]
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80182ee:	2be0      	cmp	r3, #224	; 0xe0
 80182f0:	d006      	beq.n	8018300 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80182f2:	68bb      	ldr	r3, [r7, #8]
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d003      	beq.n	8018300 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80182f8:	68bb      	ldr	r3, [r7, #8]
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d102      	bne.n	8018306 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018300:	f06f 030f 	mvn.w	r3, #15
 8018304:	e101      	b.n	801850a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018306:	68fa      	ldr	r2, [r7, #12]
 8018308:	2101      	movs	r1, #1
 801830a:	68b8      	ldr	r0, [r7, #8]
 801830c:	f7ff fb5c 	bl	80179c8 <etharp_find_entry>
 8018310:	4603      	mov	r3, r0
 8018312:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018314:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018318:	2b00      	cmp	r3, #0
 801831a:	da02      	bge.n	8018322 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801831c:	8a7b      	ldrh	r3, [r7, #18]
 801831e:	b25b      	sxtb	r3, r3
 8018320:	e0f3      	b.n	801850a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018322:	8a7b      	ldrh	r3, [r7, #18]
 8018324:	2b7e      	cmp	r3, #126	; 0x7e
 8018326:	d906      	bls.n	8018336 <etharp_query+0x7e>
 8018328:	4b7a      	ldr	r3, [pc, #488]	; (8018514 <etharp_query+0x25c>)
 801832a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801832e:	497a      	ldr	r1, [pc, #488]	; (8018518 <etharp_query+0x260>)
 8018330:	487a      	ldr	r0, [pc, #488]	; (801851c <etharp_query+0x264>)
 8018332:	f002 fb99 	bl	801aa68 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018336:	8a7b      	ldrh	r3, [r7, #18]
 8018338:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801833a:	7c7a      	ldrb	r2, [r7, #17]
 801833c:	4978      	ldr	r1, [pc, #480]	; (8018520 <etharp_query+0x268>)
 801833e:	4613      	mov	r3, r2
 8018340:	005b      	lsls	r3, r3, #1
 8018342:	4413      	add	r3, r2
 8018344:	00db      	lsls	r3, r3, #3
 8018346:	440b      	add	r3, r1
 8018348:	3314      	adds	r3, #20
 801834a:	781b      	ldrb	r3, [r3, #0]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d115      	bne.n	801837c <etharp_query+0xc4>
    is_new_entry = 1;
 8018350:	2301      	movs	r3, #1
 8018352:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018354:	7c7a      	ldrb	r2, [r7, #17]
 8018356:	4972      	ldr	r1, [pc, #456]	; (8018520 <etharp_query+0x268>)
 8018358:	4613      	mov	r3, r2
 801835a:	005b      	lsls	r3, r3, #1
 801835c:	4413      	add	r3, r2
 801835e:	00db      	lsls	r3, r3, #3
 8018360:	440b      	add	r3, r1
 8018362:	3314      	adds	r3, #20
 8018364:	2201      	movs	r2, #1
 8018366:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018368:	7c7a      	ldrb	r2, [r7, #17]
 801836a:	496d      	ldr	r1, [pc, #436]	; (8018520 <etharp_query+0x268>)
 801836c:	4613      	mov	r3, r2
 801836e:	005b      	lsls	r3, r3, #1
 8018370:	4413      	add	r3, r2
 8018372:	00db      	lsls	r3, r3, #3
 8018374:	440b      	add	r3, r1
 8018376:	3308      	adds	r3, #8
 8018378:	68fa      	ldr	r2, [r7, #12]
 801837a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801837c:	7c7a      	ldrb	r2, [r7, #17]
 801837e:	4968      	ldr	r1, [pc, #416]	; (8018520 <etharp_query+0x268>)
 8018380:	4613      	mov	r3, r2
 8018382:	005b      	lsls	r3, r3, #1
 8018384:	4413      	add	r3, r2
 8018386:	00db      	lsls	r3, r3, #3
 8018388:	440b      	add	r3, r1
 801838a:	3314      	adds	r3, #20
 801838c:	781b      	ldrb	r3, [r3, #0]
 801838e:	2b01      	cmp	r3, #1
 8018390:	d011      	beq.n	80183b6 <etharp_query+0xfe>
 8018392:	7c7a      	ldrb	r2, [r7, #17]
 8018394:	4962      	ldr	r1, [pc, #392]	; (8018520 <etharp_query+0x268>)
 8018396:	4613      	mov	r3, r2
 8018398:	005b      	lsls	r3, r3, #1
 801839a:	4413      	add	r3, r2
 801839c:	00db      	lsls	r3, r3, #3
 801839e:	440b      	add	r3, r1
 80183a0:	3314      	adds	r3, #20
 80183a2:	781b      	ldrb	r3, [r3, #0]
 80183a4:	2b01      	cmp	r3, #1
 80183a6:	d806      	bhi.n	80183b6 <etharp_query+0xfe>
 80183a8:	4b5a      	ldr	r3, [pc, #360]	; (8018514 <etharp_query+0x25c>)
 80183aa:	f240 32cd 	movw	r2, #973	; 0x3cd
 80183ae:	495d      	ldr	r1, [pc, #372]	; (8018524 <etharp_query+0x26c>)
 80183b0:	485a      	ldr	r0, [pc, #360]	; (801851c <etharp_query+0x264>)
 80183b2:	f002 fb59 	bl	801aa68 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80183b6:	6a3b      	ldr	r3, [r7, #32]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d102      	bne.n	80183c2 <etharp_query+0x10a>
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d10c      	bne.n	80183dc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80183c2:	68b9      	ldr	r1, [r7, #8]
 80183c4:	68f8      	ldr	r0, [r7, #12]
 80183c6:	f000 f963 	bl	8018690 <etharp_request>
 80183ca:	4603      	mov	r3, r0
 80183cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d102      	bne.n	80183dc <etharp_query+0x124>
      return result;
 80183d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80183da:	e096      	b.n	801850a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d106      	bne.n	80183f0 <etharp_query+0x138>
 80183e2:	4b4c      	ldr	r3, [pc, #304]	; (8018514 <etharp_query+0x25c>)
 80183e4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80183e8:	494f      	ldr	r1, [pc, #316]	; (8018528 <etharp_query+0x270>)
 80183ea:	484c      	ldr	r0, [pc, #304]	; (801851c <etharp_query+0x264>)
 80183ec:	f002 fb3c 	bl	801aa68 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80183f0:	7c7a      	ldrb	r2, [r7, #17]
 80183f2:	494b      	ldr	r1, [pc, #300]	; (8018520 <etharp_query+0x268>)
 80183f4:	4613      	mov	r3, r2
 80183f6:	005b      	lsls	r3, r3, #1
 80183f8:	4413      	add	r3, r2
 80183fa:	00db      	lsls	r3, r3, #3
 80183fc:	440b      	add	r3, r1
 80183fe:	3314      	adds	r3, #20
 8018400:	781b      	ldrb	r3, [r3, #0]
 8018402:	2b01      	cmp	r3, #1
 8018404:	d917      	bls.n	8018436 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018406:	4a49      	ldr	r2, [pc, #292]	; (801852c <etharp_query+0x274>)
 8018408:	7c7b      	ldrb	r3, [r7, #17]
 801840a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801840c:	7c7a      	ldrb	r2, [r7, #17]
 801840e:	4613      	mov	r3, r2
 8018410:	005b      	lsls	r3, r3, #1
 8018412:	4413      	add	r3, r2
 8018414:	00db      	lsls	r3, r3, #3
 8018416:	3308      	adds	r3, #8
 8018418:	4a41      	ldr	r2, [pc, #260]	; (8018520 <etharp_query+0x268>)
 801841a:	4413      	add	r3, r2
 801841c:	3304      	adds	r3, #4
 801841e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018422:	9200      	str	r2, [sp, #0]
 8018424:	697a      	ldr	r2, [r7, #20]
 8018426:	6879      	ldr	r1, [r7, #4]
 8018428:	68f8      	ldr	r0, [r7, #12]
 801842a:	f001 fc8d 	bl	8019d48 <ethernet_output>
 801842e:	4603      	mov	r3, r0
 8018430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018434:	e067      	b.n	8018506 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018436:	7c7a      	ldrb	r2, [r7, #17]
 8018438:	4939      	ldr	r1, [pc, #228]	; (8018520 <etharp_query+0x268>)
 801843a:	4613      	mov	r3, r2
 801843c:	005b      	lsls	r3, r3, #1
 801843e:	4413      	add	r3, r2
 8018440:	00db      	lsls	r3, r3, #3
 8018442:	440b      	add	r3, r1
 8018444:	3314      	adds	r3, #20
 8018446:	781b      	ldrb	r3, [r3, #0]
 8018448:	2b01      	cmp	r3, #1
 801844a:	d15c      	bne.n	8018506 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801844c:	2300      	movs	r3, #0
 801844e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018454:	e01c      	b.n	8018490 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018456:	69fb      	ldr	r3, [r7, #28]
 8018458:	895a      	ldrh	r2, [r3, #10]
 801845a:	69fb      	ldr	r3, [r7, #28]
 801845c:	891b      	ldrh	r3, [r3, #8]
 801845e:	429a      	cmp	r2, r3
 8018460:	d10a      	bne.n	8018478 <etharp_query+0x1c0>
 8018462:	69fb      	ldr	r3, [r7, #28]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d006      	beq.n	8018478 <etharp_query+0x1c0>
 801846a:	4b2a      	ldr	r3, [pc, #168]	; (8018514 <etharp_query+0x25c>)
 801846c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018470:	492f      	ldr	r1, [pc, #188]	; (8018530 <etharp_query+0x278>)
 8018472:	482a      	ldr	r0, [pc, #168]	; (801851c <etharp_query+0x264>)
 8018474:	f002 faf8 	bl	801aa68 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018478:	69fb      	ldr	r3, [r7, #28]
 801847a:	7b1b      	ldrb	r3, [r3, #12]
 801847c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018480:	2b00      	cmp	r3, #0
 8018482:	d002      	beq.n	801848a <etharp_query+0x1d2>
        copy_needed = 1;
 8018484:	2301      	movs	r3, #1
 8018486:	61bb      	str	r3, [r7, #24]
        break;
 8018488:	e005      	b.n	8018496 <etharp_query+0x1de>
      }
      p = p->next;
 801848a:	69fb      	ldr	r3, [r7, #28]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018490:	69fb      	ldr	r3, [r7, #28]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d1df      	bne.n	8018456 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018496:	69bb      	ldr	r3, [r7, #24]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d007      	beq.n	80184ac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801849c:	687a      	ldr	r2, [r7, #4]
 801849e:	f44f 7120 	mov.w	r1, #640	; 0x280
 80184a2:	200e      	movs	r0, #14
 80184a4:	f7f7 fb64 	bl	800fb70 <pbuf_clone>
 80184a8:	61f8      	str	r0, [r7, #28]
 80184aa:	e004      	b.n	80184b6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80184b0:	69f8      	ldr	r0, [r7, #28]
 80184b2:	f7f7 f98b 	bl	800f7cc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80184b6:	69fb      	ldr	r3, [r7, #28]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d021      	beq.n	8018500 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80184bc:	7c7a      	ldrb	r2, [r7, #17]
 80184be:	4918      	ldr	r1, [pc, #96]	; (8018520 <etharp_query+0x268>)
 80184c0:	4613      	mov	r3, r2
 80184c2:	005b      	lsls	r3, r3, #1
 80184c4:	4413      	add	r3, r2
 80184c6:	00db      	lsls	r3, r3, #3
 80184c8:	440b      	add	r3, r1
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d00a      	beq.n	80184e6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80184d0:	7c7a      	ldrb	r2, [r7, #17]
 80184d2:	4913      	ldr	r1, [pc, #76]	; (8018520 <etharp_query+0x268>)
 80184d4:	4613      	mov	r3, r2
 80184d6:	005b      	lsls	r3, r3, #1
 80184d8:	4413      	add	r3, r2
 80184da:	00db      	lsls	r3, r3, #3
 80184dc:	440b      	add	r3, r1
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	4618      	mov	r0, r3
 80184e2:	f7f7 f8cd 	bl	800f680 <pbuf_free>
      }
      arp_table[i].q = p;
 80184e6:	7c7a      	ldrb	r2, [r7, #17]
 80184e8:	490d      	ldr	r1, [pc, #52]	; (8018520 <etharp_query+0x268>)
 80184ea:	4613      	mov	r3, r2
 80184ec:	005b      	lsls	r3, r3, #1
 80184ee:	4413      	add	r3, r2
 80184f0:	00db      	lsls	r3, r3, #3
 80184f2:	440b      	add	r3, r1
 80184f4:	69fa      	ldr	r2, [r7, #28]
 80184f6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80184f8:	2300      	movs	r3, #0
 80184fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80184fe:	e002      	b.n	8018506 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018500:	23ff      	movs	r3, #255	; 0xff
 8018502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018506:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801850a:	4618      	mov	r0, r3
 801850c:	3728      	adds	r7, #40	; 0x28
 801850e:	46bd      	mov	sp, r7
 8018510:	bd80      	pop	{r7, pc}
 8018512:	bf00      	nop
 8018514:	0801e8bc 	.word	0x0801e8bc
 8018518:	0801ea68 	.word	0x0801ea68
 801851c:	0801e934 	.word	0x0801e934
 8018520:	20008584 	.word	0x20008584
 8018524:	0801ea78 	.word	0x0801ea78
 8018528:	0801ea5c 	.word	0x0801ea5c
 801852c:	20008674 	.word	0x20008674
 8018530:	0801eaa0 	.word	0x0801eaa0

08018534 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b08a      	sub	sp, #40	; 0x28
 8018538:	af02      	add	r7, sp, #8
 801853a:	60f8      	str	r0, [r7, #12]
 801853c:	60b9      	str	r1, [r7, #8]
 801853e:	607a      	str	r2, [r7, #4]
 8018540:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018542:	2300      	movs	r3, #0
 8018544:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d106      	bne.n	801855a <etharp_raw+0x26>
 801854c:	4b3a      	ldr	r3, [pc, #232]	; (8018638 <etharp_raw+0x104>)
 801854e:	f240 4257 	movw	r2, #1111	; 0x457
 8018552:	493a      	ldr	r1, [pc, #232]	; (801863c <etharp_raw+0x108>)
 8018554:	483a      	ldr	r0, [pc, #232]	; (8018640 <etharp_raw+0x10c>)
 8018556:	f002 fa87 	bl	801aa68 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801855a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801855e:	211c      	movs	r1, #28
 8018560:	200e      	movs	r0, #14
 8018562:	f7f6 fda9 	bl	800f0b8 <pbuf_alloc>
 8018566:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018568:	69bb      	ldr	r3, [r7, #24]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d102      	bne.n	8018574 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801856e:	f04f 33ff 	mov.w	r3, #4294967295
 8018572:	e05d      	b.n	8018630 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018574:	69bb      	ldr	r3, [r7, #24]
 8018576:	895b      	ldrh	r3, [r3, #10]
 8018578:	2b1b      	cmp	r3, #27
 801857a:	d806      	bhi.n	801858a <etharp_raw+0x56>
 801857c:	4b2e      	ldr	r3, [pc, #184]	; (8018638 <etharp_raw+0x104>)
 801857e:	f240 4262 	movw	r2, #1122	; 0x462
 8018582:	4930      	ldr	r1, [pc, #192]	; (8018644 <etharp_raw+0x110>)
 8018584:	482e      	ldr	r0, [pc, #184]	; (8018640 <etharp_raw+0x10c>)
 8018586:	f002 fa6f 	bl	801aa68 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801858a:	69bb      	ldr	r3, [r7, #24]
 801858c:	685b      	ldr	r3, [r3, #4]
 801858e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018590:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018592:	4618      	mov	r0, r3
 8018594:	f7f5 fcbc 	bl	800df10 <lwip_htons>
 8018598:	4603      	mov	r3, r0
 801859a:	461a      	mov	r2, r3
 801859c:	697b      	ldr	r3, [r7, #20]
 801859e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80185a6:	2b06      	cmp	r3, #6
 80185a8:	d006      	beq.n	80185b8 <etharp_raw+0x84>
 80185aa:	4b23      	ldr	r3, [pc, #140]	; (8018638 <etharp_raw+0x104>)
 80185ac:	f240 4269 	movw	r2, #1129	; 0x469
 80185b0:	4925      	ldr	r1, [pc, #148]	; (8018648 <etharp_raw+0x114>)
 80185b2:	4823      	ldr	r0, [pc, #140]	; (8018640 <etharp_raw+0x10c>)
 80185b4:	f002 fa58 	bl	801aa68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80185b8:	697b      	ldr	r3, [r7, #20]
 80185ba:	3308      	adds	r3, #8
 80185bc:	2206      	movs	r2, #6
 80185be:	6839      	ldr	r1, [r7, #0]
 80185c0:	4618      	mov	r0, r3
 80185c2:	f002 f991 	bl	801a8e8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80185c6:	697b      	ldr	r3, [r7, #20]
 80185c8:	3312      	adds	r3, #18
 80185ca:	2206      	movs	r2, #6
 80185cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80185ce:	4618      	mov	r0, r3
 80185d0:	f002 f98a 	bl	801a8e8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80185d4:	697b      	ldr	r3, [r7, #20]
 80185d6:	330e      	adds	r3, #14
 80185d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185da:	6812      	ldr	r2, [r2, #0]
 80185dc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80185de:	697b      	ldr	r3, [r7, #20]
 80185e0:	3318      	adds	r3, #24
 80185e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80185e4:	6812      	ldr	r2, [r2, #0]
 80185e6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80185e8:	697b      	ldr	r3, [r7, #20]
 80185ea:	2200      	movs	r2, #0
 80185ec:	701a      	strb	r2, [r3, #0]
 80185ee:	2200      	movs	r2, #0
 80185f0:	f042 0201 	orr.w	r2, r2, #1
 80185f4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80185f6:	697b      	ldr	r3, [r7, #20]
 80185f8:	2200      	movs	r2, #0
 80185fa:	f042 0208 	orr.w	r2, r2, #8
 80185fe:	709a      	strb	r2, [r3, #2]
 8018600:	2200      	movs	r2, #0
 8018602:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018604:	697b      	ldr	r3, [r7, #20]
 8018606:	2206      	movs	r2, #6
 8018608:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801860a:	697b      	ldr	r3, [r7, #20]
 801860c:	2204      	movs	r2, #4
 801860e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018610:	f640 0306 	movw	r3, #2054	; 0x806
 8018614:	9300      	str	r3, [sp, #0]
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	68ba      	ldr	r2, [r7, #8]
 801861a:	69b9      	ldr	r1, [r7, #24]
 801861c:	68f8      	ldr	r0, [r7, #12]
 801861e:	f001 fb93 	bl	8019d48 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018622:	69b8      	ldr	r0, [r7, #24]
 8018624:	f7f7 f82c 	bl	800f680 <pbuf_free>
  p = NULL;
 8018628:	2300      	movs	r3, #0
 801862a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801862c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018630:	4618      	mov	r0, r3
 8018632:	3720      	adds	r7, #32
 8018634:	46bd      	mov	sp, r7
 8018636:	bd80      	pop	{r7, pc}
 8018638:	0801e8bc 	.word	0x0801e8bc
 801863c:	0801ea0c 	.word	0x0801ea0c
 8018640:	0801e934 	.word	0x0801e934
 8018644:	0801eabc 	.word	0x0801eabc
 8018648:	0801eaf0 	.word	0x0801eaf0

0801864c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b088      	sub	sp, #32
 8018650:	af04      	add	r7, sp, #16
 8018652:	60f8      	str	r0, [r7, #12]
 8018654:	60b9      	str	r1, [r7, #8]
 8018656:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018668:	2201      	movs	r2, #1
 801866a:	9203      	str	r2, [sp, #12]
 801866c:	68ba      	ldr	r2, [r7, #8]
 801866e:	9202      	str	r2, [sp, #8]
 8018670:	4a06      	ldr	r2, [pc, #24]	; (801868c <etharp_request_dst+0x40>)
 8018672:	9201      	str	r2, [sp, #4]
 8018674:	9300      	str	r3, [sp, #0]
 8018676:	4603      	mov	r3, r0
 8018678:	687a      	ldr	r2, [r7, #4]
 801867a:	68f8      	ldr	r0, [r7, #12]
 801867c:	f7ff ff5a 	bl	8018534 <etharp_raw>
 8018680:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018682:	4618      	mov	r0, r3
 8018684:	3710      	adds	r7, #16
 8018686:	46bd      	mov	sp, r7
 8018688:	bd80      	pop	{r7, pc}
 801868a:	bf00      	nop
 801868c:	0801f0dc 	.word	0x0801f0dc

08018690 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018690:	b580      	push	{r7, lr}
 8018692:	b082      	sub	sp, #8
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
 8018698:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801869a:	4a05      	ldr	r2, [pc, #20]	; (80186b0 <etharp_request+0x20>)
 801869c:	6839      	ldr	r1, [r7, #0]
 801869e:	6878      	ldr	r0, [r7, #4]
 80186a0:	f7ff ffd4 	bl	801864c <etharp_request_dst>
 80186a4:	4603      	mov	r3, r0
}
 80186a6:	4618      	mov	r0, r3
 80186a8:	3708      	adds	r7, #8
 80186aa:	46bd      	mov	sp, r7
 80186ac:	bd80      	pop	{r7, pc}
 80186ae:	bf00      	nop
 80186b0:	0801f0d4 	.word	0x0801f0d4

080186b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b08e      	sub	sp, #56	; 0x38
 80186b8:	af04      	add	r7, sp, #16
 80186ba:	6078      	str	r0, [r7, #4]
 80186bc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80186be:	4b79      	ldr	r3, [pc, #484]	; (80188a4 <icmp_input+0x1f0>)
 80186c0:	689b      	ldr	r3, [r3, #8]
 80186c2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80186c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186c6:	781b      	ldrb	r3, [r3, #0]
 80186c8:	f003 030f 	and.w	r3, r3, #15
 80186cc:	b2db      	uxtb	r3, r3
 80186ce:	009b      	lsls	r3, r3, #2
 80186d0:	b2db      	uxtb	r3, r3
 80186d2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80186d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186d6:	2b13      	cmp	r3, #19
 80186d8:	f240 80cd 	bls.w	8018876 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	895b      	ldrh	r3, [r3, #10]
 80186e0:	2b03      	cmp	r3, #3
 80186e2:	f240 80ca 	bls.w	801887a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	685b      	ldr	r3, [r3, #4]
 80186ea:	781b      	ldrb	r3, [r3, #0]
 80186ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80186f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	f000 80b7 	beq.w	8018868 <icmp_input+0x1b4>
 80186fa:	2b08      	cmp	r3, #8
 80186fc:	f040 80b7 	bne.w	801886e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018700:	4b69      	ldr	r3, [pc, #420]	; (80188a8 <icmp_input+0x1f4>)
 8018702:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018704:	4b67      	ldr	r3, [pc, #412]	; (80188a4 <icmp_input+0x1f0>)
 8018706:	695b      	ldr	r3, [r3, #20]
 8018708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801870c:	2be0      	cmp	r3, #224	; 0xe0
 801870e:	f000 80bb 	beq.w	8018888 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018712:	4b64      	ldr	r3, [pc, #400]	; (80188a4 <icmp_input+0x1f0>)
 8018714:	695b      	ldr	r3, [r3, #20]
 8018716:	4a63      	ldr	r2, [pc, #396]	; (80188a4 <icmp_input+0x1f0>)
 8018718:	6812      	ldr	r2, [r2, #0]
 801871a:	4611      	mov	r1, r2
 801871c:	4618      	mov	r0, r3
 801871e:	f000 fc0b 	bl	8018f38 <ip4_addr_isbroadcast_u32>
 8018722:	4603      	mov	r3, r0
 8018724:	2b00      	cmp	r3, #0
 8018726:	f040 80b1 	bne.w	801888c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	891b      	ldrh	r3, [r3, #8]
 801872e:	2b07      	cmp	r3, #7
 8018730:	f240 80a5 	bls.w	801887e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018734:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018736:	330e      	adds	r3, #14
 8018738:	4619      	mov	r1, r3
 801873a:	6878      	ldr	r0, [r7, #4]
 801873c:	f7f6 ff0a 	bl	800f554 <pbuf_add_header>
 8018740:	4603      	mov	r3, r0
 8018742:	2b00      	cmp	r3, #0
 8018744:	d04b      	beq.n	80187de <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	891a      	ldrh	r2, [r3, #8]
 801874a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801874c:	4413      	add	r3, r2
 801874e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	891b      	ldrh	r3, [r3, #8]
 8018754:	8b7a      	ldrh	r2, [r7, #26]
 8018756:	429a      	cmp	r2, r3
 8018758:	f0c0 809a 	bcc.w	8018890 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801875c:	8b7b      	ldrh	r3, [r7, #26]
 801875e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018762:	4619      	mov	r1, r3
 8018764:	200e      	movs	r0, #14
 8018766:	f7f6 fca7 	bl	800f0b8 <pbuf_alloc>
 801876a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801876c:	697b      	ldr	r3, [r7, #20]
 801876e:	2b00      	cmp	r3, #0
 8018770:	f000 8090 	beq.w	8018894 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018774:	697b      	ldr	r3, [r7, #20]
 8018776:	895b      	ldrh	r3, [r3, #10]
 8018778:	461a      	mov	r2, r3
 801877a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801877c:	3308      	adds	r3, #8
 801877e:	429a      	cmp	r2, r3
 8018780:	d203      	bcs.n	801878a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018782:	6978      	ldr	r0, [r7, #20]
 8018784:	f7f6 ff7c 	bl	800f680 <pbuf_free>
          goto icmperr;
 8018788:	e085      	b.n	8018896 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801878a:	697b      	ldr	r3, [r7, #20]
 801878c:	685b      	ldr	r3, [r3, #4]
 801878e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018792:	4618      	mov	r0, r3
 8018794:	f002 f8a8 	bl	801a8e8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801879a:	4619      	mov	r1, r3
 801879c:	6978      	ldr	r0, [r7, #20]
 801879e:	f7f6 fee9 	bl	800f574 <pbuf_remove_header>
 80187a2:	4603      	mov	r3, r0
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d009      	beq.n	80187bc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80187a8:	4b40      	ldr	r3, [pc, #256]	; (80188ac <icmp_input+0x1f8>)
 80187aa:	22b6      	movs	r2, #182	; 0xb6
 80187ac:	4940      	ldr	r1, [pc, #256]	; (80188b0 <icmp_input+0x1fc>)
 80187ae:	4841      	ldr	r0, [pc, #260]	; (80188b4 <icmp_input+0x200>)
 80187b0:	f002 f95a 	bl	801aa68 <iprintf>
          pbuf_free(r);
 80187b4:	6978      	ldr	r0, [r7, #20]
 80187b6:	f7f6 ff63 	bl	800f680 <pbuf_free>
          goto icmperr;
 80187ba:	e06c      	b.n	8018896 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80187bc:	6879      	ldr	r1, [r7, #4]
 80187be:	6978      	ldr	r0, [r7, #20]
 80187c0:	f7f7 f892 	bl	800f8e8 <pbuf_copy>
 80187c4:	4603      	mov	r3, r0
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d003      	beq.n	80187d2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80187ca:	6978      	ldr	r0, [r7, #20]
 80187cc:	f7f6 ff58 	bl	800f680 <pbuf_free>
          goto icmperr;
 80187d0:	e061      	b.n	8018896 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80187d2:	6878      	ldr	r0, [r7, #4]
 80187d4:	f7f6 ff54 	bl	800f680 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80187d8:	697b      	ldr	r3, [r7, #20]
 80187da:	607b      	str	r3, [r7, #4]
 80187dc:	e00f      	b.n	80187fe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80187de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80187e0:	330e      	adds	r3, #14
 80187e2:	4619      	mov	r1, r3
 80187e4:	6878      	ldr	r0, [r7, #4]
 80187e6:	f7f6 fec5 	bl	800f574 <pbuf_remove_header>
 80187ea:	4603      	mov	r3, r0
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d006      	beq.n	80187fe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80187f0:	4b2e      	ldr	r3, [pc, #184]	; (80188ac <icmp_input+0x1f8>)
 80187f2:	22c7      	movs	r2, #199	; 0xc7
 80187f4:	4930      	ldr	r1, [pc, #192]	; (80188b8 <icmp_input+0x204>)
 80187f6:	482f      	ldr	r0, [pc, #188]	; (80188b4 <icmp_input+0x200>)
 80187f8:	f002 f936 	bl	801aa68 <iprintf>
          goto icmperr;
 80187fc:	e04b      	b.n	8018896 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	685b      	ldr	r3, [r3, #4]
 8018802:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018804:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018806:	4619      	mov	r1, r3
 8018808:	6878      	ldr	r0, [r7, #4]
 801880a:	f7f6 fea3 	bl	800f554 <pbuf_add_header>
 801880e:	4603      	mov	r3, r0
 8018810:	2b00      	cmp	r3, #0
 8018812:	d12b      	bne.n	801886c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	685b      	ldr	r3, [r3, #4]
 8018818:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801881a:	69fb      	ldr	r3, [r7, #28]
 801881c:	681a      	ldr	r2, [r3, #0]
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018822:	4b20      	ldr	r3, [pc, #128]	; (80188a4 <icmp_input+0x1f0>)
 8018824:	691a      	ldr	r2, [r3, #16]
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801882a:	693b      	ldr	r3, [r7, #16]
 801882c:	2200      	movs	r2, #0
 801882e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8018830:	693b      	ldr	r3, [r7, #16]
 8018832:	2200      	movs	r2, #0
 8018834:	709a      	strb	r2, [r3, #2]
 8018836:	2200      	movs	r2, #0
 8018838:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	22ff      	movs	r2, #255	; 0xff
 801883e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	2200      	movs	r2, #0
 8018844:	729a      	strb	r2, [r3, #10]
 8018846:	2200      	movs	r2, #0
 8018848:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801884a:	683b      	ldr	r3, [r7, #0]
 801884c:	9302      	str	r3, [sp, #8]
 801884e:	2301      	movs	r3, #1
 8018850:	9301      	str	r3, [sp, #4]
 8018852:	2300      	movs	r3, #0
 8018854:	9300      	str	r3, [sp, #0]
 8018856:	23ff      	movs	r3, #255	; 0xff
 8018858:	2200      	movs	r2, #0
 801885a:	69f9      	ldr	r1, [r7, #28]
 801885c:	6878      	ldr	r0, [r7, #4]
 801885e:	f000 fa93 	bl	8018d88 <ip4_output_if>
 8018862:	4603      	mov	r3, r0
 8018864:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018866:	e001      	b.n	801886c <icmp_input+0x1b8>
      break;
 8018868:	bf00      	nop
 801886a:	e000      	b.n	801886e <icmp_input+0x1ba>
      break;
 801886c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801886e:	6878      	ldr	r0, [r7, #4]
 8018870:	f7f6 ff06 	bl	800f680 <pbuf_free>
  return;
 8018874:	e013      	b.n	801889e <icmp_input+0x1ea>
    goto lenerr;
 8018876:	bf00      	nop
 8018878:	e002      	b.n	8018880 <icmp_input+0x1cc>
    goto lenerr;
 801887a:	bf00      	nop
 801887c:	e000      	b.n	8018880 <icmp_input+0x1cc>
        goto lenerr;
 801887e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018880:	6878      	ldr	r0, [r7, #4]
 8018882:	f7f6 fefd 	bl	800f680 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018886:	e00a      	b.n	801889e <icmp_input+0x1ea>
        goto icmperr;
 8018888:	bf00      	nop
 801888a:	e004      	b.n	8018896 <icmp_input+0x1e2>
        goto icmperr;
 801888c:	bf00      	nop
 801888e:	e002      	b.n	8018896 <icmp_input+0x1e2>
          goto icmperr;
 8018890:	bf00      	nop
 8018892:	e000      	b.n	8018896 <icmp_input+0x1e2>
          goto icmperr;
 8018894:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018896:	6878      	ldr	r0, [r7, #4]
 8018898:	f7f6 fef2 	bl	800f680 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801889c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801889e:	3728      	adds	r7, #40	; 0x28
 80188a0:	46bd      	mov	sp, r7
 80188a2:	bd80      	pop	{r7, pc}
 80188a4:	2000bcc4 	.word	0x2000bcc4
 80188a8:	2000bcd8 	.word	0x2000bcd8
 80188ac:	0801eb34 	.word	0x0801eb34
 80188b0:	0801eb6c 	.word	0x0801eb6c
 80188b4:	0801eba4 	.word	0x0801eba4
 80188b8:	0801ebcc 	.word	0x0801ebcc

080188bc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b082      	sub	sp, #8
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
 80188c4:	460b      	mov	r3, r1
 80188c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80188c8:	78fb      	ldrb	r3, [r7, #3]
 80188ca:	461a      	mov	r2, r3
 80188cc:	2103      	movs	r1, #3
 80188ce:	6878      	ldr	r0, [r7, #4]
 80188d0:	f000 f814 	bl	80188fc <icmp_send_response>
}
 80188d4:	bf00      	nop
 80188d6:	3708      	adds	r7, #8
 80188d8:	46bd      	mov	sp, r7
 80188da:	bd80      	pop	{r7, pc}

080188dc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80188dc:	b580      	push	{r7, lr}
 80188de:	b082      	sub	sp, #8
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	6078      	str	r0, [r7, #4]
 80188e4:	460b      	mov	r3, r1
 80188e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80188e8:	78fb      	ldrb	r3, [r7, #3]
 80188ea:	461a      	mov	r2, r3
 80188ec:	210b      	movs	r1, #11
 80188ee:	6878      	ldr	r0, [r7, #4]
 80188f0:	f000 f804 	bl	80188fc <icmp_send_response>
}
 80188f4:	bf00      	nop
 80188f6:	3708      	adds	r7, #8
 80188f8:	46bd      	mov	sp, r7
 80188fa:	bd80      	pop	{r7, pc}

080188fc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b08c      	sub	sp, #48	; 0x30
 8018900:	af04      	add	r7, sp, #16
 8018902:	6078      	str	r0, [r7, #4]
 8018904:	460b      	mov	r3, r1
 8018906:	70fb      	strb	r3, [r7, #3]
 8018908:	4613      	mov	r3, r2
 801890a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801890c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018910:	2124      	movs	r1, #36	; 0x24
 8018912:	2022      	movs	r0, #34	; 0x22
 8018914:	f7f6 fbd0 	bl	800f0b8 <pbuf_alloc>
 8018918:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801891a:	69fb      	ldr	r3, [r7, #28]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d04c      	beq.n	80189ba <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018920:	69fb      	ldr	r3, [r7, #28]
 8018922:	895b      	ldrh	r3, [r3, #10]
 8018924:	2b23      	cmp	r3, #35	; 0x23
 8018926:	d806      	bhi.n	8018936 <icmp_send_response+0x3a>
 8018928:	4b26      	ldr	r3, [pc, #152]	; (80189c4 <icmp_send_response+0xc8>)
 801892a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801892e:	4926      	ldr	r1, [pc, #152]	; (80189c8 <icmp_send_response+0xcc>)
 8018930:	4826      	ldr	r0, [pc, #152]	; (80189cc <icmp_send_response+0xd0>)
 8018932:	f002 f899 	bl	801aa68 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	685b      	ldr	r3, [r3, #4]
 801893a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801893c:	69fb      	ldr	r3, [r7, #28]
 801893e:	685b      	ldr	r3, [r3, #4]
 8018940:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018942:	697b      	ldr	r3, [r7, #20]
 8018944:	78fa      	ldrb	r2, [r7, #3]
 8018946:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018948:	697b      	ldr	r3, [r7, #20]
 801894a:	78ba      	ldrb	r2, [r7, #2]
 801894c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801894e:	697b      	ldr	r3, [r7, #20]
 8018950:	2200      	movs	r2, #0
 8018952:	711a      	strb	r2, [r3, #4]
 8018954:	2200      	movs	r2, #0
 8018956:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018958:	697b      	ldr	r3, [r7, #20]
 801895a:	2200      	movs	r2, #0
 801895c:	719a      	strb	r2, [r3, #6]
 801895e:	2200      	movs	r2, #0
 8018960:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018962:	69fb      	ldr	r3, [r7, #28]
 8018964:	685b      	ldr	r3, [r3, #4]
 8018966:	f103 0008 	add.w	r0, r3, #8
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	685b      	ldr	r3, [r3, #4]
 801896e:	221c      	movs	r2, #28
 8018970:	4619      	mov	r1, r3
 8018972:	f001 ffb9 	bl	801a8e8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018976:	69bb      	ldr	r3, [r7, #24]
 8018978:	68db      	ldr	r3, [r3, #12]
 801897a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801897c:	f107 030c 	add.w	r3, r7, #12
 8018980:	4618      	mov	r0, r3
 8018982:	f000 f825 	bl	80189d0 <ip4_route>
 8018986:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018988:	693b      	ldr	r3, [r7, #16]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d011      	beq.n	80189b2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801898e:	697b      	ldr	r3, [r7, #20]
 8018990:	2200      	movs	r2, #0
 8018992:	709a      	strb	r2, [r3, #2]
 8018994:	2200      	movs	r2, #0
 8018996:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018998:	f107 020c 	add.w	r2, r7, #12
 801899c:	693b      	ldr	r3, [r7, #16]
 801899e:	9302      	str	r3, [sp, #8]
 80189a0:	2301      	movs	r3, #1
 80189a2:	9301      	str	r3, [sp, #4]
 80189a4:	2300      	movs	r3, #0
 80189a6:	9300      	str	r3, [sp, #0]
 80189a8:	23ff      	movs	r3, #255	; 0xff
 80189aa:	2100      	movs	r1, #0
 80189ac:	69f8      	ldr	r0, [r7, #28]
 80189ae:	f000 f9eb 	bl	8018d88 <ip4_output_if>
  }
  pbuf_free(q);
 80189b2:	69f8      	ldr	r0, [r7, #28]
 80189b4:	f7f6 fe64 	bl	800f680 <pbuf_free>
 80189b8:	e000      	b.n	80189bc <icmp_send_response+0xc0>
    return;
 80189ba:	bf00      	nop
}
 80189bc:	3720      	adds	r7, #32
 80189be:	46bd      	mov	sp, r7
 80189c0:	bd80      	pop	{r7, pc}
 80189c2:	bf00      	nop
 80189c4:	0801eb34 	.word	0x0801eb34
 80189c8:	0801ec00 	.word	0x0801ec00
 80189cc:	0801eba4 	.word	0x0801eba4

080189d0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80189d0:	b480      	push	{r7}
 80189d2:	b085      	sub	sp, #20
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80189d8:	4b33      	ldr	r3, [pc, #204]	; (8018aa8 <ip4_route+0xd8>)
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	60fb      	str	r3, [r7, #12]
 80189de:	e036      	b.n	8018a4e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80189e6:	f003 0301 	and.w	r3, r3, #1
 80189ea:	b2db      	uxtb	r3, r3
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d02b      	beq.n	8018a48 <ip4_route+0x78>
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80189f6:	089b      	lsrs	r3, r3, #2
 80189f8:	f003 0301 	and.w	r3, r3, #1
 80189fc:	b2db      	uxtb	r3, r3
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d022      	beq.n	8018a48 <ip4_route+0x78>
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	3304      	adds	r3, #4
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d01d      	beq.n	8018a48 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	681a      	ldr	r2, [r3, #0]
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	3304      	adds	r3, #4
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	405a      	eors	r2, r3
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	3308      	adds	r3, #8
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	4013      	ands	r3, r2
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d101      	bne.n	8018a28 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	e038      	b.n	8018a9a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018a2e:	f003 0302 	and.w	r3, r3, #2
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d108      	bne.n	8018a48 <ip4_route+0x78>
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	681a      	ldr	r2, [r3, #0]
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	330c      	adds	r3, #12
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	429a      	cmp	r2, r3
 8018a42:	d101      	bne.n	8018a48 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	e028      	b.n	8018a9a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	60fb      	str	r3, [r7, #12]
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d1c5      	bne.n	80189e0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018a54:	4b15      	ldr	r3, [pc, #84]	; (8018aac <ip4_route+0xdc>)
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d01a      	beq.n	8018a92 <ip4_route+0xc2>
 8018a5c:	4b13      	ldr	r3, [pc, #76]	; (8018aac <ip4_route+0xdc>)
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018a64:	f003 0301 	and.w	r3, r3, #1
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d012      	beq.n	8018a92 <ip4_route+0xc2>
 8018a6c:	4b0f      	ldr	r3, [pc, #60]	; (8018aac <ip4_route+0xdc>)
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018a74:	f003 0304 	and.w	r3, r3, #4
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d00a      	beq.n	8018a92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018a7c:	4b0b      	ldr	r3, [pc, #44]	; (8018aac <ip4_route+0xdc>)
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	3304      	adds	r3, #4
 8018a82:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d004      	beq.n	8018a92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	b2db      	uxtb	r3, r3
 8018a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8018a90:	d101      	bne.n	8018a96 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018a92:	2300      	movs	r3, #0
 8018a94:	e001      	b.n	8018a9a <ip4_route+0xca>
  }

  return netif_default;
 8018a96:	4b05      	ldr	r3, [pc, #20]	; (8018aac <ip4_route+0xdc>)
 8018a98:	681b      	ldr	r3, [r3, #0]
}
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	3714      	adds	r7, #20
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa4:	4770      	bx	lr
 8018aa6:	bf00      	nop
 8018aa8:	2000f3e8 	.word	0x2000f3e8
 8018aac:	2000f3ec 	.word	0x2000f3ec

08018ab0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b082      	sub	sp, #8
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018abe:	f003 0301 	and.w	r3, r3, #1
 8018ac2:	b2db      	uxtb	r3, r3
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d016      	beq.n	8018af6 <ip4_input_accept+0x46>
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	3304      	adds	r3, #4
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d011      	beq.n	8018af6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018ad2:	4b0b      	ldr	r3, [pc, #44]	; (8018b00 <ip4_input_accept+0x50>)
 8018ad4:	695a      	ldr	r2, [r3, #20]
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	3304      	adds	r3, #4
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	429a      	cmp	r2, r3
 8018ade:	d008      	beq.n	8018af2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018ae0:	4b07      	ldr	r3, [pc, #28]	; (8018b00 <ip4_input_accept+0x50>)
 8018ae2:	695b      	ldr	r3, [r3, #20]
 8018ae4:	6879      	ldr	r1, [r7, #4]
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f000 fa26 	bl	8018f38 <ip4_addr_isbroadcast_u32>
 8018aec:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d001      	beq.n	8018af6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018af2:	2301      	movs	r3, #1
 8018af4:	e000      	b.n	8018af8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018af6:	2300      	movs	r3, #0
}
 8018af8:	4618      	mov	r0, r3
 8018afa:	3708      	adds	r7, #8
 8018afc:	46bd      	mov	sp, r7
 8018afe:	bd80      	pop	{r7, pc}
 8018b00:	2000bcc4 	.word	0x2000bcc4

08018b04 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b088      	sub	sp, #32
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	6078      	str	r0, [r7, #4]
 8018b0c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8018b0e:	2301      	movs	r3, #1
 8018b10:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	685b      	ldr	r3, [r3, #4]
 8018b16:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8018b18:	69fb      	ldr	r3, [r7, #28]
 8018b1a:	781b      	ldrb	r3, [r3, #0]
 8018b1c:	091b      	lsrs	r3, r3, #4
 8018b1e:	b2db      	uxtb	r3, r3
 8018b20:	2b04      	cmp	r3, #4
 8018b22:	d004      	beq.n	8018b2e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018b24:	6878      	ldr	r0, [r7, #4]
 8018b26:	f7f6 fdab 	bl	800f680 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018b2a:	2300      	movs	r3, #0
 8018b2c:	e123      	b.n	8018d76 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018b2e:	69fb      	ldr	r3, [r7, #28]
 8018b30:	781b      	ldrb	r3, [r3, #0]
 8018b32:	f003 030f 	and.w	r3, r3, #15
 8018b36:	b2db      	uxtb	r3, r3
 8018b38:	009b      	lsls	r3, r3, #2
 8018b3a:	b2db      	uxtb	r3, r3
 8018b3c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018b3e:	69fb      	ldr	r3, [r7, #28]
 8018b40:	885b      	ldrh	r3, [r3, #2]
 8018b42:	b29b      	uxth	r3, r3
 8018b44:	4618      	mov	r0, r3
 8018b46:	f7f5 f9e3 	bl	800df10 <lwip_htons>
 8018b4a:	4603      	mov	r3, r0
 8018b4c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	891b      	ldrh	r3, [r3, #8]
 8018b52:	8a3a      	ldrh	r2, [r7, #16]
 8018b54:	429a      	cmp	r2, r3
 8018b56:	d204      	bcs.n	8018b62 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8018b58:	8a3b      	ldrh	r3, [r7, #16]
 8018b5a:	4619      	mov	r1, r3
 8018b5c:	6878      	ldr	r0, [r7, #4]
 8018b5e:	f7f6 fc09 	bl	800f374 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	895b      	ldrh	r3, [r3, #10]
 8018b66:	8a7a      	ldrh	r2, [r7, #18]
 8018b68:	429a      	cmp	r2, r3
 8018b6a:	d807      	bhi.n	8018b7c <ip4_input+0x78>
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	891b      	ldrh	r3, [r3, #8]
 8018b70:	8a3a      	ldrh	r2, [r7, #16]
 8018b72:	429a      	cmp	r2, r3
 8018b74:	d802      	bhi.n	8018b7c <ip4_input+0x78>
 8018b76:	8a7b      	ldrh	r3, [r7, #18]
 8018b78:	2b13      	cmp	r3, #19
 8018b7a:	d804      	bhi.n	8018b86 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018b7c:	6878      	ldr	r0, [r7, #4]
 8018b7e:	f7f6 fd7f 	bl	800f680 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018b82:	2300      	movs	r3, #0
 8018b84:	e0f7      	b.n	8018d76 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018b86:	69fb      	ldr	r3, [r7, #28]
 8018b88:	691b      	ldr	r3, [r3, #16]
 8018b8a:	4a7d      	ldr	r2, [pc, #500]	; (8018d80 <ip4_input+0x27c>)
 8018b8c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018b8e:	69fb      	ldr	r3, [r7, #28]
 8018b90:	68db      	ldr	r3, [r3, #12]
 8018b92:	4a7b      	ldr	r2, [pc, #492]	; (8018d80 <ip4_input+0x27c>)
 8018b94:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018b96:	4b7a      	ldr	r3, [pc, #488]	; (8018d80 <ip4_input+0x27c>)
 8018b98:	695b      	ldr	r3, [r3, #20]
 8018b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018b9e:	2be0      	cmp	r3, #224	; 0xe0
 8018ba0:	d112      	bne.n	8018bc8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018ba2:	683b      	ldr	r3, [r7, #0]
 8018ba4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018ba8:	f003 0301 	and.w	r3, r3, #1
 8018bac:	b2db      	uxtb	r3, r3
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d007      	beq.n	8018bc2 <ip4_input+0xbe>
 8018bb2:	683b      	ldr	r3, [r7, #0]
 8018bb4:	3304      	adds	r3, #4
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d002      	beq.n	8018bc2 <ip4_input+0xbe>
      netif = inp;
 8018bbc:	683b      	ldr	r3, [r7, #0]
 8018bbe:	61bb      	str	r3, [r7, #24]
 8018bc0:	e02a      	b.n	8018c18 <ip4_input+0x114>
    } else {
      netif = NULL;
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	61bb      	str	r3, [r7, #24]
 8018bc6:	e027      	b.n	8018c18 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018bc8:	6838      	ldr	r0, [r7, #0]
 8018bca:	f7ff ff71 	bl	8018ab0 <ip4_input_accept>
 8018bce:	4603      	mov	r3, r0
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d002      	beq.n	8018bda <ip4_input+0xd6>
      netif = inp;
 8018bd4:	683b      	ldr	r3, [r7, #0]
 8018bd6:	61bb      	str	r3, [r7, #24]
 8018bd8:	e01e      	b.n	8018c18 <ip4_input+0x114>
    } else {
      netif = NULL;
 8018bda:	2300      	movs	r3, #0
 8018bdc:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018bde:	4b68      	ldr	r3, [pc, #416]	; (8018d80 <ip4_input+0x27c>)
 8018be0:	695b      	ldr	r3, [r3, #20]
 8018be2:	b2db      	uxtb	r3, r3
 8018be4:	2b7f      	cmp	r3, #127	; 0x7f
 8018be6:	d017      	beq.n	8018c18 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018be8:	4b66      	ldr	r3, [pc, #408]	; (8018d84 <ip4_input+0x280>)
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	61bb      	str	r3, [r7, #24]
 8018bee:	e00e      	b.n	8018c0e <ip4_input+0x10a>
          if (netif == inp) {
 8018bf0:	69ba      	ldr	r2, [r7, #24]
 8018bf2:	683b      	ldr	r3, [r7, #0]
 8018bf4:	429a      	cmp	r2, r3
 8018bf6:	d006      	beq.n	8018c06 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018bf8:	69b8      	ldr	r0, [r7, #24]
 8018bfa:	f7ff ff59 	bl	8018ab0 <ip4_input_accept>
 8018bfe:	4603      	mov	r3, r0
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d108      	bne.n	8018c16 <ip4_input+0x112>
 8018c04:	e000      	b.n	8018c08 <ip4_input+0x104>
            continue;
 8018c06:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018c08:	69bb      	ldr	r3, [r7, #24]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	61bb      	str	r3, [r7, #24]
 8018c0e:	69bb      	ldr	r3, [r7, #24]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d1ed      	bne.n	8018bf0 <ip4_input+0xec>
 8018c14:	e000      	b.n	8018c18 <ip4_input+0x114>
            break;
 8018c16:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8018c18:	69bb      	ldr	r3, [r7, #24]
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d111      	bne.n	8018c42 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8018c1e:	69fb      	ldr	r3, [r7, #28]
 8018c20:	7a5b      	ldrb	r3, [r3, #9]
 8018c22:	2b11      	cmp	r3, #17
 8018c24:	d10d      	bne.n	8018c42 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8018c26:	8a7b      	ldrh	r3, [r7, #18]
 8018c28:	69fa      	ldr	r2, [r7, #28]
 8018c2a:	4413      	add	r3, r2
 8018c2c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	885b      	ldrh	r3, [r3, #2]
 8018c32:	b29b      	uxth	r3, r3
 8018c34:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8018c38:	d103      	bne.n	8018c42 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8018c3a:	683b      	ldr	r3, [r7, #0]
 8018c3c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8018c3e:	2300      	movs	r3, #0
 8018c40:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018c42:	697b      	ldr	r3, [r7, #20]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d017      	beq.n	8018c78 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8018c48:	4b4d      	ldr	r3, [pc, #308]	; (8018d80 <ip4_input+0x27c>)
 8018c4a:	691b      	ldr	r3, [r3, #16]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d013      	beq.n	8018c78 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018c50:	4b4b      	ldr	r3, [pc, #300]	; (8018d80 <ip4_input+0x27c>)
 8018c52:	691b      	ldr	r3, [r3, #16]
 8018c54:	6839      	ldr	r1, [r7, #0]
 8018c56:	4618      	mov	r0, r3
 8018c58:	f000 f96e 	bl	8018f38 <ip4_addr_isbroadcast_u32>
 8018c5c:	4603      	mov	r3, r0
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d105      	bne.n	8018c6e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018c62:	4b47      	ldr	r3, [pc, #284]	; (8018d80 <ip4_input+0x27c>)
 8018c64:	691b      	ldr	r3, [r3, #16]
 8018c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018c6a:	2be0      	cmp	r3, #224	; 0xe0
 8018c6c:	d104      	bne.n	8018c78 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018c6e:	6878      	ldr	r0, [r7, #4]
 8018c70:	f7f6 fd06 	bl	800f680 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018c74:	2300      	movs	r3, #0
 8018c76:	e07e      	b.n	8018d76 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018c78:	69bb      	ldr	r3, [r7, #24]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d104      	bne.n	8018c88 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018c7e:	6878      	ldr	r0, [r7, #4]
 8018c80:	f7f6 fcfe 	bl	800f680 <pbuf_free>
    return ERR_OK;
 8018c84:	2300      	movs	r3, #0
 8018c86:	e076      	b.n	8018d76 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018c88:	69fb      	ldr	r3, [r7, #28]
 8018c8a:	88db      	ldrh	r3, [r3, #6]
 8018c8c:	b29b      	uxth	r3, r3
 8018c8e:	461a      	mov	r2, r3
 8018c90:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018c94:	4013      	ands	r3, r2
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d00b      	beq.n	8018cb2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018c9a:	6878      	ldr	r0, [r7, #4]
 8018c9c:	f000 fc92 	bl	80195c4 <ip4_reass>
 8018ca0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d101      	bne.n	8018cac <ip4_input+0x1a8>
      return ERR_OK;
 8018ca8:	2300      	movs	r3, #0
 8018caa:	e064      	b.n	8018d76 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	685b      	ldr	r3, [r3, #4]
 8018cb0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018cb2:	4a33      	ldr	r2, [pc, #204]	; (8018d80 <ip4_input+0x27c>)
 8018cb4:	69bb      	ldr	r3, [r7, #24]
 8018cb6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018cb8:	4a31      	ldr	r2, [pc, #196]	; (8018d80 <ip4_input+0x27c>)
 8018cba:	683b      	ldr	r3, [r7, #0]
 8018cbc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018cbe:	4a30      	ldr	r2, [pc, #192]	; (8018d80 <ip4_input+0x27c>)
 8018cc0:	69fb      	ldr	r3, [r7, #28]
 8018cc2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018cc4:	69fb      	ldr	r3, [r7, #28]
 8018cc6:	781b      	ldrb	r3, [r3, #0]
 8018cc8:	f003 030f 	and.w	r3, r3, #15
 8018ccc:	b2db      	uxtb	r3, r3
 8018cce:	009b      	lsls	r3, r3, #2
 8018cd0:	b2db      	uxtb	r3, r3
 8018cd2:	b29a      	uxth	r2, r3
 8018cd4:	4b2a      	ldr	r3, [pc, #168]	; (8018d80 <ip4_input+0x27c>)
 8018cd6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018cd8:	8a7b      	ldrh	r3, [r7, #18]
 8018cda:	4619      	mov	r1, r3
 8018cdc:	6878      	ldr	r0, [r7, #4]
 8018cde:	f7f6 fc49 	bl	800f574 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018ce2:	69fb      	ldr	r3, [r7, #28]
 8018ce4:	7a5b      	ldrb	r3, [r3, #9]
 8018ce6:	2b11      	cmp	r3, #17
 8018ce8:	d006      	beq.n	8018cf8 <ip4_input+0x1f4>
 8018cea:	2b11      	cmp	r3, #17
 8018cec:	dc13      	bgt.n	8018d16 <ip4_input+0x212>
 8018cee:	2b01      	cmp	r3, #1
 8018cf0:	d00c      	beq.n	8018d0c <ip4_input+0x208>
 8018cf2:	2b06      	cmp	r3, #6
 8018cf4:	d005      	beq.n	8018d02 <ip4_input+0x1fe>
 8018cf6:	e00e      	b.n	8018d16 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018cf8:	6839      	ldr	r1, [r7, #0]
 8018cfa:	6878      	ldr	r0, [r7, #4]
 8018cfc:	f7fc faea 	bl	80152d4 <udp_input>
        break;
 8018d00:	e026      	b.n	8018d50 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018d02:	6839      	ldr	r1, [r7, #0]
 8018d04:	6878      	ldr	r0, [r7, #4]
 8018d06:	f7f8 faff 	bl	8011308 <tcp_input>
        break;
 8018d0a:	e021      	b.n	8018d50 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018d0c:	6839      	ldr	r1, [r7, #0]
 8018d0e:	6878      	ldr	r0, [r7, #4]
 8018d10:	f7ff fcd0 	bl	80186b4 <icmp_input>
        break;
 8018d14:	e01c      	b.n	8018d50 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018d16:	4b1a      	ldr	r3, [pc, #104]	; (8018d80 <ip4_input+0x27c>)
 8018d18:	695b      	ldr	r3, [r3, #20]
 8018d1a:	69b9      	ldr	r1, [r7, #24]
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	f000 f90b 	bl	8018f38 <ip4_addr_isbroadcast_u32>
 8018d22:	4603      	mov	r3, r0
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d10f      	bne.n	8018d48 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018d28:	4b15      	ldr	r3, [pc, #84]	; (8018d80 <ip4_input+0x27c>)
 8018d2a:	695b      	ldr	r3, [r3, #20]
 8018d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018d30:	2be0      	cmp	r3, #224	; 0xe0
 8018d32:	d009      	beq.n	8018d48 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018d34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018d38:	4619      	mov	r1, r3
 8018d3a:	6878      	ldr	r0, [r7, #4]
 8018d3c:	f7f6 fc8d 	bl	800f65a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018d40:	2102      	movs	r1, #2
 8018d42:	6878      	ldr	r0, [r7, #4]
 8018d44:	f7ff fdba 	bl	80188bc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018d48:	6878      	ldr	r0, [r7, #4]
 8018d4a:	f7f6 fc99 	bl	800f680 <pbuf_free>
        break;
 8018d4e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018d50:	4b0b      	ldr	r3, [pc, #44]	; (8018d80 <ip4_input+0x27c>)
 8018d52:	2200      	movs	r2, #0
 8018d54:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018d56:	4b0a      	ldr	r3, [pc, #40]	; (8018d80 <ip4_input+0x27c>)
 8018d58:	2200      	movs	r2, #0
 8018d5a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018d5c:	4b08      	ldr	r3, [pc, #32]	; (8018d80 <ip4_input+0x27c>)
 8018d5e:	2200      	movs	r2, #0
 8018d60:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018d62:	4b07      	ldr	r3, [pc, #28]	; (8018d80 <ip4_input+0x27c>)
 8018d64:	2200      	movs	r2, #0
 8018d66:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018d68:	4b05      	ldr	r3, [pc, #20]	; (8018d80 <ip4_input+0x27c>)
 8018d6a:	2200      	movs	r2, #0
 8018d6c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018d6e:	4b04      	ldr	r3, [pc, #16]	; (8018d80 <ip4_input+0x27c>)
 8018d70:	2200      	movs	r2, #0
 8018d72:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018d74:	2300      	movs	r3, #0
}
 8018d76:	4618      	mov	r0, r3
 8018d78:	3720      	adds	r7, #32
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	bd80      	pop	{r7, pc}
 8018d7e:	bf00      	nop
 8018d80:	2000bcc4 	.word	0x2000bcc4
 8018d84:	2000f3e8 	.word	0x2000f3e8

08018d88 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018d88:	b580      	push	{r7, lr}
 8018d8a:	b08a      	sub	sp, #40	; 0x28
 8018d8c:	af04      	add	r7, sp, #16
 8018d8e:	60f8      	str	r0, [r7, #12]
 8018d90:	60b9      	str	r1, [r7, #8]
 8018d92:	607a      	str	r2, [r7, #4]
 8018d94:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018d96:	68bb      	ldr	r3, [r7, #8]
 8018d98:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d009      	beq.n	8018db4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018da0:	68bb      	ldr	r3, [r7, #8]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d003      	beq.n	8018dae <ip4_output_if+0x26>
 8018da6:	68bb      	ldr	r3, [r7, #8]
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d102      	bne.n	8018db4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018db0:	3304      	adds	r3, #4
 8018db2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018db4:	78fa      	ldrb	r2, [r7, #3]
 8018db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018db8:	9302      	str	r3, [sp, #8]
 8018dba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018dbe:	9301      	str	r3, [sp, #4]
 8018dc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018dc4:	9300      	str	r3, [sp, #0]
 8018dc6:	4613      	mov	r3, r2
 8018dc8:	687a      	ldr	r2, [r7, #4]
 8018dca:	6979      	ldr	r1, [r7, #20]
 8018dcc:	68f8      	ldr	r0, [r7, #12]
 8018dce:	f000 f805 	bl	8018ddc <ip4_output_if_src>
 8018dd2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	3718      	adds	r7, #24
 8018dd8:	46bd      	mov	sp, r7
 8018dda:	bd80      	pop	{r7, pc}

08018ddc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018ddc:	b580      	push	{r7, lr}
 8018dde:	b088      	sub	sp, #32
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	60f8      	str	r0, [r7, #12]
 8018de4:	60b9      	str	r1, [r7, #8]
 8018de6:	607a      	str	r2, [r7, #4]
 8018de8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	7b9b      	ldrb	r3, [r3, #14]
 8018dee:	2b01      	cmp	r3, #1
 8018df0:	d006      	beq.n	8018e00 <ip4_output_if_src+0x24>
 8018df2:	4b4b      	ldr	r3, [pc, #300]	; (8018f20 <ip4_output_if_src+0x144>)
 8018df4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018df8:	494a      	ldr	r1, [pc, #296]	; (8018f24 <ip4_output_if_src+0x148>)
 8018dfa:	484b      	ldr	r0, [pc, #300]	; (8018f28 <ip4_output_if_src+0x14c>)
 8018dfc:	f001 fe34 	bl	801aa68 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d060      	beq.n	8018ec8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018e06:	2314      	movs	r3, #20
 8018e08:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018e0a:	2114      	movs	r1, #20
 8018e0c:	68f8      	ldr	r0, [r7, #12]
 8018e0e:	f7f6 fba1 	bl	800f554 <pbuf_add_header>
 8018e12:	4603      	mov	r3, r0
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d002      	beq.n	8018e1e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018e18:	f06f 0301 	mvn.w	r3, #1
 8018e1c:	e07c      	b.n	8018f18 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	685b      	ldr	r3, [r3, #4]
 8018e22:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	895b      	ldrh	r3, [r3, #10]
 8018e28:	2b13      	cmp	r3, #19
 8018e2a:	d806      	bhi.n	8018e3a <ip4_output_if_src+0x5e>
 8018e2c:	4b3c      	ldr	r3, [pc, #240]	; (8018f20 <ip4_output_if_src+0x144>)
 8018e2e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018e32:	493e      	ldr	r1, [pc, #248]	; (8018f2c <ip4_output_if_src+0x150>)
 8018e34:	483c      	ldr	r0, [pc, #240]	; (8018f28 <ip4_output_if_src+0x14c>)
 8018e36:	f001 fe17 	bl	801aa68 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018e3a:	69fb      	ldr	r3, [r7, #28]
 8018e3c:	78fa      	ldrb	r2, [r7, #3]
 8018e3e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018e40:	69fb      	ldr	r3, [r7, #28]
 8018e42:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018e46:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	681a      	ldr	r2, [r3, #0]
 8018e4c:	69fb      	ldr	r3, [r7, #28]
 8018e4e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018e50:	8b7b      	ldrh	r3, [r7, #26]
 8018e52:	089b      	lsrs	r3, r3, #2
 8018e54:	b29b      	uxth	r3, r3
 8018e56:	b2db      	uxtb	r3, r3
 8018e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e5c:	b2da      	uxtb	r2, r3
 8018e5e:	69fb      	ldr	r3, [r7, #28]
 8018e60:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018e62:	69fb      	ldr	r3, [r7, #28]
 8018e64:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018e68:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	891b      	ldrh	r3, [r3, #8]
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f7f5 f84e 	bl	800df10 <lwip_htons>
 8018e74:	4603      	mov	r3, r0
 8018e76:	461a      	mov	r2, r3
 8018e78:	69fb      	ldr	r3, [r7, #28]
 8018e7a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018e7c:	69fb      	ldr	r3, [r7, #28]
 8018e7e:	2200      	movs	r2, #0
 8018e80:	719a      	strb	r2, [r3, #6]
 8018e82:	2200      	movs	r2, #0
 8018e84:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018e86:	4b2a      	ldr	r3, [pc, #168]	; (8018f30 <ip4_output_if_src+0x154>)
 8018e88:	881b      	ldrh	r3, [r3, #0]
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	f7f5 f840 	bl	800df10 <lwip_htons>
 8018e90:	4603      	mov	r3, r0
 8018e92:	461a      	mov	r2, r3
 8018e94:	69fb      	ldr	r3, [r7, #28]
 8018e96:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018e98:	4b25      	ldr	r3, [pc, #148]	; (8018f30 <ip4_output_if_src+0x154>)
 8018e9a:	881b      	ldrh	r3, [r3, #0]
 8018e9c:	3301      	adds	r3, #1
 8018e9e:	b29a      	uxth	r2, r3
 8018ea0:	4b23      	ldr	r3, [pc, #140]	; (8018f30 <ip4_output_if_src+0x154>)
 8018ea2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018ea4:	68bb      	ldr	r3, [r7, #8]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d104      	bne.n	8018eb4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018eaa:	4b22      	ldr	r3, [pc, #136]	; (8018f34 <ip4_output_if_src+0x158>)
 8018eac:	681a      	ldr	r2, [r3, #0]
 8018eae:	69fb      	ldr	r3, [r7, #28]
 8018eb0:	60da      	str	r2, [r3, #12]
 8018eb2:	e003      	b.n	8018ebc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018eb4:	68bb      	ldr	r3, [r7, #8]
 8018eb6:	681a      	ldr	r2, [r3, #0]
 8018eb8:	69fb      	ldr	r3, [r7, #28]
 8018eba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018ebc:	69fb      	ldr	r3, [r7, #28]
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	729a      	strb	r2, [r3, #10]
 8018ec2:	2200      	movs	r2, #0
 8018ec4:	72da      	strb	r2, [r3, #11]
 8018ec6:	e00f      	b.n	8018ee8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	895b      	ldrh	r3, [r3, #10]
 8018ecc:	2b13      	cmp	r3, #19
 8018ece:	d802      	bhi.n	8018ed6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018ed0:	f06f 0301 	mvn.w	r3, #1
 8018ed4:	e020      	b.n	8018f18 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	685b      	ldr	r3, [r3, #4]
 8018eda:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018edc:	69fb      	ldr	r3, [r7, #28]
 8018ede:	691b      	ldr	r3, [r3, #16]
 8018ee0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018ee2:	f107 0314 	add.w	r3, r7, #20
 8018ee6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d00c      	beq.n	8018f0a <ip4_output_if_src+0x12e>
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	891a      	ldrh	r2, [r3, #8]
 8018ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ef8:	429a      	cmp	r2, r3
 8018efa:	d906      	bls.n	8018f0a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018efc:	687a      	ldr	r2, [r7, #4]
 8018efe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018f00:	68f8      	ldr	r0, [r7, #12]
 8018f02:	f000 fd4d 	bl	80199a0 <ip4_frag>
 8018f06:	4603      	mov	r3, r0
 8018f08:	e006      	b.n	8018f18 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f0c:	695b      	ldr	r3, [r3, #20]
 8018f0e:	687a      	ldr	r2, [r7, #4]
 8018f10:	68f9      	ldr	r1, [r7, #12]
 8018f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018f14:	4798      	blx	r3
 8018f16:	4603      	mov	r3, r0
}
 8018f18:	4618      	mov	r0, r3
 8018f1a:	3720      	adds	r7, #32
 8018f1c:	46bd      	mov	sp, r7
 8018f1e:	bd80      	pop	{r7, pc}
 8018f20:	0801ec2c 	.word	0x0801ec2c
 8018f24:	0801ec60 	.word	0x0801ec60
 8018f28:	0801ec6c 	.word	0x0801ec6c
 8018f2c:	0801ec94 	.word	0x0801ec94
 8018f30:	20008676 	.word	0x20008676
 8018f34:	0801f0cc 	.word	0x0801f0cc

08018f38 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018f38:	b480      	push	{r7}
 8018f3a:	b085      	sub	sp, #20
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
 8018f40:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f4c:	d002      	beq.n	8018f54 <ip4_addr_isbroadcast_u32+0x1c>
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d101      	bne.n	8018f58 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018f54:	2301      	movs	r3, #1
 8018f56:	e02a      	b.n	8018fae <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018f58:	683b      	ldr	r3, [r7, #0]
 8018f5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018f5e:	f003 0302 	and.w	r3, r3, #2
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d101      	bne.n	8018f6a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018f66:	2300      	movs	r3, #0
 8018f68:	e021      	b.n	8018fae <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018f6a:	683b      	ldr	r3, [r7, #0]
 8018f6c:	3304      	adds	r3, #4
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	687a      	ldr	r2, [r7, #4]
 8018f72:	429a      	cmp	r2, r3
 8018f74:	d101      	bne.n	8018f7a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018f76:	2300      	movs	r3, #0
 8018f78:	e019      	b.n	8018fae <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018f7a:	68fa      	ldr	r2, [r7, #12]
 8018f7c:	683b      	ldr	r3, [r7, #0]
 8018f7e:	3304      	adds	r3, #4
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	405a      	eors	r2, r3
 8018f84:	683b      	ldr	r3, [r7, #0]
 8018f86:	3308      	adds	r3, #8
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	4013      	ands	r3, r2
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d10d      	bne.n	8018fac <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018f90:	683b      	ldr	r3, [r7, #0]
 8018f92:	3308      	adds	r3, #8
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	43da      	mvns	r2, r3
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018f9c:	683b      	ldr	r3, [r7, #0]
 8018f9e:	3308      	adds	r3, #8
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018fa4:	429a      	cmp	r2, r3
 8018fa6:	d101      	bne.n	8018fac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018fa8:	2301      	movs	r3, #1
 8018faa:	e000      	b.n	8018fae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018fac:	2300      	movs	r3, #0
  }
}
 8018fae:	4618      	mov	r0, r3
 8018fb0:	3714      	adds	r7, #20
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fb8:	4770      	bx	lr
	...

08018fbc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018fbc:	b580      	push	{r7, lr}
 8018fbe:	b084      	sub	sp, #16
 8018fc0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018fc6:	4b12      	ldr	r3, [pc, #72]	; (8019010 <ip_reass_tmr+0x54>)
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018fcc:	e018      	b.n	8019000 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	7fdb      	ldrb	r3, [r3, #31]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d00b      	beq.n	8018fee <ip_reass_tmr+0x32>
      r->timer--;
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	7fdb      	ldrb	r3, [r3, #31]
 8018fda:	3b01      	subs	r3, #1
 8018fdc:	b2da      	uxtb	r2, r3
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018fe2:	68fb      	ldr	r3, [r7, #12]
 8018fe4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	60fb      	str	r3, [r7, #12]
 8018fec:	e008      	b.n	8019000 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018ff2:	68fb      	ldr	r3, [r7, #12]
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018ff8:	68b9      	ldr	r1, [r7, #8]
 8018ffa:	6878      	ldr	r0, [r7, #4]
 8018ffc:	f000 f80a 	bl	8019014 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d1e3      	bne.n	8018fce <ip_reass_tmr+0x12>
    }
  }
}
 8019006:	bf00      	nop
 8019008:	bf00      	nop
 801900a:	3710      	adds	r7, #16
 801900c:	46bd      	mov	sp, r7
 801900e:	bd80      	pop	{r7, pc}
 8019010:	20008678 	.word	0x20008678

08019014 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b088      	sub	sp, #32
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
 801901c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801901e:	2300      	movs	r3, #0
 8019020:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019022:	683a      	ldr	r2, [r7, #0]
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	429a      	cmp	r2, r3
 8019028:	d105      	bne.n	8019036 <ip_reass_free_complete_datagram+0x22>
 801902a:	4b45      	ldr	r3, [pc, #276]	; (8019140 <ip_reass_free_complete_datagram+0x12c>)
 801902c:	22ab      	movs	r2, #171	; 0xab
 801902e:	4945      	ldr	r1, [pc, #276]	; (8019144 <ip_reass_free_complete_datagram+0x130>)
 8019030:	4845      	ldr	r0, [pc, #276]	; (8019148 <ip_reass_free_complete_datagram+0x134>)
 8019032:	f001 fd19 	bl	801aa68 <iprintf>
  if (prev != NULL) {
 8019036:	683b      	ldr	r3, [r7, #0]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d00a      	beq.n	8019052 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801903c:	683b      	ldr	r3, [r7, #0]
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	687a      	ldr	r2, [r7, #4]
 8019042:	429a      	cmp	r2, r3
 8019044:	d005      	beq.n	8019052 <ip_reass_free_complete_datagram+0x3e>
 8019046:	4b3e      	ldr	r3, [pc, #248]	; (8019140 <ip_reass_free_complete_datagram+0x12c>)
 8019048:	22ad      	movs	r2, #173	; 0xad
 801904a:	4940      	ldr	r1, [pc, #256]	; (801914c <ip_reass_free_complete_datagram+0x138>)
 801904c:	483e      	ldr	r0, [pc, #248]	; (8019148 <ip_reass_free_complete_datagram+0x134>)
 801904e:	f001 fd0b 	bl	801aa68 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	685b      	ldr	r3, [r3, #4]
 8019056:	685b      	ldr	r3, [r3, #4]
 8019058:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801905a:	697b      	ldr	r3, [r7, #20]
 801905c:	889b      	ldrh	r3, [r3, #4]
 801905e:	b29b      	uxth	r3, r3
 8019060:	2b00      	cmp	r3, #0
 8019062:	d12a      	bne.n	80190ba <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	685b      	ldr	r3, [r3, #4]
 8019068:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801906a:	697b      	ldr	r3, [r7, #20]
 801906c:	681a      	ldr	r2, [r3, #0]
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019072:	69bb      	ldr	r3, [r7, #24]
 8019074:	6858      	ldr	r0, [r3, #4]
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	3308      	adds	r3, #8
 801907a:	2214      	movs	r2, #20
 801907c:	4619      	mov	r1, r3
 801907e:	f001 fc33 	bl	801a8e8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019082:	2101      	movs	r1, #1
 8019084:	69b8      	ldr	r0, [r7, #24]
 8019086:	f7ff fc29 	bl	80188dc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801908a:	69b8      	ldr	r0, [r7, #24]
 801908c:	f7f6 fb86 	bl	800f79c <pbuf_clen>
 8019090:	4603      	mov	r3, r0
 8019092:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019094:	8bfa      	ldrh	r2, [r7, #30]
 8019096:	8a7b      	ldrh	r3, [r7, #18]
 8019098:	4413      	add	r3, r2
 801909a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801909e:	db05      	blt.n	80190ac <ip_reass_free_complete_datagram+0x98>
 80190a0:	4b27      	ldr	r3, [pc, #156]	; (8019140 <ip_reass_free_complete_datagram+0x12c>)
 80190a2:	22bc      	movs	r2, #188	; 0xbc
 80190a4:	492a      	ldr	r1, [pc, #168]	; (8019150 <ip_reass_free_complete_datagram+0x13c>)
 80190a6:	4828      	ldr	r0, [pc, #160]	; (8019148 <ip_reass_free_complete_datagram+0x134>)
 80190a8:	f001 fcde 	bl	801aa68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80190ac:	8bfa      	ldrh	r2, [r7, #30]
 80190ae:	8a7b      	ldrh	r3, [r7, #18]
 80190b0:	4413      	add	r3, r2
 80190b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80190b4:	69b8      	ldr	r0, [r7, #24]
 80190b6:	f7f6 fae3 	bl	800f680 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	685b      	ldr	r3, [r3, #4]
 80190be:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80190c0:	e01f      	b.n	8019102 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80190c2:	69bb      	ldr	r3, [r7, #24]
 80190c4:	685b      	ldr	r3, [r3, #4]
 80190c6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80190c8:	69bb      	ldr	r3, [r7, #24]
 80190ca:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80190cc:	697b      	ldr	r3, [r7, #20]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80190d2:	68f8      	ldr	r0, [r7, #12]
 80190d4:	f7f6 fb62 	bl	800f79c <pbuf_clen>
 80190d8:	4603      	mov	r3, r0
 80190da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80190dc:	8bfa      	ldrh	r2, [r7, #30]
 80190de:	8a7b      	ldrh	r3, [r7, #18]
 80190e0:	4413      	add	r3, r2
 80190e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80190e6:	db05      	blt.n	80190f4 <ip_reass_free_complete_datagram+0xe0>
 80190e8:	4b15      	ldr	r3, [pc, #84]	; (8019140 <ip_reass_free_complete_datagram+0x12c>)
 80190ea:	22cc      	movs	r2, #204	; 0xcc
 80190ec:	4918      	ldr	r1, [pc, #96]	; (8019150 <ip_reass_free_complete_datagram+0x13c>)
 80190ee:	4816      	ldr	r0, [pc, #88]	; (8019148 <ip_reass_free_complete_datagram+0x134>)
 80190f0:	f001 fcba 	bl	801aa68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80190f4:	8bfa      	ldrh	r2, [r7, #30]
 80190f6:	8a7b      	ldrh	r3, [r7, #18]
 80190f8:	4413      	add	r3, r2
 80190fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80190fc:	68f8      	ldr	r0, [r7, #12]
 80190fe:	f7f6 fabf 	bl	800f680 <pbuf_free>
  while (p != NULL) {
 8019102:	69bb      	ldr	r3, [r7, #24]
 8019104:	2b00      	cmp	r3, #0
 8019106:	d1dc      	bne.n	80190c2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019108:	6839      	ldr	r1, [r7, #0]
 801910a:	6878      	ldr	r0, [r7, #4]
 801910c:	f000 f8c2 	bl	8019294 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019110:	4b10      	ldr	r3, [pc, #64]	; (8019154 <ip_reass_free_complete_datagram+0x140>)
 8019112:	881b      	ldrh	r3, [r3, #0]
 8019114:	8bfa      	ldrh	r2, [r7, #30]
 8019116:	429a      	cmp	r2, r3
 8019118:	d905      	bls.n	8019126 <ip_reass_free_complete_datagram+0x112>
 801911a:	4b09      	ldr	r3, [pc, #36]	; (8019140 <ip_reass_free_complete_datagram+0x12c>)
 801911c:	22d2      	movs	r2, #210	; 0xd2
 801911e:	490e      	ldr	r1, [pc, #56]	; (8019158 <ip_reass_free_complete_datagram+0x144>)
 8019120:	4809      	ldr	r0, [pc, #36]	; (8019148 <ip_reass_free_complete_datagram+0x134>)
 8019122:	f001 fca1 	bl	801aa68 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019126:	4b0b      	ldr	r3, [pc, #44]	; (8019154 <ip_reass_free_complete_datagram+0x140>)
 8019128:	881a      	ldrh	r2, [r3, #0]
 801912a:	8bfb      	ldrh	r3, [r7, #30]
 801912c:	1ad3      	subs	r3, r2, r3
 801912e:	b29a      	uxth	r2, r3
 8019130:	4b08      	ldr	r3, [pc, #32]	; (8019154 <ip_reass_free_complete_datagram+0x140>)
 8019132:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019134:	8bfb      	ldrh	r3, [r7, #30]
}
 8019136:	4618      	mov	r0, r3
 8019138:	3720      	adds	r7, #32
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}
 801913e:	bf00      	nop
 8019140:	0801ecc4 	.word	0x0801ecc4
 8019144:	0801ed00 	.word	0x0801ed00
 8019148:	0801ed0c 	.word	0x0801ed0c
 801914c:	0801ed34 	.word	0x0801ed34
 8019150:	0801ed48 	.word	0x0801ed48
 8019154:	2000867c 	.word	0x2000867c
 8019158:	0801ed68 	.word	0x0801ed68

0801915c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801915c:	b580      	push	{r7, lr}
 801915e:	b08a      	sub	sp, #40	; 0x28
 8019160:	af00      	add	r7, sp, #0
 8019162:	6078      	str	r0, [r7, #4]
 8019164:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019166:	2300      	movs	r3, #0
 8019168:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801916a:	2300      	movs	r3, #0
 801916c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801916e:	2300      	movs	r3, #0
 8019170:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019172:	2300      	movs	r3, #0
 8019174:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019176:	2300      	movs	r3, #0
 8019178:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801917a:	4b28      	ldr	r3, [pc, #160]	; (801921c <ip_reass_remove_oldest_datagram+0xc0>)
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019180:	e030      	b.n	80191e4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019184:	695a      	ldr	r2, [r3, #20]
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	68db      	ldr	r3, [r3, #12]
 801918a:	429a      	cmp	r2, r3
 801918c:	d10c      	bne.n	80191a8 <ip_reass_remove_oldest_datagram+0x4c>
 801918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019190:	699a      	ldr	r2, [r3, #24]
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	691b      	ldr	r3, [r3, #16]
 8019196:	429a      	cmp	r2, r3
 8019198:	d106      	bne.n	80191a8 <ip_reass_remove_oldest_datagram+0x4c>
 801919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801919c:	899a      	ldrh	r2, [r3, #12]
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	889b      	ldrh	r3, [r3, #4]
 80191a2:	b29b      	uxth	r3, r3
 80191a4:	429a      	cmp	r2, r3
 80191a6:	d014      	beq.n	80191d2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80191a8:	693b      	ldr	r3, [r7, #16]
 80191aa:	3301      	adds	r3, #1
 80191ac:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80191ae:	6a3b      	ldr	r3, [r7, #32]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d104      	bne.n	80191be <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80191b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191b6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80191b8:	69fb      	ldr	r3, [r7, #28]
 80191ba:	61bb      	str	r3, [r7, #24]
 80191bc:	e009      	b.n	80191d2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80191be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191c0:	7fda      	ldrb	r2, [r3, #31]
 80191c2:	6a3b      	ldr	r3, [r7, #32]
 80191c4:	7fdb      	ldrb	r3, [r3, #31]
 80191c6:	429a      	cmp	r2, r3
 80191c8:	d803      	bhi.n	80191d2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80191ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191cc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80191ce:	69fb      	ldr	r3, [r7, #28]
 80191d0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80191d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d001      	beq.n	80191de <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80191da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191dc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80191de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80191e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d1cb      	bne.n	8019182 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80191ea:	6a3b      	ldr	r3, [r7, #32]
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d008      	beq.n	8019202 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80191f0:	69b9      	ldr	r1, [r7, #24]
 80191f2:	6a38      	ldr	r0, [r7, #32]
 80191f4:	f7ff ff0e 	bl	8019014 <ip_reass_free_complete_datagram>
 80191f8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80191fa:	697a      	ldr	r2, [r7, #20]
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	4413      	add	r3, r2
 8019200:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019202:	697a      	ldr	r2, [r7, #20]
 8019204:	683b      	ldr	r3, [r7, #0]
 8019206:	429a      	cmp	r2, r3
 8019208:	da02      	bge.n	8019210 <ip_reass_remove_oldest_datagram+0xb4>
 801920a:	693b      	ldr	r3, [r7, #16]
 801920c:	2b01      	cmp	r3, #1
 801920e:	dcac      	bgt.n	801916a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019210:	697b      	ldr	r3, [r7, #20]
}
 8019212:	4618      	mov	r0, r3
 8019214:	3728      	adds	r7, #40	; 0x28
 8019216:	46bd      	mov	sp, r7
 8019218:	bd80      	pop	{r7, pc}
 801921a:	bf00      	nop
 801921c:	20008678 	.word	0x20008678

08019220 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b084      	sub	sp, #16
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
 8019228:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801922a:	2004      	movs	r0, #4
 801922c:	f7f5 fb26 	bl	800e87c <memp_malloc>
 8019230:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d110      	bne.n	801925a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019238:	6839      	ldr	r1, [r7, #0]
 801923a:	6878      	ldr	r0, [r7, #4]
 801923c:	f7ff ff8e 	bl	801915c <ip_reass_remove_oldest_datagram>
 8019240:	4602      	mov	r2, r0
 8019242:	683b      	ldr	r3, [r7, #0]
 8019244:	4293      	cmp	r3, r2
 8019246:	dc03      	bgt.n	8019250 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019248:	2004      	movs	r0, #4
 801924a:	f7f5 fb17 	bl	800e87c <memp_malloc>
 801924e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d101      	bne.n	801925a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019256:	2300      	movs	r3, #0
 8019258:	e016      	b.n	8019288 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801925a:	2220      	movs	r2, #32
 801925c:	2100      	movs	r1, #0
 801925e:	68f8      	ldr	r0, [r7, #12]
 8019260:	f001 fb50 	bl	801a904 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	220f      	movs	r2, #15
 8019268:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801926a:	4b09      	ldr	r3, [pc, #36]	; (8019290 <ip_reass_enqueue_new_datagram+0x70>)
 801926c:	681a      	ldr	r2, [r3, #0]
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019272:	4a07      	ldr	r2, [pc, #28]	; (8019290 <ip_reass_enqueue_new_datagram+0x70>)
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	3308      	adds	r3, #8
 801927c:	2214      	movs	r2, #20
 801927e:	6879      	ldr	r1, [r7, #4]
 8019280:	4618      	mov	r0, r3
 8019282:	f001 fb31 	bl	801a8e8 <memcpy>
  return ipr;
 8019286:	68fb      	ldr	r3, [r7, #12]
}
 8019288:	4618      	mov	r0, r3
 801928a:	3710      	adds	r7, #16
 801928c:	46bd      	mov	sp, r7
 801928e:	bd80      	pop	{r7, pc}
 8019290:	20008678 	.word	0x20008678

08019294 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019294:	b580      	push	{r7, lr}
 8019296:	b082      	sub	sp, #8
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
 801929c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801929e:	4b10      	ldr	r3, [pc, #64]	; (80192e0 <ip_reass_dequeue_datagram+0x4c>)
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	687a      	ldr	r2, [r7, #4]
 80192a4:	429a      	cmp	r2, r3
 80192a6:	d104      	bne.n	80192b2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	4a0c      	ldr	r2, [pc, #48]	; (80192e0 <ip_reass_dequeue_datagram+0x4c>)
 80192ae:	6013      	str	r3, [r2, #0]
 80192b0:	e00d      	b.n	80192ce <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80192b2:	683b      	ldr	r3, [r7, #0]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d106      	bne.n	80192c6 <ip_reass_dequeue_datagram+0x32>
 80192b8:	4b0a      	ldr	r3, [pc, #40]	; (80192e4 <ip_reass_dequeue_datagram+0x50>)
 80192ba:	f240 1245 	movw	r2, #325	; 0x145
 80192be:	490a      	ldr	r1, [pc, #40]	; (80192e8 <ip_reass_dequeue_datagram+0x54>)
 80192c0:	480a      	ldr	r0, [pc, #40]	; (80192ec <ip_reass_dequeue_datagram+0x58>)
 80192c2:	f001 fbd1 	bl	801aa68 <iprintf>
    prev->next = ipr->next;
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	681a      	ldr	r2, [r3, #0]
 80192ca:	683b      	ldr	r3, [r7, #0]
 80192cc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80192ce:	6879      	ldr	r1, [r7, #4]
 80192d0:	2004      	movs	r0, #4
 80192d2:	f7f5 fb25 	bl	800e920 <memp_free>
}
 80192d6:	bf00      	nop
 80192d8:	3708      	adds	r7, #8
 80192da:	46bd      	mov	sp, r7
 80192dc:	bd80      	pop	{r7, pc}
 80192de:	bf00      	nop
 80192e0:	20008678 	.word	0x20008678
 80192e4:	0801ecc4 	.word	0x0801ecc4
 80192e8:	0801ed8c 	.word	0x0801ed8c
 80192ec:	0801ed0c 	.word	0x0801ed0c

080192f0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	b08c      	sub	sp, #48	; 0x30
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	60f8      	str	r0, [r7, #12]
 80192f8:	60b9      	str	r1, [r7, #8]
 80192fa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80192fc:	2300      	movs	r3, #0
 80192fe:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019300:	2301      	movs	r3, #1
 8019302:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019304:	68bb      	ldr	r3, [r7, #8]
 8019306:	685b      	ldr	r3, [r3, #4]
 8019308:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801930a:	69fb      	ldr	r3, [r7, #28]
 801930c:	885b      	ldrh	r3, [r3, #2]
 801930e:	b29b      	uxth	r3, r3
 8019310:	4618      	mov	r0, r3
 8019312:	f7f4 fdfd 	bl	800df10 <lwip_htons>
 8019316:	4603      	mov	r3, r0
 8019318:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801931a:	69fb      	ldr	r3, [r7, #28]
 801931c:	781b      	ldrb	r3, [r3, #0]
 801931e:	f003 030f 	and.w	r3, r3, #15
 8019322:	b2db      	uxtb	r3, r3
 8019324:	009b      	lsls	r3, r3, #2
 8019326:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019328:	7e7b      	ldrb	r3, [r7, #25]
 801932a:	b29b      	uxth	r3, r3
 801932c:	8b7a      	ldrh	r2, [r7, #26]
 801932e:	429a      	cmp	r2, r3
 8019330:	d202      	bcs.n	8019338 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019332:	f04f 33ff 	mov.w	r3, #4294967295
 8019336:	e135      	b.n	80195a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019338:	7e7b      	ldrb	r3, [r7, #25]
 801933a:	b29b      	uxth	r3, r3
 801933c:	8b7a      	ldrh	r2, [r7, #26]
 801933e:	1ad3      	subs	r3, r2, r3
 8019340:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019342:	69fb      	ldr	r3, [r7, #28]
 8019344:	88db      	ldrh	r3, [r3, #6]
 8019346:	b29b      	uxth	r3, r3
 8019348:	4618      	mov	r0, r3
 801934a:	f7f4 fde1 	bl	800df10 <lwip_htons>
 801934e:	4603      	mov	r3, r0
 8019350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019354:	b29b      	uxth	r3, r3
 8019356:	00db      	lsls	r3, r3, #3
 8019358:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801935a:	68bb      	ldr	r3, [r7, #8]
 801935c:	685b      	ldr	r3, [r3, #4]
 801935e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019362:	2200      	movs	r2, #0
 8019364:	701a      	strb	r2, [r3, #0]
 8019366:	2200      	movs	r2, #0
 8019368:	705a      	strb	r2, [r3, #1]
 801936a:	2200      	movs	r2, #0
 801936c:	709a      	strb	r2, [r3, #2]
 801936e:	2200      	movs	r2, #0
 8019370:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019374:	8afa      	ldrh	r2, [r7, #22]
 8019376:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019378:	8afa      	ldrh	r2, [r7, #22]
 801937a:	8b7b      	ldrh	r3, [r7, #26]
 801937c:	4413      	add	r3, r2
 801937e:	b29a      	uxth	r2, r3
 8019380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019382:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019386:	88db      	ldrh	r3, [r3, #6]
 8019388:	b29b      	uxth	r3, r3
 801938a:	8afa      	ldrh	r2, [r7, #22]
 801938c:	429a      	cmp	r2, r3
 801938e:	d902      	bls.n	8019396 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019390:	f04f 33ff 	mov.w	r3, #4294967295
 8019394:	e106      	b.n	80195a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	685b      	ldr	r3, [r3, #4]
 801939a:	627b      	str	r3, [r7, #36]	; 0x24
 801939c:	e068      	b.n	8019470 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193a0:	685b      	ldr	r3, [r3, #4]
 80193a2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80193a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193a6:	889b      	ldrh	r3, [r3, #4]
 80193a8:	b29a      	uxth	r2, r3
 80193aa:	693b      	ldr	r3, [r7, #16]
 80193ac:	889b      	ldrh	r3, [r3, #4]
 80193ae:	b29b      	uxth	r3, r3
 80193b0:	429a      	cmp	r2, r3
 80193b2:	d235      	bcs.n	8019420 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80193b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80193b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80193ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d020      	beq.n	8019402 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80193c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193c2:	889b      	ldrh	r3, [r3, #4]
 80193c4:	b29a      	uxth	r2, r3
 80193c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c8:	88db      	ldrh	r3, [r3, #6]
 80193ca:	b29b      	uxth	r3, r3
 80193cc:	429a      	cmp	r2, r3
 80193ce:	d307      	bcc.n	80193e0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80193d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193d2:	88db      	ldrh	r3, [r3, #6]
 80193d4:	b29a      	uxth	r2, r3
 80193d6:	693b      	ldr	r3, [r7, #16]
 80193d8:	889b      	ldrh	r3, [r3, #4]
 80193da:	b29b      	uxth	r3, r3
 80193dc:	429a      	cmp	r2, r3
 80193de:	d902      	bls.n	80193e6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80193e0:	f04f 33ff 	mov.w	r3, #4294967295
 80193e4:	e0de      	b.n	80195a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80193e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e8:	68ba      	ldr	r2, [r7, #8]
 80193ea:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80193ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193ee:	88db      	ldrh	r3, [r3, #6]
 80193f0:	b29a      	uxth	r2, r3
 80193f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193f4:	889b      	ldrh	r3, [r3, #4]
 80193f6:	b29b      	uxth	r3, r3
 80193f8:	429a      	cmp	r2, r3
 80193fa:	d03d      	beq.n	8019478 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80193fc:	2300      	movs	r3, #0
 80193fe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019400:	e03a      	b.n	8019478 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019404:	88db      	ldrh	r3, [r3, #6]
 8019406:	b29a      	uxth	r2, r3
 8019408:	693b      	ldr	r3, [r7, #16]
 801940a:	889b      	ldrh	r3, [r3, #4]
 801940c:	b29b      	uxth	r3, r3
 801940e:	429a      	cmp	r2, r3
 8019410:	d902      	bls.n	8019418 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019412:	f04f 33ff 	mov.w	r3, #4294967295
 8019416:	e0c5      	b.n	80195a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	68ba      	ldr	r2, [r7, #8]
 801941c:	605a      	str	r2, [r3, #4]
      break;
 801941e:	e02b      	b.n	8019478 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019422:	889b      	ldrh	r3, [r3, #4]
 8019424:	b29a      	uxth	r2, r3
 8019426:	693b      	ldr	r3, [r7, #16]
 8019428:	889b      	ldrh	r3, [r3, #4]
 801942a:	b29b      	uxth	r3, r3
 801942c:	429a      	cmp	r2, r3
 801942e:	d102      	bne.n	8019436 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019430:	f04f 33ff 	mov.w	r3, #4294967295
 8019434:	e0b6      	b.n	80195a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019438:	889b      	ldrh	r3, [r3, #4]
 801943a:	b29a      	uxth	r2, r3
 801943c:	693b      	ldr	r3, [r7, #16]
 801943e:	88db      	ldrh	r3, [r3, #6]
 8019440:	b29b      	uxth	r3, r3
 8019442:	429a      	cmp	r2, r3
 8019444:	d202      	bcs.n	801944c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019446:	f04f 33ff 	mov.w	r3, #4294967295
 801944a:	e0ab      	b.n	80195a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801944e:	2b00      	cmp	r3, #0
 8019450:	d009      	beq.n	8019466 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019454:	88db      	ldrh	r3, [r3, #6]
 8019456:	b29a      	uxth	r2, r3
 8019458:	693b      	ldr	r3, [r7, #16]
 801945a:	889b      	ldrh	r3, [r3, #4]
 801945c:	b29b      	uxth	r3, r3
 801945e:	429a      	cmp	r2, r3
 8019460:	d001      	beq.n	8019466 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019462:	2300      	movs	r3, #0
 8019464:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019466:	693b      	ldr	r3, [r7, #16]
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801946c:	693b      	ldr	r3, [r7, #16]
 801946e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019472:	2b00      	cmp	r3, #0
 8019474:	d193      	bne.n	801939e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019476:	e000      	b.n	801947a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019478:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801947c:	2b00      	cmp	r3, #0
 801947e:	d12d      	bne.n	80194dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019482:	2b00      	cmp	r3, #0
 8019484:	d01c      	beq.n	80194c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019488:	88db      	ldrh	r3, [r3, #6]
 801948a:	b29a      	uxth	r2, r3
 801948c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801948e:	889b      	ldrh	r3, [r3, #4]
 8019490:	b29b      	uxth	r3, r3
 8019492:	429a      	cmp	r2, r3
 8019494:	d906      	bls.n	80194a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019496:	4b45      	ldr	r3, [pc, #276]	; (80195ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019498:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801949c:	4944      	ldr	r1, [pc, #272]	; (80195b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801949e:	4845      	ldr	r0, [pc, #276]	; (80195b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80194a0:	f001 fae2 	bl	801aa68 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80194a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194a6:	68ba      	ldr	r2, [r7, #8]
 80194a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80194aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ac:	88db      	ldrh	r3, [r3, #6]
 80194ae:	b29a      	uxth	r2, r3
 80194b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194b2:	889b      	ldrh	r3, [r3, #4]
 80194b4:	b29b      	uxth	r3, r3
 80194b6:	429a      	cmp	r2, r3
 80194b8:	d010      	beq.n	80194dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80194ba:	2300      	movs	r3, #0
 80194bc:	623b      	str	r3, [r7, #32]
 80194be:	e00d      	b.n	80194dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	685b      	ldr	r3, [r3, #4]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d006      	beq.n	80194d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80194c8:	4b38      	ldr	r3, [pc, #224]	; (80195ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80194ca:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80194ce:	493a      	ldr	r1, [pc, #232]	; (80195b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80194d0:	4838      	ldr	r0, [pc, #224]	; (80195b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80194d2:	f001 fac9 	bl	801aa68 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	68ba      	ldr	r2, [r7, #8]
 80194da:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d105      	bne.n	80194ee <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	7f9b      	ldrb	r3, [r3, #30]
 80194e6:	f003 0301 	and.w	r3, r3, #1
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d059      	beq.n	80195a2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80194ee:	6a3b      	ldr	r3, [r7, #32]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d04f      	beq.n	8019594 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	685b      	ldr	r3, [r3, #4]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d006      	beq.n	801950a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	685b      	ldr	r3, [r3, #4]
 8019500:	685b      	ldr	r3, [r3, #4]
 8019502:	889b      	ldrh	r3, [r3, #4]
 8019504:	b29b      	uxth	r3, r3
 8019506:	2b00      	cmp	r3, #0
 8019508:	d002      	beq.n	8019510 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801950a:	2300      	movs	r3, #0
 801950c:	623b      	str	r3, [r7, #32]
 801950e:	e041      	b.n	8019594 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019512:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801951a:	e012      	b.n	8019542 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801951e:	685b      	ldr	r3, [r3, #4]
 8019520:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019524:	88db      	ldrh	r3, [r3, #6]
 8019526:	b29a      	uxth	r2, r3
 8019528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801952a:	889b      	ldrh	r3, [r3, #4]
 801952c:	b29b      	uxth	r3, r3
 801952e:	429a      	cmp	r2, r3
 8019530:	d002      	beq.n	8019538 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019532:	2300      	movs	r3, #0
 8019534:	623b      	str	r3, [r7, #32]
            break;
 8019536:	e007      	b.n	8019548 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801953a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801953c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019544:	2b00      	cmp	r3, #0
 8019546:	d1e9      	bne.n	801951c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019548:	6a3b      	ldr	r3, [r7, #32]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d022      	beq.n	8019594 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	685b      	ldr	r3, [r3, #4]
 8019552:	2b00      	cmp	r3, #0
 8019554:	d106      	bne.n	8019564 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019556:	4b15      	ldr	r3, [pc, #84]	; (80195ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019558:	f240 12df 	movw	r2, #479	; 0x1df
 801955c:	4917      	ldr	r1, [pc, #92]	; (80195bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801955e:	4815      	ldr	r0, [pc, #84]	; (80195b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019560:	f001 fa82 	bl	801aa68 <iprintf>
          LWIP_ASSERT("sanity check",
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	685b      	ldr	r3, [r3, #4]
 8019568:	685b      	ldr	r3, [r3, #4]
 801956a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801956c:	429a      	cmp	r2, r3
 801956e:	d106      	bne.n	801957e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019570:	4b0e      	ldr	r3, [pc, #56]	; (80195ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019572:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019576:	4911      	ldr	r1, [pc, #68]	; (80195bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019578:	480e      	ldr	r0, [pc, #56]	; (80195b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801957a:	f001 fa75 	bl	801aa68 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801957e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d006      	beq.n	8019594 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019586:	4b09      	ldr	r3, [pc, #36]	; (80195ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019588:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801958c:	490c      	ldr	r1, [pc, #48]	; (80195c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801958e:	4809      	ldr	r0, [pc, #36]	; (80195b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019590:	f001 fa6a 	bl	801aa68 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019594:	6a3b      	ldr	r3, [r7, #32]
 8019596:	2b00      	cmp	r3, #0
 8019598:	bf14      	ite	ne
 801959a:	2301      	movne	r3, #1
 801959c:	2300      	moveq	r3, #0
 801959e:	b2db      	uxtb	r3, r3
 80195a0:	e000      	b.n	80195a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80195a2:	2300      	movs	r3, #0
}
 80195a4:	4618      	mov	r0, r3
 80195a6:	3730      	adds	r7, #48	; 0x30
 80195a8:	46bd      	mov	sp, r7
 80195aa:	bd80      	pop	{r7, pc}
 80195ac:	0801ecc4 	.word	0x0801ecc4
 80195b0:	0801eda8 	.word	0x0801eda8
 80195b4:	0801ed0c 	.word	0x0801ed0c
 80195b8:	0801edc8 	.word	0x0801edc8
 80195bc:	0801ee00 	.word	0x0801ee00
 80195c0:	0801ee10 	.word	0x0801ee10

080195c4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80195c4:	b580      	push	{r7, lr}
 80195c6:	b08e      	sub	sp, #56	; 0x38
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	685b      	ldr	r3, [r3, #4]
 80195d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80195d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195d4:	781b      	ldrb	r3, [r3, #0]
 80195d6:	f003 030f 	and.w	r3, r3, #15
 80195da:	b2db      	uxtb	r3, r3
 80195dc:	009b      	lsls	r3, r3, #2
 80195de:	b2db      	uxtb	r3, r3
 80195e0:	2b14      	cmp	r3, #20
 80195e2:	f040 8167 	bne.w	80198b4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80195e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195e8:	88db      	ldrh	r3, [r3, #6]
 80195ea:	b29b      	uxth	r3, r3
 80195ec:	4618      	mov	r0, r3
 80195ee:	f7f4 fc8f 	bl	800df10 <lwip_htons>
 80195f2:	4603      	mov	r3, r0
 80195f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80195f8:	b29b      	uxth	r3, r3
 80195fa:	00db      	lsls	r3, r3, #3
 80195fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80195fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019600:	885b      	ldrh	r3, [r3, #2]
 8019602:	b29b      	uxth	r3, r3
 8019604:	4618      	mov	r0, r3
 8019606:	f7f4 fc83 	bl	800df10 <lwip_htons>
 801960a:	4603      	mov	r3, r0
 801960c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019610:	781b      	ldrb	r3, [r3, #0]
 8019612:	f003 030f 	and.w	r3, r3, #15
 8019616:	b2db      	uxtb	r3, r3
 8019618:	009b      	lsls	r3, r3, #2
 801961a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801961e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019622:	b29b      	uxth	r3, r3
 8019624:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019626:	429a      	cmp	r2, r3
 8019628:	f0c0 8146 	bcc.w	80198b8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801962c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019630:	b29b      	uxth	r3, r3
 8019632:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019634:	1ad3      	subs	r3, r2, r3
 8019636:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019638:	6878      	ldr	r0, [r7, #4]
 801963a:	f7f6 f8af 	bl	800f79c <pbuf_clen>
 801963e:	4603      	mov	r3, r0
 8019640:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019642:	4b9f      	ldr	r3, [pc, #636]	; (80198c0 <ip4_reass+0x2fc>)
 8019644:	881b      	ldrh	r3, [r3, #0]
 8019646:	461a      	mov	r2, r3
 8019648:	8c3b      	ldrh	r3, [r7, #32]
 801964a:	4413      	add	r3, r2
 801964c:	2b0a      	cmp	r3, #10
 801964e:	dd10      	ble.n	8019672 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019650:	8c3b      	ldrh	r3, [r7, #32]
 8019652:	4619      	mov	r1, r3
 8019654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019656:	f7ff fd81 	bl	801915c <ip_reass_remove_oldest_datagram>
 801965a:	4603      	mov	r3, r0
 801965c:	2b00      	cmp	r3, #0
 801965e:	f000 812d 	beq.w	80198bc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019662:	4b97      	ldr	r3, [pc, #604]	; (80198c0 <ip4_reass+0x2fc>)
 8019664:	881b      	ldrh	r3, [r3, #0]
 8019666:	461a      	mov	r2, r3
 8019668:	8c3b      	ldrh	r3, [r7, #32]
 801966a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801966c:	2b0a      	cmp	r3, #10
 801966e:	f300 8125 	bgt.w	80198bc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019672:	4b94      	ldr	r3, [pc, #592]	; (80198c4 <ip4_reass+0x300>)
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	633b      	str	r3, [r7, #48]	; 0x30
 8019678:	e015      	b.n	80196a6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801967c:	695a      	ldr	r2, [r3, #20]
 801967e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019680:	68db      	ldr	r3, [r3, #12]
 8019682:	429a      	cmp	r2, r3
 8019684:	d10c      	bne.n	80196a0 <ip4_reass+0xdc>
 8019686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019688:	699a      	ldr	r2, [r3, #24]
 801968a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801968c:	691b      	ldr	r3, [r3, #16]
 801968e:	429a      	cmp	r2, r3
 8019690:	d106      	bne.n	80196a0 <ip4_reass+0xdc>
 8019692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019694:	899a      	ldrh	r2, [r3, #12]
 8019696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019698:	889b      	ldrh	r3, [r3, #4]
 801969a:	b29b      	uxth	r3, r3
 801969c:	429a      	cmp	r2, r3
 801969e:	d006      	beq.n	80196ae <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80196a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	633b      	str	r3, [r7, #48]	; 0x30
 80196a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d1e6      	bne.n	801967a <ip4_reass+0xb6>
 80196ac:	e000      	b.n	80196b0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80196ae:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80196b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d109      	bne.n	80196ca <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80196b6:	8c3b      	ldrh	r3, [r7, #32]
 80196b8:	4619      	mov	r1, r3
 80196ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80196bc:	f7ff fdb0 	bl	8019220 <ip_reass_enqueue_new_datagram>
 80196c0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80196c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d11c      	bne.n	8019702 <ip4_reass+0x13e>
      goto nullreturn;
 80196c8:	e109      	b.n	80198de <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80196ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196cc:	88db      	ldrh	r3, [r3, #6]
 80196ce:	b29b      	uxth	r3, r3
 80196d0:	4618      	mov	r0, r3
 80196d2:	f7f4 fc1d 	bl	800df10 <lwip_htons>
 80196d6:	4603      	mov	r3, r0
 80196d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d110      	bne.n	8019702 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80196e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196e2:	89db      	ldrh	r3, [r3, #14]
 80196e4:	4618      	mov	r0, r3
 80196e6:	f7f4 fc13 	bl	800df10 <lwip_htons>
 80196ea:	4603      	mov	r3, r0
 80196ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d006      	beq.n	8019702 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80196f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196f6:	3308      	adds	r3, #8
 80196f8:	2214      	movs	r2, #20
 80196fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80196fc:	4618      	mov	r0, r3
 80196fe:	f001 f8f3 	bl	801a8e8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019704:	88db      	ldrh	r3, [r3, #6]
 8019706:	b29b      	uxth	r3, r3
 8019708:	f003 0320 	and.w	r3, r3, #32
 801970c:	2b00      	cmp	r3, #0
 801970e:	bf0c      	ite	eq
 8019710:	2301      	moveq	r3, #1
 8019712:	2300      	movne	r3, #0
 8019714:	b2db      	uxtb	r3, r3
 8019716:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019718:	69fb      	ldr	r3, [r7, #28]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d00e      	beq.n	801973c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801971e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019722:	4413      	add	r3, r2
 8019724:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019726:	8b7a      	ldrh	r2, [r7, #26]
 8019728:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801972a:	429a      	cmp	r2, r3
 801972c:	f0c0 80a0 	bcc.w	8019870 <ip4_reass+0x2ac>
 8019730:	8b7b      	ldrh	r3, [r7, #26]
 8019732:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019736:	4293      	cmp	r3, r2
 8019738:	f200 809a 	bhi.w	8019870 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801973c:	69fa      	ldr	r2, [r7, #28]
 801973e:	6879      	ldr	r1, [r7, #4]
 8019740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019742:	f7ff fdd5 	bl	80192f0 <ip_reass_chain_frag_into_datagram_and_validate>
 8019746:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019748:	697b      	ldr	r3, [r7, #20]
 801974a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801974e:	f000 8091 	beq.w	8019874 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019752:	4b5b      	ldr	r3, [pc, #364]	; (80198c0 <ip4_reass+0x2fc>)
 8019754:	881a      	ldrh	r2, [r3, #0]
 8019756:	8c3b      	ldrh	r3, [r7, #32]
 8019758:	4413      	add	r3, r2
 801975a:	b29a      	uxth	r2, r3
 801975c:	4b58      	ldr	r3, [pc, #352]	; (80198c0 <ip4_reass+0x2fc>)
 801975e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019760:	69fb      	ldr	r3, [r7, #28]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d00d      	beq.n	8019782 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019766:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801976a:	4413      	add	r3, r2
 801976c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019770:	8a7a      	ldrh	r2, [r7, #18]
 8019772:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019776:	7f9b      	ldrb	r3, [r3, #30]
 8019778:	f043 0301 	orr.w	r3, r3, #1
 801977c:	b2da      	uxtb	r2, r3
 801977e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019780:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019782:	697b      	ldr	r3, [r7, #20]
 8019784:	2b01      	cmp	r3, #1
 8019786:	d171      	bne.n	801986c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801978a:	8b9b      	ldrh	r3, [r3, #28]
 801978c:	3314      	adds	r3, #20
 801978e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019792:	685b      	ldr	r3, [r3, #4]
 8019794:	685b      	ldr	r3, [r3, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801979c:	685b      	ldr	r3, [r3, #4]
 801979e:	685b      	ldr	r3, [r3, #4]
 80197a0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80197a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197a4:	3308      	adds	r3, #8
 80197a6:	2214      	movs	r2, #20
 80197a8:	4619      	mov	r1, r3
 80197aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80197ac:	f001 f89c 	bl	801a8e8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80197b0:	8a3b      	ldrh	r3, [r7, #16]
 80197b2:	4618      	mov	r0, r3
 80197b4:	f7f4 fbac 	bl	800df10 <lwip_htons>
 80197b8:	4603      	mov	r3, r0
 80197ba:	461a      	mov	r2, r3
 80197bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197be:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80197c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197c2:	2200      	movs	r2, #0
 80197c4:	719a      	strb	r2, [r3, #6]
 80197c6:	2200      	movs	r2, #0
 80197c8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80197ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197cc:	2200      	movs	r2, #0
 80197ce:	729a      	strb	r2, [r3, #10]
 80197d0:	2200      	movs	r2, #0
 80197d2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80197d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197d6:	685b      	ldr	r3, [r3, #4]
 80197d8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80197da:	e00d      	b.n	80197f8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80197dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197de:	685b      	ldr	r3, [r3, #4]
 80197e0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80197e2:	2114      	movs	r1, #20
 80197e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80197e6:	f7f5 fec5 	bl	800f574 <pbuf_remove_header>
      pbuf_cat(p, r);
 80197ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80197ec:	6878      	ldr	r0, [r7, #4]
 80197ee:	f7f6 f815 	bl	800f81c <pbuf_cat>
      r = iprh->next_pbuf;
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80197f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d1ee      	bne.n	80197dc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80197fe:	4b31      	ldr	r3, [pc, #196]	; (80198c4 <ip4_reass+0x300>)
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019804:	429a      	cmp	r2, r3
 8019806:	d102      	bne.n	801980e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019808:	2300      	movs	r3, #0
 801980a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801980c:	e010      	b.n	8019830 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801980e:	4b2d      	ldr	r3, [pc, #180]	; (80198c4 <ip4_reass+0x300>)
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019814:	e007      	b.n	8019826 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8019816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801981c:	429a      	cmp	r2, r3
 801981e:	d006      	beq.n	801982e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019828:	2b00      	cmp	r3, #0
 801982a:	d1f4      	bne.n	8019816 <ip4_reass+0x252>
 801982c:	e000      	b.n	8019830 <ip4_reass+0x26c>
          break;
 801982e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019830:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019834:	f7ff fd2e 	bl	8019294 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019838:	6878      	ldr	r0, [r7, #4]
 801983a:	f7f5 ffaf 	bl	800f79c <pbuf_clen>
 801983e:	4603      	mov	r3, r0
 8019840:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019842:	4b1f      	ldr	r3, [pc, #124]	; (80198c0 <ip4_reass+0x2fc>)
 8019844:	881b      	ldrh	r3, [r3, #0]
 8019846:	8c3a      	ldrh	r2, [r7, #32]
 8019848:	429a      	cmp	r2, r3
 801984a:	d906      	bls.n	801985a <ip4_reass+0x296>
 801984c:	4b1e      	ldr	r3, [pc, #120]	; (80198c8 <ip4_reass+0x304>)
 801984e:	f240 229b 	movw	r2, #667	; 0x29b
 8019852:	491e      	ldr	r1, [pc, #120]	; (80198cc <ip4_reass+0x308>)
 8019854:	481e      	ldr	r0, [pc, #120]	; (80198d0 <ip4_reass+0x30c>)
 8019856:	f001 f907 	bl	801aa68 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801985a:	4b19      	ldr	r3, [pc, #100]	; (80198c0 <ip4_reass+0x2fc>)
 801985c:	881a      	ldrh	r2, [r3, #0]
 801985e:	8c3b      	ldrh	r3, [r7, #32]
 8019860:	1ad3      	subs	r3, r2, r3
 8019862:	b29a      	uxth	r2, r3
 8019864:	4b16      	ldr	r3, [pc, #88]	; (80198c0 <ip4_reass+0x2fc>)
 8019866:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	e03c      	b.n	80198e6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801986c:	2300      	movs	r3, #0
 801986e:	e03a      	b.n	80198e6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8019870:	bf00      	nop
 8019872:	e000      	b.n	8019876 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8019874:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019878:	2b00      	cmp	r3, #0
 801987a:	d106      	bne.n	801988a <ip4_reass+0x2c6>
 801987c:	4b12      	ldr	r3, [pc, #72]	; (80198c8 <ip4_reass+0x304>)
 801987e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8019882:	4914      	ldr	r1, [pc, #80]	; (80198d4 <ip4_reass+0x310>)
 8019884:	4812      	ldr	r0, [pc, #72]	; (80198d0 <ip4_reass+0x30c>)
 8019886:	f001 f8ef 	bl	801aa68 <iprintf>
  if (ipr->p == NULL) {
 801988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801988c:	685b      	ldr	r3, [r3, #4]
 801988e:	2b00      	cmp	r3, #0
 8019890:	d124      	bne.n	80198dc <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019892:	4b0c      	ldr	r3, [pc, #48]	; (80198c4 <ip4_reass+0x300>)
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019898:	429a      	cmp	r2, r3
 801989a:	d006      	beq.n	80198aa <ip4_reass+0x2e6>
 801989c:	4b0a      	ldr	r3, [pc, #40]	; (80198c8 <ip4_reass+0x304>)
 801989e:	f240 22ab 	movw	r2, #683	; 0x2ab
 80198a2:	490d      	ldr	r1, [pc, #52]	; (80198d8 <ip4_reass+0x314>)
 80198a4:	480a      	ldr	r0, [pc, #40]	; (80198d0 <ip4_reass+0x30c>)
 80198a6:	f001 f8df 	bl	801aa68 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80198aa:	2100      	movs	r1, #0
 80198ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80198ae:	f7ff fcf1 	bl	8019294 <ip_reass_dequeue_datagram>
 80198b2:	e014      	b.n	80198de <ip4_reass+0x31a>
    goto nullreturn;
 80198b4:	bf00      	nop
 80198b6:	e012      	b.n	80198de <ip4_reass+0x31a>
    goto nullreturn;
 80198b8:	bf00      	nop
 80198ba:	e010      	b.n	80198de <ip4_reass+0x31a>
      goto nullreturn;
 80198bc:	bf00      	nop
 80198be:	e00e      	b.n	80198de <ip4_reass+0x31a>
 80198c0:	2000867c 	.word	0x2000867c
 80198c4:	20008678 	.word	0x20008678
 80198c8:	0801ecc4 	.word	0x0801ecc4
 80198cc:	0801ee34 	.word	0x0801ee34
 80198d0:	0801ed0c 	.word	0x0801ed0c
 80198d4:	0801ee50 	.word	0x0801ee50
 80198d8:	0801ee5c 	.word	0x0801ee5c
  }

nullreturn:
 80198dc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80198de:	6878      	ldr	r0, [r7, #4]
 80198e0:	f7f5 fece 	bl	800f680 <pbuf_free>
  return NULL;
 80198e4:	2300      	movs	r3, #0
}
 80198e6:	4618      	mov	r0, r3
 80198e8:	3738      	adds	r7, #56	; 0x38
 80198ea:	46bd      	mov	sp, r7
 80198ec:	bd80      	pop	{r7, pc}
 80198ee:	bf00      	nop

080198f0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80198f0:	b580      	push	{r7, lr}
 80198f2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80198f4:	2005      	movs	r0, #5
 80198f6:	f7f4 ffc1 	bl	800e87c <memp_malloc>
 80198fa:	4603      	mov	r3, r0
}
 80198fc:	4618      	mov	r0, r3
 80198fe:	bd80      	pop	{r7, pc}

08019900 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b082      	sub	sp, #8
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	2b00      	cmp	r3, #0
 801990c:	d106      	bne.n	801991c <ip_frag_free_pbuf_custom_ref+0x1c>
 801990e:	4b07      	ldr	r3, [pc, #28]	; (801992c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019910:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019914:	4906      	ldr	r1, [pc, #24]	; (8019930 <ip_frag_free_pbuf_custom_ref+0x30>)
 8019916:	4807      	ldr	r0, [pc, #28]	; (8019934 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019918:	f001 f8a6 	bl	801aa68 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801991c:	6879      	ldr	r1, [r7, #4]
 801991e:	2005      	movs	r0, #5
 8019920:	f7f4 fffe 	bl	800e920 <memp_free>
}
 8019924:	bf00      	nop
 8019926:	3708      	adds	r7, #8
 8019928:	46bd      	mov	sp, r7
 801992a:	bd80      	pop	{r7, pc}
 801992c:	0801ecc4 	.word	0x0801ecc4
 8019930:	0801ee7c 	.word	0x0801ee7c
 8019934:	0801ed0c 	.word	0x0801ed0c

08019938 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019938:	b580      	push	{r7, lr}
 801993a:	b084      	sub	sp, #16
 801993c:	af00      	add	r7, sp, #0
 801993e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019944:	68fb      	ldr	r3, [r7, #12]
 8019946:	2b00      	cmp	r3, #0
 8019948:	d106      	bne.n	8019958 <ipfrag_free_pbuf_custom+0x20>
 801994a:	4b11      	ldr	r3, [pc, #68]	; (8019990 <ipfrag_free_pbuf_custom+0x58>)
 801994c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019950:	4910      	ldr	r1, [pc, #64]	; (8019994 <ipfrag_free_pbuf_custom+0x5c>)
 8019952:	4811      	ldr	r0, [pc, #68]	; (8019998 <ipfrag_free_pbuf_custom+0x60>)
 8019954:	f001 f888 	bl	801aa68 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019958:	68fa      	ldr	r2, [r7, #12]
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	429a      	cmp	r2, r3
 801995e:	d006      	beq.n	801996e <ipfrag_free_pbuf_custom+0x36>
 8019960:	4b0b      	ldr	r3, [pc, #44]	; (8019990 <ipfrag_free_pbuf_custom+0x58>)
 8019962:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019966:	490d      	ldr	r1, [pc, #52]	; (801999c <ipfrag_free_pbuf_custom+0x64>)
 8019968:	480b      	ldr	r0, [pc, #44]	; (8019998 <ipfrag_free_pbuf_custom+0x60>)
 801996a:	f001 f87d 	bl	801aa68 <iprintf>
  if (pcr->original != NULL) {
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	695b      	ldr	r3, [r3, #20]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d004      	beq.n	8019980 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	695b      	ldr	r3, [r3, #20]
 801997a:	4618      	mov	r0, r3
 801997c:	f7f5 fe80 	bl	800f680 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019980:	68f8      	ldr	r0, [r7, #12]
 8019982:	f7ff ffbd 	bl	8019900 <ip_frag_free_pbuf_custom_ref>
}
 8019986:	bf00      	nop
 8019988:	3710      	adds	r7, #16
 801998a:	46bd      	mov	sp, r7
 801998c:	bd80      	pop	{r7, pc}
 801998e:	bf00      	nop
 8019990:	0801ecc4 	.word	0x0801ecc4
 8019994:	0801ee88 	.word	0x0801ee88
 8019998:	0801ed0c 	.word	0x0801ed0c
 801999c:	0801ee94 	.word	0x0801ee94

080199a0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80199a0:	b580      	push	{r7, lr}
 80199a2:	b094      	sub	sp, #80	; 0x50
 80199a4:	af02      	add	r7, sp, #8
 80199a6:	60f8      	str	r0, [r7, #12]
 80199a8:	60b9      	str	r1, [r7, #8]
 80199aa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80199ac:	2300      	movs	r3, #0
 80199ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80199b2:	68bb      	ldr	r3, [r7, #8]
 80199b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80199b6:	3b14      	subs	r3, #20
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	da00      	bge.n	80199be <ip4_frag+0x1e>
 80199bc:	3307      	adds	r3, #7
 80199be:	10db      	asrs	r3, r3, #3
 80199c0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80199c2:	2314      	movs	r3, #20
 80199c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	685b      	ldr	r3, [r3, #4]
 80199ca:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80199cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80199d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199d2:	781b      	ldrb	r3, [r3, #0]
 80199d4:	f003 030f 	and.w	r3, r3, #15
 80199d8:	b2db      	uxtb	r3, r3
 80199da:	009b      	lsls	r3, r3, #2
 80199dc:	b2db      	uxtb	r3, r3
 80199de:	2b14      	cmp	r3, #20
 80199e0:	d002      	beq.n	80199e8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80199e2:	f06f 0305 	mvn.w	r3, #5
 80199e6:	e110      	b.n	8019c0a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	895b      	ldrh	r3, [r3, #10]
 80199ec:	2b13      	cmp	r3, #19
 80199ee:	d809      	bhi.n	8019a04 <ip4_frag+0x64>
 80199f0:	4b88      	ldr	r3, [pc, #544]	; (8019c14 <ip4_frag+0x274>)
 80199f2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80199f6:	4988      	ldr	r1, [pc, #544]	; (8019c18 <ip4_frag+0x278>)
 80199f8:	4888      	ldr	r0, [pc, #544]	; (8019c1c <ip4_frag+0x27c>)
 80199fa:	f001 f835 	bl	801aa68 <iprintf>
 80199fe:	f06f 0305 	mvn.w	r3, #5
 8019a02:	e102      	b.n	8019c0a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a06:	88db      	ldrh	r3, [r3, #6]
 8019a08:	b29b      	uxth	r3, r3
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	f7f4 fa80 	bl	800df10 <lwip_htons>
 8019a10:	4603      	mov	r3, r0
 8019a12:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019a14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019a16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019a1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019a1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019a24:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	891b      	ldrh	r3, [r3, #8]
 8019a2a:	3b14      	subs	r3, #20
 8019a2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019a30:	e0e1      	b.n	8019bf6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019a32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019a34:	00db      	lsls	r3, r3, #3
 8019a36:	b29b      	uxth	r3, r3
 8019a38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019a3c:	4293      	cmp	r3, r2
 8019a3e:	bf28      	it	cs
 8019a40:	4613      	movcs	r3, r2
 8019a42:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019a44:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019a48:	2114      	movs	r1, #20
 8019a4a:	200e      	movs	r0, #14
 8019a4c:	f7f5 fb34 	bl	800f0b8 <pbuf_alloc>
 8019a50:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	f000 80d5 	beq.w	8019c04 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a5c:	895b      	ldrh	r3, [r3, #10]
 8019a5e:	2b13      	cmp	r3, #19
 8019a60:	d806      	bhi.n	8019a70 <ip4_frag+0xd0>
 8019a62:	4b6c      	ldr	r3, [pc, #432]	; (8019c14 <ip4_frag+0x274>)
 8019a64:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019a68:	496d      	ldr	r1, [pc, #436]	; (8019c20 <ip4_frag+0x280>)
 8019a6a:	486c      	ldr	r0, [pc, #432]	; (8019c1c <ip4_frag+0x27c>)
 8019a6c:	f000 fffc 	bl	801aa68 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a72:	685b      	ldr	r3, [r3, #4]
 8019a74:	2214      	movs	r2, #20
 8019a76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019a78:	4618      	mov	r0, r3
 8019a7a:	f000 ff35 	bl	801a8e8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a80:	685b      	ldr	r3, [r3, #4]
 8019a82:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019a84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019a86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019a8a:	e064      	b.n	8019b56 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	895a      	ldrh	r2, [r3, #10]
 8019a90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019a92:	1ad3      	subs	r3, r2, r3
 8019a94:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	895b      	ldrh	r3, [r3, #10]
 8019a9a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019a9c:	429a      	cmp	r2, r3
 8019a9e:	d906      	bls.n	8019aae <ip4_frag+0x10e>
 8019aa0:	4b5c      	ldr	r3, [pc, #368]	; (8019c14 <ip4_frag+0x274>)
 8019aa2:	f240 322d 	movw	r2, #813	; 0x32d
 8019aa6:	495f      	ldr	r1, [pc, #380]	; (8019c24 <ip4_frag+0x284>)
 8019aa8:	485c      	ldr	r0, [pc, #368]	; (8019c1c <ip4_frag+0x27c>)
 8019aaa:	f000 ffdd 	bl	801aa68 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019aae:	8bfa      	ldrh	r2, [r7, #30]
 8019ab0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019ab4:	4293      	cmp	r3, r2
 8019ab6:	bf28      	it	cs
 8019ab8:	4613      	movcs	r3, r2
 8019aba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019abe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d105      	bne.n	8019ad2 <ip4_frag+0x132>
        poff = 0;
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	60fb      	str	r3, [r7, #12]
        continue;
 8019ad0:	e041      	b.n	8019b56 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019ad2:	f7ff ff0d 	bl	80198f0 <ip_frag_alloc_pbuf_custom_ref>
 8019ad6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019ad8:	69bb      	ldr	r3, [r7, #24]
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d103      	bne.n	8019ae6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019ae0:	f7f5 fdce 	bl	800f680 <pbuf_free>
        goto memerr;
 8019ae4:	e08f      	b.n	8019c06 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019ae6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019aec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019aee:	4413      	add	r3, r2
 8019af0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019af4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019af8:	9201      	str	r2, [sp, #4]
 8019afa:	9300      	str	r3, [sp, #0]
 8019afc:	4603      	mov	r3, r0
 8019afe:	2241      	movs	r2, #65	; 0x41
 8019b00:	2000      	movs	r0, #0
 8019b02:	f7f5 fc03 	bl	800f30c <pbuf_alloced_custom>
 8019b06:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019b08:	697b      	ldr	r3, [r7, #20]
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d106      	bne.n	8019b1c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019b0e:	69b8      	ldr	r0, [r7, #24]
 8019b10:	f7ff fef6 	bl	8019900 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019b16:	f7f5 fdb3 	bl	800f680 <pbuf_free>
        goto memerr;
 8019b1a:	e074      	b.n	8019c06 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019b1c:	68f8      	ldr	r0, [r7, #12]
 8019b1e:	f7f5 fe55 	bl	800f7cc <pbuf_ref>
      pcr->original = p;
 8019b22:	69bb      	ldr	r3, [r7, #24]
 8019b24:	68fa      	ldr	r2, [r7, #12]
 8019b26:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019b28:	69bb      	ldr	r3, [r7, #24]
 8019b2a:	4a3f      	ldr	r2, [pc, #252]	; (8019c28 <ip4_frag+0x288>)
 8019b2c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019b2e:	6979      	ldr	r1, [r7, #20]
 8019b30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019b32:	f7f5 fe73 	bl	800f81c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019b36:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019b3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019b3e:	1ad3      	subs	r3, r2, r3
 8019b40:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019b44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d004      	beq.n	8019b56 <ip4_frag+0x1b6>
        poff = 0;
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019b56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d196      	bne.n	8019a8c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019b5e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019b60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019b64:	4413      	add	r3, r2
 8019b66:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019b68:	68bb      	ldr	r3, [r7, #8]
 8019b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019b6c:	f1a3 0213 	sub.w	r2, r3, #19
 8019b70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019b74:	429a      	cmp	r2, r3
 8019b76:	bfcc      	ite	gt
 8019b78:	2301      	movgt	r3, #1
 8019b7a:	2300      	movle	r3, #0
 8019b7c:	b2db      	uxtb	r3, r3
 8019b7e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019b80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019b88:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019b8a:	6a3b      	ldr	r3, [r7, #32]
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d002      	beq.n	8019b96 <ip4_frag+0x1f6>
 8019b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d003      	beq.n	8019b9e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019b96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019b98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019b9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019b9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f7f4 f9b5 	bl	800df10 <lwip_htons>
 8019ba6:	4603      	mov	r3, r0
 8019ba8:	461a      	mov	r2, r3
 8019baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bac:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019bae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019bb0:	3314      	adds	r3, #20
 8019bb2:	b29b      	uxth	r3, r3
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	f7f4 f9ab 	bl	800df10 <lwip_htons>
 8019bba:	4603      	mov	r3, r0
 8019bbc:	461a      	mov	r2, r3
 8019bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bc0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bc4:	2200      	movs	r2, #0
 8019bc6:	729a      	strb	r2, [r3, #10]
 8019bc8:	2200      	movs	r2, #0
 8019bca:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019bcc:	68bb      	ldr	r3, [r7, #8]
 8019bce:	695b      	ldr	r3, [r3, #20]
 8019bd0:	687a      	ldr	r2, [r7, #4]
 8019bd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019bd4:	68b8      	ldr	r0, [r7, #8]
 8019bd6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019bda:	f7f5 fd51 	bl	800f680 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019bde:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019be2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019be4:	1ad3      	subs	r3, r2, r3
 8019be6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019bea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019bee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019bf0:	4413      	add	r3, r2
 8019bf2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019bf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	f47f af19 	bne.w	8019a32 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019c00:	2300      	movs	r3, #0
 8019c02:	e002      	b.n	8019c0a <ip4_frag+0x26a>
      goto memerr;
 8019c04:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019c0a:	4618      	mov	r0, r3
 8019c0c:	3748      	adds	r7, #72	; 0x48
 8019c0e:	46bd      	mov	sp, r7
 8019c10:	bd80      	pop	{r7, pc}
 8019c12:	bf00      	nop
 8019c14:	0801ecc4 	.word	0x0801ecc4
 8019c18:	0801eea0 	.word	0x0801eea0
 8019c1c:	0801ed0c 	.word	0x0801ed0c
 8019c20:	0801eebc 	.word	0x0801eebc
 8019c24:	0801eedc 	.word	0x0801eedc
 8019c28:	08019939 	.word	0x08019939

08019c2c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019c2c:	b580      	push	{r7, lr}
 8019c2e:	b086      	sub	sp, #24
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	6078      	str	r0, [r7, #4]
 8019c34:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019c36:	230e      	movs	r3, #14
 8019c38:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	895b      	ldrh	r3, [r3, #10]
 8019c3e:	2b0e      	cmp	r3, #14
 8019c40:	d96e      	bls.n	8019d20 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	7bdb      	ldrb	r3, [r3, #15]
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d106      	bne.n	8019c58 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019c4a:	683b      	ldr	r3, [r7, #0]
 8019c4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019c50:	3301      	adds	r3, #1
 8019c52:	b2da      	uxtb	r2, r3
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	685b      	ldr	r3, [r3, #4]
 8019c5c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019c5e:	693b      	ldr	r3, [r7, #16]
 8019c60:	7b1a      	ldrb	r2, [r3, #12]
 8019c62:	7b5b      	ldrb	r3, [r3, #13]
 8019c64:	021b      	lsls	r3, r3, #8
 8019c66:	4313      	orrs	r3, r2
 8019c68:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019c6a:	693b      	ldr	r3, [r7, #16]
 8019c6c:	781b      	ldrb	r3, [r3, #0]
 8019c6e:	f003 0301 	and.w	r3, r3, #1
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d023      	beq.n	8019cbe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019c76:	693b      	ldr	r3, [r7, #16]
 8019c78:	781b      	ldrb	r3, [r3, #0]
 8019c7a:	2b01      	cmp	r3, #1
 8019c7c:	d10f      	bne.n	8019c9e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019c7e:	693b      	ldr	r3, [r7, #16]
 8019c80:	785b      	ldrb	r3, [r3, #1]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d11b      	bne.n	8019cbe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019c86:	693b      	ldr	r3, [r7, #16]
 8019c88:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019c8a:	2b5e      	cmp	r3, #94	; 0x5e
 8019c8c:	d117      	bne.n	8019cbe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	7b5b      	ldrb	r3, [r3, #13]
 8019c92:	f043 0310 	orr.w	r3, r3, #16
 8019c96:	b2da      	uxtb	r2, r3
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	735a      	strb	r2, [r3, #13]
 8019c9c:	e00f      	b.n	8019cbe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019c9e:	693b      	ldr	r3, [r7, #16]
 8019ca0:	2206      	movs	r2, #6
 8019ca2:	4928      	ldr	r1, [pc, #160]	; (8019d44 <ethernet_input+0x118>)
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	f000 fe11 	bl	801a8cc <memcmp>
 8019caa:	4603      	mov	r3, r0
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d106      	bne.n	8019cbe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	7b5b      	ldrb	r3, [r3, #13]
 8019cb4:	f043 0308 	orr.w	r3, r3, #8
 8019cb8:	b2da      	uxtb	r2, r3
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019cbe:	89fb      	ldrh	r3, [r7, #14]
 8019cc0:	2b08      	cmp	r3, #8
 8019cc2:	d003      	beq.n	8019ccc <ethernet_input+0xa0>
 8019cc4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019cc8:	d014      	beq.n	8019cf4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019cca:	e032      	b.n	8019d32 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019ccc:	683b      	ldr	r3, [r7, #0]
 8019cce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019cd2:	f003 0308 	and.w	r3, r3, #8
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d024      	beq.n	8019d24 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019cda:	8afb      	ldrh	r3, [r7, #22]
 8019cdc:	4619      	mov	r1, r3
 8019cde:	6878      	ldr	r0, [r7, #4]
 8019ce0:	f7f5 fc48 	bl	800f574 <pbuf_remove_header>
 8019ce4:	4603      	mov	r3, r0
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d11e      	bne.n	8019d28 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019cea:	6839      	ldr	r1, [r7, #0]
 8019cec:	6878      	ldr	r0, [r7, #4]
 8019cee:	f7fe ff09 	bl	8018b04 <ip4_input>
      break;
 8019cf2:	e013      	b.n	8019d1c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019cf4:	683b      	ldr	r3, [r7, #0]
 8019cf6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019cfa:	f003 0308 	and.w	r3, r3, #8
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d014      	beq.n	8019d2c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019d02:	8afb      	ldrh	r3, [r7, #22]
 8019d04:	4619      	mov	r1, r3
 8019d06:	6878      	ldr	r0, [r7, #4]
 8019d08:	f7f5 fc34 	bl	800f574 <pbuf_remove_header>
 8019d0c:	4603      	mov	r3, r0
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d10e      	bne.n	8019d30 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019d12:	6839      	ldr	r1, [r7, #0]
 8019d14:	6878      	ldr	r0, [r7, #4]
 8019d16:	f7fe f8a5 	bl	8017e64 <etharp_input>
      break;
 8019d1a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	e00c      	b.n	8019d3a <ethernet_input+0x10e>
    goto free_and_return;
 8019d20:	bf00      	nop
 8019d22:	e006      	b.n	8019d32 <ethernet_input+0x106>
        goto free_and_return;
 8019d24:	bf00      	nop
 8019d26:	e004      	b.n	8019d32 <ethernet_input+0x106>
        goto free_and_return;
 8019d28:	bf00      	nop
 8019d2a:	e002      	b.n	8019d32 <ethernet_input+0x106>
        goto free_and_return;
 8019d2c:	bf00      	nop
 8019d2e:	e000      	b.n	8019d32 <ethernet_input+0x106>
        goto free_and_return;
 8019d30:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019d32:	6878      	ldr	r0, [r7, #4]
 8019d34:	f7f5 fca4 	bl	800f680 <pbuf_free>
  return ERR_OK;
 8019d38:	2300      	movs	r3, #0
}
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	3718      	adds	r7, #24
 8019d3e:	46bd      	mov	sp, r7
 8019d40:	bd80      	pop	{r7, pc}
 8019d42:	bf00      	nop
 8019d44:	0801f0d4 	.word	0x0801f0d4

08019d48 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b086      	sub	sp, #24
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	60f8      	str	r0, [r7, #12]
 8019d50:	60b9      	str	r1, [r7, #8]
 8019d52:	607a      	str	r2, [r7, #4]
 8019d54:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019d56:	8c3b      	ldrh	r3, [r7, #32]
 8019d58:	4618      	mov	r0, r3
 8019d5a:	f7f4 f8d9 	bl	800df10 <lwip_htons>
 8019d5e:	4603      	mov	r3, r0
 8019d60:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019d62:	210e      	movs	r1, #14
 8019d64:	68b8      	ldr	r0, [r7, #8]
 8019d66:	f7f5 fbf5 	bl	800f554 <pbuf_add_header>
 8019d6a:	4603      	mov	r3, r0
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d125      	bne.n	8019dbc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019d70:	68bb      	ldr	r3, [r7, #8]
 8019d72:	685b      	ldr	r3, [r3, #4]
 8019d74:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019d76:	693b      	ldr	r3, [r7, #16]
 8019d78:	8afa      	ldrh	r2, [r7, #22]
 8019d7a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019d7c:	693b      	ldr	r3, [r7, #16]
 8019d7e:	2206      	movs	r2, #6
 8019d80:	6839      	ldr	r1, [r7, #0]
 8019d82:	4618      	mov	r0, r3
 8019d84:	f000 fdb0 	bl	801a8e8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019d88:	693b      	ldr	r3, [r7, #16]
 8019d8a:	3306      	adds	r3, #6
 8019d8c:	2206      	movs	r2, #6
 8019d8e:	6879      	ldr	r1, [r7, #4]
 8019d90:	4618      	mov	r0, r3
 8019d92:	f000 fda9 	bl	801a8e8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019d9c:	2b06      	cmp	r3, #6
 8019d9e:	d006      	beq.n	8019dae <ethernet_output+0x66>
 8019da0:	4b0a      	ldr	r3, [pc, #40]	; (8019dcc <ethernet_output+0x84>)
 8019da2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019da6:	490a      	ldr	r1, [pc, #40]	; (8019dd0 <ethernet_output+0x88>)
 8019da8:	480a      	ldr	r0, [pc, #40]	; (8019dd4 <ethernet_output+0x8c>)
 8019daa:	f000 fe5d 	bl	801aa68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	699b      	ldr	r3, [r3, #24]
 8019db2:	68b9      	ldr	r1, [r7, #8]
 8019db4:	68f8      	ldr	r0, [r7, #12]
 8019db6:	4798      	blx	r3
 8019db8:	4603      	mov	r3, r0
 8019dba:	e002      	b.n	8019dc2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019dbc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019dbe:	f06f 0301 	mvn.w	r3, #1
}
 8019dc2:	4618      	mov	r0, r3
 8019dc4:	3718      	adds	r7, #24
 8019dc6:	46bd      	mov	sp, r7
 8019dc8:	bd80      	pop	{r7, pc}
 8019dca:	bf00      	nop
 8019dcc:	0801eeec 	.word	0x0801eeec
 8019dd0:	0801ef24 	.word	0x0801ef24
 8019dd4:	0801ef58 	.word	0x0801ef58

08019dd8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b086      	sub	sp, #24
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]
 8019de0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8019de2:	683b      	ldr	r3, [r7, #0]
 8019de4:	60bb      	str	r3, [r7, #8]
 8019de6:	2304      	movs	r3, #4
 8019de8:	60fb      	str	r3, [r7, #12]
 8019dea:	2300      	movs	r3, #0
 8019dec:	613b      	str	r3, [r7, #16]
 8019dee:	2300      	movs	r3, #0
 8019df0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8019df2:	f107 0308 	add.w	r3, r7, #8
 8019df6:	2100      	movs	r1, #0
 8019df8:	4618      	mov	r0, r3
 8019dfa:	f7f1 f9ab 	bl	800b154 <osMessageCreate>
 8019dfe:	4602      	mov	r2, r0
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d102      	bne.n	8019e12 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8019e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8019e10:	e000      	b.n	8019e14 <sys_mbox_new+0x3c>

  return ERR_OK;
 8019e12:	2300      	movs	r3, #0
}
 8019e14:	4618      	mov	r0, r3
 8019e16:	3718      	adds	r7, #24
 8019e18:	46bd      	mov	sp, r7
 8019e1a:	bd80      	pop	{r7, pc}

08019e1c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019e1c:	b580      	push	{r7, lr}
 8019e1e:	b084      	sub	sp, #16
 8019e20:	af00      	add	r7, sp, #0
 8019e22:	6078      	str	r0, [r7, #4]
 8019e24:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	6839      	ldr	r1, [r7, #0]
 8019e2c:	2200      	movs	r2, #0
 8019e2e:	4618      	mov	r0, r3
 8019e30:	f7f1 f9b8 	bl	800b1a4 <osMessagePut>
 8019e34:	4603      	mov	r3, r0
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d102      	bne.n	8019e40 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019e3a:	2300      	movs	r3, #0
 8019e3c:	73fb      	strb	r3, [r7, #15]
 8019e3e:	e001      	b.n	8019e44 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019e40:	23ff      	movs	r3, #255	; 0xff
 8019e42:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019e48:	4618      	mov	r0, r3
 8019e4a:	3710      	adds	r7, #16
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	bd80      	pop	{r7, pc}

08019e50 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019e50:	b580      	push	{r7, lr}
 8019e52:	b08c      	sub	sp, #48	; 0x30
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	61f8      	str	r0, [r7, #28]
 8019e58:	61b9      	str	r1, [r7, #24]
 8019e5a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019e5c:	f7f0 ffb8 	bl	800add0 <osKernelSysTick>
 8019e60:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019e62:	697b      	ldr	r3, [r7, #20]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d017      	beq.n	8019e98 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019e68:	69fb      	ldr	r3, [r7, #28]
 8019e6a:	6819      	ldr	r1, [r3, #0]
 8019e6c:	f107 0320 	add.w	r3, r7, #32
 8019e70:	697a      	ldr	r2, [r7, #20]
 8019e72:	4618      	mov	r0, r3
 8019e74:	f7f1 f9d6 	bl	800b224 <osMessageGet>

    if(event.status == osEventMessage)
 8019e78:	6a3b      	ldr	r3, [r7, #32]
 8019e7a:	2b10      	cmp	r3, #16
 8019e7c:	d109      	bne.n	8019e92 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e80:	461a      	mov	r2, r3
 8019e82:	69bb      	ldr	r3, [r7, #24]
 8019e84:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019e86:	f7f0 ffa3 	bl	800add0 <osKernelSysTick>
 8019e8a:	4602      	mov	r2, r0
 8019e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e8e:	1ad3      	subs	r3, r2, r3
 8019e90:	e019      	b.n	8019ec6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019e92:	f04f 33ff 	mov.w	r3, #4294967295
 8019e96:	e016      	b.n	8019ec6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019e98:	69fb      	ldr	r3, [r7, #28]
 8019e9a:	6819      	ldr	r1, [r3, #0]
 8019e9c:	463b      	mov	r3, r7
 8019e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	f7f1 f9be 	bl	800b224 <osMessageGet>
 8019ea8:	f107 0320 	add.w	r3, r7, #32
 8019eac:	463a      	mov	r2, r7
 8019eae:	ca07      	ldmia	r2, {r0, r1, r2}
 8019eb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eb6:	461a      	mov	r2, r3
 8019eb8:	69bb      	ldr	r3, [r7, #24]
 8019eba:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019ebc:	f7f0 ff88 	bl	800add0 <osKernelSysTick>
 8019ec0:	4602      	mov	r2, r0
 8019ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ec4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	3730      	adds	r7, #48	; 0x30
 8019eca:	46bd      	mov	sp, r7
 8019ecc:	bd80      	pop	{r7, pc}

08019ece <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019ece:	b480      	push	{r7}
 8019ed0:	b083      	sub	sp, #12
 8019ed2:	af00      	add	r7, sp, #0
 8019ed4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d101      	bne.n	8019ee2 <sys_mbox_valid+0x14>
    return 0;
 8019ede:	2300      	movs	r3, #0
 8019ee0:	e000      	b.n	8019ee4 <sys_mbox_valid+0x16>
  else
    return 1;
 8019ee2:	2301      	movs	r3, #1
}
 8019ee4:	4618      	mov	r0, r3
 8019ee6:	370c      	adds	r7, #12
 8019ee8:	46bd      	mov	sp, r7
 8019eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eee:	4770      	bx	lr

08019ef0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019ef0:	b580      	push	{r7, lr}
 8019ef2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019ef4:	4803      	ldr	r0, [pc, #12]	; (8019f04 <sys_init+0x14>)
 8019ef6:	f7f0 ffdb 	bl	800aeb0 <osMutexCreate>
 8019efa:	4603      	mov	r3, r0
 8019efc:	4a02      	ldr	r2, [pc, #8]	; (8019f08 <sys_init+0x18>)
 8019efe:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019f00:	bf00      	nop
 8019f02:	bd80      	pop	{r7, pc}
 8019f04:	0801f0e4 	.word	0x0801f0e4
 8019f08:	2000f440 	.word	0x2000f440

08019f0c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019f0c:	b580      	push	{r7, lr}
 8019f0e:	b084      	sub	sp, #16
 8019f10:	af00      	add	r7, sp, #0
 8019f12:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019f14:	2300      	movs	r3, #0
 8019f16:	60bb      	str	r3, [r7, #8]
 8019f18:	2300      	movs	r3, #0
 8019f1a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019f1c:	f107 0308 	add.w	r3, r7, #8
 8019f20:	4618      	mov	r0, r3
 8019f22:	f7f0 ffc5 	bl	800aeb0 <osMutexCreate>
 8019f26:	4602      	mov	r2, r0
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d102      	bne.n	8019f3a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019f34:	f04f 33ff 	mov.w	r3, #4294967295
 8019f38:	e000      	b.n	8019f3c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019f3a:	2300      	movs	r3, #0
}
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	3710      	adds	r7, #16
 8019f40:	46bd      	mov	sp, r7
 8019f42:	bd80      	pop	{r7, pc}

08019f44 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019f44:	b580      	push	{r7, lr}
 8019f46:	b082      	sub	sp, #8
 8019f48:	af00      	add	r7, sp, #0
 8019f4a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	f04f 31ff 	mov.w	r1, #4294967295
 8019f54:	4618      	mov	r0, r3
 8019f56:	f7f0 ffc3 	bl	800aee0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8019f5a:	bf00      	nop
 8019f5c:	3708      	adds	r7, #8
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	bd80      	pop	{r7, pc}

08019f62 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019f62:	b580      	push	{r7, lr}
 8019f64:	b082      	sub	sp, #8
 8019f66:	af00      	add	r7, sp, #0
 8019f68:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	4618      	mov	r0, r3
 8019f70:	f7f1 f804 	bl	800af7c <osMutexRelease>
}
 8019f74:	bf00      	nop
 8019f76:	3708      	adds	r7, #8
 8019f78:	46bd      	mov	sp, r7
 8019f7a:	bd80      	pop	{r7, pc}

08019f7c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019f7c:	b580      	push	{r7, lr}
 8019f7e:	b08c      	sub	sp, #48	; 0x30
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	60f8      	str	r0, [r7, #12]
 8019f84:	60b9      	str	r1, [r7, #8]
 8019f86:	607a      	str	r2, [r7, #4]
 8019f88:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8019f8a:	f107 0314 	add.w	r3, r7, #20
 8019f8e:	2200      	movs	r2, #0
 8019f90:	601a      	str	r2, [r3, #0]
 8019f92:	605a      	str	r2, [r3, #4]
 8019f94:	609a      	str	r2, [r3, #8]
 8019f96:	60da      	str	r2, [r3, #12]
 8019f98:	611a      	str	r2, [r3, #16]
 8019f9a:	615a      	str	r2, [r3, #20]
 8019f9c:	619a      	str	r2, [r3, #24]
 8019f9e:	68fb      	ldr	r3, [r7, #12]
 8019fa0:	617b      	str	r3, [r7, #20]
 8019fa2:	68bb      	ldr	r3, [r7, #8]
 8019fa4:	61bb      	str	r3, [r7, #24]
 8019fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fa8:	b21b      	sxth	r3, r3
 8019faa:	83bb      	strh	r3, [r7, #28]
 8019fac:	683b      	ldr	r3, [r7, #0]
 8019fae:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019fb0:	f107 0314 	add.w	r3, r7, #20
 8019fb4:	6879      	ldr	r1, [r7, #4]
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	f7f0 ff1a 	bl	800adf0 <osThreadCreate>
 8019fbc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	3730      	adds	r7, #48	; 0x30
 8019fc2:	46bd      	mov	sp, r7
 8019fc4:	bd80      	pop	{r7, pc}
	...

08019fc8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019fc8:	b580      	push	{r7, lr}
 8019fca:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019fcc:	4b04      	ldr	r3, [pc, #16]	; (8019fe0 <sys_arch_protect+0x18>)
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	f7f0 ff83 	bl	800aee0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8019fda:	2301      	movs	r3, #1
}
 8019fdc:	4618      	mov	r0, r3
 8019fde:	bd80      	pop	{r7, pc}
 8019fe0:	2000f440 	.word	0x2000f440

08019fe4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019fe4:	b580      	push	{r7, lr}
 8019fe6:	b082      	sub	sp, #8
 8019fe8:	af00      	add	r7, sp, #0
 8019fea:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019fec:	4b04      	ldr	r3, [pc, #16]	; (801a000 <sys_arch_unprotect+0x1c>)
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	f7f0 ffc3 	bl	800af7c <osMutexRelease>
}
 8019ff6:	bf00      	nop
 8019ff8:	3708      	adds	r7, #8
 8019ffa:	46bd      	mov	sp, r7
 8019ffc:	bd80      	pop	{r7, pc}
 8019ffe:	bf00      	nop
 801a000:	2000f440 	.word	0x2000f440

0801a004 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801a004:	b580      	push	{r7, lr}
 801a006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801a008:	2201      	movs	r2, #1
 801a00a:	490e      	ldr	r1, [pc, #56]	; (801a044 <MX_USB_HOST_Init+0x40>)
 801a00c:	480e      	ldr	r0, [pc, #56]	; (801a048 <MX_USB_HOST_Init+0x44>)
 801a00e:	f7ee fefd 	bl	8008e0c <USBH_Init>
 801a012:	4603      	mov	r3, r0
 801a014:	2b00      	cmp	r3, #0
 801a016:	d001      	beq.n	801a01c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801a018:	f7e6 fcb2 	bl	8000980 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 801a01c:	490b      	ldr	r1, [pc, #44]	; (801a04c <MX_USB_HOST_Init+0x48>)
 801a01e:	480a      	ldr	r0, [pc, #40]	; (801a048 <MX_USB_HOST_Init+0x44>)
 801a020:	f7ee ffb8 	bl	8008f94 <USBH_RegisterClass>
 801a024:	4603      	mov	r3, r0
 801a026:	2b00      	cmp	r3, #0
 801a028:	d001      	beq.n	801a02e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801a02a:	f7e6 fca9 	bl	8000980 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801a02e:	4806      	ldr	r0, [pc, #24]	; (801a048 <MX_USB_HOST_Init+0x44>)
 801a030:	f7ef f89e 	bl	8009170 <USBH_Start>
 801a034:	4603      	mov	r3, r0
 801a036:	2b00      	cmp	r3, #0
 801a038:	d001      	beq.n	801a03e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801a03a:	f7e6 fca1 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801a03e:	bf00      	nop
 801a040:	bd80      	pop	{r7, pc}
 801a042:	bf00      	nop
 801a044:	0801a051 	.word	0x0801a051
 801a048:	2000f444 	.word	0x2000f444
 801a04c:	2000000c 	.word	0x2000000c

0801a050 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801a050:	b480      	push	{r7}
 801a052:	b083      	sub	sp, #12
 801a054:	af00      	add	r7, sp, #0
 801a056:	6078      	str	r0, [r7, #4]
 801a058:	460b      	mov	r3, r1
 801a05a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801a05c:	78fb      	ldrb	r3, [r7, #3]
 801a05e:	3b01      	subs	r3, #1
 801a060:	2b04      	cmp	r3, #4
 801a062:	d819      	bhi.n	801a098 <USBH_UserProcess+0x48>
 801a064:	a201      	add	r2, pc, #4	; (adr r2, 801a06c <USBH_UserProcess+0x1c>)
 801a066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a06a:	bf00      	nop
 801a06c:	0801a099 	.word	0x0801a099
 801a070:	0801a089 	.word	0x0801a089
 801a074:	0801a099 	.word	0x0801a099
 801a078:	0801a091 	.word	0x0801a091
 801a07c:	0801a081 	.word	0x0801a081
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801a080:	4b09      	ldr	r3, [pc, #36]	; (801a0a8 <USBH_UserProcess+0x58>)
 801a082:	2203      	movs	r2, #3
 801a084:	701a      	strb	r2, [r3, #0]
  break;
 801a086:	e008      	b.n	801a09a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801a088:	4b07      	ldr	r3, [pc, #28]	; (801a0a8 <USBH_UserProcess+0x58>)
 801a08a:	2202      	movs	r2, #2
 801a08c:	701a      	strb	r2, [r3, #0]
  break;
 801a08e:	e004      	b.n	801a09a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801a090:	4b05      	ldr	r3, [pc, #20]	; (801a0a8 <USBH_UserProcess+0x58>)
 801a092:	2201      	movs	r2, #1
 801a094:	701a      	strb	r2, [r3, #0]
  break;
 801a096:	e000      	b.n	801a09a <USBH_UserProcess+0x4a>

  default:
  break;
 801a098:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801a09a:	bf00      	nop
 801a09c:	370c      	adds	r7, #12
 801a09e:	46bd      	mov	sp, r7
 801a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a4:	4770      	bx	lr
 801a0a6:	bf00      	nop
 801a0a8:	2000867e 	.word	0x2000867e

0801a0ac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801a0ac:	b580      	push	{r7, lr}
 801a0ae:	b08a      	sub	sp, #40	; 0x28
 801a0b0:	af00      	add	r7, sp, #0
 801a0b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a0b4:	f107 0314 	add.w	r3, r7, #20
 801a0b8:	2200      	movs	r2, #0
 801a0ba:	601a      	str	r2, [r3, #0]
 801a0bc:	605a      	str	r2, [r3, #4]
 801a0be:	609a      	str	r2, [r3, #8]
 801a0c0:	60da      	str	r2, [r3, #12]
 801a0c2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a0cc:	d147      	bne.n	801a15e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a0ce:	2300      	movs	r3, #0
 801a0d0:	613b      	str	r3, [r7, #16]
 801a0d2:	4b25      	ldr	r3, [pc, #148]	; (801a168 <HAL_HCD_MspInit+0xbc>)
 801a0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a0d6:	4a24      	ldr	r2, [pc, #144]	; (801a168 <HAL_HCD_MspInit+0xbc>)
 801a0d8:	f043 0301 	orr.w	r3, r3, #1
 801a0dc:	6313      	str	r3, [r2, #48]	; 0x30
 801a0de:	4b22      	ldr	r3, [pc, #136]	; (801a168 <HAL_HCD_MspInit+0xbc>)
 801a0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a0e2:	f003 0301 	and.w	r3, r3, #1
 801a0e6:	613b      	str	r3, [r7, #16]
 801a0e8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801a0ea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801a0ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a0f0:	2302      	movs	r3, #2
 801a0f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a0f4:	2300      	movs	r3, #0
 801a0f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a0f8:	2303      	movs	r3, #3
 801a0fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801a0fc:	230a      	movs	r3, #10
 801a0fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a100:	f107 0314 	add.w	r3, r7, #20
 801a104:	4619      	mov	r1, r3
 801a106:	4819      	ldr	r0, [pc, #100]	; (801a16c <HAL_HCD_MspInit+0xc0>)
 801a108:	f7e8 fa76 	bl	80025f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801a10c:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801a112:	2300      	movs	r3, #0
 801a114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a116:	2300      	movs	r3, #0
 801a118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801a11a:	f107 0314 	add.w	r3, r7, #20
 801a11e:	4619      	mov	r1, r3
 801a120:	4812      	ldr	r0, [pc, #72]	; (801a16c <HAL_HCD_MspInit+0xc0>)
 801a122:	f7e8 fa69 	bl	80025f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a126:	4b10      	ldr	r3, [pc, #64]	; (801a168 <HAL_HCD_MspInit+0xbc>)
 801a128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a12a:	4a0f      	ldr	r2, [pc, #60]	; (801a168 <HAL_HCD_MspInit+0xbc>)
 801a12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a130:	6353      	str	r3, [r2, #52]	; 0x34
 801a132:	2300      	movs	r3, #0
 801a134:	60fb      	str	r3, [r7, #12]
 801a136:	4b0c      	ldr	r3, [pc, #48]	; (801a168 <HAL_HCD_MspInit+0xbc>)
 801a138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a13a:	4a0b      	ldr	r2, [pc, #44]	; (801a168 <HAL_HCD_MspInit+0xbc>)
 801a13c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a140:	6453      	str	r3, [r2, #68]	; 0x44
 801a142:	4b09      	ldr	r3, [pc, #36]	; (801a168 <HAL_HCD_MspInit+0xbc>)
 801a144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a14a:	60fb      	str	r3, [r7, #12]
 801a14c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801a14e:	2200      	movs	r2, #0
 801a150:	2105      	movs	r1, #5
 801a152:	2043      	movs	r0, #67	; 0x43
 801a154:	f7e7 f880 	bl	8001258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a158:	2043      	movs	r0, #67	; 0x43
 801a15a:	f7e7 f899 	bl	8001290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a15e:	bf00      	nop
 801a160:	3728      	adds	r7, #40	; 0x28
 801a162:	46bd      	mov	sp, r7
 801a164:	bd80      	pop	{r7, pc}
 801a166:	bf00      	nop
 801a168:	40023800 	.word	0x40023800
 801a16c:	40020000 	.word	0x40020000

0801a170 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801a170:	b580      	push	{r7, lr}
 801a172:	b082      	sub	sp, #8
 801a174:	af00      	add	r7, sp, #0
 801a176:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a17e:	4618      	mov	r0, r3
 801a180:	f7ef fdf1 	bl	8009d66 <USBH_LL_IncTimer>
}
 801a184:	bf00      	nop
 801a186:	3708      	adds	r7, #8
 801a188:	46bd      	mov	sp, r7
 801a18a:	bd80      	pop	{r7, pc}

0801a18c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801a18c:	b580      	push	{r7, lr}
 801a18e:	b082      	sub	sp, #8
 801a190:	af00      	add	r7, sp, #0
 801a192:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a19a:	4618      	mov	r0, r3
 801a19c:	f7ef fe35 	bl	8009e0a <USBH_LL_Connect>
}
 801a1a0:	bf00      	nop
 801a1a2:	3708      	adds	r7, #8
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd80      	pop	{r7, pc}

0801a1a8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b082      	sub	sp, #8
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	f7ef fe4a 	bl	8009e50 <USBH_LL_Disconnect>
}
 801a1bc:	bf00      	nop
 801a1be:	3708      	adds	r7, #8
 801a1c0:	46bd      	mov	sp, r7
 801a1c2:	bd80      	pop	{r7, pc}

0801a1c4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801a1c4:	b580      	push	{r7, lr}
 801a1c6:	b082      	sub	sp, #8
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	6078      	str	r0, [r7, #4]
 801a1cc:	460b      	mov	r3, r1
 801a1ce:	70fb      	strb	r3, [r7, #3]
 801a1d0:	4613      	mov	r3, r2
 801a1d2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a1da:	4618      	mov	r0, r3
 801a1dc:	f7ef fe7f 	bl	8009ede <USBH_LL_NotifyURBChange>
#endif
}
 801a1e0:	bf00      	nop
 801a1e2:	3708      	adds	r7, #8
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	bd80      	pop	{r7, pc}

0801a1e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	b082      	sub	sp, #8
 801a1ec:	af00      	add	r7, sp, #0
 801a1ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	f7ef fddf 	bl	8009dba <USBH_LL_PortEnabled>
}
 801a1fc:	bf00      	nop
 801a1fe:	3708      	adds	r7, #8
 801a200:	46bd      	mov	sp, r7
 801a202:	bd80      	pop	{r7, pc}

0801a204 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801a204:	b580      	push	{r7, lr}
 801a206:	b082      	sub	sp, #8
 801a208:	af00      	add	r7, sp, #0
 801a20a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a212:	4618      	mov	r0, r3
 801a214:	f7ef fdeb 	bl	8009dee <USBH_LL_PortDisabled>
}
 801a218:	bf00      	nop
 801a21a:	3708      	adds	r7, #8
 801a21c:	46bd      	mov	sp, r7
 801a21e:	bd80      	pop	{r7, pc}

0801a220 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801a220:	b580      	push	{r7, lr}
 801a222:	b082      	sub	sp, #8
 801a224:	af00      	add	r7, sp, #0
 801a226:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801a22e:	2b01      	cmp	r3, #1
 801a230:	d12a      	bne.n	801a288 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801a232:	4a18      	ldr	r2, [pc, #96]	; (801a294 <USBH_LL_Init+0x74>)
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	4a15      	ldr	r2, [pc, #84]	; (801a294 <USBH_LL_Init+0x74>)
 801a23e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a242:	4b14      	ldr	r3, [pc, #80]	; (801a294 <USBH_LL_Init+0x74>)
 801a244:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801a248:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801a24a:	4b12      	ldr	r3, [pc, #72]	; (801a294 <USBH_LL_Init+0x74>)
 801a24c:	2208      	movs	r2, #8
 801a24e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801a250:	4b10      	ldr	r3, [pc, #64]	; (801a294 <USBH_LL_Init+0x74>)
 801a252:	2201      	movs	r2, #1
 801a254:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a256:	4b0f      	ldr	r3, [pc, #60]	; (801a294 <USBH_LL_Init+0x74>)
 801a258:	2200      	movs	r2, #0
 801a25a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801a25c:	4b0d      	ldr	r3, [pc, #52]	; (801a294 <USBH_LL_Init+0x74>)
 801a25e:	2202      	movs	r2, #2
 801a260:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801a262:	4b0c      	ldr	r3, [pc, #48]	; (801a294 <USBH_LL_Init+0x74>)
 801a264:	2201      	movs	r2, #1
 801a266:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801a268:	480a      	ldr	r0, [pc, #40]	; (801a294 <USBH_LL_Init+0x74>)
 801a26a:	f7e8 fba4 	bl	80029b6 <HAL_HCD_Init>
 801a26e:	4603      	mov	r3, r0
 801a270:	2b00      	cmp	r3, #0
 801a272:	d001      	beq.n	801a278 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801a274:	f7e6 fb84 	bl	8000980 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801a278:	4806      	ldr	r0, [pc, #24]	; (801a294 <USBH_LL_Init+0x74>)
 801a27a:	f7e8 ff88 	bl	800318e <HAL_HCD_GetCurrentFrame>
 801a27e:	4603      	mov	r3, r0
 801a280:	4619      	mov	r1, r3
 801a282:	6878      	ldr	r0, [r7, #4]
 801a284:	f7ef fd60 	bl	8009d48 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801a288:	2300      	movs	r3, #0
}
 801a28a:	4618      	mov	r0, r3
 801a28c:	3708      	adds	r7, #8
 801a28e:	46bd      	mov	sp, r7
 801a290:	bd80      	pop	{r7, pc}
 801a292:	bf00      	nop
 801a294:	2000f828 	.word	0x2000f828

0801a298 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801a298:	b580      	push	{r7, lr}
 801a29a:	b084      	sub	sp, #16
 801a29c:	af00      	add	r7, sp, #0
 801a29e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a2ae:	4618      	mov	r0, r3
 801a2b0:	f7e8 fef7 	bl	80030a2 <HAL_HCD_Start>
 801a2b4:	4603      	mov	r3, r0
 801a2b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801a2b8:	7bfb      	ldrb	r3, [r7, #15]
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	f000 f982 	bl	801a5c4 <USBH_Get_USB_Status>
 801a2c0:	4603      	mov	r3, r0
 801a2c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a2c4:	7bbb      	ldrb	r3, [r7, #14]
}
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	3710      	adds	r7, #16
 801a2ca:	46bd      	mov	sp, r7
 801a2cc:	bd80      	pop	{r7, pc}

0801a2ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801a2ce:	b580      	push	{r7, lr}
 801a2d0:	b084      	sub	sp, #16
 801a2d2:	af00      	add	r7, sp, #0
 801a2d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a2da:	2300      	movs	r3, #0
 801a2dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	f7e8 feff 	bl	80030e8 <HAL_HCD_Stop>
 801a2ea:	4603      	mov	r3, r0
 801a2ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801a2ee:	7bfb      	ldrb	r3, [r7, #15]
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	f000 f967 	bl	801a5c4 <USBH_Get_USB_Status>
 801a2f6:	4603      	mov	r3, r0
 801a2f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a2fa:	7bbb      	ldrb	r3, [r7, #14]
}
 801a2fc:	4618      	mov	r0, r3
 801a2fe:	3710      	adds	r7, #16
 801a300:	46bd      	mov	sp, r7
 801a302:	bd80      	pop	{r7, pc}

0801a304 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801a304:	b580      	push	{r7, lr}
 801a306:	b084      	sub	sp, #16
 801a308:	af00      	add	r7, sp, #0
 801a30a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801a30c:	2301      	movs	r3, #1
 801a30e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a316:	4618      	mov	r0, r3
 801a318:	f7e8 ff47 	bl	80031aa <HAL_HCD_GetCurrentSpeed>
 801a31c:	4603      	mov	r3, r0
 801a31e:	2b02      	cmp	r3, #2
 801a320:	d00c      	beq.n	801a33c <USBH_LL_GetSpeed+0x38>
 801a322:	2b02      	cmp	r3, #2
 801a324:	d80d      	bhi.n	801a342 <USBH_LL_GetSpeed+0x3e>
 801a326:	2b00      	cmp	r3, #0
 801a328:	d002      	beq.n	801a330 <USBH_LL_GetSpeed+0x2c>
 801a32a:	2b01      	cmp	r3, #1
 801a32c:	d003      	beq.n	801a336 <USBH_LL_GetSpeed+0x32>
 801a32e:	e008      	b.n	801a342 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801a330:	2300      	movs	r3, #0
 801a332:	73fb      	strb	r3, [r7, #15]
    break;
 801a334:	e008      	b.n	801a348 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801a336:	2301      	movs	r3, #1
 801a338:	73fb      	strb	r3, [r7, #15]
    break;
 801a33a:	e005      	b.n	801a348 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801a33c:	2302      	movs	r3, #2
 801a33e:	73fb      	strb	r3, [r7, #15]
    break;
 801a340:	e002      	b.n	801a348 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801a342:	2301      	movs	r3, #1
 801a344:	73fb      	strb	r3, [r7, #15]
    break;
 801a346:	bf00      	nop
  }
  return  speed;
 801a348:	7bfb      	ldrb	r3, [r7, #15]
}
 801a34a:	4618      	mov	r0, r3
 801a34c:	3710      	adds	r7, #16
 801a34e:	46bd      	mov	sp, r7
 801a350:	bd80      	pop	{r7, pc}

0801a352 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801a352:	b580      	push	{r7, lr}
 801a354:	b084      	sub	sp, #16
 801a356:	af00      	add	r7, sp, #0
 801a358:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a35a:	2300      	movs	r3, #0
 801a35c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a35e:	2300      	movs	r3, #0
 801a360:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a368:	4618      	mov	r0, r3
 801a36a:	f7e8 feda 	bl	8003122 <HAL_HCD_ResetPort>
 801a36e:	4603      	mov	r3, r0
 801a370:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801a372:	7bfb      	ldrb	r3, [r7, #15]
 801a374:	4618      	mov	r0, r3
 801a376:	f000 f925 	bl	801a5c4 <USBH_Get_USB_Status>
 801a37a:	4603      	mov	r3, r0
 801a37c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a37e:	7bbb      	ldrb	r3, [r7, #14]
}
 801a380:	4618      	mov	r0, r3
 801a382:	3710      	adds	r7, #16
 801a384:	46bd      	mov	sp, r7
 801a386:	bd80      	pop	{r7, pc}

0801a388 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	b082      	sub	sp, #8
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	6078      	str	r0, [r7, #4]
 801a390:	460b      	mov	r3, r1
 801a392:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a39a:	78fa      	ldrb	r2, [r7, #3]
 801a39c:	4611      	mov	r1, r2
 801a39e:	4618      	mov	r0, r3
 801a3a0:	f7e8 fee1 	bl	8003166 <HAL_HCD_HC_GetXferCount>
 801a3a4:	4603      	mov	r3, r0
}
 801a3a6:	4618      	mov	r0, r3
 801a3a8:	3708      	adds	r7, #8
 801a3aa:	46bd      	mov	sp, r7
 801a3ac:	bd80      	pop	{r7, pc}

0801a3ae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801a3ae:	b590      	push	{r4, r7, lr}
 801a3b0:	b089      	sub	sp, #36	; 0x24
 801a3b2:	af04      	add	r7, sp, #16
 801a3b4:	6078      	str	r0, [r7, #4]
 801a3b6:	4608      	mov	r0, r1
 801a3b8:	4611      	mov	r1, r2
 801a3ba:	461a      	mov	r2, r3
 801a3bc:	4603      	mov	r3, r0
 801a3be:	70fb      	strb	r3, [r7, #3]
 801a3c0:	460b      	mov	r3, r1
 801a3c2:	70bb      	strb	r3, [r7, #2]
 801a3c4:	4613      	mov	r3, r2
 801a3c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a3c8:	2300      	movs	r3, #0
 801a3ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a3cc:	2300      	movs	r3, #0
 801a3ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801a3d6:	787c      	ldrb	r4, [r7, #1]
 801a3d8:	78ba      	ldrb	r2, [r7, #2]
 801a3da:	78f9      	ldrb	r1, [r7, #3]
 801a3dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a3de:	9302      	str	r3, [sp, #8]
 801a3e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a3e4:	9301      	str	r3, [sp, #4]
 801a3e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a3ea:	9300      	str	r3, [sp, #0]
 801a3ec:	4623      	mov	r3, r4
 801a3ee:	f7e8 fb44 	bl	8002a7a <HAL_HCD_HC_Init>
 801a3f2:	4603      	mov	r3, r0
 801a3f4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801a3f6:	7bfb      	ldrb	r3, [r7, #15]
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	f000 f8e3 	bl	801a5c4 <USBH_Get_USB_Status>
 801a3fe:	4603      	mov	r3, r0
 801a400:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a402:	7bbb      	ldrb	r3, [r7, #14]
}
 801a404:	4618      	mov	r0, r3
 801a406:	3714      	adds	r7, #20
 801a408:	46bd      	mov	sp, r7
 801a40a:	bd90      	pop	{r4, r7, pc}

0801a40c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b084      	sub	sp, #16
 801a410:	af00      	add	r7, sp, #0
 801a412:	6078      	str	r0, [r7, #4]
 801a414:	460b      	mov	r3, r1
 801a416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a418:	2300      	movs	r3, #0
 801a41a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a41c:	2300      	movs	r3, #0
 801a41e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a426:	78fa      	ldrb	r2, [r7, #3]
 801a428:	4611      	mov	r1, r2
 801a42a:	4618      	mov	r0, r3
 801a42c:	f7e8 fbb4 	bl	8002b98 <HAL_HCD_HC_Halt>
 801a430:	4603      	mov	r3, r0
 801a432:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801a434:	7bfb      	ldrb	r3, [r7, #15]
 801a436:	4618      	mov	r0, r3
 801a438:	f000 f8c4 	bl	801a5c4 <USBH_Get_USB_Status>
 801a43c:	4603      	mov	r3, r0
 801a43e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a440:	7bbb      	ldrb	r3, [r7, #14]
}
 801a442:	4618      	mov	r0, r3
 801a444:	3710      	adds	r7, #16
 801a446:	46bd      	mov	sp, r7
 801a448:	bd80      	pop	{r7, pc}

0801a44a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801a44a:	b590      	push	{r4, r7, lr}
 801a44c:	b089      	sub	sp, #36	; 0x24
 801a44e:	af04      	add	r7, sp, #16
 801a450:	6078      	str	r0, [r7, #4]
 801a452:	4608      	mov	r0, r1
 801a454:	4611      	mov	r1, r2
 801a456:	461a      	mov	r2, r3
 801a458:	4603      	mov	r3, r0
 801a45a:	70fb      	strb	r3, [r7, #3]
 801a45c:	460b      	mov	r3, r1
 801a45e:	70bb      	strb	r3, [r7, #2]
 801a460:	4613      	mov	r3, r2
 801a462:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a464:	2300      	movs	r3, #0
 801a466:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a468:	2300      	movs	r3, #0
 801a46a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801a472:	787c      	ldrb	r4, [r7, #1]
 801a474:	78ba      	ldrb	r2, [r7, #2]
 801a476:	78f9      	ldrb	r1, [r7, #3]
 801a478:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a47c:	9303      	str	r3, [sp, #12]
 801a47e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a480:	9302      	str	r3, [sp, #8]
 801a482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a484:	9301      	str	r3, [sp, #4]
 801a486:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a48a:	9300      	str	r3, [sp, #0]
 801a48c:	4623      	mov	r3, r4
 801a48e:	f7e8 fba7 	bl	8002be0 <HAL_HCD_HC_SubmitRequest>
 801a492:	4603      	mov	r3, r0
 801a494:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801a496:	7bfb      	ldrb	r3, [r7, #15]
 801a498:	4618      	mov	r0, r3
 801a49a:	f000 f893 	bl	801a5c4 <USBH_Get_USB_Status>
 801a49e:	4603      	mov	r3, r0
 801a4a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a4a2:	7bbb      	ldrb	r3, [r7, #14]
}
 801a4a4:	4618      	mov	r0, r3
 801a4a6:	3714      	adds	r7, #20
 801a4a8:	46bd      	mov	sp, r7
 801a4aa:	bd90      	pop	{r4, r7, pc}

0801a4ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	b082      	sub	sp, #8
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	6078      	str	r0, [r7, #4]
 801a4b4:	460b      	mov	r3, r1
 801a4b6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a4be:	78fa      	ldrb	r2, [r7, #3]
 801a4c0:	4611      	mov	r1, r2
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	f7e8 fe3b 	bl	800313e <HAL_HCD_HC_GetURBState>
 801a4c8:	4603      	mov	r3, r0
}
 801a4ca:	4618      	mov	r0, r3
 801a4cc:	3708      	adds	r7, #8
 801a4ce:	46bd      	mov	sp, r7
 801a4d0:	bd80      	pop	{r7, pc}

0801a4d2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801a4d2:	b580      	push	{r7, lr}
 801a4d4:	b082      	sub	sp, #8
 801a4d6:	af00      	add	r7, sp, #0
 801a4d8:	6078      	str	r0, [r7, #4]
 801a4da:	460b      	mov	r3, r1
 801a4dc:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 801a4de:	20c8      	movs	r0, #200	; 0xc8
 801a4e0:	f7e6 fdde 	bl	80010a0 <HAL_Delay>
  return USBH_OK;
 801a4e4:	2300      	movs	r3, #0
}
 801a4e6:	4618      	mov	r0, r3
 801a4e8:	3708      	adds	r7, #8
 801a4ea:	46bd      	mov	sp, r7
 801a4ec:	bd80      	pop	{r7, pc}

0801a4ee <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801a4ee:	b480      	push	{r7}
 801a4f0:	b085      	sub	sp, #20
 801a4f2:	af00      	add	r7, sp, #0
 801a4f4:	6078      	str	r0, [r7, #4]
 801a4f6:	460b      	mov	r3, r1
 801a4f8:	70fb      	strb	r3, [r7, #3]
 801a4fa:	4613      	mov	r3, r2
 801a4fc:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a504:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801a506:	78fb      	ldrb	r3, [r7, #3]
 801a508:	68fa      	ldr	r2, [r7, #12]
 801a50a:	212c      	movs	r1, #44	; 0x2c
 801a50c:	fb01 f303 	mul.w	r3, r1, r3
 801a510:	4413      	add	r3, r2
 801a512:	333b      	adds	r3, #59	; 0x3b
 801a514:	781b      	ldrb	r3, [r3, #0]
 801a516:	2b00      	cmp	r3, #0
 801a518:	d009      	beq.n	801a52e <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801a51a:	78fb      	ldrb	r3, [r7, #3]
 801a51c:	68fa      	ldr	r2, [r7, #12]
 801a51e:	212c      	movs	r1, #44	; 0x2c
 801a520:	fb01 f303 	mul.w	r3, r1, r3
 801a524:	4413      	add	r3, r2
 801a526:	3354      	adds	r3, #84	; 0x54
 801a528:	78ba      	ldrb	r2, [r7, #2]
 801a52a:	701a      	strb	r2, [r3, #0]
 801a52c:	e008      	b.n	801a540 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801a52e:	78fb      	ldrb	r3, [r7, #3]
 801a530:	68fa      	ldr	r2, [r7, #12]
 801a532:	212c      	movs	r1, #44	; 0x2c
 801a534:	fb01 f303 	mul.w	r3, r1, r3
 801a538:	4413      	add	r3, r2
 801a53a:	3355      	adds	r3, #85	; 0x55
 801a53c:	78ba      	ldrb	r2, [r7, #2]
 801a53e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801a540:	2300      	movs	r3, #0
}
 801a542:	4618      	mov	r0, r3
 801a544:	3714      	adds	r7, #20
 801a546:	46bd      	mov	sp, r7
 801a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a54c:	4770      	bx	lr

0801a54e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a54e:	b480      	push	{r7}
 801a550:	b085      	sub	sp, #20
 801a552:	af00      	add	r7, sp, #0
 801a554:	6078      	str	r0, [r7, #4]
 801a556:	460b      	mov	r3, r1
 801a558:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801a55a:	2300      	movs	r3, #0
 801a55c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a564:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 801a566:	78fb      	ldrb	r3, [r7, #3]
 801a568:	68ba      	ldr	r2, [r7, #8]
 801a56a:	212c      	movs	r1, #44	; 0x2c
 801a56c:	fb01 f303 	mul.w	r3, r1, r3
 801a570:	4413      	add	r3, r2
 801a572:	333b      	adds	r3, #59	; 0x3b
 801a574:	781b      	ldrb	r3, [r3, #0]
 801a576:	2b00      	cmp	r3, #0
 801a578:	d009      	beq.n	801a58e <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801a57a:	78fb      	ldrb	r3, [r7, #3]
 801a57c:	68ba      	ldr	r2, [r7, #8]
 801a57e:	212c      	movs	r1, #44	; 0x2c
 801a580:	fb01 f303 	mul.w	r3, r1, r3
 801a584:	4413      	add	r3, r2
 801a586:	3354      	adds	r3, #84	; 0x54
 801a588:	781b      	ldrb	r3, [r3, #0]
 801a58a:	73fb      	strb	r3, [r7, #15]
 801a58c:	e008      	b.n	801a5a0 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 801a58e:	78fb      	ldrb	r3, [r7, #3]
 801a590:	68ba      	ldr	r2, [r7, #8]
 801a592:	212c      	movs	r1, #44	; 0x2c
 801a594:	fb01 f303 	mul.w	r3, r1, r3
 801a598:	4413      	add	r3, r2
 801a59a:	3355      	adds	r3, #85	; 0x55
 801a59c:	781b      	ldrb	r3, [r3, #0]
 801a59e:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 801a5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5a2:	4618      	mov	r0, r3
 801a5a4:	3714      	adds	r7, #20
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ac:	4770      	bx	lr

0801a5ae <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801a5ae:	b580      	push	{r7, lr}
 801a5b0:	b082      	sub	sp, #8
 801a5b2:	af00      	add	r7, sp, #0
 801a5b4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801a5b6:	6878      	ldr	r0, [r7, #4]
 801a5b8:	f7e6 fd72 	bl	80010a0 <HAL_Delay>
}
 801a5bc:	bf00      	nop
 801a5be:	3708      	adds	r7, #8
 801a5c0:	46bd      	mov	sp, r7
 801a5c2:	bd80      	pop	{r7, pc}

0801a5c4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a5c4:	b480      	push	{r7}
 801a5c6:	b085      	sub	sp, #20
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	4603      	mov	r3, r0
 801a5cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a5ce:	2300      	movs	r3, #0
 801a5d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a5d2:	79fb      	ldrb	r3, [r7, #7]
 801a5d4:	2b03      	cmp	r3, #3
 801a5d6:	d817      	bhi.n	801a608 <USBH_Get_USB_Status+0x44>
 801a5d8:	a201      	add	r2, pc, #4	; (adr r2, 801a5e0 <USBH_Get_USB_Status+0x1c>)
 801a5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5de:	bf00      	nop
 801a5e0:	0801a5f1 	.word	0x0801a5f1
 801a5e4:	0801a5f7 	.word	0x0801a5f7
 801a5e8:	0801a5fd 	.word	0x0801a5fd
 801a5ec:	0801a603 	.word	0x0801a603
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801a5f0:	2300      	movs	r3, #0
 801a5f2:	73fb      	strb	r3, [r7, #15]
    break;
 801a5f4:	e00b      	b.n	801a60e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801a5f6:	2302      	movs	r3, #2
 801a5f8:	73fb      	strb	r3, [r7, #15]
    break;
 801a5fa:	e008      	b.n	801a60e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801a5fc:	2301      	movs	r3, #1
 801a5fe:	73fb      	strb	r3, [r7, #15]
    break;
 801a600:	e005      	b.n	801a60e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801a602:	2302      	movs	r3, #2
 801a604:	73fb      	strb	r3, [r7, #15]
    break;
 801a606:	e002      	b.n	801a60e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801a608:	2302      	movs	r3, #2
 801a60a:	73fb      	strb	r3, [r7, #15]
    break;
 801a60c:	bf00      	nop
  }
  return usb_status;
 801a60e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a610:	4618      	mov	r0, r3
 801a612:	3714      	adds	r7, #20
 801a614:	46bd      	mov	sp, r7
 801a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a61a:	4770      	bx	lr

0801a61c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 801a61c:	f8df d034 	ldr.w	sp, [pc, #52]	; 801a654 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801a620:	480d      	ldr	r0, [pc, #52]	; (801a658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801a622:	490e      	ldr	r1, [pc, #56]	; (801a65c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 801a624:	4a0e      	ldr	r2, [pc, #56]	; (801a660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801a626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801a628:	e002      	b.n	801a630 <LoopCopyDataInit>

0801a62a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801a62a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801a62c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801a62e:	3304      	adds	r3, #4

0801a630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801a630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801a632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801a634:	d3f9      	bcc.n	801a62a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801a636:	4a0b      	ldr	r2, [pc, #44]	; (801a664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 801a638:	4c0b      	ldr	r4, [pc, #44]	; (801a668 <LoopFillZerobss+0x26>)
  movs r3, #0
 801a63a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801a63c:	e001      	b.n	801a642 <LoopFillZerobss>

0801a63e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801a63e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801a640:	3204      	adds	r2, #4

0801a642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801a642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801a644:	d3fb      	bcc.n	801a63e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801a646:	f7e6 fb63 	bl	8000d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801a64a:	f000 f907 	bl	801a85c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801a64e:	f7e5 ffef 	bl	8000630 <main>
  bx  lr    
 801a652:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 801a654:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 801a658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801a65c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 801a660:	0801f248 	.word	0x0801f248
  ldr r2, =_sbss
 801a664:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 801a668:	2000fb38 	.word	0x2000fb38

0801a66c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801a66c:	e7fe      	b.n	801a66c <ADC_IRQHandler>
	...

0801a670 <std>:
 801a670:	2300      	movs	r3, #0
 801a672:	b510      	push	{r4, lr}
 801a674:	4604      	mov	r4, r0
 801a676:	e9c0 3300 	strd	r3, r3, [r0]
 801a67a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a67e:	6083      	str	r3, [r0, #8]
 801a680:	8181      	strh	r1, [r0, #12]
 801a682:	6643      	str	r3, [r0, #100]	; 0x64
 801a684:	81c2      	strh	r2, [r0, #14]
 801a686:	6183      	str	r3, [r0, #24]
 801a688:	4619      	mov	r1, r3
 801a68a:	2208      	movs	r2, #8
 801a68c:	305c      	adds	r0, #92	; 0x5c
 801a68e:	f000 f939 	bl	801a904 <memset>
 801a692:	4b05      	ldr	r3, [pc, #20]	; (801a6a8 <std+0x38>)
 801a694:	6263      	str	r3, [r4, #36]	; 0x24
 801a696:	4b05      	ldr	r3, [pc, #20]	; (801a6ac <std+0x3c>)
 801a698:	62a3      	str	r3, [r4, #40]	; 0x28
 801a69a:	4b05      	ldr	r3, [pc, #20]	; (801a6b0 <std+0x40>)
 801a69c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a69e:	4b05      	ldr	r3, [pc, #20]	; (801a6b4 <std+0x44>)
 801a6a0:	6224      	str	r4, [r4, #32]
 801a6a2:	6323      	str	r3, [r4, #48]	; 0x30
 801a6a4:	bd10      	pop	{r4, pc}
 801a6a6:	bf00      	nop
 801a6a8:	0801ad25 	.word	0x0801ad25
 801a6ac:	0801ad47 	.word	0x0801ad47
 801a6b0:	0801ad7f 	.word	0x0801ad7f
 801a6b4:	0801ada3 	.word	0x0801ada3

0801a6b8 <_cleanup_r>:
 801a6b8:	4901      	ldr	r1, [pc, #4]	; (801a6c0 <_cleanup_r+0x8>)
 801a6ba:	f000 b8af 	b.w	801a81c <_fwalk_reent>
 801a6be:	bf00      	nop
 801a6c0:	0801b0b9 	.word	0x0801b0b9

0801a6c4 <__sfmoreglue>:
 801a6c4:	b570      	push	{r4, r5, r6, lr}
 801a6c6:	1e4a      	subs	r2, r1, #1
 801a6c8:	2568      	movs	r5, #104	; 0x68
 801a6ca:	4355      	muls	r5, r2
 801a6cc:	460e      	mov	r6, r1
 801a6ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a6d2:	f000 f96f 	bl	801a9b4 <_malloc_r>
 801a6d6:	4604      	mov	r4, r0
 801a6d8:	b140      	cbz	r0, 801a6ec <__sfmoreglue+0x28>
 801a6da:	2100      	movs	r1, #0
 801a6dc:	e9c0 1600 	strd	r1, r6, [r0]
 801a6e0:	300c      	adds	r0, #12
 801a6e2:	60a0      	str	r0, [r4, #8]
 801a6e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a6e8:	f000 f90c 	bl	801a904 <memset>
 801a6ec:	4620      	mov	r0, r4
 801a6ee:	bd70      	pop	{r4, r5, r6, pc}

0801a6f0 <__sfp_lock_acquire>:
 801a6f0:	4801      	ldr	r0, [pc, #4]	; (801a6f8 <__sfp_lock_acquire+0x8>)
 801a6f2:	f000 b8d8 	b.w	801a8a6 <__retarget_lock_acquire_recursive>
 801a6f6:	bf00      	nop
 801a6f8:	2000fb34 	.word	0x2000fb34

0801a6fc <__sfp_lock_release>:
 801a6fc:	4801      	ldr	r0, [pc, #4]	; (801a704 <__sfp_lock_release+0x8>)
 801a6fe:	f000 b8d3 	b.w	801a8a8 <__retarget_lock_release_recursive>
 801a702:	bf00      	nop
 801a704:	2000fb34 	.word	0x2000fb34

0801a708 <__sinit_lock_acquire>:
 801a708:	4801      	ldr	r0, [pc, #4]	; (801a710 <__sinit_lock_acquire+0x8>)
 801a70a:	f000 b8cc 	b.w	801a8a6 <__retarget_lock_acquire_recursive>
 801a70e:	bf00      	nop
 801a710:	2000fb2f 	.word	0x2000fb2f

0801a714 <__sinit_lock_release>:
 801a714:	4801      	ldr	r0, [pc, #4]	; (801a71c <__sinit_lock_release+0x8>)
 801a716:	f000 b8c7 	b.w	801a8a8 <__retarget_lock_release_recursive>
 801a71a:	bf00      	nop
 801a71c:	2000fb2f 	.word	0x2000fb2f

0801a720 <__sinit>:
 801a720:	b510      	push	{r4, lr}
 801a722:	4604      	mov	r4, r0
 801a724:	f7ff fff0 	bl	801a708 <__sinit_lock_acquire>
 801a728:	69a3      	ldr	r3, [r4, #24]
 801a72a:	b11b      	cbz	r3, 801a734 <__sinit+0x14>
 801a72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a730:	f7ff bff0 	b.w	801a714 <__sinit_lock_release>
 801a734:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a738:	6523      	str	r3, [r4, #80]	; 0x50
 801a73a:	4b13      	ldr	r3, [pc, #76]	; (801a788 <__sinit+0x68>)
 801a73c:	4a13      	ldr	r2, [pc, #76]	; (801a78c <__sinit+0x6c>)
 801a73e:	681b      	ldr	r3, [r3, #0]
 801a740:	62a2      	str	r2, [r4, #40]	; 0x28
 801a742:	42a3      	cmp	r3, r4
 801a744:	bf04      	itt	eq
 801a746:	2301      	moveq	r3, #1
 801a748:	61a3      	streq	r3, [r4, #24]
 801a74a:	4620      	mov	r0, r4
 801a74c:	f000 f820 	bl	801a790 <__sfp>
 801a750:	6060      	str	r0, [r4, #4]
 801a752:	4620      	mov	r0, r4
 801a754:	f000 f81c 	bl	801a790 <__sfp>
 801a758:	60a0      	str	r0, [r4, #8]
 801a75a:	4620      	mov	r0, r4
 801a75c:	f000 f818 	bl	801a790 <__sfp>
 801a760:	2200      	movs	r2, #0
 801a762:	60e0      	str	r0, [r4, #12]
 801a764:	2104      	movs	r1, #4
 801a766:	6860      	ldr	r0, [r4, #4]
 801a768:	f7ff ff82 	bl	801a670 <std>
 801a76c:	68a0      	ldr	r0, [r4, #8]
 801a76e:	2201      	movs	r2, #1
 801a770:	2109      	movs	r1, #9
 801a772:	f7ff ff7d 	bl	801a670 <std>
 801a776:	68e0      	ldr	r0, [r4, #12]
 801a778:	2202      	movs	r2, #2
 801a77a:	2112      	movs	r1, #18
 801a77c:	f7ff ff78 	bl	801a670 <std>
 801a780:	2301      	movs	r3, #1
 801a782:	61a3      	str	r3, [r4, #24]
 801a784:	e7d2      	b.n	801a72c <__sinit+0xc>
 801a786:	bf00      	nop
 801a788:	0801f14c 	.word	0x0801f14c
 801a78c:	0801a6b9 	.word	0x0801a6b9

0801a790 <__sfp>:
 801a790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a792:	4607      	mov	r7, r0
 801a794:	f7ff ffac 	bl	801a6f0 <__sfp_lock_acquire>
 801a798:	4b1e      	ldr	r3, [pc, #120]	; (801a814 <__sfp+0x84>)
 801a79a:	681e      	ldr	r6, [r3, #0]
 801a79c:	69b3      	ldr	r3, [r6, #24]
 801a79e:	b913      	cbnz	r3, 801a7a6 <__sfp+0x16>
 801a7a0:	4630      	mov	r0, r6
 801a7a2:	f7ff ffbd 	bl	801a720 <__sinit>
 801a7a6:	3648      	adds	r6, #72	; 0x48
 801a7a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a7ac:	3b01      	subs	r3, #1
 801a7ae:	d503      	bpl.n	801a7b8 <__sfp+0x28>
 801a7b0:	6833      	ldr	r3, [r6, #0]
 801a7b2:	b30b      	cbz	r3, 801a7f8 <__sfp+0x68>
 801a7b4:	6836      	ldr	r6, [r6, #0]
 801a7b6:	e7f7      	b.n	801a7a8 <__sfp+0x18>
 801a7b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a7bc:	b9d5      	cbnz	r5, 801a7f4 <__sfp+0x64>
 801a7be:	4b16      	ldr	r3, [pc, #88]	; (801a818 <__sfp+0x88>)
 801a7c0:	60e3      	str	r3, [r4, #12]
 801a7c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a7c6:	6665      	str	r5, [r4, #100]	; 0x64
 801a7c8:	f000 f86c 	bl	801a8a4 <__retarget_lock_init_recursive>
 801a7cc:	f7ff ff96 	bl	801a6fc <__sfp_lock_release>
 801a7d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a7d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a7d8:	6025      	str	r5, [r4, #0]
 801a7da:	61a5      	str	r5, [r4, #24]
 801a7dc:	2208      	movs	r2, #8
 801a7de:	4629      	mov	r1, r5
 801a7e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a7e4:	f000 f88e 	bl	801a904 <memset>
 801a7e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a7ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a7f0:	4620      	mov	r0, r4
 801a7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7f4:	3468      	adds	r4, #104	; 0x68
 801a7f6:	e7d9      	b.n	801a7ac <__sfp+0x1c>
 801a7f8:	2104      	movs	r1, #4
 801a7fa:	4638      	mov	r0, r7
 801a7fc:	f7ff ff62 	bl	801a6c4 <__sfmoreglue>
 801a800:	4604      	mov	r4, r0
 801a802:	6030      	str	r0, [r6, #0]
 801a804:	2800      	cmp	r0, #0
 801a806:	d1d5      	bne.n	801a7b4 <__sfp+0x24>
 801a808:	f7ff ff78 	bl	801a6fc <__sfp_lock_release>
 801a80c:	230c      	movs	r3, #12
 801a80e:	603b      	str	r3, [r7, #0]
 801a810:	e7ee      	b.n	801a7f0 <__sfp+0x60>
 801a812:	bf00      	nop
 801a814:	0801f14c 	.word	0x0801f14c
 801a818:	ffff0001 	.word	0xffff0001

0801a81c <_fwalk_reent>:
 801a81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a820:	4606      	mov	r6, r0
 801a822:	4688      	mov	r8, r1
 801a824:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a828:	2700      	movs	r7, #0
 801a82a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a82e:	f1b9 0901 	subs.w	r9, r9, #1
 801a832:	d505      	bpl.n	801a840 <_fwalk_reent+0x24>
 801a834:	6824      	ldr	r4, [r4, #0]
 801a836:	2c00      	cmp	r4, #0
 801a838:	d1f7      	bne.n	801a82a <_fwalk_reent+0xe>
 801a83a:	4638      	mov	r0, r7
 801a83c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a840:	89ab      	ldrh	r3, [r5, #12]
 801a842:	2b01      	cmp	r3, #1
 801a844:	d907      	bls.n	801a856 <_fwalk_reent+0x3a>
 801a846:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a84a:	3301      	adds	r3, #1
 801a84c:	d003      	beq.n	801a856 <_fwalk_reent+0x3a>
 801a84e:	4629      	mov	r1, r5
 801a850:	4630      	mov	r0, r6
 801a852:	47c0      	blx	r8
 801a854:	4307      	orrs	r7, r0
 801a856:	3568      	adds	r5, #104	; 0x68
 801a858:	e7e9      	b.n	801a82e <_fwalk_reent+0x12>
	...

0801a85c <__libc_init_array>:
 801a85c:	b570      	push	{r4, r5, r6, lr}
 801a85e:	4d0d      	ldr	r5, [pc, #52]	; (801a894 <__libc_init_array+0x38>)
 801a860:	4c0d      	ldr	r4, [pc, #52]	; (801a898 <__libc_init_array+0x3c>)
 801a862:	1b64      	subs	r4, r4, r5
 801a864:	10a4      	asrs	r4, r4, #2
 801a866:	2600      	movs	r6, #0
 801a868:	42a6      	cmp	r6, r4
 801a86a:	d109      	bne.n	801a880 <__libc_init_array+0x24>
 801a86c:	4d0b      	ldr	r5, [pc, #44]	; (801a89c <__libc_init_array+0x40>)
 801a86e:	4c0c      	ldr	r4, [pc, #48]	; (801a8a0 <__libc_init_array+0x44>)
 801a870:	f001 f8a8 	bl	801b9c4 <_init>
 801a874:	1b64      	subs	r4, r4, r5
 801a876:	10a4      	asrs	r4, r4, #2
 801a878:	2600      	movs	r6, #0
 801a87a:	42a6      	cmp	r6, r4
 801a87c:	d105      	bne.n	801a88a <__libc_init_array+0x2e>
 801a87e:	bd70      	pop	{r4, r5, r6, pc}
 801a880:	f855 3b04 	ldr.w	r3, [r5], #4
 801a884:	4798      	blx	r3
 801a886:	3601      	adds	r6, #1
 801a888:	e7ee      	b.n	801a868 <__libc_init_array+0xc>
 801a88a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a88e:	4798      	blx	r3
 801a890:	3601      	adds	r6, #1
 801a892:	e7f2      	b.n	801a87a <__libc_init_array+0x1e>
 801a894:	0801f240 	.word	0x0801f240
 801a898:	0801f240 	.word	0x0801f240
 801a89c:	0801f240 	.word	0x0801f240
 801a8a0:	0801f244 	.word	0x0801f244

0801a8a4 <__retarget_lock_init_recursive>:
 801a8a4:	4770      	bx	lr

0801a8a6 <__retarget_lock_acquire_recursive>:
 801a8a6:	4770      	bx	lr

0801a8a8 <__retarget_lock_release_recursive>:
 801a8a8:	4770      	bx	lr
	...

0801a8ac <malloc>:
 801a8ac:	4b02      	ldr	r3, [pc, #8]	; (801a8b8 <malloc+0xc>)
 801a8ae:	4601      	mov	r1, r0
 801a8b0:	6818      	ldr	r0, [r3, #0]
 801a8b2:	f000 b87f 	b.w	801a9b4 <_malloc_r>
 801a8b6:	bf00      	nop
 801a8b8:	20000040 	.word	0x20000040

0801a8bc <free>:
 801a8bc:	4b02      	ldr	r3, [pc, #8]	; (801a8c8 <free+0xc>)
 801a8be:	4601      	mov	r1, r0
 801a8c0:	6818      	ldr	r0, [r3, #0]
 801a8c2:	f000 b827 	b.w	801a914 <_free_r>
 801a8c6:	bf00      	nop
 801a8c8:	20000040 	.word	0x20000040

0801a8cc <memcmp>:
 801a8cc:	b530      	push	{r4, r5, lr}
 801a8ce:	3901      	subs	r1, #1
 801a8d0:	2400      	movs	r4, #0
 801a8d2:	42a2      	cmp	r2, r4
 801a8d4:	d101      	bne.n	801a8da <memcmp+0xe>
 801a8d6:	2000      	movs	r0, #0
 801a8d8:	e005      	b.n	801a8e6 <memcmp+0x1a>
 801a8da:	5d03      	ldrb	r3, [r0, r4]
 801a8dc:	3401      	adds	r4, #1
 801a8de:	5d0d      	ldrb	r5, [r1, r4]
 801a8e0:	42ab      	cmp	r3, r5
 801a8e2:	d0f6      	beq.n	801a8d2 <memcmp+0x6>
 801a8e4:	1b58      	subs	r0, r3, r5
 801a8e6:	bd30      	pop	{r4, r5, pc}

0801a8e8 <memcpy>:
 801a8e8:	440a      	add	r2, r1
 801a8ea:	4291      	cmp	r1, r2
 801a8ec:	f100 33ff 	add.w	r3, r0, #4294967295
 801a8f0:	d100      	bne.n	801a8f4 <memcpy+0xc>
 801a8f2:	4770      	bx	lr
 801a8f4:	b510      	push	{r4, lr}
 801a8f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a8fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a8fe:	4291      	cmp	r1, r2
 801a900:	d1f9      	bne.n	801a8f6 <memcpy+0xe>
 801a902:	bd10      	pop	{r4, pc}

0801a904 <memset>:
 801a904:	4402      	add	r2, r0
 801a906:	4603      	mov	r3, r0
 801a908:	4293      	cmp	r3, r2
 801a90a:	d100      	bne.n	801a90e <memset+0xa>
 801a90c:	4770      	bx	lr
 801a90e:	f803 1b01 	strb.w	r1, [r3], #1
 801a912:	e7f9      	b.n	801a908 <memset+0x4>

0801a914 <_free_r>:
 801a914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a916:	2900      	cmp	r1, #0
 801a918:	d048      	beq.n	801a9ac <_free_r+0x98>
 801a91a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a91e:	9001      	str	r0, [sp, #4]
 801a920:	2b00      	cmp	r3, #0
 801a922:	f1a1 0404 	sub.w	r4, r1, #4
 801a926:	bfb8      	it	lt
 801a928:	18e4      	addlt	r4, r4, r3
 801a92a:	f000 fc89 	bl	801b240 <__malloc_lock>
 801a92e:	4a20      	ldr	r2, [pc, #128]	; (801a9b0 <_free_r+0x9c>)
 801a930:	9801      	ldr	r0, [sp, #4]
 801a932:	6813      	ldr	r3, [r2, #0]
 801a934:	4615      	mov	r5, r2
 801a936:	b933      	cbnz	r3, 801a946 <_free_r+0x32>
 801a938:	6063      	str	r3, [r4, #4]
 801a93a:	6014      	str	r4, [r2, #0]
 801a93c:	b003      	add	sp, #12
 801a93e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a942:	f000 bc83 	b.w	801b24c <__malloc_unlock>
 801a946:	42a3      	cmp	r3, r4
 801a948:	d90b      	bls.n	801a962 <_free_r+0x4e>
 801a94a:	6821      	ldr	r1, [r4, #0]
 801a94c:	1862      	adds	r2, r4, r1
 801a94e:	4293      	cmp	r3, r2
 801a950:	bf04      	itt	eq
 801a952:	681a      	ldreq	r2, [r3, #0]
 801a954:	685b      	ldreq	r3, [r3, #4]
 801a956:	6063      	str	r3, [r4, #4]
 801a958:	bf04      	itt	eq
 801a95a:	1852      	addeq	r2, r2, r1
 801a95c:	6022      	streq	r2, [r4, #0]
 801a95e:	602c      	str	r4, [r5, #0]
 801a960:	e7ec      	b.n	801a93c <_free_r+0x28>
 801a962:	461a      	mov	r2, r3
 801a964:	685b      	ldr	r3, [r3, #4]
 801a966:	b10b      	cbz	r3, 801a96c <_free_r+0x58>
 801a968:	42a3      	cmp	r3, r4
 801a96a:	d9fa      	bls.n	801a962 <_free_r+0x4e>
 801a96c:	6811      	ldr	r1, [r2, #0]
 801a96e:	1855      	adds	r5, r2, r1
 801a970:	42a5      	cmp	r5, r4
 801a972:	d10b      	bne.n	801a98c <_free_r+0x78>
 801a974:	6824      	ldr	r4, [r4, #0]
 801a976:	4421      	add	r1, r4
 801a978:	1854      	adds	r4, r2, r1
 801a97a:	42a3      	cmp	r3, r4
 801a97c:	6011      	str	r1, [r2, #0]
 801a97e:	d1dd      	bne.n	801a93c <_free_r+0x28>
 801a980:	681c      	ldr	r4, [r3, #0]
 801a982:	685b      	ldr	r3, [r3, #4]
 801a984:	6053      	str	r3, [r2, #4]
 801a986:	4421      	add	r1, r4
 801a988:	6011      	str	r1, [r2, #0]
 801a98a:	e7d7      	b.n	801a93c <_free_r+0x28>
 801a98c:	d902      	bls.n	801a994 <_free_r+0x80>
 801a98e:	230c      	movs	r3, #12
 801a990:	6003      	str	r3, [r0, #0]
 801a992:	e7d3      	b.n	801a93c <_free_r+0x28>
 801a994:	6825      	ldr	r5, [r4, #0]
 801a996:	1961      	adds	r1, r4, r5
 801a998:	428b      	cmp	r3, r1
 801a99a:	bf04      	itt	eq
 801a99c:	6819      	ldreq	r1, [r3, #0]
 801a99e:	685b      	ldreq	r3, [r3, #4]
 801a9a0:	6063      	str	r3, [r4, #4]
 801a9a2:	bf04      	itt	eq
 801a9a4:	1949      	addeq	r1, r1, r5
 801a9a6:	6021      	streq	r1, [r4, #0]
 801a9a8:	6054      	str	r4, [r2, #4]
 801a9aa:	e7c7      	b.n	801a93c <_free_r+0x28>
 801a9ac:	b003      	add	sp, #12
 801a9ae:	bd30      	pop	{r4, r5, pc}
 801a9b0:	20008680 	.word	0x20008680

0801a9b4 <_malloc_r>:
 801a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9b6:	1ccd      	adds	r5, r1, #3
 801a9b8:	f025 0503 	bic.w	r5, r5, #3
 801a9bc:	3508      	adds	r5, #8
 801a9be:	2d0c      	cmp	r5, #12
 801a9c0:	bf38      	it	cc
 801a9c2:	250c      	movcc	r5, #12
 801a9c4:	2d00      	cmp	r5, #0
 801a9c6:	4606      	mov	r6, r0
 801a9c8:	db01      	blt.n	801a9ce <_malloc_r+0x1a>
 801a9ca:	42a9      	cmp	r1, r5
 801a9cc:	d903      	bls.n	801a9d6 <_malloc_r+0x22>
 801a9ce:	230c      	movs	r3, #12
 801a9d0:	6033      	str	r3, [r6, #0]
 801a9d2:	2000      	movs	r0, #0
 801a9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9d6:	f000 fc33 	bl	801b240 <__malloc_lock>
 801a9da:	4921      	ldr	r1, [pc, #132]	; (801aa60 <_malloc_r+0xac>)
 801a9dc:	680a      	ldr	r2, [r1, #0]
 801a9de:	4614      	mov	r4, r2
 801a9e0:	b99c      	cbnz	r4, 801aa0a <_malloc_r+0x56>
 801a9e2:	4f20      	ldr	r7, [pc, #128]	; (801aa64 <_malloc_r+0xb0>)
 801a9e4:	683b      	ldr	r3, [r7, #0]
 801a9e6:	b923      	cbnz	r3, 801a9f2 <_malloc_r+0x3e>
 801a9e8:	4621      	mov	r1, r4
 801a9ea:	4630      	mov	r0, r6
 801a9ec:	f000 f98a 	bl	801ad04 <_sbrk_r>
 801a9f0:	6038      	str	r0, [r7, #0]
 801a9f2:	4629      	mov	r1, r5
 801a9f4:	4630      	mov	r0, r6
 801a9f6:	f000 f985 	bl	801ad04 <_sbrk_r>
 801a9fa:	1c43      	adds	r3, r0, #1
 801a9fc:	d123      	bne.n	801aa46 <_malloc_r+0x92>
 801a9fe:	230c      	movs	r3, #12
 801aa00:	6033      	str	r3, [r6, #0]
 801aa02:	4630      	mov	r0, r6
 801aa04:	f000 fc22 	bl	801b24c <__malloc_unlock>
 801aa08:	e7e3      	b.n	801a9d2 <_malloc_r+0x1e>
 801aa0a:	6823      	ldr	r3, [r4, #0]
 801aa0c:	1b5b      	subs	r3, r3, r5
 801aa0e:	d417      	bmi.n	801aa40 <_malloc_r+0x8c>
 801aa10:	2b0b      	cmp	r3, #11
 801aa12:	d903      	bls.n	801aa1c <_malloc_r+0x68>
 801aa14:	6023      	str	r3, [r4, #0]
 801aa16:	441c      	add	r4, r3
 801aa18:	6025      	str	r5, [r4, #0]
 801aa1a:	e004      	b.n	801aa26 <_malloc_r+0x72>
 801aa1c:	6863      	ldr	r3, [r4, #4]
 801aa1e:	42a2      	cmp	r2, r4
 801aa20:	bf0c      	ite	eq
 801aa22:	600b      	streq	r3, [r1, #0]
 801aa24:	6053      	strne	r3, [r2, #4]
 801aa26:	4630      	mov	r0, r6
 801aa28:	f000 fc10 	bl	801b24c <__malloc_unlock>
 801aa2c:	f104 000b 	add.w	r0, r4, #11
 801aa30:	1d23      	adds	r3, r4, #4
 801aa32:	f020 0007 	bic.w	r0, r0, #7
 801aa36:	1ac2      	subs	r2, r0, r3
 801aa38:	d0cc      	beq.n	801a9d4 <_malloc_r+0x20>
 801aa3a:	1a1b      	subs	r3, r3, r0
 801aa3c:	50a3      	str	r3, [r4, r2]
 801aa3e:	e7c9      	b.n	801a9d4 <_malloc_r+0x20>
 801aa40:	4622      	mov	r2, r4
 801aa42:	6864      	ldr	r4, [r4, #4]
 801aa44:	e7cc      	b.n	801a9e0 <_malloc_r+0x2c>
 801aa46:	1cc4      	adds	r4, r0, #3
 801aa48:	f024 0403 	bic.w	r4, r4, #3
 801aa4c:	42a0      	cmp	r0, r4
 801aa4e:	d0e3      	beq.n	801aa18 <_malloc_r+0x64>
 801aa50:	1a21      	subs	r1, r4, r0
 801aa52:	4630      	mov	r0, r6
 801aa54:	f000 f956 	bl	801ad04 <_sbrk_r>
 801aa58:	3001      	adds	r0, #1
 801aa5a:	d1dd      	bne.n	801aa18 <_malloc_r+0x64>
 801aa5c:	e7cf      	b.n	801a9fe <_malloc_r+0x4a>
 801aa5e:	bf00      	nop
 801aa60:	20008680 	.word	0x20008680
 801aa64:	20008684 	.word	0x20008684

0801aa68 <iprintf>:
 801aa68:	b40f      	push	{r0, r1, r2, r3}
 801aa6a:	4b0a      	ldr	r3, [pc, #40]	; (801aa94 <iprintf+0x2c>)
 801aa6c:	b513      	push	{r0, r1, r4, lr}
 801aa6e:	681c      	ldr	r4, [r3, #0]
 801aa70:	b124      	cbz	r4, 801aa7c <iprintf+0x14>
 801aa72:	69a3      	ldr	r3, [r4, #24]
 801aa74:	b913      	cbnz	r3, 801aa7c <iprintf+0x14>
 801aa76:	4620      	mov	r0, r4
 801aa78:	f7ff fe52 	bl	801a720 <__sinit>
 801aa7c:	ab05      	add	r3, sp, #20
 801aa7e:	9a04      	ldr	r2, [sp, #16]
 801aa80:	68a1      	ldr	r1, [r4, #8]
 801aa82:	9301      	str	r3, [sp, #4]
 801aa84:	4620      	mov	r0, r4
 801aa86:	f000 fc11 	bl	801b2ac <_vfiprintf_r>
 801aa8a:	b002      	add	sp, #8
 801aa8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa90:	b004      	add	sp, #16
 801aa92:	4770      	bx	lr
 801aa94:	20000040 	.word	0x20000040

0801aa98 <putchar>:
 801aa98:	4b09      	ldr	r3, [pc, #36]	; (801aac0 <putchar+0x28>)
 801aa9a:	b513      	push	{r0, r1, r4, lr}
 801aa9c:	681c      	ldr	r4, [r3, #0]
 801aa9e:	4601      	mov	r1, r0
 801aaa0:	b134      	cbz	r4, 801aab0 <putchar+0x18>
 801aaa2:	69a3      	ldr	r3, [r4, #24]
 801aaa4:	b923      	cbnz	r3, 801aab0 <putchar+0x18>
 801aaa6:	9001      	str	r0, [sp, #4]
 801aaa8:	4620      	mov	r0, r4
 801aaaa:	f7ff fe39 	bl	801a720 <__sinit>
 801aaae:	9901      	ldr	r1, [sp, #4]
 801aab0:	68a2      	ldr	r2, [r4, #8]
 801aab2:	4620      	mov	r0, r4
 801aab4:	b002      	add	sp, #8
 801aab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aaba:	f000 bebb 	b.w	801b834 <_putc_r>
 801aabe:	bf00      	nop
 801aac0:	20000040 	.word	0x20000040

0801aac4 <_puts_r>:
 801aac4:	b570      	push	{r4, r5, r6, lr}
 801aac6:	460e      	mov	r6, r1
 801aac8:	4605      	mov	r5, r0
 801aaca:	b118      	cbz	r0, 801aad4 <_puts_r+0x10>
 801aacc:	6983      	ldr	r3, [r0, #24]
 801aace:	b90b      	cbnz	r3, 801aad4 <_puts_r+0x10>
 801aad0:	f7ff fe26 	bl	801a720 <__sinit>
 801aad4:	69ab      	ldr	r3, [r5, #24]
 801aad6:	68ac      	ldr	r4, [r5, #8]
 801aad8:	b913      	cbnz	r3, 801aae0 <_puts_r+0x1c>
 801aada:	4628      	mov	r0, r5
 801aadc:	f7ff fe20 	bl	801a720 <__sinit>
 801aae0:	4b2c      	ldr	r3, [pc, #176]	; (801ab94 <_puts_r+0xd0>)
 801aae2:	429c      	cmp	r4, r3
 801aae4:	d120      	bne.n	801ab28 <_puts_r+0x64>
 801aae6:	686c      	ldr	r4, [r5, #4]
 801aae8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aaea:	07db      	lsls	r3, r3, #31
 801aaec:	d405      	bmi.n	801aafa <_puts_r+0x36>
 801aaee:	89a3      	ldrh	r3, [r4, #12]
 801aaf0:	0598      	lsls	r0, r3, #22
 801aaf2:	d402      	bmi.n	801aafa <_puts_r+0x36>
 801aaf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aaf6:	f7ff fed6 	bl	801a8a6 <__retarget_lock_acquire_recursive>
 801aafa:	89a3      	ldrh	r3, [r4, #12]
 801aafc:	0719      	lsls	r1, r3, #28
 801aafe:	d51d      	bpl.n	801ab3c <_puts_r+0x78>
 801ab00:	6923      	ldr	r3, [r4, #16]
 801ab02:	b1db      	cbz	r3, 801ab3c <_puts_r+0x78>
 801ab04:	3e01      	subs	r6, #1
 801ab06:	68a3      	ldr	r3, [r4, #8]
 801ab08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ab0c:	3b01      	subs	r3, #1
 801ab0e:	60a3      	str	r3, [r4, #8]
 801ab10:	bb39      	cbnz	r1, 801ab62 <_puts_r+0x9e>
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	da38      	bge.n	801ab88 <_puts_r+0xc4>
 801ab16:	4622      	mov	r2, r4
 801ab18:	210a      	movs	r1, #10
 801ab1a:	4628      	mov	r0, r5
 801ab1c:	f000 f946 	bl	801adac <__swbuf_r>
 801ab20:	3001      	adds	r0, #1
 801ab22:	d011      	beq.n	801ab48 <_puts_r+0x84>
 801ab24:	250a      	movs	r5, #10
 801ab26:	e011      	b.n	801ab4c <_puts_r+0x88>
 801ab28:	4b1b      	ldr	r3, [pc, #108]	; (801ab98 <_puts_r+0xd4>)
 801ab2a:	429c      	cmp	r4, r3
 801ab2c:	d101      	bne.n	801ab32 <_puts_r+0x6e>
 801ab2e:	68ac      	ldr	r4, [r5, #8]
 801ab30:	e7da      	b.n	801aae8 <_puts_r+0x24>
 801ab32:	4b1a      	ldr	r3, [pc, #104]	; (801ab9c <_puts_r+0xd8>)
 801ab34:	429c      	cmp	r4, r3
 801ab36:	bf08      	it	eq
 801ab38:	68ec      	ldreq	r4, [r5, #12]
 801ab3a:	e7d5      	b.n	801aae8 <_puts_r+0x24>
 801ab3c:	4621      	mov	r1, r4
 801ab3e:	4628      	mov	r0, r5
 801ab40:	f000 f998 	bl	801ae74 <__swsetup_r>
 801ab44:	2800      	cmp	r0, #0
 801ab46:	d0dd      	beq.n	801ab04 <_puts_r+0x40>
 801ab48:	f04f 35ff 	mov.w	r5, #4294967295
 801ab4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ab4e:	07da      	lsls	r2, r3, #31
 801ab50:	d405      	bmi.n	801ab5e <_puts_r+0x9a>
 801ab52:	89a3      	ldrh	r3, [r4, #12]
 801ab54:	059b      	lsls	r3, r3, #22
 801ab56:	d402      	bmi.n	801ab5e <_puts_r+0x9a>
 801ab58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab5a:	f7ff fea5 	bl	801a8a8 <__retarget_lock_release_recursive>
 801ab5e:	4628      	mov	r0, r5
 801ab60:	bd70      	pop	{r4, r5, r6, pc}
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	da04      	bge.n	801ab70 <_puts_r+0xac>
 801ab66:	69a2      	ldr	r2, [r4, #24]
 801ab68:	429a      	cmp	r2, r3
 801ab6a:	dc06      	bgt.n	801ab7a <_puts_r+0xb6>
 801ab6c:	290a      	cmp	r1, #10
 801ab6e:	d004      	beq.n	801ab7a <_puts_r+0xb6>
 801ab70:	6823      	ldr	r3, [r4, #0]
 801ab72:	1c5a      	adds	r2, r3, #1
 801ab74:	6022      	str	r2, [r4, #0]
 801ab76:	7019      	strb	r1, [r3, #0]
 801ab78:	e7c5      	b.n	801ab06 <_puts_r+0x42>
 801ab7a:	4622      	mov	r2, r4
 801ab7c:	4628      	mov	r0, r5
 801ab7e:	f000 f915 	bl	801adac <__swbuf_r>
 801ab82:	3001      	adds	r0, #1
 801ab84:	d1bf      	bne.n	801ab06 <_puts_r+0x42>
 801ab86:	e7df      	b.n	801ab48 <_puts_r+0x84>
 801ab88:	6823      	ldr	r3, [r4, #0]
 801ab8a:	250a      	movs	r5, #10
 801ab8c:	1c5a      	adds	r2, r3, #1
 801ab8e:	6022      	str	r2, [r4, #0]
 801ab90:	701d      	strb	r5, [r3, #0]
 801ab92:	e7db      	b.n	801ab4c <_puts_r+0x88>
 801ab94:	0801f10c 	.word	0x0801f10c
 801ab98:	0801f12c 	.word	0x0801f12c
 801ab9c:	0801f0ec 	.word	0x0801f0ec

0801aba0 <puts>:
 801aba0:	4b02      	ldr	r3, [pc, #8]	; (801abac <puts+0xc>)
 801aba2:	4601      	mov	r1, r0
 801aba4:	6818      	ldr	r0, [r3, #0]
 801aba6:	f7ff bf8d 	b.w	801aac4 <_puts_r>
 801abaa:	bf00      	nop
 801abac:	20000040 	.word	0x20000040

0801abb0 <rand>:
 801abb0:	4b17      	ldr	r3, [pc, #92]	; (801ac10 <rand+0x60>)
 801abb2:	b510      	push	{r4, lr}
 801abb4:	681c      	ldr	r4, [r3, #0]
 801abb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801abb8:	b9b3      	cbnz	r3, 801abe8 <rand+0x38>
 801abba:	2018      	movs	r0, #24
 801abbc:	f7ff fe76 	bl	801a8ac <malloc>
 801abc0:	63a0      	str	r0, [r4, #56]	; 0x38
 801abc2:	b928      	cbnz	r0, 801abd0 <rand+0x20>
 801abc4:	4602      	mov	r2, r0
 801abc6:	4b13      	ldr	r3, [pc, #76]	; (801ac14 <rand+0x64>)
 801abc8:	4813      	ldr	r0, [pc, #76]	; (801ac18 <rand+0x68>)
 801abca:	214e      	movs	r1, #78	; 0x4e
 801abcc:	f000 f9c0 	bl	801af50 <__assert_func>
 801abd0:	4a12      	ldr	r2, [pc, #72]	; (801ac1c <rand+0x6c>)
 801abd2:	4b13      	ldr	r3, [pc, #76]	; (801ac20 <rand+0x70>)
 801abd4:	e9c0 2300 	strd	r2, r3, [r0]
 801abd8:	4b12      	ldr	r3, [pc, #72]	; (801ac24 <rand+0x74>)
 801abda:	6083      	str	r3, [r0, #8]
 801abdc:	230b      	movs	r3, #11
 801abde:	8183      	strh	r3, [r0, #12]
 801abe0:	2201      	movs	r2, #1
 801abe2:	2300      	movs	r3, #0
 801abe4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801abe8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801abea:	480f      	ldr	r0, [pc, #60]	; (801ac28 <rand+0x78>)
 801abec:	690a      	ldr	r2, [r1, #16]
 801abee:	694b      	ldr	r3, [r1, #20]
 801abf0:	4c0e      	ldr	r4, [pc, #56]	; (801ac2c <rand+0x7c>)
 801abf2:	4350      	muls	r0, r2
 801abf4:	fb04 0003 	mla	r0, r4, r3, r0
 801abf8:	fba2 3404 	umull	r3, r4, r2, r4
 801abfc:	1c5a      	adds	r2, r3, #1
 801abfe:	4404      	add	r4, r0
 801ac00:	f144 0000 	adc.w	r0, r4, #0
 801ac04:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801ac08:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ac0c:	bd10      	pop	{r4, pc}
 801ac0e:	bf00      	nop
 801ac10:	20000040 	.word	0x20000040
 801ac14:	0801f150 	.word	0x0801f150
 801ac18:	0801f167 	.word	0x0801f167
 801ac1c:	abcd330e 	.word	0xabcd330e
 801ac20:	e66d1234 	.word	0xe66d1234
 801ac24:	0005deec 	.word	0x0005deec
 801ac28:	5851f42d 	.word	0x5851f42d
 801ac2c:	4c957f2d 	.word	0x4c957f2d

0801ac30 <cleanup_glue>:
 801ac30:	b538      	push	{r3, r4, r5, lr}
 801ac32:	460c      	mov	r4, r1
 801ac34:	6809      	ldr	r1, [r1, #0]
 801ac36:	4605      	mov	r5, r0
 801ac38:	b109      	cbz	r1, 801ac3e <cleanup_glue+0xe>
 801ac3a:	f7ff fff9 	bl	801ac30 <cleanup_glue>
 801ac3e:	4621      	mov	r1, r4
 801ac40:	4628      	mov	r0, r5
 801ac42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ac46:	f7ff be65 	b.w	801a914 <_free_r>
	...

0801ac4c <_reclaim_reent>:
 801ac4c:	4b2c      	ldr	r3, [pc, #176]	; (801ad00 <_reclaim_reent+0xb4>)
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	4283      	cmp	r3, r0
 801ac52:	b570      	push	{r4, r5, r6, lr}
 801ac54:	4604      	mov	r4, r0
 801ac56:	d051      	beq.n	801acfc <_reclaim_reent+0xb0>
 801ac58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ac5a:	b143      	cbz	r3, 801ac6e <_reclaim_reent+0x22>
 801ac5c:	68db      	ldr	r3, [r3, #12]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d14a      	bne.n	801acf8 <_reclaim_reent+0xac>
 801ac62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ac64:	6819      	ldr	r1, [r3, #0]
 801ac66:	b111      	cbz	r1, 801ac6e <_reclaim_reent+0x22>
 801ac68:	4620      	mov	r0, r4
 801ac6a:	f7ff fe53 	bl	801a914 <_free_r>
 801ac6e:	6961      	ldr	r1, [r4, #20]
 801ac70:	b111      	cbz	r1, 801ac78 <_reclaim_reent+0x2c>
 801ac72:	4620      	mov	r0, r4
 801ac74:	f7ff fe4e 	bl	801a914 <_free_r>
 801ac78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ac7a:	b111      	cbz	r1, 801ac82 <_reclaim_reent+0x36>
 801ac7c:	4620      	mov	r0, r4
 801ac7e:	f7ff fe49 	bl	801a914 <_free_r>
 801ac82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ac84:	b111      	cbz	r1, 801ac8c <_reclaim_reent+0x40>
 801ac86:	4620      	mov	r0, r4
 801ac88:	f7ff fe44 	bl	801a914 <_free_r>
 801ac8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ac8e:	b111      	cbz	r1, 801ac96 <_reclaim_reent+0x4a>
 801ac90:	4620      	mov	r0, r4
 801ac92:	f7ff fe3f 	bl	801a914 <_free_r>
 801ac96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ac98:	b111      	cbz	r1, 801aca0 <_reclaim_reent+0x54>
 801ac9a:	4620      	mov	r0, r4
 801ac9c:	f7ff fe3a 	bl	801a914 <_free_r>
 801aca0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801aca2:	b111      	cbz	r1, 801acaa <_reclaim_reent+0x5e>
 801aca4:	4620      	mov	r0, r4
 801aca6:	f7ff fe35 	bl	801a914 <_free_r>
 801acaa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801acac:	b111      	cbz	r1, 801acb4 <_reclaim_reent+0x68>
 801acae:	4620      	mov	r0, r4
 801acb0:	f7ff fe30 	bl	801a914 <_free_r>
 801acb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801acb6:	b111      	cbz	r1, 801acbe <_reclaim_reent+0x72>
 801acb8:	4620      	mov	r0, r4
 801acba:	f7ff fe2b 	bl	801a914 <_free_r>
 801acbe:	69a3      	ldr	r3, [r4, #24]
 801acc0:	b1e3      	cbz	r3, 801acfc <_reclaim_reent+0xb0>
 801acc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801acc4:	4620      	mov	r0, r4
 801acc6:	4798      	blx	r3
 801acc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801acca:	b1b9      	cbz	r1, 801acfc <_reclaim_reent+0xb0>
 801accc:	4620      	mov	r0, r4
 801acce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801acd2:	f7ff bfad 	b.w	801ac30 <cleanup_glue>
 801acd6:	5949      	ldr	r1, [r1, r5]
 801acd8:	b941      	cbnz	r1, 801acec <_reclaim_reent+0xa0>
 801acda:	3504      	adds	r5, #4
 801acdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801acde:	2d80      	cmp	r5, #128	; 0x80
 801ace0:	68d9      	ldr	r1, [r3, #12]
 801ace2:	d1f8      	bne.n	801acd6 <_reclaim_reent+0x8a>
 801ace4:	4620      	mov	r0, r4
 801ace6:	f7ff fe15 	bl	801a914 <_free_r>
 801acea:	e7ba      	b.n	801ac62 <_reclaim_reent+0x16>
 801acec:	680e      	ldr	r6, [r1, #0]
 801acee:	4620      	mov	r0, r4
 801acf0:	f7ff fe10 	bl	801a914 <_free_r>
 801acf4:	4631      	mov	r1, r6
 801acf6:	e7ef      	b.n	801acd8 <_reclaim_reent+0x8c>
 801acf8:	2500      	movs	r5, #0
 801acfa:	e7ef      	b.n	801acdc <_reclaim_reent+0x90>
 801acfc:	bd70      	pop	{r4, r5, r6, pc}
 801acfe:	bf00      	nop
 801ad00:	20000040 	.word	0x20000040

0801ad04 <_sbrk_r>:
 801ad04:	b538      	push	{r3, r4, r5, lr}
 801ad06:	4d06      	ldr	r5, [pc, #24]	; (801ad20 <_sbrk_r+0x1c>)
 801ad08:	2300      	movs	r3, #0
 801ad0a:	4604      	mov	r4, r0
 801ad0c:	4608      	mov	r0, r1
 801ad0e:	602b      	str	r3, [r5, #0]
 801ad10:	f7e5 ff9c 	bl	8000c4c <_sbrk>
 801ad14:	1c43      	adds	r3, r0, #1
 801ad16:	d102      	bne.n	801ad1e <_sbrk_r+0x1a>
 801ad18:	682b      	ldr	r3, [r5, #0]
 801ad1a:	b103      	cbz	r3, 801ad1e <_sbrk_r+0x1a>
 801ad1c:	6023      	str	r3, [r4, #0]
 801ad1e:	bd38      	pop	{r3, r4, r5, pc}
 801ad20:	2000f43c 	.word	0x2000f43c

0801ad24 <__sread>:
 801ad24:	b510      	push	{r4, lr}
 801ad26:	460c      	mov	r4, r1
 801ad28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad2c:	f000 fdca 	bl	801b8c4 <_read_r>
 801ad30:	2800      	cmp	r0, #0
 801ad32:	bfab      	itete	ge
 801ad34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ad36:	89a3      	ldrhlt	r3, [r4, #12]
 801ad38:	181b      	addge	r3, r3, r0
 801ad3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ad3e:	bfac      	ite	ge
 801ad40:	6563      	strge	r3, [r4, #84]	; 0x54
 801ad42:	81a3      	strhlt	r3, [r4, #12]
 801ad44:	bd10      	pop	{r4, pc}

0801ad46 <__swrite>:
 801ad46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad4a:	461f      	mov	r7, r3
 801ad4c:	898b      	ldrh	r3, [r1, #12]
 801ad4e:	05db      	lsls	r3, r3, #23
 801ad50:	4605      	mov	r5, r0
 801ad52:	460c      	mov	r4, r1
 801ad54:	4616      	mov	r6, r2
 801ad56:	d505      	bpl.n	801ad64 <__swrite+0x1e>
 801ad58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad5c:	2302      	movs	r3, #2
 801ad5e:	2200      	movs	r2, #0
 801ad60:	f000 f9f8 	bl	801b154 <_lseek_r>
 801ad64:	89a3      	ldrh	r3, [r4, #12]
 801ad66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ad6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ad6e:	81a3      	strh	r3, [r4, #12]
 801ad70:	4632      	mov	r2, r6
 801ad72:	463b      	mov	r3, r7
 801ad74:	4628      	mov	r0, r5
 801ad76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad7a:	f000 b869 	b.w	801ae50 <_write_r>

0801ad7e <__sseek>:
 801ad7e:	b510      	push	{r4, lr}
 801ad80:	460c      	mov	r4, r1
 801ad82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad86:	f000 f9e5 	bl	801b154 <_lseek_r>
 801ad8a:	1c43      	adds	r3, r0, #1
 801ad8c:	89a3      	ldrh	r3, [r4, #12]
 801ad8e:	bf15      	itete	ne
 801ad90:	6560      	strne	r0, [r4, #84]	; 0x54
 801ad92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ad96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ad9a:	81a3      	strheq	r3, [r4, #12]
 801ad9c:	bf18      	it	ne
 801ad9e:	81a3      	strhne	r3, [r4, #12]
 801ada0:	bd10      	pop	{r4, pc}

0801ada2 <__sclose>:
 801ada2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ada6:	f000 b8f1 	b.w	801af8c <_close_r>
	...

0801adac <__swbuf_r>:
 801adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adae:	460e      	mov	r6, r1
 801adb0:	4614      	mov	r4, r2
 801adb2:	4605      	mov	r5, r0
 801adb4:	b118      	cbz	r0, 801adbe <__swbuf_r+0x12>
 801adb6:	6983      	ldr	r3, [r0, #24]
 801adb8:	b90b      	cbnz	r3, 801adbe <__swbuf_r+0x12>
 801adba:	f7ff fcb1 	bl	801a720 <__sinit>
 801adbe:	4b21      	ldr	r3, [pc, #132]	; (801ae44 <__swbuf_r+0x98>)
 801adc0:	429c      	cmp	r4, r3
 801adc2:	d12b      	bne.n	801ae1c <__swbuf_r+0x70>
 801adc4:	686c      	ldr	r4, [r5, #4]
 801adc6:	69a3      	ldr	r3, [r4, #24]
 801adc8:	60a3      	str	r3, [r4, #8]
 801adca:	89a3      	ldrh	r3, [r4, #12]
 801adcc:	071a      	lsls	r2, r3, #28
 801adce:	d52f      	bpl.n	801ae30 <__swbuf_r+0x84>
 801add0:	6923      	ldr	r3, [r4, #16]
 801add2:	b36b      	cbz	r3, 801ae30 <__swbuf_r+0x84>
 801add4:	6923      	ldr	r3, [r4, #16]
 801add6:	6820      	ldr	r0, [r4, #0]
 801add8:	1ac0      	subs	r0, r0, r3
 801adda:	6963      	ldr	r3, [r4, #20]
 801addc:	b2f6      	uxtb	r6, r6
 801adde:	4283      	cmp	r3, r0
 801ade0:	4637      	mov	r7, r6
 801ade2:	dc04      	bgt.n	801adee <__swbuf_r+0x42>
 801ade4:	4621      	mov	r1, r4
 801ade6:	4628      	mov	r0, r5
 801ade8:	f000 f966 	bl	801b0b8 <_fflush_r>
 801adec:	bb30      	cbnz	r0, 801ae3c <__swbuf_r+0x90>
 801adee:	68a3      	ldr	r3, [r4, #8]
 801adf0:	3b01      	subs	r3, #1
 801adf2:	60a3      	str	r3, [r4, #8]
 801adf4:	6823      	ldr	r3, [r4, #0]
 801adf6:	1c5a      	adds	r2, r3, #1
 801adf8:	6022      	str	r2, [r4, #0]
 801adfa:	701e      	strb	r6, [r3, #0]
 801adfc:	6963      	ldr	r3, [r4, #20]
 801adfe:	3001      	adds	r0, #1
 801ae00:	4283      	cmp	r3, r0
 801ae02:	d004      	beq.n	801ae0e <__swbuf_r+0x62>
 801ae04:	89a3      	ldrh	r3, [r4, #12]
 801ae06:	07db      	lsls	r3, r3, #31
 801ae08:	d506      	bpl.n	801ae18 <__swbuf_r+0x6c>
 801ae0a:	2e0a      	cmp	r6, #10
 801ae0c:	d104      	bne.n	801ae18 <__swbuf_r+0x6c>
 801ae0e:	4621      	mov	r1, r4
 801ae10:	4628      	mov	r0, r5
 801ae12:	f000 f951 	bl	801b0b8 <_fflush_r>
 801ae16:	b988      	cbnz	r0, 801ae3c <__swbuf_r+0x90>
 801ae18:	4638      	mov	r0, r7
 801ae1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae1c:	4b0a      	ldr	r3, [pc, #40]	; (801ae48 <__swbuf_r+0x9c>)
 801ae1e:	429c      	cmp	r4, r3
 801ae20:	d101      	bne.n	801ae26 <__swbuf_r+0x7a>
 801ae22:	68ac      	ldr	r4, [r5, #8]
 801ae24:	e7cf      	b.n	801adc6 <__swbuf_r+0x1a>
 801ae26:	4b09      	ldr	r3, [pc, #36]	; (801ae4c <__swbuf_r+0xa0>)
 801ae28:	429c      	cmp	r4, r3
 801ae2a:	bf08      	it	eq
 801ae2c:	68ec      	ldreq	r4, [r5, #12]
 801ae2e:	e7ca      	b.n	801adc6 <__swbuf_r+0x1a>
 801ae30:	4621      	mov	r1, r4
 801ae32:	4628      	mov	r0, r5
 801ae34:	f000 f81e 	bl	801ae74 <__swsetup_r>
 801ae38:	2800      	cmp	r0, #0
 801ae3a:	d0cb      	beq.n	801add4 <__swbuf_r+0x28>
 801ae3c:	f04f 37ff 	mov.w	r7, #4294967295
 801ae40:	e7ea      	b.n	801ae18 <__swbuf_r+0x6c>
 801ae42:	bf00      	nop
 801ae44:	0801f10c 	.word	0x0801f10c
 801ae48:	0801f12c 	.word	0x0801f12c
 801ae4c:	0801f0ec 	.word	0x0801f0ec

0801ae50 <_write_r>:
 801ae50:	b538      	push	{r3, r4, r5, lr}
 801ae52:	4d07      	ldr	r5, [pc, #28]	; (801ae70 <_write_r+0x20>)
 801ae54:	4604      	mov	r4, r0
 801ae56:	4608      	mov	r0, r1
 801ae58:	4611      	mov	r1, r2
 801ae5a:	2200      	movs	r2, #0
 801ae5c:	602a      	str	r2, [r5, #0]
 801ae5e:	461a      	mov	r2, r3
 801ae60:	f7e5 fed7 	bl	8000c12 <_write>
 801ae64:	1c43      	adds	r3, r0, #1
 801ae66:	d102      	bne.n	801ae6e <_write_r+0x1e>
 801ae68:	682b      	ldr	r3, [r5, #0]
 801ae6a:	b103      	cbz	r3, 801ae6e <_write_r+0x1e>
 801ae6c:	6023      	str	r3, [r4, #0]
 801ae6e:	bd38      	pop	{r3, r4, r5, pc}
 801ae70:	2000f43c 	.word	0x2000f43c

0801ae74 <__swsetup_r>:
 801ae74:	4b32      	ldr	r3, [pc, #200]	; (801af40 <__swsetup_r+0xcc>)
 801ae76:	b570      	push	{r4, r5, r6, lr}
 801ae78:	681d      	ldr	r5, [r3, #0]
 801ae7a:	4606      	mov	r6, r0
 801ae7c:	460c      	mov	r4, r1
 801ae7e:	b125      	cbz	r5, 801ae8a <__swsetup_r+0x16>
 801ae80:	69ab      	ldr	r3, [r5, #24]
 801ae82:	b913      	cbnz	r3, 801ae8a <__swsetup_r+0x16>
 801ae84:	4628      	mov	r0, r5
 801ae86:	f7ff fc4b 	bl	801a720 <__sinit>
 801ae8a:	4b2e      	ldr	r3, [pc, #184]	; (801af44 <__swsetup_r+0xd0>)
 801ae8c:	429c      	cmp	r4, r3
 801ae8e:	d10f      	bne.n	801aeb0 <__swsetup_r+0x3c>
 801ae90:	686c      	ldr	r4, [r5, #4]
 801ae92:	89a3      	ldrh	r3, [r4, #12]
 801ae94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ae98:	0719      	lsls	r1, r3, #28
 801ae9a:	d42c      	bmi.n	801aef6 <__swsetup_r+0x82>
 801ae9c:	06dd      	lsls	r5, r3, #27
 801ae9e:	d411      	bmi.n	801aec4 <__swsetup_r+0x50>
 801aea0:	2309      	movs	r3, #9
 801aea2:	6033      	str	r3, [r6, #0]
 801aea4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801aea8:	81a3      	strh	r3, [r4, #12]
 801aeaa:	f04f 30ff 	mov.w	r0, #4294967295
 801aeae:	e03e      	b.n	801af2e <__swsetup_r+0xba>
 801aeb0:	4b25      	ldr	r3, [pc, #148]	; (801af48 <__swsetup_r+0xd4>)
 801aeb2:	429c      	cmp	r4, r3
 801aeb4:	d101      	bne.n	801aeba <__swsetup_r+0x46>
 801aeb6:	68ac      	ldr	r4, [r5, #8]
 801aeb8:	e7eb      	b.n	801ae92 <__swsetup_r+0x1e>
 801aeba:	4b24      	ldr	r3, [pc, #144]	; (801af4c <__swsetup_r+0xd8>)
 801aebc:	429c      	cmp	r4, r3
 801aebe:	bf08      	it	eq
 801aec0:	68ec      	ldreq	r4, [r5, #12]
 801aec2:	e7e6      	b.n	801ae92 <__swsetup_r+0x1e>
 801aec4:	0758      	lsls	r0, r3, #29
 801aec6:	d512      	bpl.n	801aeee <__swsetup_r+0x7a>
 801aec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aeca:	b141      	cbz	r1, 801aede <__swsetup_r+0x6a>
 801aecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aed0:	4299      	cmp	r1, r3
 801aed2:	d002      	beq.n	801aeda <__swsetup_r+0x66>
 801aed4:	4630      	mov	r0, r6
 801aed6:	f7ff fd1d 	bl	801a914 <_free_r>
 801aeda:	2300      	movs	r3, #0
 801aedc:	6363      	str	r3, [r4, #52]	; 0x34
 801aede:	89a3      	ldrh	r3, [r4, #12]
 801aee0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801aee4:	81a3      	strh	r3, [r4, #12]
 801aee6:	2300      	movs	r3, #0
 801aee8:	6063      	str	r3, [r4, #4]
 801aeea:	6923      	ldr	r3, [r4, #16]
 801aeec:	6023      	str	r3, [r4, #0]
 801aeee:	89a3      	ldrh	r3, [r4, #12]
 801aef0:	f043 0308 	orr.w	r3, r3, #8
 801aef4:	81a3      	strh	r3, [r4, #12]
 801aef6:	6923      	ldr	r3, [r4, #16]
 801aef8:	b94b      	cbnz	r3, 801af0e <__swsetup_r+0x9a>
 801aefa:	89a3      	ldrh	r3, [r4, #12]
 801aefc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801af00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801af04:	d003      	beq.n	801af0e <__swsetup_r+0x9a>
 801af06:	4621      	mov	r1, r4
 801af08:	4630      	mov	r0, r6
 801af0a:	f000 f959 	bl	801b1c0 <__smakebuf_r>
 801af0e:	89a0      	ldrh	r0, [r4, #12]
 801af10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801af14:	f010 0301 	ands.w	r3, r0, #1
 801af18:	d00a      	beq.n	801af30 <__swsetup_r+0xbc>
 801af1a:	2300      	movs	r3, #0
 801af1c:	60a3      	str	r3, [r4, #8]
 801af1e:	6963      	ldr	r3, [r4, #20]
 801af20:	425b      	negs	r3, r3
 801af22:	61a3      	str	r3, [r4, #24]
 801af24:	6923      	ldr	r3, [r4, #16]
 801af26:	b943      	cbnz	r3, 801af3a <__swsetup_r+0xc6>
 801af28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801af2c:	d1ba      	bne.n	801aea4 <__swsetup_r+0x30>
 801af2e:	bd70      	pop	{r4, r5, r6, pc}
 801af30:	0781      	lsls	r1, r0, #30
 801af32:	bf58      	it	pl
 801af34:	6963      	ldrpl	r3, [r4, #20]
 801af36:	60a3      	str	r3, [r4, #8]
 801af38:	e7f4      	b.n	801af24 <__swsetup_r+0xb0>
 801af3a:	2000      	movs	r0, #0
 801af3c:	e7f7      	b.n	801af2e <__swsetup_r+0xba>
 801af3e:	bf00      	nop
 801af40:	20000040 	.word	0x20000040
 801af44:	0801f10c 	.word	0x0801f10c
 801af48:	0801f12c 	.word	0x0801f12c
 801af4c:	0801f0ec 	.word	0x0801f0ec

0801af50 <__assert_func>:
 801af50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801af52:	4614      	mov	r4, r2
 801af54:	461a      	mov	r2, r3
 801af56:	4b09      	ldr	r3, [pc, #36]	; (801af7c <__assert_func+0x2c>)
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	4605      	mov	r5, r0
 801af5c:	68d8      	ldr	r0, [r3, #12]
 801af5e:	b14c      	cbz	r4, 801af74 <__assert_func+0x24>
 801af60:	4b07      	ldr	r3, [pc, #28]	; (801af80 <__assert_func+0x30>)
 801af62:	9100      	str	r1, [sp, #0]
 801af64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801af68:	4906      	ldr	r1, [pc, #24]	; (801af84 <__assert_func+0x34>)
 801af6a:	462b      	mov	r3, r5
 801af6c:	f000 f8e0 	bl	801b130 <fiprintf>
 801af70:	f000 fcba 	bl	801b8e8 <abort>
 801af74:	4b04      	ldr	r3, [pc, #16]	; (801af88 <__assert_func+0x38>)
 801af76:	461c      	mov	r4, r3
 801af78:	e7f3      	b.n	801af62 <__assert_func+0x12>
 801af7a:	bf00      	nop
 801af7c:	20000040 	.word	0x20000040
 801af80:	0801f1c6 	.word	0x0801f1c6
 801af84:	0801f1d3 	.word	0x0801f1d3
 801af88:	0801f201 	.word	0x0801f201

0801af8c <_close_r>:
 801af8c:	b538      	push	{r3, r4, r5, lr}
 801af8e:	4d06      	ldr	r5, [pc, #24]	; (801afa8 <_close_r+0x1c>)
 801af90:	2300      	movs	r3, #0
 801af92:	4604      	mov	r4, r0
 801af94:	4608      	mov	r0, r1
 801af96:	602b      	str	r3, [r5, #0]
 801af98:	f7e5 fe86 	bl	8000ca8 <_close>
 801af9c:	1c43      	adds	r3, r0, #1
 801af9e:	d102      	bne.n	801afa6 <_close_r+0x1a>
 801afa0:	682b      	ldr	r3, [r5, #0]
 801afa2:	b103      	cbz	r3, 801afa6 <_close_r+0x1a>
 801afa4:	6023      	str	r3, [r4, #0]
 801afa6:	bd38      	pop	{r3, r4, r5, pc}
 801afa8:	2000f43c 	.word	0x2000f43c

0801afac <__sflush_r>:
 801afac:	898a      	ldrh	r2, [r1, #12]
 801afae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afb2:	4605      	mov	r5, r0
 801afb4:	0710      	lsls	r0, r2, #28
 801afb6:	460c      	mov	r4, r1
 801afb8:	d458      	bmi.n	801b06c <__sflush_r+0xc0>
 801afba:	684b      	ldr	r3, [r1, #4]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	dc05      	bgt.n	801afcc <__sflush_r+0x20>
 801afc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	dc02      	bgt.n	801afcc <__sflush_r+0x20>
 801afc6:	2000      	movs	r0, #0
 801afc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801afce:	2e00      	cmp	r6, #0
 801afd0:	d0f9      	beq.n	801afc6 <__sflush_r+0x1a>
 801afd2:	2300      	movs	r3, #0
 801afd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801afd8:	682f      	ldr	r7, [r5, #0]
 801afda:	602b      	str	r3, [r5, #0]
 801afdc:	d032      	beq.n	801b044 <__sflush_r+0x98>
 801afde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801afe0:	89a3      	ldrh	r3, [r4, #12]
 801afe2:	075a      	lsls	r2, r3, #29
 801afe4:	d505      	bpl.n	801aff2 <__sflush_r+0x46>
 801afe6:	6863      	ldr	r3, [r4, #4]
 801afe8:	1ac0      	subs	r0, r0, r3
 801afea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801afec:	b10b      	cbz	r3, 801aff2 <__sflush_r+0x46>
 801afee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aff0:	1ac0      	subs	r0, r0, r3
 801aff2:	2300      	movs	r3, #0
 801aff4:	4602      	mov	r2, r0
 801aff6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aff8:	6a21      	ldr	r1, [r4, #32]
 801affa:	4628      	mov	r0, r5
 801affc:	47b0      	blx	r6
 801affe:	1c43      	adds	r3, r0, #1
 801b000:	89a3      	ldrh	r3, [r4, #12]
 801b002:	d106      	bne.n	801b012 <__sflush_r+0x66>
 801b004:	6829      	ldr	r1, [r5, #0]
 801b006:	291d      	cmp	r1, #29
 801b008:	d82c      	bhi.n	801b064 <__sflush_r+0xb8>
 801b00a:	4a2a      	ldr	r2, [pc, #168]	; (801b0b4 <__sflush_r+0x108>)
 801b00c:	40ca      	lsrs	r2, r1
 801b00e:	07d6      	lsls	r6, r2, #31
 801b010:	d528      	bpl.n	801b064 <__sflush_r+0xb8>
 801b012:	2200      	movs	r2, #0
 801b014:	6062      	str	r2, [r4, #4]
 801b016:	04d9      	lsls	r1, r3, #19
 801b018:	6922      	ldr	r2, [r4, #16]
 801b01a:	6022      	str	r2, [r4, #0]
 801b01c:	d504      	bpl.n	801b028 <__sflush_r+0x7c>
 801b01e:	1c42      	adds	r2, r0, #1
 801b020:	d101      	bne.n	801b026 <__sflush_r+0x7a>
 801b022:	682b      	ldr	r3, [r5, #0]
 801b024:	b903      	cbnz	r3, 801b028 <__sflush_r+0x7c>
 801b026:	6560      	str	r0, [r4, #84]	; 0x54
 801b028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b02a:	602f      	str	r7, [r5, #0]
 801b02c:	2900      	cmp	r1, #0
 801b02e:	d0ca      	beq.n	801afc6 <__sflush_r+0x1a>
 801b030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b034:	4299      	cmp	r1, r3
 801b036:	d002      	beq.n	801b03e <__sflush_r+0x92>
 801b038:	4628      	mov	r0, r5
 801b03a:	f7ff fc6b 	bl	801a914 <_free_r>
 801b03e:	2000      	movs	r0, #0
 801b040:	6360      	str	r0, [r4, #52]	; 0x34
 801b042:	e7c1      	b.n	801afc8 <__sflush_r+0x1c>
 801b044:	6a21      	ldr	r1, [r4, #32]
 801b046:	2301      	movs	r3, #1
 801b048:	4628      	mov	r0, r5
 801b04a:	47b0      	blx	r6
 801b04c:	1c41      	adds	r1, r0, #1
 801b04e:	d1c7      	bne.n	801afe0 <__sflush_r+0x34>
 801b050:	682b      	ldr	r3, [r5, #0]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d0c4      	beq.n	801afe0 <__sflush_r+0x34>
 801b056:	2b1d      	cmp	r3, #29
 801b058:	d001      	beq.n	801b05e <__sflush_r+0xb2>
 801b05a:	2b16      	cmp	r3, #22
 801b05c:	d101      	bne.n	801b062 <__sflush_r+0xb6>
 801b05e:	602f      	str	r7, [r5, #0]
 801b060:	e7b1      	b.n	801afc6 <__sflush_r+0x1a>
 801b062:	89a3      	ldrh	r3, [r4, #12]
 801b064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b068:	81a3      	strh	r3, [r4, #12]
 801b06a:	e7ad      	b.n	801afc8 <__sflush_r+0x1c>
 801b06c:	690f      	ldr	r7, [r1, #16]
 801b06e:	2f00      	cmp	r7, #0
 801b070:	d0a9      	beq.n	801afc6 <__sflush_r+0x1a>
 801b072:	0793      	lsls	r3, r2, #30
 801b074:	680e      	ldr	r6, [r1, #0]
 801b076:	bf08      	it	eq
 801b078:	694b      	ldreq	r3, [r1, #20]
 801b07a:	600f      	str	r7, [r1, #0]
 801b07c:	bf18      	it	ne
 801b07e:	2300      	movne	r3, #0
 801b080:	eba6 0807 	sub.w	r8, r6, r7
 801b084:	608b      	str	r3, [r1, #8]
 801b086:	f1b8 0f00 	cmp.w	r8, #0
 801b08a:	dd9c      	ble.n	801afc6 <__sflush_r+0x1a>
 801b08c:	6a21      	ldr	r1, [r4, #32]
 801b08e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b090:	4643      	mov	r3, r8
 801b092:	463a      	mov	r2, r7
 801b094:	4628      	mov	r0, r5
 801b096:	47b0      	blx	r6
 801b098:	2800      	cmp	r0, #0
 801b09a:	dc06      	bgt.n	801b0aa <__sflush_r+0xfe>
 801b09c:	89a3      	ldrh	r3, [r4, #12]
 801b09e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b0a2:	81a3      	strh	r3, [r4, #12]
 801b0a4:	f04f 30ff 	mov.w	r0, #4294967295
 801b0a8:	e78e      	b.n	801afc8 <__sflush_r+0x1c>
 801b0aa:	4407      	add	r7, r0
 801b0ac:	eba8 0800 	sub.w	r8, r8, r0
 801b0b0:	e7e9      	b.n	801b086 <__sflush_r+0xda>
 801b0b2:	bf00      	nop
 801b0b4:	20400001 	.word	0x20400001

0801b0b8 <_fflush_r>:
 801b0b8:	b538      	push	{r3, r4, r5, lr}
 801b0ba:	690b      	ldr	r3, [r1, #16]
 801b0bc:	4605      	mov	r5, r0
 801b0be:	460c      	mov	r4, r1
 801b0c0:	b913      	cbnz	r3, 801b0c8 <_fflush_r+0x10>
 801b0c2:	2500      	movs	r5, #0
 801b0c4:	4628      	mov	r0, r5
 801b0c6:	bd38      	pop	{r3, r4, r5, pc}
 801b0c8:	b118      	cbz	r0, 801b0d2 <_fflush_r+0x1a>
 801b0ca:	6983      	ldr	r3, [r0, #24]
 801b0cc:	b90b      	cbnz	r3, 801b0d2 <_fflush_r+0x1a>
 801b0ce:	f7ff fb27 	bl	801a720 <__sinit>
 801b0d2:	4b14      	ldr	r3, [pc, #80]	; (801b124 <_fflush_r+0x6c>)
 801b0d4:	429c      	cmp	r4, r3
 801b0d6:	d11b      	bne.n	801b110 <_fflush_r+0x58>
 801b0d8:	686c      	ldr	r4, [r5, #4]
 801b0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d0ef      	beq.n	801b0c2 <_fflush_r+0xa>
 801b0e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b0e4:	07d0      	lsls	r0, r2, #31
 801b0e6:	d404      	bmi.n	801b0f2 <_fflush_r+0x3a>
 801b0e8:	0599      	lsls	r1, r3, #22
 801b0ea:	d402      	bmi.n	801b0f2 <_fflush_r+0x3a>
 801b0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b0ee:	f7ff fbda 	bl	801a8a6 <__retarget_lock_acquire_recursive>
 801b0f2:	4628      	mov	r0, r5
 801b0f4:	4621      	mov	r1, r4
 801b0f6:	f7ff ff59 	bl	801afac <__sflush_r>
 801b0fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b0fc:	07da      	lsls	r2, r3, #31
 801b0fe:	4605      	mov	r5, r0
 801b100:	d4e0      	bmi.n	801b0c4 <_fflush_r+0xc>
 801b102:	89a3      	ldrh	r3, [r4, #12]
 801b104:	059b      	lsls	r3, r3, #22
 801b106:	d4dd      	bmi.n	801b0c4 <_fflush_r+0xc>
 801b108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b10a:	f7ff fbcd 	bl	801a8a8 <__retarget_lock_release_recursive>
 801b10e:	e7d9      	b.n	801b0c4 <_fflush_r+0xc>
 801b110:	4b05      	ldr	r3, [pc, #20]	; (801b128 <_fflush_r+0x70>)
 801b112:	429c      	cmp	r4, r3
 801b114:	d101      	bne.n	801b11a <_fflush_r+0x62>
 801b116:	68ac      	ldr	r4, [r5, #8]
 801b118:	e7df      	b.n	801b0da <_fflush_r+0x22>
 801b11a:	4b04      	ldr	r3, [pc, #16]	; (801b12c <_fflush_r+0x74>)
 801b11c:	429c      	cmp	r4, r3
 801b11e:	bf08      	it	eq
 801b120:	68ec      	ldreq	r4, [r5, #12]
 801b122:	e7da      	b.n	801b0da <_fflush_r+0x22>
 801b124:	0801f10c 	.word	0x0801f10c
 801b128:	0801f12c 	.word	0x0801f12c
 801b12c:	0801f0ec 	.word	0x0801f0ec

0801b130 <fiprintf>:
 801b130:	b40e      	push	{r1, r2, r3}
 801b132:	b503      	push	{r0, r1, lr}
 801b134:	4601      	mov	r1, r0
 801b136:	ab03      	add	r3, sp, #12
 801b138:	4805      	ldr	r0, [pc, #20]	; (801b150 <fiprintf+0x20>)
 801b13a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b13e:	6800      	ldr	r0, [r0, #0]
 801b140:	9301      	str	r3, [sp, #4]
 801b142:	f000 f8b3 	bl	801b2ac <_vfiprintf_r>
 801b146:	b002      	add	sp, #8
 801b148:	f85d eb04 	ldr.w	lr, [sp], #4
 801b14c:	b003      	add	sp, #12
 801b14e:	4770      	bx	lr
 801b150:	20000040 	.word	0x20000040

0801b154 <_lseek_r>:
 801b154:	b538      	push	{r3, r4, r5, lr}
 801b156:	4d07      	ldr	r5, [pc, #28]	; (801b174 <_lseek_r+0x20>)
 801b158:	4604      	mov	r4, r0
 801b15a:	4608      	mov	r0, r1
 801b15c:	4611      	mov	r1, r2
 801b15e:	2200      	movs	r2, #0
 801b160:	602a      	str	r2, [r5, #0]
 801b162:	461a      	mov	r2, r3
 801b164:	f7e5 fdc7 	bl	8000cf6 <_lseek>
 801b168:	1c43      	adds	r3, r0, #1
 801b16a:	d102      	bne.n	801b172 <_lseek_r+0x1e>
 801b16c:	682b      	ldr	r3, [r5, #0]
 801b16e:	b103      	cbz	r3, 801b172 <_lseek_r+0x1e>
 801b170:	6023      	str	r3, [r4, #0]
 801b172:	bd38      	pop	{r3, r4, r5, pc}
 801b174:	2000f43c 	.word	0x2000f43c

0801b178 <__swhatbuf_r>:
 801b178:	b570      	push	{r4, r5, r6, lr}
 801b17a:	460e      	mov	r6, r1
 801b17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b180:	2900      	cmp	r1, #0
 801b182:	b096      	sub	sp, #88	; 0x58
 801b184:	4614      	mov	r4, r2
 801b186:	461d      	mov	r5, r3
 801b188:	da07      	bge.n	801b19a <__swhatbuf_r+0x22>
 801b18a:	2300      	movs	r3, #0
 801b18c:	602b      	str	r3, [r5, #0]
 801b18e:	89b3      	ldrh	r3, [r6, #12]
 801b190:	061a      	lsls	r2, r3, #24
 801b192:	d410      	bmi.n	801b1b6 <__swhatbuf_r+0x3e>
 801b194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b198:	e00e      	b.n	801b1b8 <__swhatbuf_r+0x40>
 801b19a:	466a      	mov	r2, sp
 801b19c:	f000 fbac 	bl	801b8f8 <_fstat_r>
 801b1a0:	2800      	cmp	r0, #0
 801b1a2:	dbf2      	blt.n	801b18a <__swhatbuf_r+0x12>
 801b1a4:	9a01      	ldr	r2, [sp, #4]
 801b1a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b1aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b1ae:	425a      	negs	r2, r3
 801b1b0:	415a      	adcs	r2, r3
 801b1b2:	602a      	str	r2, [r5, #0]
 801b1b4:	e7ee      	b.n	801b194 <__swhatbuf_r+0x1c>
 801b1b6:	2340      	movs	r3, #64	; 0x40
 801b1b8:	2000      	movs	r0, #0
 801b1ba:	6023      	str	r3, [r4, #0]
 801b1bc:	b016      	add	sp, #88	; 0x58
 801b1be:	bd70      	pop	{r4, r5, r6, pc}

0801b1c0 <__smakebuf_r>:
 801b1c0:	898b      	ldrh	r3, [r1, #12]
 801b1c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b1c4:	079d      	lsls	r5, r3, #30
 801b1c6:	4606      	mov	r6, r0
 801b1c8:	460c      	mov	r4, r1
 801b1ca:	d507      	bpl.n	801b1dc <__smakebuf_r+0x1c>
 801b1cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b1d0:	6023      	str	r3, [r4, #0]
 801b1d2:	6123      	str	r3, [r4, #16]
 801b1d4:	2301      	movs	r3, #1
 801b1d6:	6163      	str	r3, [r4, #20]
 801b1d8:	b002      	add	sp, #8
 801b1da:	bd70      	pop	{r4, r5, r6, pc}
 801b1dc:	ab01      	add	r3, sp, #4
 801b1de:	466a      	mov	r2, sp
 801b1e0:	f7ff ffca 	bl	801b178 <__swhatbuf_r>
 801b1e4:	9900      	ldr	r1, [sp, #0]
 801b1e6:	4605      	mov	r5, r0
 801b1e8:	4630      	mov	r0, r6
 801b1ea:	f7ff fbe3 	bl	801a9b4 <_malloc_r>
 801b1ee:	b948      	cbnz	r0, 801b204 <__smakebuf_r+0x44>
 801b1f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1f4:	059a      	lsls	r2, r3, #22
 801b1f6:	d4ef      	bmi.n	801b1d8 <__smakebuf_r+0x18>
 801b1f8:	f023 0303 	bic.w	r3, r3, #3
 801b1fc:	f043 0302 	orr.w	r3, r3, #2
 801b200:	81a3      	strh	r3, [r4, #12]
 801b202:	e7e3      	b.n	801b1cc <__smakebuf_r+0xc>
 801b204:	4b0d      	ldr	r3, [pc, #52]	; (801b23c <__smakebuf_r+0x7c>)
 801b206:	62b3      	str	r3, [r6, #40]	; 0x28
 801b208:	89a3      	ldrh	r3, [r4, #12]
 801b20a:	6020      	str	r0, [r4, #0]
 801b20c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b210:	81a3      	strh	r3, [r4, #12]
 801b212:	9b00      	ldr	r3, [sp, #0]
 801b214:	6163      	str	r3, [r4, #20]
 801b216:	9b01      	ldr	r3, [sp, #4]
 801b218:	6120      	str	r0, [r4, #16]
 801b21a:	b15b      	cbz	r3, 801b234 <__smakebuf_r+0x74>
 801b21c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b220:	4630      	mov	r0, r6
 801b222:	f000 fb7b 	bl	801b91c <_isatty_r>
 801b226:	b128      	cbz	r0, 801b234 <__smakebuf_r+0x74>
 801b228:	89a3      	ldrh	r3, [r4, #12]
 801b22a:	f023 0303 	bic.w	r3, r3, #3
 801b22e:	f043 0301 	orr.w	r3, r3, #1
 801b232:	81a3      	strh	r3, [r4, #12]
 801b234:	89a0      	ldrh	r0, [r4, #12]
 801b236:	4305      	orrs	r5, r0
 801b238:	81a5      	strh	r5, [r4, #12]
 801b23a:	e7cd      	b.n	801b1d8 <__smakebuf_r+0x18>
 801b23c:	0801a6b9 	.word	0x0801a6b9

0801b240 <__malloc_lock>:
 801b240:	4801      	ldr	r0, [pc, #4]	; (801b248 <__malloc_lock+0x8>)
 801b242:	f7ff bb30 	b.w	801a8a6 <__retarget_lock_acquire_recursive>
 801b246:	bf00      	nop
 801b248:	2000fb30 	.word	0x2000fb30

0801b24c <__malloc_unlock>:
 801b24c:	4801      	ldr	r0, [pc, #4]	; (801b254 <__malloc_unlock+0x8>)
 801b24e:	f7ff bb2b 	b.w	801a8a8 <__retarget_lock_release_recursive>
 801b252:	bf00      	nop
 801b254:	2000fb30 	.word	0x2000fb30

0801b258 <__sfputc_r>:
 801b258:	6893      	ldr	r3, [r2, #8]
 801b25a:	3b01      	subs	r3, #1
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	b410      	push	{r4}
 801b260:	6093      	str	r3, [r2, #8]
 801b262:	da08      	bge.n	801b276 <__sfputc_r+0x1e>
 801b264:	6994      	ldr	r4, [r2, #24]
 801b266:	42a3      	cmp	r3, r4
 801b268:	db01      	blt.n	801b26e <__sfputc_r+0x16>
 801b26a:	290a      	cmp	r1, #10
 801b26c:	d103      	bne.n	801b276 <__sfputc_r+0x1e>
 801b26e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b272:	f7ff bd9b 	b.w	801adac <__swbuf_r>
 801b276:	6813      	ldr	r3, [r2, #0]
 801b278:	1c58      	adds	r0, r3, #1
 801b27a:	6010      	str	r0, [r2, #0]
 801b27c:	7019      	strb	r1, [r3, #0]
 801b27e:	4608      	mov	r0, r1
 801b280:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b284:	4770      	bx	lr

0801b286 <__sfputs_r>:
 801b286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b288:	4606      	mov	r6, r0
 801b28a:	460f      	mov	r7, r1
 801b28c:	4614      	mov	r4, r2
 801b28e:	18d5      	adds	r5, r2, r3
 801b290:	42ac      	cmp	r4, r5
 801b292:	d101      	bne.n	801b298 <__sfputs_r+0x12>
 801b294:	2000      	movs	r0, #0
 801b296:	e007      	b.n	801b2a8 <__sfputs_r+0x22>
 801b298:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b29c:	463a      	mov	r2, r7
 801b29e:	4630      	mov	r0, r6
 801b2a0:	f7ff ffda 	bl	801b258 <__sfputc_r>
 801b2a4:	1c43      	adds	r3, r0, #1
 801b2a6:	d1f3      	bne.n	801b290 <__sfputs_r+0xa>
 801b2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b2ac <_vfiprintf_r>:
 801b2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2b0:	460d      	mov	r5, r1
 801b2b2:	b09d      	sub	sp, #116	; 0x74
 801b2b4:	4614      	mov	r4, r2
 801b2b6:	4698      	mov	r8, r3
 801b2b8:	4606      	mov	r6, r0
 801b2ba:	b118      	cbz	r0, 801b2c4 <_vfiprintf_r+0x18>
 801b2bc:	6983      	ldr	r3, [r0, #24]
 801b2be:	b90b      	cbnz	r3, 801b2c4 <_vfiprintf_r+0x18>
 801b2c0:	f7ff fa2e 	bl	801a720 <__sinit>
 801b2c4:	4b89      	ldr	r3, [pc, #548]	; (801b4ec <_vfiprintf_r+0x240>)
 801b2c6:	429d      	cmp	r5, r3
 801b2c8:	d11b      	bne.n	801b302 <_vfiprintf_r+0x56>
 801b2ca:	6875      	ldr	r5, [r6, #4]
 801b2cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b2ce:	07d9      	lsls	r1, r3, #31
 801b2d0:	d405      	bmi.n	801b2de <_vfiprintf_r+0x32>
 801b2d2:	89ab      	ldrh	r3, [r5, #12]
 801b2d4:	059a      	lsls	r2, r3, #22
 801b2d6:	d402      	bmi.n	801b2de <_vfiprintf_r+0x32>
 801b2d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b2da:	f7ff fae4 	bl	801a8a6 <__retarget_lock_acquire_recursive>
 801b2de:	89ab      	ldrh	r3, [r5, #12]
 801b2e0:	071b      	lsls	r3, r3, #28
 801b2e2:	d501      	bpl.n	801b2e8 <_vfiprintf_r+0x3c>
 801b2e4:	692b      	ldr	r3, [r5, #16]
 801b2e6:	b9eb      	cbnz	r3, 801b324 <_vfiprintf_r+0x78>
 801b2e8:	4629      	mov	r1, r5
 801b2ea:	4630      	mov	r0, r6
 801b2ec:	f7ff fdc2 	bl	801ae74 <__swsetup_r>
 801b2f0:	b1c0      	cbz	r0, 801b324 <_vfiprintf_r+0x78>
 801b2f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b2f4:	07dc      	lsls	r4, r3, #31
 801b2f6:	d50e      	bpl.n	801b316 <_vfiprintf_r+0x6a>
 801b2f8:	f04f 30ff 	mov.w	r0, #4294967295
 801b2fc:	b01d      	add	sp, #116	; 0x74
 801b2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b302:	4b7b      	ldr	r3, [pc, #492]	; (801b4f0 <_vfiprintf_r+0x244>)
 801b304:	429d      	cmp	r5, r3
 801b306:	d101      	bne.n	801b30c <_vfiprintf_r+0x60>
 801b308:	68b5      	ldr	r5, [r6, #8]
 801b30a:	e7df      	b.n	801b2cc <_vfiprintf_r+0x20>
 801b30c:	4b79      	ldr	r3, [pc, #484]	; (801b4f4 <_vfiprintf_r+0x248>)
 801b30e:	429d      	cmp	r5, r3
 801b310:	bf08      	it	eq
 801b312:	68f5      	ldreq	r5, [r6, #12]
 801b314:	e7da      	b.n	801b2cc <_vfiprintf_r+0x20>
 801b316:	89ab      	ldrh	r3, [r5, #12]
 801b318:	0598      	lsls	r0, r3, #22
 801b31a:	d4ed      	bmi.n	801b2f8 <_vfiprintf_r+0x4c>
 801b31c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b31e:	f7ff fac3 	bl	801a8a8 <__retarget_lock_release_recursive>
 801b322:	e7e9      	b.n	801b2f8 <_vfiprintf_r+0x4c>
 801b324:	2300      	movs	r3, #0
 801b326:	9309      	str	r3, [sp, #36]	; 0x24
 801b328:	2320      	movs	r3, #32
 801b32a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b32e:	f8cd 800c 	str.w	r8, [sp, #12]
 801b332:	2330      	movs	r3, #48	; 0x30
 801b334:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b4f8 <_vfiprintf_r+0x24c>
 801b338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b33c:	f04f 0901 	mov.w	r9, #1
 801b340:	4623      	mov	r3, r4
 801b342:	469a      	mov	sl, r3
 801b344:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b348:	b10a      	cbz	r2, 801b34e <_vfiprintf_r+0xa2>
 801b34a:	2a25      	cmp	r2, #37	; 0x25
 801b34c:	d1f9      	bne.n	801b342 <_vfiprintf_r+0x96>
 801b34e:	ebba 0b04 	subs.w	fp, sl, r4
 801b352:	d00b      	beq.n	801b36c <_vfiprintf_r+0xc0>
 801b354:	465b      	mov	r3, fp
 801b356:	4622      	mov	r2, r4
 801b358:	4629      	mov	r1, r5
 801b35a:	4630      	mov	r0, r6
 801b35c:	f7ff ff93 	bl	801b286 <__sfputs_r>
 801b360:	3001      	adds	r0, #1
 801b362:	f000 80aa 	beq.w	801b4ba <_vfiprintf_r+0x20e>
 801b366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b368:	445a      	add	r2, fp
 801b36a:	9209      	str	r2, [sp, #36]	; 0x24
 801b36c:	f89a 3000 	ldrb.w	r3, [sl]
 801b370:	2b00      	cmp	r3, #0
 801b372:	f000 80a2 	beq.w	801b4ba <_vfiprintf_r+0x20e>
 801b376:	2300      	movs	r3, #0
 801b378:	f04f 32ff 	mov.w	r2, #4294967295
 801b37c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b380:	f10a 0a01 	add.w	sl, sl, #1
 801b384:	9304      	str	r3, [sp, #16]
 801b386:	9307      	str	r3, [sp, #28]
 801b388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b38c:	931a      	str	r3, [sp, #104]	; 0x68
 801b38e:	4654      	mov	r4, sl
 801b390:	2205      	movs	r2, #5
 801b392:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b396:	4858      	ldr	r0, [pc, #352]	; (801b4f8 <_vfiprintf_r+0x24c>)
 801b398:	f7e4 ff2a 	bl	80001f0 <memchr>
 801b39c:	9a04      	ldr	r2, [sp, #16]
 801b39e:	b9d8      	cbnz	r0, 801b3d8 <_vfiprintf_r+0x12c>
 801b3a0:	06d1      	lsls	r1, r2, #27
 801b3a2:	bf44      	itt	mi
 801b3a4:	2320      	movmi	r3, #32
 801b3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b3aa:	0713      	lsls	r3, r2, #28
 801b3ac:	bf44      	itt	mi
 801b3ae:	232b      	movmi	r3, #43	; 0x2b
 801b3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b3b4:	f89a 3000 	ldrb.w	r3, [sl]
 801b3b8:	2b2a      	cmp	r3, #42	; 0x2a
 801b3ba:	d015      	beq.n	801b3e8 <_vfiprintf_r+0x13c>
 801b3bc:	9a07      	ldr	r2, [sp, #28]
 801b3be:	4654      	mov	r4, sl
 801b3c0:	2000      	movs	r0, #0
 801b3c2:	f04f 0c0a 	mov.w	ip, #10
 801b3c6:	4621      	mov	r1, r4
 801b3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b3cc:	3b30      	subs	r3, #48	; 0x30
 801b3ce:	2b09      	cmp	r3, #9
 801b3d0:	d94e      	bls.n	801b470 <_vfiprintf_r+0x1c4>
 801b3d2:	b1b0      	cbz	r0, 801b402 <_vfiprintf_r+0x156>
 801b3d4:	9207      	str	r2, [sp, #28]
 801b3d6:	e014      	b.n	801b402 <_vfiprintf_r+0x156>
 801b3d8:	eba0 0308 	sub.w	r3, r0, r8
 801b3dc:	fa09 f303 	lsl.w	r3, r9, r3
 801b3e0:	4313      	orrs	r3, r2
 801b3e2:	9304      	str	r3, [sp, #16]
 801b3e4:	46a2      	mov	sl, r4
 801b3e6:	e7d2      	b.n	801b38e <_vfiprintf_r+0xe2>
 801b3e8:	9b03      	ldr	r3, [sp, #12]
 801b3ea:	1d19      	adds	r1, r3, #4
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	9103      	str	r1, [sp, #12]
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	bfbb      	ittet	lt
 801b3f4:	425b      	neglt	r3, r3
 801b3f6:	f042 0202 	orrlt.w	r2, r2, #2
 801b3fa:	9307      	strge	r3, [sp, #28]
 801b3fc:	9307      	strlt	r3, [sp, #28]
 801b3fe:	bfb8      	it	lt
 801b400:	9204      	strlt	r2, [sp, #16]
 801b402:	7823      	ldrb	r3, [r4, #0]
 801b404:	2b2e      	cmp	r3, #46	; 0x2e
 801b406:	d10c      	bne.n	801b422 <_vfiprintf_r+0x176>
 801b408:	7863      	ldrb	r3, [r4, #1]
 801b40a:	2b2a      	cmp	r3, #42	; 0x2a
 801b40c:	d135      	bne.n	801b47a <_vfiprintf_r+0x1ce>
 801b40e:	9b03      	ldr	r3, [sp, #12]
 801b410:	1d1a      	adds	r2, r3, #4
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	9203      	str	r2, [sp, #12]
 801b416:	2b00      	cmp	r3, #0
 801b418:	bfb8      	it	lt
 801b41a:	f04f 33ff 	movlt.w	r3, #4294967295
 801b41e:	3402      	adds	r4, #2
 801b420:	9305      	str	r3, [sp, #20]
 801b422:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b508 <_vfiprintf_r+0x25c>
 801b426:	7821      	ldrb	r1, [r4, #0]
 801b428:	2203      	movs	r2, #3
 801b42a:	4650      	mov	r0, sl
 801b42c:	f7e4 fee0 	bl	80001f0 <memchr>
 801b430:	b140      	cbz	r0, 801b444 <_vfiprintf_r+0x198>
 801b432:	2340      	movs	r3, #64	; 0x40
 801b434:	eba0 000a 	sub.w	r0, r0, sl
 801b438:	fa03 f000 	lsl.w	r0, r3, r0
 801b43c:	9b04      	ldr	r3, [sp, #16]
 801b43e:	4303      	orrs	r3, r0
 801b440:	3401      	adds	r4, #1
 801b442:	9304      	str	r3, [sp, #16]
 801b444:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b448:	482c      	ldr	r0, [pc, #176]	; (801b4fc <_vfiprintf_r+0x250>)
 801b44a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b44e:	2206      	movs	r2, #6
 801b450:	f7e4 fece 	bl	80001f0 <memchr>
 801b454:	2800      	cmp	r0, #0
 801b456:	d03f      	beq.n	801b4d8 <_vfiprintf_r+0x22c>
 801b458:	4b29      	ldr	r3, [pc, #164]	; (801b500 <_vfiprintf_r+0x254>)
 801b45a:	bb1b      	cbnz	r3, 801b4a4 <_vfiprintf_r+0x1f8>
 801b45c:	9b03      	ldr	r3, [sp, #12]
 801b45e:	3307      	adds	r3, #7
 801b460:	f023 0307 	bic.w	r3, r3, #7
 801b464:	3308      	adds	r3, #8
 801b466:	9303      	str	r3, [sp, #12]
 801b468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b46a:	443b      	add	r3, r7
 801b46c:	9309      	str	r3, [sp, #36]	; 0x24
 801b46e:	e767      	b.n	801b340 <_vfiprintf_r+0x94>
 801b470:	fb0c 3202 	mla	r2, ip, r2, r3
 801b474:	460c      	mov	r4, r1
 801b476:	2001      	movs	r0, #1
 801b478:	e7a5      	b.n	801b3c6 <_vfiprintf_r+0x11a>
 801b47a:	2300      	movs	r3, #0
 801b47c:	3401      	adds	r4, #1
 801b47e:	9305      	str	r3, [sp, #20]
 801b480:	4619      	mov	r1, r3
 801b482:	f04f 0c0a 	mov.w	ip, #10
 801b486:	4620      	mov	r0, r4
 801b488:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b48c:	3a30      	subs	r2, #48	; 0x30
 801b48e:	2a09      	cmp	r2, #9
 801b490:	d903      	bls.n	801b49a <_vfiprintf_r+0x1ee>
 801b492:	2b00      	cmp	r3, #0
 801b494:	d0c5      	beq.n	801b422 <_vfiprintf_r+0x176>
 801b496:	9105      	str	r1, [sp, #20]
 801b498:	e7c3      	b.n	801b422 <_vfiprintf_r+0x176>
 801b49a:	fb0c 2101 	mla	r1, ip, r1, r2
 801b49e:	4604      	mov	r4, r0
 801b4a0:	2301      	movs	r3, #1
 801b4a2:	e7f0      	b.n	801b486 <_vfiprintf_r+0x1da>
 801b4a4:	ab03      	add	r3, sp, #12
 801b4a6:	9300      	str	r3, [sp, #0]
 801b4a8:	462a      	mov	r2, r5
 801b4aa:	4b16      	ldr	r3, [pc, #88]	; (801b504 <_vfiprintf_r+0x258>)
 801b4ac:	a904      	add	r1, sp, #16
 801b4ae:	4630      	mov	r0, r6
 801b4b0:	f3af 8000 	nop.w
 801b4b4:	4607      	mov	r7, r0
 801b4b6:	1c78      	adds	r0, r7, #1
 801b4b8:	d1d6      	bne.n	801b468 <_vfiprintf_r+0x1bc>
 801b4ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b4bc:	07d9      	lsls	r1, r3, #31
 801b4be:	d405      	bmi.n	801b4cc <_vfiprintf_r+0x220>
 801b4c0:	89ab      	ldrh	r3, [r5, #12]
 801b4c2:	059a      	lsls	r2, r3, #22
 801b4c4:	d402      	bmi.n	801b4cc <_vfiprintf_r+0x220>
 801b4c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b4c8:	f7ff f9ee 	bl	801a8a8 <__retarget_lock_release_recursive>
 801b4cc:	89ab      	ldrh	r3, [r5, #12]
 801b4ce:	065b      	lsls	r3, r3, #25
 801b4d0:	f53f af12 	bmi.w	801b2f8 <_vfiprintf_r+0x4c>
 801b4d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b4d6:	e711      	b.n	801b2fc <_vfiprintf_r+0x50>
 801b4d8:	ab03      	add	r3, sp, #12
 801b4da:	9300      	str	r3, [sp, #0]
 801b4dc:	462a      	mov	r2, r5
 801b4de:	4b09      	ldr	r3, [pc, #36]	; (801b504 <_vfiprintf_r+0x258>)
 801b4e0:	a904      	add	r1, sp, #16
 801b4e2:	4630      	mov	r0, r6
 801b4e4:	f000 f880 	bl	801b5e8 <_printf_i>
 801b4e8:	e7e4      	b.n	801b4b4 <_vfiprintf_r+0x208>
 801b4ea:	bf00      	nop
 801b4ec:	0801f10c 	.word	0x0801f10c
 801b4f0:	0801f12c 	.word	0x0801f12c
 801b4f4:	0801f0ec 	.word	0x0801f0ec
 801b4f8:	0801f202 	.word	0x0801f202
 801b4fc:	0801f20c 	.word	0x0801f20c
 801b500:	00000000 	.word	0x00000000
 801b504:	0801b287 	.word	0x0801b287
 801b508:	0801f208 	.word	0x0801f208

0801b50c <_printf_common>:
 801b50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b510:	4616      	mov	r6, r2
 801b512:	4699      	mov	r9, r3
 801b514:	688a      	ldr	r2, [r1, #8]
 801b516:	690b      	ldr	r3, [r1, #16]
 801b518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b51c:	4293      	cmp	r3, r2
 801b51e:	bfb8      	it	lt
 801b520:	4613      	movlt	r3, r2
 801b522:	6033      	str	r3, [r6, #0]
 801b524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b528:	4607      	mov	r7, r0
 801b52a:	460c      	mov	r4, r1
 801b52c:	b10a      	cbz	r2, 801b532 <_printf_common+0x26>
 801b52e:	3301      	adds	r3, #1
 801b530:	6033      	str	r3, [r6, #0]
 801b532:	6823      	ldr	r3, [r4, #0]
 801b534:	0699      	lsls	r1, r3, #26
 801b536:	bf42      	ittt	mi
 801b538:	6833      	ldrmi	r3, [r6, #0]
 801b53a:	3302      	addmi	r3, #2
 801b53c:	6033      	strmi	r3, [r6, #0]
 801b53e:	6825      	ldr	r5, [r4, #0]
 801b540:	f015 0506 	ands.w	r5, r5, #6
 801b544:	d106      	bne.n	801b554 <_printf_common+0x48>
 801b546:	f104 0a19 	add.w	sl, r4, #25
 801b54a:	68e3      	ldr	r3, [r4, #12]
 801b54c:	6832      	ldr	r2, [r6, #0]
 801b54e:	1a9b      	subs	r3, r3, r2
 801b550:	42ab      	cmp	r3, r5
 801b552:	dc26      	bgt.n	801b5a2 <_printf_common+0x96>
 801b554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b558:	1e13      	subs	r3, r2, #0
 801b55a:	6822      	ldr	r2, [r4, #0]
 801b55c:	bf18      	it	ne
 801b55e:	2301      	movne	r3, #1
 801b560:	0692      	lsls	r2, r2, #26
 801b562:	d42b      	bmi.n	801b5bc <_printf_common+0xb0>
 801b564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b568:	4649      	mov	r1, r9
 801b56a:	4638      	mov	r0, r7
 801b56c:	47c0      	blx	r8
 801b56e:	3001      	adds	r0, #1
 801b570:	d01e      	beq.n	801b5b0 <_printf_common+0xa4>
 801b572:	6823      	ldr	r3, [r4, #0]
 801b574:	68e5      	ldr	r5, [r4, #12]
 801b576:	6832      	ldr	r2, [r6, #0]
 801b578:	f003 0306 	and.w	r3, r3, #6
 801b57c:	2b04      	cmp	r3, #4
 801b57e:	bf08      	it	eq
 801b580:	1aad      	subeq	r5, r5, r2
 801b582:	68a3      	ldr	r3, [r4, #8]
 801b584:	6922      	ldr	r2, [r4, #16]
 801b586:	bf0c      	ite	eq
 801b588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b58c:	2500      	movne	r5, #0
 801b58e:	4293      	cmp	r3, r2
 801b590:	bfc4      	itt	gt
 801b592:	1a9b      	subgt	r3, r3, r2
 801b594:	18ed      	addgt	r5, r5, r3
 801b596:	2600      	movs	r6, #0
 801b598:	341a      	adds	r4, #26
 801b59a:	42b5      	cmp	r5, r6
 801b59c:	d11a      	bne.n	801b5d4 <_printf_common+0xc8>
 801b59e:	2000      	movs	r0, #0
 801b5a0:	e008      	b.n	801b5b4 <_printf_common+0xa8>
 801b5a2:	2301      	movs	r3, #1
 801b5a4:	4652      	mov	r2, sl
 801b5a6:	4649      	mov	r1, r9
 801b5a8:	4638      	mov	r0, r7
 801b5aa:	47c0      	blx	r8
 801b5ac:	3001      	adds	r0, #1
 801b5ae:	d103      	bne.n	801b5b8 <_printf_common+0xac>
 801b5b0:	f04f 30ff 	mov.w	r0, #4294967295
 801b5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5b8:	3501      	adds	r5, #1
 801b5ba:	e7c6      	b.n	801b54a <_printf_common+0x3e>
 801b5bc:	18e1      	adds	r1, r4, r3
 801b5be:	1c5a      	adds	r2, r3, #1
 801b5c0:	2030      	movs	r0, #48	; 0x30
 801b5c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b5c6:	4422      	add	r2, r4
 801b5c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b5cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b5d0:	3302      	adds	r3, #2
 801b5d2:	e7c7      	b.n	801b564 <_printf_common+0x58>
 801b5d4:	2301      	movs	r3, #1
 801b5d6:	4622      	mov	r2, r4
 801b5d8:	4649      	mov	r1, r9
 801b5da:	4638      	mov	r0, r7
 801b5dc:	47c0      	blx	r8
 801b5de:	3001      	adds	r0, #1
 801b5e0:	d0e6      	beq.n	801b5b0 <_printf_common+0xa4>
 801b5e2:	3601      	adds	r6, #1
 801b5e4:	e7d9      	b.n	801b59a <_printf_common+0x8e>
	...

0801b5e8 <_printf_i>:
 801b5e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b5ec:	460c      	mov	r4, r1
 801b5ee:	4691      	mov	r9, r2
 801b5f0:	7e27      	ldrb	r7, [r4, #24]
 801b5f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b5f4:	2f78      	cmp	r7, #120	; 0x78
 801b5f6:	4680      	mov	r8, r0
 801b5f8:	469a      	mov	sl, r3
 801b5fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b5fe:	d807      	bhi.n	801b610 <_printf_i+0x28>
 801b600:	2f62      	cmp	r7, #98	; 0x62
 801b602:	d80a      	bhi.n	801b61a <_printf_i+0x32>
 801b604:	2f00      	cmp	r7, #0
 801b606:	f000 80d8 	beq.w	801b7ba <_printf_i+0x1d2>
 801b60a:	2f58      	cmp	r7, #88	; 0x58
 801b60c:	f000 80a3 	beq.w	801b756 <_printf_i+0x16e>
 801b610:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b618:	e03a      	b.n	801b690 <_printf_i+0xa8>
 801b61a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b61e:	2b15      	cmp	r3, #21
 801b620:	d8f6      	bhi.n	801b610 <_printf_i+0x28>
 801b622:	a001      	add	r0, pc, #4	; (adr r0, 801b628 <_printf_i+0x40>)
 801b624:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b628:	0801b681 	.word	0x0801b681
 801b62c:	0801b695 	.word	0x0801b695
 801b630:	0801b611 	.word	0x0801b611
 801b634:	0801b611 	.word	0x0801b611
 801b638:	0801b611 	.word	0x0801b611
 801b63c:	0801b611 	.word	0x0801b611
 801b640:	0801b695 	.word	0x0801b695
 801b644:	0801b611 	.word	0x0801b611
 801b648:	0801b611 	.word	0x0801b611
 801b64c:	0801b611 	.word	0x0801b611
 801b650:	0801b611 	.word	0x0801b611
 801b654:	0801b7a1 	.word	0x0801b7a1
 801b658:	0801b6c5 	.word	0x0801b6c5
 801b65c:	0801b783 	.word	0x0801b783
 801b660:	0801b611 	.word	0x0801b611
 801b664:	0801b611 	.word	0x0801b611
 801b668:	0801b7c3 	.word	0x0801b7c3
 801b66c:	0801b611 	.word	0x0801b611
 801b670:	0801b6c5 	.word	0x0801b6c5
 801b674:	0801b611 	.word	0x0801b611
 801b678:	0801b611 	.word	0x0801b611
 801b67c:	0801b78b 	.word	0x0801b78b
 801b680:	680b      	ldr	r3, [r1, #0]
 801b682:	1d1a      	adds	r2, r3, #4
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	600a      	str	r2, [r1, #0]
 801b688:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b68c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b690:	2301      	movs	r3, #1
 801b692:	e0a3      	b.n	801b7dc <_printf_i+0x1f4>
 801b694:	6825      	ldr	r5, [r4, #0]
 801b696:	6808      	ldr	r0, [r1, #0]
 801b698:	062e      	lsls	r6, r5, #24
 801b69a:	f100 0304 	add.w	r3, r0, #4
 801b69e:	d50a      	bpl.n	801b6b6 <_printf_i+0xce>
 801b6a0:	6805      	ldr	r5, [r0, #0]
 801b6a2:	600b      	str	r3, [r1, #0]
 801b6a4:	2d00      	cmp	r5, #0
 801b6a6:	da03      	bge.n	801b6b0 <_printf_i+0xc8>
 801b6a8:	232d      	movs	r3, #45	; 0x2d
 801b6aa:	426d      	negs	r5, r5
 801b6ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b6b0:	485e      	ldr	r0, [pc, #376]	; (801b82c <_printf_i+0x244>)
 801b6b2:	230a      	movs	r3, #10
 801b6b4:	e019      	b.n	801b6ea <_printf_i+0x102>
 801b6b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b6ba:	6805      	ldr	r5, [r0, #0]
 801b6bc:	600b      	str	r3, [r1, #0]
 801b6be:	bf18      	it	ne
 801b6c0:	b22d      	sxthne	r5, r5
 801b6c2:	e7ef      	b.n	801b6a4 <_printf_i+0xbc>
 801b6c4:	680b      	ldr	r3, [r1, #0]
 801b6c6:	6825      	ldr	r5, [r4, #0]
 801b6c8:	1d18      	adds	r0, r3, #4
 801b6ca:	6008      	str	r0, [r1, #0]
 801b6cc:	0628      	lsls	r0, r5, #24
 801b6ce:	d501      	bpl.n	801b6d4 <_printf_i+0xec>
 801b6d0:	681d      	ldr	r5, [r3, #0]
 801b6d2:	e002      	b.n	801b6da <_printf_i+0xf2>
 801b6d4:	0669      	lsls	r1, r5, #25
 801b6d6:	d5fb      	bpl.n	801b6d0 <_printf_i+0xe8>
 801b6d8:	881d      	ldrh	r5, [r3, #0]
 801b6da:	4854      	ldr	r0, [pc, #336]	; (801b82c <_printf_i+0x244>)
 801b6dc:	2f6f      	cmp	r7, #111	; 0x6f
 801b6de:	bf0c      	ite	eq
 801b6e0:	2308      	moveq	r3, #8
 801b6e2:	230a      	movne	r3, #10
 801b6e4:	2100      	movs	r1, #0
 801b6e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b6ea:	6866      	ldr	r6, [r4, #4]
 801b6ec:	60a6      	str	r6, [r4, #8]
 801b6ee:	2e00      	cmp	r6, #0
 801b6f0:	bfa2      	ittt	ge
 801b6f2:	6821      	ldrge	r1, [r4, #0]
 801b6f4:	f021 0104 	bicge.w	r1, r1, #4
 801b6f8:	6021      	strge	r1, [r4, #0]
 801b6fa:	b90d      	cbnz	r5, 801b700 <_printf_i+0x118>
 801b6fc:	2e00      	cmp	r6, #0
 801b6fe:	d04d      	beq.n	801b79c <_printf_i+0x1b4>
 801b700:	4616      	mov	r6, r2
 801b702:	fbb5 f1f3 	udiv	r1, r5, r3
 801b706:	fb03 5711 	mls	r7, r3, r1, r5
 801b70a:	5dc7      	ldrb	r7, [r0, r7]
 801b70c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b710:	462f      	mov	r7, r5
 801b712:	42bb      	cmp	r3, r7
 801b714:	460d      	mov	r5, r1
 801b716:	d9f4      	bls.n	801b702 <_printf_i+0x11a>
 801b718:	2b08      	cmp	r3, #8
 801b71a:	d10b      	bne.n	801b734 <_printf_i+0x14c>
 801b71c:	6823      	ldr	r3, [r4, #0]
 801b71e:	07df      	lsls	r7, r3, #31
 801b720:	d508      	bpl.n	801b734 <_printf_i+0x14c>
 801b722:	6923      	ldr	r3, [r4, #16]
 801b724:	6861      	ldr	r1, [r4, #4]
 801b726:	4299      	cmp	r1, r3
 801b728:	bfde      	ittt	le
 801b72a:	2330      	movle	r3, #48	; 0x30
 801b72c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b730:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b734:	1b92      	subs	r2, r2, r6
 801b736:	6122      	str	r2, [r4, #16]
 801b738:	f8cd a000 	str.w	sl, [sp]
 801b73c:	464b      	mov	r3, r9
 801b73e:	aa03      	add	r2, sp, #12
 801b740:	4621      	mov	r1, r4
 801b742:	4640      	mov	r0, r8
 801b744:	f7ff fee2 	bl	801b50c <_printf_common>
 801b748:	3001      	adds	r0, #1
 801b74a:	d14c      	bne.n	801b7e6 <_printf_i+0x1fe>
 801b74c:	f04f 30ff 	mov.w	r0, #4294967295
 801b750:	b004      	add	sp, #16
 801b752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b756:	4835      	ldr	r0, [pc, #212]	; (801b82c <_printf_i+0x244>)
 801b758:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b75c:	6823      	ldr	r3, [r4, #0]
 801b75e:	680e      	ldr	r6, [r1, #0]
 801b760:	061f      	lsls	r7, r3, #24
 801b762:	f856 5b04 	ldr.w	r5, [r6], #4
 801b766:	600e      	str	r6, [r1, #0]
 801b768:	d514      	bpl.n	801b794 <_printf_i+0x1ac>
 801b76a:	07d9      	lsls	r1, r3, #31
 801b76c:	bf44      	itt	mi
 801b76e:	f043 0320 	orrmi.w	r3, r3, #32
 801b772:	6023      	strmi	r3, [r4, #0]
 801b774:	b91d      	cbnz	r5, 801b77e <_printf_i+0x196>
 801b776:	6823      	ldr	r3, [r4, #0]
 801b778:	f023 0320 	bic.w	r3, r3, #32
 801b77c:	6023      	str	r3, [r4, #0]
 801b77e:	2310      	movs	r3, #16
 801b780:	e7b0      	b.n	801b6e4 <_printf_i+0xfc>
 801b782:	6823      	ldr	r3, [r4, #0]
 801b784:	f043 0320 	orr.w	r3, r3, #32
 801b788:	6023      	str	r3, [r4, #0]
 801b78a:	2378      	movs	r3, #120	; 0x78
 801b78c:	4828      	ldr	r0, [pc, #160]	; (801b830 <_printf_i+0x248>)
 801b78e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b792:	e7e3      	b.n	801b75c <_printf_i+0x174>
 801b794:	065e      	lsls	r6, r3, #25
 801b796:	bf48      	it	mi
 801b798:	b2ad      	uxthmi	r5, r5
 801b79a:	e7e6      	b.n	801b76a <_printf_i+0x182>
 801b79c:	4616      	mov	r6, r2
 801b79e:	e7bb      	b.n	801b718 <_printf_i+0x130>
 801b7a0:	680b      	ldr	r3, [r1, #0]
 801b7a2:	6826      	ldr	r6, [r4, #0]
 801b7a4:	6960      	ldr	r0, [r4, #20]
 801b7a6:	1d1d      	adds	r5, r3, #4
 801b7a8:	600d      	str	r5, [r1, #0]
 801b7aa:	0635      	lsls	r5, r6, #24
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	d501      	bpl.n	801b7b4 <_printf_i+0x1cc>
 801b7b0:	6018      	str	r0, [r3, #0]
 801b7b2:	e002      	b.n	801b7ba <_printf_i+0x1d2>
 801b7b4:	0671      	lsls	r1, r6, #25
 801b7b6:	d5fb      	bpl.n	801b7b0 <_printf_i+0x1c8>
 801b7b8:	8018      	strh	r0, [r3, #0]
 801b7ba:	2300      	movs	r3, #0
 801b7bc:	6123      	str	r3, [r4, #16]
 801b7be:	4616      	mov	r6, r2
 801b7c0:	e7ba      	b.n	801b738 <_printf_i+0x150>
 801b7c2:	680b      	ldr	r3, [r1, #0]
 801b7c4:	1d1a      	adds	r2, r3, #4
 801b7c6:	600a      	str	r2, [r1, #0]
 801b7c8:	681e      	ldr	r6, [r3, #0]
 801b7ca:	6862      	ldr	r2, [r4, #4]
 801b7cc:	2100      	movs	r1, #0
 801b7ce:	4630      	mov	r0, r6
 801b7d0:	f7e4 fd0e 	bl	80001f0 <memchr>
 801b7d4:	b108      	cbz	r0, 801b7da <_printf_i+0x1f2>
 801b7d6:	1b80      	subs	r0, r0, r6
 801b7d8:	6060      	str	r0, [r4, #4]
 801b7da:	6863      	ldr	r3, [r4, #4]
 801b7dc:	6123      	str	r3, [r4, #16]
 801b7de:	2300      	movs	r3, #0
 801b7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b7e4:	e7a8      	b.n	801b738 <_printf_i+0x150>
 801b7e6:	6923      	ldr	r3, [r4, #16]
 801b7e8:	4632      	mov	r2, r6
 801b7ea:	4649      	mov	r1, r9
 801b7ec:	4640      	mov	r0, r8
 801b7ee:	47d0      	blx	sl
 801b7f0:	3001      	adds	r0, #1
 801b7f2:	d0ab      	beq.n	801b74c <_printf_i+0x164>
 801b7f4:	6823      	ldr	r3, [r4, #0]
 801b7f6:	079b      	lsls	r3, r3, #30
 801b7f8:	d413      	bmi.n	801b822 <_printf_i+0x23a>
 801b7fa:	68e0      	ldr	r0, [r4, #12]
 801b7fc:	9b03      	ldr	r3, [sp, #12]
 801b7fe:	4298      	cmp	r0, r3
 801b800:	bfb8      	it	lt
 801b802:	4618      	movlt	r0, r3
 801b804:	e7a4      	b.n	801b750 <_printf_i+0x168>
 801b806:	2301      	movs	r3, #1
 801b808:	4632      	mov	r2, r6
 801b80a:	4649      	mov	r1, r9
 801b80c:	4640      	mov	r0, r8
 801b80e:	47d0      	blx	sl
 801b810:	3001      	adds	r0, #1
 801b812:	d09b      	beq.n	801b74c <_printf_i+0x164>
 801b814:	3501      	adds	r5, #1
 801b816:	68e3      	ldr	r3, [r4, #12]
 801b818:	9903      	ldr	r1, [sp, #12]
 801b81a:	1a5b      	subs	r3, r3, r1
 801b81c:	42ab      	cmp	r3, r5
 801b81e:	dcf2      	bgt.n	801b806 <_printf_i+0x21e>
 801b820:	e7eb      	b.n	801b7fa <_printf_i+0x212>
 801b822:	2500      	movs	r5, #0
 801b824:	f104 0619 	add.w	r6, r4, #25
 801b828:	e7f5      	b.n	801b816 <_printf_i+0x22e>
 801b82a:	bf00      	nop
 801b82c:	0801f213 	.word	0x0801f213
 801b830:	0801f224 	.word	0x0801f224

0801b834 <_putc_r>:
 801b834:	b570      	push	{r4, r5, r6, lr}
 801b836:	460d      	mov	r5, r1
 801b838:	4614      	mov	r4, r2
 801b83a:	4606      	mov	r6, r0
 801b83c:	b118      	cbz	r0, 801b846 <_putc_r+0x12>
 801b83e:	6983      	ldr	r3, [r0, #24]
 801b840:	b90b      	cbnz	r3, 801b846 <_putc_r+0x12>
 801b842:	f7fe ff6d 	bl	801a720 <__sinit>
 801b846:	4b1c      	ldr	r3, [pc, #112]	; (801b8b8 <_putc_r+0x84>)
 801b848:	429c      	cmp	r4, r3
 801b84a:	d124      	bne.n	801b896 <_putc_r+0x62>
 801b84c:	6874      	ldr	r4, [r6, #4]
 801b84e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b850:	07d8      	lsls	r0, r3, #31
 801b852:	d405      	bmi.n	801b860 <_putc_r+0x2c>
 801b854:	89a3      	ldrh	r3, [r4, #12]
 801b856:	0599      	lsls	r1, r3, #22
 801b858:	d402      	bmi.n	801b860 <_putc_r+0x2c>
 801b85a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b85c:	f7ff f823 	bl	801a8a6 <__retarget_lock_acquire_recursive>
 801b860:	68a3      	ldr	r3, [r4, #8]
 801b862:	3b01      	subs	r3, #1
 801b864:	2b00      	cmp	r3, #0
 801b866:	60a3      	str	r3, [r4, #8]
 801b868:	da05      	bge.n	801b876 <_putc_r+0x42>
 801b86a:	69a2      	ldr	r2, [r4, #24]
 801b86c:	4293      	cmp	r3, r2
 801b86e:	db1c      	blt.n	801b8aa <_putc_r+0x76>
 801b870:	b2eb      	uxtb	r3, r5
 801b872:	2b0a      	cmp	r3, #10
 801b874:	d019      	beq.n	801b8aa <_putc_r+0x76>
 801b876:	6823      	ldr	r3, [r4, #0]
 801b878:	1c5a      	adds	r2, r3, #1
 801b87a:	6022      	str	r2, [r4, #0]
 801b87c:	701d      	strb	r5, [r3, #0]
 801b87e:	b2ed      	uxtb	r5, r5
 801b880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b882:	07da      	lsls	r2, r3, #31
 801b884:	d405      	bmi.n	801b892 <_putc_r+0x5e>
 801b886:	89a3      	ldrh	r3, [r4, #12]
 801b888:	059b      	lsls	r3, r3, #22
 801b88a:	d402      	bmi.n	801b892 <_putc_r+0x5e>
 801b88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b88e:	f7ff f80b 	bl	801a8a8 <__retarget_lock_release_recursive>
 801b892:	4628      	mov	r0, r5
 801b894:	bd70      	pop	{r4, r5, r6, pc}
 801b896:	4b09      	ldr	r3, [pc, #36]	; (801b8bc <_putc_r+0x88>)
 801b898:	429c      	cmp	r4, r3
 801b89a:	d101      	bne.n	801b8a0 <_putc_r+0x6c>
 801b89c:	68b4      	ldr	r4, [r6, #8]
 801b89e:	e7d6      	b.n	801b84e <_putc_r+0x1a>
 801b8a0:	4b07      	ldr	r3, [pc, #28]	; (801b8c0 <_putc_r+0x8c>)
 801b8a2:	429c      	cmp	r4, r3
 801b8a4:	bf08      	it	eq
 801b8a6:	68f4      	ldreq	r4, [r6, #12]
 801b8a8:	e7d1      	b.n	801b84e <_putc_r+0x1a>
 801b8aa:	4629      	mov	r1, r5
 801b8ac:	4622      	mov	r2, r4
 801b8ae:	4630      	mov	r0, r6
 801b8b0:	f7ff fa7c 	bl	801adac <__swbuf_r>
 801b8b4:	4605      	mov	r5, r0
 801b8b6:	e7e3      	b.n	801b880 <_putc_r+0x4c>
 801b8b8:	0801f10c 	.word	0x0801f10c
 801b8bc:	0801f12c 	.word	0x0801f12c
 801b8c0:	0801f0ec 	.word	0x0801f0ec

0801b8c4 <_read_r>:
 801b8c4:	b538      	push	{r3, r4, r5, lr}
 801b8c6:	4d07      	ldr	r5, [pc, #28]	; (801b8e4 <_read_r+0x20>)
 801b8c8:	4604      	mov	r4, r0
 801b8ca:	4608      	mov	r0, r1
 801b8cc:	4611      	mov	r1, r2
 801b8ce:	2200      	movs	r2, #0
 801b8d0:	602a      	str	r2, [r5, #0]
 801b8d2:	461a      	mov	r2, r3
 801b8d4:	f7e5 f980 	bl	8000bd8 <_read>
 801b8d8:	1c43      	adds	r3, r0, #1
 801b8da:	d102      	bne.n	801b8e2 <_read_r+0x1e>
 801b8dc:	682b      	ldr	r3, [r5, #0]
 801b8de:	b103      	cbz	r3, 801b8e2 <_read_r+0x1e>
 801b8e0:	6023      	str	r3, [r4, #0]
 801b8e2:	bd38      	pop	{r3, r4, r5, pc}
 801b8e4:	2000f43c 	.word	0x2000f43c

0801b8e8 <abort>:
 801b8e8:	b508      	push	{r3, lr}
 801b8ea:	2006      	movs	r0, #6
 801b8ec:	f000 f84e 	bl	801b98c <raise>
 801b8f0:	2001      	movs	r0, #1
 801b8f2:	f7e5 f967 	bl	8000bc4 <_exit>
	...

0801b8f8 <_fstat_r>:
 801b8f8:	b538      	push	{r3, r4, r5, lr}
 801b8fa:	4d07      	ldr	r5, [pc, #28]	; (801b918 <_fstat_r+0x20>)
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	4604      	mov	r4, r0
 801b900:	4608      	mov	r0, r1
 801b902:	4611      	mov	r1, r2
 801b904:	602b      	str	r3, [r5, #0]
 801b906:	f7e5 f9db 	bl	8000cc0 <_fstat>
 801b90a:	1c43      	adds	r3, r0, #1
 801b90c:	d102      	bne.n	801b914 <_fstat_r+0x1c>
 801b90e:	682b      	ldr	r3, [r5, #0]
 801b910:	b103      	cbz	r3, 801b914 <_fstat_r+0x1c>
 801b912:	6023      	str	r3, [r4, #0]
 801b914:	bd38      	pop	{r3, r4, r5, pc}
 801b916:	bf00      	nop
 801b918:	2000f43c 	.word	0x2000f43c

0801b91c <_isatty_r>:
 801b91c:	b538      	push	{r3, r4, r5, lr}
 801b91e:	4d06      	ldr	r5, [pc, #24]	; (801b938 <_isatty_r+0x1c>)
 801b920:	2300      	movs	r3, #0
 801b922:	4604      	mov	r4, r0
 801b924:	4608      	mov	r0, r1
 801b926:	602b      	str	r3, [r5, #0]
 801b928:	f7e5 f9da 	bl	8000ce0 <_isatty>
 801b92c:	1c43      	adds	r3, r0, #1
 801b92e:	d102      	bne.n	801b936 <_isatty_r+0x1a>
 801b930:	682b      	ldr	r3, [r5, #0]
 801b932:	b103      	cbz	r3, 801b936 <_isatty_r+0x1a>
 801b934:	6023      	str	r3, [r4, #0]
 801b936:	bd38      	pop	{r3, r4, r5, pc}
 801b938:	2000f43c 	.word	0x2000f43c

0801b93c <_raise_r>:
 801b93c:	291f      	cmp	r1, #31
 801b93e:	b538      	push	{r3, r4, r5, lr}
 801b940:	4604      	mov	r4, r0
 801b942:	460d      	mov	r5, r1
 801b944:	d904      	bls.n	801b950 <_raise_r+0x14>
 801b946:	2316      	movs	r3, #22
 801b948:	6003      	str	r3, [r0, #0]
 801b94a:	f04f 30ff 	mov.w	r0, #4294967295
 801b94e:	bd38      	pop	{r3, r4, r5, pc}
 801b950:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b952:	b112      	cbz	r2, 801b95a <_raise_r+0x1e>
 801b954:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b958:	b94b      	cbnz	r3, 801b96e <_raise_r+0x32>
 801b95a:	4620      	mov	r0, r4
 801b95c:	f000 f830 	bl	801b9c0 <_getpid_r>
 801b960:	462a      	mov	r2, r5
 801b962:	4601      	mov	r1, r0
 801b964:	4620      	mov	r0, r4
 801b966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b96a:	f000 b817 	b.w	801b99c <_kill_r>
 801b96e:	2b01      	cmp	r3, #1
 801b970:	d00a      	beq.n	801b988 <_raise_r+0x4c>
 801b972:	1c59      	adds	r1, r3, #1
 801b974:	d103      	bne.n	801b97e <_raise_r+0x42>
 801b976:	2316      	movs	r3, #22
 801b978:	6003      	str	r3, [r0, #0]
 801b97a:	2001      	movs	r0, #1
 801b97c:	e7e7      	b.n	801b94e <_raise_r+0x12>
 801b97e:	2400      	movs	r4, #0
 801b980:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b984:	4628      	mov	r0, r5
 801b986:	4798      	blx	r3
 801b988:	2000      	movs	r0, #0
 801b98a:	e7e0      	b.n	801b94e <_raise_r+0x12>

0801b98c <raise>:
 801b98c:	4b02      	ldr	r3, [pc, #8]	; (801b998 <raise+0xc>)
 801b98e:	4601      	mov	r1, r0
 801b990:	6818      	ldr	r0, [r3, #0]
 801b992:	f7ff bfd3 	b.w	801b93c <_raise_r>
 801b996:	bf00      	nop
 801b998:	20000040 	.word	0x20000040

0801b99c <_kill_r>:
 801b99c:	b538      	push	{r3, r4, r5, lr}
 801b99e:	4d07      	ldr	r5, [pc, #28]	; (801b9bc <_kill_r+0x20>)
 801b9a0:	2300      	movs	r3, #0
 801b9a2:	4604      	mov	r4, r0
 801b9a4:	4608      	mov	r0, r1
 801b9a6:	4611      	mov	r1, r2
 801b9a8:	602b      	str	r3, [r5, #0]
 801b9aa:	f7e5 f8f9 	bl	8000ba0 <_kill>
 801b9ae:	1c43      	adds	r3, r0, #1
 801b9b0:	d102      	bne.n	801b9b8 <_kill_r+0x1c>
 801b9b2:	682b      	ldr	r3, [r5, #0]
 801b9b4:	b103      	cbz	r3, 801b9b8 <_kill_r+0x1c>
 801b9b6:	6023      	str	r3, [r4, #0]
 801b9b8:	bd38      	pop	{r3, r4, r5, pc}
 801b9ba:	bf00      	nop
 801b9bc:	2000f43c 	.word	0x2000f43c

0801b9c0 <_getpid_r>:
 801b9c0:	f7e5 b8e6 	b.w	8000b90 <_getpid>

0801b9c4 <_init>:
 801b9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9c6:	bf00      	nop
 801b9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9ca:	bc08      	pop	{r3}
 801b9cc:	469e      	mov	lr, r3
 801b9ce:	4770      	bx	lr

0801b9d0 <_fini>:
 801b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9d2:	bf00      	nop
 801b9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9d6:	bc08      	pop	{r3}
 801b9d8:	469e      	mov	lr, r3
 801b9da:	4770      	bx	lr
